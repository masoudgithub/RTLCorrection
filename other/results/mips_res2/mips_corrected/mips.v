//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Tue Jun 18 03:11:52 2019
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sun Jun 23 10:51:51 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 8
`define MEMORY_CONTROLLER_TAG_SIZE 9
//   %dmem = alloca [64 x i32], align 4
`define TAG_main_0_dmem `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_main_0_dmem_a {`TAG_main_0_dmem, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [5:0] ram_32_address_a;
reg [5:0] ram_32_address_b;
reg ram_32_write_enable_a;
reg ram_32_write_enable_b;
reg [31:0] ram_32_in_a;
reg [31:0] ram_32_in_b;
wire [31:0] ram_32_out_a;
wire [31:0] ram_32_out_b;

//   %dmem = alloca [64 x i32], align 4
ram_dual_port ram_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_32_address_a ),
	.address_b( ram_32_address_b ),
	.wren_a( ram_32_write_enable_a ),
	.wren_b( ram_32_write_enable_b ),
	.data_a( ram_32_in_a ),
	.data_b( ram_32_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_32_out_a ),
	.q_b( ram_32_out_b)
);
defparam ram_32.width_a = 32;
defparam ram_32.width_b = 32;
defparam ram_32.widthad_a = 6;
defparam ram_32.widthad_b = 6;
defparam ram_32.width_be_a = 1;
defparam ram_32.width_be_b = 1;
defparam ram_32.numwords_a = 64;
defparam ram_32.numwords_b = 64;
defparam ram_32.latency = ram_latency;
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_ram_32_a;
assign select_ram_32_a = (tag_a == 2);
reg [ram_latency:0] select_ram_32_reg_a;
wire [31:0] memory_controller_ram_32_out_a;
assign memory_controller_ram_32_out_a = {32{ select_ram_32_reg_a[ram_latency]}} & ram_32_out_a;

always @(*)
begin
	ram_32_address_a = memory_controller_address_a [6-1+2:2] & {6{select_ram_32_a}};
	ram_32_write_enable_a = memory_controller_write_enable_a & select_ram_32_a;
	ram_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_ram_32_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_ram_32_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
end
always @(*)
begin
select_ram_32_reg_a[0] <= select_ram_32_a;
end

reg [2:0] select_not_struct_b;

wire select_ram_32_b;
assign select_ram_32_b = (tag_b == 2);
reg [ram_latency:0] select_ram_32_reg_b;
wire [31:0] memory_controller_ram_32_out_b;
assign memory_controller_ram_32_out_b = {32{ select_ram_32_reg_b[ram_latency]}} & ram_32_out_b;

always @(*)
begin
	ram_32_address_b = memory_controller_address_b [6-1+2:2] & {6{select_ram_32_b}};
	ram_32_write_enable_b = memory_controller_write_enable_b & select_ram_32_b;
	ram_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_ram_32_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_ram_32_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
end
always @(*)
begin
select_ram_32_reg_b[0] <= select_ram_32_b;
end

endmodule 

`timescale 1 ns / 1 ns
module legup_memset_4
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_m,
	arg_c1,
	arg_n
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_legup_memset_4_BB__0_1 = 4'd1;
parameter [3:0] LEGUP_F_legup_memset_4_BB__0_2 = 4'd2;
parameter [3:0] LEGUP_F_legup_memset_4_BB__0_3 = 4'd3;
parameter [3:0] LEGUP_F_legup_memset_4_BB__0_4 = 4'd4;
parameter [3:0] LEGUP_F_legup_memset_4_BB__0_5 = 4'd5;
parameter [3:0] LEGUP_F_legup_memset_4_BB__0_6 = 4'd6;
parameter [3:0] LEGUP_F_legup_memset_4_BB__0_7 = 4'd7;
parameter [3:0] LEGUP_F_legup_memset_4_BB__0_8 = 4'd8;
parameter [3:0] LEGUP_F_legup_memset_4_BB__18_9 = 4'd9;
parameter [3:0] LEGUP_F_legup_memset_4_BB__18_10 = 4'd10;
parameter [3:0] LEGUP_F_legup_memset_4_BB__18_11 = 4'd11;
parameter [3:0] LEGUP_F_legup_memset_4_BB__22_12 = 4'd12;
parameter [3:0] LEGUP_F_legup_memset_4_BB__22_13 = 4'd13;
parameter [3:0] LEGUP_F_legup_memset_4_BB__22_14 = 4'd14;
parameter [3:0] LEGUP_F_legup_memset_4_BB__26_15 = 4'd15;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_m;
input [7:0] arg_c1;
input [31:0] arg_n;
reg [3:0] cur_state;
reg [3:0] next_state;
reg [7:0] legup_memset_4_0_4;
reg [7:0] legup_memset_4_0_4_reg;
reg [31:0] legup_memset_4_0_5;
reg [31:0] legup_memset_4_0_5_reg;
reg [31:0] legup_memset_4_0_6;
reg [31:0] legup_memset_4_0_6_reg;
reg [31:0] legup_memset_4_0_7;
reg [31:0] legup_memset_4_0_7_reg;
reg [31:0] legup_memset_4_0_8;
reg [31:0] legup_memset_4_0_8_reg;
reg [31:0] legup_memset_4_0_9;
reg [31:0] legup_memset_4_0_9_reg;
reg [31:0] legup_memset_4_0_10;
reg [31:0] legup_memset_4_0_10_reg;
reg [31:0] legup_memset_4_0_11;
reg [31:0] legup_memset_4_0_11_reg;
reg [31:0] legup_memset_4_0_12;
reg [31:0] legup_memset_4_0_12_reg;
reg [31:0] legup_memset_4_0_13;
reg [31:0] legup_memset_4_0_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_0_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_0_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_0_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_0_15_reg;
reg [31:0] legup_memset_4_0_16;
reg [31:0] legup_memset_4_0_16_reg;
reg [31:0] legup_memset_4_0_17;
reg [31:0] legup_memset_4_0_17_reg;
reg [31:0] legup_memset_4_18_19;
reg [31:0] legup_memset_4_18_19_reg;
reg [31:0] legup_memset_4_18_20;
reg [31:0] legup_memset_4_18_20_reg;
reg  legup_memset_4_18_21;
reg  legup_memset_4_18_21_reg;
reg [31:0] legup_memset_4_22_23;
reg [31:0] legup_memset_4_22_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_22_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_22_24_reg;
reg [31:0] legup_memset_4_22_gep_int;
reg [31:0] legup_memset_4_22_gep_int_reg;
reg [31:0] legup_memset_4_22_gep;
reg [31:0] legup_memset_4_22_gep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_22_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_22_25_reg;
wire [5:0] imem_address_a;
wire  imem_write_enable_a;
wire [31:0] imem_in_a;
wire [31:0] imem_out_a;
wire [5:0] imem_address_b;
wire  imem_write_enable_b;
wire [31:0] imem_in_b;
wire [31:0] imem_out_b;
wire [4:0] main_0_reg_address_a;
wire  main_0_reg_write_enable_a;
wire [31:0] main_0_reg_in_a;
wire [31:0] main_0_reg_out_a;
wire [4:0] main_0_reg_address_b;
wire  main_0_reg_write_enable_b;
wire [31:0] main_0_reg_in_b;
wire [31:0] main_0_reg_out_b;
wire [5:0] ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire [5:0] ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
reg  legup_memset_4_0_1_address_a;
reg  legup_memset_4_0_1_write_enable_a;
reg [31:0] legup_memset_4_0_1_in_a;
wire [31:0] legup_memset_4_0_1_out_a;
wire  legup_memset_4_0_1_address_b;
wire  legup_memset_4_0_1_write_enable_b;
wire [31:0] legup_memset_4_0_1_in_b;
wire [31:0] legup_memset_4_0_1_out_b;
reg  legup_memset_4_0_2_address_a;
reg  legup_memset_4_0_2_write_enable_a;
reg [7:0] legup_memset_4_0_2_in_a;
wire [7:0] legup_memset_4_0_2_out_a;
wire  legup_memset_4_0_2_address_b;
wire  legup_memset_4_0_2_write_enable_b;
wire [7:0] legup_memset_4_0_2_in_b;
wire [7:0] legup_memset_4_0_2_out_b;
reg  legup_memset_4_0_3_address_a;
reg  legup_memset_4_0_3_write_enable_a;
reg [31:0] legup_memset_4_0_3_in_a;
wire [31:0] legup_memset_4_0_3_out_a;
wire  legup_memset_4_0_3_address_b;
wire  legup_memset_4_0_3_write_enable_b;
wire [31:0] legup_memset_4_0_3_in_b;
wire [31:0] legup_memset_4_0_3_out_b;
reg  legup_memset_4_0_c_address_a;
reg  legup_memset_4_0_c_write_enable_a;
reg [31:0] legup_memset_4_0_c_in_a;
wire [31:0] legup_memset_4_0_c_out_a;
reg  legup_memset_4_0_c_address_b;
reg  legup_memset_4_0_c_write_enable_b;
wire [31:0] legup_memset_4_0_c_in_b;
wire [31:0] legup_memset_4_0_c_out_b;
reg  legup_memset_4_0_s_address_a;
reg  legup_memset_4_0_s_write_enable_a;
reg [31:0] legup_memset_4_0_s_in_a;
wire [31:0] legup_memset_4_0_s_out_a;
reg  legup_memset_4_0_s_address_b;
reg  legup_memset_4_0_s_write_enable_b;
reg [31:0] legup_memset_4_0_s_in_b;
wire [31:0] legup_memset_4_0_s_out_b;
reg [31:0] legup_memset_4_signed_add_32_0_op0;
reg [31:0] legup_memset_4_signed_add_32_0_op1;
reg [31:0] legup_memset_4_signed_add_32_0;

// Local Rams


//   %1 = alloca i8*, align 4
ram_dual_port legup_memset_4_0_1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memset_4_0_1_address_a ),
	.address_b( legup_memset_4_0_1_address_b ),
	.wren_a( legup_memset_4_0_1_write_enable_a ),
	.wren_b( legup_memset_4_0_1_write_enable_b ),
	.data_a( legup_memset_4_0_1_in_a ),
	.data_b( legup_memset_4_0_1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memset_4_0_1_out_a ),
	.q_b( legup_memset_4_0_1_out_b)
);
defparam legup_memset_4_0_1.width_a = 32;
defparam legup_memset_4_0_1.width_b = 32;
defparam legup_memset_4_0_1.widthad_a = 1;
defparam legup_memset_4_0_1.widthad_b = 1;
defparam legup_memset_4_0_1.width_be_a = 1;
defparam legup_memset_4_0_1.width_be_b = 1;
defparam legup_memset_4_0_1.numwords_a = 1;
defparam legup_memset_4_0_1.numwords_b = 1;
defparam legup_memset_4_0_1.latency = 1;


//   %2 = alloca i8, align 1
ram_dual_port legup_memset_4_0_2 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memset_4_0_2_address_a ),
	.address_b( legup_memset_4_0_2_address_b ),
	.wren_a( legup_memset_4_0_2_write_enable_a ),
	.wren_b( legup_memset_4_0_2_write_enable_b ),
	.data_a( legup_memset_4_0_2_in_a ),
	.data_b( legup_memset_4_0_2_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memset_4_0_2_out_a ),
	.q_b( legup_memset_4_0_2_out_b)
);
defparam legup_memset_4_0_2.width_a = 8;
defparam legup_memset_4_0_2.width_b = 8;
defparam legup_memset_4_0_2.widthad_a = 1;
defparam legup_memset_4_0_2.widthad_b = 1;
defparam legup_memset_4_0_2.width_be_a = 1;
defparam legup_memset_4_0_2.width_be_b = 1;
defparam legup_memset_4_0_2.numwords_a = 1;
defparam legup_memset_4_0_2.numwords_b = 1;
defparam legup_memset_4_0_2.latency = 1;


//   %3 = alloca i32, align 4
ram_dual_port legup_memset_4_0_3 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memset_4_0_3_address_a ),
	.address_b( legup_memset_4_0_3_address_b ),
	.wren_a( legup_memset_4_0_3_write_enable_a ),
	.wren_b( legup_memset_4_0_3_write_enable_b ),
	.data_a( legup_memset_4_0_3_in_a ),
	.data_b( legup_memset_4_0_3_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memset_4_0_3_out_a ),
	.q_b( legup_memset_4_0_3_out_b)
);
defparam legup_memset_4_0_3.width_a = 32;
defparam legup_memset_4_0_3.width_b = 32;
defparam legup_memset_4_0_3.widthad_a = 1;
defparam legup_memset_4_0_3.widthad_b = 1;
defparam legup_memset_4_0_3.width_be_a = 1;
defparam legup_memset_4_0_3.width_be_b = 1;
defparam legup_memset_4_0_3.numwords_a = 1;
defparam legup_memset_4_0_3.numwords_b = 1;
defparam legup_memset_4_0_3.latency = 1;


//   %c = alloca i32, align 4
ram_dual_port legup_memset_4_0_c (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memset_4_0_c_address_a ),
	.address_b( legup_memset_4_0_c_address_b ),
	.wren_a( legup_memset_4_0_c_write_enable_a ),
	.wren_b( legup_memset_4_0_c_write_enable_b ),
	.data_a( legup_memset_4_0_c_in_a ),
	.data_b( legup_memset_4_0_c_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memset_4_0_c_out_a ),
	.q_b( legup_memset_4_0_c_out_b)
);
defparam legup_memset_4_0_c.width_a = 32;
defparam legup_memset_4_0_c.width_b = 32;
defparam legup_memset_4_0_c.widthad_a = 1;
defparam legup_memset_4_0_c.widthad_b = 1;
defparam legup_memset_4_0_c.width_be_a = 1;
defparam legup_memset_4_0_c.width_be_b = 1;
defparam legup_memset_4_0_c.numwords_a = 1;
defparam legup_memset_4_0_c.numwords_b = 1;
defparam legup_memset_4_0_c.latency = 1;


//   %s = alloca i32*, align 4
ram_dual_port legup_memset_4_0_s (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memset_4_0_s_address_a ),
	.address_b( legup_memset_4_0_s_address_b ),
	.wren_a( legup_memset_4_0_s_write_enable_a ),
	.wren_b( legup_memset_4_0_s_write_enable_b ),
	.data_a( legup_memset_4_0_s_in_a ),
	.data_b( legup_memset_4_0_s_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memset_4_0_s_out_a ),
	.q_b( legup_memset_4_0_s_out_b)
);
defparam legup_memset_4_0_s.width_a = 32;
defparam legup_memset_4_0_s.width_b = 32;
defparam legup_memset_4_0_s.widthad_a = 1;
defparam legup_memset_4_0_s.widthad_b = 1;
defparam legup_memset_4_0_s.width_be_a = 1;
defparam legup_memset_4_0_s.width_be_b = 1;
defparam legup_memset_4_0_s.numwords_a = 1;
defparam legup_memset_4_0_s.numwords_b = 1;
defparam legup_memset_4_0_s.latency = 1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_legup_memset_4_BB__0_1;
LEGUP_F_legup_memset_4_BB__0_1:
		next_state = LEGUP_F_legup_memset_4_BB__0_2;
LEGUP_F_legup_memset_4_BB__0_2:
		next_state = LEGUP_F_legup_memset_4_BB__0_3;
LEGUP_F_legup_memset_4_BB__0_3:
		next_state = LEGUP_F_legup_memset_4_BB__0_4;
LEGUP_F_legup_memset_4_BB__0_4:
		next_state = LEGUP_F_legup_memset_4_BB__0_5;
LEGUP_F_legup_memset_4_BB__0_5:
		next_state = LEGUP_F_legup_memset_4_BB__0_6;
LEGUP_F_legup_memset_4_BB__0_6:
		next_state = LEGUP_F_legup_memset_4_BB__0_7;
LEGUP_F_legup_memset_4_BB__0_7:
		next_state = LEGUP_F_legup_memset_4_BB__0_8;
LEGUP_F_legup_memset_4_BB__0_8:
		next_state = LEGUP_F_legup_memset_4_BB__18_9;
LEGUP_F_legup_memset_4_BB__18_10:
		next_state = LEGUP_F_legup_memset_4_BB__18_11;
LEGUP_F_legup_memset_4_BB__18_11:
	if ((legup_memset_4_18_21_reg == 1'd1))
		next_state = LEGUP_F_legup_memset_4_BB__22_12;
	else if ((legup_memset_4_18_21_reg == 1'd0))
		next_state = LEGUP_F_legup_memset_4_BB__26_15;
LEGUP_F_legup_memset_4_BB__18_9:
		next_state = LEGUP_F_legup_memset_4_BB__18_10;
LEGUP_F_legup_memset_4_BB__22_12:
		next_state = LEGUP_F_legup_memset_4_BB__22_13;
LEGUP_F_legup_memset_4_BB__22_13:
		next_state = LEGUP_F_legup_memset_4_BB__22_14;
LEGUP_F_legup_memset_4_BB__22_14:
		next_state = LEGUP_F_legup_memset_4_BB__18_9;
LEGUP_F_legup_memset_4_BB__26_15:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %4 = load i8* %2, align 1*/
		legup_memset_4_0_4 = legup_memset_4_0_2_out_a;
end
always @(posedge clk) begin
	/* legup_memset_4: %0*/
	/*   %4 = load i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_3)) begin
		legup_memset_4_0_4_reg <= legup_memset_4_0_4;
		if (start == 1'b0 && ^(legup_memset_4_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %5 = zext i8 %4 to i32*/
		legup_memset_4_0_5 = legup_memset_4_0_4;
end
always @(posedge clk) begin
	/* legup_memset_4: %0*/
	/*   %5 = zext i8 %4 to i32*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_3)) begin
		legup_memset_4_0_5_reg <= legup_memset_4_0_5;
		if (start == 1'b0 && ^(legup_memset_4_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_0_5_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %6 = load i32* %c, align 4*/
		legup_memset_4_0_6 = legup_memset_4_0_c_out_a;
end
always @(posedge clk) begin
	/* legup_memset_4: %0*/
	/*   %6 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_5)) begin
		legup_memset_4_0_6_reg <= legup_memset_4_0_6;
		if (start == 1'b0 && ^(legup_memset_4_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_0_6_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %7 = shl i32 %6, 8*/
		legup_memset_4_0_7 = (legup_memset_4_0_6 <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* legup_memset_4: %0*/
	/*   %7 = shl i32 %6, 8*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_5)) begin
		legup_memset_4_0_7_reg <= legup_memset_4_0_7;
		if (start == 1'b0 && ^(legup_memset_4_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_0_7_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %8 = load i32* %c, align 4*/
		legup_memset_4_0_8 = legup_memset_4_0_c_out_b;
end
always @(posedge clk) begin
	/* legup_memset_4: %0*/
	/*   %8 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_5)) begin
		legup_memset_4_0_8_reg <= legup_memset_4_0_8;
		if (start == 1'b0 && ^(legup_memset_4_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_0_8_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %9 = or i32 %8, %7*/
		legup_memset_4_0_9 = (legup_memset_4_0_8 | legup_memset_4_0_7);
end
always @(posedge clk) begin
	/* legup_memset_4: %0*/
	/*   %9 = or i32 %8, %7*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_5)) begin
		legup_memset_4_0_9_reg <= legup_memset_4_0_9;
		if (start == 1'b0 && ^(legup_memset_4_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_0_9_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %10 = load i32* %c, align 4*/
		legup_memset_4_0_10 = legup_memset_4_0_c_out_a;
end
always @(posedge clk) begin
	/* legup_memset_4: %0*/
	/*   %10 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_7)) begin
		legup_memset_4_0_10_reg <= legup_memset_4_0_10;
		if (start == 1'b0 && ^(legup_memset_4_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_0_10_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %11 = shl i32 %10, 16*/
		legup_memset_4_0_11 = (legup_memset_4_0_10 <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* legup_memset_4: %0*/
	/*   %11 = shl i32 %10, 16*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_7)) begin
		legup_memset_4_0_11_reg <= legup_memset_4_0_11;
		if (start == 1'b0 && ^(legup_memset_4_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_0_11_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %12 = load i32* %c, align 4*/
		legup_memset_4_0_12 = legup_memset_4_0_c_out_b;
end
always @(posedge clk) begin
	/* legup_memset_4: %0*/
	/*   %12 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_7)) begin
		legup_memset_4_0_12_reg <= legup_memset_4_0_12;
		if (start == 1'b0 && ^(legup_memset_4_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_0_12_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %13 = or i32 %12, %11*/
		legup_memset_4_0_13 = (legup_memset_4_0_12 | legup_memset_4_0_11);
end
always @(posedge clk) begin
	/* legup_memset_4: %0*/
	/*   %13 = or i32 %12, %11*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_7)) begin
		legup_memset_4_0_13_reg <= legup_memset_4_0_13;
		if (start == 1'b0 && ^(legup_memset_4_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_0_13_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %14 = load i8** %1, align 4*/
		legup_memset_4_0_14 = legup_memset_4_0_1_out_a;
end
always @(posedge clk) begin
	/* legup_memset_4: %0*/
	/*   %14 = load i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_3)) begin
		legup_memset_4_0_14_reg <= legup_memset_4_0_14;
		if (start == 1'b0 && ^(legup_memset_4_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_0_14_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %15 = bitcast i8* %14 to i32**/
		legup_memset_4_0_15 = legup_memset_4_0_14;
end
always @(posedge clk) begin
	/* legup_memset_4: %0*/
	/*   %15 = bitcast i8* %14 to i32**/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_3)) begin
		legup_memset_4_0_15_reg <= legup_memset_4_0_15;
		if (start == 1'b0 && ^(legup_memset_4_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_0_15_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %16 = load i32* %3, align 4*/
		legup_memset_4_0_16 = legup_memset_4_0_3_out_a;
end
always @(posedge clk) begin
	/* legup_memset_4: %0*/
	/*   %16 = load i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_3)) begin
		legup_memset_4_0_16_reg <= legup_memset_4_0_16;
		if (start == 1'b0 && ^(legup_memset_4_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_0_16_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %17 = lshr i32 %16, 2*/
		legup_memset_4_0_17 = (legup_memset_4_0_16 >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* legup_memset_4: %0*/
	/*   %17 = lshr i32 %16, 2*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_3)) begin
		legup_memset_4_0_17_reg <= legup_memset_4_0_17;
		if (start == 1'b0 && ^(legup_memset_4_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_0_17_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4: %18*/
	/*   %19 = load i32* %3, align 4*/
		legup_memset_4_18_19 = legup_memset_4_0_3_out_a;
end
always @(posedge clk) begin
	/* legup_memset_4: %18*/
	/*   %19 = load i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__18_10)) begin
		legup_memset_4_18_19_reg <= legup_memset_4_18_19;
		if (start == 1'b0 && ^(legup_memset_4_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_18_19_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4: %18*/
	/*   %20 = add i32 %19, -1*/
		legup_memset_4_18_20 = legup_memset_4_signed_add_32_0;
end
always @(posedge clk) begin
	/* legup_memset_4: %18*/
	/*   %20 = add i32 %19, -1*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__18_10)) begin
		legup_memset_4_18_20_reg <= legup_memset_4_18_20;
		if (start == 1'b0 && ^(legup_memset_4_18_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_18_20_reg"); $finish; end
	end
	/* legup_memset_4: %22*/
	/*   %gep = add i32 %gep_int, 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_13)) begin
		legup_memset_4_18_20_reg <= legup_memset_4_22_gep;
		if (start == 1'b0 && ^(legup_memset_4_22_gep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_18_20_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4: %18*/
	/*   %21 = icmp ne i32 %19, 0*/
		legup_memset_4_18_21 = (legup_memset_4_18_19 != 32'd0);
end
always @(posedge clk) begin
	/* legup_memset_4: %18*/
	/*   %21 = icmp ne i32 %19, 0*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__18_10)) begin
		legup_memset_4_18_21_reg <= legup_memset_4_18_21;
		if (start == 1'b0 && ^(legup_memset_4_18_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_18_21_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4: %22*/
	/*   %23 = load i32* %c, align 4*/
		legup_memset_4_22_23 = legup_memset_4_0_c_out_a;
end
always @(posedge clk) begin
	/* legup_memset_4: %22*/
	/*   %23 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_13)) begin
		legup_memset_4_22_23_reg <= legup_memset_4_22_23;
		if (start == 1'b0 && ^(legup_memset_4_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_22_23_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4: %22*/
	/*   %24 = load i32** %s, align 4*/
		legup_memset_4_22_24 = legup_memset_4_0_s_out_a;
end
always @(posedge clk) begin
	/* legup_memset_4: %22*/
	/*   %24 = load i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_13)) begin
		legup_memset_4_22_24_reg <= legup_memset_4_22_24;
		if (start == 1'b0 && ^(legup_memset_4_22_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_22_24_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4: %22*/
	/*   %gep_int = ptrtoint i32* %24 to i32*/
		legup_memset_4_22_gep_int = legup_memset_4_22_24;
end
always @(posedge clk) begin
	/* legup_memset_4: %22*/
	/*   %gep_int = ptrtoint i32* %24 to i32*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_13)) begin
		legup_memset_4_22_gep_int_reg <= legup_memset_4_22_gep_int;
		if (start == 1'b0 && ^(legup_memset_4_22_gep_int) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_22_gep_int_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4: %22*/
	/*   %gep = add i32 %gep_int, 4*/
		legup_memset_4_22_gep = legup_memset_4_signed_add_32_0;
end
always @(*) begin
/* legup_memset_4: %22*/
/*   %gep = add i32 %gep_int, 4*/
	legup_memset_4_22_gep_reg = legup_memset_4_18_20_reg;
end
always @(*) begin
	/* legup_memset_4: %22*/
	/*   %25 = inttoptr i32 %gep to i32**/
		legup_memset_4_22_25 = legup_memset_4_22_gep;
end
always @(posedge clk) begin
	/* legup_memset_4: %22*/
	/*   %25 = inttoptr i32 %gep to i32**/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_13)) begin
		legup_memset_4_22_25_reg <= legup_memset_4_22_25;
		if (start == 1'b0 && ^(legup_memset_4_22_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_22_25_reg"); $finish; end
	end
end
always @(*) begin
	legup_memset_4_0_1_address_a = 1'd0;
	/* legup_memset_4: %0*/
	/*   store i8* %m, i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_1)) begin
		legup_memset_4_0_1_address_a = (1'd0 >>> 3'd2);
	end
	/* legup_memset_4: %0*/
	/*   %14 = load i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_2)) begin
		legup_memset_4_0_1_address_a = (1'd0 >>> 3'd2);
	end
end
always @(*) begin
	legup_memset_4_0_1_write_enable_a = 1'd0;
	/* legup_memset_4: %0*/
	/*   store i8* %m, i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_1)) begin
		legup_memset_4_0_1_write_enable_a = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   %14 = load i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_2)) begin
		legup_memset_4_0_1_write_enable_a = 1'd0;
	end
end
always @(*) begin
	legup_memset_4_0_1_in_a = 1'd0;
	/* legup_memset_4: %0*/
	/*   store i8* %m, i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_1)) begin
		legup_memset_4_0_1_in_a = arg_m;
	end
end
always @(*) begin
	legup_memset_4_0_2_address_a = 1'd0;
	/* legup_memset_4: %0*/
	/*   store i8 %c1, i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_1)) begin
		legup_memset_4_0_2_address_a = (1'd0 >>> 3'd0);
	end
	/* legup_memset_4: %0*/
	/*   %4 = load i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_2)) begin
		legup_memset_4_0_2_address_a = (1'd0 >>> 3'd0);
	end
end
always @(*) begin
	legup_memset_4_0_2_write_enable_a = 1'd0;
	/* legup_memset_4: %0*/
	/*   store i8 %c1, i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_1)) begin
		legup_memset_4_0_2_write_enable_a = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   %4 = load i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_2)) begin
		legup_memset_4_0_2_write_enable_a = 1'd0;
	end
end
always @(*) begin
	legup_memset_4_0_2_in_a = 1'd0;
	/* legup_memset_4: %0*/
	/*   store i8 %c1, i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_1)) begin
		legup_memset_4_0_2_in_a = arg_c1;
	end
end
always @(*) begin
	legup_memset_4_0_3_address_a = 1'd0;
	/* legup_memset_4: %0*/
	/*   store i32 %n, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_1)) begin
		legup_memset_4_0_3_address_a = (1'd0 >>> 3'd2);
	end
	/* legup_memset_4: %0*/
	/*   %16 = load i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_2)) begin
		legup_memset_4_0_3_address_a = (1'd0 >>> 3'd2);
	end
	/* legup_memset_4: %0*/
	/*   store i32 %17, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_3)) begin
		legup_memset_4_0_3_address_a = (1'd0 >>> 3'd2);
	end
	/* legup_memset_4: %18*/
	/*   %19 = load i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__18_9)) begin
		legup_memset_4_0_3_address_a = (1'd0 >>> 3'd2);
	end
	/* legup_memset_4: %18*/
	/*   store i32 %20, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__18_10)) begin
		legup_memset_4_0_3_address_a = (1'd0 >>> 3'd2);
	end
end
always @(*) begin
	legup_memset_4_0_3_write_enable_a = 1'd0;
	/* legup_memset_4: %0*/
	/*   store i32 %n, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_1)) begin
		legup_memset_4_0_3_write_enable_a = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   %16 = load i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_2)) begin
		legup_memset_4_0_3_write_enable_a = 1'd0;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %17, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_3)) begin
		legup_memset_4_0_3_write_enable_a = 1'd1;
	end
	/* legup_memset_4: %18*/
	/*   %19 = load i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__18_9)) begin
		legup_memset_4_0_3_write_enable_a = 1'd0;
	end
	/* legup_memset_4: %18*/
	/*   store i32 %20, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__18_10)) begin
		legup_memset_4_0_3_write_enable_a = 1'd1;
	end
end
always @(*) begin
	legup_memset_4_0_3_in_a = 1'd0;
	/* legup_memset_4: %0*/
	/*   store i32 %n, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_1)) begin
		legup_memset_4_0_3_in_a = arg_n;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %17, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_3)) begin
		legup_memset_4_0_3_in_a = legup_memset_4_0_17;
	end
	/* legup_memset_4: %18*/
	/*   store i32 %20, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__18_10)) begin
		legup_memset_4_0_3_in_a = legup_memset_4_18_20;
	end
end
always @(*) begin
	legup_memset_4_0_c_address_a = 1'd0;
	/* legup_memset_4: %0*/
	/*   store i32 %5, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_3)) begin
		legup_memset_4_0_c_address_a = (1'd0 >>> 3'd2);
	end
	/* legup_memset_4: %0*/
	/*   %6 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_4)) begin
		legup_memset_4_0_c_address_a = (1'd0 >>> 3'd2);
	end
	/* legup_memset_4: %0*/
	/*   store i32 %9, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_5)) begin
		legup_memset_4_0_c_address_a = (1'd0 >>> 3'd2);
	end
	/* legup_memset_4: %0*/
	/*   %10 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_6)) begin
		legup_memset_4_0_c_address_a = (1'd0 >>> 3'd2);
	end
	/* legup_memset_4: %0*/
	/*   store i32 %13, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_7)) begin
		legup_memset_4_0_c_address_a = (1'd0 >>> 3'd2);
	end
	/* legup_memset_4: %22*/
	/*   %23 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_12)) begin
		legup_memset_4_0_c_address_a = (1'd0 >>> 3'd2);
	end
end
always @(*) begin
	legup_memset_4_0_c_write_enable_a = 1'd0;
	/* legup_memset_4: %0*/
	/*   store i32 %5, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_3)) begin
		legup_memset_4_0_c_write_enable_a = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   %6 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_4)) begin
		legup_memset_4_0_c_write_enable_a = 1'd0;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %9, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_5)) begin
		legup_memset_4_0_c_write_enable_a = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   %10 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_6)) begin
		legup_memset_4_0_c_write_enable_a = 1'd0;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %13, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_7)) begin
		legup_memset_4_0_c_write_enable_a = 1'd1;
	end
	/* legup_memset_4: %22*/
	/*   %23 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_12)) begin
		legup_memset_4_0_c_write_enable_a = 1'd0;
	end
end
always @(*) begin
	legup_memset_4_0_c_in_a = 1'd0;
	/* legup_memset_4: %0*/
	/*   store i32 %5, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_3)) begin
		legup_memset_4_0_c_in_a = legup_memset_4_0_5;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %9, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_5)) begin
		legup_memset_4_0_c_in_a = legup_memset_4_0_9;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %13, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_7)) begin
		legup_memset_4_0_c_in_a = legup_memset_4_0_13;
	end
end
always @(*) begin
	legup_memset_4_0_c_address_b = 1'd0;
	/* legup_memset_4: %0*/
	/*   %8 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_4)) begin
		legup_memset_4_0_c_address_b = (1'd0 >>> 3'd2);
	end
	/* legup_memset_4: %0*/
	/*   %12 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_6)) begin
		legup_memset_4_0_c_address_b = (1'd0 >>> 3'd2);
	end
end
always @(*) begin
	legup_memset_4_0_c_write_enable_b = 1'd0;
	/* legup_memset_4: %0*/
	/*   %8 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_4)) begin
		legup_memset_4_0_c_write_enable_b = 1'd0;
	end
	/* legup_memset_4: %0*/
	/*   %12 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_6)) begin
		legup_memset_4_0_c_write_enable_b = 1'd0;
	end
end
always @(*) begin
	legup_memset_4_0_s_address_a = 1'd0;
	/* legup_memset_4: %0*/
	/*   store i32* %15, i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_3)) begin
		legup_memset_4_0_s_address_a = (1'd0 >>> 3'd2);
	end
	/* legup_memset_4: %22*/
	/*   %24 = load i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_12)) begin
		legup_memset_4_0_s_address_a = (1'd0 >>> 3'd2);
	end
	/* legup_memset_4: %22*/
	/*   store i32 %23, i32* %24, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_13)) begin
		legup_memset_4_0_s_address_a = (legup_memset_4_22_24 >>> 3'd2);
	end
end
always @(*) begin
	legup_memset_4_0_s_write_enable_a = 1'd0;
	/* legup_memset_4: %0*/
	/*   store i32* %15, i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_3)) begin
		legup_memset_4_0_s_write_enable_a = 1'd1;
	end
	/* legup_memset_4: %22*/
	/*   %24 = load i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_12)) begin
		legup_memset_4_0_s_write_enable_a = 1'd0;
	end
	/* legup_memset_4: %22*/
	/*   store i32 %23, i32* %24, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_13)) begin
		legup_memset_4_0_s_write_enable_a = 1'd1;
	end
end
always @(*) begin
	legup_memset_4_0_s_in_a = 1'd0;
	/* legup_memset_4: %0*/
	/*   store i32* %15, i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_3)) begin
		legup_memset_4_0_s_in_a = legup_memset_4_0_15;
	end
	/* legup_memset_4: %22*/
	/*   store i32 %23, i32* %24, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_13)) begin
		legup_memset_4_0_s_in_a = legup_memset_4_22_23;
	end
end
always @(*) begin
	legup_memset_4_0_s_address_b = 1'd0;
	/* legup_memset_4: %22*/
	/*   store i32* %25, i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_13)) begin
		legup_memset_4_0_s_address_b = (1'd0 >>> 3'd2);
	end
end
always @(*) begin
	legup_memset_4_0_s_write_enable_b = 1'd0;
	/* legup_memset_4: %22*/
	/*   store i32* %25, i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_13)) begin
		legup_memset_4_0_s_write_enable_b = 1'd1;
	end
end
always @(*) begin
	legup_memset_4_0_s_in_b = 1'd0;
	/* legup_memset_4: %22*/
	/*   store i32* %25, i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_13)) begin
		legup_memset_4_0_s_in_b = legup_memset_4_22_25;
	end
end
always @(*) begin
	/* legup_memset_4: %18*/
	/*   %20 = add i32 %19, -1*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__18_10)) begin
		legup_memset_4_signed_add_32_0_op0 = legup_memset_4_18_19;
	end
	/* legup_memset_4: %22*/
	/*   %gep = add i32 %gep_int, 4*/
	else /* if ((cur_state == LEGUP_F_legup_memset_4_BB__22_13)) */ begin
		legup_memset_4_signed_add_32_0_op0 = legup_memset_4_22_gep_int;
	end
end
always @(*) begin
	/* legup_memset_4: %18*/
	/*   %20 = add i32 %19, -1*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__18_10)) begin
		legup_memset_4_signed_add_32_0_op1 = -32'd1;
	end
	/* legup_memset_4: %22*/
	/*   %gep = add i32 %gep_int, 4*/
	else /* if ((cur_state == LEGUP_F_legup_memset_4_BB__22_13)) */ begin
		legup_memset_4_signed_add_32_0_op1 = 32'd4;
	end
end
always @(*) begin
	legup_memset_4_signed_add_32_0 = (legup_memset_4_signed_add_32_0_op0 + legup_memset_4_signed_add_32_0_op1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* legup_memset_4: %26*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__26_15)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_main_BB__0_1 = 8'd1;
parameter [7:0] LEGUP_F_main_BB__0_3 = 8'd3;
parameter [7:0] LEGUP_F_main_BB__2_4 = 8'd4;
parameter [7:0] LEGUP_F_main_BB__2_5 = 8'd5;
parameter [7:0] LEGUP_F_main_BB__2_6 = 8'd6;
parameter [7:0] LEGUP_F_main_BB_preheader14_7 = 8'd7;
parameter [7:0] LEGUP_F_main_BB_preheader14_8 = 8'd8;
parameter [7:0] LEGUP_F_main_BB_preheader14_9 = 8'd9;
parameter [7:0] LEGUP_F_main_BB_preheader14_10 = 8'd10;
parameter [7:0] LEGUP_F_main_BB_preheader14_11 = 8'd11;
parameter [7:0] LEGUP_F_main_BB_preheader14_12 = 8'd12;
parameter [7:0] LEGUP_F_main_BB_preheader14_13 = 8'd13;
parameter [7:0] LEGUP_F_main_BB_preheader14_14 = 8'd14;
parameter [7:0] LEGUP_F_main_BB_preheader14_15 = 8'd15;
parameter [7:0] LEGUP_F_main_BB_preheader14_16 = 8'd16;
parameter [7:0] LEGUP_F_main_BB__16_17 = 8'd17;
parameter [7:0] LEGUP_F_main_BB__16_18 = 8'd18;
parameter [7:0] LEGUP_F_main_BB__16_19 = 8'd19;
parameter [7:0] LEGUP_F_main_BB__23_20 = 8'd20;
parameter [7:0] LEGUP_F_main_BB__33_21 = 8'd21;
parameter [7:0] LEGUP_F_main_BB__33_22 = 8'd22;
parameter [7:0] LEGUP_F_main_BB__33_23 = 8'd23;
parameter [7:0] LEGUP_F_main_BB__33_24 = 8'd24;
parameter [7:0] LEGUP_F_main_BB__33_25 = 8'd25;
parameter [7:0] LEGUP_F_main_BB__42_26 = 8'd26;
parameter [7:0] LEGUP_F_main_BB__42_27 = 8'd27;
parameter [7:0] LEGUP_F_main_BB__42_28 = 8'd28;
parameter [7:0] LEGUP_F_main_BB__42_29 = 8'd29;
parameter [7:0] LEGUP_F_main_BB__42_30 = 8'd30;
parameter [7:0] LEGUP_F_main_BB__51_31 = 8'd31;
parameter [7:0] LEGUP_F_main_BB__51_32 = 8'd32;
parameter [7:0] LEGUP_F_main_BB__51_33 = 8'd33;
parameter [7:0] LEGUP_F_main_BB__51_34 = 8'd34;
parameter [7:0] LEGUP_F_main_BB__66_35 = 8'd35;
parameter [7:0] LEGUP_F_main_BB__66_36 = 8'd36;
parameter [7:0] LEGUP_F_main_BB__66_37 = 8'd37;
parameter [7:0] LEGUP_F_main_BB__66_38 = 8'd38;
parameter [7:0] LEGUP_F_main_BB__77_39 = 8'd39;
parameter [7:0] LEGUP_F_main_BB__77_40 = 8'd40;
parameter [7:0] LEGUP_F_main_BB__77_41 = 8'd41;
parameter [7:0] LEGUP_F_main_BB__79_42 = 8'd42;
parameter [7:0] LEGUP_F_main_BB__79_43 = 8'd43;
parameter [7:0] LEGUP_F_main_BB__79_44 = 8'd44;
parameter [7:0] LEGUP_F_main_BB__81_45 = 8'd45;
parameter [7:0] LEGUP_F_main_BB__81_46 = 8'd46;
parameter [7:0] LEGUP_F_main_BB__81_47 = 8'd47;
parameter [7:0] LEGUP_F_main_BB__81_48 = 8'd48;
parameter [7:0] LEGUP_F_main_BB__88_49 = 8'd49;
parameter [7:0] LEGUP_F_main_BB__88_50 = 8'd50;
parameter [7:0] LEGUP_F_main_BB__88_51 = 8'd51;
parameter [7:0] LEGUP_F_main_BB__88_52 = 8'd52;
parameter [7:0] LEGUP_F_main_BB__95_53 = 8'd53;
parameter [7:0] LEGUP_F_main_BB__95_54 = 8'd54;
parameter [7:0] LEGUP_F_main_BB__95_55 = 8'd55;
parameter [7:0] LEGUP_F_main_BB__95_56 = 8'd56;
parameter [7:0] LEGUP_F_main_BB__102_57 = 8'd57;
parameter [7:0] LEGUP_F_main_BB__102_58 = 8'd58;
parameter [7:0] LEGUP_F_main_BB__102_59 = 8'd59;
parameter [7:0] LEGUP_F_main_BB__102_60 = 8'd60;
parameter [7:0] LEGUP_F_main_BB__107_61 = 8'd61;
parameter [7:0] LEGUP_F_main_BB__107_62 = 8'd62;
parameter [7:0] LEGUP_F_main_BB__107_63 = 8'd63;
parameter [7:0] LEGUP_F_main_BB__107_64 = 8'd64;
parameter [7:0] LEGUP_F_main_BB__112_65 = 8'd65;
parameter [7:0] LEGUP_F_main_BB__112_66 = 8'd66;
parameter [7:0] LEGUP_F_main_BB__112_67 = 8'd67;
parameter [7:0] LEGUP_F_main_BB__112_68 = 8'd68;
parameter [7:0] LEGUP_F_main_BB__119_69 = 8'd69;
parameter [7:0] LEGUP_F_main_BB__119_70 = 8'd70;
parameter [7:0] LEGUP_F_main_BB__119_71 = 8'd71;
parameter [7:0] LEGUP_F_main_BB__119_72 = 8'd72;
parameter [7:0] LEGUP_F_main_BB__126_73 = 8'd73;
parameter [7:0] LEGUP_F_main_BB__126_74 = 8'd74;
parameter [7:0] LEGUP_F_main_BB__126_75 = 8'd75;
parameter [7:0] LEGUP_F_main_BB__126_76 = 8'd76;
parameter [7:0] LEGUP_F_main_BB__134_77 = 8'd77;
parameter [7:0] LEGUP_F_main_BB__134_78 = 8'd78;
parameter [7:0] LEGUP_F_main_BB__134_79 = 8'd79;
parameter [7:0] LEGUP_F_main_BB__134_80 = 8'd80;
parameter [7:0] LEGUP_F_main_BB__142_81 = 8'd81;
parameter [7:0] LEGUP_F_main_BB__142_82 = 8'd82;
parameter [7:0] LEGUP_F_main_BB__142_83 = 8'd83;
parameter [7:0] LEGUP_F_main_BB__145_84 = 8'd84;
parameter [7:0] LEGUP_F_main_BB__148_85 = 8'd85;
parameter [7:0] LEGUP_F_main_BB__148_86 = 8'd86;
parameter [7:0] LEGUP_F_main_BB__151_87 = 8'd87;
parameter [7:0] LEGUP_F_main_BB__156_88 = 8'd88;
parameter [7:0] LEGUP_F_main_BB__156_89 = 8'd89;
parameter [7:0] LEGUP_F_main_BB__156_90 = 8'd90;
parameter [7:0] LEGUP_F_main_BB__156_91 = 8'd91;
parameter [7:0] LEGUP_F_main_BB__162_92 = 8'd92;
parameter [7:0] LEGUP_F_main_BB__162_93 = 8'd93;
parameter [7:0] LEGUP_F_main_BB__162_94 = 8'd94;
parameter [7:0] LEGUP_F_main_BB__162_95 = 8'd95;
parameter [7:0] LEGUP_F_main_BB__168_96 = 8'd96;
parameter [7:0] LEGUP_F_main_BB__168_97 = 8'd97;
parameter [7:0] LEGUP_F_main_BB__168_98 = 8'd98;
parameter [7:0] LEGUP_F_main_BB__168_99 = 8'd99;
parameter [7:0] LEGUP_F_main_BB__174_100 = 8'd100;
parameter [7:0] LEGUP_F_main_BB__174_101 = 8'd101;
parameter [7:0] LEGUP_F_main_BB__174_102 = 8'd102;
parameter [7:0] LEGUP_F_main_BB__174_103 = 8'd103;
parameter [7:0] LEGUP_F_main_BB__180_104 = 8'd104;
parameter [7:0] LEGUP_F_main_BB__180_105 = 8'd105;
parameter [7:0] LEGUP_F_main_BB__180_106 = 8'd106;
parameter [7:0] LEGUP_F_main_BB__180_107 = 8'd107;
parameter [7:0] LEGUP_F_main_BB__180_108 = 8'd108;
parameter [7:0] LEGUP_F_main_BB__180_109 = 8'd109;
parameter [7:0] LEGUP_F_main_BB__180_110 = 8'd110;
parameter [7:0] LEGUP_F_main_BB__180_111 = 8'd111;
parameter [7:0] LEGUP_F_main_BB__189_112 = 8'd112;
parameter [7:0] LEGUP_F_main_BB__189_113 = 8'd113;
parameter [7:0] LEGUP_F_main_BB__189_114 = 8'd114;
parameter [7:0] LEGUP_F_main_BB__189_115 = 8'd115;
parameter [7:0] LEGUP_F_main_BB__189_116 = 8'd116;
parameter [7:0] LEGUP_F_main_BB__189_117 = 8'd117;
parameter [7:0] LEGUP_F_main_BB__198_118 = 8'd118;
parameter [7:0] LEGUP_F_main_BB__198_119 = 8'd119;
parameter [7:0] LEGUP_F_main_BB__198_120 = 8'd120;
parameter [7:0] LEGUP_F_main_BB__200_121 = 8'd121;
parameter [7:0] LEGUP_F_main_BB__200_122 = 8'd122;
parameter [7:0] LEGUP_F_main_BB__200_123 = 8'd123;
parameter [7:0] LEGUP_F_main_BB__206_124 = 8'd124;
parameter [7:0] LEGUP_F_main_BB__209_125 = 8'd125;
parameter [7:0] LEGUP_F_main_BB__209_126 = 8'd126;
parameter [7:0] LEGUP_F_main_BB__209_127 = 8'd127;
parameter [7:0] LEGUP_F_main_BB__215_128 = 8'd128;
parameter [7:0] LEGUP_F_main_BB__218_129 = 8'd129;
parameter [7:0] LEGUP_F_main_BB__218_130 = 8'd130;
parameter [7:0] LEGUP_F_main_BB__218_131 = 8'd131;
parameter [7:0] LEGUP_F_main_BB__222_132 = 8'd132;
parameter [7:0] LEGUP_F_main_BB__225_133 = 8'd133;
parameter [7:0] LEGUP_F_main_BB__225_134 = 8'd134;
parameter [7:0] LEGUP_F_main_BB__225_135 = 8'd135;
parameter [7:0] LEGUP_F_main_BB__225_136 = 8'd136;
parameter [7:0] LEGUP_F_main_BB__232_137 = 8'd137;
parameter [7:0] LEGUP_F_main_BB__232_138 = 8'd138;
parameter [7:0] LEGUP_F_main_BB__232_139 = 8'd139;
parameter [7:0] LEGUP_F_main_BB__232_140 = 8'd140;
parameter [7:0] LEGUP_F_main_BB_thread_141 = 8'd141;
parameter [7:0] LEGUP_F_main_BB_thread_142 = 8'd142;
parameter [7:0] LEGUP_F_main_BB__240_143 = 8'd143;
parameter [7:0] LEGUP_F_main_BB__240_144 = 8'd144;
parameter [7:0] LEGUP_F_main_BB_loopexit_145 = 8'd145;
parameter [7:0] LEGUP_F_main_BB_loopexit_146 = 8'd146;
parameter [7:0] LEGUP_F_main_BB_loopexit_147 = 8'd147;
parameter [7:0] LEGUP_F_main_BB_loopexit_148 = 8'd148;
parameter [7:0] LEGUP_F_main_BB_loopexit_149 = 8'd149;
parameter [7:0] LEGUP_F_main_BB_loopexit_150 = 8'd150;
parameter [7:0] LEGUP_F_main_BB__280_151 = 8'd151;
parameter [7:0] LEGUP_F_main_BB__282_152 = 8'd152;
parameter [7:0] LEGUP_F_main_BB__284_153 = 8'd153;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [7:0] LEGUP_function_call_2 = 8'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_1_reg;
reg [31:0] main_2_i012;
reg [31:0] main_2_i012_reg;
reg [31:0] main_2_gep_int;
reg [31:0] main_2_gep_int_reg;
reg [31:0] main_2_gep_array;
reg [31:0] main_2_gep_array_reg;
reg [31:0] main_2_gep;
reg [31:0] main_2_gep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_3_reg;
reg [31:0] main_2_4;
reg [31:0] main_2_4_reg;
reg  main_2_exitcond;
reg  main_2_exitcond_reg;
reg [31:0] main_preheader14_gep_int1;
reg [31:0] main_preheader14_gep_int1_reg;
reg [31:0] main_preheader14_gep2;
reg [31:0] main_preheader14_gep2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_5_reg;
reg [31:0] main_preheader14_gep_int3;
reg [31:0] main_preheader14_gep_int3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_6_reg;
reg [31:0] main_preheader14_gep_int4;
reg [31:0] main_preheader14_gep_int4_reg;
reg [31:0] main_preheader14_gep5;
reg [31:0] main_preheader14_gep5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_7_reg;
reg [31:0] main_preheader14_gep_int6;
reg [31:0] main_preheader14_gep_int6_reg;
reg [31:0] main_preheader14_gep7;
reg [31:0] main_preheader14_gep7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_8_reg;
reg [31:0] main_preheader14_gep_int8;
reg [31:0] main_preheader14_gep_int8_reg;
reg [31:0] main_preheader14_gep9;
reg [31:0] main_preheader14_gep9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_9_reg;
reg [31:0] main_preheader14_gep_int10;
reg [31:0] main_preheader14_gep_int10_reg;
reg [31:0] main_preheader14_gep11;
reg [31:0] main_preheader14_gep11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_10_reg;
reg [31:0] main_preheader14_gep_int12;
reg [31:0] main_preheader14_gep_int12_reg;
reg [31:0] main_preheader14_gep13;
reg [31:0] main_preheader14_gep13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_11_reg;
reg [31:0] main_preheader14_gep_int14;
reg [31:0] main_preheader14_gep_int14_reg;
reg [31:0] main_preheader14_gep15;
reg [31:0] main_preheader14_gep15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_12_reg;
reg [31:0] main_preheader14_gep_int16;
reg [31:0] main_preheader14_gep_int16_reg;
reg [31:0] main_preheader14_gep17;
reg [31:0] main_preheader14_gep17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_13_reg;
reg [31:0] main_preheader14_gep_int18;
reg [31:0] main_preheader14_gep_int18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_14_reg;
reg [31:0] main_preheader14_gep_int19;
reg [31:0] main_preheader14_gep_int19_reg;
reg [31:0] main_preheader14_gep20;
reg [31:0] main_preheader14_gep20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_15_reg;
reg [31:0] main_16_pc0;
reg [31:0] main_16_pc0_reg;
reg [31:0] main_16_Lo0;
reg [31:0] main_16_Lo0_reg;
reg [31:0] main_16_Hi0;
reg [31:0] main_16_Hi0_reg;
reg [31:0] main_16_n_inst0;
reg [31:0] main_16_n_inst0_reg;
reg [31:0] main_16_17;
reg [31:0] main_16_17_reg;
reg [31:0] main_16_18;
reg [31:0] main_16_18_reg;
reg [31:0] main_16_gep_int21;
reg [31:0] main_16_gep_int21_reg;
reg [31:0] main_16_gep_array22;
reg [31:0] main_16_gep_array22_reg;
reg [31:0] main_16_gep23;
reg [31:0] main_16_gep23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_16_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_16_19_reg;
reg [31:0] main_16_20;
reg [31:0] main_16_20_reg;
reg [31:0] main_16_21;
reg [31:0] main_16_21_reg;
reg [31:0] main_16_22;
reg [31:0] main_16_22_reg;
reg [31:0] main_23_24;
reg [31:0] main_23_24_reg;
reg [31:0] main_23_25;
reg [31:0] main_23_25_reg;
reg [31:0] main_23_26;
reg [31:0] main_23_26_reg;
reg [31:0] main_23_27;
reg [31:0] main_23_27_reg;
reg [31:0] main_23_28;
reg [31:0] main_23_28_reg;
reg [31:0] main_23_29;
reg [31:0] main_23_29_reg;
reg [31:0] main_23_30;
reg [31:0] main_23_30_reg;
reg [31:0] main_23_31;
reg [31:0] main_23_31_reg;
reg [31:0] main_23_32;
reg [31:0] main_23_32_reg;
reg [31:0] main_33_gep_int24;
reg [31:0] main_33_gep_int24_reg;
reg [31:0] main_33_gep_array25;
reg [31:0] main_33_gep_array25_reg;
reg [31:0] main_33_gep26;
reg [31:0] main_33_gep26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_34_reg;
reg [31:0] main_33_35;
reg [31:0] main_33_35_reg;
reg [31:0] main_33_gep_int27;
reg [31:0] main_33_gep_int27_reg;
reg [31:0] main_33_gep_array28;
reg [31:0] main_33_gep_array28_reg;
reg [31:0] main_33_gep29;
reg [31:0] main_33_gep29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_36_reg;
reg [31:0] main_33_37;
reg [31:0] main_33_37_reg;
reg [31:0] main_33_38;
reg [31:0] main_33_38_reg;
reg [31:0] main_33_gep_int30;
reg [31:0] main_33_gep_int30_reg;
reg [31:0] main_33_gep_array31;
reg [31:0] main_33_gep_array31_reg;
reg [31:0] main_33_gep32;
reg [31:0] main_33_gep32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_39_reg;
reg [31:0] main_33_40;
reg [31:0] main_33_40_reg;
reg [31:0] main_33_41;
reg [31:0] main_33_41_reg;
reg [31:0] main_42_gep_int33;
reg [31:0] main_42_gep_int33_reg;
reg [31:0] main_42_gep_array34;
reg [31:0] main_42_gep_array34_reg;
reg [31:0] main_42_gep35;
reg [31:0] main_42_gep35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_42_43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_42_43_reg;
reg [31:0] main_42_44;
reg [31:0] main_42_44_reg;
reg [31:0] main_42_gep_int36;
reg [31:0] main_42_gep_int36_reg;
reg [31:0] main_42_gep_array37;
reg [31:0] main_42_gep_array37_reg;
reg [31:0] main_42_gep38;
reg [31:0] main_42_gep38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_42_45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_42_45_reg;
reg [31:0] main_42_46;
reg [31:0] main_42_46_reg;
reg [31:0] main_42_47;
reg [31:0] main_42_47_reg;
reg [31:0] main_42_gep_int39;
reg [31:0] main_42_gep_int39_reg;
reg [31:0] main_42_gep_array40;
reg [31:0] main_42_gep_array40_reg;
reg [31:0] main_42_gep41;
reg [31:0] main_42_gep41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_42_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_42_48_reg;
reg [31:0] main_42_49;
reg [31:0] main_42_49_reg;
reg [31:0] main_42_50;
reg [31:0] main_42_50_reg;
reg [31:0] main_51_gep_int42;
reg [31:0] main_51_gep_int42_reg;
reg [31:0] main_51_gep_array43;
reg [31:0] main_51_gep_array43_reg;
reg [31:0] main_51_gep44;
reg [31:0] main_51_gep44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_51_52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_51_52_reg;
reg [31:0] main_51_53;
reg [31:0] main_51_53_reg;
reg [63:0] main_51_54;
reg [63:0] main_51_54_reg;
reg [31:0] main_51_gep_int45;
reg [31:0] main_51_gep_int45_reg;
reg [31:0] main_51_gep_array46;
reg [31:0] main_51_gep_array46_reg;
reg [31:0] main_51_gep47;
reg [31:0] main_51_gep47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_51_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_51_55_reg;
reg [31:0] main_51_56;
reg [31:0] main_51_56_reg;
reg [63:0] main_51_57;
reg [63:0] main_51_57_reg;
reg [63:0] main_51_58;
reg [63:0] main_51_58_reg;
reg [31:0] main_51_gep_int48;
reg [31:0] main_51_gep_int48_reg;
reg [31:0] main_51_gep_array49;
reg [31:0] main_51_gep_array49_reg;
reg [31:0] main_51_gep50;
reg [31:0] main_51_gep50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_51_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_51_59_reg;
reg [31:0] main_51_60;
reg [31:0] main_51_60_reg;
reg [63:0] main_51_61;
reg [63:0] main_51_61_reg;
reg [63:0] main_51_62;
reg [63:0] main_51_62_reg;
reg [31:0] main_51_63;
reg [31:0] main_51_63_reg;
reg [63:0] main_51_64;
reg [63:0] main_51_64_reg;
reg [31:0] main_51_65;
reg [31:0] main_51_65_reg;
reg [31:0] main_66_gep_int51;
reg [31:0] main_66_gep_int51_reg;
reg [31:0] main_66_gep_array52;
reg [31:0] main_66_gep_array52_reg;
reg [31:0] main_66_gep53;
reg [31:0] main_66_gep53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_66_67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_66_67_reg;
reg [31:0] main_66_68;
reg [31:0] main_66_68_reg;
reg [63:0] main_66_69;
reg [63:0] main_66_69_reg;
reg [31:0] main_66_gep_int54;
reg [31:0] main_66_gep_int54_reg;
reg [31:0] main_66_gep_array55;
reg [31:0] main_66_gep_array55_reg;
reg [31:0] main_66_gep56;
reg [31:0] main_66_gep56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_66_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_66_70_reg;
reg [31:0] main_66_71;
reg [31:0] main_66_71_reg;
reg [63:0] main_66_72;
reg [63:0] main_66_72_reg;
reg [63:0] main_66_73;
reg [63:0] main_66_73_reg;
reg [31:0] main_66_74;
reg [31:0] main_66_74_reg;
reg [63:0] main_66_75;
reg [63:0] main_66_75_reg;
reg [31:0] main_66_76;
reg [31:0] main_66_76_reg;
reg [31:0] main_77_gep_int57;
reg [31:0] main_77_gep_int57_reg;
reg [31:0] main_77_gep_array58;
reg [31:0] main_77_gep_array58_reg;
reg [31:0] main_77_gep59;
reg [31:0] main_77_gep59_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_77_78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_77_78_reg;
reg [31:0] main_79_gep_int60;
reg [31:0] main_79_gep_int60_reg;
reg [31:0] main_79_gep_array61;
reg [31:0] main_79_gep_array61_reg;
reg [31:0] main_79_gep62;
reg [31:0] main_79_gep62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_79_80;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_79_80_reg;
reg [31:0] main_81_gep_int63;
reg [31:0] main_81_gep_int63_reg;
reg [31:0] main_81_gep_array64;
reg [31:0] main_81_gep_array64_reg;
reg [31:0] main_81_gep65;
reg [31:0] main_81_gep65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_81_82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_81_82_reg;
reg [31:0] main_81_83;
reg [31:0] main_81_83_reg;
reg [31:0] main_81_gep_int66;
reg [31:0] main_81_gep_int66_reg;
reg [31:0] main_81_gep_array67;
reg [31:0] main_81_gep_array67_reg;
reg [31:0] main_81_gep68;
reg [31:0] main_81_gep68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_81_84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_81_84_reg;
reg [31:0] main_81_85;
reg [31:0] main_81_85_reg;
reg [31:0] main_81_86;
reg [31:0] main_81_86_reg;
reg [31:0] main_81_gep_int69;
reg [31:0] main_81_gep_int69_reg;
reg [31:0] main_81_gep_array70;
reg [31:0] main_81_gep_array70_reg;
reg [31:0] main_81_gep71;
reg [31:0] main_81_gep71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_81_87;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_81_87_reg;
reg [31:0] main_88_gep_int72;
reg [31:0] main_88_gep_int72_reg;
reg [31:0] main_88_gep_array73;
reg [31:0] main_88_gep_array73_reg;
reg [31:0] main_88_gep74;
reg [31:0] main_88_gep74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_88_89;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_88_89_reg;
reg [31:0] main_88_90;
reg [31:0] main_88_90_reg;
reg [31:0] main_88_gep_int75;
reg [31:0] main_88_gep_int75_reg;
reg [31:0] main_88_gep_array76;
reg [31:0] main_88_gep_array76_reg;
reg [31:0] main_88_gep77;
reg [31:0] main_88_gep77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_88_91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_88_91_reg;
reg [31:0] main_88_92;
reg [31:0] main_88_92_reg;
reg [31:0] main_88_93;
reg [31:0] main_88_93_reg;
reg [31:0] main_88_gep_int78;
reg [31:0] main_88_gep_int78_reg;
reg [31:0] main_88_gep_array79;
reg [31:0] main_88_gep_array79_reg;
reg [31:0] main_88_gep80;
reg [31:0] main_88_gep80_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_88_94;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_88_94_reg;
reg [31:0] main_95_gep_int81;
reg [31:0] main_95_gep_int81_reg;
reg [31:0] main_95_gep_array82;
reg [31:0] main_95_gep_array82_reg;
reg [31:0] main_95_gep83;
reg [31:0] main_95_gep83_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_95_96;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_95_96_reg;
reg [31:0] main_95_97;
reg [31:0] main_95_97_reg;
reg [31:0] main_95_gep_int84;
reg [31:0] main_95_gep_int84_reg;
reg [31:0] main_95_gep_array85;
reg [31:0] main_95_gep_array85_reg;
reg [31:0] main_95_gep86;
reg [31:0] main_95_gep86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_95_98;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_95_98_reg;
reg [31:0] main_95_99;
reg [31:0] main_95_99_reg;
reg [31:0] main_95_100;
reg [31:0] main_95_100_reg;
reg [31:0] main_95_gep_int87;
reg [31:0] main_95_gep_int87_reg;
reg [31:0] main_95_gep_array88;
reg [31:0] main_95_gep_array88_reg;
reg [31:0] main_95_gep89;
reg [31:0] main_95_gep89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_95_101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_95_101_reg;
reg [31:0] main_102_gep_int90;
reg [31:0] main_102_gep_int90_reg;
reg [31:0] main_102_gep_array91;
reg [31:0] main_102_gep_array91_reg;
reg [31:0] main_102_gep92;
reg [31:0] main_102_gep92_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_102_103;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_102_103_reg;
reg [31:0] main_102_104;
reg [31:0] main_102_104_reg;
reg [31:0] main_102_105;
reg [31:0] main_102_105_reg;
reg [31:0] main_102_gep_int93;
reg [31:0] main_102_gep_int93_reg;
reg [31:0] main_102_gep_array94;
reg [31:0] main_102_gep_array94_reg;
reg [31:0] main_102_gep95;
reg [31:0] main_102_gep95_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_102_106;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_102_106_reg;
reg [31:0] main_107_gep_int96;
reg [31:0] main_107_gep_int96_reg;
reg [31:0] main_107_gep_array97;
reg [31:0] main_107_gep_array97_reg;
reg [31:0] main_107_gep98;
reg [31:0] main_107_gep98_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_107_108;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_107_108_reg;
reg [31:0] main_107_109;
reg [31:0] main_107_109_reg;
reg [31:0] main_107_110;
reg [31:0] main_107_110_reg;
reg [31:0] main_107_gep_int99;
reg [31:0] main_107_gep_int99_reg;
reg [31:0] main_107_gep_array100;
reg [31:0] main_107_gep_array100_reg;
reg [31:0] main_107_gep101;
reg [31:0] main_107_gep101_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_107_111;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_107_111_reg;
reg [31:0] main_112_gep_int102;
reg [31:0] main_112_gep_int102_reg;
reg [31:0] main_112_gep_array103;
reg [31:0] main_112_gep_array103_reg;
reg [31:0] main_112_gep104;
reg [31:0] main_112_gep104_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_112_113;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_112_113_reg;
reg [31:0] main_112_114;
reg [31:0] main_112_114_reg;
reg [31:0] main_112_gep_int105;
reg [31:0] main_112_gep_int105_reg;
reg [31:0] main_112_gep_array106;
reg [31:0] main_112_gep_array106_reg;
reg [31:0] main_112_gep107;
reg [31:0] main_112_gep107_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_112_115;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_112_115_reg;
reg [31:0] main_112_116;
reg [31:0] main_112_116_reg;
reg [31:0] main_112_117;
reg [31:0] main_112_117_reg;
reg [31:0] main_112_gep_int108;
reg [31:0] main_112_gep_int108_reg;
reg [31:0] main_112_gep_array109;
reg [31:0] main_112_gep_array109_reg;
reg [31:0] main_112_gep110;
reg [31:0] main_112_gep110_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_112_118;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_112_118_reg;
reg [31:0] main_119_gep_int111;
reg [31:0] main_119_gep_int111_reg;
reg [31:0] main_119_gep_array112;
reg [31:0] main_119_gep_array112_reg;
reg [31:0] main_119_gep113;
reg [31:0] main_119_gep113_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_120;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_120_reg;
reg [31:0] main_119_121;
reg [31:0] main_119_121_reg;
reg [31:0] main_119_gep_int114;
reg [31:0] main_119_gep_int114_reg;
reg [31:0] main_119_gep_array115;
reg [31:0] main_119_gep_array115_reg;
reg [31:0] main_119_gep116;
reg [31:0] main_119_gep116_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_122;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_122_reg;
reg [31:0] main_119_123;
reg [31:0] main_119_123_reg;
reg [31:0] main_119_124;
reg [31:0] main_119_124_reg;
reg [31:0] main_119_gep_int117;
reg [31:0] main_119_gep_int117_reg;
reg [31:0] main_119_gep_array118;
reg [31:0] main_119_gep_array118_reg;
reg [31:0] main_119_gep119;
reg [31:0] main_119_gep119_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_125;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_125_reg;
reg [31:0] main_126_gep_int120;
reg [31:0] main_126_gep_int120_reg;
reg [31:0] main_126_gep_array121;
reg [31:0] main_126_gep_array121_reg;
reg [31:0] main_126_gep122;
reg [31:0] main_126_gep122_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_126_127;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_126_127_reg;
reg [31:0] main_126_128;
reg [31:0] main_126_128_reg;
reg [31:0] main_126_gep_int123;
reg [31:0] main_126_gep_int123_reg;
reg [31:0] main_126_gep_array124;
reg [31:0] main_126_gep_array124_reg;
reg [31:0] main_126_gep125;
reg [31:0] main_126_gep125_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_126_129;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_126_129_reg;
reg [31:0] main_126_130;
reg [31:0] main_126_130_reg;
reg  main_126_131;
reg  main_126_131_reg;
reg [31:0] main_126_132;
reg [31:0] main_126_132_reg;
reg [31:0] main_126_gep_int126;
reg [31:0] main_126_gep_int126_reg;
reg [31:0] main_126_gep_array127;
reg [31:0] main_126_gep_array127_reg;
reg [31:0] main_126_gep128;
reg [31:0] main_126_gep128_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_126_133;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_126_133_reg;
reg [31:0] main_134_gep_int129;
reg [31:0] main_134_gep_int129_reg;
reg [31:0] main_134_gep_array130;
reg [31:0] main_134_gep_array130_reg;
reg [31:0] main_134_gep131;
reg [31:0] main_134_gep131_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_134_135;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_134_135_reg;
reg [31:0] main_134_136;
reg [31:0] main_134_136_reg;
reg [31:0] main_134_gep_int132;
reg [31:0] main_134_gep_int132_reg;
reg [31:0] main_134_gep_array133;
reg [31:0] main_134_gep_array133_reg;
reg [31:0] main_134_gep134;
reg [31:0] main_134_gep134_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_134_137;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_134_137_reg;
reg [31:0] main_134_138;
reg [31:0] main_134_138_reg;
reg  main_134_139;
reg  main_134_139_reg;
reg [31:0] main_134_140;
reg [31:0] main_134_140_reg;
reg [31:0] main_134_gep_int135;
reg [31:0] main_134_gep_int135_reg;
reg [31:0] main_134_gep_array136;
reg [31:0] main_134_gep_array136_reg;
reg [31:0] main_134_gep137;
reg [31:0] main_134_gep137_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_134_141;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_134_141_reg;
reg [31:0] main_142_gep_int138;
reg [31:0] main_142_gep_int138_reg;
reg [31:0] main_142_gep_array139;
reg [31:0] main_142_gep_array139_reg;
reg [31:0] main_142_gep140;
reg [31:0] main_142_gep140_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_142_143;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_142_143_reg;
reg [31:0] main_142_144;
reg [31:0] main_142_144_reg;
reg [31:0] main_145_146;
reg [31:0] main_145_146_reg;
reg [31:0] main_145_147;
reg [31:0] main_145_147_reg;
reg [31:0] main_148_149;
reg [31:0] main_148_149_reg;
reg [31:0] main_148_150;
reg [31:0] main_148_150_reg;
reg [31:0] main_151_152;
reg [31:0] main_151_152_reg;
reg [31:0] main_151_153;
reg [31:0] main_151_153_reg;
reg [31:0] main_151_154;
reg [31:0] main_151_154_reg;
reg [31:0] main_151_155;
reg [31:0] main_151_155_reg;
reg [31:0] main_156_gep_int141;
reg [31:0] main_156_gep_int141_reg;
reg [31:0] main_156_gep_array142;
reg [31:0] main_156_gep_array142_reg;
reg [31:0] main_156_gep143;
reg [31:0] main_156_gep143_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_156_157;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_156_157_reg;
reg [31:0] main_156_158;
reg [31:0] main_156_158_reg;
reg [31:0] main_156_sext7;
reg [31:0] main_156_sext7_reg;
reg [31:0] main_156_159;
reg [31:0] main_156_159_reg;
reg [31:0] main_156_160;
reg [31:0] main_156_160_reg;
reg [31:0] main_156_gep_int144;
reg [31:0] main_156_gep_int144_reg;
reg [31:0] main_156_gep_array145;
reg [31:0] main_156_gep_array145_reg;
reg [31:0] main_156_gep146;
reg [31:0] main_156_gep146_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_156_161;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_156_161_reg;
reg [31:0] main_162_gep_int147;
reg [31:0] main_162_gep_int147_reg;
reg [31:0] main_162_gep_array148;
reg [31:0] main_162_gep_array148_reg;
reg [31:0] main_162_gep149;
reg [31:0] main_162_gep149_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_162_163;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_162_163_reg;
reg [31:0] main_162_164;
reg [31:0] main_162_164_reg;
reg [31:0] main_162_165;
reg [31:0] main_162_165_reg;
reg [31:0] main_162_166;
reg [31:0] main_162_166_reg;
reg [31:0] main_162_gep_int150;
reg [31:0] main_162_gep_int150_reg;
reg [31:0] main_162_gep_array151;
reg [31:0] main_162_gep_array151_reg;
reg [31:0] main_162_gep152;
reg [31:0] main_162_gep152_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_162_167;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_162_167_reg;
reg [31:0] main_168_gep_int153;
reg [31:0] main_168_gep_int153_reg;
reg [31:0] main_168_gep_array154;
reg [31:0] main_168_gep_array154_reg;
reg [31:0] main_168_gep155;
reg [31:0] main_168_gep155_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_168_169;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_168_169_reg;
reg [31:0] main_168_170;
reg [31:0] main_168_170_reg;
reg [31:0] main_168_171;
reg [31:0] main_168_171_reg;
reg [31:0] main_168_172;
reg [31:0] main_168_172_reg;
reg [31:0] main_168_gep_int156;
reg [31:0] main_168_gep_int156_reg;
reg [31:0] main_168_gep_array157;
reg [31:0] main_168_gep_array157_reg;
reg [31:0] main_168_gep158;
reg [31:0] main_168_gep158_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_168_173;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_168_173_reg;
reg [31:0] main_174_gep_int159;
reg [31:0] main_174_gep_int159_reg;
reg [31:0] main_174_gep_array160;
reg [31:0] main_174_gep_array160_reg;
reg [31:0] main_174_gep161;
reg [31:0] main_174_gep161_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_174_175;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_174_175_reg;
reg [31:0] main_174_176;
reg [31:0] main_174_176_reg;
reg [31:0] main_174_177;
reg [31:0] main_174_177_reg;
reg [31:0] main_174_178;
reg [31:0] main_174_178_reg;
reg [31:0] main_174_gep_int162;
reg [31:0] main_174_gep_int162_reg;
reg [31:0] main_174_gep_array163;
reg [31:0] main_174_gep_array163_reg;
reg [31:0] main_174_gep164;
reg [31:0] main_174_gep164_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_174_179;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_174_179_reg;
reg [31:0] main_180_gep_int165;
reg [31:0] main_180_gep_int165_reg;
reg [31:0] main_180_gep_array166;
reg [31:0] main_180_gep_array166_reg;
reg [31:0] main_180_gep167;
reg [31:0] main_180_gep167_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_180_181;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_180_181_reg;
reg [31:0] main_180_182;
reg [31:0] main_180_182_reg;
reg [31:0] main_180_183;
reg [31:0] main_180_183_reg;
reg [31:0] main_180_184;
reg [31:0] main_180_184_reg;
reg [31:0] main_180_185;
reg [31:0] main_180_185_reg;
reg [31:0] main_180_gep_int168;
reg [31:0] main_180_gep_int168_reg;
reg [31:0] main_180_gep_array169;
reg [31:0] main_180_gep_array169_reg;
reg [31:0] main_180_gep170;
reg [31:0] main_180_gep170_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_180_186;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_180_186_reg;
reg [31:0] main_180_187;
reg [31:0] main_180_187_reg;
reg [31:0] main_180_gep_int171;
reg [31:0] main_180_gep_int171_reg;
reg [31:0] main_180_gep_array172;
reg [31:0] main_180_gep_array172_reg;
reg [31:0] main_180_gep173;
reg [31:0] main_180_gep173_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_180_188;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_180_188_reg;
reg [31:0] main_189_gep_int174;
reg [31:0] main_189_gep_int174_reg;
reg [31:0] main_189_gep_array175;
reg [31:0] main_189_gep_array175_reg;
reg [31:0] main_189_gep176;
reg [31:0] main_189_gep176_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_189_190;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_189_190_reg;
reg [31:0] main_189_191;
reg [31:0] main_189_191_reg;
reg [31:0] main_189_gep_int177;
reg [31:0] main_189_gep_int177_reg;
reg [31:0] main_189_gep_array178;
reg [31:0] main_189_gep_array178_reg;
reg [31:0] main_189_gep179;
reg [31:0] main_189_gep179_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_189_192;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_189_192_reg;
reg [31:0] main_189_193;
reg [31:0] main_189_193_reg;
reg [31:0] main_189_194;
reg [31:0] main_189_194_reg;
reg [31:0] main_189_195;
reg [31:0] main_189_195_reg;
reg [31:0] main_189_196;
reg [31:0] main_189_196_reg;
reg [31:0] main_189_gep_int180;
reg [31:0] main_189_gep_int180_reg;
reg [31:0] main_189_gep_array181;
reg [31:0] main_189_gep_array181_reg;
reg [31:0] main_189_gep182;
reg [31:0] main_189_gep182_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_189_197;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_189_197_reg;
reg [31:0] main_198_sext4;
reg [31:0] main_198_sext4_reg;
reg [31:0] main_198_gep_int183;
reg [31:0] main_198_gep_int183_reg;
reg [31:0] main_198_gep_array184;
reg [31:0] main_198_gep_array184_reg;
reg [31:0] main_198_gep185;
reg [31:0] main_198_gep185_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_198_199;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_198_199_reg;
reg [31:0] main_200_gep_int186;
reg [31:0] main_200_gep_int186_reg;
reg [31:0] main_200_gep_array187;
reg [31:0] main_200_gep_array187_reg;
reg [31:0] main_200_gep188;
reg [31:0] main_200_gep188_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_200_201;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_200_201_reg;
reg [31:0] main_200_202;
reg [31:0] main_200_202_reg;
reg [31:0] main_200_gep_int189;
reg [31:0] main_200_gep_int189_reg;
reg [31:0] main_200_gep_array190;
reg [31:0] main_200_gep_array190_reg;
reg [31:0] main_200_gep191;
reg [31:0] main_200_gep191_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_200_203;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_200_203_reg;
reg [31:0] main_200_204;
reg [31:0] main_200_204_reg;
reg  main_200_205;
reg  main_200_205_reg;
reg [31:0] main_206_sext3;
reg [31:0] main_206_sext3_reg;
reg [31:0] main_206_207;
reg [31:0] main_206_207_reg;
reg [31:0] main_206_208;
reg [31:0] main_206_208_reg;
reg [31:0] main_209_gep_int192;
reg [31:0] main_209_gep_int192_reg;
reg [31:0] main_209_gep_array193;
reg [31:0] main_209_gep_array193_reg;
reg [31:0] main_209_gep194;
reg [31:0] main_209_gep194_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_209_210;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_209_210_reg;
reg [31:0] main_209_211;
reg [31:0] main_209_211_reg;
reg [31:0] main_209_gep_int195;
reg [31:0] main_209_gep_int195_reg;
reg [31:0] main_209_gep_array196;
reg [31:0] main_209_gep_array196_reg;
reg [31:0] main_209_gep197;
reg [31:0] main_209_gep197_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_209_212;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_209_212_reg;
reg [31:0] main_209_213;
reg [31:0] main_209_213_reg;
reg  main_209_214;
reg  main_209_214_reg;
reg [31:0] main_215_sext2;
reg [31:0] main_215_sext2_reg;
reg [31:0] main_215_216;
reg [31:0] main_215_216_reg;
reg [31:0] main_215_217;
reg [31:0] main_215_217_reg;
reg [31:0] main_218_gep_int198;
reg [31:0] main_218_gep_int198_reg;
reg [31:0] main_218_gep_array199;
reg [31:0] main_218_gep_array199_reg;
reg [31:0] main_218_gep200;
reg [31:0] main_218_gep200_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_218_219;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_218_219_reg;
reg [31:0] main_218_220;
reg [31:0] main_218_220_reg;
reg  main_218_221;
reg  main_218_221_reg;
reg [31:0] main_222_sext1;
reg [31:0] main_222_sext1_reg;
reg [31:0] main_222_223;
reg [31:0] main_222_223_reg;
reg [31:0] main_222_224;
reg [31:0] main_222_224_reg;
reg [31:0] main_225_gep_int201;
reg [31:0] main_225_gep_int201_reg;
reg [31:0] main_225_gep_array202;
reg [31:0] main_225_gep_array202_reg;
reg [31:0] main_225_gep203;
reg [31:0] main_225_gep203_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_225_226;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_225_226_reg;
reg [31:0] main_225_227;
reg [31:0] main_225_227_reg;
reg [31:0] main_225_sext;
reg [31:0] main_225_sext_reg;
reg [31:0] main_225_228;
reg [31:0] main_225_228_reg;
reg  main_225_229;
reg  main_225_229_reg;
reg [31:0] main_225_230;
reg [31:0] main_225_230_reg;
reg [31:0] main_225_gep_int204;
reg [31:0] main_225_gep_int204_reg;
reg [31:0] main_225_gep_array205;
reg [31:0] main_225_gep_array205_reg;
reg [31:0] main_225_gep206;
reg [31:0] main_225_gep206_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_225_231;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_225_231_reg;
reg [31:0] main_232_gep_int207;
reg [31:0] main_232_gep_int207_reg;
reg [31:0] main_232_gep_array208;
reg [31:0] main_232_gep_array208_reg;
reg [31:0] main_232_gep209;
reg [31:0] main_232_gep209_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_232_233;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_232_233_reg;
reg [31:0] main_232_234;
reg [31:0] main_232_234_reg;
reg [31:0] main_232_235;
reg [31:0] main_232_235_reg;
reg  main_232_236;
reg  main_232_236_reg;
reg [31:0] main_232_237;
reg [31:0] main_232_237_reg;
reg [31:0] main_232_gep_int210;
reg [31:0] main_232_gep_int210_reg;
reg [31:0] main_232_gep_array211;
reg [31:0] main_232_gep_array211_reg;
reg [31:0] main_232_gep212;
reg [31:0] main_232_gep212_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_232_238;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_232_238_reg;
reg [31:0] main_thread_n_inst0lcssa;
reg [31:0] main_thread_n_inst0lcssa_reg;
reg [31:0] main_thread_239;
reg [31:0] main_thread_239_reg;
reg [31:0] main_240_pc1;
reg [31:0] main_240_pc1_reg;
reg [31:0] main_240_Lo1;
reg [31:0] main_240_Lo1_reg;
reg [31:0] main_240_Hi1;
reg [31:0] main_240_Hi1_reg;
reg [31:0] main_240_241;
reg [31:0] main_240_241_reg;
reg  main_240_242;
reg  main_240_242_reg;
reg [31:0] main_loopexit_243;
reg [31:0] main_loopexit_243_reg;
reg  main_loopexit_244;
reg  main_loopexit_244_reg;
reg [31:0] main_loopexit_245;
reg [31:0] main_loopexit_245_reg;
reg [31:0] main_loopexit_246;
reg [31:0] main_loopexit_246_reg;
reg  main_loopexit_247;
reg  main_loopexit_247_reg;
reg [31:0] main_loopexit_248;
reg [31:0] main_loopexit_248_reg;
reg [31:0] main_loopexit_249;
reg [31:0] main_loopexit_249_reg;
reg [31:0] main_loopexit_250;
reg [31:0] main_loopexit_250_reg;
reg  main_loopexit_251;
reg  main_loopexit_251_reg;
reg [31:0] main_loopexit_252;
reg [31:0] main_loopexit_252_reg;
reg [31:0] main_loopexit_253;
reg [31:0] main_loopexit_253_reg;
reg [31:0] main_loopexit_254;
reg [31:0] main_loopexit_254_reg;
reg  main_loopexit_255;
reg  main_loopexit_255_reg;
reg [31:0] main_loopexit_256;
reg [31:0] main_loopexit_256_reg;
reg [31:0] main_loopexit_257;
reg [31:0] main_loopexit_257_reg;
reg [31:0] main_loopexit_258;
reg [31:0] main_loopexit_258_reg;
reg  main_loopexit_259;
reg  main_loopexit_259_reg;
reg [31:0] main_loopexit_260;
reg [31:0] main_loopexit_260_reg;
reg [31:0] main_loopexit_261;
reg [31:0] main_loopexit_261_reg;
reg [31:0] main_loopexit_262;
reg [31:0] main_loopexit_262_reg;
reg  main_loopexit_263;
reg  main_loopexit_263_reg;
reg [31:0] main_loopexit_264;
reg [31:0] main_loopexit_264_reg;
reg [31:0] main_loopexit_265;
reg [31:0] main_loopexit_265_reg;
reg [31:0] main_loopexit_266;
reg [31:0] main_loopexit_266_reg;
reg  main_loopexit_267;
reg  main_loopexit_267_reg;
reg [31:0] main_loopexit_268;
reg [31:0] main_loopexit_268_reg;
reg [31:0] main_loopexit_269;
reg [31:0] main_loopexit_269_reg;
reg [31:0] main_loopexit_270;
reg [31:0] main_loopexit_270_reg;
reg  main_loopexit_271;
reg  main_loopexit_271_reg;
reg [31:0] main_loopexit_272;
reg [31:0] main_loopexit_272_reg;
reg [31:0] main_loopexit_273;
reg [31:0] main_loopexit_273_reg;
reg [31:0] main_loopexit_274;
reg [31:0] main_loopexit_274_reg;
reg  main_loopexit_275;
reg  main_loopexit_275_reg;
reg [31:0] main_loopexit_276;
reg [31:0] main_loopexit_276_reg;
reg [31:0] main_loopexit_277;
reg [31:0] main_loopexit_277_reg;
reg  main_loopexit_279;
reg  main_loopexit_279_reg;
reg [5:0] imem_address_a;
reg  imem_write_enable_a;
wire [31:0] imem_in_a;
wire [31:0] imem_out_a;
wire [5:0] imem_address_b;
wire  imem_write_enable_b;
wire [31:0] imem_in_b;
wire [31:0] imem_out_b;
reg [4:0] main_0_reg_address_a;
reg  main_0_reg_write_enable_a;
reg [31:0] main_0_reg_in_a;
wire [31:0] main_0_reg_out_a;
reg [4:0] main_0_reg_address_b;
reg  main_0_reg_write_enable_b;
wire [31:0] main_0_reg_in_b;
wire [31:0] main_0_reg_out_b;
wire [5:0] ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire [5:0] ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire  legup_memset_4_0_1_address_a;
wire  legup_memset_4_0_1_write_enable_a;
wire [31:0] legup_memset_4_0_1_in_a;
wire [31:0] legup_memset_4_0_1_out_a;
wire  legup_memset_4_0_1_address_b;
wire  legup_memset_4_0_1_write_enable_b;
wire [31:0] legup_memset_4_0_1_in_b;
wire [31:0] legup_memset_4_0_1_out_b;
wire  legup_memset_4_0_2_address_a;
wire  legup_memset_4_0_2_write_enable_a;
wire [7:0] legup_memset_4_0_2_in_a;
wire [7:0] legup_memset_4_0_2_out_a;
wire  legup_memset_4_0_2_address_b;
wire  legup_memset_4_0_2_write_enable_b;
wire [7:0] legup_memset_4_0_2_in_b;
wire [7:0] legup_memset_4_0_2_out_b;
wire  legup_memset_4_0_3_address_a;
wire  legup_memset_4_0_3_write_enable_a;
wire [31:0] legup_memset_4_0_3_in_a;
wire [31:0] legup_memset_4_0_3_out_a;
wire  legup_memset_4_0_3_address_b;
wire  legup_memset_4_0_3_write_enable_b;
wire [31:0] legup_memset_4_0_3_in_b;
wire [31:0] legup_memset_4_0_3_out_b;
wire  legup_memset_4_0_c_address_a;
wire  legup_memset_4_0_c_write_enable_a;
wire [31:0] legup_memset_4_0_c_in_a;
wire [31:0] legup_memset_4_0_c_out_a;
wire  legup_memset_4_0_c_address_b;
wire  legup_memset_4_0_c_write_enable_b;
wire [31:0] legup_memset_4_0_c_in_b;
wire [31:0] legup_memset_4_0_c_out_b;
wire  legup_memset_4_0_s_address_a;
wire  legup_memset_4_0_s_write_enable_a;
wire [31:0] legup_memset_4_0_s_in_a;
wire [31:0] legup_memset_4_0_s_out_a;
wire  legup_memset_4_0_s_address_b;
wire  legup_memset_4_0_s_write_enable_b;
wire [31:0] legup_memset_4_0_s_in_b;
wire [31:0] legup_memset_4_0_s_out_b;
reg  legup_memset_4_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_arg_m;
reg [7:0] legup_memset_4_arg_c1;
reg [31:0] legup_memset_4_arg_n;
wire  legup_memset_4_memory_controller_enable_a;
wire  legup_memset_4_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memset_4_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memset_4_memory_controller_out_a;
wire [1:0] legup_memset_4_memory_controller_size_a;
wire  legup_memset_4_memory_controller_enable_b;
wire  legup_memset_4_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memset_4_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memset_4_memory_controller_out_b;
wire [1:0] legup_memset_4_memory_controller_size_b;
reg  legup_memset_4_memory_controller_waitrequest;
reg  legup_memset_4_finish_final;
reg  legup_memset_4_finish_reg;
wire  legup_memset_4_finish;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;
reg [31:0] main_signed_add_32_0_op0;
reg [31:0] main_signed_add_32_0_op1;
reg [31:0] main_signed_add_32_0;
reg [31:0] main_signed_add_32_3_op0;
reg [31:0] main_signed_add_32_3_op1;
reg [31:0] main_signed_add_32_3;
reg [31:0] main_signed_add_32_4_op0;
reg [31:0] main_signed_add_32_4_op1;
reg [31:0] main_signed_add_32_4;
reg [31:0] main_signed_add_32_5_op0;
reg [31:0] main_signed_add_32_5_op1;
reg [31:0] main_signed_add_32_5;
reg [31:0] main_signed_add_32_6_op0;
reg [31:0] main_signed_add_32_6_op1;
reg [31:0] main_signed_add_32_6;
reg [31:0] main_signed_add_32_8_op0;
reg [31:0] main_signed_add_32_8_op1;
reg [31:0] main_signed_add_32_8;
reg [31:0] main_signed_add_32_1_op0;
reg [31:0] main_signed_add_32_1_op1;
reg [31:0] main_signed_add_32_1;
reg [63:0] main_signed_multiply_64_0_op0;
reg [63:0] main_signed_multiply_64_0_op1;
reg  lpm_mult_main_66_73_en;
reg [63:0] main_66_73_stage0_reg;
reg [63:0] main_signed_multiply_64_0;
reg [31:0] main_signed_add_32_7_op0;
reg [31:0] main_signed_add_32_7_op1;
reg [31:0] main_signed_add_32_7;
reg [31:0] main_signed_add_32_2_op0;
reg [31:0] main_signed_add_32_2_op1;
reg [31:0] main_signed_add_32_2;
reg [31:0] main_signed_subtract_32_0_op0;
reg [31:0] main_signed_subtract_32_0_op1;
reg [31:0] main_signed_subtract_32_0;
reg [63:0] main_signed_add_64_0_op0;
reg [63:0] main_signed_add_64_0_op1;
reg [63:0] main_signed_add_64_0;
reg  lpm_mult_main_51_58_en;


legup_memset_4 legup_memset_4 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (legup_memset_4_memory_controller_enable_a),
	.memory_controller_address_a (legup_memset_4_memory_controller_address_a),
	.memory_controller_write_enable_a (legup_memset_4_memory_controller_write_enable_a),
	.memory_controller_in_a (legup_memset_4_memory_controller_in_a),
	.memory_controller_size_a (legup_memset_4_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (legup_memset_4_memory_controller_enable_b),
	.memory_controller_address_b (legup_memset_4_memory_controller_address_b),
	.memory_controller_write_enable_b (legup_memset_4_memory_controller_write_enable_b),
	.memory_controller_in_b (legup_memset_4_memory_controller_in_b),
	.memory_controller_size_b (legup_memset_4_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (legup_memset_4_start),
	.finish (legup_memset_4_finish),
	.arg_m (legup_memset_4_arg_m),
	.arg_c1 (legup_memset_4_arg_c1),
	.arg_n (legup_memset_4_arg_n)
);

defparam
	legup_memset_4.tag_offset = tag_offset;

// Local Rams


// @imem = internal unnamed_addr constant [44 x i32] [i32 -1885077504, i32 665124868, i32 614858756, i32 266368, i32 12726305, i32 202375190, i32 0, i32 872546314, i32 12, i32 1006702593, i32 875036672, ...
rom_dual_port imem (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( imem_address_a ),
	.address_b( imem_address_b ),
	.q_a( imem_out_a ),
	.q_b( imem_out_b)
);
defparam imem.width_a = 32;
defparam imem.width_b = 32;
defparam imem.widthad_a = 6;
defparam imem.widthad_b = 6;
defparam imem.numwords_a = 44;
defparam imem.numwords_b = 44;
defparam imem.latency = 1;
defparam imem.init_file = "imem.mif";


//   %reg = alloca [32 x i32], align 4
ram_dual_port main_0_reg (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_reg_address_a ),
	.address_b( main_0_reg_address_b ),
	.wren_a( main_0_reg_write_enable_a ),
	.wren_b( main_0_reg_write_enable_b ),
	.data_a( main_0_reg_in_a ),
	.data_b( main_0_reg_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_reg_out_a ),
	.q_b( main_0_reg_out_b)
);
defparam main_0_reg.width_a = 32;
defparam main_0_reg.width_b = 32;
defparam main_0_reg.widthad_a = 5;
defparam main_0_reg.widthad_b = 5;
defparam main_0_reg.width_be_a = 1;
defparam main_0_reg.width_be_b = 1;
defparam main_0_reg.numwords_a = 32;
defparam main_0_reg.numwords_b = 32;
defparam main_0_reg.latency = 1;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %.loopexit*/
	/*   %278 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str1, i32 0, i32 0), i32 %277) #3*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_150)) begin
		$write("Result: %d\n", $signed(main_loopexit_277));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_loopexit_277) === 1'bX) finish <= 0;
	end
	/* main: %280*/
	/*   %281 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB__280_151)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %282*/
	/*   %283 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str3, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB__282_152)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_main_BB__0_3:
		next_state = LEGUP_F_main_BB__2_4;
LEGUP_F_main_BB__102_57:
		next_state = LEGUP_F_main_BB__102_58;
LEGUP_F_main_BB__102_58:
		next_state = LEGUP_F_main_BB__102_59;
LEGUP_F_main_BB__102_59:
		next_state = LEGUP_F_main_BB__102_60;
LEGUP_F_main_BB__102_60:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__107_61:
		next_state = LEGUP_F_main_BB__107_62;
LEGUP_F_main_BB__107_62:
		next_state = LEGUP_F_main_BB__107_63;
LEGUP_F_main_BB__107_63:
		next_state = LEGUP_F_main_BB__107_64;
LEGUP_F_main_BB__107_64:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__112_65:
		next_state = LEGUP_F_main_BB__112_66;
LEGUP_F_main_BB__112_66:
		next_state = LEGUP_F_main_BB__112_67;
LEGUP_F_main_BB__112_67:
		next_state = LEGUP_F_main_BB__112_68;
LEGUP_F_main_BB__112_68:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__119_69:
		next_state = LEGUP_F_main_BB__119_70;
LEGUP_F_main_BB__119_70:
		next_state = LEGUP_F_main_BB__119_71;
LEGUP_F_main_BB__119_71:
		next_state = LEGUP_F_main_BB__119_72;
LEGUP_F_main_BB__119_72:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__126_73:
		next_state = LEGUP_F_main_BB__126_74;
LEGUP_F_main_BB__126_74:
		next_state = LEGUP_F_main_BB__126_75;
LEGUP_F_main_BB__126_75:
		next_state = LEGUP_F_main_BB__126_76;
LEGUP_F_main_BB__126_76:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__134_77:
		next_state = LEGUP_F_main_BB__134_78;
LEGUP_F_main_BB__134_78:
		next_state = LEGUP_F_main_BB__134_79;
LEGUP_F_main_BB__134_79:
		next_state = LEGUP_F_main_BB__134_80;
LEGUP_F_main_BB__134_80:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__142_81:
		next_state = LEGUP_F_main_BB__142_82;
LEGUP_F_main_BB__142_82:
		next_state = LEGUP_F_main_BB__142_83;
LEGUP_F_main_BB__142_83:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__145_84:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__148_85:
		next_state = LEGUP_F_main_BB__148_86;
LEGUP_F_main_BB__148_86:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__151_87:
	if ((main_16_22_reg == 32'd9))
		next_state = LEGUP_F_main_BB__156_88;
	else if ((main_16_22_reg == 32'd12))
		next_state = LEGUP_F_main_BB__162_92;
	else if ((main_16_22_reg == 32'd13))
		next_state = LEGUP_F_main_BB__168_96;
	else if ((main_16_22_reg == 32'd14))
		next_state = LEGUP_F_main_BB__174_100;
	else if ((main_16_22_reg == 32'd35))
		next_state = LEGUP_F_main_BB__180_104;
	else if ((main_16_22_reg == 32'd43))
		next_state = LEGUP_F_main_BB__189_112;
	else if ((main_16_22_reg == 32'd15))
		next_state = LEGUP_F_main_BB__198_118;
	else if ((main_16_22_reg == 32'd4))
		next_state = LEGUP_F_main_BB__200_121;
	else if ((main_16_22_reg == 32'd5))
		next_state = LEGUP_F_main_BB__209_125;
	else if ((main_16_22_reg == 32'd1))
		next_state = LEGUP_F_main_BB__218_129;
	else if ((main_16_22_reg == 32'd10))
		next_state = LEGUP_F_main_BB__225_133;
	else if ((main_16_22_reg == 32'd11))
		next_state = LEGUP_F_main_BB__232_137;
	else if ((main_16_22_reg != 32'd9) && (main_16_22_reg != 32'd12) && (main_16_22_reg != 32'd13) && (main_16_22_reg != 32'd14) && (main_16_22_reg != 32'd35) && (main_16_22_reg != 32'd43) && (main_16_22_reg != 32'd15) && (main_16_22_reg != 32'd4) && (main_16_22_reg != 32'd5) && (main_16_22_reg != 32'd1) && (main_16_22_reg != 32'd10) && (main_16_22_reg != 32'd11))
		next_state = LEGUP_F_main_BB_thread_141;
LEGUP_F_main_BB__156_88:
		next_state = LEGUP_F_main_BB__156_89;
LEGUP_F_main_BB__156_89:
		next_state = LEGUP_F_main_BB__156_90;
LEGUP_F_main_BB__156_90:
		next_state = LEGUP_F_main_BB__156_91;
LEGUP_F_main_BB__156_91:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__162_92:
		next_state = LEGUP_F_main_BB__162_93;
LEGUP_F_main_BB__162_93:
		next_state = LEGUP_F_main_BB__162_94;
LEGUP_F_main_BB__162_94:
		next_state = LEGUP_F_main_BB__162_95;
LEGUP_F_main_BB__162_95:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__168_96:
		next_state = LEGUP_F_main_BB__168_97;
LEGUP_F_main_BB__168_97:
		next_state = LEGUP_F_main_BB__168_98;
LEGUP_F_main_BB__168_98:
		next_state = LEGUP_F_main_BB__168_99;
LEGUP_F_main_BB__168_99:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__16_17:
		next_state = LEGUP_F_main_BB__16_18;
LEGUP_F_main_BB__16_18:
		next_state = LEGUP_F_main_BB__16_19;
LEGUP_F_main_BB__16_19:
	if ((main_16_22 == 32'd0))
		next_state = LEGUP_F_main_BB__23_20;
	else if ((main_16_22 == 32'd2))
		next_state = LEGUP_F_main_BB__145_84;
	else if ((main_16_22 == 32'd3))
		next_state = LEGUP_F_main_BB__148_85;
	else if ((main_16_22 != 32'd0) && (main_16_22 != 32'd2) && (main_16_22 != 32'd3))
		next_state = LEGUP_F_main_BB__151_87;
LEGUP_F_main_BB__174_100:
		next_state = LEGUP_F_main_BB__174_101;
LEGUP_F_main_BB__174_101:
		next_state = LEGUP_F_main_BB__174_102;
LEGUP_F_main_BB__174_102:
		next_state = LEGUP_F_main_BB__174_103;
LEGUP_F_main_BB__174_103:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__180_104:
		next_state = LEGUP_F_main_BB__180_105;
LEGUP_F_main_BB__180_105:
		next_state = LEGUP_F_main_BB__180_106;
LEGUP_F_main_BB__180_106:
		next_state = LEGUP_F_main_BB__180_107;
LEGUP_F_main_BB__180_107:
		next_state = LEGUP_F_main_BB__180_108;
LEGUP_F_main_BB__180_108:
		next_state = LEGUP_F_main_BB__180_109;
LEGUP_F_main_BB__180_109:
		next_state = LEGUP_F_main_BB__180_110;
LEGUP_F_main_BB__180_110:
		next_state = LEGUP_F_main_BB__180_111;
LEGUP_F_main_BB__180_111:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__189_112:
		next_state = LEGUP_F_main_BB__189_113;
LEGUP_F_main_BB__189_113:
		next_state = LEGUP_F_main_BB__189_114;
LEGUP_F_main_BB__189_114:
		next_state = LEGUP_F_main_BB__189_115;
LEGUP_F_main_BB__189_115:
		next_state = LEGUP_F_main_BB__189_116;
LEGUP_F_main_BB__189_116:
		next_state = LEGUP_F_main_BB__189_117;
LEGUP_F_main_BB__189_117:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__198_118:
		next_state = LEGUP_F_main_BB__198_119;
LEGUP_F_main_BB__198_119:
		next_state = LEGUP_F_main_BB__198_120;
LEGUP_F_main_BB__198_120:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__200_121:
		next_state = LEGUP_F_main_BB__200_122;
LEGUP_F_main_BB__200_122:
		next_state = LEGUP_F_main_BB__200_123;
LEGUP_F_main_BB__200_123:
	if ((main_200_205 == 1'd1))
		next_state = LEGUP_F_main_BB__206_124;
	else if ((main_200_205 == 1'd0))
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__206_124:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__209_125:
		next_state = LEGUP_F_main_BB__209_126;
LEGUP_F_main_BB__209_126:
		next_state = LEGUP_F_main_BB__209_127;
LEGUP_F_main_BB__209_127:
	if ((main_209_214 == 1'd1))
		next_state = LEGUP_F_main_BB__240_143;
	else if ((main_209_214 == 1'd0))
		next_state = LEGUP_F_main_BB__215_128;
LEGUP_F_main_BB__215_128:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__218_129:
		next_state = LEGUP_F_main_BB__218_130;
LEGUP_F_main_BB__218_130:
		next_state = LEGUP_F_main_BB__218_131;
LEGUP_F_main_BB__218_131:
	if ((main_218_221 == 1'd1))
		next_state = LEGUP_F_main_BB__222_132;
	else if ((main_218_221 == 1'd0))
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__222_132:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__225_133:
		next_state = LEGUP_F_main_BB__225_134;
LEGUP_F_main_BB__225_134:
		next_state = LEGUP_F_main_BB__225_135;
LEGUP_F_main_BB__225_135:
		next_state = LEGUP_F_main_BB__225_136;
LEGUP_F_main_BB__225_136:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__232_137:
		next_state = LEGUP_F_main_BB__232_138;
LEGUP_F_main_BB__232_138:
		next_state = LEGUP_F_main_BB__232_139;
LEGUP_F_main_BB__232_139:
		next_state = LEGUP_F_main_BB__232_140;
LEGUP_F_main_BB__232_140:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__23_20:
	if ((main_23_24 == 32'd33))
		next_state = LEGUP_F_main_BB__33_21;
	else if ((main_23_24 == 32'd35))
		next_state = LEGUP_F_main_BB__42_26;
	else if ((main_23_24 == 32'd24))
		next_state = LEGUP_F_main_BB__51_31;
	else if ((main_23_24 == 32'd25))
		next_state = LEGUP_F_main_BB__66_35;
	else if ((main_23_24 == 32'd16))
		next_state = LEGUP_F_main_BB__77_39;
	else if ((main_23_24 == 32'd18))
		next_state = LEGUP_F_main_BB__79_42;
	else if ((main_23_24 == 32'd36))
		next_state = LEGUP_F_main_BB__81_45;
	else if ((main_23_24 == 32'd37))
		next_state = LEGUP_F_main_BB__88_49;
	else if ((main_23_24 == 32'd38))
		next_state = LEGUP_F_main_BB__95_53;
	else if ((main_23_24 == 32'd0))
		next_state = LEGUP_F_main_BB__102_57;
	else if ((main_23_24 == 32'd2))
		next_state = LEGUP_F_main_BB__107_61;
	else if ((main_23_24 == 32'd4))
		next_state = LEGUP_F_main_BB__112_65;
	else if ((main_23_24 == 32'd6))
		next_state = LEGUP_F_main_BB__119_69;
	else if ((main_23_24 == 32'd42))
		next_state = LEGUP_F_main_BB__126_73;
	else if ((main_23_24 == 32'd43))
		next_state = LEGUP_F_main_BB__134_77;
	else if ((main_23_24 == 32'd8))
		next_state = LEGUP_F_main_BB__142_81;
	else if ((main_23_24 != 32'd33) && (main_23_24 != 32'd35) && (main_23_24 != 32'd24) && (main_23_24 != 32'd25) && (main_23_24 != 32'd16) && (main_23_24 != 32'd18) && (main_23_24 != 32'd36) && (main_23_24 != 32'd37) && (main_23_24 != 32'd38) && (main_23_24 != 32'd0) && (main_23_24 != 32'd2) && (main_23_24 != 32'd4) && (main_23_24 != 32'd6) && (main_23_24 != 32'd42) && (main_23_24 != 32'd43) && (main_23_24 != 32'd8))
		next_state = LEGUP_F_main_BB_thread_141;
LEGUP_F_main_BB__240_143:
		next_state = LEGUP_F_main_BB__240_144;
LEGUP_F_main_BB__240_144:
	if ((main_240_242_reg == 1'd1))
		next_state = LEGUP_F_main_BB_loopexit_145;
	else if ((main_240_242_reg == 1'd0))
		next_state = LEGUP_F_main_BB__16_17;
LEGUP_F_main_BB__280_151:
		next_state = LEGUP_F_main_BB__284_153;
LEGUP_F_main_BB__282_152:
		next_state = LEGUP_F_main_BB__284_153;
LEGUP_F_main_BB__284_153:
		next_state = LEGUP_0;
LEGUP_F_main_BB__2_4:
		next_state = LEGUP_F_main_BB__2_5;
LEGUP_F_main_BB__2_5:
		next_state = LEGUP_F_main_BB__2_6;
LEGUP_F_main_BB__2_6:
	if ((main_2_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader14_7;
	else if ((main_2_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB__2_4;
LEGUP_F_main_BB__33_21:
		next_state = LEGUP_F_main_BB__33_22;
LEGUP_F_main_BB__33_22:
		next_state = LEGUP_F_main_BB__33_23;
LEGUP_F_main_BB__33_23:
		next_state = LEGUP_F_main_BB__33_24;
LEGUP_F_main_BB__33_24:
		next_state = LEGUP_F_main_BB__33_25;
LEGUP_F_main_BB__33_25:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__42_26:
		next_state = LEGUP_F_main_BB__42_27;
LEGUP_F_main_BB__42_27:
		next_state = LEGUP_F_main_BB__42_28;
LEGUP_F_main_BB__42_28:
		next_state = LEGUP_F_main_BB__42_29;
LEGUP_F_main_BB__42_29:
		next_state = LEGUP_F_main_BB__42_30;
LEGUP_F_main_BB__42_30:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__51_31:
		next_state = LEGUP_F_main_BB__51_32;
LEGUP_F_main_BB__51_32:
		next_state = LEGUP_F_main_BB__51_33;
LEGUP_F_main_BB__51_33:
		next_state = LEGUP_F_main_BB__51_34;
LEGUP_F_main_BB__51_34:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__66_35:
		next_state = LEGUP_F_main_BB__66_36;
LEGUP_F_main_BB__66_36:
		next_state = LEGUP_F_main_BB__66_37;
LEGUP_F_main_BB__66_37:
		next_state = LEGUP_F_main_BB__66_38;
LEGUP_F_main_BB__66_38:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__77_39:
		next_state = LEGUP_F_main_BB__77_40;
LEGUP_F_main_BB__77_40:
		next_state = LEGUP_F_main_BB__77_41;
LEGUP_F_main_BB__77_41:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__79_42:
		next_state = LEGUP_F_main_BB__79_43;
LEGUP_F_main_BB__79_43:
		next_state = LEGUP_F_main_BB__79_44;
LEGUP_F_main_BB__79_44:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__81_45:
		next_state = LEGUP_F_main_BB__81_46;
LEGUP_F_main_BB__81_46:
		next_state = LEGUP_F_main_BB__81_47;
LEGUP_F_main_BB__81_47:
		next_state = LEGUP_F_main_BB__81_48;
LEGUP_F_main_BB__81_48:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__88_49:
		next_state = LEGUP_F_main_BB__88_50;
LEGUP_F_main_BB__88_50:
		next_state = LEGUP_F_main_BB__88_51;
LEGUP_F_main_BB__88_51:
		next_state = LEGUP_F_main_BB__88_52;
LEGUP_F_main_BB__88_52:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB__95_53:
		next_state = LEGUP_F_main_BB__95_54;
LEGUP_F_main_BB__95_54:
		next_state = LEGUP_F_main_BB__95_55;
LEGUP_F_main_BB__95_55:
		next_state = LEGUP_F_main_BB__95_56;
LEGUP_F_main_BB__95_56:
		next_state = LEGUP_F_main_BB__240_143;
LEGUP_F_main_BB_loopexit_145:
		next_state = LEGUP_F_main_BB_loopexit_146;
LEGUP_F_main_BB_loopexit_146:
		next_state = LEGUP_F_main_BB_loopexit_147;
LEGUP_F_main_BB_loopexit_147:
		next_state = LEGUP_F_main_BB_loopexit_148;
LEGUP_F_main_BB_loopexit_148:
		next_state = LEGUP_F_main_BB_loopexit_149;
LEGUP_F_main_BB_loopexit_149:
		next_state = LEGUP_F_main_BB_loopexit_150;
LEGUP_F_main_BB_loopexit_150:
	if ((main_loopexit_279 == 1'd1))
		next_state = LEGUP_F_main_BB__280_151;
	else if ((main_loopexit_279 == 1'd0))
		next_state = LEGUP_F_main_BB__282_152;
LEGUP_F_main_BB_preheader14_10:
		next_state = LEGUP_F_main_BB_preheader14_11;
LEGUP_F_main_BB_preheader14_11:
		next_state = LEGUP_F_main_BB_preheader14_12;
LEGUP_F_main_BB_preheader14_12:
		next_state = LEGUP_F_main_BB_preheader14_13;
LEGUP_F_main_BB_preheader14_13:
		next_state = LEGUP_F_main_BB_preheader14_14;
LEGUP_F_main_BB_preheader14_14:
		next_state = LEGUP_F_main_BB_preheader14_15;
LEGUP_F_main_BB_preheader14_15:
		next_state = LEGUP_F_main_BB_preheader14_16;
LEGUP_F_main_BB_preheader14_16:
		next_state = LEGUP_F_main_BB__16_17;
LEGUP_F_main_BB_preheader14_7:
		next_state = LEGUP_F_main_BB_preheader14_8;
LEGUP_F_main_BB_preheader14_8:
		next_state = LEGUP_F_main_BB_preheader14_9;
LEGUP_F_main_BB_preheader14_9:
		next_state = LEGUP_F_main_BB_preheader14_10;
LEGUP_F_main_BB_thread_141:
		next_state = LEGUP_F_main_BB_thread_142;
LEGUP_F_main_BB_thread_142:
		next_state = LEGUP_F_main_BB_loopexit_145;
LEGUP_function_call_2:
	if ((legup_memset_4_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_3;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %0*/
	/*   %1 = bitcast [64 x i32]* %dmem to i8**/
if (reset) begin main_0_1 = 0; end
		main_0_1 = `TAG_main_0_dmem_a;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %1 = bitcast [64 x i32]* %dmem to i8**/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		main_0_1_reg <= main_0_1;
		if (start == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %i.012 = phi i32 [ 0, %0 ], [ %4, %2 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_2_i012 = 32'd0;
	end
	/* main: %2*/
	/*   %i.012 = phi i32 [ 0, %0 ], [ %4, %2 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__2_6) & (memory_controller_waitrequest == 1'd0)) & (main_2_exitcond_reg == 1'd0))) */ begin
		main_2_i012 = main_2_4_reg;
	end
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %i.012 = phi i32 [ 0, %0 ], [ %4, %2 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_2_i012_reg <= main_2_i012;
		if (start == 1'b0 && ^(main_2_i012) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_i012_reg"); $finish; end
	end
	/* main: %2*/
	/*   %i.012 = phi i32 [ 0, %0 ], [ %4, %2 ]*/
	if ((((cur_state == LEGUP_F_main_BB__2_6) & (memory_controller_waitrequest == 1'd0)) & (main_2_exitcond_reg == 1'd0))) begin
		main_2_i012_reg <= main_2_i012;
		if (start == 1'b0 && ^(main_2_i012) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_i012_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_int = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_2_gep_int = 0; end
		main_2_gep_int = 1'd0;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_int = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__2_4)) begin
		main_2_gep_int_reg <= main_2_gep_int;
		if (start == 1'b0 && ^(main_2_gep_int) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_int_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_array = mul i32 %i.012, 4*/
		main_2_gep_array = (main_2_i012_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_array = mul i32 %i.012, 4*/
	if ((cur_state == LEGUP_F_main_BB__2_4)) begin
		main_2_gep_array_reg <= main_2_gep_array;
		if (start == 1'b0 && ^(main_2_gep_array) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_array_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep = add i32 %gep_int, %gep_array*/
		main_2_gep = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	if ((cur_state == LEGUP_F_main_BB__2_5)) begin
		main_2_gep_reg <= main_2_gep;
		if (start == 1'b0 && ^(main_2_gep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %.preheader14*/
	/*   %gep2 = add i32 %gep_int1, 116*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_2_gep_reg <= main_preheader14_gep2;
		if (start == 1'b0 && ^(main_preheader14_gep2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %16*/
	/*   %gep23 = add i32 %gep_int21, %gep_array22*/
	if ((cur_state == LEGUP_F_main_BB__16_18)) begin
		main_2_gep_reg <= main_16_gep23;
		if (start == 1'b0 && ^(main_16_gep23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %66*/
	/*   %gep53 = add i32 %gep_int51, %gep_array52*/
	if ((cur_state == LEGUP_F_main_BB__66_36)) begin
		main_2_gep_reg <= main_66_gep53;
		if (start == 1'b0 && ^(main_66_gep53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %77*/
	/*   %gep59 = add i32 %gep_int57, %gep_array58*/
	if ((cur_state == LEGUP_F_main_BB__77_40)) begin
		main_2_gep_reg <= main_77_gep59;
		if (start == 1'b0 && ^(main_77_gep59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %79*/
	/*   %gep62 = add i32 %gep_int60, %gep_array61*/
	if ((cur_state == LEGUP_F_main_BB__79_43)) begin
		main_2_gep_reg <= main_79_gep62;
		if (start == 1'b0 && ^(main_79_gep62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %81*/
	/*   %gep65 = add i32 %gep_int63, %gep_array64*/
	if ((cur_state == LEGUP_F_main_BB__81_46)) begin
		main_2_gep_reg <= main_81_gep65;
		if (start == 1'b0 && ^(main_81_gep65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %33*/
	/*   %gep26 = add i32 %gep_int24, %gep_array25*/
	if ((cur_state == LEGUP_F_main_BB__33_22)) begin
		main_2_gep_reg <= main_33_gep26;
		if (start == 1'b0 && ^(main_33_gep26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %33*/
	/*   %38 = add nsw i32 %37, %35*/
	if ((cur_state == LEGUP_F_main_BB__33_23)) begin
		main_2_gep_reg <= main_33_38;
		if (start == 1'b0 && ^(main_33_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %42*/
	/*   %gep35 = add i32 %gep_int33, %gep_array34*/
	if ((cur_state == LEGUP_F_main_BB__42_27)) begin
		main_2_gep_reg <= main_42_gep35;
		if (start == 1'b0 && ^(main_42_gep35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %51*/
	/*   %gep44 = add i32 %gep_int42, %gep_array43*/
	if ((cur_state == LEGUP_F_main_BB__51_32)) begin
		main_2_gep_reg <= main_51_gep44;
		if (start == 1'b0 && ^(main_51_gep44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %119*/
	/*   %gep113 = add i32 %gep_int111, %gep_array112*/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_2_gep_reg <= main_119_gep113;
		if (start == 1'b0 && ^(main_119_gep113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %168*/
	/*   %gep155 = add i32 %gep_int153, %gep_array154*/
	if ((cur_state == LEGUP_F_main_BB__168_97)) begin
		main_2_gep_reg <= main_168_gep155;
		if (start == 1'b0 && ^(main_168_gep155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %174*/
	/*   %gep161 = add i32 %gep_int159, %gep_array160*/
	if ((cur_state == LEGUP_F_main_BB__174_101)) begin
		main_2_gep_reg <= main_174_gep161;
		if (start == 1'b0 && ^(main_174_gep161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %180*/
	/*   %gep167 = add i32 %gep_int165, %gep_array166*/
	if ((cur_state == LEGUP_F_main_BB__180_105)) begin
		main_2_gep_reg <= main_180_gep167;
		if (start == 1'b0 && ^(main_180_gep167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %180*/
	/*   %183 = add nsw i32 %182, %20*/
	if ((cur_state == LEGUP_F_main_BB__180_106)) begin
		main_2_gep_reg <= main_180_183;
		if (start == 1'b0 && ^(main_180_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %180*/
	/*   %gep170 = add i32 %gep_int168, %gep_array169*/
	if ((cur_state == LEGUP_F_main_BB__180_108)) begin
		main_2_gep_reg <= main_180_gep170;
		if (start == 1'b0 && ^(main_180_gep170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %189*/
	/*   %gep176 = add i32 %gep_int174, %gep_array175*/
	if ((cur_state == LEGUP_F_main_BB__189_113)) begin
		main_2_gep_reg <= main_189_gep176;
		if (start == 1'b0 && ^(main_189_gep176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %189*/
	/*   %194 = add nsw i32 %193, %20*/
	if ((cur_state == LEGUP_F_main_BB__189_114)) begin
		main_2_gep_reg <= main_189_194;
		if (start == 1'b0 && ^(main_189_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %88*/
	/*   %gep74 = add i32 %gep_int72, %gep_array73*/
	if ((cur_state == LEGUP_F_main_BB__88_50)) begin
		main_2_gep_reg <= main_88_gep74;
		if (start == 1'b0 && ^(main_88_gep74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %95*/
	/*   %gep83 = add i32 %gep_int81, %gep_array82*/
	if ((cur_state == LEGUP_F_main_BB__95_54)) begin
		main_2_gep_reg <= main_95_gep83;
		if (start == 1'b0 && ^(main_95_gep83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %102*/
	/*   %gep92 = add i32 %gep_int90, %gep_array91*/
	if ((cur_state == LEGUP_F_main_BB__102_58)) begin
		main_2_gep_reg <= main_102_gep92;
		if (start == 1'b0 && ^(main_102_gep92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %107*/
	/*   %gep98 = add i32 %gep_int96, %gep_array97*/
	if ((cur_state == LEGUP_F_main_BB__107_62)) begin
		main_2_gep_reg <= main_107_gep98;
		if (start == 1'b0 && ^(main_107_gep98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %112*/
	/*   %gep104 = add i32 %gep_int102, %gep_array103*/
	if ((cur_state == LEGUP_F_main_BB__112_66)) begin
		main_2_gep_reg <= main_112_gep104;
		if (start == 1'b0 && ^(main_112_gep104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %.loopexit*/
	/*   %249 = add nsw i32 %248, %245*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_147)) begin
		main_2_gep_reg <= main_loopexit_249;
		if (start == 1'b0 && ^(main_loopexit_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %.loopexit*/
	/*   %257 = add nsw i32 %256, %253*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_148)) begin
		main_2_gep_reg <= main_loopexit_257;
		if (start == 1'b0 && ^(main_loopexit_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %.loopexit*/
	/*   %265 = add nsw i32 %264, %261*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_149)) begin
		main_2_gep_reg <= main_loopexit_265;
		if (start == 1'b0 && ^(main_loopexit_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %126*/
	/*   %gep122 = add i32 %gep_int120, %gep_array121*/
	if ((cur_state == LEGUP_F_main_BB__126_74)) begin
		main_2_gep_reg <= main_126_gep122;
		if (start == 1'b0 && ^(main_126_gep122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %134*/
	/*   %gep131 = add i32 %gep_int129, %gep_array130*/
	if ((cur_state == LEGUP_F_main_BB__134_78)) begin
		main_2_gep_reg <= main_134_gep131;
		if (start == 1'b0 && ^(main_134_gep131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %142*/
	/*   %gep140 = add i32 %gep_int138, %gep_array139*/
	if ((cur_state == LEGUP_F_main_BB__142_82)) begin
		main_2_gep_reg <= main_142_gep140;
		if (start == 1'b0 && ^(main_142_gep140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %156*/
	/*   %gep143 = add i32 %gep_int141, %gep_array142*/
	if ((cur_state == LEGUP_F_main_BB__156_89)) begin
		main_2_gep_reg <= main_156_gep143;
		if (start == 1'b0 && ^(main_156_gep143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %156*/
	/*   %160 = add nsw i32 %158, %159*/
	if ((cur_state == LEGUP_F_main_BB__156_90)) begin
		main_2_gep_reg <= main_156_160;
		if (start == 1'b0 && ^(main_156_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %162*/
	/*   %gep149 = add i32 %gep_int147, %gep_array148*/
	if ((cur_state == LEGUP_F_main_BB__162_93)) begin
		main_2_gep_reg <= main_162_gep149;
		if (start == 1'b0 && ^(main_162_gep149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %189*/
	/*   %gep182 = add i32 %gep_int180, %gep_array181*/
	if ((cur_state == LEGUP_F_main_BB__189_116)) begin
		main_2_gep_reg <= main_189_gep182;
		if (start == 1'b0 && ^(main_189_gep182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %198*/
	/*   %gep185 = add i32 %gep_int183, %gep_array184*/
	if ((cur_state == LEGUP_F_main_BB__198_119)) begin
		main_2_gep_reg <= main_198_gep185;
		if (start == 1'b0 && ^(main_198_gep185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %200*/
	/*   %gep188 = add i32 %gep_int186, %gep_array187*/
	if ((cur_state == LEGUP_F_main_BB__200_122)) begin
		main_2_gep_reg <= main_200_gep188;
		if (start == 1'b0 && ^(main_200_gep188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %206*/
	/*   %208 = add nsw i32 %207, %pc.0*/
	if ((cur_state == LEGUP_F_main_BB__206_124)) begin
		main_2_gep_reg <= main_206_208;
		if (start == 1'b0 && ^(main_206_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %209*/
	/*   %gep194 = add i32 %gep_int192, %gep_array193*/
	if ((cur_state == LEGUP_F_main_BB__209_126)) begin
		main_2_gep_reg <= main_209_gep194;
		if (start == 1'b0 && ^(main_209_gep194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %218*/
	/*   %gep200 = add i32 %gep_int198, %gep_array199*/
	if ((cur_state == LEGUP_F_main_BB__218_130)) begin
		main_2_gep_reg <= main_218_gep200;
		if (start == 1'b0 && ^(main_218_gep200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %225*/
	/*   %gep203 = add i32 %gep_int201, %gep_array202*/
	if ((cur_state == LEGUP_F_main_BB__225_134)) begin
		main_2_gep_reg <= main_225_gep203;
		if (start == 1'b0 && ^(main_225_gep203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %232*/
	/*   %gep209 = add i32 %gep_int207, %gep_array208*/
	if ((cur_state == LEGUP_F_main_BB__232_138)) begin
		main_2_gep_reg <= main_232_gep209;
		if (start == 1'b0 && ^(main_232_gep209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %.thread*/
	/*   %239 = add nsw i32 %n_inst.0.lcssa, 1*/
	if ((cur_state == LEGUP_F_main_BB_thread_141)) begin
		main_2_gep_reg <= main_thread_239;
		if (start == 1'b0 && ^(main_thread_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
	/* main: %.loopexit*/
	/*   %273 = add nsw i32 %272, %269*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_150)) begin
		main_2_gep_reg <= main_loopexit_273;
		if (start == 1'b0 && ^(main_loopexit_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %3 = inttoptr i32 %gep to i32**/
		main_2_3 = main_2_gep;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %3 = inttoptr i32 %gep to i32**/
	if ((cur_state == LEGUP_F_main_BB__2_5)) begin
		main_2_3_reg <= main_2_3;
		if (start == 1'b0 && ^(main_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %4 = add nsw i32 %i.012, 1*/
		main_2_4 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %4 = add nsw i32 %i.012, 1*/
	if ((cur_state == LEGUP_F_main_BB__2_4)) begin
		main_2_4_reg <= main_2_4;
		if (start == 1'b0 && ^(main_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_4_reg"); $finish; end
	end
	/* main: %16*/
	/*   %21 = add nsw i32 %pc.0, 4*/
	if ((cur_state == LEGUP_F_main_BB__16_17)) begin
		main_2_4_reg <= main_16_21;
		if (start == 1'b0 && ^(main_16_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %exitcond = icmp eq i32 %4, 32*/
		main_2_exitcond = (main_2_4 == 32'd32);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %exitcond = icmp eq i32 %4, 32*/
	if ((cur_state == LEGUP_F_main_BB__2_4)) begin
		main_2_exitcond_reg <= main_2_exitcond;
		if (start == 1'b0 && ^(main_2_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep_int1 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_preheader14_gep_int1 = 0; end
		main_preheader14_gep_int1 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %gep_int1 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_gep_int1_reg <= main_preheader14_gep_int1;
		if (start == 1'b0 && ^(main_preheader14_gep_int1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep_int1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep2 = add i32 %gep_int1, 116*/
		main_preheader14_gep2 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader14*/
/*   %gep2 = add i32 %gep_int1, 116*/
	main_preheader14_gep2_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %5 = inttoptr i32 %gep2 to i32**/
		main_preheader14_5 = main_preheader14_gep2;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %5 = inttoptr i32 %gep2 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_5_reg <= main_preheader14_5;
		if (start == 1'b0 && ^(main_preheader14_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep_int3 = ptrtoint [64 x i32]* %dmem to i32*/
if (reset) begin main_preheader14_gep_int3 = 0; end
		main_preheader14_gep_int3 = `TAG_main_0_dmem_a;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %gep_int3 = ptrtoint [64 x i32]* %dmem to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_gep_int3_reg <= main_preheader14_gep_int3;
		if (start == 1'b0 && ^(main_preheader14_gep_int3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep_int3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %6 = inttoptr i32 %gep_int3 to i32**/
		main_preheader14_6 = main_preheader14_gep_int3;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %6 = inttoptr i32 %gep_int3 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_6_reg <= main_preheader14_6;
		if (start == 1'b0 && ^(main_preheader14_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep_int4 = ptrtoint [64 x i32]* %dmem to i32*/
if (reset) begin main_preheader14_gep_int4 = 0; end
		main_preheader14_gep_int4 = `TAG_main_0_dmem_a;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %gep_int4 = ptrtoint [64 x i32]* %dmem to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_gep_int4_reg <= main_preheader14_gep_int4;
		if (start == 1'b0 && ^(main_preheader14_gep_int4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep_int4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep5 = add i32 %gep_int4, 4*/
		main_preheader14_gep5 = main_signed_add_32_8;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %gep5 = add i32 %gep_int4, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_gep5_reg <= main_preheader14_gep5;
		if (start == 1'b0 && ^(main_preheader14_gep5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %7 = inttoptr i32 %gep5 to i32**/
		main_preheader14_7 = main_preheader14_gep5;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %7 = inttoptr i32 %gep5 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_7_reg <= main_preheader14_7;
		if (start == 1'b0 && ^(main_preheader14_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep_int6 = ptrtoint [64 x i32]* %dmem to i32*/
if (reset) begin main_preheader14_gep_int6 = 0; end
		main_preheader14_gep_int6 = `TAG_main_0_dmem_a;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %gep_int6 = ptrtoint [64 x i32]* %dmem to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_gep_int6_reg <= main_preheader14_gep_int6;
		if (start == 1'b0 && ^(main_preheader14_gep_int6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep_int6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep7 = add i32 %gep_int6, 8*/
		main_preheader14_gep7 = main_signed_add_32_3;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %gep7 = add i32 %gep_int6, 8*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_gep7_reg <= main_preheader14_gep7;
		if (start == 1'b0 && ^(main_preheader14_gep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %8 = inttoptr i32 %gep7 to i32**/
		main_preheader14_8 = main_preheader14_gep7;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %8 = inttoptr i32 %gep7 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_8_reg <= main_preheader14_8;
		if (start == 1'b0 && ^(main_preheader14_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep_int8 = ptrtoint [64 x i32]* %dmem to i32*/
if (reset) begin main_preheader14_gep_int8 = 0; end
		main_preheader14_gep_int8 = `TAG_main_0_dmem_a;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %gep_int8 = ptrtoint [64 x i32]* %dmem to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_gep_int8_reg <= main_preheader14_gep_int8;
		if (start == 1'b0 && ^(main_preheader14_gep_int8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep_int8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep9 = add i32 %gep_int8, 12*/
		main_preheader14_gep9 = main_signed_add_32_4;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %gep9 = add i32 %gep_int8, 12*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_gep9_reg <= main_preheader14_gep9;
		if (start == 1'b0 && ^(main_preheader14_gep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %9 = inttoptr i32 %gep9 to i32**/
		main_preheader14_9 = main_preheader14_gep9;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %9 = inttoptr i32 %gep9 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_9_reg <= main_preheader14_9;
		if (start == 1'b0 && ^(main_preheader14_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep_int10 = ptrtoint [64 x i32]* %dmem to i32*/
if (reset) begin main_preheader14_gep_int10 = 0; end
		main_preheader14_gep_int10 = `TAG_main_0_dmem_a;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %gep_int10 = ptrtoint [64 x i32]* %dmem to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_gep_int10_reg <= main_preheader14_gep_int10;
		if (start == 1'b0 && ^(main_preheader14_gep_int10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep_int10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep11 = add i32 %gep_int10, 16*/
		main_preheader14_gep11 = main_signed_add_32_5;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %gep11 = add i32 %gep_int10, 16*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_gep11_reg <= main_preheader14_gep11;
		if (start == 1'b0 && ^(main_preheader14_gep11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %10 = inttoptr i32 %gep11 to i32**/
		main_preheader14_10 = main_preheader14_gep11;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %10 = inttoptr i32 %gep11 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_10_reg <= main_preheader14_10;
		if (start == 1'b0 && ^(main_preheader14_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep_int12 = ptrtoint [64 x i32]* %dmem to i32*/
if (reset) begin main_preheader14_gep_int12 = 0; end
		main_preheader14_gep_int12 = `TAG_main_0_dmem_a;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %gep_int12 = ptrtoint [64 x i32]* %dmem to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_gep_int12_reg <= main_preheader14_gep_int12;
		if (start == 1'b0 && ^(main_preheader14_gep_int12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep_int12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep13 = add i32 %gep_int12, 20*/
		main_preheader14_gep13 = main_signed_add_32_6;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %gep13 = add i32 %gep_int12, 20*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_gep13_reg <= main_preheader14_gep13;
		if (start == 1'b0 && ^(main_preheader14_gep13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %11 = inttoptr i32 %gep13 to i32**/
		main_preheader14_11 = main_preheader14_gep13;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %11 = inttoptr i32 %gep13 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_11_reg <= main_preheader14_11;
		if (start == 1'b0 && ^(main_preheader14_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep_int14 = ptrtoint [64 x i32]* %dmem to i32*/
if (reset) begin main_preheader14_gep_int14 = 0; end
		main_preheader14_gep_int14 = `TAG_main_0_dmem_a;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %gep_int14 = ptrtoint [64 x i32]* %dmem to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_gep_int14_reg <= main_preheader14_gep_int14;
		if (start == 1'b0 && ^(main_preheader14_gep_int14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep_int14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep15 = add i32 %gep_int14, 24*/
		main_preheader14_gep15 = main_signed_add_32_7;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %gep15 = add i32 %gep_int14, 24*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_gep15_reg <= main_preheader14_gep15;
		if (start == 1'b0 && ^(main_preheader14_gep15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %12 = inttoptr i32 %gep15 to i32**/
		main_preheader14_12 = main_preheader14_gep15;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %12 = inttoptr i32 %gep15 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_12_reg <= main_preheader14_12;
		if (start == 1'b0 && ^(main_preheader14_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep_int16 = ptrtoint [64 x i32]* %dmem to i32*/
if (reset) begin main_preheader14_gep_int16 = 0; end
		main_preheader14_gep_int16 = `TAG_main_0_dmem_a;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %gep_int16 = ptrtoint [64 x i32]* %dmem to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_gep_int16_reg <= main_preheader14_gep_int16;
		if (start == 1'b0 && ^(main_preheader14_gep_int16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep_int16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep17 = add i32 %gep_int16, 28*/
		main_preheader14_gep17 = main_signed_add_32_2;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %gep17 = add i32 %gep_int16, 28*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_gep17_reg <= main_preheader14_gep17;
		if (start == 1'b0 && ^(main_preheader14_gep17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep17_reg"); $finish; end
	end
	/* main: %33*/
	/*   %gep32 = add i32 %gep_int30, %gep_array31*/
	if ((cur_state == LEGUP_F_main_BB__33_22)) begin
		main_preheader14_gep17_reg <= main_33_gep32;
		if (start == 1'b0 && ^(main_33_gep32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep17_reg"); $finish; end
	end
	/* main: %42*/
	/*   %gep41 = add i32 %gep_int39, %gep_array40*/
	if ((cur_state == LEGUP_F_main_BB__42_27)) begin
		main_preheader14_gep17_reg <= main_42_gep41;
		if (start == 1'b0 && ^(main_42_gep41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep17_reg"); $finish; end
	end
	/* main: %119*/
	/*   %gep119 = add i32 %gep_int117, %gep_array118*/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_preheader14_gep17_reg <= main_119_gep119;
		if (start == 1'b0 && ^(main_119_gep119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep17_reg"); $finish; end
	end
	/* main: %51*/
	/*   %gep50 = add i32 %gep_int48, %gep_array49*/
	if ((cur_state == LEGUP_F_main_BB__51_32)) begin
		main_preheader14_gep17_reg <= main_51_gep50;
		if (start == 1'b0 && ^(main_51_gep50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep17_reg"); $finish; end
	end
	/* main: %81*/
	/*   %gep71 = add i32 %gep_int69, %gep_array70*/
	if ((cur_state == LEGUP_F_main_BB__81_46)) begin
		main_preheader14_gep17_reg <= main_81_gep71;
		if (start == 1'b0 && ^(main_81_gep71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep17_reg"); $finish; end
	end
	/* main: %88*/
	/*   %gep80 = add i32 %gep_int78, %gep_array79*/
	if ((cur_state == LEGUP_F_main_BB__88_50)) begin
		main_preheader14_gep17_reg <= main_88_gep80;
		if (start == 1'b0 && ^(main_88_gep80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep17_reg"); $finish; end
	end
	/* main: %95*/
	/*   %gep89 = add i32 %gep_int87, %gep_array88*/
	if ((cur_state == LEGUP_F_main_BB__95_54)) begin
		main_preheader14_gep17_reg <= main_95_gep89;
		if (start == 1'b0 && ^(main_95_gep89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep17_reg"); $finish; end
	end
	/* main: %112*/
	/*   %gep110 = add i32 %gep_int108, %gep_array109*/
	if ((cur_state == LEGUP_F_main_BB__112_66)) begin
		main_preheader14_gep17_reg <= main_112_gep110;
		if (start == 1'b0 && ^(main_112_gep110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep17_reg"); $finish; end
	end
	/* main: %126*/
	/*   %gep128 = add i32 %gep_int126, %gep_array127*/
	if ((cur_state == LEGUP_F_main_BB__126_74)) begin
		main_preheader14_gep17_reg <= main_126_gep128;
		if (start == 1'b0 && ^(main_126_gep128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep17_reg"); $finish; end
	end
	/* main: %134*/
	/*   %gep137 = add i32 %gep_int135, %gep_array136*/
	if ((cur_state == LEGUP_F_main_BB__134_78)) begin
		main_preheader14_gep17_reg <= main_134_gep137;
		if (start == 1'b0 && ^(main_134_gep137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %13 = inttoptr i32 %gep17 to i32**/
		main_preheader14_13 = main_preheader14_gep17;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %13 = inttoptr i32 %gep17 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_13_reg <= main_preheader14_13;
		if (start == 1'b0 && ^(main_preheader14_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep_int18 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_preheader14_gep_int18 = 0; end
		main_preheader14_gep_int18 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %gep_int18 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_gep_int18_reg <= main_preheader14_gep_int18;
		if (start == 1'b0 && ^(main_preheader14_gep_int18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep_int18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %14 = inttoptr i32 %gep_int18 to i32**/
		main_preheader14_14 = main_preheader14_gep_int18;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %14 = inttoptr i32 %gep_int18 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_14_reg <= main_preheader14_14;
		if (start == 1'b0 && ^(main_preheader14_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep_int19 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_preheader14_gep_int19 = 0; end
		main_preheader14_gep_int19 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %gep_int19 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_gep_int19_reg <= main_preheader14_gep_int19;
		if (start == 1'b0 && ^(main_preheader14_gep_int19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_gep_int19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep20 = add i32 %gep_int19, 124*/
		main_preheader14_gep20 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader14*/
/*   %gep20 = add i32 %gep_int19, 124*/
	main_preheader14_gep20_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %15 = inttoptr i32 %gep20 to i32**/
		main_preheader14_15 = main_preheader14_gep20;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %15 = inttoptr i32 %gep20 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_preheader14_15_reg <= main_preheader14_15;
		if (start == 1'b0 && ^(main_preheader14_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %16*/
	/*   %pc.0 = phi i32 [ %pc.1, %240 ], [ 4194304, %.preheader14 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader14_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_16_pc0 = 32'd4194304;
	end
	/* main: %16*/
	/*   %pc.0 = phi i32 [ %pc.1, %240 ], [ 4194304, %.preheader14 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__240_144) & (memory_controller_waitrequest == 1'd0)) & (main_240_242_reg == 1'd0))) */ begin
		main_16_pc0 = main_240_pc1_reg;
	end
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %pc.0 = phi i32 [ %pc.1, %240 ], [ 4194304, %.preheader14 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader14_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_16_pc0_reg <= main_16_pc0;
		if (start == 1'b0 && ^(main_16_pc0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_pc0_reg"); $finish; end
	end
	/* main: %16*/
	/*   %pc.0 = phi i32 [ %pc.1, %240 ], [ 4194304, %.preheader14 ]*/
	if ((((cur_state == LEGUP_F_main_BB__240_144) & (memory_controller_waitrequest == 1'd0)) & (main_240_242_reg == 1'd0))) begin
		main_16_pc0_reg <= main_16_pc0;
		if (start == 1'b0 && ^(main_16_pc0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_pc0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %16*/
	/*   %Lo.0 = phi i32 [ %Lo.1, %240 ], [ 0, %.preheader14 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader14_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_16_Lo0 = 32'd0;
	end
	/* main: %16*/
	/*   %Lo.0 = phi i32 [ %Lo.1, %240 ], [ 0, %.preheader14 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__240_144) & (memory_controller_waitrequest == 1'd0)) & (main_240_242_reg == 1'd0))) */ begin
		main_16_Lo0 = main_240_Lo1_reg;
	end
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %Lo.0 = phi i32 [ %Lo.1, %240 ], [ 0, %.preheader14 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader14_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_16_Lo0_reg <= main_16_Lo0;
		if (start == 1'b0 && ^(main_16_Lo0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_Lo0_reg"); $finish; end
	end
	/* main: %16*/
	/*   %Lo.0 = phi i32 [ %Lo.1, %240 ], [ 0, %.preheader14 ]*/
	if ((((cur_state == LEGUP_F_main_BB__240_144) & (memory_controller_waitrequest == 1'd0)) & (main_240_242_reg == 1'd0))) begin
		main_16_Lo0_reg <= main_16_Lo0;
		if (start == 1'b0 && ^(main_16_Lo0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_Lo0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %16*/
	/*   %Hi.0 = phi i32 [ %Hi.1, %240 ], [ 0, %.preheader14 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader14_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_16_Hi0 = 32'd0;
	end
	/* main: %16*/
	/*   %Hi.0 = phi i32 [ %Hi.1, %240 ], [ 0, %.preheader14 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__240_144) & (memory_controller_waitrequest == 1'd0)) & (main_240_242_reg == 1'd0))) */ begin
		main_16_Hi0 = main_240_Hi1_reg;
	end
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %Hi.0 = phi i32 [ %Hi.1, %240 ], [ 0, %.preheader14 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader14_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_16_Hi0_reg <= main_16_Hi0;
		if (start == 1'b0 && ^(main_16_Hi0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_Hi0_reg"); $finish; end
	end
	/* main: %16*/
	/*   %Hi.0 = phi i32 [ %Hi.1, %240 ], [ 0, %.preheader14 ]*/
	if ((((cur_state == LEGUP_F_main_BB__240_144) & (memory_controller_waitrequest == 1'd0)) & (main_240_242_reg == 1'd0))) begin
		main_16_Hi0_reg <= main_16_Hi0;
		if (start == 1'b0 && ^(main_16_Hi0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_Hi0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %16*/
	/*   %n_inst.0 = phi i32 [ %241, %240 ], [ 0, %.preheader14 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader14_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_16_n_inst0 = 32'd0;
	end
	/* main: %16*/
	/*   %n_inst.0 = phi i32 [ %241, %240 ], [ 0, %.preheader14 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__240_144) & (memory_controller_waitrequest == 1'd0)) & (main_240_242_reg == 1'd0))) */ begin
		main_16_n_inst0 = main_240_241_reg;
	end
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %n_inst.0 = phi i32 [ %241, %240 ], [ 0, %.preheader14 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader14_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_16_n_inst0_reg <= main_16_n_inst0;
		if (start == 1'b0 && ^(main_16_n_inst0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_n_inst0_reg"); $finish; end
	end
	/* main: %16*/
	/*   %n_inst.0 = phi i32 [ %241, %240 ], [ 0, %.preheader14 ]*/
	if ((((cur_state == LEGUP_F_main_BB__240_144) & (memory_controller_waitrequest == 1'd0)) & (main_240_242_reg == 1'd0))) begin
		main_16_n_inst0_reg <= main_16_n_inst0;
		if (start == 1'b0 && ^(main_16_n_inst0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_n_inst0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %16*/
	/*   %17 = lshr i32 %pc.0, 2*/
		main_16_17 = (main_16_pc0_reg >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %17 = lshr i32 %pc.0, 2*/
	if ((cur_state == LEGUP_F_main_BB__16_17)) begin
		main_16_17_reg <= main_16_17;
		if (start == 1'b0 && ^(main_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %16*/
	/*   %18 = and i32 %17, 63*/
		main_16_18 = (main_16_17 & 32'd63);
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %18 = and i32 %17, 63*/
	if ((cur_state == LEGUP_F_main_BB__16_17)) begin
		main_16_18_reg <= main_16_18;
		if (start == 1'b0 && ^(main_16_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %16*/
	/*   %gep_int21 = ptrtoint [44 x i32]* @imem to i32*/
if (reset) begin main_16_gep_int21 = 0; end
		main_16_gep_int21 = 1'd0;
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %gep_int21 = ptrtoint [44 x i32]* @imem to i32*/
	if ((cur_state == LEGUP_F_main_BB__16_17)) begin
		main_16_gep_int21_reg <= main_16_gep_int21;
		if (start == 1'b0 && ^(main_16_gep_int21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_gep_int21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %16*/
	/*   %gep_array22 = mul i32 %18, 4*/
		main_16_gep_array22 = (main_16_18 * 32'd4);
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %gep_array22 = mul i32 %18, 4*/
	if ((cur_state == LEGUP_F_main_BB__16_17)) begin
		main_16_gep_array22_reg <= main_16_gep_array22;
		if (start == 1'b0 && ^(main_16_gep_array22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_gep_array22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %16*/
	/*   %gep23 = add i32 %gep_int21, %gep_array22*/
		main_16_gep23 = main_signed_add_32_0;
end
always @(*) begin
/* main: %16*/
/*   %gep23 = add i32 %gep_int21, %gep_array22*/
	main_16_gep23_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %16*/
	/*   %19 = inttoptr i32 %gep23 to i32**/
		main_16_19 = main_16_gep23;
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %19 = inttoptr i32 %gep23 to i32**/
	if ((cur_state == LEGUP_F_main_BB__16_18)) begin
		main_16_19_reg <= main_16_19;
		if (start == 1'b0 && ^(main_16_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %16*/
	/*   %20 = load i32* %19, align 4, !tbaa !5*/
		main_16_20 = imem_out_a;
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %20 = load i32* %19, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__16_19)) begin
		main_16_20_reg <= main_16_20;
		if (start == 1'b0 && ^(main_16_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %16*/
	/*   %21 = add nsw i32 %pc.0, 4*/
		main_16_21 = main_signed_add_32_0;
end
always @(*) begin
/* main: %16*/
/*   %21 = add nsw i32 %pc.0, 4*/
	main_16_21_reg = main_2_4_reg;
end
always @(*) begin
	/* main: %16*/
	/*   %22 = lshr i32 %20, 26*/
		main_16_22 = (main_16_20 >>> (32'd26 % 32));
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %22 = lshr i32 %20, 26*/
	if ((cur_state == LEGUP_F_main_BB__16_19)) begin
		main_16_22_reg <= main_16_22;
		if (start == 1'b0 && ^(main_16_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %24 = and i32 %20, 63*/
		main_23_24 = (main_16_20_reg & 32'd63);
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %24 = and i32 %20, 63*/
	if ((cur_state == LEGUP_F_main_BB__23_20)) begin
		main_23_24_reg <= main_23_24;
		if (start == 1'b0 && ^(main_23_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %25 = lshr i32 %20, 6*/
		main_23_25 = (main_16_20_reg >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %25 = lshr i32 %20, 6*/
	if ((cur_state == LEGUP_F_main_BB__23_20)) begin
		main_23_25_reg <= main_23_25;
		if (start == 1'b0 && ^(main_23_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %26 = and i32 %25, 31*/
		main_23_26 = (main_23_25 & 32'd31);
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %26 = and i32 %25, 31*/
	if ((cur_state == LEGUP_F_main_BB__23_20)) begin
		main_23_26_reg <= main_23_26;
		if (start == 1'b0 && ^(main_23_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %27 = lshr i32 %20, 11*/
		main_23_27 = (main_16_20_reg >>> (32'd11 % 32));
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %27 = lshr i32 %20, 11*/
	if ((cur_state == LEGUP_F_main_BB__23_20)) begin
		main_23_27_reg <= main_23_27;
		if (start == 1'b0 && ^(main_23_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %28 = and i32 %27, 31*/
		main_23_28 = (main_23_27 & 32'd31);
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %28 = and i32 %27, 31*/
	if ((cur_state == LEGUP_F_main_BB__23_20)) begin
		main_23_28_reg <= main_23_28;
		if (start == 1'b0 && ^(main_23_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %29 = lshr i32 %20, 16*/
		main_23_29 = (main_16_20_reg >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %29 = lshr i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__23_20)) begin
		main_23_29_reg <= main_23_29;
		if (start == 1'b0 && ^(main_23_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %30 = and i32 %29, 31*/
		main_23_30 = (main_23_29 & 32'd31);
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %30 = and i32 %29, 31*/
	if ((cur_state == LEGUP_F_main_BB__23_20)) begin
		main_23_30_reg <= main_23_30;
		if (start == 1'b0 && ^(main_23_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %31 = lshr i32 %20, 21*/
		main_23_31 = (main_16_20_reg >>> (32'd21 % 32));
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %31 = lshr i32 %20, 21*/
	if ((cur_state == LEGUP_F_main_BB__23_20)) begin
		main_23_31_reg <= main_23_31;
		if (start == 1'b0 && ^(main_23_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %32 = and i32 %31, 31*/
		main_23_32 = (main_23_31 & 32'd31);
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %32 = and i32 %31, 31*/
	if ((cur_state == LEGUP_F_main_BB__23_20)) begin
		main_23_32_reg <= main_23_32;
		if (start == 1'b0 && ^(main_23_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %gep_int24 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_33_gep_int24 = 0; end
		main_33_gep_int24 = 1'd0;
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %gep_int24 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__33_21)) begin
		main_33_gep_int24_reg <= main_33_gep_int24;
		if (start == 1'b0 && ^(main_33_gep_int24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_gep_int24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %gep_array25 = mul i32 %32, 4*/
		main_33_gep_array25 = (main_23_32_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %gep_array25 = mul i32 %32, 4*/
	if ((cur_state == LEGUP_F_main_BB__33_21)) begin
		main_33_gep_array25_reg <= main_33_gep_array25;
		if (start == 1'b0 && ^(main_33_gep_array25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_gep_array25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %gep26 = add i32 %gep_int24, %gep_array25*/
		main_33_gep26 = main_signed_add_32_0;
end
always @(*) begin
/* main: %33*/
/*   %gep26 = add i32 %gep_int24, %gep_array25*/
	main_33_gep26_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %33*/
	/*   %34 = inttoptr i32 %gep26 to i32**/
		main_33_34 = main_33_gep26;
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %34 = inttoptr i32 %gep26 to i32**/
	if ((cur_state == LEGUP_F_main_BB__33_22)) begin
		main_33_34_reg <= main_33_34;
		if (start == 1'b0 && ^(main_33_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
		main_33_35 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_23)) begin
		main_33_35_reg <= main_33_35;
		if (start == 1'b0 && ^(main_33_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %gep_int27 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_33_gep_int27 = 0; end
		main_33_gep_int27 = 1'd0;
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %gep_int27 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__33_21)) begin
		main_33_gep_int27_reg <= main_33_gep_int27;
		if (start == 1'b0 && ^(main_33_gep_int27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_gep_int27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %gep_array28 = mul i32 %30, 4*/
		main_33_gep_array28 = (main_23_30_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %gep_array28 = mul i32 %30, 4*/
	if ((cur_state == LEGUP_F_main_BB__33_21)) begin
		main_33_gep_array28_reg <= main_33_gep_array28;
		if (start == 1'b0 && ^(main_33_gep_array28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_gep_array28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %gep29 = add i32 %gep_int27, %gep_array28*/
		main_33_gep29 = main_signed_add_32_1;
end
always @(*) begin
/* main: %33*/
/*   %gep29 = add i32 %gep_int27, %gep_array28*/
	main_33_gep29_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %33*/
	/*   %36 = inttoptr i32 %gep29 to i32**/
		main_33_36 = main_33_gep29;
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %36 = inttoptr i32 %gep29 to i32**/
	if ((cur_state == LEGUP_F_main_BB__33_22)) begin
		main_33_36_reg <= main_33_36;
		if (start == 1'b0 && ^(main_33_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
		main_33_37 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_23)) begin
		main_33_37_reg <= main_33_37;
		if (start == 1'b0 && ^(main_33_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %38 = add nsw i32 %37, %35*/
		main_33_38 = main_signed_add_32_0;
end
always @(*) begin
/* main: %33*/
/*   %38 = add nsw i32 %37, %35*/
	main_33_38_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %33*/
	/*   %gep_int30 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_33_gep_int30 = 0; end
		main_33_gep_int30 = 1'd0;
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %gep_int30 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__33_21)) begin
		main_33_gep_int30_reg <= main_33_gep_int30;
		if (start == 1'b0 && ^(main_33_gep_int30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_gep_int30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %gep_array31 = mul i32 %28, 4*/
		main_33_gep_array31 = (main_23_28_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %gep_array31 = mul i32 %28, 4*/
	if ((cur_state == LEGUP_F_main_BB__33_21)) begin
		main_33_gep_array31_reg <= main_33_gep_array31;
		if (start == 1'b0 && ^(main_33_gep_array31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_gep_array31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %gep32 = add i32 %gep_int30, %gep_array31*/
		main_33_gep32 = main_signed_add_32_2;
end
always @(*) begin
/* main: %33*/
/*   %gep32 = add i32 %gep_int30, %gep_array31*/
	main_33_gep32_reg = main_preheader14_gep17_reg;
end
always @(*) begin
	/* main: %33*/
	/*   %39 = inttoptr i32 %gep32 to i32**/
		main_33_39 = main_33_gep32;
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %39 = inttoptr i32 %gep32 to i32**/
	if ((cur_state == LEGUP_F_main_BB__33_22)) begin
		main_33_39_reg <= main_33_39;
		if (start == 1'b0 && ^(main_33_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
		main_33_40 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_24)) begin
		main_33_40_reg <= main_33_40;
		if (start == 1'b0 && ^(main_33_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %41 = add nsw i32 %38, %40*/
		main_33_41 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %41 = add nsw i32 %38, %40*/
	if ((cur_state == LEGUP_F_main_BB__33_24)) begin
		main_33_41_reg <= main_33_41;
		if (start == 1'b0 && ^(main_33_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_41_reg"); $finish; end
	end
	/* main: %215*/
	/*   %217 = add nsw i32 %216, %pc.0*/
	if ((cur_state == LEGUP_F_main_BB__215_128)) begin
		main_33_41_reg <= main_215_217;
		if (start == 1'b0 && ^(main_215_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %gep_int33 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_42_gep_int33 = 0; end
		main_42_gep_int33 = 1'd0;
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %gep_int33 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__42_26)) begin
		main_42_gep_int33_reg <= main_42_gep_int33;
		if (start == 1'b0 && ^(main_42_gep_int33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_gep_int33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %gep_array34 = mul i32 %32, 4*/
		main_42_gep_array34 = (main_23_32_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %gep_array34 = mul i32 %32, 4*/
	if ((cur_state == LEGUP_F_main_BB__42_26)) begin
		main_42_gep_array34_reg <= main_42_gep_array34;
		if (start == 1'b0 && ^(main_42_gep_array34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_gep_array34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %gep35 = add i32 %gep_int33, %gep_array34*/
		main_42_gep35 = main_signed_add_32_0;
end
always @(*) begin
/* main: %42*/
/*   %gep35 = add i32 %gep_int33, %gep_array34*/
	main_42_gep35_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %42*/
	/*   %43 = inttoptr i32 %gep35 to i32**/
		main_42_43 = main_42_gep35;
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %43 = inttoptr i32 %gep35 to i32**/
	if ((cur_state == LEGUP_F_main_BB__42_27)) begin
		main_42_43_reg <= main_42_43;
		if (start == 1'b0 && ^(main_42_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
		main_42_44 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_28)) begin
		main_42_44_reg <= main_42_44;
		if (start == 1'b0 && ^(main_42_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %gep_int36 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_42_gep_int36 = 0; end
		main_42_gep_int36 = 1'd0;
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %gep_int36 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__42_26)) begin
		main_42_gep_int36_reg <= main_42_gep_int36;
		if (start == 1'b0 && ^(main_42_gep_int36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_gep_int36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %gep_array37 = mul i32 %30, 4*/
		main_42_gep_array37 = (main_23_30_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %gep_array37 = mul i32 %30, 4*/
	if ((cur_state == LEGUP_F_main_BB__42_26)) begin
		main_42_gep_array37_reg <= main_42_gep_array37;
		if (start == 1'b0 && ^(main_42_gep_array37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_gep_array37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %gep38 = add i32 %gep_int36, %gep_array37*/
		main_42_gep38 = main_signed_add_32_1;
end
always @(*) begin
/* main: %42*/
/*   %gep38 = add i32 %gep_int36, %gep_array37*/
	main_42_gep38_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %42*/
	/*   %45 = inttoptr i32 %gep38 to i32**/
		main_42_45 = main_42_gep38;
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %45 = inttoptr i32 %gep38 to i32**/
	if ((cur_state == LEGUP_F_main_BB__42_27)) begin
		main_42_45_reg <= main_42_45;
		if (start == 1'b0 && ^(main_42_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %46 = load i32* %45, align 4, !tbaa !1*/
		main_42_46 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %46 = load i32* %45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_28)) begin
		main_42_46_reg <= main_42_46;
		if (start == 1'b0 && ^(main_42_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %47 = sub i32 %44, %46*/
		main_42_47 = main_signed_subtract_32_0;
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %47 = sub i32 %44, %46*/
	if ((cur_state == LEGUP_F_main_BB__42_28)) begin
		main_42_47_reg <= main_42_47;
		if (start == 1'b0 && ^(main_42_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %gep_int39 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_42_gep_int39 = 0; end
		main_42_gep_int39 = 1'd0;
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %gep_int39 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__42_26)) begin
		main_42_gep_int39_reg <= main_42_gep_int39;
		if (start == 1'b0 && ^(main_42_gep_int39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_gep_int39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %gep_array40 = mul i32 %28, 4*/
		main_42_gep_array40 = (main_23_28_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %gep_array40 = mul i32 %28, 4*/
	if ((cur_state == LEGUP_F_main_BB__42_26)) begin
		main_42_gep_array40_reg <= main_42_gep_array40;
		if (start == 1'b0 && ^(main_42_gep_array40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_gep_array40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %gep41 = add i32 %gep_int39, %gep_array40*/
		main_42_gep41 = main_signed_add_32_2;
end
always @(*) begin
/* main: %42*/
/*   %gep41 = add i32 %gep_int39, %gep_array40*/
	main_42_gep41_reg = main_preheader14_gep17_reg;
end
always @(*) begin
	/* main: %42*/
	/*   %48 = inttoptr i32 %gep41 to i32**/
		main_42_48 = main_42_gep41;
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %48 = inttoptr i32 %gep41 to i32**/
	if ((cur_state == LEGUP_F_main_BB__42_27)) begin
		main_42_48_reg <= main_42_48;
		if (start == 1'b0 && ^(main_42_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %49 = load i32* %48, align 4, !tbaa !1*/
		main_42_49 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %49 = load i32* %48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_29)) begin
		main_42_49_reg <= main_42_49;
		if (start == 1'b0 && ^(main_42_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %50 = sub i32 %47, %49*/
		main_42_50 = main_signed_subtract_32_0;
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %50 = sub i32 %47, %49*/
	if ((cur_state == LEGUP_F_main_BB__42_29)) begin
		main_42_50_reg <= main_42_50;
		if (start == 1'b0 && ^(main_42_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %gep_int42 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_51_gep_int42 = 0; end
		main_51_gep_int42 = 1'd0;
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %gep_int42 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__51_31)) begin
		main_51_gep_int42_reg <= main_51_gep_int42;
		if (start == 1'b0 && ^(main_51_gep_int42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_gep_int42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %gep_array43 = mul i32 %32, 4*/
		main_51_gep_array43 = (main_23_32_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %gep_array43 = mul i32 %32, 4*/
	if ((cur_state == LEGUP_F_main_BB__51_31)) begin
		main_51_gep_array43_reg <= main_51_gep_array43;
		if (start == 1'b0 && ^(main_51_gep_array43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_gep_array43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %gep44 = add i32 %gep_int42, %gep_array43*/
		main_51_gep44 = main_signed_add_32_0;
end
always @(*) begin
/* main: %51*/
/*   %gep44 = add i32 %gep_int42, %gep_array43*/
	main_51_gep44_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %51*/
	/*   %52 = inttoptr i32 %gep44 to i32**/
		main_51_52 = main_51_gep44;
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %52 = inttoptr i32 %gep44 to i32**/
	if ((cur_state == LEGUP_F_main_BB__51_32)) begin
		main_51_52_reg <= main_51_52;
		if (start == 1'b0 && ^(main_51_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %53 = load i32* %52, align 4, !tbaa !1*/
		main_51_53 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %53 = load i32* %52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_33)) begin
		main_51_53_reg <= main_51_53;
		if (start == 1'b0 && ^(main_51_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %54 = sext i32 %53 to i64*/
		main_51_54 = $signed(main_51_53);
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %54 = sext i32 %53 to i64*/
	if ((cur_state == LEGUP_F_main_BB__51_33)) begin
		main_51_54_reg <= main_51_54;
		if (start == 1'b0 && ^(main_51_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %gep_int45 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_51_gep_int45 = 0; end
		main_51_gep_int45 = 1'd0;
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %gep_int45 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__51_31)) begin
		main_51_gep_int45_reg <= main_51_gep_int45;
		if (start == 1'b0 && ^(main_51_gep_int45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_gep_int45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %gep_array46 = mul i32 %30, 4*/
		main_51_gep_array46 = (main_23_30_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %gep_array46 = mul i32 %30, 4*/
	if ((cur_state == LEGUP_F_main_BB__51_31)) begin
		main_51_gep_array46_reg <= main_51_gep_array46;
		if (start == 1'b0 && ^(main_51_gep_array46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_gep_array46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %gep47 = add i32 %gep_int45, %gep_array46*/
		main_51_gep47 = main_signed_add_32_1;
end
always @(*) begin
/* main: %51*/
/*   %gep47 = add i32 %gep_int45, %gep_array46*/
	main_51_gep47_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %51*/
	/*   %55 = inttoptr i32 %gep47 to i32**/
		main_51_55 = main_51_gep47;
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %55 = inttoptr i32 %gep47 to i32**/
	if ((cur_state == LEGUP_F_main_BB__51_32)) begin
		main_51_55_reg <= main_51_55;
		if (start == 1'b0 && ^(main_51_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
		main_51_56 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_33)) begin
		main_51_56_reg <= main_51_56;
		if (start == 1'b0 && ^(main_51_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %57 = sext i32 %56 to i64*/
		main_51_57 = $signed(main_51_56);
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %57 = sext i32 %56 to i64*/
	if ((cur_state == LEGUP_F_main_BB__51_33)) begin
		main_51_57_reg <= main_51_57;
		if (start == 1'b0 && ^(main_51_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_57_reg"); $finish; end
	end
end
always @(*) begin
	main_51_58 = main_signed_multiply_64_0;
end
always @(*) begin
/* main: %51*/
/*   %58 = mul nsw i64 %57, %54*/
	main_51_58_reg = main_66_73_reg;
end
always @(*) begin
	/* main: %51*/
	/*   %gep_int48 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_51_gep_int48 = 0; end
		main_51_gep_int48 = 1'd0;
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %gep_int48 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__51_31)) begin
		main_51_gep_int48_reg <= main_51_gep_int48;
		if (start == 1'b0 && ^(main_51_gep_int48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_gep_int48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %gep_array49 = mul i32 %28, 4*/
		main_51_gep_array49 = (main_23_28_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %gep_array49 = mul i32 %28, 4*/
	if ((cur_state == LEGUP_F_main_BB__51_31)) begin
		main_51_gep_array49_reg <= main_51_gep_array49;
		if (start == 1'b0 && ^(main_51_gep_array49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_gep_array49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %gep50 = add i32 %gep_int48, %gep_array49*/
		main_51_gep50 = main_signed_add_32_2;
end
always @(*) begin
/* main: %51*/
/*   %gep50 = add i32 %gep_int48, %gep_array49*/
	main_51_gep50_reg = main_preheader14_gep17_reg;
end
always @(*) begin
	/* main: %51*/
	/*   %59 = inttoptr i32 %gep50 to i32**/
		main_51_59 = main_51_gep50;
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %59 = inttoptr i32 %gep50 to i32**/
	if ((cur_state == LEGUP_F_main_BB__51_32)) begin
		main_51_59_reg <= main_51_59;
		if (start == 1'b0 && ^(main_51_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %60 = load i32* %59, align 4, !tbaa !1*/
		main_51_60 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %60 = load i32* %59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_34)) begin
		main_51_60_reg <= main_51_60;
		if (start == 1'b0 && ^(main_51_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %61 = sext i32 %60 to i64*/
		main_51_61 = $signed(main_51_60);
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %61 = sext i32 %60 to i64*/
	if ((cur_state == LEGUP_F_main_BB__51_34)) begin
		main_51_61_reg <= main_51_61;
		if (start == 1'b0 && ^(main_51_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %62 = add nsw i64 %58, %61*/
		main_51_62 = main_signed_add_64_0;
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %62 = add nsw i64 %58, %61*/
	if ((cur_state == LEGUP_F_main_BB__51_34)) begin
		main_51_62_reg <= main_51_62;
		if (start == 1'b0 && ^(main_51_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %63 = trunc i64 %62 to i32*/
		main_51_63 = main_51_62[31:0];
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %63 = trunc i64 %62 to i32*/
	if ((cur_state == LEGUP_F_main_BB__51_34)) begin
		main_51_63_reg <= main_51_63;
		if (start == 1'b0 && ^(main_51_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %64 = lshr i64 %62, 32*/
		main_51_64 = (main_51_62 >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %64 = lshr i64 %62, 32*/
	if ((cur_state == LEGUP_F_main_BB__51_34)) begin
		main_51_64_reg <= main_51_64;
		if (start == 1'b0 && ^(main_51_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %65 = trunc i64 %64 to i32*/
		main_51_65 = main_51_64[31:0];
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %65 = trunc i64 %64 to i32*/
	if ((cur_state == LEGUP_F_main_BB__51_34)) begin
		main_51_65_reg <= main_51_65;
		if (start == 1'b0 && ^(main_51_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %gep_int51 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_66_gep_int51 = 0; end
		main_66_gep_int51 = 1'd0;
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %gep_int51 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__66_35)) begin
		main_66_gep_int51_reg <= main_66_gep_int51;
		if (start == 1'b0 && ^(main_66_gep_int51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep_int51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %gep_array52 = mul i32 %32, 4*/
		main_66_gep_array52 = (main_23_32_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %gep_array52 = mul i32 %32, 4*/
	if ((cur_state == LEGUP_F_main_BB__66_35)) begin
		main_66_gep_array52_reg <= main_66_gep_array52;
		if (start == 1'b0 && ^(main_66_gep_array52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep_array52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %gep53 = add i32 %gep_int51, %gep_array52*/
		main_66_gep53 = main_signed_add_32_0;
end
always @(*) begin
/* main: %66*/
/*   %gep53 = add i32 %gep_int51, %gep_array52*/
	main_66_gep53_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %66*/
	/*   %67 = inttoptr i32 %gep53 to i32**/
		main_66_67 = main_66_gep53;
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %67 = inttoptr i32 %gep53 to i32**/
	if ((cur_state == LEGUP_F_main_BB__66_36)) begin
		main_66_67_reg <= main_66_67;
		if (start == 1'b0 && ^(main_66_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %68 = load i32* %67, align 4, !tbaa !1*/
		main_66_68 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %68 = load i32* %67, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__66_37)) begin
		main_66_68_reg <= main_66_68;
		if (start == 1'b0 && ^(main_66_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %69 = sext i32 %68 to i64*/
		main_66_69 = $signed(main_66_68);
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %69 = sext i32 %68 to i64*/
	if ((cur_state == LEGUP_F_main_BB__66_37)) begin
		main_66_69_reg <= main_66_69;
		if (start == 1'b0 && ^(main_66_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %gep_int54 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_66_gep_int54 = 0; end
		main_66_gep_int54 = 1'd0;
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %gep_int54 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__66_35)) begin
		main_66_gep_int54_reg <= main_66_gep_int54;
		if (start == 1'b0 && ^(main_66_gep_int54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep_int54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %gep_array55 = mul i32 %30, 4*/
		main_66_gep_array55 = (main_23_30_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %gep_array55 = mul i32 %30, 4*/
	if ((cur_state == LEGUP_F_main_BB__66_35)) begin
		main_66_gep_array55_reg <= main_66_gep_array55;
		if (start == 1'b0 && ^(main_66_gep_array55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep_array55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %gep56 = add i32 %gep_int54, %gep_array55*/
		main_66_gep56 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %gep56 = add i32 %gep_int54, %gep_array55*/
	if ((cur_state == LEGUP_F_main_BB__66_36)) begin
		main_66_gep56_reg <= main_66_gep56;
		if (start == 1'b0 && ^(main_66_gep56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %.preheader14*/
	/*   %gep20 = add i32 %gep_int19, 124*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_66_gep56_reg <= main_preheader14_gep20;
		if (start == 1'b0 && ^(main_preheader14_gep20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %33*/
	/*   %gep29 = add i32 %gep_int27, %gep_array28*/
	if ((cur_state == LEGUP_F_main_BB__33_22)) begin
		main_66_gep56_reg <= main_33_gep29;
		if (start == 1'b0 && ^(main_33_gep29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %42*/
	/*   %gep38 = add i32 %gep_int36, %gep_array37*/
	if ((cur_state == LEGUP_F_main_BB__42_27)) begin
		main_66_gep56_reg <= main_42_gep38;
		if (start == 1'b0 && ^(main_42_gep38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %51*/
	/*   %gep47 = add i32 %gep_int45, %gep_array46*/
	if ((cur_state == LEGUP_F_main_BB__51_32)) begin
		main_66_gep56_reg <= main_51_gep47;
		if (start == 1'b0 && ^(main_51_gep47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %119*/
	/*   %gep116 = add i32 %gep_int114, %gep_array115*/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_66_gep56_reg <= main_119_gep116;
		if (start == 1'b0 && ^(main_119_gep116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %162*/
	/*   %gep152 = add i32 %gep_int150, %gep_array151*/
	if ((cur_state == LEGUP_F_main_BB__162_93)) begin
		main_66_gep56_reg <= main_162_gep152;
		if (start == 1'b0 && ^(main_162_gep152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %168*/
	/*   %gep158 = add i32 %gep_int156, %gep_array157*/
	if ((cur_state == LEGUP_F_main_BB__168_97)) begin
		main_66_gep56_reg <= main_168_gep158;
		if (start == 1'b0 && ^(main_168_gep158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %174*/
	/*   %gep164 = add i32 %gep_int162, %gep_array163*/
	if ((cur_state == LEGUP_F_main_BB__174_101)) begin
		main_66_gep56_reg <= main_174_gep164;
		if (start == 1'b0 && ^(main_174_gep164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %180*/
	/*   %gep173 = add i32 %gep_int171, %gep_array172*/
	if ((cur_state == LEGUP_F_main_BB__180_105)) begin
		main_66_gep56_reg <= main_180_gep173;
		if (start == 1'b0 && ^(main_180_gep173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %189*/
	/*   %gep179 = add i32 %gep_int177, %gep_array178*/
	if ((cur_state == LEGUP_F_main_BB__189_113)) begin
		main_66_gep56_reg <= main_189_gep179;
		if (start == 1'b0 && ^(main_189_gep179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %81*/
	/*   %gep68 = add i32 %gep_int66, %gep_array67*/
	if ((cur_state == LEGUP_F_main_BB__81_46)) begin
		main_66_gep56_reg <= main_81_gep68;
		if (start == 1'b0 && ^(main_81_gep68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %88*/
	/*   %gep77 = add i32 %gep_int75, %gep_array76*/
	if ((cur_state == LEGUP_F_main_BB__88_50)) begin
		main_66_gep56_reg <= main_88_gep77;
		if (start == 1'b0 && ^(main_88_gep77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %95*/
	/*   %gep86 = add i32 %gep_int84, %gep_array85*/
	if ((cur_state == LEGUP_F_main_BB__95_54)) begin
		main_66_gep56_reg <= main_95_gep86;
		if (start == 1'b0 && ^(main_95_gep86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %102*/
	/*   %gep95 = add i32 %gep_int93, %gep_array94*/
	if ((cur_state == LEGUP_F_main_BB__102_58)) begin
		main_66_gep56_reg <= main_102_gep95;
		if (start == 1'b0 && ^(main_102_gep95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %107*/
	/*   %gep101 = add i32 %gep_int99, %gep_array100*/
	if ((cur_state == LEGUP_F_main_BB__107_62)) begin
		main_66_gep56_reg <= main_107_gep101;
		if (start == 1'b0 && ^(main_107_gep101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %112*/
	/*   %gep107 = add i32 %gep_int105, %gep_array106*/
	if ((cur_state == LEGUP_F_main_BB__112_66)) begin
		main_66_gep56_reg <= main_112_gep107;
		if (start == 1'b0 && ^(main_112_gep107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %.loopexit*/
	/*   %253 = add nsw i32 %252, %249*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_147)) begin
		main_66_gep56_reg <= main_loopexit_253;
		if (start == 1'b0 && ^(main_loopexit_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %.loopexit*/
	/*   %269 = add nsw i32 %268, %265*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_149)) begin
		main_66_gep56_reg <= main_loopexit_269;
		if (start == 1'b0 && ^(main_loopexit_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %126*/
	/*   %gep125 = add i32 %gep_int123, %gep_array124*/
	if ((cur_state == LEGUP_F_main_BB__126_74)) begin
		main_66_gep56_reg <= main_126_gep125;
		if (start == 1'b0 && ^(main_126_gep125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %134*/
	/*   %gep134 = add i32 %gep_int132, %gep_array133*/
	if ((cur_state == LEGUP_F_main_BB__134_78)) begin
		main_66_gep56_reg <= main_134_gep134;
		if (start == 1'b0 && ^(main_134_gep134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %156*/
	/*   %gep146 = add i32 %gep_int144, %gep_array145*/
	if ((cur_state == LEGUP_F_main_BB__156_89)) begin
		main_66_gep56_reg <= main_156_gep146;
		if (start == 1'b0 && ^(main_156_gep146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %200*/
	/*   %gep191 = add i32 %gep_int189, %gep_array190*/
	if ((cur_state == LEGUP_F_main_BB__200_122)) begin
		main_66_gep56_reg <= main_200_gep191;
		if (start == 1'b0 && ^(main_200_gep191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %209*/
	/*   %gep197 = add i32 %gep_int195, %gep_array196*/
	if ((cur_state == LEGUP_F_main_BB__209_126)) begin
		main_66_gep56_reg <= main_209_gep197;
		if (start == 1'b0 && ^(main_209_gep197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %225*/
	/*   %gep206 = add i32 %gep_int204, %gep_array205*/
	if ((cur_state == LEGUP_F_main_BB__225_134)) begin
		main_66_gep56_reg <= main_225_gep206;
		if (start == 1'b0 && ^(main_225_gep206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
	/* main: %232*/
	/*   %gep212 = add i32 %gep_int210, %gep_array211*/
	if ((cur_state == LEGUP_F_main_BB__232_138)) begin
		main_66_gep56_reg <= main_232_gep212;
		if (start == 1'b0 && ^(main_232_gep212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_gep56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %70 = inttoptr i32 %gep56 to i32**/
		main_66_70 = main_66_gep56;
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %70 = inttoptr i32 %gep56 to i32**/
	if ((cur_state == LEGUP_F_main_BB__66_36)) begin
		main_66_70_reg <= main_66_70;
		if (start == 1'b0 && ^(main_66_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %71 = load i32* %70, align 4, !tbaa !1*/
		main_66_71 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %71 = load i32* %70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__66_37)) begin
		main_66_71_reg <= main_66_71;
		if (start == 1'b0 && ^(main_66_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %72 = sext i32 %71 to i64*/
		main_66_72 = $signed(main_66_71);
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %72 = sext i32 %71 to i64*/
	if ((cur_state == LEGUP_F_main_BB__66_37)) begin
		main_66_72_reg <= main_66_72;
		if (start == 1'b0 && ^(main_66_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_72_reg"); $finish; end
	end
end
always @(*) begin
	main_66_73 = main_signed_multiply_64_0;
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %73 = mul i64 %72, %69*/
	if ((cur_state == LEGUP_F_main_BB__66_38)) begin
		main_66_73_reg <= main_66_73;
		if (start == 1'b0 && ^(main_66_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_73_reg"); $finish; end
	end
	/* main: %66*/
	/*   %73 = mul i64 %72, %69*/
	if ((cur_state == LEGUP_F_main_BB__66_38)) begin
		main_66_73_reg <= main_66_73;
		if (start == 1'b0 && ^(main_66_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_73_reg"); $finish; end
	end
	/* main: %51*/
	/*   %58 = mul nsw i64 %57, %54*/
	if ((cur_state == LEGUP_F_main_BB__51_34)) begin
		main_66_73_reg <= main_51_58;
		if (start == 1'b0 && ^(main_51_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %74 = trunc i64 %73 to i32*/
		main_66_74 = main_66_73[31:0];
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %74 = trunc i64 %73 to i32*/
	if ((cur_state == LEGUP_F_main_BB__66_38)) begin
		main_66_74_reg <= main_66_74;
		if (start == 1'b0 && ^(main_66_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %75 = lshr i64 %73, 32*/
		main_66_75 = (main_66_73 >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %75 = lshr i64 %73, 32*/
	if ((cur_state == LEGUP_F_main_BB__66_38)) begin
		main_66_75_reg <= main_66_75;
		if (start == 1'b0 && ^(main_66_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %76 = trunc i64 %75 to i32*/
		main_66_76 = main_66_75[31:0];
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %76 = trunc i64 %75 to i32*/
	if ((cur_state == LEGUP_F_main_BB__66_38)) begin
		main_66_76_reg <= main_66_76;
		if (start == 1'b0 && ^(main_66_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %77*/
	/*   %gep_int57 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_77_gep_int57 = 0; end
		main_77_gep_int57 = 1'd0;
end
always @(posedge clk) begin
	/* main: %77*/
	/*   %gep_int57 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__77_39)) begin
		main_77_gep_int57_reg <= main_77_gep_int57;
		if (start == 1'b0 && ^(main_77_gep_int57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_77_gep_int57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %77*/
	/*   %gep_array58 = mul i32 %28, 4*/
		main_77_gep_array58 = (main_23_28_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %77*/
	/*   %gep_array58 = mul i32 %28, 4*/
	if ((cur_state == LEGUP_F_main_BB__77_39)) begin
		main_77_gep_array58_reg <= main_77_gep_array58;
		if (start == 1'b0 && ^(main_77_gep_array58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_77_gep_array58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %77*/
	/*   %gep59 = add i32 %gep_int57, %gep_array58*/
		main_77_gep59 = main_signed_add_32_0;
end
always @(*) begin
/* main: %77*/
/*   %gep59 = add i32 %gep_int57, %gep_array58*/
	main_77_gep59_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %77*/
	/*   %78 = inttoptr i32 %gep59 to i32**/
		main_77_78 = main_77_gep59;
end
always @(posedge clk) begin
	/* main: %77*/
	/*   %78 = inttoptr i32 %gep59 to i32**/
	if ((cur_state == LEGUP_F_main_BB__77_40)) begin
		main_77_78_reg <= main_77_78;
		if (start == 1'b0 && ^(main_77_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_77_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %79*/
	/*   %gep_int60 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_79_gep_int60 = 0; end
		main_79_gep_int60 = 1'd0;
end
always @(posedge clk) begin
	/* main: %79*/
	/*   %gep_int60 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__79_42)) begin
		main_79_gep_int60_reg <= main_79_gep_int60;
		if (start == 1'b0 && ^(main_79_gep_int60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_79_gep_int60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %79*/
	/*   %gep_array61 = mul i32 %28, 4*/
		main_79_gep_array61 = (main_23_28_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %79*/
	/*   %gep_array61 = mul i32 %28, 4*/
	if ((cur_state == LEGUP_F_main_BB__79_42)) begin
		main_79_gep_array61_reg <= main_79_gep_array61;
		if (start == 1'b0 && ^(main_79_gep_array61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_79_gep_array61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %79*/
	/*   %gep62 = add i32 %gep_int60, %gep_array61*/
		main_79_gep62 = main_signed_add_32_0;
end
always @(*) begin
/* main: %79*/
/*   %gep62 = add i32 %gep_int60, %gep_array61*/
	main_79_gep62_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %79*/
	/*   %80 = inttoptr i32 %gep62 to i32**/
		main_79_80 = main_79_gep62;
end
always @(posedge clk) begin
	/* main: %79*/
	/*   %80 = inttoptr i32 %gep62 to i32**/
	if ((cur_state == LEGUP_F_main_BB__79_43)) begin
		main_79_80_reg <= main_79_80;
		if (start == 1'b0 && ^(main_79_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_79_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %81*/
	/*   %gep_int63 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_81_gep_int63 = 0; end
		main_81_gep_int63 = 1'd0;
end
always @(posedge clk) begin
	/* main: %81*/
	/*   %gep_int63 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__81_45)) begin
		main_81_gep_int63_reg <= main_81_gep_int63;
		if (start == 1'b0 && ^(main_81_gep_int63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_81_gep_int63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %81*/
	/*   %gep_array64 = mul i32 %32, 4*/
		main_81_gep_array64 = (main_23_32_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %81*/
	/*   %gep_array64 = mul i32 %32, 4*/
	if ((cur_state == LEGUP_F_main_BB__81_45)) begin
		main_81_gep_array64_reg <= main_81_gep_array64;
		if (start == 1'b0 && ^(main_81_gep_array64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_81_gep_array64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %81*/
	/*   %gep65 = add i32 %gep_int63, %gep_array64*/
		main_81_gep65 = main_signed_add_32_0;
end
always @(*) begin
/* main: %81*/
/*   %gep65 = add i32 %gep_int63, %gep_array64*/
	main_81_gep65_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %81*/
	/*   %82 = inttoptr i32 %gep65 to i32**/
		main_81_82 = main_81_gep65;
end
always @(posedge clk) begin
	/* main: %81*/
	/*   %82 = inttoptr i32 %gep65 to i32**/
	if ((cur_state == LEGUP_F_main_BB__81_46)) begin
		main_81_82_reg <= main_81_82;
		if (start == 1'b0 && ^(main_81_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_81_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %81*/
	/*   %83 = load i32* %82, align 4, !tbaa !1*/
		main_81_83 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %81*/
	/*   %83 = load i32* %82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__81_47)) begin
		main_81_83_reg <= main_81_83;
		if (start == 1'b0 && ^(main_81_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_81_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %81*/
	/*   %gep_int66 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_81_gep_int66 = 0; end
		main_81_gep_int66 = 1'd0;
end
always @(posedge clk) begin
	/* main: %81*/
	/*   %gep_int66 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__81_45)) begin
		main_81_gep_int66_reg <= main_81_gep_int66;
		if (start == 1'b0 && ^(main_81_gep_int66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_81_gep_int66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %81*/
	/*   %gep_array67 = mul i32 %30, 4*/
		main_81_gep_array67 = (main_23_30_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %81*/
	/*   %gep_array67 = mul i32 %30, 4*/
	if ((cur_state == LEGUP_F_main_BB__81_45)) begin
		main_81_gep_array67_reg <= main_81_gep_array67;
		if (start == 1'b0 && ^(main_81_gep_array67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_81_gep_array67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %81*/
	/*   %gep68 = add i32 %gep_int66, %gep_array67*/
		main_81_gep68 = main_signed_add_32_1;
end
always @(*) begin
/* main: %81*/
/*   %gep68 = add i32 %gep_int66, %gep_array67*/
	main_81_gep68_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %81*/
	/*   %84 = inttoptr i32 %gep68 to i32**/
		main_81_84 = main_81_gep68;
end
always @(posedge clk) begin
	/* main: %81*/
	/*   %84 = inttoptr i32 %gep68 to i32**/
	if ((cur_state == LEGUP_F_main_BB__81_46)) begin
		main_81_84_reg <= main_81_84;
		if (start == 1'b0 && ^(main_81_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_81_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %81*/
	/*   %85 = load i32* %84, align 4, !tbaa !1*/
		main_81_85 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %81*/
	/*   %85 = load i32* %84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__81_47)) begin
		main_81_85_reg <= main_81_85;
		if (start == 1'b0 && ^(main_81_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_81_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %81*/
	/*   %86 = and i32 %85, %83*/
		main_81_86 = (main_81_85 & main_81_83);
end
always @(posedge clk) begin
	/* main: %81*/
	/*   %86 = and i32 %85, %83*/
	if ((cur_state == LEGUP_F_main_BB__81_47)) begin
		main_81_86_reg <= main_81_86;
		if (start == 1'b0 && ^(main_81_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_81_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %81*/
	/*   %gep_int69 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_81_gep_int69 = 0; end
		main_81_gep_int69 = 1'd0;
end
always @(posedge clk) begin
	/* main: %81*/
	/*   %gep_int69 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__81_45)) begin
		main_81_gep_int69_reg <= main_81_gep_int69;
		if (start == 1'b0 && ^(main_81_gep_int69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_81_gep_int69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %81*/
	/*   %gep_array70 = mul i32 %28, 4*/
		main_81_gep_array70 = (main_23_28_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %81*/
	/*   %gep_array70 = mul i32 %28, 4*/
	if ((cur_state == LEGUP_F_main_BB__81_45)) begin
		main_81_gep_array70_reg <= main_81_gep_array70;
		if (start == 1'b0 && ^(main_81_gep_array70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_81_gep_array70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %81*/
	/*   %gep71 = add i32 %gep_int69, %gep_array70*/
		main_81_gep71 = main_signed_add_32_2;
end
always @(*) begin
/* main: %81*/
/*   %gep71 = add i32 %gep_int69, %gep_array70*/
	main_81_gep71_reg = main_preheader14_gep17_reg;
end
always @(*) begin
	/* main: %81*/
	/*   %87 = inttoptr i32 %gep71 to i32**/
		main_81_87 = main_81_gep71;
end
always @(posedge clk) begin
	/* main: %81*/
	/*   %87 = inttoptr i32 %gep71 to i32**/
	if ((cur_state == LEGUP_F_main_BB__81_46)) begin
		main_81_87_reg <= main_81_87;
		if (start == 1'b0 && ^(main_81_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_81_87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %gep_int72 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_88_gep_int72 = 0; end
		main_88_gep_int72 = 1'd0;
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %gep_int72 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__88_49)) begin
		main_88_gep_int72_reg <= main_88_gep_int72;
		if (start == 1'b0 && ^(main_88_gep_int72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_gep_int72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %gep_array73 = mul i32 %32, 4*/
		main_88_gep_array73 = (main_23_32_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %gep_array73 = mul i32 %32, 4*/
	if ((cur_state == LEGUP_F_main_BB__88_49)) begin
		main_88_gep_array73_reg <= main_88_gep_array73;
		if (start == 1'b0 && ^(main_88_gep_array73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_gep_array73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %gep74 = add i32 %gep_int72, %gep_array73*/
		main_88_gep74 = main_signed_add_32_0;
end
always @(*) begin
/* main: %88*/
/*   %gep74 = add i32 %gep_int72, %gep_array73*/
	main_88_gep74_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %88*/
	/*   %89 = inttoptr i32 %gep74 to i32**/
		main_88_89 = main_88_gep74;
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %89 = inttoptr i32 %gep74 to i32**/
	if ((cur_state == LEGUP_F_main_BB__88_50)) begin
		main_88_89_reg <= main_88_89;
		if (start == 1'b0 && ^(main_88_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %90 = load i32* %89, align 4, !tbaa !1*/
		main_88_90 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %90 = load i32* %89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_51)) begin
		main_88_90_reg <= main_88_90;
		if (start == 1'b0 && ^(main_88_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %gep_int75 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_88_gep_int75 = 0; end
		main_88_gep_int75 = 1'd0;
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %gep_int75 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__88_49)) begin
		main_88_gep_int75_reg <= main_88_gep_int75;
		if (start == 1'b0 && ^(main_88_gep_int75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_gep_int75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %gep_array76 = mul i32 %30, 4*/
		main_88_gep_array76 = (main_23_30_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %gep_array76 = mul i32 %30, 4*/
	if ((cur_state == LEGUP_F_main_BB__88_49)) begin
		main_88_gep_array76_reg <= main_88_gep_array76;
		if (start == 1'b0 && ^(main_88_gep_array76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_gep_array76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %gep77 = add i32 %gep_int75, %gep_array76*/
		main_88_gep77 = main_signed_add_32_1;
end
always @(*) begin
/* main: %88*/
/*   %gep77 = add i32 %gep_int75, %gep_array76*/
	main_88_gep77_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %88*/
	/*   %91 = inttoptr i32 %gep77 to i32**/
		main_88_91 = main_88_gep77;
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %91 = inttoptr i32 %gep77 to i32**/
	if ((cur_state == LEGUP_F_main_BB__88_50)) begin
		main_88_91_reg <= main_88_91;
		if (start == 1'b0 && ^(main_88_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %92 = load i32* %91, align 4, !tbaa !1*/
		main_88_92 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %92 = load i32* %91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_51)) begin
		main_88_92_reg <= main_88_92;
		if (start == 1'b0 && ^(main_88_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %93 = or i32 %92, %90*/
		main_88_93 = (main_88_92 | main_88_90);
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %93 = or i32 %92, %90*/
	if ((cur_state == LEGUP_F_main_BB__88_51)) begin
		main_88_93_reg <= main_88_93;
		if (start == 1'b0 && ^(main_88_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %gep_int78 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_88_gep_int78 = 0; end
		main_88_gep_int78 = 1'd0;
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %gep_int78 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__88_49)) begin
		main_88_gep_int78_reg <= main_88_gep_int78;
		if (start == 1'b0 && ^(main_88_gep_int78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_gep_int78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %gep_array79 = mul i32 %28, 4*/
		main_88_gep_array79 = (main_23_28_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %gep_array79 = mul i32 %28, 4*/
	if ((cur_state == LEGUP_F_main_BB__88_49)) begin
		main_88_gep_array79_reg <= main_88_gep_array79;
		if (start == 1'b0 && ^(main_88_gep_array79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_gep_array79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %gep80 = add i32 %gep_int78, %gep_array79*/
		main_88_gep80 = main_signed_add_32_2;
end
always @(*) begin
/* main: %88*/
/*   %gep80 = add i32 %gep_int78, %gep_array79*/
	main_88_gep80_reg = main_preheader14_gep17_reg;
end
always @(*) begin
	/* main: %88*/
	/*   %94 = inttoptr i32 %gep80 to i32**/
		main_88_94 = main_88_gep80;
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %94 = inttoptr i32 %gep80 to i32**/
	if ((cur_state == LEGUP_F_main_BB__88_50)) begin
		main_88_94_reg <= main_88_94;
		if (start == 1'b0 && ^(main_88_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %95*/
	/*   %gep_int81 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_95_gep_int81 = 0; end
		main_95_gep_int81 = 1'd0;
end
always @(posedge clk) begin
	/* main: %95*/
	/*   %gep_int81 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__95_53)) begin
		main_95_gep_int81_reg <= main_95_gep_int81;
		if (start == 1'b0 && ^(main_95_gep_int81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_95_gep_int81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %95*/
	/*   %gep_array82 = mul i32 %32, 4*/
		main_95_gep_array82 = (main_23_32_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %95*/
	/*   %gep_array82 = mul i32 %32, 4*/
	if ((cur_state == LEGUP_F_main_BB__95_53)) begin
		main_95_gep_array82_reg <= main_95_gep_array82;
		if (start == 1'b0 && ^(main_95_gep_array82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_95_gep_array82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %95*/
	/*   %gep83 = add i32 %gep_int81, %gep_array82*/
		main_95_gep83 = main_signed_add_32_0;
end
always @(*) begin
/* main: %95*/
/*   %gep83 = add i32 %gep_int81, %gep_array82*/
	main_95_gep83_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %95*/
	/*   %96 = inttoptr i32 %gep83 to i32**/
		main_95_96 = main_95_gep83;
end
always @(posedge clk) begin
	/* main: %95*/
	/*   %96 = inttoptr i32 %gep83 to i32**/
	if ((cur_state == LEGUP_F_main_BB__95_54)) begin
		main_95_96_reg <= main_95_96;
		if (start == 1'b0 && ^(main_95_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_95_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %95*/
	/*   %97 = load i32* %96, align 4, !tbaa !1*/
		main_95_97 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %95*/
	/*   %97 = load i32* %96, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__95_55)) begin
		main_95_97_reg <= main_95_97;
		if (start == 1'b0 && ^(main_95_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_95_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %95*/
	/*   %gep_int84 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_95_gep_int84 = 0; end
		main_95_gep_int84 = 1'd0;
end
always @(posedge clk) begin
	/* main: %95*/
	/*   %gep_int84 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__95_53)) begin
		main_95_gep_int84_reg <= main_95_gep_int84;
		if (start == 1'b0 && ^(main_95_gep_int84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_95_gep_int84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %95*/
	/*   %gep_array85 = mul i32 %30, 4*/
		main_95_gep_array85 = (main_23_30_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %95*/
	/*   %gep_array85 = mul i32 %30, 4*/
	if ((cur_state == LEGUP_F_main_BB__95_53)) begin
		main_95_gep_array85_reg <= main_95_gep_array85;
		if (start == 1'b0 && ^(main_95_gep_array85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_95_gep_array85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %95*/
	/*   %gep86 = add i32 %gep_int84, %gep_array85*/
		main_95_gep86 = main_signed_add_32_1;
end
always @(*) begin
/* main: %95*/
/*   %gep86 = add i32 %gep_int84, %gep_array85*/
	main_95_gep86_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %95*/
	/*   %98 = inttoptr i32 %gep86 to i32**/
		main_95_98 = main_95_gep86;
end
always @(posedge clk) begin
	/* main: %95*/
	/*   %98 = inttoptr i32 %gep86 to i32**/
	if ((cur_state == LEGUP_F_main_BB__95_54)) begin
		main_95_98_reg <= main_95_98;
		if (start == 1'b0 && ^(main_95_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_95_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %95*/
	/*   %99 = load i32* %98, align 4, !tbaa !1*/
		main_95_99 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %95*/
	/*   %99 = load i32* %98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__95_55)) begin
		main_95_99_reg <= main_95_99;
		if (start == 1'b0 && ^(main_95_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_95_99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %95*/
	/*   %100 = xor i32 %99, %97*/
		main_95_100 = (main_95_99 ^ main_95_97);
end
always @(posedge clk) begin
	/* main: %95*/
	/*   %100 = xor i32 %99, %97*/
	if ((cur_state == LEGUP_F_main_BB__95_55)) begin
		main_95_100_reg <= main_95_100;
		if (start == 1'b0 && ^(main_95_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_95_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %95*/
	/*   %gep_int87 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_95_gep_int87 = 0; end
		main_95_gep_int87 = 1'd0;
end
always @(posedge clk) begin
	/* main: %95*/
	/*   %gep_int87 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__95_53)) begin
		main_95_gep_int87_reg <= main_95_gep_int87;
		if (start == 1'b0 && ^(main_95_gep_int87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_95_gep_int87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %95*/
	/*   %gep_array88 = mul i32 %28, 4*/
		main_95_gep_array88 = (main_23_28_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %95*/
	/*   %gep_array88 = mul i32 %28, 4*/
	if ((cur_state == LEGUP_F_main_BB__95_53)) begin
		main_95_gep_array88_reg <= main_95_gep_array88;
		if (start == 1'b0 && ^(main_95_gep_array88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_95_gep_array88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %95*/
	/*   %gep89 = add i32 %gep_int87, %gep_array88*/
		main_95_gep89 = main_signed_add_32_2;
end
always @(*) begin
/* main: %95*/
/*   %gep89 = add i32 %gep_int87, %gep_array88*/
	main_95_gep89_reg = main_preheader14_gep17_reg;
end
always @(*) begin
	/* main: %95*/
	/*   %101 = inttoptr i32 %gep89 to i32**/
		main_95_101 = main_95_gep89;
end
always @(posedge clk) begin
	/* main: %95*/
	/*   %101 = inttoptr i32 %gep89 to i32**/
	if ((cur_state == LEGUP_F_main_BB__95_54)) begin
		main_95_101_reg <= main_95_101;
		if (start == 1'b0 && ^(main_95_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_95_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %102*/
	/*   %gep_int90 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_102_gep_int90 = 0; end
		main_102_gep_int90 = 1'd0;
end
always @(posedge clk) begin
	/* main: %102*/
	/*   %gep_int90 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__102_57)) begin
		main_102_gep_int90_reg <= main_102_gep_int90;
		if (start == 1'b0 && ^(main_102_gep_int90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_102_gep_int90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %102*/
	/*   %gep_array91 = mul i32 %30, 4*/
		main_102_gep_array91 = (main_23_30_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %102*/
	/*   %gep_array91 = mul i32 %30, 4*/
	if ((cur_state == LEGUP_F_main_BB__102_57)) begin
		main_102_gep_array91_reg <= main_102_gep_array91;
		if (start == 1'b0 && ^(main_102_gep_array91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_102_gep_array91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %102*/
	/*   %gep92 = add i32 %gep_int90, %gep_array91*/
		main_102_gep92 = main_signed_add_32_0;
end
always @(*) begin
/* main: %102*/
/*   %gep92 = add i32 %gep_int90, %gep_array91*/
	main_102_gep92_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %102*/
	/*   %103 = inttoptr i32 %gep92 to i32**/
		main_102_103 = main_102_gep92;
end
always @(posedge clk) begin
	/* main: %102*/
	/*   %103 = inttoptr i32 %gep92 to i32**/
	if ((cur_state == LEGUP_F_main_BB__102_58)) begin
		main_102_103_reg <= main_102_103;
		if (start == 1'b0 && ^(main_102_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_102_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %102*/
	/*   %104 = load i32* %103, align 4, !tbaa !1*/
		main_102_104 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %102*/
	/*   %104 = load i32* %103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__102_59)) begin
		main_102_104_reg <= main_102_104;
		if (start == 1'b0 && ^(main_102_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_102_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %102*/
	/*   %105 = shl i32 %104, %26*/
		main_102_105 = (main_102_104 <<< (main_23_26_reg % 32));
end
always @(posedge clk) begin
	/* main: %102*/
	/*   %105 = shl i32 %104, %26*/
	if ((cur_state == LEGUP_F_main_BB__102_59)) begin
		main_102_105_reg <= main_102_105;
		if (start == 1'b0 && ^(main_102_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_102_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %102*/
	/*   %gep_int93 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_102_gep_int93 = 0; end
		main_102_gep_int93 = 1'd0;
end
always @(posedge clk) begin
	/* main: %102*/
	/*   %gep_int93 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__102_57)) begin
		main_102_gep_int93_reg <= main_102_gep_int93;
		if (start == 1'b0 && ^(main_102_gep_int93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_102_gep_int93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %102*/
	/*   %gep_array94 = mul i32 %28, 4*/
		main_102_gep_array94 = (main_23_28_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %102*/
	/*   %gep_array94 = mul i32 %28, 4*/
	if ((cur_state == LEGUP_F_main_BB__102_57)) begin
		main_102_gep_array94_reg <= main_102_gep_array94;
		if (start == 1'b0 && ^(main_102_gep_array94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_102_gep_array94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %102*/
	/*   %gep95 = add i32 %gep_int93, %gep_array94*/
		main_102_gep95 = main_signed_add_32_1;
end
always @(*) begin
/* main: %102*/
/*   %gep95 = add i32 %gep_int93, %gep_array94*/
	main_102_gep95_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %102*/
	/*   %106 = inttoptr i32 %gep95 to i32**/
		main_102_106 = main_102_gep95;
end
always @(posedge clk) begin
	/* main: %102*/
	/*   %106 = inttoptr i32 %gep95 to i32**/
	if ((cur_state == LEGUP_F_main_BB__102_58)) begin
		main_102_106_reg <= main_102_106;
		if (start == 1'b0 && ^(main_102_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_102_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %107*/
	/*   %gep_int96 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_107_gep_int96 = 0; end
		main_107_gep_int96 = 1'd0;
end
always @(posedge clk) begin
	/* main: %107*/
	/*   %gep_int96 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__107_61)) begin
		main_107_gep_int96_reg <= main_107_gep_int96;
		if (start == 1'b0 && ^(main_107_gep_int96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_107_gep_int96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %107*/
	/*   %gep_array97 = mul i32 %30, 4*/
		main_107_gep_array97 = (main_23_30_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %107*/
	/*   %gep_array97 = mul i32 %30, 4*/
	if ((cur_state == LEGUP_F_main_BB__107_61)) begin
		main_107_gep_array97_reg <= main_107_gep_array97;
		if (start == 1'b0 && ^(main_107_gep_array97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_107_gep_array97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %107*/
	/*   %gep98 = add i32 %gep_int96, %gep_array97*/
		main_107_gep98 = main_signed_add_32_0;
end
always @(*) begin
/* main: %107*/
/*   %gep98 = add i32 %gep_int96, %gep_array97*/
	main_107_gep98_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %107*/
	/*   %108 = inttoptr i32 %gep98 to i32**/
		main_107_108 = main_107_gep98;
end
always @(posedge clk) begin
	/* main: %107*/
	/*   %108 = inttoptr i32 %gep98 to i32**/
	if ((cur_state == LEGUP_F_main_BB__107_62)) begin
		main_107_108_reg <= main_107_108;
		if (start == 1'b0 && ^(main_107_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_107_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %107*/
	/*   %109 = load i32* %108, align 4, !tbaa !1*/
		main_107_109 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %107*/
	/*   %109 = load i32* %108, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__107_63)) begin
		main_107_109_reg <= main_107_109;
		if (start == 1'b0 && ^(main_107_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_107_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %107*/
	/*   %110 = ashr i32 %109, %26*/
		main_107_110 = ($signed(main_107_109) >>> main_23_26_reg);
end
always @(posedge clk) begin
	/* main: %107*/
	/*   %110 = ashr i32 %109, %26*/
	if ((cur_state == LEGUP_F_main_BB__107_63)) begin
		main_107_110_reg <= main_107_110;
		if (start == 1'b0 && ^(main_107_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_107_110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %107*/
	/*   %gep_int99 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_107_gep_int99 = 0; end
		main_107_gep_int99 = 1'd0;
end
always @(posedge clk) begin
	/* main: %107*/
	/*   %gep_int99 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__107_61)) begin
		main_107_gep_int99_reg <= main_107_gep_int99;
		if (start == 1'b0 && ^(main_107_gep_int99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_107_gep_int99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %107*/
	/*   %gep_array100 = mul i32 %28, 4*/
		main_107_gep_array100 = (main_23_28_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %107*/
	/*   %gep_array100 = mul i32 %28, 4*/
	if ((cur_state == LEGUP_F_main_BB__107_61)) begin
		main_107_gep_array100_reg <= main_107_gep_array100;
		if (start == 1'b0 && ^(main_107_gep_array100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_107_gep_array100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %107*/
	/*   %gep101 = add i32 %gep_int99, %gep_array100*/
		main_107_gep101 = main_signed_add_32_1;
end
always @(*) begin
/* main: %107*/
/*   %gep101 = add i32 %gep_int99, %gep_array100*/
	main_107_gep101_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %107*/
	/*   %111 = inttoptr i32 %gep101 to i32**/
		main_107_111 = main_107_gep101;
end
always @(posedge clk) begin
	/* main: %107*/
	/*   %111 = inttoptr i32 %gep101 to i32**/
	if ((cur_state == LEGUP_F_main_BB__107_62)) begin
		main_107_111_reg <= main_107_111;
		if (start == 1'b0 && ^(main_107_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_107_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %gep_int102 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_112_gep_int102 = 0; end
		main_112_gep_int102 = 1'd0;
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %gep_int102 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__112_65)) begin
		main_112_gep_int102_reg <= main_112_gep_int102;
		if (start == 1'b0 && ^(main_112_gep_int102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_gep_int102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %gep_array103 = mul i32 %30, 4*/
		main_112_gep_array103 = (main_23_30_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %gep_array103 = mul i32 %30, 4*/
	if ((cur_state == LEGUP_F_main_BB__112_65)) begin
		main_112_gep_array103_reg <= main_112_gep_array103;
		if (start == 1'b0 && ^(main_112_gep_array103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_gep_array103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %gep104 = add i32 %gep_int102, %gep_array103*/
		main_112_gep104 = main_signed_add_32_0;
end
always @(*) begin
/* main: %112*/
/*   %gep104 = add i32 %gep_int102, %gep_array103*/
	main_112_gep104_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %112*/
	/*   %113 = inttoptr i32 %gep104 to i32**/
		main_112_113 = main_112_gep104;
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %113 = inttoptr i32 %gep104 to i32**/
	if ((cur_state == LEGUP_F_main_BB__112_66)) begin
		main_112_113_reg <= main_112_113;
		if (start == 1'b0 && ^(main_112_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %114 = load i32* %113, align 4, !tbaa !1*/
		main_112_114 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %114 = load i32* %113, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__112_67)) begin
		main_112_114_reg <= main_112_114;
		if (start == 1'b0 && ^(main_112_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %gep_int105 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_112_gep_int105 = 0; end
		main_112_gep_int105 = 1'd0;
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %gep_int105 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__112_65)) begin
		main_112_gep_int105_reg <= main_112_gep_int105;
		if (start == 1'b0 && ^(main_112_gep_int105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_gep_int105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %gep_array106 = mul i32 %32, 4*/
		main_112_gep_array106 = (main_23_32_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %gep_array106 = mul i32 %32, 4*/
	if ((cur_state == LEGUP_F_main_BB__112_65)) begin
		main_112_gep_array106_reg <= main_112_gep_array106;
		if (start == 1'b0 && ^(main_112_gep_array106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_gep_array106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %gep107 = add i32 %gep_int105, %gep_array106*/
		main_112_gep107 = main_signed_add_32_1;
end
always @(*) begin
/* main: %112*/
/*   %gep107 = add i32 %gep_int105, %gep_array106*/
	main_112_gep107_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %112*/
	/*   %115 = inttoptr i32 %gep107 to i32**/
		main_112_115 = main_112_gep107;
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %115 = inttoptr i32 %gep107 to i32**/
	if ((cur_state == LEGUP_F_main_BB__112_66)) begin
		main_112_115_reg <= main_112_115;
		if (start == 1'b0 && ^(main_112_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %116 = load i32* %115, align 4, !tbaa !1*/
		main_112_116 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %116 = load i32* %115, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__112_67)) begin
		main_112_116_reg <= main_112_116;
		if (start == 1'b0 && ^(main_112_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %117 = shl i32 %114, %116*/
		main_112_117 = (main_112_114 <<< (main_112_116 % 32));
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %117 = shl i32 %114, %116*/
	if ((cur_state == LEGUP_F_main_BB__112_67)) begin
		main_112_117_reg <= main_112_117;
		if (start == 1'b0 && ^(main_112_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %gep_int108 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_112_gep_int108 = 0; end
		main_112_gep_int108 = 1'd0;
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %gep_int108 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__112_65)) begin
		main_112_gep_int108_reg <= main_112_gep_int108;
		if (start == 1'b0 && ^(main_112_gep_int108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_gep_int108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %gep_array109 = mul i32 %28, 4*/
		main_112_gep_array109 = (main_23_28_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %gep_array109 = mul i32 %28, 4*/
	if ((cur_state == LEGUP_F_main_BB__112_65)) begin
		main_112_gep_array109_reg <= main_112_gep_array109;
		if (start == 1'b0 && ^(main_112_gep_array109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_gep_array109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %gep110 = add i32 %gep_int108, %gep_array109*/
		main_112_gep110 = main_signed_add_32_2;
end
always @(*) begin
/* main: %112*/
/*   %gep110 = add i32 %gep_int108, %gep_array109*/
	main_112_gep110_reg = main_preheader14_gep17_reg;
end
always @(*) begin
	/* main: %112*/
	/*   %118 = inttoptr i32 %gep110 to i32**/
		main_112_118 = main_112_gep110;
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %118 = inttoptr i32 %gep110 to i32**/
	if ((cur_state == LEGUP_F_main_BB__112_66)) begin
		main_112_118_reg <= main_112_118;
		if (start == 1'b0 && ^(main_112_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %gep_int111 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_119_gep_int111 = 0; end
		main_119_gep_int111 = 1'd0;
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %gep_int111 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__119_69)) begin
		main_119_gep_int111_reg <= main_119_gep_int111;
		if (start == 1'b0 && ^(main_119_gep_int111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_gep_int111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %gep_array112 = mul i32 %30, 4*/
		main_119_gep_array112 = (main_23_30_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %gep_array112 = mul i32 %30, 4*/
	if ((cur_state == LEGUP_F_main_BB__119_69)) begin
		main_119_gep_array112_reg <= main_119_gep_array112;
		if (start == 1'b0 && ^(main_119_gep_array112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_gep_array112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %gep113 = add i32 %gep_int111, %gep_array112*/
		main_119_gep113 = main_signed_add_32_0;
end
always @(*) begin
/* main: %119*/
/*   %gep113 = add i32 %gep_int111, %gep_array112*/
	main_119_gep113_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %119*/
	/*   %120 = inttoptr i32 %gep113 to i32**/
		main_119_120 = main_119_gep113;
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %120 = inttoptr i32 %gep113 to i32**/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_119_120_reg <= main_119_120;
		if (start == 1'b0 && ^(main_119_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %121 = load i32* %120, align 4, !tbaa !1*/
		main_119_121 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %121 = load i32* %120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_71)) begin
		main_119_121_reg <= main_119_121;
		if (start == 1'b0 && ^(main_119_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %gep_int114 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_119_gep_int114 = 0; end
		main_119_gep_int114 = 1'd0;
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %gep_int114 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__119_69)) begin
		main_119_gep_int114_reg <= main_119_gep_int114;
		if (start == 1'b0 && ^(main_119_gep_int114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_gep_int114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %gep_array115 = mul i32 %32, 4*/
		main_119_gep_array115 = (main_23_32_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %gep_array115 = mul i32 %32, 4*/
	if ((cur_state == LEGUP_F_main_BB__119_69)) begin
		main_119_gep_array115_reg <= main_119_gep_array115;
		if (start == 1'b0 && ^(main_119_gep_array115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_gep_array115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %gep116 = add i32 %gep_int114, %gep_array115*/
		main_119_gep116 = main_signed_add_32_1;
end
always @(*) begin
/* main: %119*/
/*   %gep116 = add i32 %gep_int114, %gep_array115*/
	main_119_gep116_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %119*/
	/*   %122 = inttoptr i32 %gep116 to i32**/
		main_119_122 = main_119_gep116;
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %122 = inttoptr i32 %gep116 to i32**/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_119_122_reg <= main_119_122;
		if (start == 1'b0 && ^(main_119_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %123 = load i32* %122, align 4, !tbaa !1*/
		main_119_123 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %123 = load i32* %122, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_71)) begin
		main_119_123_reg <= main_119_123;
		if (start == 1'b0 && ^(main_119_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %124 = ashr i32 %121, %123*/
		main_119_124 = ($signed(main_119_121) >>> main_119_123);
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %124 = ashr i32 %121, %123*/
	if ((cur_state == LEGUP_F_main_BB__119_71)) begin
		main_119_124_reg <= main_119_124;
		if (start == 1'b0 && ^(main_119_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %gep_int117 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_119_gep_int117 = 0; end
		main_119_gep_int117 = 1'd0;
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %gep_int117 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__119_69)) begin
		main_119_gep_int117_reg <= main_119_gep_int117;
		if (start == 1'b0 && ^(main_119_gep_int117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_gep_int117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %gep_array118 = mul i32 %28, 4*/
		main_119_gep_array118 = (main_23_28_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %gep_array118 = mul i32 %28, 4*/
	if ((cur_state == LEGUP_F_main_BB__119_69)) begin
		main_119_gep_array118_reg <= main_119_gep_array118;
		if (start == 1'b0 && ^(main_119_gep_array118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_gep_array118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %gep119 = add i32 %gep_int117, %gep_array118*/
		main_119_gep119 = main_signed_add_32_2;
end
always @(*) begin
/* main: %119*/
/*   %gep119 = add i32 %gep_int117, %gep_array118*/
	main_119_gep119_reg = main_preheader14_gep17_reg;
end
always @(*) begin
	/* main: %119*/
	/*   %125 = inttoptr i32 %gep119 to i32**/
		main_119_125 = main_119_gep119;
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %125 = inttoptr i32 %gep119 to i32**/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_119_125_reg <= main_119_125;
		if (start == 1'b0 && ^(main_119_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %gep_int120 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_126_gep_int120 = 0; end
		main_126_gep_int120 = 1'd0;
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %gep_int120 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__126_73)) begin
		main_126_gep_int120_reg <= main_126_gep_int120;
		if (start == 1'b0 && ^(main_126_gep_int120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_gep_int120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %gep_array121 = mul i32 %32, 4*/
		main_126_gep_array121 = (main_23_32_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %gep_array121 = mul i32 %32, 4*/
	if ((cur_state == LEGUP_F_main_BB__126_73)) begin
		main_126_gep_array121_reg <= main_126_gep_array121;
		if (start == 1'b0 && ^(main_126_gep_array121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_gep_array121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %gep122 = add i32 %gep_int120, %gep_array121*/
		main_126_gep122 = main_signed_add_32_0;
end
always @(*) begin
/* main: %126*/
/*   %gep122 = add i32 %gep_int120, %gep_array121*/
	main_126_gep122_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %126*/
	/*   %127 = inttoptr i32 %gep122 to i32**/
		main_126_127 = main_126_gep122;
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %127 = inttoptr i32 %gep122 to i32**/
	if ((cur_state == LEGUP_F_main_BB__126_74)) begin
		main_126_127_reg <= main_126_127;
		if (start == 1'b0 && ^(main_126_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %128 = load i32* %127, align 4, !tbaa !1*/
		main_126_128 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %128 = load i32* %127, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_75)) begin
		main_126_128_reg <= main_126_128;
		if (start == 1'b0 && ^(main_126_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %gep_int123 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_126_gep_int123 = 0; end
		main_126_gep_int123 = 1'd0;
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %gep_int123 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__126_73)) begin
		main_126_gep_int123_reg <= main_126_gep_int123;
		if (start == 1'b0 && ^(main_126_gep_int123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_gep_int123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %gep_array124 = mul i32 %30, 4*/
		main_126_gep_array124 = (main_23_30_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %gep_array124 = mul i32 %30, 4*/
	if ((cur_state == LEGUP_F_main_BB__126_73)) begin
		main_126_gep_array124_reg <= main_126_gep_array124;
		if (start == 1'b0 && ^(main_126_gep_array124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_gep_array124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %gep125 = add i32 %gep_int123, %gep_array124*/
		main_126_gep125 = main_signed_add_32_1;
end
always @(*) begin
/* main: %126*/
/*   %gep125 = add i32 %gep_int123, %gep_array124*/
	main_126_gep125_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %126*/
	/*   %129 = inttoptr i32 %gep125 to i32**/
		main_126_129 = main_126_gep125;
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %129 = inttoptr i32 %gep125 to i32**/
	if ((cur_state == LEGUP_F_main_BB__126_74)) begin
		main_126_129_reg <= main_126_129;
		if (start == 1'b0 && ^(main_126_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
		main_126_130 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_75)) begin
		main_126_130_reg <= main_126_130;
		if (start == 1'b0 && ^(main_126_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %131 = icmp slt i32 %128, %130*/
		main_126_131 = ($signed(main_126_128) < $signed(main_126_130));
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %131 = icmp slt i32 %128, %130*/
	if ((cur_state == LEGUP_F_main_BB__126_75)) begin
		main_126_131_reg <= main_126_131;
		if (start == 1'b0 && ^(main_126_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %132 = zext i1 %131 to i32*/
		main_126_132 = main_126_131;
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %132 = zext i1 %131 to i32*/
	if ((cur_state == LEGUP_F_main_BB__126_75)) begin
		main_126_132_reg <= main_126_132;
		if (start == 1'b0 && ^(main_126_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %gep_int126 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_126_gep_int126 = 0; end
		main_126_gep_int126 = 1'd0;
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %gep_int126 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__126_73)) begin
		main_126_gep_int126_reg <= main_126_gep_int126;
		if (start == 1'b0 && ^(main_126_gep_int126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_gep_int126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %gep_array127 = mul i32 %28, 4*/
		main_126_gep_array127 = (main_23_28_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %gep_array127 = mul i32 %28, 4*/
	if ((cur_state == LEGUP_F_main_BB__126_73)) begin
		main_126_gep_array127_reg <= main_126_gep_array127;
		if (start == 1'b0 && ^(main_126_gep_array127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_gep_array127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %gep128 = add i32 %gep_int126, %gep_array127*/
		main_126_gep128 = main_signed_add_32_2;
end
always @(*) begin
/* main: %126*/
/*   %gep128 = add i32 %gep_int126, %gep_array127*/
	main_126_gep128_reg = main_preheader14_gep17_reg;
end
always @(*) begin
	/* main: %126*/
	/*   %133 = inttoptr i32 %gep128 to i32**/
		main_126_133 = main_126_gep128;
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %133 = inttoptr i32 %gep128 to i32**/
	if ((cur_state == LEGUP_F_main_BB__126_74)) begin
		main_126_133_reg <= main_126_133;
		if (start == 1'b0 && ^(main_126_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %gep_int129 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_134_gep_int129 = 0; end
		main_134_gep_int129 = 1'd0;
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %gep_int129 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__134_77)) begin
		main_134_gep_int129_reg <= main_134_gep_int129;
		if (start == 1'b0 && ^(main_134_gep_int129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_gep_int129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %gep_array130 = mul i32 %32, 4*/
		main_134_gep_array130 = (main_23_32_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %gep_array130 = mul i32 %32, 4*/
	if ((cur_state == LEGUP_F_main_BB__134_77)) begin
		main_134_gep_array130_reg <= main_134_gep_array130;
		if (start == 1'b0 && ^(main_134_gep_array130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_gep_array130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %gep131 = add i32 %gep_int129, %gep_array130*/
		main_134_gep131 = main_signed_add_32_0;
end
always @(*) begin
/* main: %134*/
/*   %gep131 = add i32 %gep_int129, %gep_array130*/
	main_134_gep131_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %134*/
	/*   %135 = inttoptr i32 %gep131 to i32**/
		main_134_135 = main_134_gep131;
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %135 = inttoptr i32 %gep131 to i32**/
	if ((cur_state == LEGUP_F_main_BB__134_78)) begin
		main_134_135_reg <= main_134_135;
		if (start == 1'b0 && ^(main_134_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
		main_134_136 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__134_79)) begin
		main_134_136_reg <= main_134_136;
		if (start == 1'b0 && ^(main_134_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %gep_int132 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_134_gep_int132 = 0; end
		main_134_gep_int132 = 1'd0;
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %gep_int132 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__134_77)) begin
		main_134_gep_int132_reg <= main_134_gep_int132;
		if (start == 1'b0 && ^(main_134_gep_int132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_gep_int132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %gep_array133 = mul i32 %30, 4*/
		main_134_gep_array133 = (main_23_30_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %gep_array133 = mul i32 %30, 4*/
	if ((cur_state == LEGUP_F_main_BB__134_77)) begin
		main_134_gep_array133_reg <= main_134_gep_array133;
		if (start == 1'b0 && ^(main_134_gep_array133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_gep_array133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %gep134 = add i32 %gep_int132, %gep_array133*/
		main_134_gep134 = main_signed_add_32_1;
end
always @(*) begin
/* main: %134*/
/*   %gep134 = add i32 %gep_int132, %gep_array133*/
	main_134_gep134_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %134*/
	/*   %137 = inttoptr i32 %gep134 to i32**/
		main_134_137 = main_134_gep134;
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %137 = inttoptr i32 %gep134 to i32**/
	if ((cur_state == LEGUP_F_main_BB__134_78)) begin
		main_134_137_reg <= main_134_137;
		if (start == 1'b0 && ^(main_134_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %138 = load i32* %137, align 4, !tbaa !1*/
		main_134_138 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %138 = load i32* %137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__134_79)) begin
		main_134_138_reg <= main_134_138;
		if (start == 1'b0 && ^(main_134_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %139 = icmp ult i32 %136, %138*/
		main_134_139 = (main_134_136 < main_134_138);
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %139 = icmp ult i32 %136, %138*/
	if ((cur_state == LEGUP_F_main_BB__134_79)) begin
		main_134_139_reg <= main_134_139;
		if (start == 1'b0 && ^(main_134_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %140 = zext i1 %139 to i32*/
		main_134_140 = main_134_139;
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %140 = zext i1 %139 to i32*/
	if ((cur_state == LEGUP_F_main_BB__134_79)) begin
		main_134_140_reg <= main_134_140;
		if (start == 1'b0 && ^(main_134_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %gep_int135 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_134_gep_int135 = 0; end
		main_134_gep_int135 = 1'd0;
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %gep_int135 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__134_77)) begin
		main_134_gep_int135_reg <= main_134_gep_int135;
		if (start == 1'b0 && ^(main_134_gep_int135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_gep_int135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %gep_array136 = mul i32 %28, 4*/
		main_134_gep_array136 = (main_23_28_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %gep_array136 = mul i32 %28, 4*/
	if ((cur_state == LEGUP_F_main_BB__134_77)) begin
		main_134_gep_array136_reg <= main_134_gep_array136;
		if (start == 1'b0 && ^(main_134_gep_array136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_gep_array136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %gep137 = add i32 %gep_int135, %gep_array136*/
		main_134_gep137 = main_signed_add_32_2;
end
always @(*) begin
/* main: %134*/
/*   %gep137 = add i32 %gep_int135, %gep_array136*/
	main_134_gep137_reg = main_preheader14_gep17_reg;
end
always @(*) begin
	/* main: %134*/
	/*   %141 = inttoptr i32 %gep137 to i32**/
		main_134_141 = main_134_gep137;
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %141 = inttoptr i32 %gep137 to i32**/
	if ((cur_state == LEGUP_F_main_BB__134_78)) begin
		main_134_141_reg <= main_134_141;
		if (start == 1'b0 && ^(main_134_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %142*/
	/*   %gep_int138 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_142_gep_int138 = 0; end
		main_142_gep_int138 = 1'd0;
end
always @(posedge clk) begin
	/* main: %142*/
	/*   %gep_int138 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__142_81)) begin
		main_142_gep_int138_reg <= main_142_gep_int138;
		if (start == 1'b0 && ^(main_142_gep_int138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_142_gep_int138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %142*/
	/*   %gep_array139 = mul i32 %32, 4*/
		main_142_gep_array139 = (main_23_32_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %142*/
	/*   %gep_array139 = mul i32 %32, 4*/
	if ((cur_state == LEGUP_F_main_BB__142_81)) begin
		main_142_gep_array139_reg <= main_142_gep_array139;
		if (start == 1'b0 && ^(main_142_gep_array139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_142_gep_array139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %142*/
	/*   %gep140 = add i32 %gep_int138, %gep_array139*/
		main_142_gep140 = main_signed_add_32_0;
end
always @(*) begin
/* main: %142*/
/*   %gep140 = add i32 %gep_int138, %gep_array139*/
	main_142_gep140_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %142*/
	/*   %143 = inttoptr i32 %gep140 to i32**/
		main_142_143 = main_142_gep140;
end
always @(posedge clk) begin
	/* main: %142*/
	/*   %143 = inttoptr i32 %gep140 to i32**/
	if ((cur_state == LEGUP_F_main_BB__142_82)) begin
		main_142_143_reg <= main_142_143;
		if (start == 1'b0 && ^(main_142_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_142_143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %142*/
	/*   %144 = load i32* %143, align 4, !tbaa !1*/
		main_142_144 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %142*/
	/*   %144 = load i32* %143, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__142_83)) begin
		main_142_144_reg <= main_142_144;
		if (start == 1'b0 && ^(main_142_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_142_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %145*/
	/*   %146 = shl i32 %20, 2*/
		main_145_146 = (main_16_20_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %145*/
	/*   %146 = shl i32 %20, 2*/
	if ((cur_state == LEGUP_F_main_BB__145_84)) begin
		main_145_146_reg <= main_145_146;
		if (start == 1'b0 && ^(main_145_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_145_146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %145*/
	/*   %147 = and i32 %146, 268435452*/
		main_145_147 = (main_145_146 & 32'd268435452);
end
always @(posedge clk) begin
	/* main: %145*/
	/*   %147 = and i32 %146, 268435452*/
	if ((cur_state == LEGUP_F_main_BB__145_84)) begin
		main_145_147_reg <= main_145_147;
		if (start == 1'b0 && ^(main_145_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_145_147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %148*/
	/*   %149 = shl i32 %20, 2*/
		main_148_149 = (main_16_20_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %148*/
	/*   %149 = shl i32 %20, 2*/
	if ((cur_state == LEGUP_F_main_BB__148_85)) begin
		main_148_149_reg <= main_148_149;
		if (start == 1'b0 && ^(main_148_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %148*/
	/*   %150 = and i32 %149, 268435452*/
		main_148_150 = (main_148_149 & 32'd268435452);
end
always @(posedge clk) begin
	/* main: %148*/
	/*   %150 = and i32 %149, 268435452*/
	if ((cur_state == LEGUP_F_main_BB__148_85)) begin
		main_148_150_reg <= main_148_150;
		if (start == 1'b0 && ^(main_148_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %151*/
	/*   %152 = lshr i32 %20, 16*/
		main_151_152 = (main_16_20_reg >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %151*/
	/*   %152 = lshr i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__151_87)) begin
		main_151_152_reg <= main_151_152;
		if (start == 1'b0 && ^(main_151_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %151*/
	/*   %153 = and i32 %152, 31*/
		main_151_153 = (main_151_152 & 32'd31);
end
always @(posedge clk) begin
	/* main: %151*/
	/*   %153 = and i32 %152, 31*/
	if ((cur_state == LEGUP_F_main_BB__151_87)) begin
		main_151_153_reg <= main_151_153;
		if (start == 1'b0 && ^(main_151_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %151*/
	/*   %154 = lshr i32 %20, 21*/
		main_151_154 = (main_16_20_reg >>> (32'd21 % 32));
end
always @(posedge clk) begin
	/* main: %151*/
	/*   %154 = lshr i32 %20, 21*/
	if ((cur_state == LEGUP_F_main_BB__151_87)) begin
		main_151_154_reg <= main_151_154;
		if (start == 1'b0 && ^(main_151_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %151*/
	/*   %155 = and i32 %154, 31*/
		main_151_155 = (main_151_154 & 32'd31);
end
always @(posedge clk) begin
	/* main: %151*/
	/*   %155 = and i32 %154, 31*/
	if ((cur_state == LEGUP_F_main_BB__151_87)) begin
		main_151_155_reg <= main_151_155;
		if (start == 1'b0 && ^(main_151_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %gep_int141 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_156_gep_int141 = 0; end
		main_156_gep_int141 = 1'd0;
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %gep_int141 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__156_88)) begin
		main_156_gep_int141_reg <= main_156_gep_int141;
		if (start == 1'b0 && ^(main_156_gep_int141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_gep_int141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %gep_array142 = mul i32 %155, 4*/
		main_156_gep_array142 = (main_151_155_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %gep_array142 = mul i32 %155, 4*/
	if ((cur_state == LEGUP_F_main_BB__156_88)) begin
		main_156_gep_array142_reg <= main_156_gep_array142;
		if (start == 1'b0 && ^(main_156_gep_array142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_gep_array142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %gep143 = add i32 %gep_int141, %gep_array142*/
		main_156_gep143 = main_signed_add_32_0;
end
always @(*) begin
/* main: %156*/
/*   %gep143 = add i32 %gep_int141, %gep_array142*/
	main_156_gep143_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %156*/
	/*   %157 = inttoptr i32 %gep143 to i32**/
		main_156_157 = main_156_gep143;
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %157 = inttoptr i32 %gep143 to i32**/
	if ((cur_state == LEGUP_F_main_BB__156_89)) begin
		main_156_157_reg <= main_156_157;
		if (start == 1'b0 && ^(main_156_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %158 = load i32* %157, align 4, !tbaa !1*/
		main_156_158 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %158 = load i32* %157, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__156_90)) begin
		main_156_158_reg <= main_156_158;
		if (start == 1'b0 && ^(main_156_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %sext7 = shl i32 %20, 16*/
		main_156_sext7 = (main_16_20_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %sext7 = shl i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__156_88)) begin
		main_156_sext7_reg <= main_156_sext7;
		if (start == 1'b0 && ^(main_156_sext7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_sext7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %159 = ashr exact i32 %sext7, 16*/
		main_156_159 = ($signed(main_156_sext7) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %159 = ashr exact i32 %sext7, 16*/
	if ((cur_state == LEGUP_F_main_BB__156_88)) begin
		main_156_159_reg <= main_156_159;
		if (start == 1'b0 && ^(main_156_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %160 = add nsw i32 %158, %159*/
		main_156_160 = main_signed_add_32_0;
end
always @(*) begin
/* main: %156*/
/*   %160 = add nsw i32 %158, %159*/
	main_156_160_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %156*/
	/*   %gep_int144 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_156_gep_int144 = 0; end
		main_156_gep_int144 = 1'd0;
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %gep_int144 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__156_88)) begin
		main_156_gep_int144_reg <= main_156_gep_int144;
		if (start == 1'b0 && ^(main_156_gep_int144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_gep_int144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %gep_array145 = mul i32 %153, 4*/
		main_156_gep_array145 = (main_151_153_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %gep_array145 = mul i32 %153, 4*/
	if ((cur_state == LEGUP_F_main_BB__156_88)) begin
		main_156_gep_array145_reg <= main_156_gep_array145;
		if (start == 1'b0 && ^(main_156_gep_array145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_gep_array145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %gep146 = add i32 %gep_int144, %gep_array145*/
		main_156_gep146 = main_signed_add_32_1;
end
always @(*) begin
/* main: %156*/
/*   %gep146 = add i32 %gep_int144, %gep_array145*/
	main_156_gep146_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %156*/
	/*   %161 = inttoptr i32 %gep146 to i32**/
		main_156_161 = main_156_gep146;
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %161 = inttoptr i32 %gep146 to i32**/
	if ((cur_state == LEGUP_F_main_BB__156_89)) begin
		main_156_161_reg <= main_156_161;
		if (start == 1'b0 && ^(main_156_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %gep_int147 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_162_gep_int147 = 0; end
		main_162_gep_int147 = 1'd0;
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %gep_int147 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__162_92)) begin
		main_162_gep_int147_reg <= main_162_gep_int147;
		if (start == 1'b0 && ^(main_162_gep_int147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_gep_int147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %gep_array148 = mul i32 %155, 4*/
		main_162_gep_array148 = (main_151_155_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %gep_array148 = mul i32 %155, 4*/
	if ((cur_state == LEGUP_F_main_BB__162_92)) begin
		main_162_gep_array148_reg <= main_162_gep_array148;
		if (start == 1'b0 && ^(main_162_gep_array148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_gep_array148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %gep149 = add i32 %gep_int147, %gep_array148*/
		main_162_gep149 = main_signed_add_32_0;
end
always @(*) begin
/* main: %162*/
/*   %gep149 = add i32 %gep_int147, %gep_array148*/
	main_162_gep149_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %162*/
	/*   %163 = inttoptr i32 %gep149 to i32**/
		main_162_163 = main_162_gep149;
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %163 = inttoptr i32 %gep149 to i32**/
	if ((cur_state == LEGUP_F_main_BB__162_93)) begin
		main_162_163_reg <= main_162_163;
		if (start == 1'b0 && ^(main_162_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
		main_162_164 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__162_94)) begin
		main_162_164_reg <= main_162_164;
		if (start == 1'b0 && ^(main_162_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_164_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %165 = and i32 %20, 65535*/
		main_162_165 = (main_16_20_reg & 32'd65535);
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %165 = and i32 %20, 65535*/
	if ((cur_state == LEGUP_F_main_BB__162_92)) begin
		main_162_165_reg <= main_162_165;
		if (start == 1'b0 && ^(main_162_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %166 = and i32 %165, %164*/
		main_162_166 = (main_162_165_reg & main_162_164);
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %166 = and i32 %165, %164*/
	if ((cur_state == LEGUP_F_main_BB__162_94)) begin
		main_162_166_reg <= main_162_166;
		if (start == 1'b0 && ^(main_162_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_166_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %gep_int150 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_162_gep_int150 = 0; end
		main_162_gep_int150 = 1'd0;
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %gep_int150 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__162_92)) begin
		main_162_gep_int150_reg <= main_162_gep_int150;
		if (start == 1'b0 && ^(main_162_gep_int150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_gep_int150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %gep_array151 = mul i32 %153, 4*/
		main_162_gep_array151 = (main_151_153_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %gep_array151 = mul i32 %153, 4*/
	if ((cur_state == LEGUP_F_main_BB__162_92)) begin
		main_162_gep_array151_reg <= main_162_gep_array151;
		if (start == 1'b0 && ^(main_162_gep_array151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_gep_array151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %gep152 = add i32 %gep_int150, %gep_array151*/
		main_162_gep152 = main_signed_add_32_1;
end
always @(*) begin
/* main: %162*/
/*   %gep152 = add i32 %gep_int150, %gep_array151*/
	main_162_gep152_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %162*/
	/*   %167 = inttoptr i32 %gep152 to i32**/
		main_162_167 = main_162_gep152;
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %167 = inttoptr i32 %gep152 to i32**/
	if ((cur_state == LEGUP_F_main_BB__162_93)) begin
		main_162_167_reg <= main_162_167;
		if (start == 1'b0 && ^(main_162_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_167_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %gep_int153 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_168_gep_int153 = 0; end
		main_168_gep_int153 = 1'd0;
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %gep_int153 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__168_96)) begin
		main_168_gep_int153_reg <= main_168_gep_int153;
		if (start == 1'b0 && ^(main_168_gep_int153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_gep_int153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %gep_array154 = mul i32 %155, 4*/
		main_168_gep_array154 = (main_151_155_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %gep_array154 = mul i32 %155, 4*/
	if ((cur_state == LEGUP_F_main_BB__168_96)) begin
		main_168_gep_array154_reg <= main_168_gep_array154;
		if (start == 1'b0 && ^(main_168_gep_array154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_gep_array154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %gep155 = add i32 %gep_int153, %gep_array154*/
		main_168_gep155 = main_signed_add_32_0;
end
always @(*) begin
/* main: %168*/
/*   %gep155 = add i32 %gep_int153, %gep_array154*/
	main_168_gep155_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %168*/
	/*   %169 = inttoptr i32 %gep155 to i32**/
		main_168_169 = main_168_gep155;
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %169 = inttoptr i32 %gep155 to i32**/
	if ((cur_state == LEGUP_F_main_BB__168_97)) begin
		main_168_169_reg <= main_168_169;
		if (start == 1'b0 && ^(main_168_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %170 = load i32* %169, align 4, !tbaa !1*/
		main_168_170 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %170 = load i32* %169, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__168_98)) begin
		main_168_170_reg <= main_168_170;
		if (start == 1'b0 && ^(main_168_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %171 = and i32 %20, 65535*/
		main_168_171 = (main_16_20_reg & 32'd65535);
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %171 = and i32 %20, 65535*/
	if ((cur_state == LEGUP_F_main_BB__168_96)) begin
		main_168_171_reg <= main_168_171;
		if (start == 1'b0 && ^(main_168_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %172 = or i32 %170, %171*/
		main_168_172 = (main_168_170 | main_168_171_reg);
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %172 = or i32 %170, %171*/
	if ((cur_state == LEGUP_F_main_BB__168_98)) begin
		main_168_172_reg <= main_168_172;
		if (start == 1'b0 && ^(main_168_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %gep_int156 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_168_gep_int156 = 0; end
		main_168_gep_int156 = 1'd0;
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %gep_int156 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__168_96)) begin
		main_168_gep_int156_reg <= main_168_gep_int156;
		if (start == 1'b0 && ^(main_168_gep_int156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_gep_int156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %gep_array157 = mul i32 %153, 4*/
		main_168_gep_array157 = (main_151_153_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %gep_array157 = mul i32 %153, 4*/
	if ((cur_state == LEGUP_F_main_BB__168_96)) begin
		main_168_gep_array157_reg <= main_168_gep_array157;
		if (start == 1'b0 && ^(main_168_gep_array157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_gep_array157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %gep158 = add i32 %gep_int156, %gep_array157*/
		main_168_gep158 = main_signed_add_32_1;
end
always @(*) begin
/* main: %168*/
/*   %gep158 = add i32 %gep_int156, %gep_array157*/
	main_168_gep158_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %168*/
	/*   %173 = inttoptr i32 %gep158 to i32**/
		main_168_173 = main_168_gep158;
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %173 = inttoptr i32 %gep158 to i32**/
	if ((cur_state == LEGUP_F_main_BB__168_97)) begin
		main_168_173_reg <= main_168_173;
		if (start == 1'b0 && ^(main_168_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %174*/
	/*   %gep_int159 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_174_gep_int159 = 0; end
		main_174_gep_int159 = 1'd0;
end
always @(posedge clk) begin
	/* main: %174*/
	/*   %gep_int159 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__174_100)) begin
		main_174_gep_int159_reg <= main_174_gep_int159;
		if (start == 1'b0 && ^(main_174_gep_int159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_174_gep_int159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %174*/
	/*   %gep_array160 = mul i32 %155, 4*/
		main_174_gep_array160 = (main_151_155_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %174*/
	/*   %gep_array160 = mul i32 %155, 4*/
	if ((cur_state == LEGUP_F_main_BB__174_100)) begin
		main_174_gep_array160_reg <= main_174_gep_array160;
		if (start == 1'b0 && ^(main_174_gep_array160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_174_gep_array160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %174*/
	/*   %gep161 = add i32 %gep_int159, %gep_array160*/
		main_174_gep161 = main_signed_add_32_0;
end
always @(*) begin
/* main: %174*/
/*   %gep161 = add i32 %gep_int159, %gep_array160*/
	main_174_gep161_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %174*/
	/*   %175 = inttoptr i32 %gep161 to i32**/
		main_174_175 = main_174_gep161;
end
always @(posedge clk) begin
	/* main: %174*/
	/*   %175 = inttoptr i32 %gep161 to i32**/
	if ((cur_state == LEGUP_F_main_BB__174_101)) begin
		main_174_175_reg <= main_174_175;
		if (start == 1'b0 && ^(main_174_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_174_175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %174*/
	/*   %176 = load i32* %175, align 4, !tbaa !1*/
		main_174_176 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %174*/
	/*   %176 = load i32* %175, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__174_102)) begin
		main_174_176_reg <= main_174_176;
		if (start == 1'b0 && ^(main_174_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_174_176_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %174*/
	/*   %177 = and i32 %20, 65535*/
		main_174_177 = (main_16_20_reg & 32'd65535);
end
always @(posedge clk) begin
	/* main: %174*/
	/*   %177 = and i32 %20, 65535*/
	if ((cur_state == LEGUP_F_main_BB__174_100)) begin
		main_174_177_reg <= main_174_177;
		if (start == 1'b0 && ^(main_174_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_174_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %174*/
	/*   %178 = xor i32 %176, %177*/
		main_174_178 = (main_174_176 ^ main_174_177_reg);
end
always @(posedge clk) begin
	/* main: %174*/
	/*   %178 = xor i32 %176, %177*/
	if ((cur_state == LEGUP_F_main_BB__174_102)) begin
		main_174_178_reg <= main_174_178;
		if (start == 1'b0 && ^(main_174_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_174_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %174*/
	/*   %gep_int162 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_174_gep_int162 = 0; end
		main_174_gep_int162 = 1'd0;
end
always @(posedge clk) begin
	/* main: %174*/
	/*   %gep_int162 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__174_100)) begin
		main_174_gep_int162_reg <= main_174_gep_int162;
		if (start == 1'b0 && ^(main_174_gep_int162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_174_gep_int162_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %174*/
	/*   %gep_array163 = mul i32 %153, 4*/
		main_174_gep_array163 = (main_151_153_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %174*/
	/*   %gep_array163 = mul i32 %153, 4*/
	if ((cur_state == LEGUP_F_main_BB__174_100)) begin
		main_174_gep_array163_reg <= main_174_gep_array163;
		if (start == 1'b0 && ^(main_174_gep_array163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_174_gep_array163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %174*/
	/*   %gep164 = add i32 %gep_int162, %gep_array163*/
		main_174_gep164 = main_signed_add_32_1;
end
always @(*) begin
/* main: %174*/
/*   %gep164 = add i32 %gep_int162, %gep_array163*/
	main_174_gep164_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %174*/
	/*   %179 = inttoptr i32 %gep164 to i32**/
		main_174_179 = main_174_gep164;
end
always @(posedge clk) begin
	/* main: %174*/
	/*   %179 = inttoptr i32 %gep164 to i32**/
	if ((cur_state == LEGUP_F_main_BB__174_101)) begin
		main_174_179_reg <= main_174_179;
		if (start == 1'b0 && ^(main_174_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_174_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %180*/
	/*   %gep_int165 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_180_gep_int165 = 0; end
		main_180_gep_int165 = 1'd0;
end
always @(posedge clk) begin
	/* main: %180*/
	/*   %gep_int165 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__180_104)) begin
		main_180_gep_int165_reg <= main_180_gep_int165;
		if (start == 1'b0 && ^(main_180_gep_int165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_180_gep_int165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %180*/
	/*   %gep_array166 = mul i32 %155, 4*/
		main_180_gep_array166 = (main_151_155_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %180*/
	/*   %gep_array166 = mul i32 %155, 4*/
	if ((cur_state == LEGUP_F_main_BB__180_104)) begin
		main_180_gep_array166_reg <= main_180_gep_array166;
		if (start == 1'b0 && ^(main_180_gep_array166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_180_gep_array166_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %180*/
	/*   %gep167 = add i32 %gep_int165, %gep_array166*/
		main_180_gep167 = main_signed_add_32_0;
end
always @(*) begin
/* main: %180*/
/*   %gep167 = add i32 %gep_int165, %gep_array166*/
	main_180_gep167_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %180*/
	/*   %181 = inttoptr i32 %gep167 to i32**/
		main_180_181 = main_180_gep167;
end
always @(posedge clk) begin
	/* main: %180*/
	/*   %181 = inttoptr i32 %gep167 to i32**/
	if ((cur_state == LEGUP_F_main_BB__180_105)) begin
		main_180_181_reg <= main_180_181;
		if (start == 1'b0 && ^(main_180_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_180_181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %180*/
	/*   %182 = load i32* %181, align 4, !tbaa !1*/
		main_180_182 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %180*/
	/*   %182 = load i32* %181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__180_106)) begin
		main_180_182_reg <= main_180_182;
		if (start == 1'b0 && ^(main_180_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_180_182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %180*/
	/*   %183 = add nsw i32 %182, %20*/
		main_180_183 = main_signed_add_32_0;
end
always @(*) begin
/* main: %180*/
/*   %183 = add nsw i32 %182, %20*/
	main_180_183_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %180*/
	/*   %184 = lshr i32 %183, 2*/
		main_180_184 = (main_180_183 >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %180*/
	/*   %184 = lshr i32 %183, 2*/
	if ((cur_state == LEGUP_F_main_BB__180_106)) begin
		main_180_184_reg <= main_180_184;
		if (start == 1'b0 && ^(main_180_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_180_184_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %180*/
	/*   %185 = and i32 %184, 63*/
		main_180_185 = (main_180_184 & 32'd63);
end
always @(posedge clk) begin
	/* main: %180*/
	/*   %185 = and i32 %184, 63*/
	if ((cur_state == LEGUP_F_main_BB__180_106)) begin
		main_180_185_reg <= main_180_185;
		if (start == 1'b0 && ^(main_180_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_180_185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %180*/
	/*   %gep_int168 = ptrtoint [64 x i32]* %dmem to i32*/
if (reset) begin main_180_gep_int168 = 0; end
		main_180_gep_int168 = `TAG_main_0_dmem_a;
end
always @(posedge clk) begin
	/* main: %180*/
	/*   %gep_int168 = ptrtoint [64 x i32]* %dmem to i32*/
	if ((cur_state == LEGUP_F_main_BB__180_104)) begin
		main_180_gep_int168_reg <= main_180_gep_int168;
		if (start == 1'b0 && ^(main_180_gep_int168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_180_gep_int168_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %180*/
	/*   %gep_array169 = mul i32 %185, 4*/
		main_180_gep_array169 = (main_180_185_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %180*/
	/*   %gep_array169 = mul i32 %185, 4*/
	if ((cur_state == LEGUP_F_main_BB__180_107)) begin
		main_180_gep_array169_reg <= main_180_gep_array169;
		if (start == 1'b0 && ^(main_180_gep_array169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_180_gep_array169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %180*/
	/*   %gep170 = add i32 %gep_int168, %gep_array169*/
		main_180_gep170 = main_signed_add_32_0;
end
always @(*) begin
/* main: %180*/
/*   %gep170 = add i32 %gep_int168, %gep_array169*/
	main_180_gep170_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %180*/
	/*   %186 = inttoptr i32 %gep170 to i32**/
		main_180_186 = main_180_gep170;
end
always @(posedge clk) begin
	/* main: %180*/
	/*   %186 = inttoptr i32 %gep170 to i32**/
	if ((cur_state == LEGUP_F_main_BB__180_108)) begin
		main_180_186_reg <= main_180_186;
		if (start == 1'b0 && ^(main_180_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_180_186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %180*/
	/*   %187 = load i32* %186, align 4, !tbaa !1*/
		main_180_187 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %180*/
	/*   %187 = load i32* %186, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__180_110)) begin
		main_180_187_reg <= main_180_187;
		if (start == 1'b0 && ^(main_180_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_180_187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %180*/
	/*   %gep_int171 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_180_gep_int171 = 0; end
		main_180_gep_int171 = 1'd0;
end
always @(posedge clk) begin
	/* main: %180*/
	/*   %gep_int171 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__180_104)) begin
		main_180_gep_int171_reg <= main_180_gep_int171;
		if (start == 1'b0 && ^(main_180_gep_int171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_180_gep_int171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %180*/
	/*   %gep_array172 = mul i32 %153, 4*/
		main_180_gep_array172 = (main_151_153_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %180*/
	/*   %gep_array172 = mul i32 %153, 4*/
	if ((cur_state == LEGUP_F_main_BB__180_104)) begin
		main_180_gep_array172_reg <= main_180_gep_array172;
		if (start == 1'b0 && ^(main_180_gep_array172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_180_gep_array172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %180*/
	/*   %gep173 = add i32 %gep_int171, %gep_array172*/
		main_180_gep173 = main_signed_add_32_1;
end
always @(*) begin
/* main: %180*/
/*   %gep173 = add i32 %gep_int171, %gep_array172*/
	main_180_gep173_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %180*/
	/*   %188 = inttoptr i32 %gep173 to i32**/
		main_180_188 = main_180_gep173;
end
always @(posedge clk) begin
	/* main: %180*/
	/*   %188 = inttoptr i32 %gep173 to i32**/
	if ((cur_state == LEGUP_F_main_BB__180_105)) begin
		main_180_188_reg <= main_180_188;
		if (start == 1'b0 && ^(main_180_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_180_188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %gep_int174 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_189_gep_int174 = 0; end
		main_189_gep_int174 = 1'd0;
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %gep_int174 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__189_112)) begin
		main_189_gep_int174_reg <= main_189_gep_int174;
		if (start == 1'b0 && ^(main_189_gep_int174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_gep_int174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %gep_array175 = mul i32 %153, 4*/
		main_189_gep_array175 = (main_151_153_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %gep_array175 = mul i32 %153, 4*/
	if ((cur_state == LEGUP_F_main_BB__189_112)) begin
		main_189_gep_array175_reg <= main_189_gep_array175;
		if (start == 1'b0 && ^(main_189_gep_array175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_gep_array175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %gep176 = add i32 %gep_int174, %gep_array175*/
		main_189_gep176 = main_signed_add_32_0;
end
always @(*) begin
/* main: %189*/
/*   %gep176 = add i32 %gep_int174, %gep_array175*/
	main_189_gep176_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %189*/
	/*   %190 = inttoptr i32 %gep176 to i32**/
		main_189_190 = main_189_gep176;
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %190 = inttoptr i32 %gep176 to i32**/
	if ((cur_state == LEGUP_F_main_BB__189_113)) begin
		main_189_190_reg <= main_189_190;
		if (start == 1'b0 && ^(main_189_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %191 = load i32* %190, align 4, !tbaa !1*/
		main_189_191 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %191 = load i32* %190, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_114)) begin
		main_189_191_reg <= main_189_191;
		if (start == 1'b0 && ^(main_189_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %gep_int177 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_189_gep_int177 = 0; end
		main_189_gep_int177 = 1'd0;
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %gep_int177 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__189_112)) begin
		main_189_gep_int177_reg <= main_189_gep_int177;
		if (start == 1'b0 && ^(main_189_gep_int177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_gep_int177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %gep_array178 = mul i32 %155, 4*/
		main_189_gep_array178 = (main_151_155_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %gep_array178 = mul i32 %155, 4*/
	if ((cur_state == LEGUP_F_main_BB__189_112)) begin
		main_189_gep_array178_reg <= main_189_gep_array178;
		if (start == 1'b0 && ^(main_189_gep_array178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_gep_array178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %gep179 = add i32 %gep_int177, %gep_array178*/
		main_189_gep179 = main_signed_add_32_1;
end
always @(*) begin
/* main: %189*/
/*   %gep179 = add i32 %gep_int177, %gep_array178*/
	main_189_gep179_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %189*/
	/*   %192 = inttoptr i32 %gep179 to i32**/
		main_189_192 = main_189_gep179;
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %192 = inttoptr i32 %gep179 to i32**/
	if ((cur_state == LEGUP_F_main_BB__189_113)) begin
		main_189_192_reg <= main_189_192;
		if (start == 1'b0 && ^(main_189_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %193 = load i32* %192, align 4, !tbaa !1*/
		main_189_193 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %193 = load i32* %192, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_114)) begin
		main_189_193_reg <= main_189_193;
		if (start == 1'b0 && ^(main_189_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %194 = add nsw i32 %193, %20*/
		main_189_194 = main_signed_add_32_0;
end
always @(*) begin
/* main: %189*/
/*   %194 = add nsw i32 %193, %20*/
	main_189_194_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %189*/
	/*   %195 = lshr i32 %194, 2*/
		main_189_195 = (main_189_194 >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %195 = lshr i32 %194, 2*/
	if ((cur_state == LEGUP_F_main_BB__189_114)) begin
		main_189_195_reg <= main_189_195;
		if (start == 1'b0 && ^(main_189_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %196 = and i32 %195, 63*/
		main_189_196 = (main_189_195 & 32'd63);
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %196 = and i32 %195, 63*/
	if ((cur_state == LEGUP_F_main_BB__189_114)) begin
		main_189_196_reg <= main_189_196;
		if (start == 1'b0 && ^(main_189_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %gep_int180 = ptrtoint [64 x i32]* %dmem to i32*/
if (reset) begin main_189_gep_int180 = 0; end
		main_189_gep_int180 = `TAG_main_0_dmem_a;
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %gep_int180 = ptrtoint [64 x i32]* %dmem to i32*/
	if ((cur_state == LEGUP_F_main_BB__189_112)) begin
		main_189_gep_int180_reg <= main_189_gep_int180;
		if (start == 1'b0 && ^(main_189_gep_int180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_gep_int180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %gep_array181 = mul i32 %196, 4*/
		main_189_gep_array181 = (main_189_196_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %gep_array181 = mul i32 %196, 4*/
	if ((cur_state == LEGUP_F_main_BB__189_115)) begin
		main_189_gep_array181_reg <= main_189_gep_array181;
		if (start == 1'b0 && ^(main_189_gep_array181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_gep_array181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %gep182 = add i32 %gep_int180, %gep_array181*/
		main_189_gep182 = main_signed_add_32_0;
end
always @(*) begin
/* main: %189*/
/*   %gep182 = add i32 %gep_int180, %gep_array181*/
	main_189_gep182_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %189*/
	/*   %197 = inttoptr i32 %gep182 to i32**/
		main_189_197 = main_189_gep182;
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %197 = inttoptr i32 %gep182 to i32**/
	if ((cur_state == LEGUP_F_main_BB__189_116)) begin
		main_189_197_reg <= main_189_197;
		if (start == 1'b0 && ^(main_189_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_197_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %sext4 = shl i32 %20, 16*/
		main_198_sext4 = (main_16_20_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %sext4 = shl i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__198_118)) begin
		main_198_sext4_reg <= main_198_sext4;
		if (start == 1'b0 && ^(main_198_sext4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_sext4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %gep_int183 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_198_gep_int183 = 0; end
		main_198_gep_int183 = 1'd0;
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %gep_int183 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__198_118)) begin
		main_198_gep_int183_reg <= main_198_gep_int183;
		if (start == 1'b0 && ^(main_198_gep_int183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_gep_int183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %gep_array184 = mul i32 %153, 4*/
		main_198_gep_array184 = (main_151_153_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %gep_array184 = mul i32 %153, 4*/
	if ((cur_state == LEGUP_F_main_BB__198_118)) begin
		main_198_gep_array184_reg <= main_198_gep_array184;
		if (start == 1'b0 && ^(main_198_gep_array184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_gep_array184_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %gep185 = add i32 %gep_int183, %gep_array184*/
		main_198_gep185 = main_signed_add_32_0;
end
always @(*) begin
/* main: %198*/
/*   %gep185 = add i32 %gep_int183, %gep_array184*/
	main_198_gep185_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %198*/
	/*   %199 = inttoptr i32 %gep185 to i32**/
		main_198_199 = main_198_gep185;
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %199 = inttoptr i32 %gep185 to i32**/
	if ((cur_state == LEGUP_F_main_BB__198_119)) begin
		main_198_199_reg <= main_198_199;
		if (start == 1'b0 && ^(main_198_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %200*/
	/*   %gep_int186 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_200_gep_int186 = 0; end
		main_200_gep_int186 = 1'd0;
end
always @(posedge clk) begin
	/* main: %200*/
	/*   %gep_int186 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__200_121)) begin
		main_200_gep_int186_reg <= main_200_gep_int186;
		if (start == 1'b0 && ^(main_200_gep_int186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_gep_int186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %200*/
	/*   %gep_array187 = mul i32 %155, 4*/
		main_200_gep_array187 = (main_151_155_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %200*/
	/*   %gep_array187 = mul i32 %155, 4*/
	if ((cur_state == LEGUP_F_main_BB__200_121)) begin
		main_200_gep_array187_reg <= main_200_gep_array187;
		if (start == 1'b0 && ^(main_200_gep_array187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_gep_array187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %200*/
	/*   %gep188 = add i32 %gep_int186, %gep_array187*/
		main_200_gep188 = main_signed_add_32_0;
end
always @(*) begin
/* main: %200*/
/*   %gep188 = add i32 %gep_int186, %gep_array187*/
	main_200_gep188_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %200*/
	/*   %201 = inttoptr i32 %gep188 to i32**/
		main_200_201 = main_200_gep188;
end
always @(posedge clk) begin
	/* main: %200*/
	/*   %201 = inttoptr i32 %gep188 to i32**/
	if ((cur_state == LEGUP_F_main_BB__200_122)) begin
		main_200_201_reg <= main_200_201;
		if (start == 1'b0 && ^(main_200_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %200*/
	/*   %202 = load i32* %201, align 4, !tbaa !1*/
		main_200_202 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %200*/
	/*   %202 = load i32* %201, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__200_123)) begin
		main_200_202_reg <= main_200_202;
		if (start == 1'b0 && ^(main_200_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %200*/
	/*   %gep_int189 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_200_gep_int189 = 0; end
		main_200_gep_int189 = 1'd0;
end
always @(posedge clk) begin
	/* main: %200*/
	/*   %gep_int189 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__200_121)) begin
		main_200_gep_int189_reg <= main_200_gep_int189;
		if (start == 1'b0 && ^(main_200_gep_int189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_gep_int189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %200*/
	/*   %gep_array190 = mul i32 %153, 4*/
		main_200_gep_array190 = (main_151_153_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %200*/
	/*   %gep_array190 = mul i32 %153, 4*/
	if ((cur_state == LEGUP_F_main_BB__200_121)) begin
		main_200_gep_array190_reg <= main_200_gep_array190;
		if (start == 1'b0 && ^(main_200_gep_array190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_gep_array190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %200*/
	/*   %gep191 = add i32 %gep_int189, %gep_array190*/
		main_200_gep191 = main_signed_add_32_1;
end
always @(*) begin
/* main: %200*/
/*   %gep191 = add i32 %gep_int189, %gep_array190*/
	main_200_gep191_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %200*/
	/*   %203 = inttoptr i32 %gep191 to i32**/
		main_200_203 = main_200_gep191;
end
always @(posedge clk) begin
	/* main: %200*/
	/*   %203 = inttoptr i32 %gep191 to i32**/
	if ((cur_state == LEGUP_F_main_BB__200_122)) begin
		main_200_203_reg <= main_200_203;
		if (start == 1'b0 && ^(main_200_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %200*/
	/*   %204 = load i32* %203, align 4, !tbaa !1*/
		main_200_204 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %200*/
	/*   %204 = load i32* %203, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__200_123)) begin
		main_200_204_reg <= main_200_204;
		if (start == 1'b0 && ^(main_200_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %200*/
	/*   %205 = icmp eq i32 %202, %204*/
		main_200_205 = (main_200_202 == main_200_204);
end
always @(posedge clk) begin
	/* main: %200*/
	/*   %205 = icmp eq i32 %202, %204*/
	if ((cur_state == LEGUP_F_main_BB__200_123)) begin
		main_200_205_reg <= main_200_205;
		if (start == 1'b0 && ^(main_200_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %206*/
	/*   %sext3 = shl i32 %20, 16*/
		main_206_sext3 = (main_16_20_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %206*/
	/*   %sext3 = shl i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__206_124)) begin
		main_206_sext3_reg <= main_206_sext3;
		if (start == 1'b0 && ^(main_206_sext3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_206_sext3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %206*/
	/*   %207 = ashr exact i32 %sext3, 14*/
		main_206_207 = ($signed(main_206_sext3) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %206*/
	/*   %207 = ashr exact i32 %sext3, 14*/
	if ((cur_state == LEGUP_F_main_BB__206_124)) begin
		main_206_207_reg <= main_206_207;
		if (start == 1'b0 && ^(main_206_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_206_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %206*/
	/*   %208 = add nsw i32 %207, %pc.0*/
		main_206_208 = main_signed_add_32_0;
end
always @(*) begin
/* main: %206*/
/*   %208 = add nsw i32 %207, %pc.0*/
	main_206_208_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %209*/
	/*   %gep_int192 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_209_gep_int192 = 0; end
		main_209_gep_int192 = 1'd0;
end
always @(posedge clk) begin
	/* main: %209*/
	/*   %gep_int192 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__209_125)) begin
		main_209_gep_int192_reg <= main_209_gep_int192;
		if (start == 1'b0 && ^(main_209_gep_int192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_gep_int192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %gep_array193 = mul i32 %155, 4*/
		main_209_gep_array193 = (main_151_155_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %209*/
	/*   %gep_array193 = mul i32 %155, 4*/
	if ((cur_state == LEGUP_F_main_BB__209_125)) begin
		main_209_gep_array193_reg <= main_209_gep_array193;
		if (start == 1'b0 && ^(main_209_gep_array193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_gep_array193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %gep194 = add i32 %gep_int192, %gep_array193*/
		main_209_gep194 = main_signed_add_32_0;
end
always @(*) begin
/* main: %209*/
/*   %gep194 = add i32 %gep_int192, %gep_array193*/
	main_209_gep194_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %209*/
	/*   %210 = inttoptr i32 %gep194 to i32**/
		main_209_210 = main_209_gep194;
end
always @(posedge clk) begin
	/* main: %209*/
	/*   %210 = inttoptr i32 %gep194 to i32**/
	if ((cur_state == LEGUP_F_main_BB__209_126)) begin
		main_209_210_reg <= main_209_210;
		if (start == 1'b0 && ^(main_209_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %211 = load i32* %210, align 4, !tbaa !1*/
		main_209_211 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %209*/
	/*   %211 = load i32* %210, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__209_127)) begin
		main_209_211_reg <= main_209_211;
		if (start == 1'b0 && ^(main_209_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %gep_int195 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_209_gep_int195 = 0; end
		main_209_gep_int195 = 1'd0;
end
always @(posedge clk) begin
	/* main: %209*/
	/*   %gep_int195 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__209_125)) begin
		main_209_gep_int195_reg <= main_209_gep_int195;
		if (start == 1'b0 && ^(main_209_gep_int195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_gep_int195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %gep_array196 = mul i32 %153, 4*/
		main_209_gep_array196 = (main_151_153_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %209*/
	/*   %gep_array196 = mul i32 %153, 4*/
	if ((cur_state == LEGUP_F_main_BB__209_125)) begin
		main_209_gep_array196_reg <= main_209_gep_array196;
		if (start == 1'b0 && ^(main_209_gep_array196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_gep_array196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %gep197 = add i32 %gep_int195, %gep_array196*/
		main_209_gep197 = main_signed_add_32_1;
end
always @(*) begin
/* main: %209*/
/*   %gep197 = add i32 %gep_int195, %gep_array196*/
	main_209_gep197_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %209*/
	/*   %212 = inttoptr i32 %gep197 to i32**/
		main_209_212 = main_209_gep197;
end
always @(posedge clk) begin
	/* main: %209*/
	/*   %212 = inttoptr i32 %gep197 to i32**/
	if ((cur_state == LEGUP_F_main_BB__209_126)) begin
		main_209_212_reg <= main_209_212;
		if (start == 1'b0 && ^(main_209_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_212_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
		main_209_213 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %209*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__209_127)) begin
		main_209_213_reg <= main_209_213;
		if (start == 1'b0 && ^(main_209_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_213_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %214 = icmp eq i32 %211, %213*/
		main_209_214 = (main_209_211 == main_209_213);
end
always @(posedge clk) begin
	/* main: %209*/
	/*   %214 = icmp eq i32 %211, %213*/
	if ((cur_state == LEGUP_F_main_BB__209_127)) begin
		main_209_214_reg <= main_209_214;
		if (start == 1'b0 && ^(main_209_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_214_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %215*/
	/*   %sext2 = shl i32 %20, 16*/
		main_215_sext2 = (main_16_20_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %215*/
	/*   %sext2 = shl i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__215_128)) begin
		main_215_sext2_reg <= main_215_sext2;
		if (start == 1'b0 && ^(main_215_sext2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_sext2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %215*/
	/*   %216 = ashr exact i32 %sext2, 14*/
		main_215_216 = ($signed(main_215_sext2) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %215*/
	/*   %216 = ashr exact i32 %sext2, 14*/
	if ((cur_state == LEGUP_F_main_BB__215_128)) begin
		main_215_216_reg <= main_215_216;
		if (start == 1'b0 && ^(main_215_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %215*/
	/*   %217 = add nsw i32 %216, %pc.0*/
		main_215_217 = main_signed_add_32_0;
end
always @(*) begin
/* main: %215*/
/*   %217 = add nsw i32 %216, %pc.0*/
	main_215_217_reg = main_33_41_reg;
end
always @(*) begin
	/* main: %218*/
	/*   %gep_int198 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_218_gep_int198 = 0; end
		main_218_gep_int198 = 1'd0;
end
always @(posedge clk) begin
	/* main: %218*/
	/*   %gep_int198 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__218_129)) begin
		main_218_gep_int198_reg <= main_218_gep_int198;
		if (start == 1'b0 && ^(main_218_gep_int198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_gep_int198_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %218*/
	/*   %gep_array199 = mul i32 %155, 4*/
		main_218_gep_array199 = (main_151_155_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %218*/
	/*   %gep_array199 = mul i32 %155, 4*/
	if ((cur_state == LEGUP_F_main_BB__218_129)) begin
		main_218_gep_array199_reg <= main_218_gep_array199;
		if (start == 1'b0 && ^(main_218_gep_array199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_gep_array199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %218*/
	/*   %gep200 = add i32 %gep_int198, %gep_array199*/
		main_218_gep200 = main_signed_add_32_0;
end
always @(*) begin
/* main: %218*/
/*   %gep200 = add i32 %gep_int198, %gep_array199*/
	main_218_gep200_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %218*/
	/*   %219 = inttoptr i32 %gep200 to i32**/
		main_218_219 = main_218_gep200;
end
always @(posedge clk) begin
	/* main: %218*/
	/*   %219 = inttoptr i32 %gep200 to i32**/
	if ((cur_state == LEGUP_F_main_BB__218_130)) begin
		main_218_219_reg <= main_218_219;
		if (start == 1'b0 && ^(main_218_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_219_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %218*/
	/*   %220 = load i32* %219, align 4, !tbaa !1*/
		main_218_220 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %218*/
	/*   %220 = load i32* %219, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__218_131)) begin
		main_218_220_reg <= main_218_220;
		if (start == 1'b0 && ^(main_218_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_220_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %218*/
	/*   %221 = icmp sgt i32 %220, -1*/
		main_218_221 = ($signed(main_218_220) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %218*/
	/*   %221 = icmp sgt i32 %220, -1*/
	if ((cur_state == LEGUP_F_main_BB__218_131)) begin
		main_218_221_reg <= main_218_221;
		if (start == 1'b0 && ^(main_218_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_221_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %222*/
	/*   %sext1 = shl i32 %20, 16*/
		main_222_sext1 = (main_16_20_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %222*/
	/*   %sext1 = shl i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__222_132)) begin
		main_222_sext1_reg <= main_222_sext1;
		if (start == 1'b0 && ^(main_222_sext1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_222_sext1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %222*/
	/*   %223 = ashr exact i32 %sext1, 14*/
		main_222_223 = ($signed(main_222_sext1) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %222*/
	/*   %223 = ashr exact i32 %sext1, 14*/
	if ((cur_state == LEGUP_F_main_BB__222_132)) begin
		main_222_223_reg <= main_222_223;
		if (start == 1'b0 && ^(main_222_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_222_223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %222*/
	/*   %224 = add nsw i32 %223, %pc.0*/
		main_222_224 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %222*/
	/*   %224 = add nsw i32 %223, %pc.0*/
	if ((cur_state == LEGUP_F_main_BB__222_132)) begin
		main_222_224_reg <= main_222_224;
		if (start == 1'b0 && ^(main_222_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_222_224_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %gep_int201 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_225_gep_int201 = 0; end
		main_225_gep_int201 = 1'd0;
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %gep_int201 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__225_133)) begin
		main_225_gep_int201_reg <= main_225_gep_int201;
		if (start == 1'b0 && ^(main_225_gep_int201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_gep_int201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %gep_array202 = mul i32 %155, 4*/
		main_225_gep_array202 = (main_151_155_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %gep_array202 = mul i32 %155, 4*/
	if ((cur_state == LEGUP_F_main_BB__225_133)) begin
		main_225_gep_array202_reg <= main_225_gep_array202;
		if (start == 1'b0 && ^(main_225_gep_array202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_gep_array202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %gep203 = add i32 %gep_int201, %gep_array202*/
		main_225_gep203 = main_signed_add_32_0;
end
always @(*) begin
/* main: %225*/
/*   %gep203 = add i32 %gep_int201, %gep_array202*/
	main_225_gep203_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %225*/
	/*   %226 = inttoptr i32 %gep203 to i32**/
		main_225_226 = main_225_gep203;
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %226 = inttoptr i32 %gep203 to i32**/
	if ((cur_state == LEGUP_F_main_BB__225_134)) begin
		main_225_226_reg <= main_225_226;
		if (start == 1'b0 && ^(main_225_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_226_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %227 = load i32* %226, align 4, !tbaa !1*/
		main_225_227 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %227 = load i32* %226, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_135)) begin
		main_225_227_reg <= main_225_227;
		if (start == 1'b0 && ^(main_225_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_227_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %sext = shl i32 %20, 16*/
		main_225_sext = (main_16_20_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %sext = shl i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__225_133)) begin
		main_225_sext_reg <= main_225_sext;
		if (start == 1'b0 && ^(main_225_sext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_sext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %228 = ashr exact i32 %sext, 16*/
		main_225_228 = ($signed(main_225_sext) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %228 = ashr exact i32 %sext, 16*/
	if ((cur_state == LEGUP_F_main_BB__225_133)) begin
		main_225_228_reg <= main_225_228;
		if (start == 1'b0 && ^(main_225_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_228_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %229 = icmp slt i32 %227, %228*/
		main_225_229 = ($signed(main_225_227) < $signed(main_225_228_reg));
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %229 = icmp slt i32 %227, %228*/
	if ((cur_state == LEGUP_F_main_BB__225_135)) begin
		main_225_229_reg <= main_225_229;
		if (start == 1'b0 && ^(main_225_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %230 = zext i1 %229 to i32*/
		main_225_230 = main_225_229;
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %230 = zext i1 %229 to i32*/
	if ((cur_state == LEGUP_F_main_BB__225_135)) begin
		main_225_230_reg <= main_225_230;
		if (start == 1'b0 && ^(main_225_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_230_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %gep_int204 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_225_gep_int204 = 0; end
		main_225_gep_int204 = 1'd0;
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %gep_int204 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__225_133)) begin
		main_225_gep_int204_reg <= main_225_gep_int204;
		if (start == 1'b0 && ^(main_225_gep_int204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_gep_int204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %gep_array205 = mul i32 %153, 4*/
		main_225_gep_array205 = (main_151_153_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %gep_array205 = mul i32 %153, 4*/
	if ((cur_state == LEGUP_F_main_BB__225_133)) begin
		main_225_gep_array205_reg <= main_225_gep_array205;
		if (start == 1'b0 && ^(main_225_gep_array205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_gep_array205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %gep206 = add i32 %gep_int204, %gep_array205*/
		main_225_gep206 = main_signed_add_32_1;
end
always @(*) begin
/* main: %225*/
/*   %gep206 = add i32 %gep_int204, %gep_array205*/
	main_225_gep206_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %225*/
	/*   %231 = inttoptr i32 %gep206 to i32**/
		main_225_231 = main_225_gep206;
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %231 = inttoptr i32 %gep206 to i32**/
	if ((cur_state == LEGUP_F_main_BB__225_134)) begin
		main_225_231_reg <= main_225_231;
		if (start == 1'b0 && ^(main_225_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_231_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %232*/
	/*   %gep_int207 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_232_gep_int207 = 0; end
		main_232_gep_int207 = 1'd0;
end
always @(posedge clk) begin
	/* main: %232*/
	/*   %gep_int207 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__232_137)) begin
		main_232_gep_int207_reg <= main_232_gep_int207;
		if (start == 1'b0 && ^(main_232_gep_int207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_232_gep_int207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %232*/
	/*   %gep_array208 = mul i32 %155, 4*/
		main_232_gep_array208 = (main_151_155_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %232*/
	/*   %gep_array208 = mul i32 %155, 4*/
	if ((cur_state == LEGUP_F_main_BB__232_137)) begin
		main_232_gep_array208_reg <= main_232_gep_array208;
		if (start == 1'b0 && ^(main_232_gep_array208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_232_gep_array208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %232*/
	/*   %gep209 = add i32 %gep_int207, %gep_array208*/
		main_232_gep209 = main_signed_add_32_0;
end
always @(*) begin
/* main: %232*/
/*   %gep209 = add i32 %gep_int207, %gep_array208*/
	main_232_gep209_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %232*/
	/*   %233 = inttoptr i32 %gep209 to i32**/
		main_232_233 = main_232_gep209;
end
always @(posedge clk) begin
	/* main: %232*/
	/*   %233 = inttoptr i32 %gep209 to i32**/
	if ((cur_state == LEGUP_F_main_BB__232_138)) begin
		main_232_233_reg <= main_232_233;
		if (start == 1'b0 && ^(main_232_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_232_233_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %232*/
	/*   %234 = load i32* %233, align 4, !tbaa !1*/
		main_232_234 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %232*/
	/*   %234 = load i32* %233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__232_139)) begin
		main_232_234_reg <= main_232_234;
		if (start == 1'b0 && ^(main_232_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_232_234_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %232*/
	/*   %235 = and i32 %20, 65535*/
		main_232_235 = (main_16_20_reg & 32'd65535);
end
always @(posedge clk) begin
	/* main: %232*/
	/*   %235 = and i32 %20, 65535*/
	if ((cur_state == LEGUP_F_main_BB__232_137)) begin
		main_232_235_reg <= main_232_235;
		if (start == 1'b0 && ^(main_232_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_232_235_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %232*/
	/*   %236 = icmp ult i32 %234, %235*/
		main_232_236 = (main_232_234 < main_232_235_reg);
end
always @(posedge clk) begin
	/* main: %232*/
	/*   %236 = icmp ult i32 %234, %235*/
	if ((cur_state == LEGUP_F_main_BB__232_139)) begin
		main_232_236_reg <= main_232_236;
		if (start == 1'b0 && ^(main_232_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_232_236_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %232*/
	/*   %237 = zext i1 %236 to i32*/
		main_232_237 = main_232_236;
end
always @(posedge clk) begin
	/* main: %232*/
	/*   %237 = zext i1 %236 to i32*/
	if ((cur_state == LEGUP_F_main_BB__232_139)) begin
		main_232_237_reg <= main_232_237;
		if (start == 1'b0 && ^(main_232_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_232_237_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %232*/
	/*   %gep_int210 = ptrtoint [32 x i32]* %reg to i32*/
if (reset) begin main_232_gep_int210 = 0; end
		main_232_gep_int210 = 1'd0;
end
always @(posedge clk) begin
	/* main: %232*/
	/*   %gep_int210 = ptrtoint [32 x i32]* %reg to i32*/
	if ((cur_state == LEGUP_F_main_BB__232_137)) begin
		main_232_gep_int210_reg <= main_232_gep_int210;
		if (start == 1'b0 && ^(main_232_gep_int210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_232_gep_int210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %232*/
	/*   %gep_array211 = mul i32 %153, 4*/
		main_232_gep_array211 = (main_151_153_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %232*/
	/*   %gep_array211 = mul i32 %153, 4*/
	if ((cur_state == LEGUP_F_main_BB__232_137)) begin
		main_232_gep_array211_reg <= main_232_gep_array211;
		if (start == 1'b0 && ^(main_232_gep_array211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_232_gep_array211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %232*/
	/*   %gep212 = add i32 %gep_int210, %gep_array211*/
		main_232_gep212 = main_signed_add_32_1;
end
always @(*) begin
/* main: %232*/
/*   %gep212 = add i32 %gep_int210, %gep_array211*/
	main_232_gep212_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %232*/
	/*   %238 = inttoptr i32 %gep212 to i32**/
		main_232_238 = main_232_gep212;
end
always @(posedge clk) begin
	/* main: %232*/
	/*   %238 = inttoptr i32 %gep212 to i32**/
	if ((cur_state == LEGUP_F_main_BB__232_138)) begin
		main_232_238_reg <= main_232_238;
		if (start == 1'b0 && ^(main_232_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_232_238_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread*/
	/*   %n_inst.0.lcssa = phi i32 [ %n_inst.0, %151 ], [ %n_inst.0, %23 ]*/
	if (((((((((((((((((((cur_state == LEGUP_F_main_BB__23_20) & (memory_controller_waitrequest == 1'd0)) & (main_23_24 != 32'd33)) & (main_23_24 != 32'd35)) & (main_23_24 != 32'd24)) & (main_23_24 != 32'd25)) & (main_23_24 != 32'd16)) & (main_23_24 != 32'd18)) & (main_23_24 != 32'd36)) & (main_23_24 != 32'd37)) & (main_23_24 != 32'd38)) & (main_23_24 != 32'd0)) & (main_23_24 != 32'd2)) & (main_23_24 != 32'd4)) & (main_23_24 != 32'd6)) & (main_23_24 != 32'd42)) & (main_23_24 != 32'd43)) & (main_23_24 != 32'd8))) begin
		main_thread_n_inst0lcssa = main_16_n_inst0_reg;
	end
	/* main: %.thread*/
	/*   %n_inst.0.lcssa = phi i32 [ %n_inst.0, %151 ], [ %n_inst.0, %23 ]*/
	else /* if (((((((((((((((cur_state == LEGUP_F_main_BB__151_87) & (memory_controller_waitrequest == 1'd0)) & (main_16_22_reg != 32'd9)) & (main_16_22_reg != 32'd12)) & (main_16_22_reg != 32'd13)) & (main_16_22_reg != 32'd14)) & (main_16_22_reg != 32'd35)) & (main_16_22_reg != 32'd43)) & (main_16_22_reg != 32'd15)) & (main_16_22_reg != 32'd4)) & (main_16_22_reg != 32'd5)) & (main_16_22_reg != 32'd1)) & (main_16_22_reg != 32'd10)) & (main_16_22_reg != 32'd11))) */ begin
		main_thread_n_inst0lcssa = main_16_n_inst0_reg;
	end
end
always @(posedge clk) begin
	/* main: %.thread*/
	/*   %n_inst.0.lcssa = phi i32 [ %n_inst.0, %151 ], [ %n_inst.0, %23 ]*/
	if (((((((((((((((((((cur_state == LEGUP_F_main_BB__23_20) & (memory_controller_waitrequest == 1'd0)) & (main_23_24 != 32'd33)) & (main_23_24 != 32'd35)) & (main_23_24 != 32'd24)) & (main_23_24 != 32'd25)) & (main_23_24 != 32'd16)) & (main_23_24 != 32'd18)) & (main_23_24 != 32'd36)) & (main_23_24 != 32'd37)) & (main_23_24 != 32'd38)) & (main_23_24 != 32'd0)) & (main_23_24 != 32'd2)) & (main_23_24 != 32'd4)) & (main_23_24 != 32'd6)) & (main_23_24 != 32'd42)) & (main_23_24 != 32'd43)) & (main_23_24 != 32'd8))) begin
		main_thread_n_inst0lcssa_reg <= main_thread_n_inst0lcssa;
		if (start == 1'b0 && ^(main_thread_n_inst0lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread_n_inst0lcssa_reg"); $finish; end
	end
	/* main: %.thread*/
	/*   %n_inst.0.lcssa = phi i32 [ %n_inst.0, %151 ], [ %n_inst.0, %23 ]*/
	if (((((((((((((((cur_state == LEGUP_F_main_BB__151_87) & (memory_controller_waitrequest == 1'd0)) & (main_16_22_reg != 32'd9)) & (main_16_22_reg != 32'd12)) & (main_16_22_reg != 32'd13)) & (main_16_22_reg != 32'd14)) & (main_16_22_reg != 32'd35)) & (main_16_22_reg != 32'd43)) & (main_16_22_reg != 32'd15)) & (main_16_22_reg != 32'd4)) & (main_16_22_reg != 32'd5)) & (main_16_22_reg != 32'd1)) & (main_16_22_reg != 32'd10)) & (main_16_22_reg != 32'd11))) begin
		main_thread_n_inst0lcssa_reg <= main_thread_n_inst0lcssa;
		if (start == 1'b0 && ^(main_thread_n_inst0lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread_n_inst0lcssa_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread*/
	/*   %239 = add nsw i32 %n_inst.0.lcssa, 1*/
		main_thread_239 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.thread*/
/*   %239 = add nsw i32 %n_inst.0.lcssa, 1*/
	main_thread_239_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__42_30) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__51_34) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__66_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__77_41) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__79_44) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__81_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__88_52) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__95_56) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__102_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__107_64) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__112_68) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__119_72) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__126_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__134_80) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__142_83) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_142_144;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__145_84) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_145_147;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__148_86) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_148_150_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__156_91) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__162_95) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__168_99) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__174_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__180_111) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__189_117) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__198_120) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__200_123) & (memory_controller_waitrequest == 1'd0)) & (main_200_205 == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__206_124) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_206_208;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__209_127) & (memory_controller_waitrequest == 1'd0)) & (main_209_214 == 1'd1))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__215_128) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_215_217;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__218_131) & (memory_controller_waitrequest == 1'd0)) & (main_218_221 == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__222_132) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_222_224;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__225_136) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1 = main_16_21_reg;
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__232_140) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_240_pc1 = main_16_21_reg;
	end
end
always @(posedge clk) begin
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__42_30) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__51_34) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__66_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__77_41) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__79_44) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__81_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__88_52) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__95_56) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__102_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__107_64) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__112_68) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__119_72) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__126_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__134_80) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__142_83) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__145_84) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__148_86) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__156_91) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__162_95) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__168_99) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__174_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__180_111) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__189_117) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__198_120) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__200_123) & (memory_controller_waitrequest == 1'd0)) & (main_200_205 == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__206_124) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__209_127) & (memory_controller_waitrequest == 1'd0)) & (main_209_214 == 1'd1))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__215_128) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__218_131) & (memory_controller_waitrequest == 1'd0)) & (main_218_221 == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__222_132) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__225_136) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__232_140) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_pc1_reg <= main_240_pc1;
		if (start == 1'b0 && ^(main_240_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_pc1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__42_30) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__51_34) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_51_63;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__66_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_66_74;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__77_41) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__79_44) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__81_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__88_52) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__95_56) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__102_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__107_64) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__112_68) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__119_72) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__126_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__134_80) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__142_83) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__145_84) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__148_86) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__156_91) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__162_95) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__168_99) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__174_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__180_111) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__189_117) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__198_120) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__200_123) & (memory_controller_waitrequest == 1'd0)) & (main_200_205 == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__206_124) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__209_127) & (memory_controller_waitrequest == 1'd0)) & (main_209_214 == 1'd1))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__215_128) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__218_131) & (memory_controller_waitrequest == 1'd0)) & (main_218_221 == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__222_132) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__225_136) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__232_140) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_240_Lo1 = main_16_Lo0_reg;
	end
end
always @(posedge clk) begin
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__42_30) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__51_34) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__66_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__77_41) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__79_44) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__81_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__88_52) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__95_56) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__102_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__107_64) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__112_68) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__119_72) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__126_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__134_80) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__142_83) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__145_84) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__148_86) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__156_91) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__162_95) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__168_99) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__174_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__180_111) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__189_117) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__198_120) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__200_123) & (memory_controller_waitrequest == 1'd0)) & (main_200_205 == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__206_124) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__209_127) & (memory_controller_waitrequest == 1'd0)) & (main_209_214 == 1'd1))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__215_128) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__218_131) & (memory_controller_waitrequest == 1'd0)) & (main_218_221 == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__222_132) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__225_136) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__232_140) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Lo1_reg <= main_240_Lo1;
		if (start == 1'b0 && ^(main_240_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Lo1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__42_30) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__51_34) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_51_65;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__66_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_66_76;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__77_41) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__79_44) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__81_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__88_52) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__95_56) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__102_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__107_64) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__112_68) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__119_72) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__126_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__134_80) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__142_83) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__145_84) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__148_86) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__156_91) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__162_95) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__168_99) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__174_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__180_111) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__189_117) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__198_120) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__200_123) & (memory_controller_waitrequest == 1'd0)) & (main_200_205 == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__206_124) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__209_127) & (memory_controller_waitrequest == 1'd0)) & (main_209_214 == 1'd1))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__215_128) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__218_131) & (memory_controller_waitrequest == 1'd0)) & (main_218_221 == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__222_132) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__225_136) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__232_140) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_240_Hi1 = main_16_Hi0_reg;
	end
end
always @(posedge clk) begin
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__42_30) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__51_34) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__66_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__77_41) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__79_44) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__81_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__88_52) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__95_56) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__102_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__107_64) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__112_68) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__119_72) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__126_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__134_80) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__142_83) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__145_84) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__148_86) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__156_91) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__162_95) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__168_99) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__174_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__180_111) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__189_117) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__198_120) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__200_123) & (memory_controller_waitrequest == 1'd0)) & (main_200_205 == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__206_124) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__209_127) & (memory_controller_waitrequest == 1'd0)) & (main_209_214 == 1'd1))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__215_128) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__218_131) & (memory_controller_waitrequest == 1'd0)) & (main_218_221 == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__222_132) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__225_136) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
	/* main: %240*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__232_140) & (memory_controller_waitrequest == 1'd0))) begin
		main_240_Hi1_reg <= main_240_Hi1;
		if (start == 1'b0 && ^(main_240_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_Hi1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %240*/
	/*   %241 = add nsw i32 %n_inst.0, 1*/
		main_240_241 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %240*/
	/*   %241 = add nsw i32 %n_inst.0, 1*/
	if ((cur_state == LEGUP_F_main_BB__240_143)) begin
		main_240_241_reg <= main_240_241;
		if (start == 1'b0 && ^(main_240_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_241_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %240*/
	/*   %242 = icmp eq i32 %pc.1, 0*/
		main_240_242 = (main_240_pc1_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %240*/
	/*   %242 = icmp eq i32 %pc.1, 0*/
	if ((cur_state == LEGUP_F_main_BB__240_143)) begin
		main_240_242_reg <= main_240_242;
		if (start == 1'b0 && ^(main_240_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_242_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %243 = phi i32 [ %239, %.thread ], [ %241, %240 ]*/
	if (((cur_state == LEGUP_F_main_BB_thread_142) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit_243 = main_thread_239_reg;
	end
	/* main: %.loopexit*/
	/*   %243 = phi i32 [ %239, %.thread ], [ %241, %240 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__240_144) & (memory_controller_waitrequest == 1'd0)) & (main_240_242_reg == 1'd1))) */ begin
		main_loopexit_243 = main_240_241_reg;
	end
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %243 = phi i32 [ %239, %.thread ], [ %241, %240 ]*/
	if (((cur_state == LEGUP_F_main_BB_thread_142) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit_243_reg <= main_loopexit_243;
		if (start == 1'b0 && ^(main_loopexit_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_243_reg"); $finish; end
	end
	/* main: %.loopexit*/
	/*   %243 = phi i32 [ %239, %.thread ], [ %241, %240 ]*/
	if ((((cur_state == LEGUP_F_main_BB__240_144) & (memory_controller_waitrequest == 1'd0)) & (main_240_242_reg == 1'd1))) begin
		main_loopexit_243_reg <= main_loopexit_243;
		if (start == 1'b0 && ^(main_loopexit_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_243_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %244 = icmp eq i32 %243, 611*/
		main_loopexit_244 = (main_loopexit_243_reg == 32'd611);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %244 = icmp eq i32 %243, 611*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_145)) begin
		main_loopexit_244_reg <= main_loopexit_244;
		if (start == 1'b0 && ^(main_loopexit_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_244_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %245 = zext i1 %244 to i32*/
		main_loopexit_245 = main_loopexit_244;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %245 = zext i1 %244 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_145)) begin
		main_loopexit_245_reg <= main_loopexit_245;
		if (start == 1'b0 && ^(main_loopexit_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_245_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %246 = load i32* %6, align 4, !tbaa !1*/
		main_loopexit_246 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %246 = load i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_147)) begin
		main_loopexit_246_reg <= main_loopexit_246;
		if (start == 1'b0 && ^(main_loopexit_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_246_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %247 = icmp eq i32 %246, -17*/
		main_loopexit_247 = (main_loopexit_246 == -32'd17);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %247 = icmp eq i32 %246, -17*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_147)) begin
		main_loopexit_247_reg <= main_loopexit_247;
		if (start == 1'b0 && ^(main_loopexit_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %248 = zext i1 %247 to i32*/
		main_loopexit_248 = main_loopexit_247;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %248 = zext i1 %247 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_147)) begin
		main_loopexit_248_reg <= main_loopexit_248;
		if (start == 1'b0 && ^(main_loopexit_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_248_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %249 = add nsw i32 %248, %245*/
		main_loopexit_249 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.loopexit*/
/*   %249 = add nsw i32 %248, %245*/
	main_loopexit_249_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %250 = load i32* %7, align 4, !tbaa !1*/
		main_loopexit_250 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %250 = load i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_147)) begin
		main_loopexit_250_reg <= main_loopexit_250;
		if (start == 1'b0 && ^(main_loopexit_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_250_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %251 = icmp eq i32 %250, -9*/
		main_loopexit_251 = (main_loopexit_250 == -32'd9);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %251 = icmp eq i32 %250, -9*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_147)) begin
		main_loopexit_251_reg <= main_loopexit_251;
		if (start == 1'b0 && ^(main_loopexit_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_251_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %252 = zext i1 %251 to i32*/
		main_loopexit_252 = main_loopexit_251;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %252 = zext i1 %251 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_147)) begin
		main_loopexit_252_reg <= main_loopexit_252;
		if (start == 1'b0 && ^(main_loopexit_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_252_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %253 = add nsw i32 %252, %249*/
		main_loopexit_253 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.loopexit*/
/*   %253 = add nsw i32 %252, %249*/
	main_loopexit_253_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %254 = load i32* %8, align 4, !tbaa !1*/
		main_loopexit_254 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %254 = load i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_148)) begin
		main_loopexit_254_reg <= main_loopexit_254;
		if (start == 1'b0 && ^(main_loopexit_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_254_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %255 = icmp eq i32 %254, 0*/
		main_loopexit_255 = (main_loopexit_254 == 32'd0);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %255 = icmp eq i32 %254, 0*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_148)) begin
		main_loopexit_255_reg <= main_loopexit_255;
		if (start == 1'b0 && ^(main_loopexit_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_255_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %256 = zext i1 %255 to i32*/
		main_loopexit_256 = main_loopexit_255;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %256 = zext i1 %255 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_148)) begin
		main_loopexit_256_reg <= main_loopexit_256;
		if (start == 1'b0 && ^(main_loopexit_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_256_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %257 = add nsw i32 %256, %253*/
		main_loopexit_257 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.loopexit*/
/*   %257 = add nsw i32 %256, %253*/
	main_loopexit_257_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %258 = load i32* %9, align 4, !tbaa !1*/
		main_loopexit_258 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %258 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_148)) begin
		main_loopexit_258_reg <= main_loopexit_258;
		if (start == 1'b0 && ^(main_loopexit_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_258_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %259 = icmp eq i32 %258, 3*/
		main_loopexit_259 = (main_loopexit_258 == 32'd3);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %259 = icmp eq i32 %258, 3*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_148)) begin
		main_loopexit_259_reg <= main_loopexit_259;
		if (start == 1'b0 && ^(main_loopexit_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_259_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %260 = zext i1 %259 to i32*/
		main_loopexit_260 = main_loopexit_259;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %260 = zext i1 %259 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_148)) begin
		main_loopexit_260_reg <= main_loopexit_260;
		if (start == 1'b0 && ^(main_loopexit_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_260_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %261 = add nsw i32 %260, %257*/
		main_loopexit_261 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %261 = add nsw i32 %260, %257*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_148)) begin
		main_loopexit_261_reg <= main_loopexit_261;
		if (start == 1'b0 && ^(main_loopexit_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_261_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %262 = load i32* %10, align 4, !tbaa !1*/
		main_loopexit_262 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %262 = load i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_149)) begin
		main_loopexit_262_reg <= main_loopexit_262;
		if (start == 1'b0 && ^(main_loopexit_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_262_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %263 = icmp eq i32 %262, 5*/
		main_loopexit_263 = (main_loopexit_262 == 32'd5);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %263 = icmp eq i32 %262, 5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_149)) begin
		main_loopexit_263_reg <= main_loopexit_263;
		if (start == 1'b0 && ^(main_loopexit_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_263_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %264 = zext i1 %263 to i32*/
		main_loopexit_264 = main_loopexit_263;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %264 = zext i1 %263 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_149)) begin
		main_loopexit_264_reg <= main_loopexit_264;
		if (start == 1'b0 && ^(main_loopexit_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_264_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %265 = add nsw i32 %264, %261*/
		main_loopexit_265 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.loopexit*/
/*   %265 = add nsw i32 %264, %261*/
	main_loopexit_265_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %266 = load i32* %11, align 4, !tbaa !1*/
		main_loopexit_266 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %266 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_149)) begin
		main_loopexit_266_reg <= main_loopexit_266;
		if (start == 1'b0 && ^(main_loopexit_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_266_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %267 = icmp eq i32 %266, 11*/
		main_loopexit_267 = (main_loopexit_266 == 32'd11);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %267 = icmp eq i32 %266, 11*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_149)) begin
		main_loopexit_267_reg <= main_loopexit_267;
		if (start == 1'b0 && ^(main_loopexit_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_267_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %268 = zext i1 %267 to i32*/
		main_loopexit_268 = main_loopexit_267;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %268 = zext i1 %267 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_149)) begin
		main_loopexit_268_reg <= main_loopexit_268;
		if (start == 1'b0 && ^(main_loopexit_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_268_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %269 = add nsw i32 %268, %265*/
		main_loopexit_269 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.loopexit*/
/*   %269 = add nsw i32 %268, %265*/
	main_loopexit_269_reg = main_66_gep56_reg;
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %270 = load i32* %12, align 4, !tbaa !1*/
		main_loopexit_270 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %270 = load i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_150)) begin
		main_loopexit_270_reg <= main_loopexit_270;
		if (start == 1'b0 && ^(main_loopexit_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_270_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %271 = icmp eq i32 %270, 22*/
		main_loopexit_271 = (main_loopexit_270 == 32'd22);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %271 = icmp eq i32 %270, 22*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_150)) begin
		main_loopexit_271_reg <= main_loopexit_271;
		if (start == 1'b0 && ^(main_loopexit_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_271_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %272 = zext i1 %271 to i32*/
		main_loopexit_272 = main_loopexit_271;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %272 = zext i1 %271 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_150)) begin
		main_loopexit_272_reg <= main_loopexit_272;
		if (start == 1'b0 && ^(main_loopexit_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_272_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %273 = add nsw i32 %272, %269*/
		main_loopexit_273 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.loopexit*/
/*   %273 = add nsw i32 %272, %269*/
	main_loopexit_273_reg = main_2_gep_reg;
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %274 = load i32* %13, align 4, !tbaa !1*/
		main_loopexit_274 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %274 = load i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_150)) begin
		main_loopexit_274_reg <= main_loopexit_274;
		if (start == 1'b0 && ^(main_loopexit_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_274_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %275 = icmp eq i32 %274, 38*/
		main_loopexit_275 = (main_loopexit_274 == 32'd38);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %275 = icmp eq i32 %274, 38*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_150)) begin
		main_loopexit_275_reg <= main_loopexit_275;
		if (start == 1'b0 && ^(main_loopexit_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_275_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %276 = zext i1 %275 to i32*/
		main_loopexit_276 = main_loopexit_275;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %276 = zext i1 %275 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_150)) begin
		main_loopexit_276_reg <= main_loopexit_276;
		if (start == 1'b0 && ^(main_loopexit_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_276_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %277 = add nsw i32 %276, %273*/
		main_loopexit_277 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %277 = add nsw i32 %276, %273*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_150)) begin
		main_loopexit_277_reg <= main_loopexit_277;
		if (start == 1'b0 && ^(main_loopexit_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_277_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %279 = icmp eq i32 %277, 9*/
		main_loopexit_279 = (main_loopexit_277 == 32'd9);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %279 = icmp eq i32 %277, 9*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_150)) begin
		main_loopexit_279_reg <= main_loopexit_279;
		if (start == 1'b0 && ^(main_loopexit_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_279_reg"); $finish; end
	end
end
always @(*) begin
	imem_address_a = 1'd0;
	/* main: %16*/
	/*   %20 = load i32* %19, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__16_18)) begin
		imem_address_a = (main_16_19 >>> 3'd2);
	end
end
always @(*) begin
	imem_write_enable_a = 1'd0;
	/* main: %16*/
	/*   %20 = load i32* %19, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__16_18)) begin
		imem_write_enable_a = 1'd0;
	end
end
always @(*) begin
	main_0_reg_address_a = 1'd0;
	/* main: %2*/
	/*   store i32 0, i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_5)) begin
		main_0_reg_address_a = (main_2_3 >>> 3'd2);
	end
	/* main: %.preheader14*/
	/*   store i32 2147479548, i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_0_reg_address_a = (main_preheader14_5 >>> 3'd2);
	end
	/* main: %33*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_22)) begin
		main_0_reg_address_a = (main_33_34 >>> 3'd2);
	end
	/* main: %33*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_23)) begin
		main_0_reg_address_a = (main_33_39_reg >>> 3'd2);
	end
	/* main: %33*/
	/*   store i32 %41, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_24)) begin
		main_0_reg_address_a = (main_33_39_reg >>> 3'd2);
	end
	/* main: %42*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_27)) begin
		main_0_reg_address_a = (main_42_43 >>> 3'd2);
	end
	/* main: %42*/
	/*   %49 = load i32* %48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_28)) begin
		main_0_reg_address_a = (main_42_48_reg >>> 3'd2);
	end
	/* main: %42*/
	/*   store i32 %50, i32* %48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_29)) begin
		main_0_reg_address_a = (main_42_48_reg >>> 3'd2);
	end
	/* main: %51*/
	/*   %53 = load i32* %52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_32)) begin
		main_0_reg_address_a = (main_51_52 >>> 3'd2);
	end
	/* main: %51*/
	/*   %60 = load i32* %59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_33)) begin
		main_0_reg_address_a = (main_51_59_reg >>> 3'd2);
	end
	/* main: %66*/
	/*   %68 = load i32* %67, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__66_36)) begin
		main_0_reg_address_a = (main_66_67 >>> 3'd2);
	end
	/* main: %77*/
	/*   store i32 %Hi.0, i32* %78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__77_40)) begin
		main_0_reg_address_a = (main_77_78 >>> 3'd2);
	end
	/* main: %79*/
	/*   store i32 %Lo.0, i32* %80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__79_43)) begin
		main_0_reg_address_a = (main_79_80 >>> 3'd2);
	end
	/* main: %81*/
	/*   %83 = load i32* %82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__81_46)) begin
		main_0_reg_address_a = (main_81_82 >>> 3'd2);
	end
	/* main: %81*/
	/*   store i32 %86, i32* %87, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__81_47)) begin
		main_0_reg_address_a = (main_81_87_reg >>> 3'd2);
	end
	/* main: %88*/
	/*   %90 = load i32* %89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_50)) begin
		main_0_reg_address_a = (main_88_89 >>> 3'd2);
	end
	/* main: %88*/
	/*   store i32 %93, i32* %94, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_51)) begin
		main_0_reg_address_a = (main_88_94_reg >>> 3'd2);
	end
	/* main: %95*/
	/*   %97 = load i32* %96, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__95_54)) begin
		main_0_reg_address_a = (main_95_96 >>> 3'd2);
	end
	/* main: %95*/
	/*   store i32 %100, i32* %101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__95_55)) begin
		main_0_reg_address_a = (main_95_101_reg >>> 3'd2);
	end
	/* main: %102*/
	/*   %104 = load i32* %103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__102_58)) begin
		main_0_reg_address_a = (main_102_103 >>> 3'd2);
	end
	/* main: %102*/
	/*   store i32 %105, i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__102_59)) begin
		main_0_reg_address_a = (main_102_106_reg >>> 3'd2);
	end
	/* main: %107*/
	/*   %109 = load i32* %108, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__107_62)) begin
		main_0_reg_address_a = (main_107_108 >>> 3'd2);
	end
	/* main: %107*/
	/*   store i32 %110, i32* %111, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__107_63)) begin
		main_0_reg_address_a = (main_107_111_reg >>> 3'd2);
	end
	/* main: %112*/
	/*   %114 = load i32* %113, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__112_66)) begin
		main_0_reg_address_a = (main_112_113 >>> 3'd2);
	end
	/* main: %112*/
	/*   store i32 %117, i32* %118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__112_67)) begin
		main_0_reg_address_a = (main_112_118_reg >>> 3'd2);
	end
	/* main: %119*/
	/*   %121 = load i32* %120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_0_reg_address_a = (main_119_120 >>> 3'd2);
	end
	/* main: %119*/
	/*   store i32 %124, i32* %125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_71)) begin
		main_0_reg_address_a = (main_119_125_reg >>> 3'd2);
	end
	/* main: %126*/
	/*   %128 = load i32* %127, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_74)) begin
		main_0_reg_address_a = (main_126_127 >>> 3'd2);
	end
	/* main: %126*/
	/*   store i32 %132, i32* %133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_75)) begin
		main_0_reg_address_a = (main_126_133_reg >>> 3'd2);
	end
	/* main: %134*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__134_78)) begin
		main_0_reg_address_a = (main_134_135 >>> 3'd2);
	end
	/* main: %134*/
	/*   store i32 %140, i32* %141, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__134_79)) begin
		main_0_reg_address_a = (main_134_141_reg >>> 3'd2);
	end
	/* main: %142*/
	/*   %144 = load i32* %143, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__142_82)) begin
		main_0_reg_address_a = (main_142_143 >>> 3'd2);
	end
	/* main: %148*/
	/*   store i32 %21, i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__148_85)) begin
		main_0_reg_address_a = (main_preheader14_15_reg >>> 3'd2);
	end
	/* main: %156*/
	/*   %158 = load i32* %157, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__156_89)) begin
		main_0_reg_address_a = (main_156_157 >>> 3'd2);
	end
	/* main: %156*/
	/*   store i32 %160, i32* %161, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__156_90)) begin
		main_0_reg_address_a = (main_156_161_reg >>> 3'd2);
	end
	/* main: %162*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__162_93)) begin
		main_0_reg_address_a = (main_162_163 >>> 3'd2);
	end
	/* main: %162*/
	/*   store i32 %166, i32* %167, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__162_94)) begin
		main_0_reg_address_a = (main_162_167_reg >>> 3'd2);
	end
	/* main: %168*/
	/*   %170 = load i32* %169, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__168_97)) begin
		main_0_reg_address_a = (main_168_169 >>> 3'd2);
	end
	/* main: %168*/
	/*   store i32 %172, i32* %173, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__168_98)) begin
		main_0_reg_address_a = (main_168_173_reg >>> 3'd2);
	end
	/* main: %174*/
	/*   %176 = load i32* %175, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__174_101)) begin
		main_0_reg_address_a = (main_174_175 >>> 3'd2);
	end
	/* main: %174*/
	/*   store i32 %178, i32* %179, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__174_102)) begin
		main_0_reg_address_a = (main_174_179_reg >>> 3'd2);
	end
	/* main: %180*/
	/*   %182 = load i32* %181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__180_105)) begin
		main_0_reg_address_a = (main_180_181 >>> 3'd2);
	end
	/* main: %180*/
	/*   store i32 %187, i32* %188, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__180_110)) begin
		main_0_reg_address_a = (main_180_188_reg >>> 3'd2);
	end
	/* main: %189*/
	/*   %191 = load i32* %190, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_113)) begin
		main_0_reg_address_a = (main_189_190 >>> 3'd2);
	end
	/* main: %198*/
	/*   store i32 %sext4, i32* %199, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__198_119)) begin
		main_0_reg_address_a = (main_198_199 >>> 3'd2);
	end
	/* main: %200*/
	/*   %202 = load i32* %201, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__200_122)) begin
		main_0_reg_address_a = (main_200_201 >>> 3'd2);
	end
	/* main: %209*/
	/*   %211 = load i32* %210, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__209_126)) begin
		main_0_reg_address_a = (main_209_210 >>> 3'd2);
	end
	/* main: %218*/
	/*   %220 = load i32* %219, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__218_130)) begin
		main_0_reg_address_a = (main_218_219 >>> 3'd2);
	end
	/* main: %225*/
	/*   %227 = load i32* %226, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_134)) begin
		main_0_reg_address_a = (main_225_226 >>> 3'd2);
	end
	/* main: %225*/
	/*   store i32 %230, i32* %231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_135)) begin
		main_0_reg_address_a = (main_225_231_reg >>> 3'd2);
	end
	/* main: %232*/
	/*   %234 = load i32* %233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__232_138)) begin
		main_0_reg_address_a = (main_232_233 >>> 3'd2);
	end
	/* main: %232*/
	/*   store i32 %237, i32* %238, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__232_139)) begin
		main_0_reg_address_a = (main_232_238_reg >>> 3'd2);
	end
	/* main: %.thread*/
	/*   store i32 0, i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread_141)) begin
		main_0_reg_address_a = (main_preheader14_14_reg >>> 3'd2);
	end
	/* main: %240*/
	/*   store i32 0, i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__240_143)) begin
		main_0_reg_address_a = (main_preheader14_14_reg >>> 3'd2);
	end
end
always @(*) begin
	main_0_reg_write_enable_a = 1'd0;
	/* main: %2*/
	/*   store i32 0, i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_5)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %.preheader14*/
	/*   store i32 2147479548, i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %33*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_22)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %33*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_23)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %33*/
	/*   store i32 %41, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_24)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %42*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_27)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %42*/
	/*   %49 = load i32* %48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_28)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %42*/
	/*   store i32 %50, i32* %48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_29)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %51*/
	/*   %53 = load i32* %52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_32)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %51*/
	/*   %60 = load i32* %59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_33)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %66*/
	/*   %68 = load i32* %67, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__66_36)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %77*/
	/*   store i32 %Hi.0, i32* %78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__77_40)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %79*/
	/*   store i32 %Lo.0, i32* %80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__79_43)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %81*/
	/*   %83 = load i32* %82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__81_46)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %81*/
	/*   store i32 %86, i32* %87, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__81_47)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %88*/
	/*   %90 = load i32* %89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_50)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %88*/
	/*   store i32 %93, i32* %94, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_51)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %95*/
	/*   %97 = load i32* %96, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__95_54)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %95*/
	/*   store i32 %100, i32* %101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__95_55)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %102*/
	/*   %104 = load i32* %103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__102_58)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %102*/
	/*   store i32 %105, i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__102_59)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %107*/
	/*   %109 = load i32* %108, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__107_62)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %107*/
	/*   store i32 %110, i32* %111, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__107_63)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %112*/
	/*   %114 = load i32* %113, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__112_66)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %112*/
	/*   store i32 %117, i32* %118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__112_67)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %119*/
	/*   %121 = load i32* %120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %119*/
	/*   store i32 %124, i32* %125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_71)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %126*/
	/*   %128 = load i32* %127, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_74)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %126*/
	/*   store i32 %132, i32* %133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_75)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %134*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__134_78)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %134*/
	/*   store i32 %140, i32* %141, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__134_79)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %142*/
	/*   %144 = load i32* %143, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__142_82)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %148*/
	/*   store i32 %21, i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__148_85)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %156*/
	/*   %158 = load i32* %157, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__156_89)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %156*/
	/*   store i32 %160, i32* %161, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__156_90)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %162*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__162_93)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %162*/
	/*   store i32 %166, i32* %167, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__162_94)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %168*/
	/*   %170 = load i32* %169, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__168_97)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %168*/
	/*   store i32 %172, i32* %173, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__168_98)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %174*/
	/*   %176 = load i32* %175, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__174_101)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %174*/
	/*   store i32 %178, i32* %179, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__174_102)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %180*/
	/*   %182 = load i32* %181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__180_105)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %180*/
	/*   store i32 %187, i32* %188, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__180_110)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %189*/
	/*   %191 = load i32* %190, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_113)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %198*/
	/*   store i32 %sext4, i32* %199, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__198_119)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %200*/
	/*   %202 = load i32* %201, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__200_122)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %209*/
	/*   %211 = load i32* %210, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__209_126)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %218*/
	/*   %220 = load i32* %219, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__218_130)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %225*/
	/*   %227 = load i32* %226, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_134)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %225*/
	/*   store i32 %230, i32* %231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_135)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %232*/
	/*   %234 = load i32* %233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__232_138)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %232*/
	/*   store i32 %237, i32* %238, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__232_139)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %.thread*/
	/*   store i32 0, i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread_141)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %240*/
	/*   store i32 0, i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__240_143)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
end
always @(*) begin
	main_0_reg_in_a = 1'd0;
	/* main: %2*/
	/*   store i32 0, i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_5)) begin
		main_0_reg_in_a = 32'd0;
	end
	/* main: %.preheader14*/
	/*   store i32 2147479548, i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_0_reg_in_a = 32'd2147479548;
	end
	/* main: %33*/
	/*   store i32 %41, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_24)) begin
		main_0_reg_in_a = main_33_41;
	end
	/* main: %42*/
	/*   store i32 %50, i32* %48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_29)) begin
		main_0_reg_in_a = main_42_50;
	end
	/* main: %77*/
	/*   store i32 %Hi.0, i32* %78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__77_40)) begin
		main_0_reg_in_a = main_16_Hi0_reg;
	end
	/* main: %79*/
	/*   store i32 %Lo.0, i32* %80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__79_43)) begin
		main_0_reg_in_a = main_16_Lo0_reg;
	end
	/* main: %81*/
	/*   store i32 %86, i32* %87, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__81_47)) begin
		main_0_reg_in_a = main_81_86;
	end
	/* main: %88*/
	/*   store i32 %93, i32* %94, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_51)) begin
		main_0_reg_in_a = main_88_93;
	end
	/* main: %95*/
	/*   store i32 %100, i32* %101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__95_55)) begin
		main_0_reg_in_a = main_95_100;
	end
	/* main: %102*/
	/*   store i32 %105, i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__102_59)) begin
		main_0_reg_in_a = main_102_105;
	end
	/* main: %107*/
	/*   store i32 %110, i32* %111, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__107_63)) begin
		main_0_reg_in_a = main_107_110;
	end
	/* main: %112*/
	/*   store i32 %117, i32* %118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__112_67)) begin
		main_0_reg_in_a = main_112_117;
	end
	/* main: %119*/
	/*   store i32 %124, i32* %125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_71)) begin
		main_0_reg_in_a = main_119_124;
	end
	/* main: %126*/
	/*   store i32 %132, i32* %133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_75)) begin
		main_0_reg_in_a = main_126_132;
	end
	/* main: %134*/
	/*   store i32 %140, i32* %141, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__134_79)) begin
		main_0_reg_in_a = main_134_140;
	end
	/* main: %148*/
	/*   store i32 %21, i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__148_85)) begin
		main_0_reg_in_a = main_16_21_reg;
	end
	/* main: %156*/
	/*   store i32 %160, i32* %161, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__156_90)) begin
		main_0_reg_in_a = main_156_160;
	end
	/* main: %162*/
	/*   store i32 %166, i32* %167, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__162_94)) begin
		main_0_reg_in_a = main_162_166;
	end
	/* main: %168*/
	/*   store i32 %172, i32* %173, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__168_98)) begin
		main_0_reg_in_a = main_168_172;
	end
	/* main: %174*/
	/*   store i32 %178, i32* %179, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__174_102)) begin
		main_0_reg_in_a = main_174_178;
	end
	/* main: %180*/
	/*   store i32 %187, i32* %188, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__180_110)) begin
		main_0_reg_in_a = main_180_187;
	end
	/* main: %198*/
	/*   store i32 %sext4, i32* %199, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__198_119)) begin
		main_0_reg_in_a = main_198_sext4_reg;
	end
	/* main: %225*/
	/*   store i32 %230, i32* %231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_135)) begin
		main_0_reg_in_a = main_225_230;
	end
	/* main: %232*/
	/*   store i32 %237, i32* %238, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__232_139)) begin
		main_0_reg_in_a = main_232_237;
	end
	/* main: %.thread*/
	/*   store i32 0, i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread_141)) begin
		main_0_reg_in_a = 32'd0;
	end
	/* main: %240*/
	/*   store i32 0, i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__240_143)) begin
		main_0_reg_in_a = 32'd0;
	end
end
always @(*) begin
	main_0_reg_address_b = 1'd0;
	/* main: %33*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_22)) begin
		main_0_reg_address_b = (main_33_36 >>> 3'd2);
	end
	/* main: %42*/
	/*   %46 = load i32* %45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_27)) begin
		main_0_reg_address_b = (main_42_45 >>> 3'd2);
	end
	/* main: %51*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_32)) begin
		main_0_reg_address_b = (main_51_55 >>> 3'd2);
	end
	/* main: %66*/
	/*   %71 = load i32* %70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__66_36)) begin
		main_0_reg_address_b = (main_66_70 >>> 3'd2);
	end
	/* main: %81*/
	/*   %85 = load i32* %84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__81_46)) begin
		main_0_reg_address_b = (main_81_84 >>> 3'd2);
	end
	/* main: %88*/
	/*   %92 = load i32* %91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_50)) begin
		main_0_reg_address_b = (main_88_91 >>> 3'd2);
	end
	/* main: %95*/
	/*   %99 = load i32* %98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__95_54)) begin
		main_0_reg_address_b = (main_95_98 >>> 3'd2);
	end
	/* main: %112*/
	/*   %116 = load i32* %115, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__112_66)) begin
		main_0_reg_address_b = (main_112_115 >>> 3'd2);
	end
	/* main: %119*/
	/*   %123 = load i32* %122, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_0_reg_address_b = (main_119_122 >>> 3'd2);
	end
	/* main: %126*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_74)) begin
		main_0_reg_address_b = (main_126_129 >>> 3'd2);
	end
	/* main: %134*/
	/*   %138 = load i32* %137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__134_78)) begin
		main_0_reg_address_b = (main_134_137 >>> 3'd2);
	end
	/* main: %189*/
	/*   %193 = load i32* %192, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_113)) begin
		main_0_reg_address_b = (main_189_192 >>> 3'd2);
	end
	/* main: %200*/
	/*   %204 = load i32* %203, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__200_122)) begin
		main_0_reg_address_b = (main_200_203 >>> 3'd2);
	end
	/* main: %209*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__209_126)) begin
		main_0_reg_address_b = (main_209_212 >>> 3'd2);
	end
end
always @(*) begin
	main_0_reg_write_enable_b = 1'd0;
	/* main: %33*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_22)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %42*/
	/*   %46 = load i32* %45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_27)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %51*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_32)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %66*/
	/*   %71 = load i32* %70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__66_36)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %81*/
	/*   %85 = load i32* %84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__81_46)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %88*/
	/*   %92 = load i32* %91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_50)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %95*/
	/*   %99 = load i32* %98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__95_54)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %112*/
	/*   %116 = load i32* %115, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__112_66)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %119*/
	/*   %123 = load i32* %122, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %126*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_74)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %134*/
	/*   %138 = load i32* %137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__134_78)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %189*/
	/*   %193 = load i32* %192, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_113)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %200*/
	/*   %204 = load i32* %203, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__200_122)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %209*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__209_126)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		legup_memset_4_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_2)) begin
		legup_memset_4_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		legup_memset_4_arg_m <= main_0_1;
		if (start == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_arg_m"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		legup_memset_4_arg_c1 <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_arg_c1"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		legup_memset_4_arg_n <= 32'd256;
		if (start == 1'b0 && ^(32'd256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_arg_n"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
		legup_memset_4_memory_controller_out_a = memory_controller_out_a;
end
always @(*) begin
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
		legup_memset_4_memory_controller_out_b = memory_controller_out_b;
end
always @(*) begin
	legup_memset_4_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	legup_memset_4_finish_final = legup_memset_4_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_1))) begin
		legup_memset_4_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_finish_reg"); $finish; end
	end
	if (legup_memset_4_finish) begin
		legup_memset_4_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_finish_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		legup_function_call = 1'd1;
	end
end
always @(*) begin
	/* main: %2*/
	/*   %4 = add nsw i32 %i.012, 1*/
	if ((cur_state == LEGUP_F_main_BB__2_4)) begin
		main_signed_add_32_0_op0 = main_2_i012_reg;
	end
	/* main: %2*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	else if ((cur_state == LEGUP_F_main_BB__2_5)) begin
		main_signed_add_32_0_op0 = main_2_gep_int_reg;
	end
	/* main: %.preheader14*/
	/*   %gep2 = add i32 %gep_int1, 116*/
	else if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_signed_add_32_0_op0 = main_preheader14_gep_int1;
	end
	/* main: %16*/
	/*   %21 = add nsw i32 %pc.0, 4*/
	else if ((cur_state == LEGUP_F_main_BB__16_17)) begin
		main_signed_add_32_0_op0 = main_16_pc0_reg;
	end
	/* main: %16*/
	/*   %gep23 = add i32 %gep_int21, %gep_array22*/
	else if ((cur_state == LEGUP_F_main_BB__16_18)) begin
		main_signed_add_32_0_op0 = main_16_gep_int21_reg;
	end
	/* main: %33*/
	/*   %gep26 = add i32 %gep_int24, %gep_array25*/
	else if ((cur_state == LEGUP_F_main_BB__33_22)) begin
		main_signed_add_32_0_op0 = main_33_gep_int24_reg;
	end
	/* main: %33*/
	/*   %38 = add nsw i32 %37, %35*/
	else if ((cur_state == LEGUP_F_main_BB__33_23)) begin
		main_signed_add_32_0_op0 = main_33_37;
	end
	/* main: %33*/
	/*   %41 = add nsw i32 %38, %40*/
	else if ((cur_state == LEGUP_F_main_BB__33_24)) begin
		main_signed_add_32_0_op0 = main_33_38_reg;
	end
	/* main: %42*/
	/*   %gep35 = add i32 %gep_int33, %gep_array34*/
	else if ((cur_state == LEGUP_F_main_BB__42_27)) begin
		main_signed_add_32_0_op0 = main_42_gep_int33_reg;
	end
	/* main: %51*/
	/*   %gep44 = add i32 %gep_int42, %gep_array43*/
	else if ((cur_state == LEGUP_F_main_BB__51_32)) begin
		main_signed_add_32_0_op0 = main_51_gep_int42_reg;
	end
	/* main: %66*/
	/*   %gep53 = add i32 %gep_int51, %gep_array52*/
	else if ((cur_state == LEGUP_F_main_BB__66_36)) begin
		main_signed_add_32_0_op0 = main_66_gep_int51_reg;
	end
	/* main: %77*/
	/*   %gep59 = add i32 %gep_int57, %gep_array58*/
	else if ((cur_state == LEGUP_F_main_BB__77_40)) begin
		main_signed_add_32_0_op0 = main_77_gep_int57_reg;
	end
	/* main: %79*/
	/*   %gep62 = add i32 %gep_int60, %gep_array61*/
	else if ((cur_state == LEGUP_F_main_BB__79_43)) begin
		main_signed_add_32_0_op0 = main_79_gep_int60_reg;
	end
	/* main: %81*/
	/*   %gep65 = add i32 %gep_int63, %gep_array64*/
	else if ((cur_state == LEGUP_F_main_BB__81_46)) begin
		main_signed_add_32_0_op0 = main_81_gep_int63_reg;
	end
	/* main: %88*/
	/*   %gep74 = add i32 %gep_int72, %gep_array73*/
	else if ((cur_state == LEGUP_F_main_BB__88_50)) begin
		main_signed_add_32_0_op0 = main_88_gep_int72_reg;
	end
	/* main: %95*/
	/*   %gep83 = add i32 %gep_int81, %gep_array82*/
	else if ((cur_state == LEGUP_F_main_BB__95_54)) begin
		main_signed_add_32_0_op0 = main_95_gep_int81_reg;
	end
	/* main: %102*/
	/*   %gep92 = add i32 %gep_int90, %gep_array91*/
	else if ((cur_state == LEGUP_F_main_BB__102_58)) begin
		main_signed_add_32_0_op0 = main_102_gep_int90_reg;
	end
	/* main: %107*/
	/*   %gep98 = add i32 %gep_int96, %gep_array97*/
	else if ((cur_state == LEGUP_F_main_BB__107_62)) begin
		main_signed_add_32_0_op0 = main_107_gep_int96_reg;
	end
	/* main: %112*/
	/*   %gep104 = add i32 %gep_int102, %gep_array103*/
	else if ((cur_state == LEGUP_F_main_BB__112_66)) begin
		main_signed_add_32_0_op0 = main_112_gep_int102_reg;
	end
	/* main: %119*/
	/*   %gep113 = add i32 %gep_int111, %gep_array112*/
	else if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_signed_add_32_0_op0 = main_119_gep_int111_reg;
	end
	/* main: %126*/
	/*   %gep122 = add i32 %gep_int120, %gep_array121*/
	else if ((cur_state == LEGUP_F_main_BB__126_74)) begin
		main_signed_add_32_0_op0 = main_126_gep_int120_reg;
	end
	/* main: %134*/
	/*   %gep131 = add i32 %gep_int129, %gep_array130*/
	else if ((cur_state == LEGUP_F_main_BB__134_78)) begin
		main_signed_add_32_0_op0 = main_134_gep_int129_reg;
	end
	/* main: %142*/
	/*   %gep140 = add i32 %gep_int138, %gep_array139*/
	else if ((cur_state == LEGUP_F_main_BB__142_82)) begin
		main_signed_add_32_0_op0 = main_142_gep_int138_reg;
	end
	/* main: %156*/
	/*   %gep143 = add i32 %gep_int141, %gep_array142*/
	else if ((cur_state == LEGUP_F_main_BB__156_89)) begin
		main_signed_add_32_0_op0 = main_156_gep_int141_reg;
	end
	/* main: %156*/
	/*   %160 = add nsw i32 %158, %159*/
	else if ((cur_state == LEGUP_F_main_BB__156_90)) begin
		main_signed_add_32_0_op0 = main_156_158;
	end
	/* main: %162*/
	/*   %gep149 = add i32 %gep_int147, %gep_array148*/
	else if ((cur_state == LEGUP_F_main_BB__162_93)) begin
		main_signed_add_32_0_op0 = main_162_gep_int147_reg;
	end
	/* main: %168*/
	/*   %gep155 = add i32 %gep_int153, %gep_array154*/
	else if ((cur_state == LEGUP_F_main_BB__168_97)) begin
		main_signed_add_32_0_op0 = main_168_gep_int153_reg;
	end
	/* main: %174*/
	/*   %gep161 = add i32 %gep_int159, %gep_array160*/
	else if ((cur_state == LEGUP_F_main_BB__174_101)) begin
		main_signed_add_32_0_op0 = main_174_gep_int159_reg;
	end
	/* main: %180*/
	/*   %gep167 = add i32 %gep_int165, %gep_array166*/
	else if ((cur_state == LEGUP_F_main_BB__180_105)) begin
		main_signed_add_32_0_op0 = main_180_gep_int165_reg;
	end
	/* main: %180*/
	/*   %183 = add nsw i32 %182, %20*/
	else if ((cur_state == LEGUP_F_main_BB__180_106)) begin
		main_signed_add_32_0_op0 = main_180_182;
	end
	/* main: %180*/
	/*   %gep170 = add i32 %gep_int168, %gep_array169*/
	else if ((cur_state == LEGUP_F_main_BB__180_108)) begin
		main_signed_add_32_0_op0 = main_180_gep_int168_reg;
	end
	/* main: %189*/
	/*   %gep176 = add i32 %gep_int174, %gep_array175*/
	else if ((cur_state == LEGUP_F_main_BB__189_113)) begin
		main_signed_add_32_0_op0 = main_189_gep_int174_reg;
	end
	/* main: %189*/
	/*   %194 = add nsw i32 %193, %20*/
	else if ((cur_state == LEGUP_F_main_BB__189_114)) begin
		main_signed_add_32_0_op0 = main_189_193;
	end
	/* main: %189*/
	/*   %gep182 = add i32 %gep_int180, %gep_array181*/
	else if ((cur_state == LEGUP_F_main_BB__189_116)) begin
		main_signed_add_32_0_op0 = main_189_gep_int180_reg;
	end
	/* main: %198*/
	/*   %gep185 = add i32 %gep_int183, %gep_array184*/
	else if ((cur_state == LEGUP_F_main_BB__198_119)) begin
		main_signed_add_32_0_op0 = main_198_gep_int183_reg;
	end
	/* main: %200*/
	/*   %gep188 = add i32 %gep_int186, %gep_array187*/
	else if ((cur_state == LEGUP_F_main_BB__200_122)) begin
		main_signed_add_32_0_op0 = main_200_gep_int186_reg;
	end
	/* main: %206*/
	/*   %208 = add nsw i32 %207, %pc.0*/
	else if ((cur_state == LEGUP_F_main_BB__206_124)) begin
		main_signed_add_32_0_op0 = main_206_207;
	end
	/* main: %209*/
	/*   %gep194 = add i32 %gep_int192, %gep_array193*/
	else if ((cur_state == LEGUP_F_main_BB__209_126)) begin
		main_signed_add_32_0_op0 = main_209_gep_int192_reg;
	end
	/* main: %215*/
	/*   %217 = add nsw i32 %216, %pc.0*/
	else if ((cur_state == LEGUP_F_main_BB__215_128)) begin
		main_signed_add_32_0_op0 = main_215_216;
	end
	/* main: %218*/
	/*   %gep200 = add i32 %gep_int198, %gep_array199*/
	else if ((cur_state == LEGUP_F_main_BB__218_130)) begin
		main_signed_add_32_0_op0 = main_218_gep_int198_reg;
	end
	/* main: %222*/
	/*   %224 = add nsw i32 %223, %pc.0*/
	else if ((cur_state == LEGUP_F_main_BB__222_132)) begin
		main_signed_add_32_0_op0 = main_222_223;
	end
	/* main: %225*/
	/*   %gep203 = add i32 %gep_int201, %gep_array202*/
	else if ((cur_state == LEGUP_F_main_BB__225_134)) begin
		main_signed_add_32_0_op0 = main_225_gep_int201_reg;
	end
	/* main: %232*/
	/*   %gep209 = add i32 %gep_int207, %gep_array208*/
	else if ((cur_state == LEGUP_F_main_BB__232_138)) begin
		main_signed_add_32_0_op0 = main_232_gep_int207_reg;
	end
	/* main: %.thread*/
	/*   %239 = add nsw i32 %n_inst.0.lcssa, 1*/
	else if ((cur_state == LEGUP_F_main_BB_thread_141)) begin
		main_signed_add_32_0_op0 = main_thread_n_inst0lcssa_reg;
	end
	/* main: %240*/
	/*   %241 = add nsw i32 %n_inst.0, 1*/
	else if ((cur_state == LEGUP_F_main_BB__240_143)) begin
		main_signed_add_32_0_op0 = main_16_n_inst0_reg;
	end
	/* main: %.loopexit*/
	/*   %249 = add nsw i32 %248, %245*/
	else if ((cur_state == LEGUP_F_main_BB_loopexit_147)) begin
		main_signed_add_32_0_op0 = main_loopexit_248;
	end
	/* main: %.loopexit*/
	/*   %257 = add nsw i32 %256, %253*/
	else if ((cur_state == LEGUP_F_main_BB_loopexit_148)) begin
		main_signed_add_32_0_op0 = main_loopexit_256;
	end
	/* main: %.loopexit*/
	/*   %265 = add nsw i32 %264, %261*/
	else if ((cur_state == LEGUP_F_main_BB_loopexit_149)) begin
		main_signed_add_32_0_op0 = main_loopexit_264;
	end
	/* main: %.loopexit*/
	/*   %273 = add nsw i32 %272, %269*/
	else /* if ((cur_state == LEGUP_F_main_BB_loopexit_150)) */ begin
		main_signed_add_32_0_op0 = main_loopexit_272;
	end
end
always @(*) begin
	/* main: %2*/
	/*   %4 = add nsw i32 %i.012, 1*/
	if ((cur_state == LEGUP_F_main_BB__2_4)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %2*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	else if ((cur_state == LEGUP_F_main_BB__2_5)) begin
		main_signed_add_32_0_op1 = main_2_gep_array_reg;
	end
	/* main: %.preheader14*/
	/*   %gep2 = add i32 %gep_int1, 116*/
	else if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_signed_add_32_0_op1 = 32'd116;
	end
	/* main: %16*/
	/*   %21 = add nsw i32 %pc.0, 4*/
	else if ((cur_state == LEGUP_F_main_BB__16_17)) begin
		main_signed_add_32_0_op1 = 32'd4;
	end
	/* main: %16*/
	/*   %gep23 = add i32 %gep_int21, %gep_array22*/
	else if ((cur_state == LEGUP_F_main_BB__16_18)) begin
		main_signed_add_32_0_op1 = main_16_gep_array22_reg;
	end
	/* main: %33*/
	/*   %gep26 = add i32 %gep_int24, %gep_array25*/
	else if ((cur_state == LEGUP_F_main_BB__33_22)) begin
		main_signed_add_32_0_op1 = main_33_gep_array25_reg;
	end
	/* main: %33*/
	/*   %38 = add nsw i32 %37, %35*/
	else if ((cur_state == LEGUP_F_main_BB__33_23)) begin
		main_signed_add_32_0_op1 = main_33_35;
	end
	/* main: %33*/
	/*   %41 = add nsw i32 %38, %40*/
	else if ((cur_state == LEGUP_F_main_BB__33_24)) begin
		main_signed_add_32_0_op1 = main_33_40;
	end
	/* main: %42*/
	/*   %gep35 = add i32 %gep_int33, %gep_array34*/
	else if ((cur_state == LEGUP_F_main_BB__42_27)) begin
		main_signed_add_32_0_op1 = main_42_gep_array34_reg;
	end
	/* main: %51*/
	/*   %gep44 = add i32 %gep_int42, %gep_array43*/
	else if ((cur_state == LEGUP_F_main_BB__51_32)) begin
		main_signed_add_32_0_op1 = main_51_gep_array43_reg;
	end
	/* main: %66*/
	/*   %gep53 = add i32 %gep_int51, %gep_array52*/
	else if ((cur_state == LEGUP_F_main_BB__66_36)) begin
		main_signed_add_32_0_op1 = main_66_gep_array52_reg;
	end
	/* main: %77*/
	/*   %gep59 = add i32 %gep_int57, %gep_array58*/
	else if ((cur_state == LEGUP_F_main_BB__77_40)) begin
		main_signed_add_32_0_op1 = main_77_gep_array58_reg;
	end
	/* main: %79*/
	/*   %gep62 = add i32 %gep_int60, %gep_array61*/
	else if ((cur_state == LEGUP_F_main_BB__79_43)) begin
		main_signed_add_32_0_op1 = main_79_gep_array61_reg;
	end
	/* main: %81*/
	/*   %gep65 = add i32 %gep_int63, %gep_array64*/
	else if ((cur_state == LEGUP_F_main_BB__81_46)) begin
		main_signed_add_32_0_op1 = main_81_gep_array64_reg;
	end
	/* main: %88*/
	/*   %gep74 = add i32 %gep_int72, %gep_array73*/
	else if ((cur_state == LEGUP_F_main_BB__88_50)) begin
		main_signed_add_32_0_op1 = main_88_gep_array73_reg;
	end
	/* main: %95*/
	/*   %gep83 = add i32 %gep_int81, %gep_array82*/
	else if ((cur_state == LEGUP_F_main_BB__95_54)) begin
		main_signed_add_32_0_op1 = main_95_gep_array82_reg;
	end
	/* main: %102*/
	/*   %gep92 = add i32 %gep_int90, %gep_array91*/
	else if ((cur_state == LEGUP_F_main_BB__102_58)) begin
		main_signed_add_32_0_op1 = main_102_gep_array91_reg;
	end
	/* main: %107*/
	/*   %gep98 = add i32 %gep_int96, %gep_array97*/
	else if ((cur_state == LEGUP_F_main_BB__107_62)) begin
		main_signed_add_32_0_op1 = main_107_gep_array97_reg;
	end
	/* main: %112*/
	/*   %gep104 = add i32 %gep_int102, %gep_array103*/
	else if ((cur_state == LEGUP_F_main_BB__112_66)) begin
		main_signed_add_32_0_op1 = main_112_gep_array103_reg;
	end
	/* main: %119*/
	/*   %gep113 = add i32 %gep_int111, %gep_array112*/
	else if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_signed_add_32_0_op1 = main_119_gep_array112_reg;
	end
	/* main: %126*/
	/*   %gep122 = add i32 %gep_int120, %gep_array121*/
	else if ((cur_state == LEGUP_F_main_BB__126_74)) begin
		main_signed_add_32_0_op1 = main_126_gep_array121_reg;
	end
	/* main: %134*/
	/*   %gep131 = add i32 %gep_int129, %gep_array130*/
	else if ((cur_state == LEGUP_F_main_BB__134_78)) begin
		main_signed_add_32_0_op1 = main_134_gep_array130_reg;
	end
	/* main: %142*/
	/*   %gep140 = add i32 %gep_int138, %gep_array139*/
	else if ((cur_state == LEGUP_F_main_BB__142_82)) begin
		main_signed_add_32_0_op1 = main_142_gep_array139_reg;
	end
	/* main: %156*/
	/*   %gep143 = add i32 %gep_int141, %gep_array142*/
	else if ((cur_state == LEGUP_F_main_BB__156_89)) begin
		main_signed_add_32_0_op1 = main_156_gep_array142_reg;
	end
	/* main: %156*/
	/*   %160 = add nsw i32 %158, %159*/
	else if ((cur_state == LEGUP_F_main_BB__156_90)) begin
		main_signed_add_32_0_op1 = main_156_159_reg;
	end
	/* main: %162*/
	/*   %gep149 = add i32 %gep_int147, %gep_array148*/
	else if ((cur_state == LEGUP_F_main_BB__162_93)) begin
		main_signed_add_32_0_op1 = main_162_gep_array148_reg;
	end
	/* main: %168*/
	/*   %gep155 = add i32 %gep_int153, %gep_array154*/
	else if ((cur_state == LEGUP_F_main_BB__168_97)) begin
		main_signed_add_32_0_op1 = main_168_gep_array154_reg;
	end
	/* main: %174*/
	/*   %gep161 = add i32 %gep_int159, %gep_array160*/
	else if ((cur_state == LEGUP_F_main_BB__174_101)) begin
		main_signed_add_32_0_op1 = main_174_gep_array160_reg;
	end
	/* main: %180*/
	/*   %gep167 = add i32 %gep_int165, %gep_array166*/
	else if ((cur_state == LEGUP_F_main_BB__180_105)) begin
		main_signed_add_32_0_op1 = main_180_gep_array166_reg;
	end
	/* main: %180*/
	/*   %183 = add nsw i32 %182, %20*/
	else if ((cur_state == LEGUP_F_main_BB__180_106)) begin
		main_signed_add_32_0_op1 = main_16_20_reg;
	end
	/* main: %180*/
	/*   %gep170 = add i32 %gep_int168, %gep_array169*/
	else if ((cur_state == LEGUP_F_main_BB__180_108)) begin
		main_signed_add_32_0_op1 = main_180_gep_array169_reg;
	end
	/* main: %189*/
	/*   %gep176 = add i32 %gep_int174, %gep_array175*/
	else if ((cur_state == LEGUP_F_main_BB__189_113)) begin
		main_signed_add_32_0_op1 = main_189_gep_array175_reg;
	end
	/* main: %189*/
	/*   %194 = add nsw i32 %193, %20*/
	else if ((cur_state == LEGUP_F_main_BB__189_114)) begin
		main_signed_add_32_0_op1 = main_16_20_reg;
	end
	/* main: %189*/
	/*   %gep182 = add i32 %gep_int180, %gep_array181*/
	else if ((cur_state == LEGUP_F_main_BB__189_116)) begin
		main_signed_add_32_0_op1 = main_189_gep_array181_reg;
	end
	/* main: %198*/
	/*   %gep185 = add i32 %gep_int183, %gep_array184*/
	else if ((cur_state == LEGUP_F_main_BB__198_119)) begin
		main_signed_add_32_0_op1 = main_198_gep_array184_reg;
	end
	/* main: %200*/
	/*   %gep188 = add i32 %gep_int186, %gep_array187*/
	else if ((cur_state == LEGUP_F_main_BB__200_122)) begin
		main_signed_add_32_0_op1 = main_200_gep_array187_reg;
	end
	/* main: %206*/
	/*   %208 = add nsw i32 %207, %pc.0*/
	else if ((cur_state == LEGUP_F_main_BB__206_124)) begin
		main_signed_add_32_0_op1 = main_16_pc0_reg;
	end
	/* main: %209*/
	/*   %gep194 = add i32 %gep_int192, %gep_array193*/
	else if ((cur_state == LEGUP_F_main_BB__209_126)) begin
		main_signed_add_32_0_op1 = main_209_gep_array193_reg;
	end
	/* main: %215*/
	/*   %217 = add nsw i32 %216, %pc.0*/
	else if ((cur_state == LEGUP_F_main_BB__215_128)) begin
		main_signed_add_32_0_op1 = main_16_pc0_reg;
	end
	/* main: %218*/
	/*   %gep200 = add i32 %gep_int198, %gep_array199*/
	else if ((cur_state == LEGUP_F_main_BB__218_130)) begin
		main_signed_add_32_0_op1 = main_218_gep_array199_reg;
	end
	/* main: %222*/
	/*   %224 = add nsw i32 %223, %pc.0*/
	else if ((cur_state == LEGUP_F_main_BB__222_132)) begin
		main_signed_add_32_0_op1 = main_16_pc0_reg;
	end
	/* main: %225*/
	/*   %gep203 = add i32 %gep_int201, %gep_array202*/
	else if ((cur_state == LEGUP_F_main_BB__225_134)) begin
		main_signed_add_32_0_op1 = main_225_gep_array202_reg;
	end
	/* main: %232*/
	/*   %gep209 = add i32 %gep_int207, %gep_array208*/
	else if ((cur_state == LEGUP_F_main_BB__232_138)) begin
		main_signed_add_32_0_op1 = main_232_gep_array208_reg;
	end
	/* main: %.thread*/
	/*   %239 = add nsw i32 %n_inst.0.lcssa, 1*/
	else if ((cur_state == LEGUP_F_main_BB_thread_141)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %240*/
	/*   %241 = add nsw i32 %n_inst.0, 1*/
	else if ((cur_state == LEGUP_F_main_BB__240_143)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %.loopexit*/
	/*   %249 = add nsw i32 %248, %245*/
	else if ((cur_state == LEGUP_F_main_BB_loopexit_147)) begin
		main_signed_add_32_0_op1 = main_loopexit_245_reg;
	end
	/* main: %.loopexit*/
	/*   %257 = add nsw i32 %256, %253*/
	else if ((cur_state == LEGUP_F_main_BB_loopexit_148)) begin
		main_signed_add_32_0_op1 = main_loopexit_253_reg;
	end
	/* main: %.loopexit*/
	/*   %265 = add nsw i32 %264, %261*/
	else if ((cur_state == LEGUP_F_main_BB_loopexit_149)) begin
		main_signed_add_32_0_op1 = main_loopexit_261_reg;
	end
	/* main: %.loopexit*/
	/*   %273 = add nsw i32 %272, %269*/
	else /* if ((cur_state == LEGUP_F_main_BB_loopexit_150)) */ begin
		main_signed_add_32_0_op1 = main_loopexit_269_reg;
	end
end
always @(*) begin
	main_signed_add_32_0 = (main_signed_add_32_0_op0 + main_signed_add_32_0_op1);
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep7 = add i32 %gep_int6, 8*/
		main_signed_add_32_3_op0 = main_preheader14_gep_int6;
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep7 = add i32 %gep_int6, 8*/
if (reset) begin main_signed_add_32_3_op1 = 0; end
		main_signed_add_32_3_op1 = 32'd8;
end
always @(*) begin
	main_signed_add_32_3 = (main_signed_add_32_3_op0 + main_signed_add_32_3_op1);
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep9 = add i32 %gep_int8, 12*/
		main_signed_add_32_4_op0 = main_preheader14_gep_int8;
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep9 = add i32 %gep_int8, 12*/
if (reset) begin main_signed_add_32_4_op1 = 0; end
		main_signed_add_32_4_op1 = 32'd12;
end
always @(*) begin
	main_signed_add_32_4 = (main_signed_add_32_4_op0 + main_signed_add_32_4_op1);
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep11 = add i32 %gep_int10, 16*/
		main_signed_add_32_5_op0 = main_preheader14_gep_int10;
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep11 = add i32 %gep_int10, 16*/
if (reset) begin main_signed_add_32_5_op1 = 0; end
		main_signed_add_32_5_op1 = 32'd16;
end
always @(*) begin
	main_signed_add_32_5 = (main_signed_add_32_5_op0 + main_signed_add_32_5_op1);
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep13 = add i32 %gep_int12, 20*/
		main_signed_add_32_6_op0 = main_preheader14_gep_int12;
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep13 = add i32 %gep_int12, 20*/
if (reset) begin main_signed_add_32_6_op1 = 0; end
		main_signed_add_32_6_op1 = 32'd20;
end
always @(*) begin
	main_signed_add_32_6 = (main_signed_add_32_6_op0 + main_signed_add_32_6_op1);
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep5 = add i32 %gep_int4, 4*/
		main_signed_add_32_8_op0 = main_preheader14_gep_int4;
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep5 = add i32 %gep_int4, 4*/
if (reset) begin main_signed_add_32_8_op1 = 0; end
		main_signed_add_32_8_op1 = 32'd4;
end
always @(*) begin
	main_signed_add_32_8 = (main_signed_add_32_8_op0 + main_signed_add_32_8_op1);
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep20 = add i32 %gep_int19, 124*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_signed_add_32_1_op0 = main_preheader14_gep_int19;
	end
	/* main: %33*/
	/*   %gep29 = add i32 %gep_int27, %gep_array28*/
	else if ((cur_state == LEGUP_F_main_BB__33_22)) begin
		main_signed_add_32_1_op0 = main_33_gep_int27_reg;
	end
	/* main: %42*/
	/*   %gep38 = add i32 %gep_int36, %gep_array37*/
	else if ((cur_state == LEGUP_F_main_BB__42_27)) begin
		main_signed_add_32_1_op0 = main_42_gep_int36_reg;
	end
	/* main: %51*/
	/*   %gep47 = add i32 %gep_int45, %gep_array46*/
	else if ((cur_state == LEGUP_F_main_BB__51_32)) begin
		main_signed_add_32_1_op0 = main_51_gep_int45_reg;
	end
	/* main: %66*/
	/*   %gep56 = add i32 %gep_int54, %gep_array55*/
	else if ((cur_state == LEGUP_F_main_BB__66_36)) begin
		main_signed_add_32_1_op0 = main_66_gep_int54_reg;
	end
	/* main: %81*/
	/*   %gep68 = add i32 %gep_int66, %gep_array67*/
	else if ((cur_state == LEGUP_F_main_BB__81_46)) begin
		main_signed_add_32_1_op0 = main_81_gep_int66_reg;
	end
	/* main: %88*/
	/*   %gep77 = add i32 %gep_int75, %gep_array76*/
	else if ((cur_state == LEGUP_F_main_BB__88_50)) begin
		main_signed_add_32_1_op0 = main_88_gep_int75_reg;
	end
	/* main: %95*/
	/*   %gep86 = add i32 %gep_int84, %gep_array85*/
	else if ((cur_state == LEGUP_F_main_BB__95_54)) begin
		main_signed_add_32_1_op0 = main_95_gep_int84_reg;
	end
	/* main: %102*/
	/*   %gep95 = add i32 %gep_int93, %gep_array94*/
	else if ((cur_state == LEGUP_F_main_BB__102_58)) begin
		main_signed_add_32_1_op0 = main_102_gep_int93_reg;
	end
	/* main: %107*/
	/*   %gep101 = add i32 %gep_int99, %gep_array100*/
	else if ((cur_state == LEGUP_F_main_BB__107_62)) begin
		main_signed_add_32_1_op0 = main_107_gep_int99_reg;
	end
	/* main: %112*/
	/*   %gep107 = add i32 %gep_int105, %gep_array106*/
	else if ((cur_state == LEGUP_F_main_BB__112_66)) begin
		main_signed_add_32_1_op0 = main_112_gep_int105_reg;
	end
	/* main: %119*/
	/*   %gep116 = add i32 %gep_int114, %gep_array115*/
	else if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_signed_add_32_1_op0 = main_119_gep_int114_reg;
	end
	/* main: %126*/
	/*   %gep125 = add i32 %gep_int123, %gep_array124*/
	else if ((cur_state == LEGUP_F_main_BB__126_74)) begin
		main_signed_add_32_1_op0 = main_126_gep_int123_reg;
	end
	/* main: %134*/
	/*   %gep134 = add i32 %gep_int132, %gep_array133*/
	else if ((cur_state == LEGUP_F_main_BB__134_78)) begin
		main_signed_add_32_1_op0 = main_134_gep_int132_reg;
	end
	/* main: %156*/
	/*   %gep146 = add i32 %gep_int144, %gep_array145*/
	else if ((cur_state == LEGUP_F_main_BB__156_89)) begin
		main_signed_add_32_1_op0 = main_156_gep_int144_reg;
	end
	/* main: %162*/
	/*   %gep152 = add i32 %gep_int150, %gep_array151*/
	else if ((cur_state == LEGUP_F_main_BB__162_93)) begin
		main_signed_add_32_1_op0 = main_162_gep_int150_reg;
	end
	/* main: %168*/
	/*   %gep158 = add i32 %gep_int156, %gep_array157*/
	else if ((cur_state == LEGUP_F_main_BB__168_97)) begin
		main_signed_add_32_1_op0 = main_168_gep_int156_reg;
	end
	/* main: %174*/
	/*   %gep164 = add i32 %gep_int162, %gep_array163*/
	else if ((cur_state == LEGUP_F_main_BB__174_101)) begin
		main_signed_add_32_1_op0 = main_174_gep_int162_reg;
	end
	/* main: %180*/
	/*   %gep173 = add i32 %gep_int171, %gep_array172*/
	else if ((cur_state == LEGUP_F_main_BB__180_105)) begin
		main_signed_add_32_1_op0 = main_180_gep_int171_reg;
	end
	/* main: %189*/
	/*   %gep179 = add i32 %gep_int177, %gep_array178*/
	else if ((cur_state == LEGUP_F_main_BB__189_113)) begin
		main_signed_add_32_1_op0 = main_189_gep_int177_reg;
	end
	/* main: %200*/
	/*   %gep191 = add i32 %gep_int189, %gep_array190*/
	else if ((cur_state == LEGUP_F_main_BB__200_122)) begin
		main_signed_add_32_1_op0 = main_200_gep_int189_reg;
	end
	/* main: %209*/
	/*   %gep197 = add i32 %gep_int195, %gep_array196*/
	else if ((cur_state == LEGUP_F_main_BB__209_126)) begin
		main_signed_add_32_1_op0 = main_209_gep_int195_reg;
	end
	/* main: %225*/
	/*   %gep206 = add i32 %gep_int204, %gep_array205*/
	else if ((cur_state == LEGUP_F_main_BB__225_134)) begin
		main_signed_add_32_1_op0 = main_225_gep_int204_reg;
	end
	/* main: %232*/
	/*   %gep212 = add i32 %gep_int210, %gep_array211*/
	else if ((cur_state == LEGUP_F_main_BB__232_138)) begin
		main_signed_add_32_1_op0 = main_232_gep_int210_reg;
	end
	/* main: %.loopexit*/
	/*   %253 = add nsw i32 %252, %249*/
	else if ((cur_state == LEGUP_F_main_BB_loopexit_147)) begin
		main_signed_add_32_1_op0 = main_loopexit_252;
	end
	/* main: %.loopexit*/
	/*   %261 = add nsw i32 %260, %257*/
	else if ((cur_state == LEGUP_F_main_BB_loopexit_148)) begin
		main_signed_add_32_1_op0 = main_loopexit_260;
	end
	/* main: %.loopexit*/
	/*   %269 = add nsw i32 %268, %265*/
	else if ((cur_state == LEGUP_F_main_BB_loopexit_149)) begin
		main_signed_add_32_1_op0 = main_loopexit_268;
	end
	/* main: %.loopexit*/
	/*   %277 = add nsw i32 %276, %273*/
	else /* if ((cur_state == LEGUP_F_main_BB_loopexit_150)) */ begin
		main_signed_add_32_1_op0 = main_loopexit_276;
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep20 = add i32 %gep_int19, 124*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_signed_add_32_1_op1 = 32'd124;
	end
	/* main: %33*/
	/*   %gep29 = add i32 %gep_int27, %gep_array28*/
	else if ((cur_state == LEGUP_F_main_BB__33_22)) begin
		main_signed_add_32_1_op1 = main_33_gep_array28_reg;
	end
	/* main: %42*/
	/*   %gep38 = add i32 %gep_int36, %gep_array37*/
	else if ((cur_state == LEGUP_F_main_BB__42_27)) begin
		main_signed_add_32_1_op1 = main_42_gep_array37_reg;
	end
	/* main: %51*/
	/*   %gep47 = add i32 %gep_int45, %gep_array46*/
	else if ((cur_state == LEGUP_F_main_BB__51_32)) begin
		main_signed_add_32_1_op1 = main_51_gep_array46_reg;
	end
	/* main: %66*/
	/*   %gep56 = add i32 %gep_int54, %gep_array55*/
	else if ((cur_state == LEGUP_F_main_BB__66_36)) begin
		main_signed_add_32_1_op1 = main_66_gep_array55_reg;
	end
	/* main: %81*/
	/*   %gep68 = add i32 %gep_int66, %gep_array67*/
	else if ((cur_state == LEGUP_F_main_BB__81_46)) begin
		main_signed_add_32_1_op1 = main_81_gep_array67_reg;
	end
	/* main: %88*/
	/*   %gep77 = add i32 %gep_int75, %gep_array76*/
	else if ((cur_state == LEGUP_F_main_BB__88_50)) begin
		main_signed_add_32_1_op1 = main_88_gep_array76_reg;
	end
	/* main: %95*/
	/*   %gep86 = add i32 %gep_int84, %gep_array85*/
	else if ((cur_state == LEGUP_F_main_BB__95_54)) begin
		main_signed_add_32_1_op1 = main_95_gep_array85_reg;
	end
	/* main: %102*/
	/*   %gep95 = add i32 %gep_int93, %gep_array94*/
	else if ((cur_state == LEGUP_F_main_BB__102_58)) begin
		main_signed_add_32_1_op1 = main_102_gep_array94_reg;
	end
	/* main: %107*/
	/*   %gep101 = add i32 %gep_int99, %gep_array100*/
	else if ((cur_state == LEGUP_F_main_BB__107_62)) begin
		main_signed_add_32_1_op1 = main_107_gep_array100_reg;
	end
	/* main: %112*/
	/*   %gep107 = add i32 %gep_int105, %gep_array106*/
	else if ((cur_state == LEGUP_F_main_BB__112_66)) begin
		main_signed_add_32_1_op1 = main_112_gep_array106_reg;
	end
	/* main: %119*/
	/*   %gep116 = add i32 %gep_int114, %gep_array115*/
	else if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_signed_add_32_1_op1 = main_119_gep_array115_reg;
	end
	/* main: %126*/
	/*   %gep125 = add i32 %gep_int123, %gep_array124*/
	else if ((cur_state == LEGUP_F_main_BB__126_74)) begin
		main_signed_add_32_1_op1 = main_126_gep_array124_reg;
	end
	/* main: %134*/
	/*   %gep134 = add i32 %gep_int132, %gep_array133*/
	else if ((cur_state == LEGUP_F_main_BB__134_78)) begin
		main_signed_add_32_1_op1 = main_134_gep_array133_reg;
	end
	/* main: %156*/
	/*   %gep146 = add i32 %gep_int144, %gep_array145*/
	else if ((cur_state == LEGUP_F_main_BB__156_89)) begin
		main_signed_add_32_1_op1 = main_156_gep_array145_reg;
	end
	/* main: %162*/
	/*   %gep152 = add i32 %gep_int150, %gep_array151*/
	else if ((cur_state == LEGUP_F_main_BB__162_93)) begin
		main_signed_add_32_1_op1 = main_162_gep_array151_reg;
	end
	/* main: %168*/
	/*   %gep158 = add i32 %gep_int156, %gep_array157*/
	else if ((cur_state == LEGUP_F_main_BB__168_97)) begin
		main_signed_add_32_1_op1 = main_168_gep_array157_reg;
	end
	/* main: %174*/
	/*   %gep164 = add i32 %gep_int162, %gep_array163*/
	else if ((cur_state == LEGUP_F_main_BB__174_101)) begin
		main_signed_add_32_1_op1 = main_174_gep_array163_reg;
	end
	/* main: %180*/
	/*   %gep173 = add i32 %gep_int171, %gep_array172*/
	else if ((cur_state == LEGUP_F_main_BB__180_105)) begin
		main_signed_add_32_1_op1 = main_180_gep_array172_reg;
	end
	/* main: %189*/
	/*   %gep179 = add i32 %gep_int177, %gep_array178*/
	else if ((cur_state == LEGUP_F_main_BB__189_113)) begin
		main_signed_add_32_1_op1 = main_189_gep_array178_reg;
	end
	/* main: %200*/
	/*   %gep191 = add i32 %gep_int189, %gep_array190*/
	else if ((cur_state == LEGUP_F_main_BB__200_122)) begin
		main_signed_add_32_1_op1 = main_200_gep_array190_reg;
	end
	/* main: %209*/
	/*   %gep197 = add i32 %gep_int195, %gep_array196*/
	else if ((cur_state == LEGUP_F_main_BB__209_126)) begin
		main_signed_add_32_1_op1 = main_209_gep_array196_reg;
	end
	/* main: %225*/
	/*   %gep206 = add i32 %gep_int204, %gep_array205*/
	else if ((cur_state == LEGUP_F_main_BB__225_134)) begin
		main_signed_add_32_1_op1 = main_225_gep_array205_reg;
	end
	/* main: %232*/
	/*   %gep212 = add i32 %gep_int210, %gep_array211*/
	else if ((cur_state == LEGUP_F_main_BB__232_138)) begin
		main_signed_add_32_1_op1 = main_232_gep_array211_reg;
	end
	/* main: %.loopexit*/
	/*   %253 = add nsw i32 %252, %249*/
	else if ((cur_state == LEGUP_F_main_BB_loopexit_147)) begin
		main_signed_add_32_1_op1 = main_loopexit_249;
	end
	/* main: %.loopexit*/
	/*   %261 = add nsw i32 %260, %257*/
	else if ((cur_state == LEGUP_F_main_BB_loopexit_148)) begin
		main_signed_add_32_1_op1 = main_loopexit_257;
	end
	/* main: %.loopexit*/
	/*   %269 = add nsw i32 %268, %265*/
	else if ((cur_state == LEGUP_F_main_BB_loopexit_149)) begin
		main_signed_add_32_1_op1 = main_loopexit_265;
	end
	/* main: %.loopexit*/
	/*   %277 = add nsw i32 %276, %273*/
	else /* if ((cur_state == LEGUP_F_main_BB_loopexit_150)) */ begin
		main_signed_add_32_1_op1 = main_loopexit_273;
	end
end
always @(*) begin
	main_signed_add_32_1 = (main_signed_add_32_1_op0 + main_signed_add_32_1_op1);
end
always @(*) begin
	/* main: %51*/
	/*   %58 = mul nsw i64 %57, %54*/
	if ((cur_state == LEGUP_F_main_BB__51_33)) begin
		main_signed_multiply_64_0_op0 = main_51_57;
	end
	/* main: %66*/
	/*   %73 = mul i64 %72, %69*/
	else /* if ((cur_state == LEGUP_F_main_BB__66_37)) */ begin
		main_signed_multiply_64_0_op0 = main_66_72;
	end
end
always @(*) begin
	/* main: %51*/
	/*   %58 = mul nsw i64 %57, %54*/
	if ((cur_state == LEGUP_F_main_BB__51_33)) begin
		main_signed_multiply_64_0_op1 = main_51_54;
	end
	/* main: %66*/
	/*   %73 = mul i64 %72, %69*/
	else /* if ((cur_state == LEGUP_F_main_BB__66_37)) */ begin
		main_signed_multiply_64_0_op1 = main_66_69;
	end
end
always @(*) begin
	lpm_mult_main_66_73_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %73 = mul i64 %72, %69*/
	if ((lpm_mult_main_66_73_en == 1'd1)) begin
		main_66_73_stage0_reg <= (main_signed_multiply_64_0_op0 * main_signed_multiply_64_0_op1);
	end
end
always @(*) begin
	main_signed_multiply_64_0 = main_66_73_stage0_reg;
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep15 = add i32 %gep_int14, 24*/
		main_signed_add_32_7_op0 = main_preheader14_gep_int14;
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep15 = add i32 %gep_int14, 24*/
if (reset) begin main_signed_add_32_7_op1 = 0; end
		main_signed_add_32_7_op1 = 32'd24;
end
always @(*) begin
	main_signed_add_32_7 = (main_signed_add_32_7_op0 + main_signed_add_32_7_op1);
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep17 = add i32 %gep_int16, 28*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_signed_add_32_2_op0 = main_preheader14_gep_int16;
	end
	/* main: %33*/
	/*   %gep32 = add i32 %gep_int30, %gep_array31*/
	else if ((cur_state == LEGUP_F_main_BB__33_22)) begin
		main_signed_add_32_2_op0 = main_33_gep_int30_reg;
	end
	/* main: %42*/
	/*   %gep41 = add i32 %gep_int39, %gep_array40*/
	else if ((cur_state == LEGUP_F_main_BB__42_27)) begin
		main_signed_add_32_2_op0 = main_42_gep_int39_reg;
	end
	/* main: %51*/
	/*   %gep50 = add i32 %gep_int48, %gep_array49*/
	else if ((cur_state == LEGUP_F_main_BB__51_32)) begin
		main_signed_add_32_2_op0 = main_51_gep_int48_reg;
	end
	/* main: %81*/
	/*   %gep71 = add i32 %gep_int69, %gep_array70*/
	else if ((cur_state == LEGUP_F_main_BB__81_46)) begin
		main_signed_add_32_2_op0 = main_81_gep_int69_reg;
	end
	/* main: %88*/
	/*   %gep80 = add i32 %gep_int78, %gep_array79*/
	else if ((cur_state == LEGUP_F_main_BB__88_50)) begin
		main_signed_add_32_2_op0 = main_88_gep_int78_reg;
	end
	/* main: %95*/
	/*   %gep89 = add i32 %gep_int87, %gep_array88*/
	else if ((cur_state == LEGUP_F_main_BB__95_54)) begin
		main_signed_add_32_2_op0 = main_95_gep_int87_reg;
	end
	/* main: %112*/
	/*   %gep110 = add i32 %gep_int108, %gep_array109*/
	else if ((cur_state == LEGUP_F_main_BB__112_66)) begin
		main_signed_add_32_2_op0 = main_112_gep_int108_reg;
	end
	/* main: %119*/
	/*   %gep119 = add i32 %gep_int117, %gep_array118*/
	else if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_signed_add_32_2_op0 = main_119_gep_int117_reg;
	end
	/* main: %126*/
	/*   %gep128 = add i32 %gep_int126, %gep_array127*/
	else if ((cur_state == LEGUP_F_main_BB__126_74)) begin
		main_signed_add_32_2_op0 = main_126_gep_int126_reg;
	end
	/* main: %134*/
	/*   %gep137 = add i32 %gep_int135, %gep_array136*/
	else /* if ((cur_state == LEGUP_F_main_BB__134_78)) */ begin
		main_signed_add_32_2_op0 = main_134_gep_int135_reg;
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %gep17 = add i32 %gep_int16, 28*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_7)) begin
		main_signed_add_32_2_op1 = 32'd28;
	end
	/* main: %33*/
	/*   %gep32 = add i32 %gep_int30, %gep_array31*/
	else if ((cur_state == LEGUP_F_main_BB__33_22)) begin
		main_signed_add_32_2_op1 = main_33_gep_array31_reg;
	end
	/* main: %42*/
	/*   %gep41 = add i32 %gep_int39, %gep_array40*/
	else if ((cur_state == LEGUP_F_main_BB__42_27)) begin
		main_signed_add_32_2_op1 = main_42_gep_array40_reg;
	end
	/* main: %51*/
	/*   %gep50 = add i32 %gep_int48, %gep_array49*/
	else if ((cur_state == LEGUP_F_main_BB__51_32)) begin
		main_signed_add_32_2_op1 = main_51_gep_array49_reg;
	end
	/* main: %81*/
	/*   %gep71 = add i32 %gep_int69, %gep_array70*/
	else if ((cur_state == LEGUP_F_main_BB__81_46)) begin
		main_signed_add_32_2_op1 = main_81_gep_array70_reg;
	end
	/* main: %88*/
	/*   %gep80 = add i32 %gep_int78, %gep_array79*/
	else if ((cur_state == LEGUP_F_main_BB__88_50)) begin
		main_signed_add_32_2_op1 = main_88_gep_array79_reg;
	end
	/* main: %95*/
	/*   %gep89 = add i32 %gep_int87, %gep_array88*/
	else if ((cur_state == LEGUP_F_main_BB__95_54)) begin
		main_signed_add_32_2_op1 = main_95_gep_array88_reg;
	end
	/* main: %112*/
	/*   %gep110 = add i32 %gep_int108, %gep_array109*/
	else if ((cur_state == LEGUP_F_main_BB__112_66)) begin
		main_signed_add_32_2_op1 = main_112_gep_array109_reg;
	end
	/* main: %119*/
	/*   %gep119 = add i32 %gep_int117, %gep_array118*/
	else if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_signed_add_32_2_op1 = main_119_gep_array118_reg;
	end
	/* main: %126*/
	/*   %gep128 = add i32 %gep_int126, %gep_array127*/
	else if ((cur_state == LEGUP_F_main_BB__126_74)) begin
		main_signed_add_32_2_op1 = main_126_gep_array127_reg;
	end
	/* main: %134*/
	/*   %gep137 = add i32 %gep_int135, %gep_array136*/
	else /* if ((cur_state == LEGUP_F_main_BB__134_78)) */ begin
		main_signed_add_32_2_op1 = main_134_gep_array136_reg;
	end
end
always @(*) begin
	main_signed_add_32_2 = (main_signed_add_32_2_op0 + main_signed_add_32_2_op1);
end
always @(*) begin
	/* main: %42*/
	/*   %47 = sub i32 %44, %46*/
	if ((cur_state == LEGUP_F_main_BB__42_28)) begin
		main_signed_subtract_32_0_op0 = main_42_44;
	end
	/* main: %42*/
	/*   %50 = sub i32 %47, %49*/
	else /* if ((cur_state == LEGUP_F_main_BB__42_29)) */ begin
		main_signed_subtract_32_0_op0 = main_42_47_reg;
	end
end
always @(*) begin
	/* main: %42*/
	/*   %47 = sub i32 %44, %46*/
	if ((cur_state == LEGUP_F_main_BB__42_28)) begin
		main_signed_subtract_32_0_op1 = main_42_46;
	end
	/* main: %42*/
	/*   %50 = sub i32 %47, %49*/
	else /* if ((cur_state == LEGUP_F_main_BB__42_29)) */ begin
		main_signed_subtract_32_0_op1 = main_42_49;
	end
end
always @(*) begin
	main_signed_subtract_32_0 = (main_signed_subtract_32_0_op0 - main_signed_subtract_32_0_op1);
end
always @(*) begin
	/* main: %51*/
	/*   %62 = add nsw i64 %58, %61*/
		main_signed_add_64_0_op0 = main_51_58;
end
always @(*) begin
	/* main: %51*/
	/*   %62 = add nsw i64 %58, %61*/
		main_signed_add_64_0_op1 = main_51_61;
end
always @(*) begin
	main_signed_add_64_0 = (main_signed_add_64_0_op0 + main_signed_add_64_0_op1);
end
always @(*) begin
	lpm_mult_main_51_58_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %284*/
	/*   ret i32 %277*/
	if ((cur_state == LEGUP_F_main_BB__284_153)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = legup_memset_4_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = legup_memset_4_memory_controller_enable_a;
	end
	/* main: %.preheader14*/
	/*   store i32 22, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader14*/
	/*   store i32 5, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader14*/
	/*   store i32 -9, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader14*/
	/*   store i32 3, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader14*/
	/*   store i32 -17, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader14*/
	/*   store i32 38, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader14*/
	/*   store i32 0, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader14*/
	/*   store i32 11, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %180*/
	/*   %187 = load i32* %186, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__180_108)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %189*/
	/*   store i32 %191, i32* %197, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_116)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.loopexit*/
	/*   %246 = load i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_145)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.loopexit*/
	/*   %254 = load i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_146)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.loopexit*/
	/*   %262 = load i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_147)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.loopexit*/
	/*   %270 = load i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_148)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memset_4_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memset_4_memory_controller_address_a;
	end
	/* main: %.preheader14*/
	/*   store i32 22, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		memory_controller_address_a = main_preheader14_6_reg;
	end
	/* main: %.preheader14*/
	/*   store i32 5, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_9)) begin
		memory_controller_address_a = main_preheader14_7_reg;
	end
	/* main: %.preheader14*/
	/*   store i32 -9, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_10)) begin
		memory_controller_address_a = main_preheader14_8_reg;
	end
	/* main: %.preheader14*/
	/*   store i32 3, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_11)) begin
		memory_controller_address_a = main_preheader14_9_reg;
	end
	/* main: %.preheader14*/
	/*   store i32 -17, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_12)) begin
		memory_controller_address_a = main_preheader14_10_reg;
	end
	/* main: %.preheader14*/
	/*   store i32 38, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_13)) begin
		memory_controller_address_a = main_preheader14_11_reg;
	end
	/* main: %.preheader14*/
	/*   store i32 0, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_14)) begin
		memory_controller_address_a = main_preheader14_12_reg;
	end
	/* main: %.preheader14*/
	/*   store i32 11, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_15)) begin
		memory_controller_address_a = main_preheader14_13_reg;
	end
	/* main: %180*/
	/*   %187 = load i32* %186, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__180_108)) begin
		memory_controller_address_a = main_180_186;
	end
	/* main: %189*/
	/*   store i32 %191, i32* %197, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_116)) begin
		memory_controller_address_a = main_189_197;
	end
	/* main: %.loopexit*/
	/*   %246 = load i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_145)) begin
		memory_controller_address_a = main_preheader14_6_reg;
	end
	/* main: %.loopexit*/
	/*   %254 = load i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_146)) begin
		memory_controller_address_a = main_preheader14_8_reg;
	end
	/* main: %.loopexit*/
	/*   %262 = load i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_147)) begin
		memory_controller_address_a = main_preheader14_10_reg;
	end
	/* main: %.loopexit*/
	/*   %270 = load i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_148)) begin
		memory_controller_address_a = main_preheader14_12_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = legup_memset_4_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = legup_memset_4_memory_controller_write_enable_a;
	end
	/* main: %.preheader14*/
	/*   store i32 22, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader14*/
	/*   store i32 5, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader14*/
	/*   store i32 -9, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader14*/
	/*   store i32 3, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader14*/
	/*   store i32 -17, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader14*/
	/*   store i32 38, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_13)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader14*/
	/*   store i32 0, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_14)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader14*/
	/*   store i32 11, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_15)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %180*/
	/*   %187 = load i32* %186, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__180_108)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %189*/
	/*   store i32 %191, i32* %197, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_116)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.loopexit*/
	/*   %246 = load i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_145)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.loopexit*/
	/*   %254 = load i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_146)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.loopexit*/
	/*   %262 = load i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_147)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.loopexit*/
	/*   %270 = load i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_148)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memset_4_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memset_4_memory_controller_in_a;
	end
	/* main: %.preheader14*/
	/*   store i32 22, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		memory_controller_in_a = 32'd22;
	end
	/* main: %.preheader14*/
	/*   store i32 5, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_9)) begin
		memory_controller_in_a = 32'd5;
	end
	/* main: %.preheader14*/
	/*   store i32 -9, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_10)) begin
		memory_controller_in_a = -32'd9;
	end
	/* main: %.preheader14*/
	/*   store i32 3, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_11)) begin
		memory_controller_in_a = 32'd3;
	end
	/* main: %.preheader14*/
	/*   store i32 -17, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_12)) begin
		memory_controller_in_a = -32'd17;
	end
	/* main: %.preheader14*/
	/*   store i32 38, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_13)) begin
		memory_controller_in_a = 32'd38;
	end
	/* main: %.preheader14*/
	/*   store i32 0, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_14)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %.preheader14*/
	/*   store i32 11, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_15)) begin
		memory_controller_in_a = 32'd11;
	end
	/* main: %189*/
	/*   store i32 %191, i32* %197, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_116)) begin
		memory_controller_in_a = main_189_191_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = legup_memset_4_memory_controller_size_a;
	end
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = legup_memset_4_memory_controller_size_a;
	end
	/* main: %.preheader14*/
	/*   store i32 22, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader14*/
	/*   store i32 5, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader14*/
	/*   store i32 -9, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader14*/
	/*   store i32 3, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader14*/
	/*   store i32 -17, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader14*/
	/*   store i32 38, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader14*/
	/*   store i32 0, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader14*/
	/*   store i32 11, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %180*/
	/*   %187 = load i32* %186, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__180_108)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %189*/
	/*   store i32 %191, i32* %197, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_116)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.loopexit*/
	/*   %246 = load i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_145)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.loopexit*/
	/*   %254 = load i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_146)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.loopexit*/
	/*   %262 = load i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_147)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.loopexit*/
	/*   %270 = load i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_148)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = legup_memset_4_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = legup_memset_4_memory_controller_enable_b;
	end
	/* main: %.loopexit*/
	/*   %250 = load i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_145)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.loopexit*/
	/*   %258 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_146)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.loopexit*/
	/*   %266 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_147)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.loopexit*/
	/*   %274 = load i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_148)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memset_4_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memset_4_memory_controller_address_b;
	end
	/* main: %.loopexit*/
	/*   %250 = load i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_145)) begin
		memory_controller_address_b = main_preheader14_7_reg;
	end
	/* main: %.loopexit*/
	/*   %258 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_146)) begin
		memory_controller_address_b = main_preheader14_9_reg;
	end
	/* main: %.loopexit*/
	/*   %266 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_147)) begin
		memory_controller_address_b = main_preheader14_11_reg;
	end
	/* main: %.loopexit*/
	/*   %274 = load i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_148)) begin
		memory_controller_address_b = main_preheader14_13_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = legup_memset_4_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = legup_memset_4_memory_controller_write_enable_b;
	end
	/* main: %.loopexit*/
	/*   %250 = load i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_145)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.loopexit*/
	/*   %258 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_146)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.loopexit*/
	/*   %266 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_147)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.loopexit*/
	/*   %274 = load i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_148)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memset_4_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memset_4_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = legup_memset_4_memory_controller_size_b;
	end
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 256)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = legup_memset_4_memory_controller_size_b;
	end
	/* main: %.loopexit*/
	/*   %250 = load i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_145)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.loopexit*/
	/*   %258 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_146)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.loopexit*/
	/*   %266 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_147)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.loopexit*/
	/*   %274 = load i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_148)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %284*/
	/*   ret i32 %277*/
	if ((cur_state == LEGUP_F_main_BB__284_153)) begin
		return_val <= main_loopexit_277_reg;
		if (start == 1'b0 && ^(main_loopexit_277_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 

//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Jun 18 16:44:03 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 8
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @sha_info_data = internal unnamed_addr global [16 x i32] zeroinitializer, align 4
`define TAG_g_sha_info_data `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_sha_info_data_a {`TAG_g_sha_info_data, 23'd0}
// @sha_info_digest.0 = internal unnamed_addr global i1 false
`define TAG_g_sha_info_digest0 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_sha_info_digest0_a {`TAG_g_sha_info_digest0, 23'd0}
// @sha_info_digest.1 = internal unnamed_addr global i1 false
`define TAG_g_sha_info_digest1 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_sha_info_digest1_a {`TAG_g_sha_info_digest1, 23'd1}
// @sha_info_digest.2 = internal unnamed_addr global i1 false
`define TAG_g_sha_info_digest2 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_sha_info_digest2_a {`TAG_g_sha_info_digest2, 23'd2}
// @sha_info_digest.3 = internal unnamed_addr global i1 false
`define TAG_g_sha_info_digest3 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_sha_info_digest3_a {`TAG_g_sha_info_digest3, 23'd3}
// @sha_info_digest.4 = internal unnamed_addr global i32 0
`define TAG_g_sha_info_digest4 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_sha_info_digest4_a {`TAG_g_sha_info_digest4, 23'd64}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [1:0] ram_1_address_a;
reg [1:0] ram_1_address_b;
reg ram_1_write_enable_a;
reg ram_1_write_enable_b;
reg [0:0] ram_1_in_a;
reg [0:0] ram_1_in_b;
wire [0:0] ram_1_out_a;
wire [0:0] ram_1_out_b;

// @sha_info_digest.0 = internal unnamed_addr global i1 false
ram_dual_port ram_1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_1_address_a ),
	.address_b( ram_1_address_b ),
	.wren_a( ram_1_write_enable_a ),
	.wren_b( ram_1_write_enable_b ),
	.data_a( ram_1_in_a ),
	.data_b( ram_1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_1_out_a ),
	.q_b( ram_1_out_b)
);
defparam ram_1.width_a = 1;
defparam ram_1.width_b = 1;
defparam ram_1.widthad_a = 2;
defparam ram_1.widthad_b = 2;
defparam ram_1.width_be_a = 1;
defparam ram_1.width_be_b = 1;
defparam ram_1.numwords_a = 4;
defparam ram_1.numwords_b = 4;
defparam ram_1.latency = ram_latency;
defparam ram_1.init_file = "ram_1.mif";

reg [4:0] ram_32_address_a;
reg [4:0] ram_32_address_b;
reg ram_32_write_enable_a;
reg ram_32_write_enable_b;
reg [31:0] ram_32_in_a;
reg [31:0] ram_32_in_b;
wire [31:0] ram_32_out_a;
wire [31:0] ram_32_out_b;

// @sha_info_digest.4 = internal unnamed_addr global i32 0
ram_dual_port ram_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_32_address_a ),
	.address_b( ram_32_address_b ),
	.wren_a( ram_32_write_enable_a ),
	.wren_b( ram_32_write_enable_b ),
	.data_a( ram_32_in_a ),
	.data_b( ram_32_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_32_out_a ),
	.q_b( ram_32_out_b)
);
defparam ram_32.width_a = 32;
defparam ram_32.width_b = 32;
defparam ram_32.widthad_a = 5;
defparam ram_32.widthad_b = 5;
defparam ram_32.width_be_a = 1;
defparam ram_32.width_be_b = 1;
defparam ram_32.numwords_a = 17;
defparam ram_32.numwords_b = 17;
defparam ram_32.latency = ram_latency;
defparam ram_32.init_file = "ram_32.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_ram_1_a;
assign select_ram_1_a = (tag_a == 2);
reg [ram_latency:0] select_ram_1_reg_a;
wire [0:0] memory_controller_ram_1_out_a;
assign memory_controller_ram_1_out_a = {1{ select_ram_1_reg_a[ram_latency]}} & ram_1_out_a;

wire select_ram_32_a;
assign select_ram_32_a = (tag_a == 3);
reg [ram_latency:0] select_ram_32_reg_a;
wire [31:0] memory_controller_ram_32_out_a;
assign memory_controller_ram_32_out_a = {32{ select_ram_32_reg_a[ram_latency]}} & ram_32_out_a;

always @(*)
begin
	ram_1_address_a = memory_controller_address_a [2-1+0:0] & {2{select_ram_1_a}};
	ram_1_write_enable_a = memory_controller_write_enable_a & select_ram_1_a;
	ram_1_in_a [1-1:0] = memory_controller_in_a[1-1:0];

	ram_32_address_a = memory_controller_address_a [5-1+2:2] & {5{select_ram_32_a}};
	ram_32_write_enable_a = memory_controller_write_enable_a & select_ram_32_a;
	ram_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_ram_32_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_ram_1_out_a | memory_controller_ram_32_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_ram_1_reg_a[j+1] <= select_ram_1_reg_a[j];
select_ram_1_reg_a[j+1] <= select_ram_1_reg_a[j];
select_ram_1_reg_a[j+1] <= select_ram_1_reg_a[j];
select_ram_1_reg_a[j+1] <= select_ram_1_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
end
always @(*)
begin
select_ram_1_reg_a[0] <= select_ram_1_a;
select_ram_1_reg_a[0] <= select_ram_1_a;
select_ram_1_reg_a[0] <= select_ram_1_a;
select_ram_1_reg_a[0] <= select_ram_1_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
end

reg [2:0] select_not_struct_b;

wire select_ram_1_b;
assign select_ram_1_b = (tag_b == 2);
reg [ram_latency:0] select_ram_1_reg_b;
wire [0:0] memory_controller_ram_1_out_b;
assign memory_controller_ram_1_out_b = {1{ select_ram_1_reg_b[ram_latency]}} & ram_1_out_b;

wire select_ram_32_b;
assign select_ram_32_b = (tag_b == 3);
reg [ram_latency:0] select_ram_32_reg_b;
wire [31:0] memory_controller_ram_32_out_b;
assign memory_controller_ram_32_out_b = {32{ select_ram_32_reg_b[ram_latency]}} & ram_32_out_b;

always @(*)
begin
	ram_1_address_b = memory_controller_address_b [2-1+0:0] & {2{select_ram_1_b}};
	ram_1_write_enable_b = memory_controller_write_enable_b & select_ram_1_b;
	ram_1_in_b [1-1:0] = memory_controller_in_b[1-1:0];

	ram_32_address_b = memory_controller_address_b [5-1+2:2] & {5{select_ram_32_b}};
	ram_32_write_enable_b = memory_controller_write_enable_b & select_ram_32_b;
	ram_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_ram_32_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_ram_1_out_b | memory_controller_ram_32_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_ram_1_reg_b[j+1] <= select_ram_1_reg_b[j];
select_ram_1_reg_b[j+1] <= select_ram_1_reg_b[j];
select_ram_1_reg_b[j+1] <= select_ram_1_reg_b[j];
select_ram_1_reg_b[j+1] <= select_ram_1_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
end
always @(*)
begin
select_ram_1_reg_b[0] <= select_ram_1_b;
select_ram_1_reg_b[0] <= select_ram_1_b;
select_ram_1_reg_b[0] <= select_ram_1_b;
select_ram_1_reg_b[0] <= select_ram_1_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_main_BB__crit_edge10i_1 = 6'd1;
parameter [5:0] LEGUP_F_main_BB__crit_edge10i_2 = 6'd2;
parameter [5:0] LEGUP_F_main_BB__crit_edge10i_3 = 6'd3;
parameter [5:0] LEGUP_F_main_BB__crit_edge10i_4 = 6'd4;
parameter [5:0] LEGUP_F_main_BB_preheaderi_5 = 6'd5;
parameter [5:0] LEGUP_F_main_BB__4_6 = 6'd6;
parameter [5:0] LEGUP_F_main_BB__4_7 = 6'd7;
parameter [5:0] LEGUP_F_main_BB__4_8 = 6'd8;
parameter [5:0] LEGUP_F_main_BB__4_9 = 6'd9;
parameter [5:0] LEGUP_F_main_BB__4_10 = 6'd10;
parameter [5:0] LEGUP_F_main_BB_memcpyexiti_11 = 6'd11;
parameter [5:0] LEGUP_F_main_BB_memcpyexiti_13 = 6'd13;
parameter [5:0] LEGUP_F_main_BB_preheaderi8preheader_14 = 6'd14;
parameter [5:0] LEGUP_F_main_BB_preheaderi8_15 = 6'd15;
parameter [5:0] LEGUP_F_main_BB__28_16 = 6'd16;
parameter [5:0] LEGUP_F_main_BB__28_17 = 6'd17;
parameter [5:0] LEGUP_F_main_BB__28_18 = 6'd18;
parameter [5:0] LEGUP_F_main_BB__28_19 = 6'd19;
parameter [5:0] LEGUP_F_main_BB__28_20 = 6'd20;
parameter [5:0] LEGUP_F_main_BB_memcpyexiti12_21 = 6'd21;
parameter [5:0] LEGUP_F_main_BB_memcpyexiti12_23 = 6'd23;
parameter [5:0] LEGUP_F_main_BB_lrphi8preheaderi_24 = 6'd24;
parameter [5:0] LEGUP_F_main_BB_lrphi8preheaderi_25 = 6'd25;
parameter [5:0] LEGUP_F_main_BB_lrphi8i_26 = 6'd26;
parameter [5:0] LEGUP_F_main_BB_lrphi8i_27 = 6'd27;
parameter [5:0] LEGUP_F_main_BB_lrphi8i_28 = 6'd28;
parameter [5:0] LEGUP_F_main_BB__49_29 = 6'd29;
parameter [5:0] LEGUP_F_main_BB__49_30 = 6'd30;
parameter [5:0] LEGUP_F_main_BB__49_32 = 6'd32;
parameter [5:0] LEGUP_F_main_BB__49_33 = 6'd33;
parameter [5:0] LEGUP_F_main_BB__49_34 = 6'd34;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [5:0] LEGUP_function_call_12 = 6'd12;
parameter [5:0] LEGUP_function_call_22 = 6'd22;
parameter [5:0] LEGUP_function_call_31 = 6'd31;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [31:0] main_preheaderi_indvar18;
reg [31:0] main_preheaderi_indvar18_reg;
reg [31:0] main_preheaderi_0;
reg [31:0] main_preheaderi_0_reg;
reg [31:0] main_preheaderi_1;
reg [31:0] main_preheaderi_1_reg;
reg [31:0] main_preheaderi_2;
reg [31:0] main_preheaderi_2_reg;
reg [31:0] main_preheaderi_3;
reg [31:0] main_preheaderi_3_reg;
reg [31:0] main_4_indvar14;
reg [31:0] main_4_indvar14_reg;
reg [31:0] main_4_5;
reg [31:0] main_4_5_reg;
reg [31:0] main_4_6;
reg [31:0] main_4_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep23_reg;
reg [31:0] main_4_7;
reg [31:0] main_4_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_p201ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_p201ii_reg;
reg [31:0] main_4_8;
reg [31:0] main_4_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep21_reg;
reg [31:0] main_4_9;
reg [31:0] main_4_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_p102ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_p102ii_reg;
reg [7:0] main_4_10;
reg [7:0] main_4_10_reg;
reg [31:0] main_4_11;
reg [31:0] main_4_11_reg;
reg [7:0] main_4_12;
reg [7:0] main_4_12_reg;
reg [31:0] main_4_13;
reg [31:0] main_4_13_reg;
reg [31:0] main_4_14;
reg [31:0] main_4_14_reg;
reg [31:0] main_4_15;
reg [31:0] main_4_15_reg;
reg [7:0] main_4_16;
reg [7:0] main_4_16_reg;
reg [31:0] main_4_17;
reg [31:0] main_4_17_reg;
reg [31:0] main_4_18;
reg [31:0] main_4_18_reg;
reg [31:0] main_4_19;
reg [31:0] main_4_19_reg;
reg [7:0] main_4_20;
reg [7:0] main_4_20_reg;
reg [31:0] main_4_21;
reg [31:0] main_4_21_reg;
reg [31:0] main_4_22;
reg [31:0] main_4_22_reg;
reg [31:0] main_4_23;
reg [31:0] main_4_23_reg;
reg [31:0] main_4_indvarnext15;
reg [31:0] main_4_indvarnext15_reg;
reg  main_4_exitcond16;
reg  main_4_exitcond16_reg;
reg [31:0] main_memcpyexiti_indvarnext19;
reg [31:0] main_memcpyexiti_indvarnext19_reg;
reg  main_memcpyexiti_exitcond24;
reg  main_memcpyexiti_exitcond24_reg;
reg [31:0] main_preheaderi8_indvar4;
reg [31:0] main_preheaderi8_indvar4_reg;
reg [31:0] main_preheaderi8_24;
reg [31:0] main_preheaderi8_24_reg;
reg [31:0] main_preheaderi8_25;
reg [31:0] main_preheaderi8_25_reg;
reg [31:0] main_preheaderi8_26;
reg [31:0] main_preheaderi8_26_reg;
reg [31:0] main_preheaderi8_27;
reg [31:0] main_preheaderi8_27_reg;
reg [31:0] main_28_indvar1;
reg [31:0] main_28_indvar1_reg;
reg [31:0] main_28_29;
reg [31:0] main_28_29_reg;
reg [31:0] main_28_30;
reg [31:0] main_28_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_28_scevgep8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_28_scevgep8_reg;
reg [31:0] main_28_31;
reg [31:0] main_28_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_28_p201ii11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_28_p201ii11_reg;
reg [31:0] main_28_32;
reg [31:0] main_28_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_28_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_28_scevgep6_reg;
reg [31:0] main_28_33;
reg [31:0] main_28_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_28_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_28_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_28_p102ii10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_28_p102ii10_reg;
reg [7:0] main_28_34;
reg [7:0] main_28_34_reg;
reg [31:0] main_28_35;
reg [31:0] main_28_35_reg;
reg [7:0] main_28_36;
reg [7:0] main_28_36_reg;
reg [31:0] main_28_37;
reg [31:0] main_28_37_reg;
reg [31:0] main_28_38;
reg [31:0] main_28_38_reg;
reg [31:0] main_28_39;
reg [31:0] main_28_39_reg;
reg [7:0] main_28_40;
reg [7:0] main_28_40_reg;
reg [31:0] main_28_41;
reg [31:0] main_28_41_reg;
reg [31:0] main_28_42;
reg [31:0] main_28_42_reg;
reg [31:0] main_28_43;
reg [31:0] main_28_43_reg;
reg [7:0] main_28_44;
reg [7:0] main_28_44_reg;
reg [31:0] main_28_45;
reg [31:0] main_28_45_reg;
reg [31:0] main_28_46;
reg [31:0] main_28_46_reg;
reg [31:0] main_28_47;
reg [31:0] main_28_47_reg;
reg [31:0] main_28_indvarnext2;
reg [31:0] main_28_indvarnext2_reg;
reg  main_28_exitcond3;
reg  main_28_exitcond3_reg;
reg [31:0] main_memcpyexiti12_indvarnext5;
reg [31:0] main_memcpyexiti12_indvarnext5_reg;
reg  main_memcpyexiti12_exitcond9;
reg  main_memcpyexiti12_exitcond9_reg;
reg [31:0] main_lrphi8i_indvar;
reg [31:0] main_lrphi8i_indvar_reg;
reg [31:0] main_lrphi8i_48;
reg [31:0] main_lrphi8i_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi8i_p11i7i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi8i_p11i7i_reg;
reg [31:0] main_lrphi8i_indvarnext;
reg [31:0] main_lrphi8i_indvarnext_reg;
reg  main_lrphi8i_exitcond;
reg  main_lrphi8i_exitcond_reg;
reg [31:0] main_49_50;
reg [31:0] main_49_50_reg;
reg  main_49_51;
reg  main_49_51_reg;
reg [31:0] main_49_52;
reg [31:0] main_49_52_reg;
reg [13:0] indata_address_a;
reg  indata_write_enable_a;
wire [7:0] indata_in_a;
wire [7:0] indata_out_a;
reg [13:0] indata_address_b;
reg  indata_write_enable_b;
wire [7:0] indata_in_b;
wire [7:0] indata_out_b;
wire  ram_1_address_a;
wire  ram_1_write_enable_a;
wire  ram_1_in_a;
wire  ram_1_out_a;
wire  ram_1_address_b;
wire  ram_1_write_enable_b;
wire  ram_1_in_b;
wire  ram_1_out_b;
wire [3:0] ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire [3:0] ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire [6:0] sha_transform_preheader743_W_address_a;
wire  sha_transform_preheader743_W_write_enable_a;
wire [31:0] sha_transform_preheader743_W_in_a;
wire [31:0] sha_transform_preheader743_W_out_a;
wire [6:0] sha_transform_preheader743_W_address_b;
wire  sha_transform_preheader743_W_write_enable_b;
wire [31:0] sha_transform_preheader743_W_in_b;
wire [31:0] sha_transform_preheader743_W_out_b;
reg  sha_transform_start;
reg  sha_transform_finish_final;
reg  sha_transform_finish_reg;
wire  sha_transform_finish;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;


sha_transform sha_transform (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (sha_transform_start),
	.finish (sha_transform_finish)
);

defparam
	sha_transform.tag_offset = tag_offset;

// Local Rams


// @indata = internal unnamed_addr constant [2 x [8192 x i8]] [[8192 x i8] c"KurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscr...
rom_dual_port indata (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( indata_address_a ),
	.address_b( indata_address_b ),
	.q_a( indata_out_a ),
	.q_b( indata_out_b)
);
defparam indata.width_a = 8;
defparam indata.width_b = 8;
defparam indata.widthad_a = 14;
defparam indata.widthad_b = 14;
defparam indata.numwords_a = 16384;
defparam indata.numwords_b = 16384;
defparam indata.latency = 1;
defparam indata.init_file = "indata.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %49*/
	/*   %53 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str, i32 0, i32 0), i32 %52) #2*/
	if ((cur_state == LEGUP_F_main_BB__49_34)) begin
		$write("Result: %d\n", $signed(main_49_52));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_49_52) === 1'bX) finish <= 0;
	end
	/* main: %49*/
	/*   %54 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__49_34)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge10i_1;
LEGUP_F_main_BB__28_16:
		next_state = LEGUP_F_main_BB__28_17;
LEGUP_F_main_BB__28_17:
		next_state = LEGUP_F_main_BB__28_18;
LEGUP_F_main_BB__28_18:
		next_state = LEGUP_F_main_BB__28_19;
LEGUP_F_main_BB__28_19:
		next_state = LEGUP_F_main_BB__28_20;
LEGUP_F_main_BB__28_20:
	if ((main_28_exitcond3_reg == 1'd1))
		next_state = LEGUP_F_main_BB_memcpyexiti12_21;
	else if ((main_28_exitcond3_reg == 1'd0))
		next_state = LEGUP_F_main_BB__28_16;
LEGUP_F_main_BB__49_29:
		next_state = LEGUP_F_main_BB__49_30;
LEGUP_F_main_BB__49_30:
		next_state = LEGUP_function_call_31;
LEGUP_F_main_BB__49_32:
		next_state = LEGUP_F_main_BB__49_33;
LEGUP_F_main_BB__49_33:
		next_state = LEGUP_F_main_BB__49_34;
LEGUP_F_main_BB__49_34:
		next_state = LEGUP_0;
LEGUP_F_main_BB__4_10:
	if ((main_4_exitcond16_reg == 1'd1))
		next_state = LEGUP_F_main_BB_memcpyexiti_11;
	else if ((main_4_exitcond16_reg == 1'd0))
		next_state = LEGUP_F_main_BB__4_6;
LEGUP_F_main_BB__4_6:
		next_state = LEGUP_F_main_BB__4_7;
LEGUP_F_main_BB__4_7:
		next_state = LEGUP_F_main_BB__4_8;
LEGUP_F_main_BB__4_8:
		next_state = LEGUP_F_main_BB__4_9;
LEGUP_F_main_BB__4_9:
		next_state = LEGUP_F_main_BB__4_10;
LEGUP_F_main_BB__crit_edge10i_1:
		next_state = LEGUP_F_main_BB__crit_edge10i_2;
LEGUP_F_main_BB__crit_edge10i_2:
		next_state = LEGUP_F_main_BB__crit_edge10i_3;
LEGUP_F_main_BB__crit_edge10i_3:
		next_state = LEGUP_F_main_BB__crit_edge10i_4;
LEGUP_F_main_BB__crit_edge10i_4:
		next_state = LEGUP_F_main_BB_preheaderi_5;
LEGUP_F_main_BB_lrphi8i_26:
		next_state = LEGUP_F_main_BB_lrphi8i_27;
LEGUP_F_main_BB_lrphi8i_27:
		next_state = LEGUP_F_main_BB_lrphi8i_28;
LEGUP_F_main_BB_lrphi8i_28:
	if ((main_lrphi8i_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB__49_29;
	else if ((main_lrphi8i_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrphi8i_26;
LEGUP_F_main_BB_lrphi8preheaderi_24:
		next_state = LEGUP_F_main_BB_lrphi8preheaderi_25;
LEGUP_F_main_BB_lrphi8preheaderi_25:
		next_state = LEGUP_F_main_BB_lrphi8i_26;
LEGUP_F_main_BB_memcpyexiti12_21:
		next_state = LEGUP_function_call_22;
LEGUP_F_main_BB_memcpyexiti12_23:
	if ((main_memcpyexiti12_exitcond9_reg == 1'd1))
		next_state = LEGUP_F_main_BB_lrphi8preheaderi_24;
	else if ((main_memcpyexiti12_exitcond9_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderi8_15;
LEGUP_F_main_BB_memcpyexiti_11:
		next_state = LEGUP_function_call_12;
LEGUP_F_main_BB_memcpyexiti_13:
	if ((main_memcpyexiti_exitcond24_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi8preheader_14;
	else if ((main_memcpyexiti_exitcond24_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderi_5;
LEGUP_F_main_BB_preheaderi8_15:
		next_state = LEGUP_F_main_BB__28_16;
LEGUP_F_main_BB_preheaderi8preheader_14:
		next_state = LEGUP_F_main_BB_preheaderi8_15;
LEGUP_F_main_BB_preheaderi_5:
		next_state = LEGUP_F_main_BB__4_6;
LEGUP_function_call_12:
	if ((sha_transform_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_memcpyexiti_13;
LEGUP_function_call_22:
	if ((sha_transform_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_memcpyexiti12_23;
LEGUP_function_call_31:
	if ((sha_transform_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__49_32;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %indvar18 = phi i32 [ %indvar.next19, %memcpy.exit.i ], [ 0, %._crit_edge10.i ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge10i_4) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_indvar18 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %indvar18 = phi i32 [ %indvar.next19, %memcpy.exit.i ], [ 0, %._crit_edge10.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_memcpyexiti_13) & (memory_controller_waitrequest == 1'd0)) & (main_memcpyexiti_exitcond24_reg == 1'd0))) */ begin
		main_preheaderi_indvar18 = main_memcpyexiti_indvarnext19_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %indvar18 = phi i32 [ %indvar.next19, %memcpy.exit.i ], [ 0, %._crit_edge10.i ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge10i_4) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_indvar18_reg <= main_preheaderi_indvar18;
		if (start == 1'b0 && ^(main_preheaderi_indvar18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_indvar18_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %indvar18 = phi i32 [ %indvar.next19, %memcpy.exit.i ], [ 0, %._crit_edge10.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_memcpyexiti_13) & (memory_controller_waitrequest == 1'd0)) & (main_memcpyexiti_exitcond24_reg == 1'd0))) begin
		main_preheaderi_indvar18_reg <= main_preheaderi_indvar18;
		if (start == 1'b0 && ^(main_preheaderi_indvar18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_indvar18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %0 = shl i32 %indvar18, 6*/
		main_preheaderi_0 = (main_preheaderi_indvar18_reg <<< (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %0 = shl i32 %indvar18, 6*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_5)) begin
		main_preheaderi_0_reg <= main_preheaderi_0;
		if (start == 1'b0 && ^(main_preheaderi_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %1 = or i32 %0, 1*/
		main_preheaderi_1 = (main_preheaderi_0 | 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %1 = or i32 %0, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_5)) begin
		main_preheaderi_1_reg <= main_preheaderi_1;
		if (start == 1'b0 && ^(main_preheaderi_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %2 = or i32 %0, 2*/
		main_preheaderi_2 = (main_preheaderi_0 | 32'd2);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %2 = or i32 %0, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_5)) begin
		main_preheaderi_2_reg <= main_preheaderi_2;
		if (start == 1'b0 && ^(main_preheaderi_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %3 = or i32 %0, 3*/
		main_preheaderi_3 = (main_preheaderi_0 | 32'd3);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %3 = or i32 %0, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_5)) begin
		main_preheaderi_3_reg <= main_preheaderi_3;
		if (start == 1'b0 && ^(main_preheaderi_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %indvar14 = phi i32 [ %indvar.next15, %4 ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_4_indvar14 = 32'd0;
	end
	/* main: %4*/
	/*   %indvar14 = phi i32 [ %indvar.next15, %4 ], [ 0, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__4_10) & (memory_controller_waitrequest == 1'd0)) & (main_4_exitcond16_reg == 1'd0))) */ begin
		main_4_indvar14 = main_4_indvarnext15_reg;
	end
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %indvar14 = phi i32 [ %indvar.next15, %4 ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_4_indvar14_reg <= main_4_indvar14;
		if (start == 1'b0 && ^(main_4_indvar14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_indvar14_reg"); $finish; end
	end
	/* main: %4*/
	/*   %indvar14 = phi i32 [ %indvar.next15, %4 ], [ 0, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__4_10) & (memory_controller_waitrequest == 1'd0)) & (main_4_exitcond16_reg == 1'd0))) begin
		main_4_indvar14_reg <= main_4_indvar14;
		if (start == 1'b0 && ^(main_4_indvar14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_indvar14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %5 = shl i32 %indvar14, 2*/
		main_4_5 = (main_4_indvar14_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %5 = shl i32 %indvar14, 2*/
	if ((cur_state == LEGUP_F_main_BB__4_6)) begin
		main_4_5_reg <= main_4_5;
		if (start == 1'b0 && ^(main_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %6 = add i32 %1, %5*/
		main_4_6 = (main_preheaderi_1_reg + main_4_5);
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %6 = add i32 %1, %5*/
	if ((cur_state == LEGUP_F_main_BB__4_6)) begin
		main_4_6_reg <= main_4_6;
		if (start == 1'b0 && ^(main_4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %scevgep23 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 0, i32 %6*/
		main_4_scevgep23 = (1'd0 | (1 * main_4_6_reg));
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %scevgep23 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 0, i32 %6*/
	if ((cur_state == LEGUP_F_main_BB__4_7)) begin
		main_4_scevgep23_reg <= main_4_scevgep23;
		if (start == 1'b0 && ^(main_4_scevgep23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_scevgep23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %7 = add i32 %0, %5*/
		main_4_7 = (main_preheaderi_0_reg + main_4_5);
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %7 = add i32 %0, %5*/
	if ((cur_state == LEGUP_F_main_BB__4_6)) begin
		main_4_7_reg <= main_4_7;
		if (start == 1'b0 && ^(main_4_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %p2.01.i.i = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 0, i32 %7*/
		main_4_p201ii = (1'd0 | (1 * main_4_7_reg));
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %p2.01.i.i = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 0, i32 %7*/
	if ((cur_state == LEGUP_F_main_BB__4_7)) begin
		main_4_p201ii_reg <= main_4_p201ii;
		if (start == 1'b0 && ^(main_4_p201ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_p201ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %8 = add i32 %2, %5*/
		main_4_8 = (main_preheaderi_2_reg + main_4_5);
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %8 = add i32 %2, %5*/
	if ((cur_state == LEGUP_F_main_BB__4_6)) begin
		main_4_8_reg <= main_4_8;
		if (start == 1'b0 && ^(main_4_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %scevgep21 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 0, i32 %8*/
		main_4_scevgep21 = (1'd0 | (1 * main_4_8_reg));
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %scevgep21 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 0, i32 %8*/
	if ((cur_state == LEGUP_F_main_BB__4_7)) begin
		main_4_scevgep21_reg <= main_4_scevgep21;
		if (start == 1'b0 && ^(main_4_scevgep21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_scevgep21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %9 = add i32 %3, %5*/
		main_4_9 = (main_preheaderi_3_reg + main_4_5);
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %9 = add i32 %3, %5*/
	if ((cur_state == LEGUP_F_main_BB__4_6)) begin
		main_4_9_reg <= main_4_9;
		if (start == 1'b0 && ^(main_4_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %scevgep20 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 0, i32 %9*/
		main_4_scevgep20 = (1'd0 | (1 * main_4_9_reg));
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %scevgep20 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 0, i32 %9*/
	if ((cur_state == LEGUP_F_main_BB__4_7)) begin
		main_4_scevgep20_reg <= main_4_scevgep20;
		if (start == 1'b0 && ^(main_4_scevgep20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_scevgep20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %p1.02.i.i = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %indvar14*/
		main_4_p102ii = (`TAG_g_sha_info_data_a | (4 * main_4_indvar14_reg));
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %p1.02.i.i = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %indvar14*/
	if ((cur_state == LEGUP_F_main_BB__4_6)) begin
		main_4_p102ii_reg <= main_4_p102ii;
		if (start == 1'b0 && ^(main_4_p102ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_p102ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %10 = load i8* %p2.01.i.i, align 1, !tbaa !5*/
		main_4_10 = indata_out_a;
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %10 = load i8* %p2.01.i.i, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_8)) begin
		main_4_10_reg <= main_4_10;
		if (start == 1'b0 && ^(main_4_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %11 = zext i8 %10 to i32*/
		main_4_11 = main_4_10;
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %11 = zext i8 %10 to i32*/
	if ((cur_state == LEGUP_F_main_BB__4_8)) begin
		main_4_11_reg <= main_4_11;
		if (start == 1'b0 && ^(main_4_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %12 = load i8* %scevgep23, align 1, !tbaa !5*/
		main_4_12 = indata_out_b;
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %12 = load i8* %scevgep23, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_8)) begin
		main_4_12_reg <= main_4_12;
		if (start == 1'b0 && ^(main_4_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %13 = zext i8 %12 to i32*/
		main_4_13 = main_4_12;
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %13 = zext i8 %12 to i32*/
	if ((cur_state == LEGUP_F_main_BB__4_8)) begin
		main_4_13_reg <= main_4_13;
		if (start == 1'b0 && ^(main_4_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %14 = shl nuw nsw i32 %13, 8*/
		main_4_14 = (main_4_13 <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %14 = shl nuw nsw i32 %13, 8*/
	if ((cur_state == LEGUP_F_main_BB__4_8)) begin
		main_4_14_reg <= main_4_14;
		if (start == 1'b0 && ^(main_4_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %15 = or i32 %14, %11*/
		main_4_15 = (main_4_14 | main_4_11);
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %15 = or i32 %14, %11*/
	if ((cur_state == LEGUP_F_main_BB__4_8)) begin
		main_4_15_reg <= main_4_15;
		if (start == 1'b0 && ^(main_4_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %16 = load i8* %scevgep21, align 1, !tbaa !5*/
		main_4_16 = indata_out_a;
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %16 = load i8* %scevgep21, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		main_4_16_reg <= main_4_16;
		if (start == 1'b0 && ^(main_4_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %17 = zext i8 %16 to i32*/
		main_4_17 = main_4_16;
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %17 = zext i8 %16 to i32*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		main_4_17_reg <= main_4_17;
		if (start == 1'b0 && ^(main_4_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %18 = shl nuw nsw i32 %17, 16*/
		main_4_18 = (main_4_17 <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %18 = shl nuw nsw i32 %17, 16*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		main_4_18_reg <= main_4_18;
		if (start == 1'b0 && ^(main_4_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %19 = or i32 %15, %18*/
		main_4_19 = (main_4_15_reg | main_4_18);
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %19 = or i32 %15, %18*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		main_4_19_reg <= main_4_19;
		if (start == 1'b0 && ^(main_4_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %20 = load i8* %scevgep20, align 1, !tbaa !5*/
		main_4_20 = indata_out_b;
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %20 = load i8* %scevgep20, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		main_4_20_reg <= main_4_20;
		if (start == 1'b0 && ^(main_4_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %21 = zext i8 %20 to i32*/
		main_4_21 = main_4_20;
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %21 = zext i8 %20 to i32*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		main_4_21_reg <= main_4_21;
		if (start == 1'b0 && ^(main_4_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %22 = shl nuw i32 %21, 24*/
		main_4_22 = (main_4_21 <<< (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %22 = shl nuw i32 %21, 24*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		main_4_22_reg <= main_4_22;
		if (start == 1'b0 && ^(main_4_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %23 = or i32 %19, %22*/
		main_4_23 = (main_4_19 | main_4_22);
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %23 = or i32 %19, %22*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		main_4_23_reg <= main_4_23;
		if (start == 1'b0 && ^(main_4_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %indvar.next15 = add i32 %indvar14, 1*/
		main_4_indvarnext15 = (main_4_indvar14_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %indvar.next15 = add i32 %indvar14, 1*/
	if ((cur_state == LEGUP_F_main_BB__4_6)) begin
		main_4_indvarnext15_reg <= main_4_indvarnext15;
		if (start == 1'b0 && ^(main_4_indvarnext15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_indvarnext15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %exitcond16 = icmp eq i32 %indvar.next15, 16*/
		main_4_exitcond16 = (main_4_indvarnext15 == 32'd16);
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %exitcond16 = icmp eq i32 %indvar.next15, 16*/
	if ((cur_state == LEGUP_F_main_BB__4_6)) begin
		main_4_exitcond16_reg <= main_4_exitcond16;
		if (start == 1'b0 && ^(main_4_exitcond16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_exitcond16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %memcpy.exit.i*/
	/*   %indvar.next19 = add i32 %indvar18, 1*/
		main_memcpyexiti_indvarnext19 = (main_preheaderi_indvar18_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %memcpy.exit.i*/
	/*   %indvar.next19 = add i32 %indvar18, 1*/
	if ((cur_state == LEGUP_F_main_BB_memcpyexiti_11)) begin
		main_memcpyexiti_indvarnext19_reg <= main_memcpyexiti_indvarnext19;
		if (start == 1'b0 && ^(main_memcpyexiti_indvarnext19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_memcpyexiti_indvarnext19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %memcpy.exit.i*/
	/*   %exitcond24 = icmp eq i32 %indvar.next19, 128*/
		main_memcpyexiti_exitcond24 = (main_memcpyexiti_indvarnext19 == 32'd128);
end
always @(posedge clk) begin
	/* main: %memcpy.exit.i*/
	/*   %exitcond24 = icmp eq i32 %indvar.next19, 128*/
	if ((cur_state == LEGUP_F_main_BB_memcpyexiti_11)) begin
		main_memcpyexiti_exitcond24_reg <= main_memcpyexiti_exitcond24;
		if (start == 1'b0 && ^(main_memcpyexiti_exitcond24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_memcpyexiti_exitcond24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i8*/
	/*   %indvar4 = phi i32 [ 0, %.preheader.i8.preheader ], [ %indvar.next5, %memcpy.exit.i12 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi8preheader_14) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi8_indvar4 = 32'd0;
	end
	/* main: %.preheader.i8*/
	/*   %indvar4 = phi i32 [ 0, %.preheader.i8.preheader ], [ %indvar.next5, %memcpy.exit.i12 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_memcpyexiti12_23) & (memory_controller_waitrequest == 1'd0)) & (main_memcpyexiti12_exitcond9_reg == 1'd0))) */ begin
		main_preheaderi8_indvar4 = main_memcpyexiti12_indvarnext5_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i8*/
	/*   %indvar4 = phi i32 [ 0, %.preheader.i8.preheader ], [ %indvar.next5, %memcpy.exit.i12 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi8preheader_14) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi8_indvar4_reg <= main_preheaderi8_indvar4;
		if (start == 1'b0 && ^(main_preheaderi8_indvar4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi8_indvar4_reg"); $finish; end
	end
	/* main: %.preheader.i8*/
	/*   %indvar4 = phi i32 [ 0, %.preheader.i8.preheader ], [ %indvar.next5, %memcpy.exit.i12 ]*/
	if ((((cur_state == LEGUP_F_main_BB_memcpyexiti12_23) & (memory_controller_waitrequest == 1'd0)) & (main_memcpyexiti12_exitcond9_reg == 1'd0))) begin
		main_preheaderi8_indvar4_reg <= main_preheaderi8_indvar4;
		if (start == 1'b0 && ^(main_preheaderi8_indvar4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi8_indvar4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i8*/
	/*   %24 = shl i32 %indvar4, 6*/
		main_preheaderi8_24 = (main_preheaderi8_indvar4_reg <<< (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i8*/
	/*   %24 = shl i32 %indvar4, 6*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi8_15)) begin
		main_preheaderi8_24_reg <= main_preheaderi8_24;
		if (start == 1'b0 && ^(main_preheaderi8_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi8_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i8*/
	/*   %25 = or i32 %24, 1*/
		main_preheaderi8_25 = (main_preheaderi8_24 | 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i8*/
	/*   %25 = or i32 %24, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi8_15)) begin
		main_preheaderi8_25_reg <= main_preheaderi8_25;
		if (start == 1'b0 && ^(main_preheaderi8_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi8_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i8*/
	/*   %26 = or i32 %24, 2*/
		main_preheaderi8_26 = (main_preheaderi8_24 | 32'd2);
end
always @(posedge clk) begin
	/* main: %.preheader.i8*/
	/*   %26 = or i32 %24, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi8_15)) begin
		main_preheaderi8_26_reg <= main_preheaderi8_26;
		if (start == 1'b0 && ^(main_preheaderi8_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi8_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i8*/
	/*   %27 = or i32 %24, 3*/
		main_preheaderi8_27 = (main_preheaderi8_24 | 32'd3);
end
always @(posedge clk) begin
	/* main: %.preheader.i8*/
	/*   %27 = or i32 %24, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi8_15)) begin
		main_preheaderi8_27_reg <= main_preheaderi8_27;
		if (start == 1'b0 && ^(main_preheaderi8_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi8_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %28 ], [ 0, %.preheader.i8 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi8_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_28_indvar1 = 32'd0;
	end
	/* main: %28*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %28 ], [ 0, %.preheader.i8 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__28_20) & (memory_controller_waitrequest == 1'd0)) & (main_28_exitcond3_reg == 1'd0))) */ begin
		main_28_indvar1 = main_28_indvarnext2_reg;
	end
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %28 ], [ 0, %.preheader.i8 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi8_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_28_indvar1_reg <= main_28_indvar1;
		if (start == 1'b0 && ^(main_28_indvar1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_indvar1_reg"); $finish; end
	end
	/* main: %28*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %28 ], [ 0, %.preheader.i8 ]*/
	if ((((cur_state == LEGUP_F_main_BB__28_20) & (memory_controller_waitrequest == 1'd0)) & (main_28_exitcond3_reg == 1'd0))) begin
		main_28_indvar1_reg <= main_28_indvar1;
		if (start == 1'b0 && ^(main_28_indvar1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_indvar1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %29 = shl i32 %indvar1, 2*/
		main_28_29 = (main_28_indvar1_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %29 = shl i32 %indvar1, 2*/
	if ((cur_state == LEGUP_F_main_BB__28_16)) begin
		main_28_29_reg <= main_28_29;
		if (start == 1'b0 && ^(main_28_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %30 = add i32 %25, %29*/
		main_28_30 = (main_preheaderi8_25_reg + main_28_29);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %30 = add i32 %25, %29*/
	if ((cur_state == LEGUP_F_main_BB__28_16)) begin
		main_28_30_reg <= main_28_30;
		if (start == 1'b0 && ^(main_28_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %scevgep8 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 1, i32 %30*/
		main_28_scevgep8 = (1'd0 | ((8192 * 32'd1) + (1 * main_28_30_reg)));
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %scevgep8 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 1, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__28_17)) begin
		main_28_scevgep8_reg <= main_28_scevgep8;
		if (start == 1'b0 && ^(main_28_scevgep8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_scevgep8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %31 = add i32 %24, %29*/
		main_28_31 = (main_preheaderi8_24_reg + main_28_29);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %31 = add i32 %24, %29*/
	if ((cur_state == LEGUP_F_main_BB__28_16)) begin
		main_28_31_reg <= main_28_31;
		if (start == 1'b0 && ^(main_28_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %p2.01.i.i11 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 1, i32 %31*/
		main_28_p201ii11 = (1'd0 | ((8192 * 32'd1) + (1 * main_28_31_reg)));
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %p2.01.i.i11 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 1, i32 %31*/
	if ((cur_state == LEGUP_F_main_BB__28_17)) begin
		main_28_p201ii11_reg <= main_28_p201ii11;
		if (start == 1'b0 && ^(main_28_p201ii11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_p201ii11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %32 = add i32 %26, %29*/
		main_28_32 = (main_preheaderi8_26_reg + main_28_29);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %32 = add i32 %26, %29*/
	if ((cur_state == LEGUP_F_main_BB__28_16)) begin
		main_28_32_reg <= main_28_32;
		if (start == 1'b0 && ^(main_28_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %scevgep6 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 1, i32 %32*/
		main_28_scevgep6 = (1'd0 | ((8192 * 32'd1) + (1 * main_28_32_reg)));
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %scevgep6 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 1, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__28_17)) begin
		main_28_scevgep6_reg <= main_28_scevgep6;
		if (start == 1'b0 && ^(main_28_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_scevgep6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %33 = add i32 %27, %29*/
		main_28_33 = (main_preheaderi8_27_reg + main_28_29);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %33 = add i32 %27, %29*/
	if ((cur_state == LEGUP_F_main_BB__28_16)) begin
		main_28_33_reg <= main_28_33;
		if (start == 1'b0 && ^(main_28_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %scevgep = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 1, i32 %33*/
		main_28_scevgep = (1'd0 | ((8192 * 32'd1) + (1 * main_28_33_reg)));
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %scevgep = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 1, i32 %33*/
	if ((cur_state == LEGUP_F_main_BB__28_17)) begin
		main_28_scevgep_reg <= main_28_scevgep;
		if (start == 1'b0 && ^(main_28_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %p1.02.i.i10 = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %indvar1*/
		main_28_p102ii10 = (`TAG_g_sha_info_data_a | (4 * main_28_indvar1_reg));
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %p1.02.i.i10 = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %indvar1*/
	if ((cur_state == LEGUP_F_main_BB__28_16)) begin
		main_28_p102ii10_reg <= main_28_p102ii10;
		if (start == 1'b0 && ^(main_28_p102ii10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_p102ii10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %34 = load i8* %p2.01.i.i11, align 1, !tbaa !5*/
		main_28_34 = indata_out_a;
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %34 = load i8* %p2.01.i.i11, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_18)) begin
		main_28_34_reg <= main_28_34;
		if (start == 1'b0 && ^(main_28_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %35 = zext i8 %34 to i32*/
		main_28_35 = main_28_34;
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %35 = zext i8 %34 to i32*/
	if ((cur_state == LEGUP_F_main_BB__28_18)) begin
		main_28_35_reg <= main_28_35;
		if (start == 1'b0 && ^(main_28_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %36 = load i8* %scevgep8, align 1, !tbaa !5*/
		main_28_36 = indata_out_b;
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %36 = load i8* %scevgep8, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_18)) begin
		main_28_36_reg <= main_28_36;
		if (start == 1'b0 && ^(main_28_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %37 = zext i8 %36 to i32*/
		main_28_37 = main_28_36;
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %37 = zext i8 %36 to i32*/
	if ((cur_state == LEGUP_F_main_BB__28_18)) begin
		main_28_37_reg <= main_28_37;
		if (start == 1'b0 && ^(main_28_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %38 = shl nuw nsw i32 %37, 8*/
		main_28_38 = (main_28_37 <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %38 = shl nuw nsw i32 %37, 8*/
	if ((cur_state == LEGUP_F_main_BB__28_18)) begin
		main_28_38_reg <= main_28_38;
		if (start == 1'b0 && ^(main_28_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %39 = or i32 %38, %35*/
		main_28_39 = (main_28_38 | main_28_35);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %39 = or i32 %38, %35*/
	if ((cur_state == LEGUP_F_main_BB__28_18)) begin
		main_28_39_reg <= main_28_39;
		if (start == 1'b0 && ^(main_28_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %40 = load i8* %scevgep6, align 1, !tbaa !5*/
		main_28_40 = indata_out_a;
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %40 = load i8* %scevgep6, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		main_28_40_reg <= main_28_40;
		if (start == 1'b0 && ^(main_28_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %41 = zext i8 %40 to i32*/
		main_28_41 = main_28_40;
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %41 = zext i8 %40 to i32*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		main_28_41_reg <= main_28_41;
		if (start == 1'b0 && ^(main_28_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %42 = shl nuw nsw i32 %41, 16*/
		main_28_42 = (main_28_41 <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %42 = shl nuw nsw i32 %41, 16*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		main_28_42_reg <= main_28_42;
		if (start == 1'b0 && ^(main_28_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %43 = or i32 %39, %42*/
		main_28_43 = (main_28_39_reg | main_28_42);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %43 = or i32 %39, %42*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		main_28_43_reg <= main_28_43;
		if (start == 1'b0 && ^(main_28_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %44 = load i8* %scevgep, align 1, !tbaa !5*/
		main_28_44 = indata_out_b;
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %44 = load i8* %scevgep, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		main_28_44_reg <= main_28_44;
		if (start == 1'b0 && ^(main_28_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %45 = zext i8 %44 to i32*/
		main_28_45 = main_28_44;
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %45 = zext i8 %44 to i32*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		main_28_45_reg <= main_28_45;
		if (start == 1'b0 && ^(main_28_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %46 = shl nuw i32 %45, 24*/
		main_28_46 = (main_28_45 <<< (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %46 = shl nuw i32 %45, 24*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		main_28_46_reg <= main_28_46;
		if (start == 1'b0 && ^(main_28_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %47 = or i32 %43, %46*/
		main_28_47 = (main_28_43 | main_28_46);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %47 = or i32 %43, %46*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		main_28_47_reg <= main_28_47;
		if (start == 1'b0 && ^(main_28_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %indvar.next2 = add i32 %indvar1, 1*/
		main_28_indvarnext2 = (main_28_indvar1_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %indvar.next2 = add i32 %indvar1, 1*/
	if ((cur_state == LEGUP_F_main_BB__28_16)) begin
		main_28_indvarnext2_reg <= main_28_indvarnext2;
		if (start == 1'b0 && ^(main_28_indvarnext2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_indvarnext2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %exitcond3 = icmp eq i32 %indvar.next2, 16*/
		main_28_exitcond3 = (main_28_indvarnext2 == 32'd16);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %exitcond3 = icmp eq i32 %indvar.next2, 16*/
	if ((cur_state == LEGUP_F_main_BB__28_16)) begin
		main_28_exitcond3_reg <= main_28_exitcond3;
		if (start == 1'b0 && ^(main_28_exitcond3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_exitcond3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %memcpy.exit.i12*/
	/*   %indvar.next5 = add i32 %indvar4, 1*/
		main_memcpyexiti12_indvarnext5 = (main_preheaderi8_indvar4_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %memcpy.exit.i12*/
	/*   %indvar.next5 = add i32 %indvar4, 1*/
	if ((cur_state == LEGUP_F_main_BB_memcpyexiti12_21)) begin
		main_memcpyexiti12_indvarnext5_reg <= main_memcpyexiti12_indvarnext5;
		if (start == 1'b0 && ^(main_memcpyexiti12_indvarnext5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_memcpyexiti12_indvarnext5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %memcpy.exit.i12*/
	/*   %exitcond9 = icmp eq i32 %indvar.next5, 128*/
		main_memcpyexiti12_exitcond9 = (main_memcpyexiti12_indvarnext5 == 32'd128);
end
always @(posedge clk) begin
	/* main: %memcpy.exit.i12*/
	/*   %exitcond9 = icmp eq i32 %indvar.next5, 128*/
	if ((cur_state == LEGUP_F_main_BB_memcpyexiti12_21)) begin
		main_memcpyexiti12_exitcond9_reg <= main_memcpyexiti12_exitcond9;
		if (start == 1'b0 && ^(main_memcpyexiti12_exitcond9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_memcpyexiti12_exitcond9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.lr.ph.i8.i ], [ 0, %.lr.ph.i8.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphi8preheaderi_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi8i_indvar = 32'd0;
	end
	/* main: %.lr.ph.i8.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.lr.ph.i8.i ], [ 0, %.lr.ph.i8.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphi8i_28) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi8i_exitcond_reg == 1'd0))) */ begin
		main_lrphi8i_indvar = main_lrphi8i_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i8.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.lr.ph.i8.i ], [ 0, %.lr.ph.i8.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphi8preheaderi_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi8i_indvar_reg <= main_lrphi8i_indvar;
		if (start == 1'b0 && ^(main_lrphi8i_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8i_indvar_reg"); $finish; end
	end
	/* main: %.lr.ph.i8.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.lr.ph.i8.i ], [ 0, %.lr.ph.i8.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi8i_28) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi8i_exitcond_reg == 1'd0))) begin
		main_lrphi8i_indvar_reg <= main_lrphi8i_indvar;
		if (start == 1'b0 && ^(main_lrphi8i_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8i_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i*/
	/*   %48 = add i32 %indvar, 1*/
		main_lrphi8i_48 = (main_lrphi8i_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i8.i*/
	/*   %48 = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8i_26)) begin
		main_lrphi8i_48_reg <= main_lrphi8i_48;
		if (start == 1'b0 && ^(main_lrphi8i_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8i_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i*/
	/*   %p.11.i7.i = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %48*/
		main_lrphi8i_p11i7i = (`TAG_g_sha_info_data_a | (4 * main_lrphi8i_48_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i8.i*/
	/*   %p.11.i7.i = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %48*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8i_27)) begin
		main_lrphi8i_p11i7i_reg <= main_lrphi8i_p11i7i;
		if (start == 1'b0 && ^(main_lrphi8i_p11i7i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8i_p11i7i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_lrphi8i_indvarnext = (main_lrphi8i_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i8.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8i_26)) begin
		main_lrphi8i_indvarnext_reg <= main_lrphi8i_indvarnext;
		if (start == 1'b0 && ^(main_lrphi8i_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8i_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i*/
	/*   %exitcond = icmp eq i32 %indvar.next, 13*/
		main_lrphi8i_exitcond = (main_lrphi8i_indvarnext == 32'd13);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i8.i*/
	/*   %exitcond = icmp eq i32 %indvar.next, 13*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8i_26)) begin
		main_lrphi8i_exitcond_reg <= main_lrphi8i_exitcond;
		if (start == 1'b0 && ^(main_lrphi8i_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8i_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %49*/
	/*   %50 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
		main_49_50 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %49*/
	/*   %50 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__49_34)) begin
		main_49_50_reg <= main_49_50;
		if (start == 1'b0 && ^(main_49_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_49_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %49*/
	/*   %51 = icmp eq i32 %50, -1384908510*/
		main_49_51 = (main_49_50 == -32'd1384908510);
end
always @(posedge clk) begin
	/* main: %49*/
	/*   %51 = icmp eq i32 %50, -1384908510*/
	if ((cur_state == LEGUP_F_main_BB__49_34)) begin
		main_49_51_reg <= main_49_51;
		if (start == 1'b0 && ^(main_49_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_49_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %49*/
	/*   %52 = zext i1 %51 to i32*/
		main_49_52 = main_49_51;
end
always @(posedge clk) begin
	/* main: %49*/
	/*   %52 = zext i1 %51 to i32*/
	if ((cur_state == LEGUP_F_main_BB__49_34)) begin
		main_49_52_reg <= main_49_52;
		if (start == 1'b0 && ^(main_49_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_49_52_reg"); $finish; end
	end
end
always @(*) begin
	indata_address_a = 1'd0;
	/* main: %4*/
	/*   %10 = load i8* %p2.01.i.i, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_7)) begin
		indata_address_a = (main_4_p201ii >>> 3'd0);
	end
	/* main: %4*/
	/*   %16 = load i8* %scevgep21, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_8)) begin
		indata_address_a = (main_4_scevgep21_reg >>> 3'd0);
	end
	/* main: %28*/
	/*   %34 = load i8* %p2.01.i.i11, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_17)) begin
		indata_address_a = (main_28_p201ii11 >>> 3'd0);
	end
	/* main: %28*/
	/*   %40 = load i8* %scevgep6, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_18)) begin
		indata_address_a = (main_28_scevgep6_reg >>> 3'd0);
	end
end
always @(*) begin
	indata_write_enable_a = 1'd0;
	/* main: %4*/
	/*   %10 = load i8* %p2.01.i.i, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_7)) begin
		indata_write_enable_a = 1'd0;
	end
	/* main: %4*/
	/*   %16 = load i8* %scevgep21, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_8)) begin
		indata_write_enable_a = 1'd0;
	end
	/* main: %28*/
	/*   %34 = load i8* %p2.01.i.i11, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_17)) begin
		indata_write_enable_a = 1'd0;
	end
	/* main: %28*/
	/*   %40 = load i8* %scevgep6, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_18)) begin
		indata_write_enable_a = 1'd0;
	end
end
always @(*) begin
	indata_address_b = 1'd0;
	/* main: %4*/
	/*   %12 = load i8* %scevgep23, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_7)) begin
		indata_address_b = (main_4_scevgep23 >>> 3'd0);
	end
	/* main: %4*/
	/*   %20 = load i8* %scevgep20, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_8)) begin
		indata_address_b = (main_4_scevgep20_reg >>> 3'd0);
	end
	/* main: %28*/
	/*   %36 = load i8* %scevgep8, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_17)) begin
		indata_address_b = (main_28_scevgep8 >>> 3'd0);
	end
	/* main: %28*/
	/*   %44 = load i8* %scevgep, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_18)) begin
		indata_address_b = (main_28_scevgep_reg >>> 3'd0);
	end
end
always @(*) begin
	indata_write_enable_b = 1'd0;
	/* main: %4*/
	/*   %12 = load i8* %scevgep23, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_7)) begin
		indata_write_enable_b = 1'd0;
	end
	/* main: %4*/
	/*   %20 = load i8* %scevgep20, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_8)) begin
		indata_write_enable_b = 1'd0;
	end
	/* main: %28*/
	/*   %36 = load i8* %scevgep8, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_17)) begin
		indata_write_enable_b = 1'd0;
	end
	/* main: %28*/
	/*   %44 = load i8* %scevgep, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_18)) begin
		indata_write_enable_b = 1'd0;
	end
end
always @(posedge clk) begin
	/* main: %memcpy.exit.i*/
	/*   tail call void @sha_transform() #2*/
	if ((cur_state == LEGUP_F_main_BB_memcpyexiti_11)) begin
		sha_transform_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_12)) begin
		sha_transform_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_start"); $finish; end
	end
	/* main: %memcpy.exit.i12*/
	/*   tail call void @sha_transform() #2*/
	if ((cur_state == LEGUP_F_main_BB_memcpyexiti12_21)) begin
		sha_transform_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_22)) begin
		sha_transform_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_start"); $finish; end
	end
	/* main: %49*/
	/*   tail call void @sha_transform() #2*/
	if ((cur_state == LEGUP_F_main_BB__49_30)) begin
		sha_transform_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_31)) begin
		sha_transform_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_start"); $finish; end
	end
end
always @(*) begin
	sha_transform_finish_final = sha_transform_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_memcpyexiti_11))) begin
		sha_transform_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_finish_reg"); $finish; end
	end
	if (sha_transform_finish) begin
		sha_transform_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_memcpyexiti12_21))) begin
		sha_transform_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_finish_reg"); $finish; end
	end
	if (sha_transform_finish) begin
		sha_transform_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__49_30))) begin
		sha_transform_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_finish_reg"); $finish; end
	end
	if (sha_transform_finish) begin
		sha_transform_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_finish_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %memcpy.exit.i*/
	/*   tail call void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_12)) begin
		legup_function_call = 1'd1;
	end
	/* main: %memcpy.exit.i12*/
	/*   tail call void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_22)) begin
		legup_function_call = 1'd1;
	end
	/* main: %49*/
	/*   tail call void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_31)) begin
		legup_function_call = 1'd1;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %49*/
	/*   ret i32 %52*/
	if ((cur_state == LEGUP_F_main_BB__49_34)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %._crit_edge10.i*/
	/*   store i1 true, i1* @sha_info_digest.0, align 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge10.i*/
	/*   store i1 true, i1* @sha_info_digest.2, align 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 -1009589776, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %4*/
	/*   store i32 %23, i32* %p1.02.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i8.preheader.i*/
	/*   store i32 128, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8preheaderi_24)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i8.i*/
	/*   store i32 0, i32* %p.11.i7.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8i_27)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %49*/
	/*   store i32 0, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__49_29)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %._crit_edge10.i*/
	/*   store i1 true, i1* @sha_info_digest.0, align 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_1)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest0_a;
	end
	/* main: %._crit_edge10.i*/
	/*   store i1 true, i1* @sha_info_digest.2, align 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_2)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest2_a;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 -1009589776, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_3)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest4_a;
	end
	/* main: %4*/
	/*   store i32 %23, i32* %p1.02.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		memory_controller_address_a = main_4_p102ii_reg;
	end
	/* main: %.lr.ph.i8.preheader.i*/
	/*   store i32 128, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8preheaderi_24)) begin
		memory_controller_address_a = `TAG_g_sha_info_data_a;
	end
	/* main: %.lr.ph.i8.i*/
	/*   store i32 0, i32* %p.11.i7.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8i_27)) begin
		memory_controller_address_a = main_lrphi8i_p11i7i;
	end
	/* main: %49*/
	/*   store i32 0, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__49_29)) begin
		memory_controller_address_a = (`TAG_g_sha_info_data_a | (4 * 32'd14));
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %._crit_edge10.i*/
	/*   store i1 true, i1* @sha_info_digest.0, align 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %._crit_edge10.i*/
	/*   store i1 true, i1* @sha_info_digest.2, align 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 -1009589776, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %4*/
	/*   store i32 %23, i32* %p1.02.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i8.preheader.i*/
	/*   store i32 128, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8preheaderi_24)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i8.i*/
	/*   store i32 0, i32* %p.11.i7.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8i_27)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %49*/
	/*   store i32 0, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__49_29)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %._crit_edge10.i*/
	/*   store i1 true, i1* @sha_info_digest.0, align 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_1)) begin
		memory_controller_in_a = 1'd1;
	end
	/* main: %._crit_edge10.i*/
	/*   store i1 true, i1* @sha_info_digest.2, align 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_2)) begin
		memory_controller_in_a = 1'd1;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 -1009589776, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_3)) begin
		memory_controller_in_a = -32'd1009589776;
	end
	/* main: %4*/
	/*   store i32 %23, i32* %p1.02.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		memory_controller_in_a = main_4_23;
	end
	/* main: %.lr.ph.i8.preheader.i*/
	/*   store i32 128, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8preheaderi_24)) begin
		memory_controller_in_a = 32'd128;
	end
	/* main: %.lr.ph.i8.i*/
	/*   store i32 0, i32* %p.11.i7.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8i_27)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %49*/
	/*   store i32 0, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__49_29)) begin
		memory_controller_in_a = 32'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %._crit_edge10.i*/
	/*   store i1 true, i1* @sha_info_digest.0, align 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_1)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %._crit_edge10.i*/
	/*   store i1 true, i1* @sha_info_digest.2, align 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_2)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 -1009589776, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %4*/
	/*   store i32 %23, i32* %p1.02.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i8.preheader.i*/
	/*   store i32 128, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8preheaderi_24)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i8.i*/
	/*   store i32 0, i32* %p.11.i7.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8i_27)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %49*/
	/*   store i32 0, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__49_29)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %._crit_edge10.i*/
	/*   store i1 true, i1* @sha_info_digest.1, align 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge10.i*/
	/*   store i1 true, i1* @sha_info_digest.3, align 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %28*/
	/*   store i32 %47, i32* %p1.02.i.i10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %49*/
	/*   store i32 131072, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__49_29)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %49*/
	/*   %50 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__49_32)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %._crit_edge10.i*/
	/*   store i1 true, i1* @sha_info_digest.1, align 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_1)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest1_a;
	end
	/* main: %._crit_edge10.i*/
	/*   store i1 true, i1* @sha_info_digest.3, align 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_2)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest3_a;
	end
	/* main: %28*/
	/*   store i32 %47, i32* %p1.02.i.i10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		memory_controller_address_b = main_28_p102ii10_reg;
	end
	/* main: %49*/
	/*   store i32 131072, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__49_29)) begin
		memory_controller_address_b = (`TAG_g_sha_info_data_a | (4 * 32'd15));
	end
	/* main: %49*/
	/*   %50 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__49_32)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest4_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %._crit_edge10.i*/
	/*   store i1 true, i1* @sha_info_digest.1, align 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %._crit_edge10.i*/
	/*   store i1 true, i1* @sha_info_digest.3, align 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_2)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %28*/
	/*   store i32 %47, i32* %p1.02.i.i10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %49*/
	/*   store i32 131072, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__49_29)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %49*/
	/*   %50 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__49_32)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* main: %._crit_edge10.i*/
	/*   store i1 true, i1* @sha_info_digest.1, align 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_1)) begin
		memory_controller_in_b = 1'd1;
	end
	/* main: %._crit_edge10.i*/
	/*   store i1 true, i1* @sha_info_digest.3, align 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_2)) begin
		memory_controller_in_b = 1'd1;
	end
	/* main: %28*/
	/*   store i32 %47, i32* %p1.02.i.i10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		memory_controller_in_b = main_28_47;
	end
	/* main: %49*/
	/*   store i32 131072, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__49_29)) begin
		memory_controller_in_b = 32'd131072;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %._crit_edge10.i*/
	/*   store i1 true, i1* @sha_info_digest.1, align 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_1)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %._crit_edge10.i*/
	/*   store i1 true, i1* @sha_info_digest.3, align 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_2)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %28*/
	/*   store i32 %47, i32* %p1.02.i.i10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %49*/
	/*   store i32 131072, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__49_29)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %49*/
	/*   %50 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__49_32)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %49*/
	/*   ret i32 %52*/
	if ((cur_state == LEGUP_F_main_BB__49_34)) begin
		return_val <= main_49_52;
		if (start == 1'b0 && ^(main_49_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 

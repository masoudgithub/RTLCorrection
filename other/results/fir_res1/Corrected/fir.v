//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sun Jun 16 05:59:37 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 7
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @main.coefficients = private unnamed_addr constant [16 x i32] [i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10], align 4
`define TAG_g_maincoefficients `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_maincoefficients_a {`TAG_g_maincoefficients, 23'd0}
//   %1 = alloca i8*, align 4
`define TAG_legup_memset_4_0_1 `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_legup_memset_4_0_1_a {`TAG_legup_memset_4_0_1, 23'd0}
//   %2 = alloca i8, align 1
`define TAG_legup_memset_4_0_2 `MEMORY_CONTROLLER_TAG_SIZE'd5
`define TAG_legup_memset_4_0_2_a {`TAG_legup_memset_4_0_2, 23'd0}
//   %3 = alloca i32, align 4
`define TAG_legup_memset_4_0_3 `MEMORY_CONTROLLER_TAG_SIZE'd6
`define TAG_legup_memset_4_0_3_a {`TAG_legup_memset_4_0_3, 23'd0}
//   %c = alloca i32, align 4
`define TAG_legup_memset_4_0_c `MEMORY_CONTROLLER_TAG_SIZE'd7
`define TAG_legup_memset_4_0_c_a {`TAG_legup_memset_4_0_c, 23'd0}
//   %s = alloca i32*, align 4
`define TAG_legup_memset_4_0_s `MEMORY_CONTROLLER_TAG_SIZE'd8
`define TAG_legup_memset_4_0_s_a {`TAG_legup_memset_4_0_s, 23'd0}
//   %previous = alloca [16 x i32], align 4
`define TAG_main_0_previous `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_main_0_previous_a {`TAG_main_0_previous, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [3:0] maincoefficients_address_a;
reg [3:0] maincoefficients_address_b;
reg maincoefficients_write_enable_a;
reg maincoefficients_write_enable_b;
reg [31:0] maincoefficients_in_a;
reg [31:0] maincoefficients_in_b;
wire [31:0] maincoefficients_out_a;
wire [31:0] maincoefficients_out_b;

// @main.coefficients = private unnamed_addr constant [16 x i32] [i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10], align 4
rom_dual_port maincoefficients (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( maincoefficients_address_a ),
	.address_b( maincoefficients_address_b ),
	.q_a( maincoefficients_out_a ),
	.q_b( maincoefficients_out_b)
);
defparam maincoefficients.width_a = 32;
defparam maincoefficients.width_b = 32;
defparam maincoefficients.widthad_a = 4;
defparam maincoefficients.widthad_b = 4;
defparam maincoefficients.numwords_a = 16;
defparam maincoefficients.numwords_b = 16;
defparam maincoefficients.latency = ram_latency;
defparam maincoefficients.init_file = "maincoefficients.mif";

reg [3:0] main_0_previous_address_a;
reg [3:0] main_0_previous_address_b;
reg main_0_previous_write_enable_a;
reg main_0_previous_write_enable_b;
reg [31:0] main_0_previous_in_a;
reg [31:0] main_0_previous_in_b;
wire [31:0] main_0_previous_out_a;
wire [31:0] main_0_previous_out_b;

//   %previous = alloca [16 x i32], align 4
ram_dual_port main_0_previous (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_previous_address_a ),
	.address_b( main_0_previous_address_b ),
	.wren_a( main_0_previous_write_enable_a ),
	.wren_b( main_0_previous_write_enable_b ),
	.data_a( main_0_previous_in_a ),
	.data_b( main_0_previous_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_previous_out_a ),
	.q_b( main_0_previous_out_b)
);
defparam main_0_previous.width_a = 32;
defparam main_0_previous.width_b = 32;
defparam main_0_previous.widthad_a = 4;
defparam main_0_previous.widthad_b = 4;
defparam main_0_previous.width_be_a = 1;
defparam main_0_previous.width_be_b = 1;
defparam main_0_previous.numwords_a = 16;
defparam main_0_previous.numwords_b = 16;
defparam main_0_previous.latency = ram_latency;

reg [0:0] legup_memset_4_0_1_address_a;
reg [0:0] legup_memset_4_0_1_address_b;
reg legup_memset_4_0_1_write_enable_a;
reg legup_memset_4_0_1_write_enable_b;
reg [31:0] legup_memset_4_0_1_in_a;
reg [31:0] legup_memset_4_0_1_in_b;
wire [31:0] legup_memset_4_0_1_out_a;
wire [31:0] legup_memset_4_0_1_out_b;

//   %1 = alloca i8*, align 4
ram_dual_port legup_memset_4_0_1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memset_4_0_1_address_a ),
	.address_b( legup_memset_4_0_1_address_b ),
	.wren_a( legup_memset_4_0_1_write_enable_a ),
	.wren_b( legup_memset_4_0_1_write_enable_b ),
	.data_a( legup_memset_4_0_1_in_a ),
	.data_b( legup_memset_4_0_1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memset_4_0_1_out_a ),
	.q_b( legup_memset_4_0_1_out_b)
);
defparam legup_memset_4_0_1.width_a = 32;
defparam legup_memset_4_0_1.width_b = 32;
defparam legup_memset_4_0_1.widthad_a = 1;
defparam legup_memset_4_0_1.widthad_b = 1;
defparam legup_memset_4_0_1.width_be_a = 1;
defparam legup_memset_4_0_1.width_be_b = 1;
defparam legup_memset_4_0_1.numwords_a = 1;
defparam legup_memset_4_0_1.numwords_b = 1;
defparam legup_memset_4_0_1.latency = ram_latency;

reg [0:0] legup_memset_4_0_2_address_a;
reg [0:0] legup_memset_4_0_2_address_b;
reg legup_memset_4_0_2_write_enable_a;
reg legup_memset_4_0_2_write_enable_b;
reg [7:0] legup_memset_4_0_2_in_a;
reg [7:0] legup_memset_4_0_2_in_b;
wire [7:0] legup_memset_4_0_2_out_a;
wire [7:0] legup_memset_4_0_2_out_b;

//   %2 = alloca i8, align 1
ram_dual_port legup_memset_4_0_2 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memset_4_0_2_address_a ),
	.address_b( legup_memset_4_0_2_address_b ),
	.wren_a( legup_memset_4_0_2_write_enable_a ),
	.wren_b( legup_memset_4_0_2_write_enable_b ),
	.data_a( legup_memset_4_0_2_in_a ),
	.data_b( legup_memset_4_0_2_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memset_4_0_2_out_a ),
	.q_b( legup_memset_4_0_2_out_b)
);
defparam legup_memset_4_0_2.width_a = 8;
defparam legup_memset_4_0_2.width_b = 8;
defparam legup_memset_4_0_2.widthad_a = 1;
defparam legup_memset_4_0_2.widthad_b = 1;
defparam legup_memset_4_0_2.width_be_a = 1;
defparam legup_memset_4_0_2.width_be_b = 1;
defparam legup_memset_4_0_2.numwords_a = 1;
defparam legup_memset_4_0_2.numwords_b = 1;
defparam legup_memset_4_0_2.latency = ram_latency;

reg [0:0] legup_memset_4_0_3_address_a;
reg [0:0] legup_memset_4_0_3_address_b;
reg legup_memset_4_0_3_write_enable_a;
reg legup_memset_4_0_3_write_enable_b;
reg [31:0] legup_memset_4_0_3_in_a;
reg [31:0] legup_memset_4_0_3_in_b;
wire [31:0] legup_memset_4_0_3_out_a;
wire [31:0] legup_memset_4_0_3_out_b;

//   %3 = alloca i32, align 4
ram_dual_port legup_memset_4_0_3 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memset_4_0_3_address_a ),
	.address_b( legup_memset_4_0_3_address_b ),
	.wren_a( legup_memset_4_0_3_write_enable_a ),
	.wren_b( legup_memset_4_0_3_write_enable_b ),
	.data_a( legup_memset_4_0_3_in_a ),
	.data_b( legup_memset_4_0_3_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memset_4_0_3_out_a ),
	.q_b( legup_memset_4_0_3_out_b)
);
defparam legup_memset_4_0_3.width_a = 32;
defparam legup_memset_4_0_3.width_b = 32;
defparam legup_memset_4_0_3.widthad_a = 1;
defparam legup_memset_4_0_3.widthad_b = 1;
defparam legup_memset_4_0_3.width_be_a = 1;
defparam legup_memset_4_0_3.width_be_b = 1;
defparam legup_memset_4_0_3.numwords_a = 1;
defparam legup_memset_4_0_3.numwords_b = 1;
defparam legup_memset_4_0_3.latency = ram_latency;

reg [0:0] legup_memset_4_0_c_address_a;
reg [0:0] legup_memset_4_0_c_address_b;
reg legup_memset_4_0_c_write_enable_a;
reg legup_memset_4_0_c_write_enable_b;
reg [31:0] legup_memset_4_0_c_in_a;
reg [31:0] legup_memset_4_0_c_in_b;
wire [31:0] legup_memset_4_0_c_out_a;
wire [31:0] legup_memset_4_0_c_out_b;

//   %c = alloca i32, align 4
ram_dual_port legup_memset_4_0_c (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memset_4_0_c_address_a ),
	.address_b( legup_memset_4_0_c_address_b ),
	.wren_a( legup_memset_4_0_c_write_enable_a ),
	.wren_b( legup_memset_4_0_c_write_enable_b ),
	.data_a( legup_memset_4_0_c_in_a ),
	.data_b( legup_memset_4_0_c_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memset_4_0_c_out_a ),
	.q_b( legup_memset_4_0_c_out_b)
);
defparam legup_memset_4_0_c.width_a = 32;
defparam legup_memset_4_0_c.width_b = 32;
defparam legup_memset_4_0_c.widthad_a = 1;
defparam legup_memset_4_0_c.widthad_b = 1;
defparam legup_memset_4_0_c.width_be_a = 1;
defparam legup_memset_4_0_c.width_be_b = 1;
defparam legup_memset_4_0_c.numwords_a = 1;
defparam legup_memset_4_0_c.numwords_b = 1;
defparam legup_memset_4_0_c.latency = ram_latency;

reg [0:0] legup_memset_4_0_s_address_a;
reg [0:0] legup_memset_4_0_s_address_b;
reg legup_memset_4_0_s_write_enable_a;
reg legup_memset_4_0_s_write_enable_b;
reg [31:0] legup_memset_4_0_s_in_a;
reg [31:0] legup_memset_4_0_s_in_b;
wire [31:0] legup_memset_4_0_s_out_a;
wire [31:0] legup_memset_4_0_s_out_b;

//   %s = alloca i32*, align 4
ram_dual_port legup_memset_4_0_s (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memset_4_0_s_address_a ),
	.address_b( legup_memset_4_0_s_address_b ),
	.wren_a( legup_memset_4_0_s_write_enable_a ),
	.wren_b( legup_memset_4_0_s_write_enable_b ),
	.data_a( legup_memset_4_0_s_in_a ),
	.data_b( legup_memset_4_0_s_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memset_4_0_s_out_a ),
	.q_b( legup_memset_4_0_s_out_b)
);
defparam legup_memset_4_0_s.width_a = 32;
defparam legup_memset_4_0_s.width_b = 32;
defparam legup_memset_4_0_s.widthad_a = 1;
defparam legup_memset_4_0_s.widthad_b = 1;
defparam legup_memset_4_0_s.width_be_a = 1;
defparam legup_memset_4_0_s.width_be_b = 1;
defparam legup_memset_4_0_s.numwords_a = 1;
defparam legup_memset_4_0_s.numwords_b = 1;
defparam legup_memset_4_0_s.latency = ram_latency;
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_maincoefficients_a;
assign select_maincoefficients_a = (tag_a == `TAG_g_maincoefficients);
reg [ram_latency:0] select_maincoefficients_reg_a;
wire [31:0] memory_controller_maincoefficients_out_a;
assign memory_controller_maincoefficients_out_a = {32{ select_maincoefficients_reg_a[ram_latency]}} & maincoefficients_out_a;

wire select_main_0_previous_a;
assign select_main_0_previous_a = (tag_a == `TAG_main_0_previous);
reg [ram_latency:0] select_main_0_previous_reg_a;
wire [31:0] memory_controller_main_0_previous_out_a;
assign memory_controller_main_0_previous_out_a = {32{ select_main_0_previous_reg_a[ram_latency]}} & main_0_previous_out_a;

wire select_legup_memset_4_0_1_a;
assign select_legup_memset_4_0_1_a = (tag_a == `TAG_legup_memset_4_0_1);
reg [ram_latency:0] select_legup_memset_4_0_1_reg_a;
wire [31:0] memory_controller_legup_memset_4_0_1_out_a;
assign memory_controller_legup_memset_4_0_1_out_a = {32{ select_legup_memset_4_0_1_reg_a[ram_latency]}} & legup_memset_4_0_1_out_a;

wire select_legup_memset_4_0_2_a;
assign select_legup_memset_4_0_2_a = (tag_a == `TAG_legup_memset_4_0_2);
reg [ram_latency:0] select_legup_memset_4_0_2_reg_a;
wire [7:0] memory_controller_legup_memset_4_0_2_out_a;
assign memory_controller_legup_memset_4_0_2_out_a = {8{ select_legup_memset_4_0_2_reg_a[ram_latency]}} & legup_memset_4_0_2_out_a;

wire select_legup_memset_4_0_3_a;
assign select_legup_memset_4_0_3_a = (tag_a == `TAG_legup_memset_4_0_3);
reg [ram_latency:0] select_legup_memset_4_0_3_reg_a;
wire [31:0] memory_controller_legup_memset_4_0_3_out_a;
assign memory_controller_legup_memset_4_0_3_out_a = {32{ select_legup_memset_4_0_3_reg_a[ram_latency]}} & legup_memset_4_0_3_out_a;

wire select_legup_memset_4_0_c_a;
assign select_legup_memset_4_0_c_a = (tag_a == `TAG_legup_memset_4_0_c);
reg [ram_latency:0] select_legup_memset_4_0_c_reg_a;
wire [31:0] memory_controller_legup_memset_4_0_c_out_a;
assign memory_controller_legup_memset_4_0_c_out_a = {32{ select_legup_memset_4_0_c_reg_a[ram_latency]}} & legup_memset_4_0_c_out_a;

wire select_legup_memset_4_0_s_a;
assign select_legup_memset_4_0_s_a = (tag_a == `TAG_legup_memset_4_0_s);
reg [ram_latency:0] select_legup_memset_4_0_s_reg_a;
wire [31:0] memory_controller_legup_memset_4_0_s_out_a;
assign memory_controller_legup_memset_4_0_s_out_a = {32{ select_legup_memset_4_0_s_reg_a[ram_latency]}} & legup_memset_4_0_s_out_a;

always @(*)
begin
	maincoefficients_address_a = memory_controller_address_a [4-1+2:2] & {4{select_maincoefficients_a}};
	maincoefficients_write_enable_a = memory_controller_write_enable_a & select_maincoefficients_a;
	maincoefficients_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	main_0_previous_address_a = memory_controller_address_a [4-1+2:2] & {4{select_main_0_previous_a}};
	main_0_previous_write_enable_a = memory_controller_write_enable_a & select_main_0_previous_a;
	main_0_previous_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memset_4_0_1_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memset_4_0_1_a}};
	legup_memset_4_0_1_write_enable_a = memory_controller_write_enable_a & select_legup_memset_4_0_1_a;
	legup_memset_4_0_1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memset_4_0_2_address_a = memory_controller_address_a [1-1+0:0] & {1{select_legup_memset_4_0_2_a}};
	legup_memset_4_0_2_write_enable_a = memory_controller_write_enable_a & select_legup_memset_4_0_2_a;
	legup_memset_4_0_2_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	legup_memset_4_0_3_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memset_4_0_3_a}};
	legup_memset_4_0_3_write_enable_a = memory_controller_write_enable_a & select_legup_memset_4_0_3_a;
	legup_memset_4_0_3_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memset_4_0_c_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memset_4_0_c_a}};
	legup_memset_4_0_c_write_enable_a = memory_controller_write_enable_a & select_legup_memset_4_0_c_a;
	legup_memset_4_0_c_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memset_4_0_s_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memset_4_0_s_a}};
	legup_memset_4_0_s_write_enable_a = memory_controller_write_enable_a & select_legup_memset_4_0_s_a;
	legup_memset_4_0_s_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_maincoefficients_reg_a[ram_latency]}} | {2{select_main_0_previous_reg_a[ram_latency]}} | {2{select_legup_memset_4_0_1_reg_a[ram_latency]}} | {2{select_legup_memset_4_0_3_reg_a[ram_latency]}} | {2{select_legup_memset_4_0_c_reg_a[ram_latency]}} | {2{select_legup_memset_4_0_s_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_maincoefficients_out_a | memory_controller_main_0_previous_out_a | memory_controller_legup_memset_4_0_1_out_a | memory_controller_legup_memset_4_0_2_out_a | memory_controller_legup_memset_4_0_3_out_a | memory_controller_legup_memset_4_0_c_out_a | memory_controller_legup_memset_4_0_s_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_maincoefficients_reg_a[j+1] <= select_maincoefficients_reg_a[j];
select_main_0_previous_reg_a[j+1] <= select_main_0_previous_reg_a[j];
select_legup_memset_4_0_1_reg_a[j+1] <= select_legup_memset_4_0_1_reg_a[j];
select_legup_memset_4_0_2_reg_a[j+1] <= select_legup_memset_4_0_2_reg_a[j];
select_legup_memset_4_0_3_reg_a[j+1] <= select_legup_memset_4_0_3_reg_a[j];
select_legup_memset_4_0_c_reg_a[j+1] <= select_legup_memset_4_0_c_reg_a[j];
select_legup_memset_4_0_s_reg_a[j+1] <= select_legup_memset_4_0_s_reg_a[j];
end
always @(*)
begin
select_maincoefficients_reg_a[0] <= select_maincoefficients_a;
select_main_0_previous_reg_a[0] <= select_main_0_previous_a;
select_legup_memset_4_0_1_reg_a[0] <= select_legup_memset_4_0_1_a;
select_legup_memset_4_0_2_reg_a[0] <= select_legup_memset_4_0_2_a;
select_legup_memset_4_0_3_reg_a[0] <= select_legup_memset_4_0_3_a;
select_legup_memset_4_0_c_reg_a[0] <= select_legup_memset_4_0_c_a;
select_legup_memset_4_0_s_reg_a[0] <= select_legup_memset_4_0_s_a;
end

reg [2:0] select_not_struct_b;

wire select_maincoefficients_b;
assign select_maincoefficients_b = (tag_b == `TAG_g_maincoefficients);
reg [ram_latency:0] select_maincoefficients_reg_b;
wire [31:0] memory_controller_maincoefficients_out_b;
assign memory_controller_maincoefficients_out_b = {32{ select_maincoefficients_reg_b[ram_latency]}} & maincoefficients_out_b;

wire select_main_0_previous_b;
assign select_main_0_previous_b = (tag_b == `TAG_main_0_previous);
reg [ram_latency:0] select_main_0_previous_reg_b;
wire [31:0] memory_controller_main_0_previous_out_b;
assign memory_controller_main_0_previous_out_b = {32{ select_main_0_previous_reg_b[ram_latency]}} & main_0_previous_out_b;

wire select_legup_memset_4_0_1_b;
assign select_legup_memset_4_0_1_b = (tag_b == `TAG_legup_memset_4_0_1);
reg [ram_latency:0] select_legup_memset_4_0_1_reg_b;
wire [31:0] memory_controller_legup_memset_4_0_1_out_b;
assign memory_controller_legup_memset_4_0_1_out_b = {32{ select_legup_memset_4_0_1_reg_b[ram_latency]}} & legup_memset_4_0_1_out_b;

wire select_legup_memset_4_0_2_b;
assign select_legup_memset_4_0_2_b = (tag_b == `TAG_legup_memset_4_0_2);
reg [ram_latency:0] select_legup_memset_4_0_2_reg_b;
wire [7:0] memory_controller_legup_memset_4_0_2_out_b;
assign memory_controller_legup_memset_4_0_2_out_b = {8{ select_legup_memset_4_0_2_reg_b[ram_latency]}} & legup_memset_4_0_2_out_b;

wire select_legup_memset_4_0_3_b;
assign select_legup_memset_4_0_3_b = (tag_b == `TAG_legup_memset_4_0_3);
reg [ram_latency:0] select_legup_memset_4_0_3_reg_b;
wire [31:0] memory_controller_legup_memset_4_0_3_out_b;
assign memory_controller_legup_memset_4_0_3_out_b = {32{ select_legup_memset_4_0_3_reg_b[ram_latency]}} & legup_memset_4_0_3_out_b;

wire select_legup_memset_4_0_c_b;
assign select_legup_memset_4_0_c_b = (tag_b == `TAG_legup_memset_4_0_c);
reg [ram_latency:0] select_legup_memset_4_0_c_reg_b;
wire [31:0] memory_controller_legup_memset_4_0_c_out_b;
assign memory_controller_legup_memset_4_0_c_out_b = {32{ select_legup_memset_4_0_c_reg_b[ram_latency]}} & legup_memset_4_0_c_out_b;

wire select_legup_memset_4_0_s_b;
assign select_legup_memset_4_0_s_b = (tag_b == `TAG_legup_memset_4_0_s);
reg [ram_latency:0] select_legup_memset_4_0_s_reg_b;
wire [31:0] memory_controller_legup_memset_4_0_s_out_b;
assign memory_controller_legup_memset_4_0_s_out_b = {32{ select_legup_memset_4_0_s_reg_b[ram_latency]}} & legup_memset_4_0_s_out_b;

always @(*)
begin
	maincoefficients_address_b = memory_controller_address_b [4-1+2:2] & {4{select_maincoefficients_b}};
	maincoefficients_write_enable_b = memory_controller_write_enable_b & select_maincoefficients_b;
	maincoefficients_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	main_0_previous_address_b = memory_controller_address_b [4-1+2:2] & {4{select_main_0_previous_b}};
	main_0_previous_write_enable_b = memory_controller_write_enable_b & select_main_0_previous_b;
	main_0_previous_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memset_4_0_1_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memset_4_0_1_b}};
	legup_memset_4_0_1_write_enable_b = memory_controller_write_enable_b & select_legup_memset_4_0_1_b;
	legup_memset_4_0_1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memset_4_0_2_address_b = memory_controller_address_b [1-1+0:0] & {1{select_legup_memset_4_0_2_b}};
	legup_memset_4_0_2_write_enable_b = memory_controller_write_enable_b & select_legup_memset_4_0_2_b;
	legup_memset_4_0_2_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	legup_memset_4_0_3_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memset_4_0_3_b}};
	legup_memset_4_0_3_write_enable_b = memory_controller_write_enable_b & select_legup_memset_4_0_3_b;
	legup_memset_4_0_3_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memset_4_0_c_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memset_4_0_c_b}};
	legup_memset_4_0_c_write_enable_b = memory_controller_write_enable_b & select_legup_memset_4_0_c_b;
	legup_memset_4_0_c_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memset_4_0_s_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memset_4_0_s_b}};
	legup_memset_4_0_s_write_enable_b = memory_controller_write_enable_b & select_legup_memset_4_0_s_b;
	legup_memset_4_0_s_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_maincoefficients_reg_b[ram_latency]}} | {2{select_main_0_previous_reg_b[ram_latency]}} | {2{select_legup_memset_4_0_1_reg_b[ram_latency]}} | {2{select_legup_memset_4_0_3_reg_b[ram_latency]}} | {2{select_legup_memset_4_0_c_reg_b[ram_latency]}} | {2{select_legup_memset_4_0_s_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_maincoefficients_out_b | memory_controller_main_0_previous_out_b | memory_controller_legup_memset_4_0_1_out_b | memory_controller_legup_memset_4_0_2_out_b | memory_controller_legup_memset_4_0_3_out_b | memory_controller_legup_memset_4_0_c_out_b | memory_controller_legup_memset_4_0_s_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_maincoefficients_reg_b[j+1] <= select_maincoefficients_reg_b[j];
select_main_0_previous_reg_b[j+1] <= select_main_0_previous_reg_b[j];
select_legup_memset_4_0_1_reg_b[j+1] <= select_legup_memset_4_0_1_reg_b[j];
select_legup_memset_4_0_2_reg_b[j+1] <= select_legup_memset_4_0_2_reg_b[j];
select_legup_memset_4_0_3_reg_b[j+1] <= select_legup_memset_4_0_3_reg_b[j];
select_legup_memset_4_0_c_reg_b[j+1] <= select_legup_memset_4_0_c_reg_b[j];
select_legup_memset_4_0_s_reg_b[j+1] <= select_legup_memset_4_0_s_reg_b[j];
end
always @(*)
begin
select_maincoefficients_reg_b[0] <= select_maincoefficients_b;
select_main_0_previous_reg_b[0] <= select_main_0_previous_b;
select_legup_memset_4_0_1_reg_b[0] <= select_legup_memset_4_0_1_b;
select_legup_memset_4_0_2_reg_b[0] <= select_legup_memset_4_0_2_b;
select_legup_memset_4_0_3_reg_b[0] <= select_legup_memset_4_0_3_b;
select_legup_memset_4_0_c_reg_b[0] <= select_legup_memset_4_0_c_b;
select_legup_memset_4_0_s_reg_b[0] <= select_legup_memset_4_0_s_b;
end

endmodule 

`timescale 1 ns / 1 ns
module legup_memset_4
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_m,
	arg_c1,
	arg_n
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_legup_memset_4_BB__0_1 = 5'd1;
parameter [4:0] LEGUP_F_legup_memset_4_BB__0_2 = 5'd2;
parameter [4:0] LEGUP_F_legup_memset_4_BB__0_3 = 5'd3;
parameter [4:0] LEGUP_F_legup_memset_4_BB__0_4 = 5'd4;
parameter [4:0] LEGUP_F_legup_memset_4_BB__0_5 = 5'd5;
parameter [4:0] LEGUP_F_legup_memset_4_BB__0_6 = 5'd6;
parameter [4:0] LEGUP_F_legup_memset_4_BB__0_7 = 5'd7;
parameter [4:0] LEGUP_F_legup_memset_4_BB__0_8 = 5'd8;
parameter [4:0] LEGUP_F_legup_memset_4_BB__0_9 = 5'd9;
parameter [4:0] LEGUP_F_legup_memset_4_BB__0_10 = 5'd10;
parameter [4:0] LEGUP_F_legup_memset_4_BB__0_11 = 5'd11;
parameter [4:0] LEGUP_F_legup_memset_4_BB__0_12 = 5'd12;
parameter [4:0] LEGUP_F_legup_memset_4_BB__18_13 = 5'd13;
parameter [4:0] LEGUP_F_legup_memset_4_BB__18_14 = 5'd14;
parameter [4:0] LEGUP_F_legup_memset_4_BB__18_15 = 5'd15;
parameter [4:0] LEGUP_F_legup_memset_4_BB__18_16 = 5'd16;
parameter [4:0] LEGUP_F_legup_memset_4_BB__22_17 = 5'd17;
parameter [4:0] LEGUP_F_legup_memset_4_BB__22_18 = 5'd18;
parameter [4:0] LEGUP_F_legup_memset_4_BB__22_19 = 5'd19;
parameter [4:0] LEGUP_F_legup_memset_4_BB__22_20 = 5'd20;
parameter [4:0] LEGUP_F_legup_memset_4_BB__26_21 = 5'd21;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_m;
input [7:0] arg_c1;
input [31:0] arg_n;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [7:0] legup_memset_4_0_4;
reg [31:0] legup_memset_4_0_5;
reg [31:0] legup_memset_4_0_6;
reg [31:0] legup_memset_4_0_7;
reg [31:0] legup_memset_4_0_8;
reg [31:0] legup_memset_4_0_9;
reg [31:0] legup_memset_4_0_10;
reg [31:0] legup_memset_4_0_11;
reg [31:0] legup_memset_4_0_12;
reg [31:0] legup_memset_4_0_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_0_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_0_15;
reg [31:0] legup_memset_4_0_16;
reg [31:0] legup_memset_4_0_17;
reg [31:0] legup_memset_4_18_19;
reg [31:0] legup_memset_4_18_20;
reg  legup_memset_4_18_21;
reg  legup_memset_4_18_21_reg;
reg [31:0] legup_memset_4_22_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_22_24;
reg [31:0] legup_memset_4_22_gep_int;
reg [31:0] legup_memset_4_22_gep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_22_25;
reg [31:0] legup_memset_4_signed_add_32_0_op0;
reg [31:0] legup_memset_4_signed_add_32_0_op1;
reg [31:0] legup_memset_4_signed_add_32_0;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_legup_memset_4_BB__0_1;
LEGUP_F_legup_memset_4_BB__0_1:
		next_state = LEGUP_F_legup_memset_4_BB__0_2;
LEGUP_F_legup_memset_4_BB__0_10:
		next_state = LEGUP_F_legup_memset_4_BB__0_11;
LEGUP_F_legup_memset_4_BB__0_11:
		next_state = LEGUP_F_legup_memset_4_BB__0_12;
LEGUP_F_legup_memset_4_BB__0_12:
		next_state = LEGUP_F_legup_memset_4_BB__18_13;
LEGUP_F_legup_memset_4_BB__0_2:
		next_state = LEGUP_F_legup_memset_4_BB__0_3;
LEGUP_F_legup_memset_4_BB__0_3:
		next_state = LEGUP_F_legup_memset_4_BB__0_4;
LEGUP_F_legup_memset_4_BB__0_4:
		next_state = LEGUP_F_legup_memset_4_BB__0_5;
LEGUP_F_legup_memset_4_BB__0_5:
		next_state = LEGUP_F_legup_memset_4_BB__0_6;
LEGUP_F_legup_memset_4_BB__0_6:
		next_state = LEGUP_F_legup_memset_4_BB__0_7;
LEGUP_F_legup_memset_4_BB__0_7:
		next_state = LEGUP_F_legup_memset_4_BB__0_8;
LEGUP_F_legup_memset_4_BB__0_8:
		next_state = LEGUP_F_legup_memset_4_BB__0_9;
LEGUP_F_legup_memset_4_BB__0_9:
		next_state = LEGUP_F_legup_memset_4_BB__0_10;
LEGUP_F_legup_memset_4_BB__18_13:
		next_state = LEGUP_F_legup_memset_4_BB__18_14;
LEGUP_F_legup_memset_4_BB__18_14:
		next_state = LEGUP_F_legup_memset_4_BB__18_15;
LEGUP_F_legup_memset_4_BB__18_15:
		next_state = LEGUP_F_legup_memset_4_BB__18_16;
LEGUP_F_legup_memset_4_BB__18_16:
	if ((legup_memset_4_18_21_reg == 1'd1))
		next_state = LEGUP_F_legup_memset_4_BB__22_17;
	else if ((legup_memset_4_18_21_reg == 1'd0))
		next_state = LEGUP_F_legup_memset_4_BB__26_21;
LEGUP_F_legup_memset_4_BB__22_17:
		next_state = LEGUP_F_legup_memset_4_BB__22_18;
LEGUP_F_legup_memset_4_BB__22_18:
		next_state = LEGUP_F_legup_memset_4_BB__22_19;
LEGUP_F_legup_memset_4_BB__22_19:
		next_state = LEGUP_F_legup_memset_4_BB__22_20;
LEGUP_F_legup_memset_4_BB__22_20:
		next_state = LEGUP_F_legup_memset_4_BB__18_13;
LEGUP_F_legup_memset_4_BB__26_21:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %4 = load i8* %2, align 1*/
		legup_memset_4_0_4 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %5 = zext i8 %4 to i32*/
		legup_memset_4_0_5 = legup_memset_4_0_4;
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %6 = load i32* %c, align 4*/
		legup_memset_4_0_6 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %7 = shl i32 %6, 8*/
		legup_memset_4_0_7 = (legup_memset_4_0_6 <<< (32'd8 % 32));
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %8 = load i32* %c, align 4*/
		legup_memset_4_0_8 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %9 = or i32 %8, %7*/
		legup_memset_4_0_9 = (legup_memset_4_0_8 | legup_memset_4_0_7);
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %10 = load i32* %c, align 4*/
		legup_memset_4_0_10 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %11 = shl i32 %10, 16*/
		legup_memset_4_0_11 = (legup_memset_4_0_10 <<< (32'd16 % 32));
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %12 = load i32* %c, align 4*/
		legup_memset_4_0_12 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %13 = or i32 %12, %11*/
		legup_memset_4_0_13 = (legup_memset_4_0_12 | legup_memset_4_0_11);
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %14 = load i8** %1, align 4*/
		legup_memset_4_0_14 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %15 = bitcast i8* %14 to i32**/
		legup_memset_4_0_15 = legup_memset_4_0_14;
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %16 = load i32* %3, align 4*/
		legup_memset_4_0_16 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* legup_memset_4: %0*/
	/*   %17 = lshr i32 %16, 2*/
		legup_memset_4_0_17 = (legup_memset_4_0_16 >>> (32'd2 % 32));
end
always @(*) begin
	/* legup_memset_4: %18*/
	/*   %19 = load i32* %3, align 4*/
		legup_memset_4_18_19 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* legup_memset_4: %18*/
	/*   %20 = add i32 %19, -1*/
		legup_memset_4_18_20 = legup_memset_4_signed_add_32_0;
end
always @(*) begin
	/* legup_memset_4: %18*/
	/*   %21 = icmp ne i32 %19, 0*/
		legup_memset_4_18_21 = (legup_memset_4_18_19 != 32'd0);
end
always @(posedge clk) begin
	/* legup_memset_4: %18*/
	/*   %21 = icmp ne i32 %19, 0*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__18_15)) begin
		legup_memset_4_18_21_reg <= legup_memset_4_18_21;
		if (start == 1'b0 && ^(legup_memset_4_18_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_18_21_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4: %22*/
	/*   %23 = load i32* %c, align 4*/
		legup_memset_4_22_23 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* legup_memset_4: %22*/
	/*   %24 = load i32** %s, align 4*/
		legup_memset_4_22_24 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(*) begin
	/* legup_memset_4: %22*/
	/*   %gep_int = ptrtoint i32* %24 to i32*/
		legup_memset_4_22_gep_int = legup_memset_4_22_24;
end
always @(*) begin
	/* legup_memset_4: %22*/
	/*   %gep = add i32 %gep_int, 4*/
		legup_memset_4_22_gep = legup_memset_4_signed_add_32_0;
end
always @(*) begin
	/* legup_memset_4: %22*/
	/*   %25 = inttoptr i32 %gep to i32**/
		legup_memset_4_22_25 = legup_memset_4_22_gep;
end
always @(*) begin
	/* legup_memset_4: %18*/
	/*   %20 = add i32 %19, -1*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__18_15)) begin
		legup_memset_4_signed_add_32_0_op0 = legup_memset_4_18_19;
	end
	/* legup_memset_4: %22*/
	/*   %gep = add i32 %gep_int, 4*/
	else /* if ((cur_state == LEGUP_F_legup_memset_4_BB__22_19)) */ begin
		legup_memset_4_signed_add_32_0_op0 = legup_memset_4_22_gep_int;
	end
end
always @(*) begin
	/* legup_memset_4: %18*/
	/*   %20 = add i32 %19, -1*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__18_15)) begin
		legup_memset_4_signed_add_32_0_op1 = -32'd1;
	end
	/* legup_memset_4: %22*/
	/*   %gep = add i32 %gep_int, 4*/
	else /* if ((cur_state == LEGUP_F_legup_memset_4_BB__22_19)) */ begin
		legup_memset_4_signed_add_32_0_op1 = 32'd4;
	end
end
always @(*) begin
	legup_memset_4_signed_add_32_0 = (legup_memset_4_signed_add_32_0_op0 + legup_memset_4_signed_add_32_0_op1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* legup_memset_4: %26*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__26_21)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* legup_memset_4: %0*/
	/*   store i8* %m, i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   %4 = load i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %5, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   %6 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %9, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   %10 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   %16 = load i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %13, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   store i32* %15, i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memset_4: %18*/
	/*   %19 = load i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__18_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memset_4: %18*/
	/*   store i32 %20, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__18_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memset_4: %22*/
	/*   %23 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memset_4: %22*/
	/*   store i32* %25, i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_19)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* legup_memset_4: %0*/
	/*   store i8* %m, i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_1)) begin
		memory_controller_address_a = `TAG_legup_memset_4_0_1_a;
	end
	/* legup_memset_4: %0*/
	/*   %4 = load i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_2)) begin
		memory_controller_address_a = `TAG_legup_memset_4_0_2_a;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %5, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_4)) begin
		memory_controller_address_a = `TAG_legup_memset_4_0_c_a;
	end
	/* legup_memset_4: %0*/
	/*   %6 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_5)) begin
		memory_controller_address_a = `TAG_legup_memset_4_0_c_a;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %9, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_7)) begin
		memory_controller_address_a = `TAG_legup_memset_4_0_c_a;
	end
	/* legup_memset_4: %0*/
	/*   %10 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_8)) begin
		memory_controller_address_a = `TAG_legup_memset_4_0_c_a;
	end
	/* legup_memset_4: %0*/
	/*   %16 = load i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_9)) begin
		memory_controller_address_a = `TAG_legup_memset_4_0_3_a;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %13, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_10)) begin
		memory_controller_address_a = `TAG_legup_memset_4_0_c_a;
	end
	/* legup_memset_4: %0*/
	/*   store i32* %15, i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_11)) begin
		memory_controller_address_a = `TAG_legup_memset_4_0_s_a;
	end
	/* legup_memset_4: %18*/
	/*   %19 = load i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__18_13)) begin
		memory_controller_address_a = `TAG_legup_memset_4_0_3_a;
	end
	/* legup_memset_4: %18*/
	/*   store i32 %20, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__18_15)) begin
		memory_controller_address_a = `TAG_legup_memset_4_0_3_a;
	end
	/* legup_memset_4: %22*/
	/*   %23 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_17)) begin
		memory_controller_address_a = `TAG_legup_memset_4_0_c_a;
	end
	/* legup_memset_4: %22*/
	/*   store i32* %25, i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_19)) begin
		memory_controller_address_a = `TAG_legup_memset_4_0_s_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memset_4: %0*/
	/*   store i8* %m, i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   %4 = load i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %5, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_4)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   %6 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %9, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   %10 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memset_4: %0*/
	/*   %16 = load i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_9)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %13, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   store i32* %15, i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memset_4: %18*/
	/*   %19 = load i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__18_13)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memset_4: %18*/
	/*   store i32 %20, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__18_15)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memset_4: %22*/
	/*   %23 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_17)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memset_4: %22*/
	/*   store i32* %25, i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_19)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* legup_memset_4: %0*/
	/*   store i8* %m, i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_1)) begin
		memory_controller_in_a = arg_m;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %5, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_4)) begin
		memory_controller_in_a = legup_memset_4_0_5;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %9, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_7)) begin
		memory_controller_in_a = legup_memset_4_0_9;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %13, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_10)) begin
		memory_controller_in_a = legup_memset_4_0_13;
	end
	/* legup_memset_4: %0*/
	/*   store i32* %15, i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_11)) begin
		memory_controller_in_a = legup_memset_4_0_15;
	end
	/* legup_memset_4: %18*/
	/*   store i32 %20, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__18_15)) begin
		memory_controller_in_a = legup_memset_4_18_20;
	end
	/* legup_memset_4: %22*/
	/*   store i32* %25, i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_19)) begin
		memory_controller_in_a = legup_memset_4_22_25;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* legup_memset_4: %0*/
	/*   store i8* %m, i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memset_4: %0*/
	/*   %4 = load i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_2)) begin
		memory_controller_size_a = 2'd0;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %5, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memset_4: %0*/
	/*   %6 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %9, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memset_4: %0*/
	/*   %10 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memset_4: %0*/
	/*   %16 = load i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %13, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memset_4: %0*/
	/*   store i32* %15, i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memset_4: %18*/
	/*   %19 = load i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__18_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memset_4: %18*/
	/*   store i32 %20, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__18_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memset_4: %22*/
	/*   %23 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_17)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memset_4: %22*/
	/*   store i32* %25, i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_19)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* legup_memset_4: %0*/
	/*   store i8 %c1, i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %n, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   %8 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   %12 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   %14 = load i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %17, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memset_4: %22*/
	/*   %24 = load i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_17)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memset_4: %22*/
	/*   store i32 %23, i32* %24, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_19)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* legup_memset_4: %0*/
	/*   store i8 %c1, i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_1)) begin
		memory_controller_address_b = `TAG_legup_memset_4_0_2_a;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %n, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_2)) begin
		memory_controller_address_b = `TAG_legup_memset_4_0_3_a;
	end
	/* legup_memset_4: %0*/
	/*   %8 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_5)) begin
		memory_controller_address_b = `TAG_legup_memset_4_0_c_a;
	end
	/* legup_memset_4: %0*/
	/*   %12 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_8)) begin
		memory_controller_address_b = `TAG_legup_memset_4_0_c_a;
	end
	/* legup_memset_4: %0*/
	/*   %14 = load i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_9)) begin
		memory_controller_address_b = `TAG_legup_memset_4_0_1_a;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %17, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_11)) begin
		memory_controller_address_b = `TAG_legup_memset_4_0_3_a;
	end
	/* legup_memset_4: %22*/
	/*   %24 = load i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_17)) begin
		memory_controller_address_b = `TAG_legup_memset_4_0_s_a;
	end
	/* legup_memset_4: %22*/
	/*   store i32 %23, i32* %24, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_19)) begin
		memory_controller_address_b = legup_memset_4_22_24;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memset_4: %0*/
	/*   store i8 %c1, i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %n, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_2)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* legup_memset_4: %0*/
	/*   %8 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_5)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memset_4: %0*/
	/*   %12 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memset_4: %0*/
	/*   %14 = load i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_9)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %17, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_11)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* legup_memset_4: %22*/
	/*   %24 = load i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_17)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memset_4: %22*/
	/*   store i32 %23, i32* %24, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_19)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* legup_memset_4: %0*/
	/*   store i8 %c1, i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_1)) begin
		memory_controller_in_b = arg_c1;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %n, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_2)) begin
		memory_controller_in_b = arg_n;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %17, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_11)) begin
		memory_controller_in_b = legup_memset_4_0_17;
	end
	/* legup_memset_4: %22*/
	/*   store i32 %23, i32* %24, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_19)) begin
		memory_controller_in_b = legup_memset_4_22_23;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* legup_memset_4: %0*/
	/*   store i8 %c1, i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_1)) begin
		memory_controller_size_b = 2'd0;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %n, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memset_4: %0*/
	/*   %8 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memset_4: %0*/
	/*   %12 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memset_4: %0*/
	/*   %14 = load i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memset_4: %0*/
	/*   store i32 %17, i32* %3, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__0_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memset_4: %22*/
	/*   %24 = load i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_17)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memset_4: %22*/
	/*   store i32 %23, i32* %24, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_BB__22_19)) begin
		memory_controller_size_b = 2'd2;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_main_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_main_BB__0_3 = 6'd3;
parameter [5:0] LEGUP_F_main_BB__18_4 = 6'd4;
parameter [5:0] LEGUP_F_main_BB__18_5 = 6'd5;
parameter [5:0] LEGUP_F_main_BB__18_6 = 6'd6;
parameter [5:0] LEGUP_F_main_BB__18_7 = 6'd7;
parameter [5:0] LEGUP_F_main_BB__18_8 = 6'd8;
parameter [5:0] LEGUP_F_main_BB__18_9 = 6'd9;
parameter [5:0] LEGUP_F_main_BB__18_10 = 6'd10;
parameter [5:0] LEGUP_F_main_BB__18_11 = 6'd11;
parameter [5:0] LEGUP_F_main_BB__18_12 = 6'd12;
parameter [5:0] LEGUP_F_main_BB__18_13 = 6'd13;
parameter [5:0] LEGUP_F_main_BB__18_14 = 6'd14;
parameter [5:0] LEGUP_F_main_BB__18_15 = 6'd15;
parameter [5:0] LEGUP_F_main_BB__18_16 = 6'd16;
parameter [5:0] LEGUP_F_main_BB__18_17 = 6'd17;
parameter [5:0] LEGUP_F_main_BB__18_18 = 6'd18;
parameter [5:0] LEGUP_F_main_BB__18_19 = 6'd19;
parameter [5:0] LEGUP_F_main_BB__18_20 = 6'd20;
parameter [5:0] LEGUP_F_main_BB_preheaderipreheader_21 = 6'd21;
parameter [5:0] LEGUP_F_main_BB_preheaderipreheader_22 = 6'd22;
parameter [5:0] LEGUP_F_main_BB__crit_edgei_23 = 6'd23;
parameter [5:0] LEGUP_F_main_BB__crit_edgei_24 = 6'd24;
parameter [5:0] LEGUP_F_main_BB__crit_edgei_25 = 6'd25;
parameter [5:0] LEGUP_F_main_BB__crit_edgei_26 = 6'd26;
parameter [5:0] LEGUP_F_main_BB__crit_edgei_27 = 6'd27;
parameter [5:0] LEGUP_F_main_BB__crit_edgei_28 = 6'd28;
parameter [5:0] LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_29 = 6'd29;
parameter [5:0] LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_30 = 6'd30;
parameter [5:0] LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_31 = 6'd31;
parameter [5:0] LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_32 = 6'd32;
parameter [5:0] LEGUP_F_main_BB_FIRFilterStreamingexit_33 = 6'd33;
parameter [5:0] LEGUP_F_main_BB__48_34 = 6'd34;
parameter [5:0] LEGUP_F_main_BB__51_35 = 6'd35;
parameter [5:0] LEGUP_F_main_BB__53_36 = 6'd36;
parameter [5:0] LEGUP_F_main_BB__55_37 = 6'd37;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [5:0] LEGUP_function_call_2 = 6'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_1;
reg [31:0] main_0_gep_int;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_2_reg;
reg [31:0] main_0_gep_int1;
reg [31:0] main_0_gep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_3_reg;
reg [31:0] main_0_gep_int2;
reg [31:0] main_0_gep3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_4_reg;
reg [31:0] main_0_gep_int4;
reg [31:0] main_0_gep5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_5_reg;
reg [31:0] main_0_gep_int6;
reg [31:0] main_0_gep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_6_reg;
reg [31:0] main_0_gep_int8;
reg [31:0] main_0_gep9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_7_reg;
reg [31:0] main_0_gep_int10;
reg [31:0] main_0_gep11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_8_reg;
reg [31:0] main_0_gep_int12;
reg [31:0] main_0_gep13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_9_reg;
reg [31:0] main_0_gep_int14;
reg [31:0] main_0_gep15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_10_reg;
reg [31:0] main_0_gep_int16;
reg [31:0] main_0_gep17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_11_reg;
reg [31:0] main_0_gep_int18;
reg [31:0] main_0_gep19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_12_reg;
reg [31:0] main_0_gep_int20;
reg [31:0] main_0_gep21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_13_reg;
reg [31:0] main_0_gep_int22;
reg [31:0] main_0_gep23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_14_reg;
reg [31:0] main_0_gep_int24;
reg [31:0] main_0_gep25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_15_reg;
reg [31:0] main_0_gep_int26;
reg [31:0] main_0_gep27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_16_reg;
reg [31:0] main_0_gep_int28;
reg [31:0] main_0_gep29;
reg [31:0] main_0_gep29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_17_reg;
reg [31:0] main_18_19;
reg [31:0] main_18_19_reg;
reg [31:0] main_18_20;
reg [31:0] main_18_20_reg;
reg [31:0] main_18_21;
reg [31:0] main_18_21_reg;
reg [31:0] main_18_22;
reg [31:0] main_18_22_reg;
reg [31:0] main_18_23;
reg [31:0] main_18_23_reg;
reg [31:0] main_18_24;
reg [31:0] main_18_24_reg;
reg [31:0] main_18_25;
reg [31:0] main_18_25_reg;
reg [31:0] main_18_26;
reg [31:0] main_18_26_reg;
reg [31:0] main_18_27;
reg [31:0] main_18_27_reg;
reg [31:0] main_18_28;
reg [31:0] main_18_28_reg;
reg [31:0] main_18_29;
reg [31:0] main_18_29_reg;
reg [31:0] main_18_30;
reg [31:0] main_18_30_reg;
reg [31:0] main_18_31;
reg [31:0] main_18_31_reg;
reg [31:0] main_18_32;
reg [31:0] main_18_32_reg;
reg [31:0] main_18_33;
reg [31:0] main_18_33_reg;
reg [31:0] main_18_total04;
reg [31:0] main_18_total04_reg;
reg [31:0] main_18_i03;
reg [31:0] main_18_i03_reg;
reg  main_18_34;
reg  main_18_34_reg;
reg [31:0] main_preheaderipreheader_tmpi1;
reg [31:0] main_preheaderipreheader_tmp1i2;
reg [31:0] main_preheaderipreheader_35;
reg [31:0] main__crit_edgei_prei;
reg [31:0] main__crit_edgei_prei_reg;
reg [31:0] main__crit_edgei_36;
reg [31:0] main__crit_edgei_36_reg;
reg [31:0] main__crit_edgei_37;
reg [31:0] main__crit_edgei_37_reg;
reg [31:0] main__crit_edgei_38;
reg [31:0] main__crit_edgei_38_reg;
reg [31:0] main__crit_edgei_gep_int30;
reg [31:0] main__crit_edgei_gep_int30_reg;
reg [31:0] main__crit_edgei_gep_array;
reg [31:0] main__crit_edgei_gep_array_reg;
reg [31:0] main__crit_edgei_gep31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_39;
reg [31:0] main__crit_edgei_40;
reg [31:0] main__crit_edgei_gep_int32;
reg [31:0] main__crit_edgei_gep_int32_reg;
reg [31:0] main__crit_edgei_gep_array33;
reg [31:0] main__crit_edgei_gep_array33_reg;
reg [31:0] main__crit_edgei_gep34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_41;
reg [31:0] main__crit_edgei_42;
reg [31:0] main__crit_edgei_42_reg;
reg [31:0] main__crit_edgei_tmpi;
reg [31:0] main__crit_edgei_tmp1i;
reg [31:0] main__crit_edgei_43;
reg [31:0] main__crit_edgei_43_reg;
reg [31:0] main__crit_edgei_44;
reg [31:0] main__crit_edgei_44_reg;
reg [31:0] main__crit_edgei_45;
reg [31:0] main__crit_edgei_45_reg;
reg  main__crit_edgei_exitcondi;
reg  main__crit_edgei_exitcondi_reg;
reg [31:0] main__crit_edgei_crit_edgei_crit_edge_gep_int35;
reg [31:0] main__crit_edgei_crit_edgei_crit_edge_gep_int35_reg;
reg [31:0] main__crit_edgei_crit_edgei_crit_edge_gep_array36;
reg [31:0] main__crit_edgei_crit_edgei_crit_edge_gep_array36_reg;
reg [31:0] main__crit_edgei_crit_edgei_crit_edge_gep37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_crit_edgei_crit_edge_phitransinsertiphitransinsert;
reg [31:0] main__crit_edgei_crit_edgei_crit_edge_preipre;
reg [31:0] main_FIRFilterStreamingexit_0i;
reg [31:0] main_FIRFilterStreamingexit_0i_reg;
reg [31:0] main_FIRFilterStreamingexit_46;
reg [31:0] main_FIRFilterStreamingexit_47;
reg  main_FIRFilterStreamingexit_exitcond;
reg [31:0] main_48_lcssa1;
reg [31:0] main_48_lcssa1_reg;
reg  main_48_50;
reg  legup_memset_4_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_arg_m;
reg [7:0] legup_memset_4_arg_c1;
reg [31:0] legup_memset_4_arg_n;
wire  legup_memset_4_memory_controller_enable_a;
wire  legup_memset_4_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memset_4_memory_controller_in_a;
wire [1:0] legup_memset_4_memory_controller_size_a;
wire  legup_memset_4_memory_controller_enable_b;
wire  legup_memset_4_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memset_4_memory_controller_in_b;
wire [1:0] legup_memset_4_memory_controller_size_b;
reg  legup_memset_4_finish_final;
reg  legup_memset_4_finish_reg;
wire  legup_memset_4_finish;
reg  legup_function_call;
reg [31:0] main_signed_add_32_0_op0;
reg [31:0] main_signed_add_32_0_op1;
reg [31:0] main_signed_add_32_0;
reg [31:0] main_signed_add_32_8_op0;
reg [31:0] main_signed_add_32_8_op1;
reg [31:0] main_signed_add_32_8;
reg [31:0] main_signed_add_32_9_op0;
reg [31:0] main_signed_add_32_9_op1;
reg [31:0] main_signed_add_32_9;
reg [31:0] main_signed_add_32_10_op0;
reg [31:0] main_signed_add_32_10_op1;
reg [31:0] main_signed_add_32_10;
reg [31:0] main_signed_add_32_11_op0;
reg [31:0] main_signed_add_32_11_op1;
reg [31:0] main_signed_add_32_11;
reg [31:0] main_signed_add_32_1_op0;
reg [31:0] main_signed_add_32_1_op1;
reg [31:0] main_signed_add_32_1;
reg [31:0] main_signed_add_32_2_op0;
reg [31:0] main_signed_add_32_2_op1;
reg [31:0] main_signed_add_32_2;
reg [31:0] main_signed_add_32_3_op0;
reg [31:0] main_signed_add_32_3_op1;
reg [31:0] main_signed_add_32_3;
reg [31:0] main_signed_add_32_4_op0;
reg [31:0] main_signed_add_32_4_op1;
reg [31:0] main_signed_add_32_4;
reg [31:0] main_signed_add_32_5_op0;
reg [31:0] main_signed_add_32_5_op1;
reg [31:0] main_signed_add_32_5;
reg [31:0] main_signed_add_32_6_op0;
reg [31:0] main_signed_add_32_6_op1;
reg [31:0] main_signed_add_32_6;
reg [31:0] main_signed_add_32_7_op0;
reg [31:0] main_signed_add_32_7_op1;
reg [31:0] main_signed_add_32_7;
reg [31:0] main_signed_add_32_12_op0;
reg [31:0] main_signed_add_32_12_op1;
reg [31:0] main_signed_add_32_12;
reg [31:0] main_signed_add_32_13_op0;
reg [31:0] main_signed_add_32_13_op1;
reg [31:0] main_signed_add_32_13;
reg [31:0] main_signed_add_32_14_op0;
reg [31:0] main_signed_add_32_14_op1;
reg [31:0] main_signed_add_32_14;
reg [31:0] main_signed_multiply_32_0_op0;
reg [31:0] main_signed_multiply_32_0_op1;
reg  lpm_mult_main_preheaderipreheader_tmp1i2_en;
reg [31:0] main_preheaderipreheader_tmp1i2_stage0_reg;
reg [31:0] main_signed_multiply_32_0;
reg [31:0] main_signed_subtract_32_0_op0;
reg [31:0] main_signed_subtract_32_0_op1;
reg [31:0] main_signed_subtract_32_0;


legup_memset_4 legup_memset_4 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (legup_memset_4_memory_controller_enable_a),
	.memory_controller_address_a (legup_memset_4_memory_controller_address_a),
	.memory_controller_write_enable_a (legup_memset_4_memory_controller_write_enable_a),
	.memory_controller_in_a (legup_memset_4_memory_controller_in_a),
	.memory_controller_size_a (legup_memset_4_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (legup_memset_4_memory_controller_enable_b),
	.memory_controller_address_b (legup_memset_4_memory_controller_address_b),
	.memory_controller_write_enable_b (legup_memset_4_memory_controller_write_enable_b),
	.memory_controller_in_b (legup_memset_4_memory_controller_in_b),
	.memory_controller_size_b (legup_memset_4_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (legup_memset_4_start),
	.finish (legup_memset_4_finish),
	.arg_m (legup_memset_4_arg_m),
	.arg_c1 (legup_memset_4_arg_c1),
	.arg_n (legup_memset_4_arg_n)
);

defparam
	legup_memset_4.tag_offset = tag_offset;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %48*/
	/*   %49 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str, i32 0, i32 0), i32 %.lcssa1) #2*/
	if ((cur_state == LEGUP_F_main_BB__48_34)) begin
		$write("Result: %d\n", $signed(main_48_lcssa1_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_48_lcssa1_reg) === 1'bX) finish <= 0;
	end
	/* main: %51*/
	/*   %52 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__51_35)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %53*/
	/*   %54 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__53_36)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB_FIRFilterStreamingexit_33:
	if ((main_FIRFilterStreamingexit_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB__48_34;
	else if ((main_FIRFilterStreamingexit_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB__18_4;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_main_BB__0_3:
		next_state = LEGUP_F_main_BB__18_4;
LEGUP_F_main_BB__18_10:
		next_state = LEGUP_F_main_BB__18_11;
LEGUP_F_main_BB__18_11:
		next_state = LEGUP_F_main_BB__18_12;
LEGUP_F_main_BB__18_12:
		next_state = LEGUP_F_main_BB__18_13;
LEGUP_F_main_BB__18_13:
		next_state = LEGUP_F_main_BB__18_14;
LEGUP_F_main_BB__18_14:
		next_state = LEGUP_F_main_BB__18_15;
LEGUP_F_main_BB__18_15:
		next_state = LEGUP_F_main_BB__18_16;
LEGUP_F_main_BB__18_16:
		next_state = LEGUP_F_main_BB__18_17;
LEGUP_F_main_BB__18_17:
		next_state = LEGUP_F_main_BB__18_18;
LEGUP_F_main_BB__18_18:
		next_state = LEGUP_F_main_BB__18_19;
LEGUP_F_main_BB__18_19:
		next_state = LEGUP_F_main_BB__18_20;
LEGUP_F_main_BB__18_20:
	if ((main_18_34_reg == 1'd1))
		next_state = LEGUP_F_main_BB_FIRFilterStreamingexit_33;
	else if ((main_18_34_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderipreheader_21;
LEGUP_F_main_BB__18_4:
		next_state = LEGUP_F_main_BB__18_5;
LEGUP_F_main_BB__18_5:
		next_state = LEGUP_F_main_BB__18_6;
LEGUP_F_main_BB__18_6:
		next_state = LEGUP_F_main_BB__18_7;
LEGUP_F_main_BB__18_7:
		next_state = LEGUP_F_main_BB__18_8;
LEGUP_F_main_BB__18_8:
		next_state = LEGUP_F_main_BB__18_9;
LEGUP_F_main_BB__18_9:
		next_state = LEGUP_F_main_BB__18_10;
LEGUP_F_main_BB__48_34:
	if ((main_48_50 == 1'd1))
		next_state = LEGUP_F_main_BB__51_35;
	else if ((main_48_50 == 1'd0))
		next_state = LEGUP_F_main_BB__53_36;
LEGUP_F_main_BB__51_35:
		next_state = LEGUP_F_main_BB__55_37;
LEGUP_F_main_BB__53_36:
		next_state = LEGUP_F_main_BB__55_37;
LEGUP_F_main_BB__55_37:
		next_state = LEGUP_0;
LEGUP_F_main_BB__crit_edgei_23:
		next_state = LEGUP_F_main_BB__crit_edgei_24;
LEGUP_F_main_BB__crit_edgei_24:
		next_state = LEGUP_F_main_BB__crit_edgei_25;
LEGUP_F_main_BB__crit_edgei_25:
		next_state = LEGUP_F_main_BB__crit_edgei_26;
LEGUP_F_main_BB__crit_edgei_26:
		next_state = LEGUP_F_main_BB__crit_edgei_27;
LEGUP_F_main_BB__crit_edgei_27:
		next_state = LEGUP_F_main_BB__crit_edgei_28;
LEGUP_F_main_BB__crit_edgei_28:
	if ((main__crit_edgei_exitcondi_reg == 1'd1))
		next_state = LEGUP_F_main_BB_FIRFilterStreamingexit_33;
	else if ((main__crit_edgei_exitcondi_reg == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_29;
LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_29:
		next_state = LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_30;
LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_30:
		next_state = LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_31;
LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_31:
		next_state = LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_32;
LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_32:
		next_state = LEGUP_F_main_BB__crit_edgei_23;
LEGUP_F_main_BB_preheaderipreheader_21:
		next_state = LEGUP_F_main_BB_preheaderipreheader_22;
LEGUP_F_main_BB_preheaderipreheader_22:
		next_state = LEGUP_F_main_BB__crit_edgei_23;
LEGUP_function_call_2:
	if ((legup_memset_4_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_3;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %0*/
	/*   %1 = bitcast [16 x i32]* %previous to i8**/
if (reset) begin main_0_1 = 0; end
		main_0_1 = `TAG_main_0_previous_a;
end
always @(*) begin
	/* main: %0*/
	/*   %gep_int = ptrtoint [16 x i32]* %previous to i32*/
if (reset) begin main_0_gep_int = 0; end
		main_0_gep_int = `TAG_main_0_previous_a;
end
always @(*) begin
	/* main: %0*/
	/*   %2 = inttoptr i32 %gep_int to i32**/
		main_0_2 = main_0_gep_int;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %2 = inttoptr i32 %gep_int to i32**/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		main_0_2_reg <= main_0_2;
		if (start == 1'b0 && ^(main_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %gep_int1 = ptrtoint [16 x i32]* %previous to i32*/
if (reset) begin main_0_gep_int1 = 0; end
		main_0_gep_int1 = `TAG_main_0_previous_a;
end
always @(*) begin
	/* main: %0*/
	/*   %gep = add i32 %gep_int1, 56*/
		main_0_gep = main_signed_add_32_0;
end
always @(*) begin
	/* main: %0*/
	/*   %3 = inttoptr i32 %gep to i32**/
		main_0_3 = main_0_gep;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %3 = inttoptr i32 %gep to i32**/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		main_0_3_reg <= main_0_3;
		if (start == 1'b0 && ^(main_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %gep_int2 = ptrtoint [16 x i32]* %previous to i32*/
if (reset) begin main_0_gep_int2 = 0; end
		main_0_gep_int2 = `TAG_main_0_previous_a;
end
always @(*) begin
	/* main: %0*/
	/*   %gep3 = add i32 %gep_int2, 60*/
		main_0_gep3 = main_signed_add_32_1;
end
always @(*) begin
	/* main: %0*/
	/*   %4 = inttoptr i32 %gep3 to i32**/
		main_0_4 = main_0_gep3;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %4 = inttoptr i32 %gep3 to i32**/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		main_0_4_reg <= main_0_4;
		if (start == 1'b0 && ^(main_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %gep_int4 = ptrtoint [16 x i32]* %previous to i32*/
if (reset) begin main_0_gep_int4 = 0; end
		main_0_gep_int4 = `TAG_main_0_previous_a;
end
always @(*) begin
	/* main: %0*/
	/*   %gep5 = add i32 %gep_int4, 52*/
		main_0_gep5 = main_signed_add_32_2;
end
always @(*) begin
	/* main: %0*/
	/*   %5 = inttoptr i32 %gep5 to i32**/
		main_0_5 = main_0_gep5;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %5 = inttoptr i32 %gep5 to i32**/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		main_0_5_reg <= main_0_5;
		if (start == 1'b0 && ^(main_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %gep_int6 = ptrtoint [16 x i32]* %previous to i32*/
if (reset) begin main_0_gep_int6 = 0; end
		main_0_gep_int6 = `TAG_main_0_previous_a;
end
always @(*) begin
	/* main: %0*/
	/*   %gep7 = add i32 %gep_int6, 48*/
		main_0_gep7 = main_signed_add_32_3;
end
always @(*) begin
	/* main: %0*/
	/*   %6 = inttoptr i32 %gep7 to i32**/
		main_0_6 = main_0_gep7;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %6 = inttoptr i32 %gep7 to i32**/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		main_0_6_reg <= main_0_6;
		if (start == 1'b0 && ^(main_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %gep_int8 = ptrtoint [16 x i32]* %previous to i32*/
if (reset) begin main_0_gep_int8 = 0; end
		main_0_gep_int8 = `TAG_main_0_previous_a;
end
always @(*) begin
	/* main: %0*/
	/*   %gep9 = add i32 %gep_int8, 44*/
		main_0_gep9 = main_signed_add_32_4;
end
always @(*) begin
	/* main: %0*/
	/*   %7 = inttoptr i32 %gep9 to i32**/
		main_0_7 = main_0_gep9;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %7 = inttoptr i32 %gep9 to i32**/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		main_0_7_reg <= main_0_7;
		if (start == 1'b0 && ^(main_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %gep_int10 = ptrtoint [16 x i32]* %previous to i32*/
if (reset) begin main_0_gep_int10 = 0; end
		main_0_gep_int10 = `TAG_main_0_previous_a;
end
always @(*) begin
	/* main: %0*/
	/*   %gep11 = add i32 %gep_int10, 40*/
		main_0_gep11 = main_signed_add_32_5;
end
always @(*) begin
	/* main: %0*/
	/*   %8 = inttoptr i32 %gep11 to i32**/
		main_0_8 = main_0_gep11;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %8 = inttoptr i32 %gep11 to i32**/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		main_0_8_reg <= main_0_8;
		if (start == 1'b0 && ^(main_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %gep_int12 = ptrtoint [16 x i32]* %previous to i32*/
if (reset) begin main_0_gep_int12 = 0; end
		main_0_gep_int12 = `TAG_main_0_previous_a;
end
always @(*) begin
	/* main: %0*/
	/*   %gep13 = add i32 %gep_int12, 36*/
		main_0_gep13 = main_signed_add_32_6;
end
always @(*) begin
	/* main: %0*/
	/*   %9 = inttoptr i32 %gep13 to i32**/
		main_0_9 = main_0_gep13;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %9 = inttoptr i32 %gep13 to i32**/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		main_0_9_reg <= main_0_9;
		if (start == 1'b0 && ^(main_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %gep_int14 = ptrtoint [16 x i32]* %previous to i32*/
if (reset) begin main_0_gep_int14 = 0; end
		main_0_gep_int14 = `TAG_main_0_previous_a;
end
always @(*) begin
	/* main: %0*/
	/*   %gep15 = add i32 %gep_int14, 32*/
		main_0_gep15 = main_signed_add_32_7;
end
always @(*) begin
	/* main: %0*/
	/*   %10 = inttoptr i32 %gep15 to i32**/
		main_0_10 = main_0_gep15;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %10 = inttoptr i32 %gep15 to i32**/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		main_0_10_reg <= main_0_10;
		if (start == 1'b0 && ^(main_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %gep_int16 = ptrtoint [16 x i32]* %previous to i32*/
if (reset) begin main_0_gep_int16 = 0; end
		main_0_gep_int16 = `TAG_main_0_previous_a;
end
always @(*) begin
	/* main: %0*/
	/*   %gep17 = add i32 %gep_int16, 28*/
		main_0_gep17 = main_signed_add_32_8;
end
always @(*) begin
	/* main: %0*/
	/*   %11 = inttoptr i32 %gep17 to i32**/
		main_0_11 = main_0_gep17;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %11 = inttoptr i32 %gep17 to i32**/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		main_0_11_reg <= main_0_11;
		if (start == 1'b0 && ^(main_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %gep_int18 = ptrtoint [16 x i32]* %previous to i32*/
if (reset) begin main_0_gep_int18 = 0; end
		main_0_gep_int18 = `TAG_main_0_previous_a;
end
always @(*) begin
	/* main: %0*/
	/*   %gep19 = add i32 %gep_int18, 24*/
		main_0_gep19 = main_signed_add_32_9;
end
always @(*) begin
	/* main: %0*/
	/*   %12 = inttoptr i32 %gep19 to i32**/
		main_0_12 = main_0_gep19;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %12 = inttoptr i32 %gep19 to i32**/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		main_0_12_reg <= main_0_12;
		if (start == 1'b0 && ^(main_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %gep_int20 = ptrtoint [16 x i32]* %previous to i32*/
if (reset) begin main_0_gep_int20 = 0; end
		main_0_gep_int20 = `TAG_main_0_previous_a;
end
always @(*) begin
	/* main: %0*/
	/*   %gep21 = add i32 %gep_int20, 20*/
		main_0_gep21 = main_signed_add_32_10;
end
always @(*) begin
	/* main: %0*/
	/*   %13 = inttoptr i32 %gep21 to i32**/
		main_0_13 = main_0_gep21;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %13 = inttoptr i32 %gep21 to i32**/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		main_0_13_reg <= main_0_13;
		if (start == 1'b0 && ^(main_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %gep_int22 = ptrtoint [16 x i32]* %previous to i32*/
if (reset) begin main_0_gep_int22 = 0; end
		main_0_gep_int22 = `TAG_main_0_previous_a;
end
always @(*) begin
	/* main: %0*/
	/*   %gep23 = add i32 %gep_int22, 16*/
		main_0_gep23 = main_signed_add_32_11;
end
always @(*) begin
	/* main: %0*/
	/*   %14 = inttoptr i32 %gep23 to i32**/
		main_0_14 = main_0_gep23;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %14 = inttoptr i32 %gep23 to i32**/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		main_0_14_reg <= main_0_14;
		if (start == 1'b0 && ^(main_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %gep_int24 = ptrtoint [16 x i32]* %previous to i32*/
if (reset) begin main_0_gep_int24 = 0; end
		main_0_gep_int24 = `TAG_main_0_previous_a;
end
always @(*) begin
	/* main: %0*/
	/*   %gep25 = add i32 %gep_int24, 12*/
		main_0_gep25 = main_signed_add_32_12;
end
always @(*) begin
	/* main: %0*/
	/*   %15 = inttoptr i32 %gep25 to i32**/
		main_0_15 = main_0_gep25;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %15 = inttoptr i32 %gep25 to i32**/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		main_0_15_reg <= main_0_15;
		if (start == 1'b0 && ^(main_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %gep_int26 = ptrtoint [16 x i32]* %previous to i32*/
if (reset) begin main_0_gep_int26 = 0; end
		main_0_gep_int26 = `TAG_main_0_previous_a;
end
always @(*) begin
	/* main: %0*/
	/*   %gep27 = add i32 %gep_int26, 8*/
		main_0_gep27 = main_signed_add_32_13;
end
always @(*) begin
	/* main: %0*/
	/*   %16 = inttoptr i32 %gep27 to i32**/
		main_0_16 = main_0_gep27;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %16 = inttoptr i32 %gep27 to i32**/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		main_0_16_reg <= main_0_16;
		if (start == 1'b0 && ^(main_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %gep_int28 = ptrtoint [16 x i32]* %previous to i32*/
if (reset) begin main_0_gep_int28 = 0; end
		main_0_gep_int28 = `TAG_main_0_previous_a;
end
always @(*) begin
	/* main: %0*/
	/*   %gep29 = add i32 %gep_int28, 4*/
		main_0_gep29 = main_signed_add_32_14;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %gep29 = add i32 %gep_int28, 4*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		main_0_gep29_reg <= main_0_gep29;
		if (start == 1'b0 && ^(main_0_gep29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_gep29_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %45 = add nsw i32 %36, 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_23)) begin
		main_0_gep29_reg <= main__crit_edgei_45;
		if (start == 1'b0 && ^(main__crit_edgei_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_gep29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %17 = inttoptr i32 %gep29 to i32**/
		main_0_17 = main_0_gep29;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %17 = inttoptr i32 %gep29 to i32**/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		main_0_17_reg <= main_0_17;
		if (start == 1'b0 && ^(main_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %19 = phi i32 [ 0, %0 ], [ %i.03, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_19 = 32'd0;
	end
	/* main: %18*/
	/*   %19 = phi i32 [ 0, %0 ], [ %i.03, %FIRFilterStreaming.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) */ begin
		main_18_19 = main_18_i03_reg;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %19 = phi i32 [ 0, %0 ], [ %i.03, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_19_reg <= main_18_19;
		if (start == 1'b0 && ^(main_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_19_reg"); $finish; end
	end
	/* main: %18*/
	/*   %19 = phi i32 [ 0, %0 ], [ %i.03, %FIRFilterStreaming.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) begin
		main_18_19_reg <= main_18_19;
		if (start == 1'b0 && ^(main_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %20 = phi i32 [ 0, %0 ], [ %19, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_20 = 32'd0;
	end
	/* main: %18*/
	/*   %20 = phi i32 [ 0, %0 ], [ %19, %FIRFilterStreaming.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) */ begin
		main_18_20 = main_18_19_reg;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %20 = phi i32 [ 0, %0 ], [ %19, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_20_reg <= main_18_20;
		if (start == 1'b0 && ^(main_18_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_20_reg"); $finish; end
	end
	/* main: %18*/
	/*   %20 = phi i32 [ 0, %0 ], [ %19, %FIRFilterStreaming.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) begin
		main_18_20_reg <= main_18_20;
		if (start == 1'b0 && ^(main_18_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %21 = phi i32 [ 0, %0 ], [ %20, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_21 = 32'd0;
	end
	/* main: %18*/
	/*   %21 = phi i32 [ 0, %0 ], [ %20, %FIRFilterStreaming.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) */ begin
		main_18_21 = main_18_20_reg;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %21 = phi i32 [ 0, %0 ], [ %20, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_21_reg <= main_18_21;
		if (start == 1'b0 && ^(main_18_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_21_reg"); $finish; end
	end
	/* main: %18*/
	/*   %21 = phi i32 [ 0, %0 ], [ %20, %FIRFilterStreaming.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) begin
		main_18_21_reg <= main_18_21;
		if (start == 1'b0 && ^(main_18_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %22 = phi i32 [ 0, %0 ], [ %21, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_22 = 32'd0;
	end
	/* main: %18*/
	/*   %22 = phi i32 [ 0, %0 ], [ %21, %FIRFilterStreaming.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) */ begin
		main_18_22 = main_18_21_reg;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %22 = phi i32 [ 0, %0 ], [ %21, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_22_reg <= main_18_22;
		if (start == 1'b0 && ^(main_18_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_22_reg"); $finish; end
	end
	/* main: %18*/
	/*   %22 = phi i32 [ 0, %0 ], [ %21, %FIRFilterStreaming.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) begin
		main_18_22_reg <= main_18_22;
		if (start == 1'b0 && ^(main_18_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %23 = phi i32 [ 0, %0 ], [ %22, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_23 = 32'd0;
	end
	/* main: %18*/
	/*   %23 = phi i32 [ 0, %0 ], [ %22, %FIRFilterStreaming.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) */ begin
		main_18_23 = main_18_22_reg;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %23 = phi i32 [ 0, %0 ], [ %22, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_23_reg <= main_18_23;
		if (start == 1'b0 && ^(main_18_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_23_reg"); $finish; end
	end
	/* main: %18*/
	/*   %23 = phi i32 [ 0, %0 ], [ %22, %FIRFilterStreaming.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) begin
		main_18_23_reg <= main_18_23;
		if (start == 1'b0 && ^(main_18_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %24 = phi i32 [ 0, %0 ], [ %23, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_24 = 32'd0;
	end
	/* main: %18*/
	/*   %24 = phi i32 [ 0, %0 ], [ %23, %FIRFilterStreaming.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) */ begin
		main_18_24 = main_18_23_reg;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %24 = phi i32 [ 0, %0 ], [ %23, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_24_reg <= main_18_24;
		if (start == 1'b0 && ^(main_18_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_24_reg"); $finish; end
	end
	/* main: %18*/
	/*   %24 = phi i32 [ 0, %0 ], [ %23, %FIRFilterStreaming.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) begin
		main_18_24_reg <= main_18_24;
		if (start == 1'b0 && ^(main_18_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %25 = phi i32 [ 0, %0 ], [ %24, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_25 = 32'd0;
	end
	/* main: %18*/
	/*   %25 = phi i32 [ 0, %0 ], [ %24, %FIRFilterStreaming.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) */ begin
		main_18_25 = main_18_24_reg;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %25 = phi i32 [ 0, %0 ], [ %24, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_25_reg <= main_18_25;
		if (start == 1'b0 && ^(main_18_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_25_reg"); $finish; end
	end
	/* main: %18*/
	/*   %25 = phi i32 [ 0, %0 ], [ %24, %FIRFilterStreaming.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) begin
		main_18_25_reg <= main_18_25;
		if (start == 1'b0 && ^(main_18_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %26 = phi i32 [ 0, %0 ], [ %25, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_26 = 32'd0;
	end
	/* main: %18*/
	/*   %26 = phi i32 [ 0, %0 ], [ %25, %FIRFilterStreaming.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) */ begin
		main_18_26 = main_18_25_reg;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %26 = phi i32 [ 0, %0 ], [ %25, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_26_reg <= main_18_26;
		if (start == 1'b0 && ^(main_18_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_26_reg"); $finish; end
	end
	/* main: %18*/
	/*   %26 = phi i32 [ 0, %0 ], [ %25, %FIRFilterStreaming.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) begin
		main_18_26_reg <= main_18_26;
		if (start == 1'b0 && ^(main_18_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %27 = phi i32 [ 0, %0 ], [ %26, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_27 = 32'd0;
	end
	/* main: %18*/
	/*   %27 = phi i32 [ 0, %0 ], [ %26, %FIRFilterStreaming.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) */ begin
		main_18_27 = main_18_26_reg;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %27 = phi i32 [ 0, %0 ], [ %26, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_27_reg <= main_18_27;
		if (start == 1'b0 && ^(main_18_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_27_reg"); $finish; end
	end
	/* main: %18*/
	/*   %27 = phi i32 [ 0, %0 ], [ %26, %FIRFilterStreaming.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) begin
		main_18_27_reg <= main_18_27;
		if (start == 1'b0 && ^(main_18_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %28 = phi i32 [ 0, %0 ], [ %27, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_28 = 32'd0;
	end
	/* main: %18*/
	/*   %28 = phi i32 [ 0, %0 ], [ %27, %FIRFilterStreaming.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) */ begin
		main_18_28 = main_18_27_reg;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %28 = phi i32 [ 0, %0 ], [ %27, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_28_reg <= main_18_28;
		if (start == 1'b0 && ^(main_18_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_28_reg"); $finish; end
	end
	/* main: %18*/
	/*   %28 = phi i32 [ 0, %0 ], [ %27, %FIRFilterStreaming.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) begin
		main_18_28_reg <= main_18_28;
		if (start == 1'b0 && ^(main_18_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %29 = phi i32 [ 0, %0 ], [ %28, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_29 = 32'd0;
	end
	/* main: %18*/
	/*   %29 = phi i32 [ 0, %0 ], [ %28, %FIRFilterStreaming.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) */ begin
		main_18_29 = main_18_28_reg;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %29 = phi i32 [ 0, %0 ], [ %28, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_29_reg <= main_18_29;
		if (start == 1'b0 && ^(main_18_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_29_reg"); $finish; end
	end
	/* main: %18*/
	/*   %29 = phi i32 [ 0, %0 ], [ %28, %FIRFilterStreaming.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) begin
		main_18_29_reg <= main_18_29;
		if (start == 1'b0 && ^(main_18_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %30 = phi i32 [ 0, %0 ], [ %29, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_30 = 32'd0;
	end
	/* main: %18*/
	/*   %30 = phi i32 [ 0, %0 ], [ %29, %FIRFilterStreaming.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) */ begin
		main_18_30 = main_18_29_reg;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %30 = phi i32 [ 0, %0 ], [ %29, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_30_reg <= main_18_30;
		if (start == 1'b0 && ^(main_18_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_30_reg"); $finish; end
	end
	/* main: %18*/
	/*   %30 = phi i32 [ 0, %0 ], [ %29, %FIRFilterStreaming.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) begin
		main_18_30_reg <= main_18_30;
		if (start == 1'b0 && ^(main_18_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %31 = phi i32 [ 0, %0 ], [ %30, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_31 = 32'd0;
	end
	/* main: %18*/
	/*   %31 = phi i32 [ 0, %0 ], [ %30, %FIRFilterStreaming.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) */ begin
		main_18_31 = main_18_30_reg;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %31 = phi i32 [ 0, %0 ], [ %30, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_31_reg <= main_18_31;
		if (start == 1'b0 && ^(main_18_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_31_reg"); $finish; end
	end
	/* main: %18*/
	/*   %31 = phi i32 [ 0, %0 ], [ %30, %FIRFilterStreaming.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) begin
		main_18_31_reg <= main_18_31;
		if (start == 1'b0 && ^(main_18_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %32 = phi i32 [ 0, %0 ], [ %31, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_32 = 32'd0;
	end
	/* main: %18*/
	/*   %32 = phi i32 [ 0, %0 ], [ %31, %FIRFilterStreaming.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) */ begin
		main_18_32 = main_18_31_reg;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %32 = phi i32 [ 0, %0 ], [ %31, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_32_reg <= main_18_32;
		if (start == 1'b0 && ^(main_18_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_32_reg"); $finish; end
	end
	/* main: %18*/
	/*   %32 = phi i32 [ 0, %0 ], [ %31, %FIRFilterStreaming.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) begin
		main_18_32_reg <= main_18_32;
		if (start == 1'b0 && ^(main_18_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %33 = phi i32 [ 0, %0 ], [ %32, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_33 = 32'd0;
	end
	/* main: %18*/
	/*   %33 = phi i32 [ 0, %0 ], [ %32, %FIRFilterStreaming.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) */ begin
		main_18_33 = main_18_32_reg;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %33 = phi i32 [ 0, %0 ], [ %32, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_33_reg <= main_18_33;
		if (start == 1'b0 && ^(main_18_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_33_reg"); $finish; end
	end
	/* main: %18*/
	/*   %33 = phi i32 [ 0, %0 ], [ %32, %FIRFilterStreaming.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) begin
		main_18_33_reg <= main_18_33;
		if (start == 1'b0 && ^(main_18_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %total.04 = phi i32 [ 0, %0 ], [ %46, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_total04 = 32'd0;
	end
	/* main: %18*/
	/*   %total.04 = phi i32 [ 0, %0 ], [ %46, %FIRFilterStreaming.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) */ begin
		main_18_total04 = main_FIRFilterStreamingexit_46;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %total.04 = phi i32 [ 0, %0 ], [ %46, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_total04_reg <= main_18_total04;
		if (start == 1'b0 && ^(main_18_total04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_total04_reg"); $finish; end
	end
	/* main: %18*/
	/*   %total.04 = phi i32 [ 0, %0 ], [ %46, %FIRFilterStreaming.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) begin
		main_18_total04_reg <= main_18_total04;
		if (start == 1'b0 && ^(main_18_total04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_total04_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %i.03 = phi i32 [ 1, %0 ], [ %47, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_i03 = 32'd1;
	end
	/* main: %18*/
	/*   %i.03 = phi i32 [ 1, %0 ], [ %47, %FIRFilterStreaming.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) */ begin
		main_18_i03 = main_FIRFilterStreamingexit_47;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %i.03 = phi i32 [ 1, %0 ], [ %47, %FIRFilterStreaming.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_i03_reg <= main_18_i03;
		if (start == 1'b0 && ^(main_18_i03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_i03_reg"); $finish; end
	end
	/* main: %18*/
	/*   %i.03 = phi i32 [ 1, %0 ], [ %47, %FIRFilterStreaming.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd0))) begin
		main_18_i03_reg <= main_18_i03;
		if (start == 1'b0 && ^(main_18_i03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_i03_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %34 = icmp eq i32 %33, 0*/
		main_18_34 = (main_18_33_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %34 = icmp eq i32 %33, 0*/
	if ((cur_state == LEGUP_F_main_BB__18_4)) begin
		main_18_34_reg <= main_18_34;
		if (start == 1'b0 && ^(main_18_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.preheader*/
	/*   %tmp.i1 = add i32 %33, %i.03*/
		main_preheaderipreheader_tmpi1 = main_signed_add_32_0;
end
always @(*) begin
	main_preheaderipreheader_tmp1i2 = main_signed_multiply_32_0;
end
always @(*) begin
	/* main: %.preheader.i.preheader*/
	/*   %35 = add i32 %i.03, %tmp1.i2*/
		main_preheaderipreheader_35 = main_signed_add_32_0;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %.pre.i = phi i32 [ %19, %.preheader.i.preheader ], [ %.pre.i.pre, %._crit_edge.i.._crit_edge.i_crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_22) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_prei = main_18_19_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %.pre.i = phi i32 [ %19, %.preheader.i.preheader ], [ %.pre.i.pre, %._crit_edge.i.._crit_edge.i_crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_32) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edgei_prei = main__crit_edgei_crit_edgei_crit_edge_preipre;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %.pre.i = phi i32 [ %19, %.preheader.i.preheader ], [ %.pre.i.pre, %._crit_edge.i.._crit_edge.i_crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_22) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_prei_reg <= main__crit_edgei_prei;
		if (start == 1'b0 && ^(main__crit_edgei_prei) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_prei_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %.pre.i = phi i32 [ %19, %.preheader.i.preheader ], [ %.pre.i.pre, %._crit_edge.i.._crit_edge.i_crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_32) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_prei_reg <= main__crit_edgei_prei;
		if (start == 1'b0 && ^(main__crit_edgei_prei) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_prei_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %36 = phi i32 [ 1, %.preheader.i.preheader ], [ %45, %._crit_edge.i.._crit_edge.i_crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_22) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_36 = 32'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %36 = phi i32 [ 1, %.preheader.i.preheader ], [ %45, %._crit_edge.i.._crit_edge.i_crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_32) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edgei_36 = main__crit_edgei_45_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %36 = phi i32 [ 1, %.preheader.i.preheader ], [ %45, %._crit_edge.i.._crit_edge.i_crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_22) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_36_reg <= main__crit_edgei_36;
		if (start == 1'b0 && ^(main__crit_edgei_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_36_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %36 = phi i32 [ 1, %.preheader.i.preheader ], [ %45, %._crit_edge.i.._crit_edge.i_crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_32) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_36_reg <= main__crit_edgei_36;
		if (start == 1'b0 && ^(main__crit_edgei_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %37 = phi i32 [ %35, %.preheader.i.preheader ], [ %44, %._crit_edge.i.._crit_edge.i_crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_22) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_37 = main_preheaderipreheader_35;
	end
	/* main: %._crit_edge.i*/
	/*   %37 = phi i32 [ %35, %.preheader.i.preheader ], [ %44, %._crit_edge.i.._crit_edge.i_crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_32) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edgei_37 = main__crit_edgei_44_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %37 = phi i32 [ %35, %.preheader.i.preheader ], [ %44, %._crit_edge.i.._crit_edge.i_crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_22) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_37_reg <= main__crit_edgei_37;
		if (start == 1'b0 && ^(main__crit_edgei_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_37_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %37 = phi i32 [ %35, %.preheader.i.preheader ], [ %44, %._crit_edge.i.._crit_edge.i_crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_32) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_37_reg <= main__crit_edgei_37;
		if (start == 1'b0 && ^(main__crit_edgei_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %38 = sub i32 15, %36*/
		main__crit_edgei_38 = main_signed_subtract_32_0;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %38 = sub i32 15, %36*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_23)) begin
		main__crit_edgei_38_reg <= main__crit_edgei_38;
		if (start == 1'b0 && ^(main__crit_edgei_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int30 = ptrtoint [16 x i32]* %previous to i32*/
if (reset) begin main__crit_edgei_gep_int30 = 0; end
		main__crit_edgei_gep_int30 = `TAG_main_0_previous_a;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int30 = ptrtoint [16 x i32]* %previous to i32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_23)) begin
		main__crit_edgei_gep_int30_reg <= main__crit_edgei_gep_int30;
		if (start == 1'b0 && ^(main__crit_edgei_gep_int30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_int30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array = mul i32 %38, 4*/
		main__crit_edgei_gep_array = (main__crit_edgei_38_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array = mul i32 %38, 4*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_24)) begin
		main__crit_edgei_gep_array_reg <= main__crit_edgei_gep_array;
		if (start == 1'b0 && ^(main__crit_edgei_gep_array) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_array_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep31 = add i32 %gep_int30, %gep_array*/
		main__crit_edgei_gep31 = main_signed_add_32_0;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %39 = inttoptr i32 %gep31 to i32**/
		main__crit_edgei_39 = main__crit_edgei_gep31;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
		main__crit_edgei_40 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int32 = ptrtoint [16 x i32]* @main.coefficients to i32*/
if (reset) begin main__crit_edgei_gep_int32 = 0; end
		main__crit_edgei_gep_int32 = `TAG_g_maincoefficients_a;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int32 = ptrtoint [16 x i32]* @main.coefficients to i32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_23)) begin
		main__crit_edgei_gep_int32_reg <= main__crit_edgei_gep_int32;
		if (start == 1'b0 && ^(main__crit_edgei_gep_int32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_int32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array33 = mul i32 %36, 4*/
		main__crit_edgei_gep_array33 = (main__crit_edgei_36_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array33 = mul i32 %36, 4*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_23)) begin
		main__crit_edgei_gep_array33_reg <= main__crit_edgei_gep_array33;
		if (start == 1'b0 && ^(main__crit_edgei_gep_array33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_array33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep34 = add i32 %gep_int32, %gep_array33*/
		main__crit_edgei_gep34 = main_signed_add_32_0;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %41 = inttoptr i32 %gep34 to i32**/
		main__crit_edgei_41 = main__crit_edgei_gep34;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %42 = load i32* %41, align 4, !tbaa !1*/
		main__crit_edgei_42 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %42 = load i32* %41, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_26)) begin
		main__crit_edgei_42_reg <= main__crit_edgei_42;
		if (start == 1'b0 && ^(main__crit_edgei_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %tmp.i = add i32 %40, %.pre.i*/
		main__crit_edgei_tmpi = main_signed_add_32_0;
end
always @(*) begin
	main__crit_edgei_tmp1i = main_signed_multiply_32_0;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %43 = add i32 %37, %.pre.i*/
		main__crit_edgei_43 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %43 = add i32 %37, %.pre.i*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_23)) begin
		main__crit_edgei_43_reg <= main__crit_edgei_43;
		if (start == 1'b0 && ^(main__crit_edgei_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %44 = add i32 %43, %tmp1.i*/
		main__crit_edgei_44 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %44 = add i32 %43, %tmp1.i*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_28)) begin
		main__crit_edgei_44_reg <= main__crit_edgei_44;
		if (start == 1'b0 && ^(main__crit_edgei_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %45 = add nsw i32 %36, 1*/
		main__crit_edgei_45 = main_signed_add_32_14;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %45 = add nsw i32 %36, 1*/
	main__crit_edgei_45_reg = main_0_gep29_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %exitcond.i = icmp eq i32 %45, 16*/
		main__crit_edgei_exitcondi = (main__crit_edgei_45 == 32'd16);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %exitcond.i = icmp eq i32 %45, 16*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_23)) begin
		main__crit_edgei_exitcondi_reg <= main__crit_edgei_exitcondi;
		if (start == 1'b0 && ^(main__crit_edgei_exitcondi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_exitcondi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.._crit_edge.i_crit_edge*/
	/*   %gep_int35 = ptrtoint [16 x i32]* %previous to i32*/
if (reset) begin main__crit_edgei_crit_edgei_crit_edge_gep_int35 = 0; end
		main__crit_edgei_crit_edgei_crit_edge_gep_int35 = `TAG_main_0_previous_a;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.._crit_edge.i_crit_edge*/
	/*   %gep_int35 = ptrtoint [16 x i32]* %previous to i32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_29)) begin
		main__crit_edgei_crit_edgei_crit_edge_gep_int35_reg <= main__crit_edgei_crit_edgei_crit_edge_gep_int35;
		if (start == 1'b0 && ^(main__crit_edgei_crit_edgei_crit_edge_gep_int35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_crit_edgei_crit_edge_gep_int35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.._crit_edge.i_crit_edge*/
	/*   %gep_array36 = mul i32 %45, 4*/
		main__crit_edgei_crit_edgei_crit_edge_gep_array36 = (main__crit_edgei_45_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.._crit_edge.i_crit_edge*/
	/*   %gep_array36 = mul i32 %45, 4*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_29)) begin
		main__crit_edgei_crit_edgei_crit_edge_gep_array36_reg <= main__crit_edgei_crit_edgei_crit_edge_gep_array36;
		if (start == 1'b0 && ^(main__crit_edgei_crit_edgei_crit_edge_gep_array36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_crit_edgei_crit_edge_gep_array36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.._crit_edge.i_crit_edge*/
	/*   %gep37 = add i32 %gep_int35, %gep_array36*/
		main__crit_edgei_crit_edgei_crit_edge_gep37 = main_signed_add_32_0;
end
always @(*) begin
	/* main: %._crit_edge.i.._crit_edge.i_crit_edge*/
	/*   %.phi.trans.insert.i.phi.trans.insert = inttoptr i32 %gep37 to i32**/
		main__crit_edgei_crit_edgei_crit_edge_phitransinsertiphitransinsert = main__crit_edgei_crit_edgei_crit_edge_gep37;
end
always @(*) begin
	/* main: %._crit_edge.i.._crit_edge.i_crit_edge*/
	/*   %.pre.i.pre = load i32* %.phi.trans.insert.i.phi.trans.insert, align 4, !tbaa !1*/
		main__crit_edgei_crit_edgei_crit_edge_preipre = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %FIRFilterStreaming.exit*/
	/*   %.0.i = phi i32 [ 0, %18 ], [ %44, %._crit_edge.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__18_20) & (memory_controller_waitrequest == 1'd0)) & (main_18_34_reg == 1'd1))) begin
		main_FIRFilterStreamingexit_0i = 32'd0;
	end
	/* main: %FIRFilterStreaming.exit*/
	/*   %.0.i = phi i32 [ 0, %18 ], [ %44, %._crit_edge.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edgei_28) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei_exitcondi_reg == 1'd1))) */ begin
		main_FIRFilterStreamingexit_0i = main__crit_edgei_44;
	end
end
always @(posedge clk) begin
	/* main: %FIRFilterStreaming.exit*/
	/*   %.0.i = phi i32 [ 0, %18 ], [ %44, %._crit_edge.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__18_20) & (memory_controller_waitrequest == 1'd0)) & (main_18_34_reg == 1'd1))) begin
		main_FIRFilterStreamingexit_0i_reg <= main_FIRFilterStreamingexit_0i;
		if (start == 1'b0 && ^(main_FIRFilterStreamingexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_FIRFilterStreamingexit_0i_reg"); $finish; end
	end
	/* main: %FIRFilterStreaming.exit*/
	/*   %.0.i = phi i32 [ 0, %18 ], [ %44, %._crit_edge.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgei_28) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei_exitcondi_reg == 1'd1))) begin
		main_FIRFilterStreamingexit_0i_reg <= main_FIRFilterStreamingexit_0i;
		if (start == 1'b0 && ^(main_FIRFilterStreamingexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_FIRFilterStreamingexit_0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %FIRFilterStreaming.exit*/
	/*   %46 = add i32 %.0.i, %total.04*/
		main_FIRFilterStreamingexit_46 = main_signed_add_32_0;
end
always @(*) begin
	/* main: %FIRFilterStreaming.exit*/
	/*   %47 = add nsw i32 %i.03, 1*/
		main_FIRFilterStreamingexit_47 = main_signed_add_32_14;
end
always @(*) begin
	/* main: %FIRFilterStreaming.exit*/
	/*   %exitcond = icmp eq i32 %47, 33*/
		main_FIRFilterStreamingexit_exitcond = (main_FIRFilterStreamingexit_47 == 32'd33);
end
always @(*) begin
	/* main: %48*/
	/*   %.lcssa1 = phi i32 [ %46, %FIRFilterStreaming.exit ]*/
		main_48_lcssa1 = main_FIRFilterStreamingexit_46;
end
always @(posedge clk) begin
	/* main: %48*/
	/*   %.lcssa1 = phi i32 [ %46, %FIRFilterStreaming.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond == 1'd1))) begin
		main_48_lcssa1_reg <= main_48_lcssa1;
		if (start == 1'b0 && ^(main_48_lcssa1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_48_lcssa1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %48*/
	/*   %50 = icmp eq i32 %.lcssa1, 44880*/
		main_48_50 = (main_48_lcssa1_reg == 32'd44880);
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 64)*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		legup_memset_4_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_2)) begin
		legup_memset_4_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 64)*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		legup_memset_4_arg_m <= main_0_1;
		if (start == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_arg_m"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 64)*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		legup_memset_4_arg_c1 <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_arg_c1"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 64)*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		legup_memset_4_arg_n <= 32'd64;
		if (start == 1'b0 && ^(32'd64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_arg_n"); $finish; end
	end
end
always @(*) begin
	legup_memset_4_finish_final = legup_memset_4_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_1))) begin
		legup_memset_4_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_finish_reg"); $finish; end
	end
	if (legup_memset_4_finish) begin
		legup_memset_4_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_finish_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 64)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		legup_function_call = 1'd1;
	end
end
always @(*) begin
	/* main: %0*/
	/*   %gep = add i32 %gep_int1, 56*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		main_signed_add_32_0_op0 = main_0_gep_int1;
	end
	/* main: %.preheader.i.preheader*/
	/*   %tmp.i1 = add i32 %33, %i.03*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_21)) begin
		main_signed_add_32_0_op0 = main_18_33_reg;
	end
	/* main: %.preheader.i.preheader*/
	/*   %35 = add i32 %i.03, %tmp1.i2*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_22)) begin
		main_signed_add_32_0_op0 = main_18_i03_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %43 = add i32 %37, %.pre.i*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_23)) begin
		main_signed_add_32_0_op0 = main__crit_edgei_37_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep34 = add i32 %gep_int32, %gep_array33*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_24)) begin
		main_signed_add_32_0_op0 = main__crit_edgei_gep_int32_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep31 = add i32 %gep_int30, %gep_array*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_25)) begin
		main_signed_add_32_0_op0 = main__crit_edgei_gep_int30_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %tmp.i = add i32 %40, %.pre.i*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_27)) begin
		main_signed_add_32_0_op0 = main__crit_edgei_40;
	end
	/* main: %._crit_edge.i*/
	/*   %44 = add i32 %43, %tmp1.i*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_28)) begin
		main_signed_add_32_0_op0 = main__crit_edgei_43_reg;
	end
	/* main: %._crit_edge.i.._crit_edge.i_crit_edge*/
	/*   %gep37 = add i32 %gep_int35, %gep_array36*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_30)) begin
		main_signed_add_32_0_op0 = main__crit_edgei_crit_edgei_crit_edge_gep_int35_reg;
	end
	/* main: %FIRFilterStreaming.exit*/
	/*   %46 = add i32 %.0.i, %total.04*/
	else /* if ((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33)) */ begin
		main_signed_add_32_0_op0 = main_FIRFilterStreamingexit_0i_reg;
	end
end
always @(*) begin
	/* main: %0*/
	/*   %gep = add i32 %gep_int1, 56*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		main_signed_add_32_0_op1 = 32'd56;
	end
	/* main: %.preheader.i.preheader*/
	/*   %tmp.i1 = add i32 %33, %i.03*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_21)) begin
		main_signed_add_32_0_op1 = main_18_i03_reg;
	end
	/* main: %.preheader.i.preheader*/
	/*   %35 = add i32 %i.03, %tmp1.i2*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_22)) begin
		main_signed_add_32_0_op1 = main_preheaderipreheader_tmp1i2;
	end
	/* main: %._crit_edge.i*/
	/*   %43 = add i32 %37, %.pre.i*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_23)) begin
		main_signed_add_32_0_op1 = main__crit_edgei_prei_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep34 = add i32 %gep_int32, %gep_array33*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_24)) begin
		main_signed_add_32_0_op1 = main__crit_edgei_gep_array33_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep31 = add i32 %gep_int30, %gep_array*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_25)) begin
		main_signed_add_32_0_op1 = main__crit_edgei_gep_array_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %tmp.i = add i32 %40, %.pre.i*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_27)) begin
		main_signed_add_32_0_op1 = main__crit_edgei_prei_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %44 = add i32 %43, %tmp1.i*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_28)) begin
		main_signed_add_32_0_op1 = main__crit_edgei_tmp1i;
	end
	/* main: %._crit_edge.i.._crit_edge.i_crit_edge*/
	/*   %gep37 = add i32 %gep_int35, %gep_array36*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_30)) begin
		main_signed_add_32_0_op1 = main__crit_edgei_crit_edgei_crit_edge_gep_array36_reg;
	end
	/* main: %FIRFilterStreaming.exit*/
	/*   %46 = add i32 %.0.i, %total.04*/
	else /* if ((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33)) */ begin
		main_signed_add_32_0_op1 = main_18_total04_reg;
	end
end
always @(*) begin
	main_signed_add_32_0 = (main_signed_add_32_0_op0 + main_signed_add_32_0_op1);
end
always @(*) begin
	/* main: %0*/
	/*   %gep17 = add i32 %gep_int16, 28*/
		main_signed_add_32_8_op0 = main_0_gep_int16;
end
always @(*) begin
	/* main: %0*/
	/*   %gep17 = add i32 %gep_int16, 28*/
if (reset) begin main_signed_add_32_8_op1 = 0; end
		main_signed_add_32_8_op1 = 32'd28;
end
always @(*) begin
	main_signed_add_32_8 = (main_signed_add_32_8_op0 + main_signed_add_32_8_op1);
end
always @(*) begin
	/* main: %0*/
	/*   %gep19 = add i32 %gep_int18, 24*/
		main_signed_add_32_9_op0 = main_0_gep_int18;
end
always @(*) begin
	/* main: %0*/
	/*   %gep19 = add i32 %gep_int18, 24*/
if (reset) begin main_signed_add_32_9_op1 = 0; end
		main_signed_add_32_9_op1 = 32'd24;
end
always @(*) begin
	main_signed_add_32_9 = (main_signed_add_32_9_op0 + main_signed_add_32_9_op1);
end
always @(*) begin
	/* main: %0*/
	/*   %gep21 = add i32 %gep_int20, 20*/
		main_signed_add_32_10_op0 = main_0_gep_int20;
end
always @(*) begin
	/* main: %0*/
	/*   %gep21 = add i32 %gep_int20, 20*/
if (reset) begin main_signed_add_32_10_op1 = 0; end
		main_signed_add_32_10_op1 = 32'd20;
end
always @(*) begin
	main_signed_add_32_10 = (main_signed_add_32_10_op0 + main_signed_add_32_10_op1);
end
always @(*) begin
	/* main: %0*/
	/*   %gep23 = add i32 %gep_int22, 16*/
		main_signed_add_32_11_op0 = main_0_gep_int22;
end
always @(*) begin
	/* main: %0*/
	/*   %gep23 = add i32 %gep_int22, 16*/
if (reset) begin main_signed_add_32_11_op1 = 0; end
		main_signed_add_32_11_op1 = 32'd16;
end
always @(*) begin
	main_signed_add_32_11 = (main_signed_add_32_11_op0 + main_signed_add_32_11_op1);
end
always @(*) begin
	/* main: %0*/
	/*   %gep3 = add i32 %gep_int2, 60*/
		main_signed_add_32_1_op0 = main_0_gep_int2;
end
always @(*) begin
	/* main: %0*/
	/*   %gep3 = add i32 %gep_int2, 60*/
if (reset) begin main_signed_add_32_1_op1 = 0; end
		main_signed_add_32_1_op1 = 32'd60;
end
always @(*) begin
	main_signed_add_32_1 = (main_signed_add_32_1_op0 + main_signed_add_32_1_op1);
end
always @(*) begin
	/* main: %0*/
	/*   %gep5 = add i32 %gep_int4, 52*/
		main_signed_add_32_2_op0 = main_0_gep_int4;
end
always @(*) begin
	/* main: %0*/
	/*   %gep5 = add i32 %gep_int4, 52*/
if (reset) begin main_signed_add_32_2_op1 = 0; end
		main_signed_add_32_2_op1 = 32'd52;
end
always @(*) begin
	main_signed_add_32_2 = (main_signed_add_32_2_op0 + main_signed_add_32_2_op1);
end
always @(*) begin
	/* main: %0*/
	/*   %gep7 = add i32 %gep_int6, 48*/
		main_signed_add_32_3_op0 = main_0_gep_int6;
end
always @(*) begin
	/* main: %0*/
	/*   %gep7 = add i32 %gep_int6, 48*/
if (reset) begin main_signed_add_32_3_op1 = 0; end
		main_signed_add_32_3_op1 = 32'd48;
end
always @(*) begin
	main_signed_add_32_3 = (main_signed_add_32_3_op0 + main_signed_add_32_3_op1);
end
always @(*) begin
	/* main: %0*/
	/*   %gep9 = add i32 %gep_int8, 44*/
		main_signed_add_32_4_op0 = main_0_gep_int8;
end
always @(*) begin
	/* main: %0*/
	/*   %gep9 = add i32 %gep_int8, 44*/
if (reset) begin main_signed_add_32_4_op1 = 0; end
		main_signed_add_32_4_op1 = 32'd44;
end
always @(*) begin
	main_signed_add_32_4 = (main_signed_add_32_4_op0 + main_signed_add_32_4_op1);
end
always @(*) begin
	/* main: %0*/
	/*   %gep11 = add i32 %gep_int10, 40*/
		main_signed_add_32_5_op0 = main_0_gep_int10;
end
always @(*) begin
	/* main: %0*/
	/*   %gep11 = add i32 %gep_int10, 40*/
if (reset) begin main_signed_add_32_5_op1 = 0; end
		main_signed_add_32_5_op1 = 32'd40;
end
always @(*) begin
	main_signed_add_32_5 = (main_signed_add_32_5_op0 + main_signed_add_32_5_op1);
end
always @(*) begin
	/* main: %0*/
	/*   %gep13 = add i32 %gep_int12, 36*/
		main_signed_add_32_6_op0 = main_0_gep_int12;
end
always @(*) begin
	/* main: %0*/
	/*   %gep13 = add i32 %gep_int12, 36*/
if (reset) begin main_signed_add_32_6_op1 = 0; end
		main_signed_add_32_6_op1 = 32'd36;
end
always @(*) begin
	main_signed_add_32_6 = (main_signed_add_32_6_op0 + main_signed_add_32_6_op1);
end
always @(*) begin
	/* main: %0*/
	/*   %gep15 = add i32 %gep_int14, 32*/
		main_signed_add_32_7_op0 = main_0_gep_int14;
end
always @(*) begin
	/* main: %0*/
	/*   %gep15 = add i32 %gep_int14, 32*/
if (reset) begin main_signed_add_32_7_op1 = 0; end
		main_signed_add_32_7_op1 = 32'd32;
end
always @(*) begin
	main_signed_add_32_7 = (main_signed_add_32_7_op0 + main_signed_add_32_7_op1);
end
always @(*) begin
	/* main: %0*/
	/*   %gep25 = add i32 %gep_int24, 12*/
		main_signed_add_32_12_op0 = main_0_gep_int24;
end
always @(*) begin
	/* main: %0*/
	/*   %gep25 = add i32 %gep_int24, 12*/
if (reset) begin main_signed_add_32_12_op1 = 0; end
		main_signed_add_32_12_op1 = 32'd12;
end
always @(*) begin
	main_signed_add_32_12 = (main_signed_add_32_12_op0 + main_signed_add_32_12_op1);
end
always @(*) begin
	/* main: %0*/
	/*   %gep27 = add i32 %gep_int26, 8*/
		main_signed_add_32_13_op0 = main_0_gep_int26;
end
always @(*) begin
	/* main: %0*/
	/*   %gep27 = add i32 %gep_int26, 8*/
if (reset) begin main_signed_add_32_13_op1 = 0; end
		main_signed_add_32_13_op1 = 32'd8;
end
always @(*) begin
	main_signed_add_32_13 = (main_signed_add_32_13_op0 + main_signed_add_32_13_op1);
end
always @(*) begin
	/* main: %0*/
	/*   %gep29 = add i32 %gep_int28, 4*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		main_signed_add_32_14_op0 = main_0_gep_int28;
	end
	/* main: %._crit_edge.i*/
	/*   %45 = add nsw i32 %36, 1*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_23)) begin
		main_signed_add_32_14_op0 = main__crit_edgei_36_reg;
	end
	/* main: %FIRFilterStreaming.exit*/
	/*   %47 = add nsw i32 %i.03, 1*/
	else /* if ((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33)) */ begin
		main_signed_add_32_14_op0 = main_18_i03_reg;
	end
end
always @(*) begin
	/* main: %0*/
	/*   %gep29 = add i32 %gep_int28, 4*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		main_signed_add_32_14_op1 = 32'd4;
	end
	/* main: %._crit_edge.i*/
	/*   %45 = add nsw i32 %36, 1*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_23)) begin
		main_signed_add_32_14_op1 = 32'd1;
	end
	/* main: %FIRFilterStreaming.exit*/
	/*   %47 = add nsw i32 %i.03, 1*/
	else /* if ((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_33)) */ begin
		main_signed_add_32_14_op1 = 32'd1;
	end
end
always @(*) begin
	main_signed_add_32_14 = (main_signed_add_32_14_op0 + main_signed_add_32_14_op1);
end
always @(*) begin
	/* main: %.preheader.i.preheader*/
	/*   %tmp1.i2 = mul i32 %tmp.i1, 10*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_21)) begin
		main_signed_multiply_32_0_op0 = main_preheaderipreheader_tmpi1;
	end
	/* main: %._crit_edge.i*/
	/*   %tmp1.i = mul i32 %tmp.i, %42*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edgei_27)) */ begin
		main_signed_multiply_32_0_op0 = main__crit_edgei_tmpi;
	end
end
always @(*) begin
	/* main: %.preheader.i.preheader*/
	/*   %tmp1.i2 = mul i32 %tmp.i1, 10*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_21)) begin
		main_signed_multiply_32_0_op1 = 32'd10;
	end
	/* main: %._crit_edge.i*/
	/*   %tmp1.i = mul i32 %tmp.i, %42*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edgei_27)) */ begin
		main_signed_multiply_32_0_op1 = main__crit_edgei_42_reg;
	end
end
always @(*) begin
	lpm_mult_main_preheaderipreheader_tmp1i2_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i.preheader*/
	/*   %tmp1.i2 = mul i32 %tmp.i1, 10*/
	if ((lpm_mult_main_preheaderipreheader_tmp1i2_en == 1'd1)) begin
		main_preheaderipreheader_tmp1i2_stage0_reg <= (main_signed_multiply_32_0_op0 * main_signed_multiply_32_0_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_0 = main_preheaderipreheader_tmp1i2_stage0_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %38 = sub i32 15, %36*/
if (reset) begin main_signed_subtract_32_0_op0 = 0; end
		main_signed_subtract_32_0_op0 = 32'd15;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %38 = sub i32 15, %36*/
		main_signed_subtract_32_0_op1 = main__crit_edgei_36_reg;
end
always @(*) begin
	main_signed_subtract_32_0 = (main_signed_subtract_32_0_op0 - main_signed_subtract_32_0_op1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %55*/
	/*   ret i32 %.lcssa1*/
	if ((cur_state == LEGUP_F_main_BB__55_37)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 64)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = legup_memset_4_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 64)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = legup_memset_4_memory_controller_enable_a;
	end
	/* main: %18*/
	/*   store i32 %33, i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %32, i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %31, i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %30, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %29, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %28, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %27, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %26, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %25, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %24, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %23, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %22, i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %21, i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %20, i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %19, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_18)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %i.03, i32* %2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %42 = load i32* %41, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_24)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_25)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i.._crit_edge.i_crit_edge*/
	/*   %.pre.i.pre = load i32* %.phi.trans.insert.i.phi.trans.insert, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_30)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 64)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memset_4_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 64)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memset_4_memory_controller_address_a;
	end
	/* main: %18*/
	/*   store i32 %33, i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_4)) begin
		memory_controller_address_a = main_0_4_reg;
	end
	/* main: %18*/
	/*   store i32 %32, i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_5)) begin
		memory_controller_address_a = main_0_3_reg;
	end
	/* main: %18*/
	/*   store i32 %31, i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_6)) begin
		memory_controller_address_a = main_0_5_reg;
	end
	/* main: %18*/
	/*   store i32 %30, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_7)) begin
		memory_controller_address_a = main_0_6_reg;
	end
	/* main: %18*/
	/*   store i32 %29, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_8)) begin
		memory_controller_address_a = main_0_7_reg;
	end
	/* main: %18*/
	/*   store i32 %28, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_9)) begin
		memory_controller_address_a = main_0_8_reg;
	end
	/* main: %18*/
	/*   store i32 %27, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_10)) begin
		memory_controller_address_a = main_0_9_reg;
	end
	/* main: %18*/
	/*   store i32 %26, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_11)) begin
		memory_controller_address_a = main_0_10_reg;
	end
	/* main: %18*/
	/*   store i32 %25, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_12)) begin
		memory_controller_address_a = main_0_11_reg;
	end
	/* main: %18*/
	/*   store i32 %24, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_13)) begin
		memory_controller_address_a = main_0_12_reg;
	end
	/* main: %18*/
	/*   store i32 %23, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_14)) begin
		memory_controller_address_a = main_0_13_reg;
	end
	/* main: %18*/
	/*   store i32 %22, i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_15)) begin
		memory_controller_address_a = main_0_14_reg;
	end
	/* main: %18*/
	/*   store i32 %21, i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_16)) begin
		memory_controller_address_a = main_0_15_reg;
	end
	/* main: %18*/
	/*   store i32 %20, i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_17)) begin
		memory_controller_address_a = main_0_16_reg;
	end
	/* main: %18*/
	/*   store i32 %19, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_18)) begin
		memory_controller_address_a = main_0_17_reg;
	end
	/* main: %18*/
	/*   store i32 %i.03, i32* %2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_19)) begin
		memory_controller_address_a = main_0_2_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %42 = load i32* %41, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_24)) begin
		memory_controller_address_a = main__crit_edgei_41;
	end
	/* main: %._crit_edge.i*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_25)) begin
		memory_controller_address_a = main__crit_edgei_39;
	end
	/* main: %._crit_edge.i.._crit_edge.i_crit_edge*/
	/*   %.pre.i.pre = load i32* %.phi.trans.insert.i.phi.trans.insert, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_30)) begin
		memory_controller_address_a = main__crit_edgei_crit_edgei_crit_edge_phitransinsertiphitransinsert;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 64)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = legup_memset_4_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 64)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = legup_memset_4_memory_controller_write_enable_a;
	end
	/* main: %18*/
	/*   store i32 %33, i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_4)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %32, i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_5)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %31, i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %30, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %29, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_8)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %28, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %27, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %26, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %25, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %24, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_13)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %23, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_14)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %22, i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_15)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %21, i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_16)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %20, i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_17)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %19, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_18)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   store i32 %i.03, i32* %2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_19)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %42 = load i32* %41, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_24)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_25)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %._crit_edge.i.._crit_edge.i_crit_edge*/
	/*   %.pre.i.pre = load i32* %.phi.trans.insert.i.phi.trans.insert, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_30)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 64)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memset_4_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 64)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memset_4_memory_controller_in_a;
	end
	/* main: %18*/
	/*   store i32 %33, i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_4)) begin
		memory_controller_in_a = main_18_33_reg;
	end
	/* main: %18*/
	/*   store i32 %32, i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_5)) begin
		memory_controller_in_a = main_18_32_reg;
	end
	/* main: %18*/
	/*   store i32 %31, i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_6)) begin
		memory_controller_in_a = main_18_31_reg;
	end
	/* main: %18*/
	/*   store i32 %30, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_7)) begin
		memory_controller_in_a = main_18_30_reg;
	end
	/* main: %18*/
	/*   store i32 %29, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_8)) begin
		memory_controller_in_a = main_18_29_reg;
	end
	/* main: %18*/
	/*   store i32 %28, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_9)) begin
		memory_controller_in_a = main_18_28_reg;
	end
	/* main: %18*/
	/*   store i32 %27, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_10)) begin
		memory_controller_in_a = main_18_27_reg;
	end
	/* main: %18*/
	/*   store i32 %26, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_11)) begin
		memory_controller_in_a = main_18_26_reg;
	end
	/* main: %18*/
	/*   store i32 %25, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_12)) begin
		memory_controller_in_a = main_18_25_reg;
	end
	/* main: %18*/
	/*   store i32 %24, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_13)) begin
		memory_controller_in_a = main_18_24_reg;
	end
	/* main: %18*/
	/*   store i32 %23, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_14)) begin
		memory_controller_in_a = main_18_23_reg;
	end
	/* main: %18*/
	/*   store i32 %22, i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_15)) begin
		memory_controller_in_a = main_18_22_reg;
	end
	/* main: %18*/
	/*   store i32 %21, i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_16)) begin
		memory_controller_in_a = main_18_21_reg;
	end
	/* main: %18*/
	/*   store i32 %20, i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_17)) begin
		memory_controller_in_a = main_18_20_reg;
	end
	/* main: %18*/
	/*   store i32 %19, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_18)) begin
		memory_controller_in_a = main_18_19_reg;
	end
	/* main: %18*/
	/*   store i32 %i.03, i32* %2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_19)) begin
		memory_controller_in_a = main_18_i03_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = legup_memset_4_memory_controller_size_a;
	end
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 64)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = legup_memset_4_memory_controller_size_a;
	end
	/* main: %18*/
	/*   store i32 %33, i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %18*/
	/*   store i32 %32, i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %18*/
	/*   store i32 %31, i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %18*/
	/*   store i32 %30, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %18*/
	/*   store i32 %29, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %18*/
	/*   store i32 %28, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %18*/
	/*   store i32 %27, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %18*/
	/*   store i32 %26, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %18*/
	/*   store i32 %25, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %18*/
	/*   store i32 %24, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %18*/
	/*   store i32 %23, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %18*/
	/*   store i32 %22, i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %18*/
	/*   store i32 %21, i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %18*/
	/*   store i32 %20, i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_17)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %18*/
	/*   store i32 %19, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_18)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %18*/
	/*   store i32 %i.03, i32* %2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %42 = load i32* %41, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_24)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_25)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i.._crit_edge.i_crit_edge*/
	/*   %.pre.i.pre = load i32* %.phi.trans.insert.i.phi.trans.insert, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_30)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 64)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = legup_memset_4_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 64)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = legup_memset_4_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 64)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memset_4_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 64)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memset_4_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 64)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = legup_memset_4_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 64)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = legup_memset_4_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 64)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memset_4_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 64)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memset_4_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = legup_memset_4_memory_controller_size_b;
	end
	/* main: %0*/
	/*   call void @legup_memset_4(i8* %1, i8 0, i32 64)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = legup_memset_4_memory_controller_size_b;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %55*/
	/*   ret i32 %.lcssa1*/
	if ((cur_state == LEGUP_F_main_BB__55_37)) begin
		return_val <= main_48_lcssa1_reg;
		if (start == 1'b0 && ^(main_48_lcssa1_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 

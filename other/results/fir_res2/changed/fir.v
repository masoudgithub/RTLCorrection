//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sun Jun 23 07:55:53 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 2
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @main.coefficients = private unnamed_addr constant [16 x i32] [i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10], align 4
`define TAG_g_maincoefficients `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_maincoefficients_a {`TAG_g_maincoefficients, 23'd0}
//   %previous = alloca [16 x i32], align 4
`define TAG_main_0_previous `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_main_0_previous_a {`TAG_main_0_previous, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [3:0] maincoefficients_address_a;
reg [3:0] maincoefficients_address_b;
reg maincoefficients_write_enable_a;
reg maincoefficients_write_enable_b;
reg [31:0] maincoefficients_in_a;
reg [31:0] maincoefficients_in_b;
wire [31:0] maincoefficients_out_a;
wire [31:0] maincoefficients_out_b;

// @main.coefficients = private unnamed_addr constant [16 x i32] [i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10], align 4
rom_dual_port maincoefficients (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( maincoefficients_address_a ),
	.address_b( maincoefficients_address_b ),
	.q_a( maincoefficients_out_a ),
	.q_b( maincoefficients_out_b)
);
defparam maincoefficients.width_a = 32;
defparam maincoefficients.width_b = 32;
defparam maincoefficients.widthad_a = 4;
defparam maincoefficients.widthad_b = 4;
defparam maincoefficients.numwords_a = 16;
defparam maincoefficients.numwords_b = 16;
defparam maincoefficients.latency = ram_latency;
defparam maincoefficients.init_file = "maincoefficients.mif";

reg [3:0] main_0_previous_address_a;
reg [3:0] main_0_previous_address_b;
reg main_0_previous_write_enable_a;
reg main_0_previous_write_enable_b;
reg [31:0] main_0_previous_in_a;
reg [31:0] main_0_previous_in_b;
wire [31:0] main_0_previous_out_a;
wire [31:0] main_0_previous_out_b;

//   %previous = alloca [16 x i32], align 4
ram_dual_port main_0_previous (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_previous_address_a ),
	.address_b( main_0_previous_address_b ),
	.wren_a( main_0_previous_write_enable_a ),
	.wren_b( main_0_previous_write_enable_b ),
	.data_a( main_0_previous_in_a ),
	.data_b( main_0_previous_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_previous_out_a ),
	.q_b( main_0_previous_out_b)
);
defparam main_0_previous.width_a = 32;
defparam main_0_previous.width_b = 32;
defparam main_0_previous.widthad_a = 4;
defparam main_0_previous.widthad_b = 4;
defparam main_0_previous.width_be_a = 1;
defparam main_0_previous.width_be_b = 1;
defparam main_0_previous.numwords_a = 16;
defparam main_0_previous.numwords_b = 16;
defparam main_0_previous.latency = ram_latency;
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_maincoefficients_a;
assign select_maincoefficients_a = (tag_a == `TAG_g_maincoefficients);
reg [ram_latency:0] select_maincoefficients_reg_a;
wire [31:0] memory_controller_maincoefficients_out_a;
assign memory_controller_maincoefficients_out_a = {32{ select_maincoefficients_reg_a[ram_latency]}} & maincoefficients_out_a;

wire select_main_0_previous_a;
assign select_main_0_previous_a = (tag_a == `TAG_main_0_previous);
reg [ram_latency:0] select_main_0_previous_reg_a;
wire [31:0] memory_controller_main_0_previous_out_a;
assign memory_controller_main_0_previous_out_a = {32{ select_main_0_previous_reg_a[ram_latency]}} & main_0_previous_out_a;

always @(*)
begin
	maincoefficients_address_a = memory_controller_address_a [4-1+2:2] & {4{select_maincoefficients_a}};
	maincoefficients_write_enable_a = memory_controller_write_enable_a & select_maincoefficients_a;
	maincoefficients_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	main_0_previous_address_a = memory_controller_address_a [4-1+2:2] & {4{select_main_0_previous_a}};
	main_0_previous_write_enable_a = memory_controller_write_enable_a & select_main_0_previous_a;
	main_0_previous_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_maincoefficients_reg_a[ram_latency]}} | {2{select_main_0_previous_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_maincoefficients_out_a | memory_controller_main_0_previous_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_maincoefficients_reg_a[j+1] <= select_maincoefficients_reg_a[j];
select_main_0_previous_reg_a[j+1] <= select_main_0_previous_reg_a[j];
end
always @(*)
begin
select_maincoefficients_reg_a[0] <= select_maincoefficients_a;
select_main_0_previous_reg_a[0] <= select_main_0_previous_a;
end

reg [2:0] select_not_struct_b;

wire select_maincoefficients_b;
assign select_maincoefficients_b = (tag_b == `TAG_g_maincoefficients);
reg [ram_latency:0] select_maincoefficients_reg_b;
wire [31:0] memory_controller_maincoefficients_out_b;
assign memory_controller_maincoefficients_out_b = {32{ select_maincoefficients_reg_b[ram_latency]}} & maincoefficients_out_b;

wire select_main_0_previous_b;
assign select_main_0_previous_b = (tag_b == `TAG_main_0_previous);
reg [ram_latency:0] select_main_0_previous_reg_b;
wire [31:0] memory_controller_main_0_previous_out_b;
assign memory_controller_main_0_previous_out_b = {32{ select_main_0_previous_reg_b[ram_latency]}} & main_0_previous_out_b;

always @(*)
begin
	maincoefficients_address_b = memory_controller_address_b [4-1+2:2] & {4{select_maincoefficients_b}};
	maincoefficients_write_enable_b = memory_controller_write_enable_b & select_maincoefficients_b;
	maincoefficients_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	main_0_previous_address_b = memory_controller_address_b [4-1+2:2] & {4{select_main_0_previous_b}};
	main_0_previous_write_enable_b = memory_controller_write_enable_b & select_main_0_previous_b;
	main_0_previous_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_maincoefficients_reg_b[ram_latency]}} | {2{select_main_0_previous_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_maincoefficients_out_b | memory_controller_main_0_previous_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_maincoefficients_reg_b[j+1] <= select_maincoefficients_reg_b[j];
select_main_0_previous_reg_b[j+1] <= select_main_0_previous_reg_b[j];
end
always @(*)
begin
select_maincoefficients_reg_b[0] <= select_maincoefficients_b;
select_main_0_previous_reg_b[0] <= select_main_0_previous_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_main_BB__0_1 = 5'd1;
parameter [4:0] LEGUP_F_main_BB__1_2 = 5'd2;
parameter [4:0] LEGUP_F_main_BB__2_3 = 5'd3;
parameter [4:0] LEGUP_F_main_BB__2_4 = 5'd4;
parameter [4:0] LEGUP_F_main_BB_legup_memset_4exit_5 = 5'd5;
parameter [4:0] LEGUP_F_main_BB__19_6 = 5'd6;
parameter [4:0] LEGUP_F_main_BB__19_7 = 5'd7;
parameter [4:0] LEGUP_F_main_BB__19_8 = 5'd8;
parameter [4:0] LEGUP_F_main_BB__19_9 = 5'd9;
parameter [4:0] LEGUP_F_main_BB__19_10 = 5'd10;
parameter [4:0] LEGUP_F_main_BB__19_11 = 5'd11;
parameter [4:0] LEGUP_F_main_BB__19_12 = 5'd12;
parameter [4:0] LEGUP_F_main_BB__19_13 = 5'd13;
parameter [4:0] LEGUP_F_main_BB__19_14 = 5'd14;
parameter [4:0] LEGUP_F_main_BB_preheaderipreheader_15 = 5'd15;
parameter [4:0] LEGUP_F_main_BB_preheaderipreheader_16 = 5'd16;
parameter [4:0] LEGUP_F_main_BB__crit_edgei_17 = 5'd17;
parameter [4:0] LEGUP_F_main_BB__crit_edgei_18 = 5'd18;
parameter [4:0] LEGUP_F_main_BB__crit_edgei_19 = 5'd19;
parameter [4:0] LEGUP_F_main_BB__crit_edgei_20 = 5'd20;
parameter [4:0] LEGUP_F_main_BB__crit_edgei_21 = 5'd21;
parameter [4:0] LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_22 = 5'd22;
parameter [4:0] LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_23 = 5'd23;
parameter [4:0] LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_24 = 5'd24;
parameter [4:0] LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_25 = 5'd25;
parameter [4:0] LEGUP_F_main_BB_FIRFilterStreamingexitloopexit_26 = 5'd26;
parameter [4:0] LEGUP_F_main_BB_FIRFilterStreamingexit_27 = 5'd27;
parameter [4:0] LEGUP_F_main_BB__48_28 = 5'd28;
parameter [4:0] LEGUP_F_main_BB__51_29 = 5'd29;
parameter [4:0] LEGUP_F_main_BB__53_30 = 5'd30;
parameter [4:0] LEGUP_F_main_BB__55_31 = 5'd31;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [31:0] main_1_indvar6;
reg [31:0] main_1_indvar6_reg;
reg  main_1_exitcond;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_si0;
reg [31:0] main_2_indvarnext7;
reg [31:0] main_2_indvarnext7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_18_reg;
reg [31:0] main_19_indvar3;
reg [31:0] main_19_indvar3_reg;
reg [31:0] main_19_20;
reg [31:0] main_19_20_reg;
reg [31:0] main_19_21;
reg [31:0] main_19_21_reg;
reg [31:0] main_19_22;
reg [31:0] main_19_22_reg;
reg [31:0] main_19_23;
reg [31:0] main_19_23_reg;
reg [31:0] main_19_24;
reg [31:0] main_19_24_reg;
reg [31:0] main_19_25;
reg [31:0] main_19_25_reg;
reg [31:0] main_19_26;
reg [31:0] main_19_26_reg;
reg [31:0] main_19_27;
reg [31:0] main_19_27_reg;
reg [31:0] main_19_28;
reg [31:0] main_19_28_reg;
reg [31:0] main_19_29;
reg [31:0] main_19_29_reg;
reg [31:0] main_19_30;
reg [31:0] main_19_30_reg;
reg [31:0] main_19_31;
reg [31:0] main_19_31_reg;
reg [31:0] main_19_32;
reg [31:0] main_19_32_reg;
reg [31:0] main_19_33;
reg [31:0] main_19_33_reg;
reg [31:0] main_19_total04;
reg [31:0] main_19_total04_reg;
reg [31:0] main_19_i03;
reg [31:0] main_19_i03_reg;
reg  main_19_34;
reg  main_19_34_reg;
reg [31:0] main_preheaderipreheader_35;
reg [31:0] main_preheaderipreheader_36;
reg [31:0] main_preheaderipreheader_37;
reg [31:0] main_preheaderipreheader_38;
reg [31:0] main__crit_edgei_indvar;
reg [31:0] main__crit_edgei_indvar_reg;
reg [31:0] main__crit_edgei_prei;
reg [31:0] main__crit_edgei_prei_reg;
reg [31:0] main__crit_edgei_39;
reg [31:0] main__crit_edgei_39_reg;
reg [31:0] main__crit_edgei_40;
reg [31:0] main__crit_edgei_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep;
reg [31:0] main__crit_edgei_41;
reg [31:0] main__crit_edgei_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep2;
reg [31:0] main__crit_edgei_42;
reg [31:0] main__crit_edgei_43;
reg [31:0] main__crit_edgei_tmpi;
reg [31:0] main__crit_edgei_tmp1i;
reg [31:0] main__crit_edgei_44;
reg [31:0] main__crit_edgei_44_reg;
reg [31:0] main__crit_edgei_45;
reg [31:0] main__crit_edgei_45_reg;
reg  main__crit_edgei_exitcond1;
reg  main__crit_edgei_exitcond1_reg;
reg [31:0] main__crit_edgei_crit_edgei_crit_edge_46;
reg [31:0] main__crit_edgei_crit_edgei_crit_edge_46_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_crit_edgei_crit_edge_phitransinsertiphitransinsert;
reg [31:0] main__crit_edgei_crit_edgei_crit_edge_preipre;
reg [31:0] main__crit_edgei_crit_edgei_crit_edge_indvarnext;
reg [31:0] main__crit_edgei_crit_edgei_crit_edge_indvarnext_reg;
reg [31:0] main_FIRFilterStreamingexit_0i;
reg [31:0] main_FIRFilterStreamingexit_0i_reg;
reg [31:0] main_FIRFilterStreamingexit_47;
reg [31:0] main_FIRFilterStreamingexit_47_reg;
reg [31:0] main_FIRFilterStreamingexit_indvarnext4;
reg  main_FIRFilterStreamingexit_exitcond5;
reg  main_48_50;
reg  lpm_mult_main_preheaderipreheader_35_en;
reg [31:0] main_preheaderipreheader_35_stage0_reg;
reg  lpm_mult_main_preheaderipreheader_37_en;
reg [31:0] main_preheaderipreheader_37_stage0_reg;
reg  lpm_mult_main__crit_edgei_tmp1i_en;
reg [31:0] main__crit_edgei_tmp1i_stage0_reg;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %48*/
	/*   %49 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str, i32 0, i32 0), i32 %47) #1*/
	if ((cur_state == LEGUP_F_main_BB__48_28)) begin
		$write("Result: %d\n", $signed(main_FIRFilterStreamingexit_47_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_FIRFilterStreamingexit_47_reg) === 1'bX) finish <= 0;
	end
	/* main: %51*/
	/*   %52 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__51_29)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %53*/
	/*   %54 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__53_30)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB_FIRFilterStreamingexit_27:
	if ((main_FIRFilterStreamingexit_exitcond5 == 1'd1))
		next_state = LEGUP_F_main_BB__48_28;
	else if ((main_FIRFilterStreamingexit_exitcond5 == 1'd0))
		next_state = LEGUP_F_main_BB__19_6;
LEGUP_F_main_BB_FIRFilterStreamingexitloopexit_26:
		next_state = LEGUP_F_main_BB_FIRFilterStreamingexit_27;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__19_10:
		next_state = LEGUP_F_main_BB__19_11;
LEGUP_F_main_BB__19_11:
		next_state = LEGUP_F_main_BB__19_12;
LEGUP_F_main_BB__19_12:
		next_state = LEGUP_F_main_BB__19_13;
LEGUP_F_main_BB__19_13:
		next_state = LEGUP_F_main_BB__19_14;
LEGUP_F_main_BB__19_14:
	if ((main_19_34_reg == 1'd1))
		next_state = LEGUP_F_main_BB_FIRFilterStreamingexit_27;
	else if ((main_19_34_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderipreheader_15;
LEGUP_F_main_BB__19_6:
		next_state = LEGUP_F_main_BB__19_7;
LEGUP_F_main_BB__19_7:
		next_state = LEGUP_F_main_BB__19_8;
LEGUP_F_main_BB__19_8:
		next_state = LEGUP_F_main_BB__19_9;
LEGUP_F_main_BB__19_9:
		next_state = LEGUP_F_main_BB__19_10;
LEGUP_F_main_BB__1_2:
	if ((main_1_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB_legup_memset_4exit_5;
	else if ((main_1_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB__2_3;
LEGUP_F_main_BB__2_3:
		next_state = LEGUP_F_main_BB__2_4;
LEGUP_F_main_BB__2_4:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__48_28:
	if ((main_48_50 == 1'd1))
		next_state = LEGUP_F_main_BB__51_29;
	else if ((main_48_50 == 1'd0))
		next_state = LEGUP_F_main_BB__53_30;
LEGUP_F_main_BB__51_29:
		next_state = LEGUP_F_main_BB__55_31;
LEGUP_F_main_BB__53_30:
		next_state = LEGUP_F_main_BB__55_31;
LEGUP_F_main_BB__55_31:
		next_state = LEGUP_0;
LEGUP_F_main_BB__crit_edgei_17:
		next_state = LEGUP_F_main_BB__crit_edgei_18;
LEGUP_F_main_BB__crit_edgei_18:
		next_state = LEGUP_F_main_BB__crit_edgei_19;
LEGUP_F_main_BB__crit_edgei_19:
		next_state = LEGUP_F_main_BB__crit_edgei_20;
LEGUP_F_main_BB__crit_edgei_20:
		next_state = LEGUP_F_main_BB__crit_edgei_21;
LEGUP_F_main_BB__crit_edgei_21:
	if ((main__crit_edgei_exitcond1_reg == 1'd1))
		next_state = LEGUP_F_main_BB_FIRFilterStreamingexitloopexit_26;
	else if ((main__crit_edgei_exitcond1_reg == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_22;
LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_22:
		next_state = LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_23;
LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_23:
		next_state = LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_24;
LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_24:
		next_state = LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_25;
LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_25:
		next_state = LEGUP_F_main_BB__crit_edgei_17;
LEGUP_F_main_BB_legup_memset_4exit_5:
		next_state = LEGUP_F_main_BB__19_6;
LEGUP_F_main_BB_preheaderipreheader_15:
		next_state = LEGUP_F_main_BB_preheaderipreheader_16;
LEGUP_F_main_BB_preheaderipreheader_16:
		next_state = LEGUP_F_main_BB__crit_edgei_17;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %indvar6 = phi i32 [ %indvar.next7, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar6 = 32'd0;
	end
	/* main: %1*/
	/*   %indvar6 = phi i32 [ %indvar.next7, %2 ], [ 0, %0 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__2_4) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_indvar6 = main_2_indvarnext7_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %indvar6 = phi i32 [ %indvar.next7, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar6_reg <= main_1_indvar6;
		if (start == 1'b0 && ^(main_1_indvar6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvar6_reg"); $finish; end
	end
	/* main: %1*/
	/*   %indvar6 = phi i32 [ %indvar.next7, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__2_4) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar6_reg <= main_1_indvar6;
		if (start == 1'b0 && ^(main_1_indvar6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvar6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond = icmp eq i32 %indvar6, 16*/
		main_1_exitcond = (main_1_indvar6_reg == 32'd16);
end
always @(*) begin
	/* main: %2*/
	/*   %s.i.0 = getelementptr [16 x i32]* %previous, i32 0, i32 %indvar6*/
		main_2_si0 = (`TAG_main_0_previous_a + (4 * main_1_indvar6_reg));
end
always @(*) begin
	/* main: %2*/
	/*   %indvar.next7 = add i32 %indvar6, 1*/
		main_2_indvarnext7 = (main_1_indvar6_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %indvar.next7 = add i32 %indvar6, 1*/
	if ((cur_state == LEGUP_F_main_BB__2_3)) begin
		main_2_indvarnext7_reg <= main_2_indvarnext7;
		if (start == 1'b0 && ^(main_2_indvarnext7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_indvarnext7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %3 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 0*/
if (reset) begin main_legup_memset_4exit_3 = 0; end
		main_legup_memset_4exit_3 = `TAG_main_0_previous_a;
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %3 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5)) begin
		main_legup_memset_4exit_3_reg <= main_legup_memset_4exit_3;
		if (start == 1'b0 && ^(main_legup_memset_4exit_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %4 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 14*/
if (reset) begin main_legup_memset_4exit_4 = 0; end
		main_legup_memset_4exit_4 = (`TAG_main_0_previous_a + (4 * 32'd14));
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %4 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 14*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5)) begin
		main_legup_memset_4exit_4_reg <= main_legup_memset_4exit_4;
		if (start == 1'b0 && ^(main_legup_memset_4exit_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %5 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 15*/
if (reset) begin main_legup_memset_4exit_5 = 0; end
		main_legup_memset_4exit_5 = (`TAG_main_0_previous_a + (4 * 32'd15));
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %5 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 15*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5)) begin
		main_legup_memset_4exit_5_reg <= main_legup_memset_4exit_5;
		if (start == 1'b0 && ^(main_legup_memset_4exit_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %6 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 13*/
if (reset) begin main_legup_memset_4exit_6 = 0; end
		main_legup_memset_4exit_6 = (`TAG_main_0_previous_a + (4 * 32'd13));
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %6 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 13*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5)) begin
		main_legup_memset_4exit_6_reg <= main_legup_memset_4exit_6;
		if (start == 1'b0 && ^(main_legup_memset_4exit_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %7 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 12*/
if (reset) begin main_legup_memset_4exit_7 = 0; end
		main_legup_memset_4exit_7 = (`TAG_main_0_previous_a + (4 * 32'd12));
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %7 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 12*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5)) begin
		main_legup_memset_4exit_7_reg <= main_legup_memset_4exit_7;
		if (start == 1'b0 && ^(main_legup_memset_4exit_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %8 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 11*/
if (reset) begin main_legup_memset_4exit_8 = 0; end
		main_legup_memset_4exit_8 = (`TAG_main_0_previous_a + (4 * 32'd11));
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %8 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 11*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5)) begin
		main_legup_memset_4exit_8_reg <= main_legup_memset_4exit_8;
		if (start == 1'b0 && ^(main_legup_memset_4exit_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %9 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 10*/
if (reset) begin main_legup_memset_4exit_9 = 0; end
		main_legup_memset_4exit_9 = (`TAG_main_0_previous_a + (4 * 32'd10));
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %9 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 10*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5)) begin
		main_legup_memset_4exit_9_reg <= main_legup_memset_4exit_9;
		if (start == 1'b0 && ^(main_legup_memset_4exit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %10 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 9*/
if (reset) begin main_legup_memset_4exit_10 = 0; end
		main_legup_memset_4exit_10 = (`TAG_main_0_previous_a + (4 * 32'd9));
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %10 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 9*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5)) begin
		main_legup_memset_4exit_10_reg <= main_legup_memset_4exit_10;
		if (start == 1'b0 && ^(main_legup_memset_4exit_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %11 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 8*/
if (reset) begin main_legup_memset_4exit_11 = 0; end
		main_legup_memset_4exit_11 = (`TAG_main_0_previous_a + (4 * 32'd8));
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %11 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 8*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5)) begin
		main_legup_memset_4exit_11_reg <= main_legup_memset_4exit_11;
		if (start == 1'b0 && ^(main_legup_memset_4exit_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %12 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 7*/
if (reset) begin main_legup_memset_4exit_12 = 0; end
		main_legup_memset_4exit_12 = (`TAG_main_0_previous_a + (4 * 32'd7));
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %12 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 7*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5)) begin
		main_legup_memset_4exit_12_reg <= main_legup_memset_4exit_12;
		if (start == 1'b0 && ^(main_legup_memset_4exit_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %13 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 6*/
if (reset) begin main_legup_memset_4exit_13 = 0; end
		main_legup_memset_4exit_13 = (`TAG_main_0_previous_a + (4 * 32'd6));
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %13 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 6*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5)) begin
		main_legup_memset_4exit_13_reg <= main_legup_memset_4exit_13;
		if (start == 1'b0 && ^(main_legup_memset_4exit_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %14 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 5*/
if (reset) begin main_legup_memset_4exit_14 = 0; end
		main_legup_memset_4exit_14 = (`TAG_main_0_previous_a + (4 * 32'd5));
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %14 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 5*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5)) begin
		main_legup_memset_4exit_14_reg <= main_legup_memset_4exit_14;
		if (start == 1'b0 && ^(main_legup_memset_4exit_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %15 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 4*/
if (reset) begin main_legup_memset_4exit_15 = 0; end
		main_legup_memset_4exit_15 = (`TAG_main_0_previous_a + (4 * 32'd4));
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %15 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 4*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5)) begin
		main_legup_memset_4exit_15_reg <= main_legup_memset_4exit_15;
		if (start == 1'b0 && ^(main_legup_memset_4exit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %16 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 3*/
if (reset) begin main_legup_memset_4exit_16 = 0; end
		main_legup_memset_4exit_16 = (`TAG_main_0_previous_a + (4 * 32'd3));
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %16 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 3*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5)) begin
		main_legup_memset_4exit_16_reg <= main_legup_memset_4exit_16;
		if (start == 1'b0 && ^(main_legup_memset_4exit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %17 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 2*/
if (reset) begin main_legup_memset_4exit_17 = 0; end
		main_legup_memset_4exit_17 = (`TAG_main_0_previous_a + (4 * 32'd2));
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %17 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 2*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5)) begin
		main_legup_memset_4exit_17_reg <= main_legup_memset_4exit_17;
		if (start == 1'b0 && ^(main_legup_memset_4exit_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %18 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 1*/
if (reset) begin main_legup_memset_4exit_18 = 0; end
		main_legup_memset_4exit_18 = (`TAG_main_0_previous_a + (4 * 32'd1));
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %18 = getelementptr inbounds [16 x i32]* %previous, i32 0, i32 1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5)) begin
		main_legup_memset_4exit_18_reg <= main_legup_memset_4exit_18;
		if (start == 1'b0 && ^(main_legup_memset_4exit_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %19*/
	/*   %indvar3 = phi i32 [ %indvar.next4, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_indvar3 = 32'd0;
	end
	/* main: %19*/
	/*   %indvar3 = phi i32 [ %indvar.next4, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) */ begin
		main_19_indvar3 = main_FIRFilterStreamingexit_indvarnext4;
	end
end
always @(posedge clk) begin
	/* main: %19*/
	/*   %indvar3 = phi i32 [ %indvar.next4, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_indvar3_reg <= main_19_indvar3;
		if (start == 1'b0 && ^(main_19_indvar3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_indvar3_reg"); $finish; end
	end
	/* main: %19*/
	/*   %indvar3 = phi i32 [ %indvar.next4, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) begin
		main_19_indvar3_reg <= main_19_indvar3;
		if (start == 1'b0 && ^(main_19_indvar3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_indvar3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %19*/
	/*   %20 = phi i32 [ %indvar3, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_20 = 32'd0;
	end
	/* main: %19*/
	/*   %20 = phi i32 [ %indvar3, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) */ begin
		main_19_20 = main_19_indvar3_reg;
	end
end
always @(posedge clk) begin
	/* main: %19*/
	/*   %20 = phi i32 [ %indvar3, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_20_reg <= main_19_20;
		if (start == 1'b0 && ^(main_19_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_20_reg"); $finish; end
	end
	/* main: %19*/
	/*   %20 = phi i32 [ %indvar3, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) begin
		main_19_20_reg <= main_19_20;
		if (start == 1'b0 && ^(main_19_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %19*/
	/*   %21 = phi i32 [ %20, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_21 = 32'd0;
	end
	/* main: %19*/
	/*   %21 = phi i32 [ %20, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) */ begin
		main_19_21 = main_19_20_reg;
	end
end
always @(posedge clk) begin
	/* main: %19*/
	/*   %21 = phi i32 [ %20, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_21_reg <= main_19_21;
		if (start == 1'b0 && ^(main_19_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_21_reg"); $finish; end
	end
	/* main: %19*/
	/*   %21 = phi i32 [ %20, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) begin
		main_19_21_reg <= main_19_21;
		if (start == 1'b0 && ^(main_19_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %19*/
	/*   %22 = phi i32 [ %21, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_22 = 32'd0;
	end
	/* main: %19*/
	/*   %22 = phi i32 [ %21, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) */ begin
		main_19_22 = main_19_21_reg;
	end
end
always @(posedge clk) begin
	/* main: %19*/
	/*   %22 = phi i32 [ %21, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_22_reg <= main_19_22;
		if (start == 1'b0 && ^(main_19_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_22_reg"); $finish; end
	end
	/* main: %19*/
	/*   %22 = phi i32 [ %21, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) begin
		main_19_22_reg <= main_19_22;
		if (start == 1'b0 && ^(main_19_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %19*/
	/*   %23 = phi i32 [ %22, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_23 = 32'd0;
	end
	/* main: %19*/
	/*   %23 = phi i32 [ %22, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) */ begin
		main_19_23 = main_19_22_reg;
	end
end
always @(posedge clk) begin
	/* main: %19*/
	/*   %23 = phi i32 [ %22, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_23_reg <= main_19_23;
		if (start == 1'b0 && ^(main_19_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_23_reg"); $finish; end
	end
	/* main: %19*/
	/*   %23 = phi i32 [ %22, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) begin
		main_19_23_reg <= main_19_23;
		if (start == 1'b0 && ^(main_19_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %19*/
	/*   %24 = phi i32 [ %23, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_24 = 32'd0;
	end
	/* main: %19*/
	/*   %24 = phi i32 [ %23, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) */ begin
		main_19_24 = main_19_23_reg;
	end
end
always @(posedge clk) begin
	/* main: %19*/
	/*   %24 = phi i32 [ %23, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_24_reg <= main_19_24;
		if (start == 1'b0 && ^(main_19_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_24_reg"); $finish; end
	end
	/* main: %19*/
	/*   %24 = phi i32 [ %23, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) begin
		main_19_24_reg <= main_19_24;
		if (start == 1'b0 && ^(main_19_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %19*/
	/*   %25 = phi i32 [ %24, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_25 = 32'd0;
	end
	/* main: %19*/
	/*   %25 = phi i32 [ %24, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) */ begin
		main_19_25 = main_19_24_reg;
	end
end
always @(posedge clk) begin
	/* main: %19*/
	/*   %25 = phi i32 [ %24, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_25_reg <= main_19_25;
		if (start == 1'b0 && ^(main_19_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_25_reg"); $finish; end
	end
	/* main: %19*/
	/*   %25 = phi i32 [ %24, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) begin
		main_19_25_reg <= main_19_25;
		if (start == 1'b0 && ^(main_19_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %19*/
	/*   %26 = phi i32 [ %25, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_26 = 32'd0;
	end
	/* main: %19*/
	/*   %26 = phi i32 [ %25, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) */ begin
		main_19_26 = main_19_25_reg;
	end
end
always @(posedge clk) begin
	/* main: %19*/
	/*   %26 = phi i32 [ %25, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_26_reg <= main_19_26;
		if (start == 1'b0 && ^(main_19_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_26_reg"); $finish; end
	end
	/* main: %19*/
	/*   %26 = phi i32 [ %25, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) begin
		main_19_26_reg <= main_19_26;
		if (start == 1'b0 && ^(main_19_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %19*/
	/*   %27 = phi i32 [ %26, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_27 = 32'd0;
	end
	/* main: %19*/
	/*   %27 = phi i32 [ %26, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) */ begin
		main_19_27 = main_19_26_reg;
	end
end
always @(posedge clk) begin
	/* main: %19*/
	/*   %27 = phi i32 [ %26, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_27_reg <= main_19_27;
		if (start == 1'b0 && ^(main_19_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_27_reg"); $finish; end
	end
	/* main: %19*/
	/*   %27 = phi i32 [ %26, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) begin
		main_19_27_reg <= main_19_27;
		if (start == 1'b0 && ^(main_19_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %19*/
	/*   %28 = phi i32 [ %27, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_28 = 32'd0;
	end
	/* main: %19*/
	/*   %28 = phi i32 [ %27, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) */ begin
		main_19_28 = main_19_27_reg;
	end
end
always @(posedge clk) begin
	/* main: %19*/
	/*   %28 = phi i32 [ %27, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_28_reg <= main_19_28;
		if (start == 1'b0 && ^(main_19_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_28_reg"); $finish; end
	end
	/* main: %19*/
	/*   %28 = phi i32 [ %27, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) begin
		main_19_28_reg <= main_19_28;
		if (start == 1'b0 && ^(main_19_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %19*/
	/*   %29 = phi i32 [ %28, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_29 = 32'd0;
	end
	/* main: %19*/
	/*   %29 = phi i32 [ %28, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) */ begin
		main_19_29 = main_19_28_reg;
	end
end
always @(posedge clk) begin
	/* main: %19*/
	/*   %29 = phi i32 [ %28, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_29_reg <= main_19_29;
		if (start == 1'b0 && ^(main_19_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_29_reg"); $finish; end
	end
	/* main: %19*/
	/*   %29 = phi i32 [ %28, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) begin
		main_19_29_reg <= main_19_29;
		if (start == 1'b0 && ^(main_19_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %19*/
	/*   %30 = phi i32 [ %29, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_30 = 32'd0;
	end
	/* main: %19*/
	/*   %30 = phi i32 [ %29, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) */ begin
		main_19_30 = main_19_29_reg;
	end
end
always @(posedge clk) begin
	/* main: %19*/
	/*   %30 = phi i32 [ %29, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_30_reg <= main_19_30;
		if (start == 1'b0 && ^(main_19_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_30_reg"); $finish; end
	end
	/* main: %19*/
	/*   %30 = phi i32 [ %29, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) begin
		main_19_30_reg <= main_19_30;
		if (start == 1'b0 && ^(main_19_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %19*/
	/*   %31 = phi i32 [ %30, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_31 = 32'd0;
	end
	/* main: %19*/
	/*   %31 = phi i32 [ %30, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) */ begin
		main_19_31 = main_19_30_reg;
	end
end
always @(posedge clk) begin
	/* main: %19*/
	/*   %31 = phi i32 [ %30, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_31_reg <= main_19_31;
		if (start == 1'b0 && ^(main_19_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_31_reg"); $finish; end
	end
	/* main: %19*/
	/*   %31 = phi i32 [ %30, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) begin
		main_19_31_reg <= main_19_31;
		if (start == 1'b0 && ^(main_19_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %19*/
	/*   %32 = phi i32 [ %31, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_32 = 32'd0;
	end
	/* main: %19*/
	/*   %32 = phi i32 [ %31, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) */ begin
		main_19_32 = main_19_31_reg;
	end
end
always @(posedge clk) begin
	/* main: %19*/
	/*   %32 = phi i32 [ %31, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_32_reg <= main_19_32;
		if (start == 1'b0 && ^(main_19_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_32_reg"); $finish; end
	end
	/* main: %19*/
	/*   %32 = phi i32 [ %31, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) begin
		main_19_32_reg <= main_19_32;
		if (start == 1'b0 && ^(main_19_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %19*/
	/*   %33 = phi i32 [ %32, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_33 = 32'd0;
	end
	/* main: %19*/
	/*   %33 = phi i32 [ %32, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) */ begin
		main_19_33 = main_19_32_reg;
	end
end
always @(posedge clk) begin
	/* main: %19*/
	/*   %33 = phi i32 [ %32, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_33_reg <= main_19_33;
		if (start == 1'b0 && ^(main_19_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_33_reg"); $finish; end
	end
	/* main: %19*/
	/*   %33 = phi i32 [ %32, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) begin
		main_19_33_reg <= main_19_33;
		if (start == 1'b0 && ^(main_19_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %19*/
	/*   %total.04 = phi i32 [ %47, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_total04 = 32'd0;
	end
	/* main: %19*/
	/*   %total.04 = phi i32 [ %47, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) */ begin
		main_19_total04 = main_FIRFilterStreamingexit_47;
	end
end
always @(posedge clk) begin
	/* main: %19*/
	/*   %total.04 = phi i32 [ %47, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exit_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_19_total04_reg <= main_19_total04;
		if (start == 1'b0 && ^(main_19_total04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_total04_reg"); $finish; end
	end
	/* main: %19*/
	/*   %total.04 = phi i32 [ %47, %FIRFilterStreaming.exit ], [ 0, %legup_memset_4.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27) & (memory_controller_waitrequest == 1'd0)) & (main_FIRFilterStreamingexit_exitcond5 == 1'd0))) begin
		main_19_total04_reg <= main_19_total04;
		if (start == 1'b0 && ^(main_19_total04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_total04_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %19*/
	/*   %i.03 = add i32 %indvar3, 1*/
		main_19_i03 = (main_19_indvar3_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %19*/
	/*   %i.03 = add i32 %indvar3, 1*/
	if ((cur_state == LEGUP_F_main_BB__19_6)) begin
		main_19_i03_reg <= main_19_i03;
		if (start == 1'b0 && ^(main_19_i03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_i03_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %19*/
	/*   %34 = icmp eq i32 %33, 0*/
		main_19_34 = (main_19_33_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %19*/
	/*   %34 = icmp eq i32 %33, 0*/
	if ((cur_state == LEGUP_F_main_BB__19_6)) begin
		main_19_34_reg <= main_19_34;
		if (start == 1'b0 && ^(main_19_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_34_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderipreheader_35 = main_preheaderipreheader_35_stage0_reg;
end
always @(*) begin
	/* main: %.preheader.i.preheader*/
	/*   %36 = add i32 %35, 11*/
		main_preheaderipreheader_36 = (main_preheaderipreheader_35 + 32'd11);
end
always @(*) begin
	main_preheaderipreheader_37 = main_preheaderipreheader_37_stage0_reg;
end
always @(*) begin
	/* main: %.preheader.i.preheader*/
	/*   %38 = add i32 %36, %37*/
		main_preheaderipreheader_38 = (main_preheaderipreheader_36 + main_preheaderipreheader_37);
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %indvar = phi i32 [ %indvar.next, %._crit_edge.i.._crit_edge.i_crit_edge ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_indvar = 32'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %indvar = phi i32 [ %indvar.next, %._crit_edge.i.._crit_edge.i_crit_edge ], [ 0, %.preheader.i.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_25) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edgei_indvar = main__crit_edgei_crit_edgei_crit_edge_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %indvar = phi i32 [ %indvar.next, %._crit_edge.i.._crit_edge.i_crit_edge ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_indvar_reg <= main__crit_edgei_indvar;
		if (start == 1'b0 && ^(main__crit_edgei_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_indvar_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %indvar = phi i32 [ %indvar.next, %._crit_edge.i.._crit_edge.i_crit_edge ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_25) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_indvar_reg <= main__crit_edgei_indvar;
		if (start == 1'b0 && ^(main__crit_edgei_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %.pre.i = phi i32 [ %.pre.i.pre, %._crit_edge.i.._crit_edge.i_crit_edge ], [ %indvar3, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_prei = main_19_indvar3_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %.pre.i = phi i32 [ %.pre.i.pre, %._crit_edge.i.._crit_edge.i_crit_edge ], [ %indvar3, %.preheader.i.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_25) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edgei_prei = main__crit_edgei_crit_edgei_crit_edge_preipre;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %.pre.i = phi i32 [ %.pre.i.pre, %._crit_edge.i.._crit_edge.i_crit_edge ], [ %indvar3, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_prei_reg <= main__crit_edgei_prei;
		if (start == 1'b0 && ^(main__crit_edgei_prei) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_prei_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %.pre.i = phi i32 [ %.pre.i.pre, %._crit_edge.i.._crit_edge.i_crit_edge ], [ %indvar3, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_25) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_prei_reg <= main__crit_edgei_prei;
		if (start == 1'b0 && ^(main__crit_edgei_prei) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_prei_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %39 = phi i32 [ %45, %._crit_edge.i.._crit_edge.i_crit_edge ], [ %38, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_39 = main_preheaderipreheader_38;
	end
	/* main: %._crit_edge.i*/
	/*   %39 = phi i32 [ %45, %._crit_edge.i.._crit_edge.i_crit_edge ], [ %38, %.preheader.i.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_25) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edgei_39 = main__crit_edgei_45_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %39 = phi i32 [ %45, %._crit_edge.i.._crit_edge.i_crit_edge ], [ %38, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_39_reg <= main__crit_edgei_39;
		if (start == 1'b0 && ^(main__crit_edgei_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_39_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %39 = phi i32 [ %45, %._crit_edge.i.._crit_edge.i_crit_edge ], [ %38, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_25) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_39_reg <= main__crit_edgei_39;
		if (start == 1'b0 && ^(main__crit_edgei_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %40 = add i32 %indvar, 1*/
		main__crit_edgei_40 = (main__crit_edgei_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %40 = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_17)) begin
		main__crit_edgei_40_reg <= main__crit_edgei_40;
		if (start == 1'b0 && ^(main__crit_edgei_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep = getelementptr [16 x i32]* @main.coefficients, i32 0, i32 %40*/
		main__crit_edgei_scevgep = (`TAG_g_maincoefficients_a + (4 * main__crit_edgei_40_reg));
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %41 = sub i32 14, %indvar*/
		main__crit_edgei_41 = (32'd14 - main__crit_edgei_indvar_reg);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %41 = sub i32 14, %indvar*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_17)) begin
		main__crit_edgei_41_reg <= main__crit_edgei_41;
		if (start == 1'b0 && ^(main__crit_edgei_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep2 = getelementptr [16 x i32]* %previous, i32 0, i32 %41*/
		main__crit_edgei_scevgep2 = (`TAG_main_0_previous_a + (4 * main__crit_edgei_41_reg));
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %42 = load i32* %scevgep2, align 4, !tbaa !1*/
		main__crit_edgei_42 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %43 = load i32* %scevgep, align 4, !tbaa !1*/
		main__crit_edgei_43 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %tmp.i = add i32 %42, %.pre.i*/
		main__crit_edgei_tmpi = (main__crit_edgei_42 + main__crit_edgei_prei_reg);
end
always @(*) begin
	main__crit_edgei_tmp1i = main__crit_edgei_tmp1i_stage0_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %44 = add i32 %39, %.pre.i*/
		main__crit_edgei_44 = (main__crit_edgei_39_reg + main__crit_edgei_prei_reg);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %44 = add i32 %39, %.pre.i*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_17)) begin
		main__crit_edgei_44_reg <= main__crit_edgei_44;
		if (start == 1'b0 && ^(main__crit_edgei_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %45 = add i32 %44, %tmp1.i*/
		main__crit_edgei_45 = (main__crit_edgei_44_reg + main__crit_edgei_tmp1i);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %45 = add i32 %44, %tmp1.i*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_21)) begin
		main__crit_edgei_45_reg <= main__crit_edgei_45;
		if (start == 1'b0 && ^(main__crit_edgei_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %exitcond1 = icmp eq i32 %indvar, 14*/
		main__crit_edgei_exitcond1 = (main__crit_edgei_indvar_reg == 32'd14);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %exitcond1 = icmp eq i32 %indvar, 14*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_17)) begin
		main__crit_edgei_exitcond1_reg <= main__crit_edgei_exitcond1;
		if (start == 1'b0 && ^(main__crit_edgei_exitcond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_exitcond1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.._crit_edge.i_crit_edge*/
	/*   %46 = add i32 %indvar, 2*/
		main__crit_edgei_crit_edgei_crit_edge_46 = (main__crit_edgei_indvar_reg + 32'd2);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.._crit_edge.i_crit_edge*/
	/*   %46 = add i32 %indvar, 2*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_22)) begin
		main__crit_edgei_crit_edgei_crit_edge_46_reg <= main__crit_edgei_crit_edgei_crit_edge_46;
		if (start == 1'b0 && ^(main__crit_edgei_crit_edgei_crit_edge_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_crit_edgei_crit_edge_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.._crit_edge.i_crit_edge*/
	/*   %.phi.trans.insert.i.phi.trans.insert = getelementptr [16 x i32]* %previous, i32 0, i32 %46*/
		main__crit_edgei_crit_edgei_crit_edge_phitransinsertiphitransinsert = (`TAG_main_0_previous_a + (4 * main__crit_edgei_crit_edgei_crit_edge_46_reg));
end
always @(*) begin
	/* main: %._crit_edge.i.._crit_edge.i_crit_edge*/
	/*   %.pre.i.pre = load i32* %.phi.trans.insert.i.phi.trans.insert, align 4, !tbaa !1*/
		main__crit_edgei_crit_edgei_crit_edge_preipre = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %._crit_edge.i.._crit_edge.i_crit_edge*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main__crit_edgei_crit_edgei_crit_edge_indvarnext = (main__crit_edgei_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.._crit_edge.i_crit_edge*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_22)) begin
		main__crit_edgei_crit_edgei_crit_edge_indvarnext_reg <= main__crit_edgei_crit_edgei_crit_edge_indvarnext;
		if (start == 1'b0 && ^(main__crit_edgei_crit_edgei_crit_edge_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_crit_edgei_crit_edge_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %FIRFilterStreaming.exit*/
	/*   %.0.i = phi i32 [ 0, %19 ], [ %45, %FIRFilterStreaming.exit.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__19_14) & (memory_controller_waitrequest == 1'd0)) & (main_19_34_reg == 1'd1))) begin
		main_FIRFilterStreamingexit_0i = 32'd0;
	end
	/* main: %FIRFilterStreaming.exit*/
	/*   %.0.i = phi i32 [ 0, %19 ], [ %45, %FIRFilterStreaming.exit.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexitloopexit_26) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_FIRFilterStreamingexit_0i = main__crit_edgei_45_reg;
	end
end
always @(posedge clk) begin
	/* main: %FIRFilterStreaming.exit*/
	/*   %.0.i = phi i32 [ 0, %19 ], [ %45, %FIRFilterStreaming.exit.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__19_14) & (memory_controller_waitrequest == 1'd0)) & (main_19_34_reg == 1'd1))) begin
		main_FIRFilterStreamingexit_0i_reg <= main_FIRFilterStreamingexit_0i;
		if (start == 1'b0 && ^(main_FIRFilterStreamingexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_FIRFilterStreamingexit_0i_reg"); $finish; end
	end
	/* main: %FIRFilterStreaming.exit*/
	/*   %.0.i = phi i32 [ 0, %19 ], [ %45, %FIRFilterStreaming.exit.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexitloopexit_26) & (memory_controller_waitrequest == 1'd0))) begin
		main_FIRFilterStreamingexit_0i_reg <= main_FIRFilterStreamingexit_0i;
		if (start == 1'b0 && ^(main_FIRFilterStreamingexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_FIRFilterStreamingexit_0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %FIRFilterStreaming.exit*/
	/*   %47 = add i32 %.0.i, %total.04*/
		main_FIRFilterStreamingexit_47 = (main_FIRFilterStreamingexit_0i_reg + main_19_total04_reg);
end
always @(posedge clk) begin
	/* main: %FIRFilterStreaming.exit*/
	/*   %47 = add i32 %.0.i, %total.04*/
	if ((cur_state == LEGUP_F_main_BB_FIRFilterStreamingexit_27)) begin
		main_FIRFilterStreamingexit_47_reg <= main_FIRFilterStreamingexit_47;
		if (start == 1'b0 && ^(main_FIRFilterStreamingexit_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_FIRFilterStreamingexit_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %FIRFilterStreaming.exit*/
	/*   %indvar.next4 = add i32 %indvar3, 1*/
		main_FIRFilterStreamingexit_indvarnext4 = (main_19_indvar3_reg + 32'd1);
end
always @(*) begin
	/* main: %FIRFilterStreaming.exit*/
	/*   %exitcond5 = icmp eq i32 %indvar.next4, 32*/
		main_FIRFilterStreamingexit_exitcond5 = (main_FIRFilterStreamingexit_indvarnext4 == 32'd32);
end
always @(*) begin
	/* main: %48*/
	/*   %50 = icmp eq i32 %47, 44880*/
		main_48_50 = (main_FIRFilterStreamingexit_47_reg == 32'd44880);
end
always @(*) begin
	lpm_mult_main_preheaderipreheader_35_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.preheader.i.preheader*/
	/*   %35 = mul i32 %indvar3, 11*/
	if ((lpm_mult_main_preheaderipreheader_35_en == 1'd1)) begin
		main_preheaderipreheader_35_stage0_reg <= (main_19_indvar3_reg * 32'd11);
	end
end
always @(*) begin
	lpm_mult_main_preheaderipreheader_37_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.preheader.i.preheader*/
	/*   %37 = mul i32 %33, 10*/
	if ((lpm_mult_main_preheaderipreheader_37_en == 1'd1)) begin
		main_preheaderipreheader_37_stage0_reg <= (main_19_33_reg * 32'd10);
	end
end
always @(*) begin
	lpm_mult_main__crit_edgei_tmp1i_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %tmp1.i = mul i32 %tmp.i, %43*/
	if ((lpm_mult_main__crit_edgei_tmp1i_en == 1'd1)) begin
		main__crit_edgei_tmp1i_stage0_reg <= (main__crit_edgei_tmpi * main__crit_edgei_43);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %55*/
	/*   ret i32 %47*/
	if ((cur_state == LEGUP_F_main_BB__55_31)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %33, i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %31, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %29, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %27, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %25, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %23, i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %21, i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %indvar3, i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %42 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_18)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_3)) begin
		memory_controller_address_a = main_2_si0;
	end
	/* main: %19*/
	/*   store i32 %33, i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_6)) begin
		memory_controller_address_a = main_legup_memset_4exit_5_reg;
	end
	/* main: %19*/
	/*   store i32 %31, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_7)) begin
		memory_controller_address_a = main_legup_memset_4exit_6_reg;
	end
	/* main: %19*/
	/*   store i32 %29, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_8)) begin
		memory_controller_address_a = main_legup_memset_4exit_8_reg;
	end
	/* main: %19*/
	/*   store i32 %27, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_9)) begin
		memory_controller_address_a = main_legup_memset_4exit_10_reg;
	end
	/* main: %19*/
	/*   store i32 %25, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_10)) begin
		memory_controller_address_a = main_legup_memset_4exit_12_reg;
	end
	/* main: %19*/
	/*   store i32 %23, i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_11)) begin
		memory_controller_address_a = main_legup_memset_4exit_14_reg;
	end
	/* main: %19*/
	/*   store i32 %21, i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_12)) begin
		memory_controller_address_a = main_legup_memset_4exit_16_reg;
	end
	/* main: %19*/
	/*   store i32 %indvar3, i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_13)) begin
		memory_controller_address_a = main_legup_memset_4exit_18_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %42 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_18)) begin
		memory_controller_address_a = main__crit_edgei_scevgep2;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %33, i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %31, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %29, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_8)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %27, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %25, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %23, i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %21, i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %indvar3, i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_13)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %42 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_18)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_3)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %19*/
	/*   store i32 %33, i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_6)) begin
		memory_controller_in_a = main_19_33_reg;
	end
	/* main: %19*/
	/*   store i32 %31, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_7)) begin
		memory_controller_in_a = main_19_31_reg;
	end
	/* main: %19*/
	/*   store i32 %29, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_8)) begin
		memory_controller_in_a = main_19_29_reg;
	end
	/* main: %19*/
	/*   store i32 %27, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_9)) begin
		memory_controller_in_a = main_19_27_reg;
	end
	/* main: %19*/
	/*   store i32 %25, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_10)) begin
		memory_controller_in_a = main_19_25_reg;
	end
	/* main: %19*/
	/*   store i32 %23, i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_11)) begin
		memory_controller_in_a = main_19_23_reg;
	end
	/* main: %19*/
	/*   store i32 %21, i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_12)) begin
		memory_controller_in_a = main_19_21_reg;
	end
	/* main: %19*/
	/*   store i32 %indvar3, i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_13)) begin
		memory_controller_in_a = main_19_indvar3_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %19*/
	/*   store i32 %33, i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %19*/
	/*   store i32 %31, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %19*/
	/*   store i32 %29, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %19*/
	/*   store i32 %27, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %19*/
	/*   store i32 %25, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %19*/
	/*   store i32 %23, i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %19*/
	/*   store i32 %21, i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %19*/
	/*   store i32 %indvar3, i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %42 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_18)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %19*/
	/*   store i32 %32, i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %30, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %28, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %26, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %24, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %22, i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %20, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_12)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %i.03, i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %43 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_18)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i.._crit_edge.i_crit_edge*/
	/*   %.pre.i.pre = load i32* %.phi.trans.insert.i.phi.trans.insert, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_23)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %19*/
	/*   store i32 %32, i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_6)) begin
		memory_controller_address_b = main_legup_memset_4exit_4_reg;
	end
	/* main: %19*/
	/*   store i32 %30, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_7)) begin
		memory_controller_address_b = main_legup_memset_4exit_7_reg;
	end
	/* main: %19*/
	/*   store i32 %28, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_8)) begin
		memory_controller_address_b = main_legup_memset_4exit_9_reg;
	end
	/* main: %19*/
	/*   store i32 %26, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_9)) begin
		memory_controller_address_b = main_legup_memset_4exit_11_reg;
	end
	/* main: %19*/
	/*   store i32 %24, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_10)) begin
		memory_controller_address_b = main_legup_memset_4exit_13_reg;
	end
	/* main: %19*/
	/*   store i32 %22, i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_11)) begin
		memory_controller_address_b = main_legup_memset_4exit_15_reg;
	end
	/* main: %19*/
	/*   store i32 %20, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_12)) begin
		memory_controller_address_b = main_legup_memset_4exit_17_reg;
	end
	/* main: %19*/
	/*   store i32 %i.03, i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_13)) begin
		memory_controller_address_b = main_legup_memset_4exit_3_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %43 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_18)) begin
		memory_controller_address_b = main__crit_edgei_scevgep;
	end
	/* main: %._crit_edge.i.._crit_edge.i_crit_edge*/
	/*   %.pre.i.pre = load i32* %.phi.trans.insert.i.phi.trans.insert, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_23)) begin
		memory_controller_address_b = main__crit_edgei_crit_edgei_crit_edge_phitransinsertiphitransinsert;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %19*/
	/*   store i32 %32, i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_6)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %30, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_7)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %28, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_8)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %26, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_9)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %24, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_10)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %22, i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_11)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %20, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_12)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %19*/
	/*   store i32 %i.03, i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_13)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %43 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_18)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %._crit_edge.i.._crit_edge.i_crit_edge*/
	/*   %.pre.i.pre = load i32* %.phi.trans.insert.i.phi.trans.insert, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_23)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* main: %19*/
	/*   store i32 %32, i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_6)) begin
		memory_controller_in_b = main_19_32_reg;
	end
	/* main: %19*/
	/*   store i32 %30, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_7)) begin
		memory_controller_in_b = main_19_30_reg;
	end
	/* main: %19*/
	/*   store i32 %28, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_8)) begin
		memory_controller_in_b = main_19_28_reg;
	end
	/* main: %19*/
	/*   store i32 %26, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_9)) begin
		memory_controller_in_b = main_19_26_reg;
	end
	/* main: %19*/
	/*   store i32 %24, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_10)) begin
		memory_controller_in_b = main_19_24_reg;
	end
	/* main: %19*/
	/*   store i32 %22, i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_11)) begin
		memory_controller_in_b = main_19_22_reg;
	end
	/* main: %19*/
	/*   store i32 %20, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_12)) begin
		memory_controller_in_b = main_19_20_reg;
	end
	/* main: %19*/
	/*   store i32 %i.03, i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_13)) begin
		memory_controller_in_b = main_19_i03_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %19*/
	/*   store i32 %32, i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %19*/
	/*   store i32 %30, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %19*/
	/*   store i32 %28, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %19*/
	/*   store i32 %26, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %19*/
	/*   store i32 %24, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %19*/
	/*   store i32 %22, i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %19*/
	/*   store i32 %20, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_12)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %19*/
	/*   store i32 %i.03, i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__19_13)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %43 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_18)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i.._crit_edge.i_crit_edge*/
	/*   %.pre.i.pre = load i32* %.phi.trans.insert.i.phi.trans.insert, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge_23)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %55*/
	/*   ret i32 %47*/
	if ((cur_state == LEGUP_F_main_BB__55_31)) begin
		return_val <= main_FIRFilterStreamingexit_47_reg;
		if (start == 1'b0 && ^(main_FIRFilterStreamingexit_47_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 

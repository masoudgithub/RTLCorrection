//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Mon Apr  1 09:38:19 2019
//----------------------------------------------------------------------------//

--------------------------------------------------------------------------------
Function: main
--------------------------------------------------------------------------------
Function unit type:           Number Required               
a_input_local_mem_dual_port   1                             
b_input_local_mem_dual_port   1                             
countLeadingZeros32countLeadingZerosHigh_local_mem_dual_port1                             
signed_add_32                 2                             
signed_add_64                 3                             
signed_multiply_64            4                             
signed_subtract_32            2                             
signed_subtract_64            3                             
unsigned_divide_64            1                             
z_output_local_mem_dual_port  1                             

Running Bipartite Weighted Matching on function: main
State: LEGUP_F_main_BB__1
Binding functional unit type: a_input_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_a_input_local_mem_dual_port_0
  %3 = load i64* %2, align 8, ... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_a_input_local_mem_dual_port_0
  %3 = load i64* %2, align 8, ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %3 = load i64* %2, align 8, ... (idx: 0) -> main_a_input_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB__1
Binding functional unit type: b_input_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_b_input_local_mem_dual_port_0
  %5 = load i64* %4, align 8, ... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_b_input_local_mem_dual_port_0
  %5 = load i64* %4, align 8, ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %5 = load i64* %4, align 8, ... (idx: 0) -> main_b_input_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %gep = add i32 %gep_int, %ge... (idx: 0)        -10                           -10                           
  %gep3 = add i32 %gep_int1, %... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %gep = add i32 %gep_int, %ge... (idx: 0)        1                             0                             
  %gep3 = add i32 %gep_int1, %... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep = add i32 %gep_int, %ge... (idx: 0) -> main_signed_add_32_0 (mux inputs: 2)
  %gep3 = add i32 %gep_int1, %... (idx: 1) -> main_signed_add_32_1 (mux inputs: 2)
State: LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %107 = add nsw i32 %shiftCou... (idx: 0)        -20                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %107 = add nsw i32 %shiftCou... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %107 = add nsw i32 %shiftCou... (idx: 0) -> main_signed_add_32_0 (mux inputs: 4)
State: LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i
Binding functional unit type: countLeadingZeros32countLeadingZerosHigh_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_countLeadingZeros32countLeadingZerosHigh_local_mem_dual_port_0
  %106 = load i32* %105, align... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_countLeadingZeros32countLeadingZerosHigh_local_mem_dual_port_0
  %106 = load i32* %105, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %106 = load i32* %105, align... (idx: 0) -> main_countLeadingZeros32countLeadingZerosHigh_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %gep6 = add i32 %gep_int4, %... (idx: 0)        -40                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %gep6 = add i32 %gep_int4, %... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep6 = add i32 %gep_int4, %... (idx: 0) -> main_signed_add_32_0 (mux inputs: 6)
State: LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %108 = add i32 %107, %106 (idx: 0)              -60                           -20                           
  %109 = add nsw i32 %108, -11 (idx: 1)           -55                           -15                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %108 = add i32 %107, %106 (idx: 0)              1                             0                             
  %109 = add nsw i32 %108, -11 (idx: 1)           0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %108 = add i32 %107, %106 (idx: 0) -> main_signed_add_32_0 (mux inputs: 8)
  %109 = add nsw i32 %108, -11 (idx: 1) -> main_signed_add_32_1 (mux inputs: 3)
State: LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %112 = sub i32 12, %108 (idx: 0)                -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %112 = sub i32 12, %108 (idx: 0)                1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %112 = sub i32 12, %108 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 1)
State: LEGUP_F_main_BB_normalizeFloat64Subnormalexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %133 = add nsw i32 %shiftCou... (idx: 0)        -80                           -30                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %133 = add nsw i32 %shiftCou... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %133 = add nsw i32 %shiftCou... (idx: 0) -> main_signed_add_32_0 (mux inputs: 10)
State: LEGUP_F_main_BB_normalizeFloat64Subnormalexiti
Binding functional unit type: countLeadingZeros32countLeadingZerosHigh_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_countLeadingZeros32countLeadingZerosHigh_local_mem_dual_port_0
  %132 = load i32* %131, align... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_countLeadingZeros32countLeadingZerosHigh_local_mem_dual_port_0
  %132 = load i32* %131, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %132 = load i32* %131, align... (idx: 0) -> main_countLeadingZeros32countLeadingZerosHigh_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_normalizeFloat64Subnormalexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %gep9 = add i32 %gep_int7, %... (idx: 0)        -100                          -30                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %gep9 = add i32 %gep_int7, %... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep9 = add i32 %gep_int7, %... (idx: 0) -> main_signed_add_32_0 (mux inputs: 12)
State: LEGUP_F_main_BB_normalizeFloat64Subnormalexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %134 = add i32 %133, %132 (idx: 0)              -120                          -30                           
  %135 = add nsw i32 %134, -11 (idx: 1)           -115                          -25                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %134 = add i32 %133, %132 (idx: 0)              1                             0                             
  %135 = add nsw i32 %134, -11 (idx: 1)           0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %134 = add i32 %133, %132 (idx: 0) -> main_signed_add_32_0 (mux inputs: 14)
  %135 = add nsw i32 %134, -11 (idx: 1) -> main_signed_add_32_1 (mux inputs: 4)
State: LEGUP_F_main_BB_normalizeFloat64Subnormalexiti
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %138 = sub i32 12, %134 (idx: 0)                -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %138 = sub i32 12, %134 (idx: 0)                1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %138 = sub i32 12, %134 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 2)
State: LEGUP_F_main_BB__139
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %143 = add nsw i32 %142, 102... (idx: 0)        -135                          -35                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %143 = add nsw i32 %142, 102... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %143 = add nsw i32 %142, 102... (idx: 0) -> main_signed_add_32_0 (mux inputs: 15)
State: LEGUP_F_main_BB__139
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %142 = sub nsw i32 %140, %11... (idx: 0)        -20                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %142 = sub nsw i32 %140, %11... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %142 = sub nsw i32 %140, %11... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 4)
State: LEGUP_F_main_BB__150
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %152 = add nsw i32 %142, 102... (idx: 0)        -140                          -35                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %152 = add nsw i32 %142, 102... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %152 = add nsw i32 %142, 102... (idx: 0) -> main_signed_add_32_0 (mux inputs: 15)
State: LEGUP_F_main_BB__160
Binding functional unit type: unsigned_divide_64
Weight matrix for operation/function unit matching:
                                                  main_unsigned_divide_64_0     
  %161 = udiv i64 %154, %157 (idx: 0)             -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_unsigned_divide_64_0     
  %161 = udiv i64 %154, %157 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %161 = udiv i64 %154, %157 (idx: 0) -> main_unsigned_divide_64_0 (mux inputs: 2)
State: LEGUP_F_main_BB__163
Binding functional unit type: signed_multiply_64
Weight matrix for operation/function unit matching:
                                                  main_signed_multiply_64_0     main_signed_multiply_64_1     main_signed_multiply_64_2     main_signed_multiply_64_3     
  %167 = mul i64 %165, %166 (idx: 0)              -10                           -10                           -10                           -10                           
  %168 = mul i64 %165, %157 (idx: 1)              -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_64_0     main_signed_multiply_64_1     main_signed_multiply_64_2     main_signed_multiply_64_3     
  %167 = mul i64 %165, %166 (idx: 0)              1                             0                             0                             0                             
  %168 = mul i64 %165, %157 (idx: 1)              0                             1                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %167 = mul i64 %165, %166 (idx: 0) -> main_signed_multiply_64_0 (mux inputs: 2)
  %168 = mul i64 %165, %157 (idx: 1) -> main_signed_multiply_64_1 (mux inputs: 2)
State: LEGUP_F_main_BB__163
Binding functional unit type: signed_add_64
Weight matrix for operation/function unit matching:
                                                  main_signed_add_64_0          main_signed_add_64_1          main_signed_add_64_2          
  %174 = add i64 %173, %.neg.i... (idx: 0)        -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_64_0          main_signed_add_64_1          main_signed_add_64_2          
  %174 = add i64 %173, %.neg.i... (idx: 0)        1                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %174 = add i64 %173, %.neg.i... (idx: 0) -> main_signed_add_64_0 (mux inputs: 2)
State: LEGUP_F_main_BB__163
Binding functional unit type: signed_subtract_64
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_64_0     main_signed_subtract_64_1     main_signed_subtract_64_2     
  %171 = sub i64 0, %170 (idx: 0)                 -5                            -5                            -5                            
  %.neg3.i.i = sub i64 %154, %... (idx: 1)        -10                           -10                           -10                           
  %173 = sub i64 %.neg3.i.i, %... (idx: 2)        -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_64_0     main_signed_subtract_64_1     main_signed_subtract_64_2     
  %171 = sub i64 0, %170 (idx: 0)                 1                             0                             0                             
  %.neg3.i.i = sub i64 %154, %... (idx: 1)        0                             1                             0                             
  %173 = sub i64 %.neg3.i.i, %... (idx: 2)        0                             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %171 = sub i64 0, %170 (idx: 0) -> main_signed_subtract_64_0 (mux inputs: 1)
  %.neg3.i.i = sub i64 %154, %... (idx: 1) -> main_signed_subtract_64_1 (mux inputs: 2)
  %173 = sub i64 %.neg3.i.i, %... (idx: 2) -> main_signed_subtract_64_2 (mux inputs: 2)
State: LEGUP_F_main_BB__177
Binding functional unit type: signed_add_64
Weight matrix for operation/function unit matching:
                                                  main_signed_add_64_0          main_signed_add_64_1          main_signed_add_64_2          
  %180 = add i64 %z.05.i.i, -4... (idx: 0)        -25                           -5                            -5                            
  %181 = add i64 %179, %157 (idx: 1)              -30                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_64_0          main_signed_add_64_1          main_signed_add_64_2          
  %180 = add i64 %z.05.i.i, -4... (idx: 0)        1                             0                             0                             
  %181 = add i64 %179, %157 (idx: 1)              0                             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %180 = add i64 %z.05.i.i, -4... (idx: 0) -> main_signed_add_64_0 (mux inputs: 3)
  %181 = add i64 %179, %157 (idx: 1) -> main_signed_add_64_2 (mux inputs: 2)
State: LEGUP_F_main_BB__177
Binding functional unit type: signed_add_64
Weight matrix for operation/function unit matching:
                                                  main_signed_add_64_0          main_signed_add_64_1          main_signed_add_64_2          
  %183 = add i64 %181, %182 (idx: 0)              -40                           -10                           -30                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_64_0          main_signed_add_64_1          main_signed_add_64_2          
  %183 = add i64 %181, %182 (idx: 0)              1                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %183 = add i64 %181, %182 (idx: 0) -> main_signed_add_64_0 (mux inputs: 5)
State: LEGUP_F_main_BB__189
Binding functional unit type: unsigned_divide_64
Weight matrix for operation/function unit matching:
                                                  main_unsigned_divide_64_0     
  %190 = udiv i64 %187, %157 (idx: 0)             -25                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_unsigned_divide_64_0     
  %190 = udiv i64 %187, %157 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %190 = udiv i64 %187, %157 (idx: 0) -> main_unsigned_divide_64_0 (mux inputs: 3)
State: LEGUP_F_main_BB__195
Binding functional unit type: signed_multiply_64
Weight matrix for operation/function unit matching:
                                                  main_signed_multiply_64_0     main_signed_multiply_64_1     main_signed_multiply_64_2     main_signed_multiply_64_3     
  %198 = mul i64 %197, %166 (idx: 0)              -15                           -20                           -10                           -10                           
  %199 = mul i64 %196, %166 (idx: 1)              -15                           -20                           -10                           -10                           
  %200 = mul i64 %197, %157 (idx: 2)              -20                           -15                           -10                           -10                           
  %201 = mul i64 %196, %157 (idx: 3)              -20                           -15                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_64_0     main_signed_multiply_64_1     main_signed_multiply_64_2     main_signed_multiply_64_3     
  %198 = mul i64 %197, %166 (idx: 0)              0                             1                             0                             0                             
  %199 = mul i64 %196, %166 (idx: 1)              0                             0                             1                             0                             
  %200 = mul i64 %197, %157 (idx: 2)              1                             0                             0                             0                             
  %201 = mul i64 %196, %157 (idx: 3)              0                             0                             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %200 = mul i64 %197, %157 (idx: 2) -> main_signed_multiply_64_0 (mux inputs: 4)
  %198 = mul i64 %197, %166 (idx: 0) -> main_signed_multiply_64_1 (mux inputs: 4)
  %199 = mul i64 %196, %166 (idx: 1) -> main_signed_multiply_64_2 (mux inputs: 2)
  %201 = mul i64 %196, %157 (idx: 3) -> main_signed_multiply_64_3 (mux inputs: 2)
State: LEGUP_F_main_BB__195
Binding functional unit type: signed_subtract_64
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_64_0     main_signed_subtract_64_1     main_signed_subtract_64_2     
  %.neg30.i = sub i64 %154, %2... (idx: 0)        -10                           -15                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_64_0     main_signed_subtract_64_1     main_signed_subtract_64_2     
  %.neg30.i = sub i64 %154, %2... (idx: 0)        0                             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.neg30.i = sub i64 %154, %2... (idx: 0) -> main_signed_subtract_64_2 (mux inputs: 4)
State: LEGUP_F_main_BB__195
Binding functional unit type: signed_add_64
Weight matrix for operation/function unit matching:
                                                  main_signed_add_64_0          main_signed_add_64_1          main_signed_add_64_2          
  %.neg32.i = add i64 %.neg30.... (idx: 0)        -50                           -10                           -20                           
  %210 = add i64 %209, %.neg.i... (idx: 1)        -50                           -10                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_64_0          main_signed_add_64_1          main_signed_add_64_2          
  %.neg32.i = add i64 %.neg30.... (idx: 0)        1                             0                             0                             
  %210 = add i64 %209, %.neg.i... (idx: 1)        0                             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.neg32.i = add i64 %.neg30.... (idx: 0) -> main_signed_add_64_0 (mux inputs: 7)
  %210 = add i64 %209, %.neg.i... (idx: 1) -> main_signed_add_64_2 (mux inputs: 4)
State: LEGUP_F_main_BB__195
Binding functional unit type: signed_subtract_64
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_64_0     main_signed_subtract_64_1     main_signed_subtract_64_2     
  %207 = sub i64 0, %overflow_... (idx: 0)        -5                            -15                           -35                           
  %209 = sub i64 %.neg32.i, %2... (idx: 1)        -10                           -20                           -40                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_64_0     main_signed_subtract_64_1     main_signed_subtract_64_2     
  %207 = sub i64 0, %overflow_... (idx: 0)        0                             0                             1                             
  %209 = sub i64 %.neg32.i, %2... (idx: 1)        0                             1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %209 = sub i64 %.neg32.i, %2... (idx: 1) -> main_signed_subtract_64_1 (mux inputs: 4)
  %207 = sub i64 0, %overflow_... (idx: 0) -> main_signed_subtract_64_2 (mux inputs: 5)
State: LEGUP_F_main_BB_lrphi
Binding functional unit type: signed_add_64
Weight matrix for operation/function unit matching:
                                                  main_signed_add_64_0          main_signed_add_64_1          main_signed_add_64_2          
  %214 = add i64 %zSig.036.i, ... (idx: 0)        -65                           -5                            -35                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_64_0          main_signed_add_64_1          main_signed_add_64_2          
  %214 = add i64 %zSig.036.i, ... (idx: 0)        1                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %214 = add i64 %zSig.036.i, ... (idx: 0) -> main_signed_add_64_0 (mux inputs: 8)
State: LEGUP_F_main_BB_lrphi
Binding functional unit type: signed_add_64
Weight matrix for operation/function unit matching:
                                                  main_signed_add_64_0          main_signed_add_64_1          main_signed_add_64_2          
  %216 = add i64 %215, %213 (idx: 0)              -80                           -10                           -40                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_64_0          main_signed_add_64_1          main_signed_add_64_2          
  %216 = add i64 %215, %213 (idx: 0)              1                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %216 = add i64 %215, %213 (idx: 0) -> main_signed_add_64_0 (mux inputs: 10)
State: LEGUP_F_main_BB__225
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %226 = sub nsw i32 0, %zExp.... (idx: 0)        -35                           -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %226 = sub nsw i32 0, %zExp.... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %226 = sub nsw i32 0, %zExp.... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 5)
State: LEGUP_F_main_BB_roundAndPackFloat64exiti
Binding functional unit type: signed_add_64
Weight matrix for operation/function unit matching:
                                                  main_signed_add_64_0          main_signed_add_64_1          main_signed_add_64_2          
  %249 = add i64 %zSig67.i.i, ... (idx: 0)        -95                           -5                            -35                           
  %261 = add nsw i64 %260, %25... (idx: 1)        -100                          -10                           -40                           
  %266 = add i64 %261, %263 (idx: 2)              -100                          -10                           -40                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_64_0          main_signed_add_64_1          main_signed_add_64_2          
  %249 = add i64 %zSig67.i.i, ... (idx: 0)        1                             0                             0                             
  %261 = add nsw i64 %260, %25... (idx: 1)        0                             1                             0                             
  %266 = add i64 %261, %263 (idx: 2)              0                             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %249 = add i64 %zSig67.i.i, ... (idx: 0) -> main_signed_add_64_0 (mux inputs: 11)
  %261 = add nsw i64 %260, %25... (idx: 1) -> main_signed_add_64_1 (mux inputs: 2)
  %266 = add i64 %261, %263 (idx: 2) -> main_signed_add_64_2 (mux inputs: 6)
State: LEGUP_F_main_BB_roundAndPackFloat64exiti
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %257 = sub nsw i32 %14, %..0... (idx: 0)        -50                           -10                           
  %258 = sub i32 0, %14 (idx: 1)                  -45                           -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %257 = sub nsw i32 %14, %..0... (idx: 0)        1                             0                             
  %258 = sub i32 0, %14 (idx: 1)                  0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %257 = sub nsw i32 %14, %..0... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 7)
  %258 = sub i32 0, %14 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 1)
State: LEGUP_F_main_BB_roundAndPackFloat64exiti
Binding functional unit type: signed_add_64
Weight matrix for operation/function unit matching:
                                                  main_signed_add_64_0          main_signed_add_64_1          main_signed_add_64_2          
  %267 = add i64 %266, %265 (idx: 0)              -110                          -30                           -60                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_64_0          main_signed_add_64_1          main_signed_add_64_2          
  %267 = add i64 %266, %265 (idx: 0)              1                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %267 = add i64 %266, %265 (idx: 0) -> main_signed_add_64_0 (mux inputs: 13)
State: LEGUP_F_main_BB_float64_divexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %274 = add nsw i32 %i.01, 1 (idx: 0)            -145                          -35                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %274 = add nsw i32 %i.01, 1 (idx: 0)            1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %274 = add nsw i32 %i.01, 1 (idx: 0) -> main_signed_add_32_0 (mux inputs: 16)
State: LEGUP_F_main_BB_float64_divexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %gep12 = add i32 %gep_int10,... (idx: 0)        -160                          -40                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %gep12 = add i32 %gep_int10,... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep12 = add i32 %gep_int10,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 18)
State: LEGUP_F_main_BB_float64_divexit
Binding functional unit type: z_output_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_z_output_local_mem_dual_port_0
  %269 = load i64* %268, align... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_z_output_local_mem_dual_port_0
  %269 = load i64* %268, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %269 = load i64* %268, align... (idx: 0) -> main_z_output_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_float64_divexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %272 = add nsw i32 %271, %ma... (idx: 0)        -180                          -40                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %272 = add nsw i32 %271, %ma... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %272 = add nsw i32 %271, %ma... (idx: 0) -> main_signed_add_32_0 (mux inputs: 20)


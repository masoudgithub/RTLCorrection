//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Tue Jun 18 03:11:52 2019
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sun Jun 23 12:20:08 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 4
`define MEMORY_CONTROLLER_TAG_SIZE 9

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	return_val
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_main_BB__1_1 = 6'd1;
parameter [5:0] LEGUP_F_main_BB__1_2 = 6'd2;
parameter [5:0] LEGUP_F_main_BB__1_3 = 6'd3;
parameter [5:0] LEGUP_F_main_BB__15_4 = 6'd4;
parameter [5:0] LEGUP_F_main_BB__17_5 = 6'd5;
parameter [5:0] LEGUP_F_main_BB__20_6 = 6'd6;
parameter [5:0] LEGUP_F_main_BB__23_7 = 6'd7;
parameter [5:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_8 = 6'd8;
parameter [5:0] LEGUP_F_main_BB__31_9 = 6'd9;
parameter [5:0] LEGUP_F_main_BB_float64_is_signaling_nanexiti11i_10 = 6'd10;
parameter [5:0] LEGUP_F_main_BB_float64_is_signaling_nanexiti11i_11 = 6'd11;
parameter [5:0] LEGUP_F_main_BB__37_12 = 6'd12;
parameter [5:0] LEGUP_F_main_BB__41_13 = 6'd13;
parameter [5:0] LEGUP_F_main_BB__43_14 = 6'd14;
parameter [5:0] LEGUP_F_main_BB__46_15 = 6'd15;
parameter [5:0] LEGUP_F_main_BB__48_16 = 6'd16;
parameter [5:0] LEGUP_F_main_BB__50_17 = 6'd17;
parameter [5:0] LEGUP_F_main_BB__53_18 = 6'd18;
parameter [5:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_19 = 6'd19;
parameter [5:0] LEGUP_F_main_BB__61_20 = 6'd20;
parameter [5:0] LEGUP_F_main_BB_float64_is_signaling_nanexitii_21 = 6'd21;
parameter [5:0] LEGUP_F_main_BB_float64_is_signaling_nanexitii_22 = 6'd22;
parameter [5:0] LEGUP_F_main_BB__67_23 = 6'd23;
parameter [5:0] LEGUP_F_main_BB__71_24 = 6'd24;
parameter [5:0] LEGUP_F_main_BB__73_25 = 6'd25;
parameter [5:0] LEGUP_F_main_BB__76_26 = 6'd26;
parameter [5:0] LEGUP_F_main_BB__78_27 = 6'd27;
parameter [5:0] LEGUP_F_main_BB__80_28 = 6'd28;
parameter [5:0] LEGUP_F_main_BB__82_29 = 6'd29;
parameter [5:0] LEGUP_F_main_BB__88_30 = 6'd30;
parameter [5:0] LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_31 = 6'd31;
parameter [5:0] LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_32 = 6'd32;
parameter [5:0] LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_33 = 6'd33;
parameter [5:0] LEGUP_F_main_BB__99_34 = 6'd34;
parameter [5:0] LEGUP_F_main_BB__102_35 = 6'd35;
parameter [5:0] LEGUP_F_main_BB__104_36 = 6'd36;
parameter [5:0] LEGUP_F_main_BB__106_37 = 6'd37;
parameter [5:0] LEGUP_F_main_BB__112_38 = 6'd38;
parameter [5:0] LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_39 = 6'd39;
parameter [5:0] LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_40 = 6'd40;
parameter [5:0] LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_41 = 6'd41;
parameter [5:0] LEGUP_F_main_BB_roundAndPackFloat64exiti_42 = 6'd42;
parameter [5:0] LEGUP_F_main_BB_roundAndPackFloat64exiti_43 = 6'd43;
parameter [5:0] LEGUP_F_main_BB_roundAndPackFloat64exiti_44 = 6'd44;
parameter [5:0] LEGUP_F_main_BB_roundAndPackFloat64exiti_45 = 6'd45;
parameter [5:0] LEGUP_F_main_BB_roundAndPackFloat64exiti_46 = 6'd46;
parameter [5:0] LEGUP_F_main_BB_float64_mulexit_47 = 6'd47;
parameter [5:0] LEGUP_F_main_BB_float64_mulexit_48 = 6'd48;
parameter [5:0] LEGUP_F_main_BB_float64_mulexit_49 = 6'd49;
parameter [5:0] LEGUP_F_main_BB__170_50 = 6'd50;
parameter [5:0] LEGUP_F_main_BB__173_51 = 6'd51;
parameter [5:0] LEGUP_F_main_BB__175_52 = 6'd52;
parameter [5:0] LEGUP_F_main_BB__177_53 = 6'd53;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [31:0] main_1_float_exception_flags0;
reg [31:0] main_1_float_exception_flags0_reg;
reg [31:0] main_1_main_result02;
reg [31:0] main_1_main_result02_reg;
reg [31:0] main_1_i01;
reg [31:0] main_1_i01_reg;
reg [31:0] main_1_gep_int;
reg [31:0] main_1_gep_int_reg;
reg [31:0] main_1_gep_array;
reg [31:0] main_1_gep_array_reg;
reg [31:0] main_1_gep;
reg [31:0] main_1_gep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_2_reg;
reg [63:0] main_1_3;
reg [63:0] main_1_3_reg;
reg [31:0] main_1_gep_int1;
reg [31:0] main_1_gep_int1_reg;
reg [31:0] main_1_gep_array2;
reg [31:0] main_1_gep_array2_reg;
reg [31:0] main_1_gep3;
reg [31:0] main_1_gep3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_4_reg;
reg [63:0] main_1_5;
reg [63:0] main_1_5_reg;
reg [63:0] main_1_6;
reg [63:0] main_1_6_reg;
reg [63:0] main_1_7;
reg [63:0] main_1_7_reg;
reg [31:0] main_1_tri18i;
reg [31:0] main_1_tri18i_reg;
reg [31:0] main_1_8;
reg [31:0] main_1_8_reg;
reg [63:0] main_1_9;
reg [63:0] main_1_9_reg;
reg [63:0] main_1_10;
reg [63:0] main_1_10_reg;
reg [31:0] main_1_tri17i;
reg [31:0] main_1_tri17i_reg;
reg [31:0] main_1_11;
reg [31:0] main_1_11_reg;
reg [63:0] main_1_12;
reg [63:0] main_1_12_reg;
reg [63:0] main_1_13;
reg [63:0] main_1_13_reg;
reg  main_1_14;
reg  main_1_14_reg;
reg  main_15_16;
reg  main_15_16_reg;
reg  main_17_18;
reg  main_17_18_reg;
reg  main_17_19;
reg  main_17_19_reg;
reg  main_17_orcondi;
reg  main_17_orcondi_reg;
reg [63:0] main_20_21;
reg [63:0] main_20_21_reg;
reg  main_20_22;
reg  main_20_22_reg;
reg [63:0] main_23_24;
reg [63:0] main_23_24_reg;
reg  main_23_25;
reg  main_23_25_reg;
reg  main_float64_is_signaling_nanexit1i10i_26;
reg  main_float64_is_signaling_nanexit1i10i_26_reg;
reg [62:0] main_float64_is_signaling_nanexit1i10i_27;
reg [62:0] main_float64_is_signaling_nanexit1i10i_27_reg;
reg  main_float64_is_signaling_nanexit1i10i_28;
reg  main_float64_is_signaling_nanexit1i10i_28_reg;
reg [63:0] main_float64_is_signaling_nanexit1i10i_29;
reg [63:0] main_float64_is_signaling_nanexit1i10i_29_reg;
reg  main_float64_is_signaling_nanexit1i10i_30;
reg  main_float64_is_signaling_nanexit1i10i_30_reg;
reg [63:0] main_31_32;
reg [63:0] main_31_32_reg;
reg  main_31_33;
reg  main_31_33_reg;
reg  main_float64_is_signaling_nanexiti11i_34;
reg  main_float64_is_signaling_nanexiti11i_34_reg;
reg  main_float64_is_signaling_nanexiti11i_35;
reg  main_float64_is_signaling_nanexiti11i_35_reg;
reg [31:0] main_float64_is_signaling_nanexiti11i_36;
reg [31:0] main_float64_is_signaling_nanexiti11i_36_reg;
reg [31:0] main_float64_is_signaling_nanexiti11i_float_exception_flags0;
reg [31:0] main_float64_is_signaling_nanexiti11i_float_exception_flags0_reg;
reg  main_float64_is_signaling_nanexiti11i_;
reg  main_float64_is_signaling_nanexiti11i__reg;
reg [63:0] main_float64_is_signaling_nanexiti11i_mux2vi14i;
reg [63:0] main_float64_is_signaling_nanexiti11i_mux2vi14i_reg;
reg [63:0] main_float64_is_signaling_nanexiti11i_mux2i15i;
reg [63:0] main_float64_is_signaling_nanexiti11i_mux2i15i_reg;
reg [63:0] main_37_38;
reg [63:0] main_37_38_reg;
reg [63:0] main_37_39;
reg [63:0] main_37_39_reg;
reg  main_37_40;
reg  main_37_40_reg;
reg [31:0] main_41_42;
reg [31:0] main_41_42_reg;
reg [63:0] main_43_44;
reg [63:0] main_43_44_reg;
reg [63:0] main_43_45;
reg [63:0] main_43_45_reg;
reg  main_46_47;
reg  main_46_47_reg;
reg  main_48_49;
reg  main_48_49_reg;
reg [63:0] main_50_51;
reg [63:0] main_50_51_reg;
reg  main_50_52;
reg  main_50_52_reg;
reg [63:0] main_53_54;
reg [63:0] main_53_54_reg;
reg  main_53_55;
reg  main_53_55_reg;
reg  main_float64_is_signaling_nanexit1ii_56;
reg  main_float64_is_signaling_nanexit1ii_56_reg;
reg [62:0] main_float64_is_signaling_nanexit1ii_57;
reg [62:0] main_float64_is_signaling_nanexit1ii_57_reg;
reg  main_float64_is_signaling_nanexit1ii_58;
reg  main_float64_is_signaling_nanexit1ii_58_reg;
reg [63:0] main_float64_is_signaling_nanexit1ii_59;
reg [63:0] main_float64_is_signaling_nanexit1ii_59_reg;
reg  main_float64_is_signaling_nanexit1ii_60;
reg  main_float64_is_signaling_nanexit1ii_60_reg;
reg [63:0] main_61_62;
reg [63:0] main_61_62_reg;
reg  main_61_63;
reg  main_61_63_reg;
reg  main_float64_is_signaling_nanexitii_64;
reg  main_float64_is_signaling_nanexitii_64_reg;
reg  main_float64_is_signaling_nanexitii_65;
reg  main_float64_is_signaling_nanexitii_65_reg;
reg [31:0] main_float64_is_signaling_nanexitii_66;
reg [31:0] main_float64_is_signaling_nanexitii_66_reg;
reg [31:0] main_float64_is_signaling_nanexitii_float_exception_flags05;
reg [31:0] main_float64_is_signaling_nanexitii_float_exception_flags05_reg;
reg  main_float64_is_signaling_nanexitii_6;
reg  main_float64_is_signaling_nanexitii_6_reg;
reg [63:0] main_float64_is_signaling_nanexitii_mux2vii;
reg [63:0] main_float64_is_signaling_nanexitii_mux2vii_reg;
reg [63:0] main_float64_is_signaling_nanexitii_mux2ii;
reg [63:0] main_float64_is_signaling_nanexitii_mux2ii_reg;
reg [63:0] main_67_68;
reg [63:0] main_67_68_reg;
reg [63:0] main_67_69;
reg [63:0] main_67_69_reg;
reg  main_67_70;
reg  main_67_70_reg;
reg [31:0] main_71_72;
reg [31:0] main_71_72_reg;
reg [63:0] main_73_74;
reg [63:0] main_73_74_reg;
reg [63:0] main_73_75;
reg [63:0] main_73_75_reg;
reg  main_76_77;
reg  main_76_77_reg;
reg  main_78_79;
reg  main_78_79_reg;
reg [63:0] main_80_81;
reg [63:0] main_80_81_reg;
reg  main_82_83;
reg  main_82_83_reg;
reg [63:0] main_82_84;
reg [63:0] main_82_84_reg;
reg [63:0] main_82_asinkii2i;
reg [63:0] main_82_asinkii2i_reg;
reg [31:0] main_82_extracttii4i;
reg [31:0] main_82_extracttii4i_reg;
reg  main_82_85;
reg  main_82_85_reg;
reg [31:0] main_82_86;
reg [31:0] main_82_86_reg;
reg [31:0] main_82_aiii5i;
reg [31:0] main_82_aiii5i_reg;
reg [31:0] main_82_iii6i;
reg [31:0] main_82_iii6i_reg;
reg  main_82_87;
reg  main_82_87_reg;
reg [31:0] main_88_89;
reg [31:0] main_88_89_reg;
reg [31:0] main_88_90;
reg [31:0] main_88_90_reg;
reg [31:0] main_normalizeFloat64Subnormalexit9i_1iii7i;
reg [31:0] main_normalizeFloat64Subnormalexit9i_1iii7i_reg;
reg [31:0] main_normalizeFloat64Subnormalexit9i_shiftCount1iii8i;
reg [31:0] main_normalizeFloat64Subnormalexit9i_shiftCount1iii8i_reg;
reg [31:0] main_normalizeFloat64Subnormalexit9i_91;
reg [31:0] main_normalizeFloat64Subnormalexit9i_91_reg;
reg [31:0] main_normalizeFloat64Subnormalexit9i_gep_int4;
reg [31:0] main_normalizeFloat64Subnormalexit9i_gep_int4_reg;
reg [31:0] main_normalizeFloat64Subnormalexit9i_gep_array5;
reg [31:0] main_normalizeFloat64Subnormalexit9i_gep_array5_reg;
reg [31:0] main_normalizeFloat64Subnormalexit9i_gep6;
reg [31:0] main_normalizeFloat64Subnormalexit9i_gep6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeFloat64Subnormalexit9i_92;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeFloat64Subnormalexit9i_92_reg;
reg [31:0] main_normalizeFloat64Subnormalexit9i_93;
reg [31:0] main_normalizeFloat64Subnormalexit9i_93_reg;
reg [31:0] main_normalizeFloat64Subnormalexit9i_94;
reg [31:0] main_normalizeFloat64Subnormalexit9i_94_reg;
reg [31:0] main_normalizeFloat64Subnormalexit9i_95;
reg [31:0] main_normalizeFloat64Subnormalexit9i_95_reg;
reg [31:0] main_normalizeFloat64Subnormalexit9i_96;
reg [31:0] main_normalizeFloat64Subnormalexit9i_96_reg;
reg [63:0] main_normalizeFloat64Subnormalexit9i_97;
reg [63:0] main_normalizeFloat64Subnormalexit9i_97_reg;
reg [63:0] main_normalizeFloat64Subnormalexit9i_98;
reg [63:0] main_normalizeFloat64Subnormalexit9i_98_reg;
reg [63:0] main_99_100;
reg [63:0] main_99_100_reg;
reg  main_99_101;
reg  main_99_101_reg;
reg  main_102_103;
reg  main_102_103_reg;
reg [63:0] main_104_105;
reg [63:0] main_104_105_reg;
reg  main_106_107;
reg  main_106_107_reg;
reg [63:0] main_106_108;
reg [63:0] main_106_108_reg;
reg [63:0] main_106_asinkiii;
reg [63:0] main_106_asinkiii_reg;
reg [31:0] main_106_extracttiii;
reg [31:0] main_106_extracttiii_reg;
reg  main_106_109;
reg  main_106_109_reg;
reg [31:0] main_106_110;
reg [31:0] main_106_110_reg;
reg [31:0] main_106_aiiii;
reg [31:0] main_106_aiiii_reg;
reg [31:0] main_106_iiii;
reg [31:0] main_106_iiii_reg;
reg  main_106_111;
reg  main_106_111_reg;
reg [31:0] main_112_113;
reg [31:0] main_112_113_reg;
reg [31:0] main_112_114;
reg [31:0] main_112_114_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_1iiii;
reg [31:0] main_normalizeFloat64Subnormalexiti_1iiii_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_shiftCount1iiii;
reg [31:0] main_normalizeFloat64Subnormalexiti_shiftCount1iiii_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_115;
reg [31:0] main_normalizeFloat64Subnormalexiti_115_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_gep_int7;
reg [31:0] main_normalizeFloat64Subnormalexiti_gep_int7_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_gep_array8;
reg [31:0] main_normalizeFloat64Subnormalexiti_gep_array8_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_gep9;
reg [31:0] main_normalizeFloat64Subnormalexiti_gep9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeFloat64Subnormalexiti_116;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeFloat64Subnormalexiti_116_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_117;
reg [31:0] main_normalizeFloat64Subnormalexiti_117_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_118;
reg [31:0] main_normalizeFloat64Subnormalexiti_118_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_119;
reg [31:0] main_normalizeFloat64Subnormalexiti_119_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_120;
reg [31:0] main_normalizeFloat64Subnormalexiti_120_reg;
reg [63:0] main_normalizeFloat64Subnormalexiti_121;
reg [63:0] main_normalizeFloat64Subnormalexiti_121_reg;
reg [63:0] main_normalizeFloat64Subnormalexiti_122;
reg [63:0] main_normalizeFloat64Subnormalexiti_122_reg;
reg [63:0] main_roundAndPackFloat64exiti_123;
reg [63:0] main_roundAndPackFloat64exiti_123_reg;
reg [63:0] main_roundAndPackFloat64exiti_124;
reg [63:0] main_roundAndPackFloat64exiti_124_reg;
reg [63:0] main_roundAndPackFloat64exiti_125;
reg [63:0] main_roundAndPackFloat64exiti_125_reg;
reg [63:0] main_roundAndPackFloat64exiti_126;
reg [63:0] main_roundAndPackFloat64exiti_126_reg;
reg [63:0] main_roundAndPackFloat64exiti_127;
reg [63:0] main_roundAndPackFloat64exiti_127_reg;
reg [63:0] main_roundAndPackFloat64exiti_128;
reg [63:0] main_roundAndPackFloat64exiti_128_reg;
reg [63:0] main_roundAndPackFloat64exiti_129;
reg [63:0] main_roundAndPackFloat64exiti_129_reg;
reg [63:0] main_roundAndPackFloat64exiti_130;
reg [63:0] main_roundAndPackFloat64exiti_130_reg;
reg [63:0] main_roundAndPackFloat64exiti_131;
reg [63:0] main_roundAndPackFloat64exiti_131_reg;
reg [63:0] main_roundAndPackFloat64exiti_132;
reg [63:0] main_roundAndPackFloat64exiti_132_reg;
reg [63:0] main_roundAndPackFloat64exiti_133;
reg [63:0] main_roundAndPackFloat64exiti_133_reg;
reg [63:0] main_roundAndPackFloat64exiti_134;
reg [63:0] main_roundAndPackFloat64exiti_134_reg;
reg [63:0] main_roundAndPackFloat64exiti_135;
reg [63:0] main_roundAndPackFloat64exiti_135_reg;
reg [63:0] main_roundAndPackFloat64exiti_136;
reg [63:0] main_roundAndPackFloat64exiti_136_reg;
reg [63:0] main_roundAndPackFloat64exiti_137;
reg [63:0] main_roundAndPackFloat64exiti_137_reg;
reg [64:0] main_roundAndPackFloat64exiti_overflow_intrinsic;
reg [64:0] main_roundAndPackFloat64exiti_overflow_intrinsic_reg;
reg [64:0] main_roundAndPackFloat64exiti_overflow_intrinsic1;
reg [64:0] main_roundAndPackFloat64exiti_overflow_intrinsic1_reg;
reg [64:0] main_roundAndPackFloat64exiti_overflow_intrinsic2;
reg [64:0] main_roundAndPackFloat64exiti_overflow_intrinsic2_reg;
reg [63:0] main_roundAndPackFloat64exiti_overflow_intrinsic_sum;
reg [63:0] main_roundAndPackFloat64exiti_overflow_intrinsic_sum_reg;
reg [64:0] main_roundAndPackFloat64exiti_overflow_intrinsic3;
reg [64:0] main_roundAndPackFloat64exiti_overflow_intrinsic3_reg;
reg  main_roundAndPackFloat64exiti_overflow_intrinsic_carry;
reg  main_roundAndPackFloat64exiti_overflow_intrinsic_carry_reg;
reg [63:0] main_roundAndPackFloat64exiti_138;
reg [63:0] main_roundAndPackFloat64exiti_138_reg;
reg [63:0] main_roundAndPackFloat64exiti_139;
reg [63:0] main_roundAndPackFloat64exiti_139_reg;
reg [63:0] main_roundAndPackFloat64exiti_140;
reg [63:0] main_roundAndPackFloat64exiti_140_reg;
reg [63:0] main_roundAndPackFloat64exiti_141;
reg [63:0] main_roundAndPackFloat64exiti_141_reg;
reg [63:0] main_roundAndPackFloat64exiti_142;
reg [63:0] main_roundAndPackFloat64exiti_142_reg;
reg [64:0] main_roundAndPackFloat64exiti_overflow_intrinsic4;
reg [64:0] main_roundAndPackFloat64exiti_overflow_intrinsic4_reg;
reg [64:0] main_roundAndPackFloat64exiti_overflow_intrinsic5;
reg [64:0] main_roundAndPackFloat64exiti_overflow_intrinsic5_reg;
reg [64:0] main_roundAndPackFloat64exiti_overflow_intrinsic6;
reg [64:0] main_roundAndPackFloat64exiti_overflow_intrinsic6_reg;
reg [63:0] main_roundAndPackFloat64exiti_overflow_intrinsic_sum7;
reg [63:0] main_roundAndPackFloat64exiti_overflow_intrinsic_sum7_reg;
reg [64:0] main_roundAndPackFloat64exiti_overflow_intrinsic8;
reg [64:0] main_roundAndPackFloat64exiti_overflow_intrinsic8_reg;
reg  main_roundAndPackFloat64exiti_overflow_intrinsic_carry9;
reg  main_roundAndPackFloat64exiti_overflow_intrinsic_carry9_reg;
reg [63:0] main_roundAndPackFloat64exiti_143;
reg [63:0] main_roundAndPackFloat64exiti_143_reg;
reg [63:0] main_roundAndPackFloat64exiti_144;
reg [63:0] main_roundAndPackFloat64exiti_144_reg;
reg [63:0] main_roundAndPackFloat64exiti_145;
reg [63:0] main_roundAndPackFloat64exiti_145_reg;
reg  main_roundAndPackFloat64exiti_146;
reg  main_roundAndPackFloat64exiti_146_reg;
reg [63:0] main_roundAndPackFloat64exiti_147;
reg [63:0] main_roundAndPackFloat64exiti_147_reg;
reg [63:0] main_roundAndPackFloat64exiti_148;
reg [63:0] main_roundAndPackFloat64exiti_148_reg;
reg [63:0] main_roundAndPackFloat64exiti_149;
reg [63:0] main_roundAndPackFloat64exiti_149_reg;
reg  main_roundAndPackFloat64exiti_150;
reg  main_roundAndPackFloat64exiti_150_reg;
reg [63:0] main_roundAndPackFloat64exiti_i;
reg [63:0] main_roundAndPackFloat64exiti_i_reg;
reg [31:0] main_roundAndPackFloat64exiti_trii;
reg [31:0] main_roundAndPackFloat64exiti_trii_reg;
reg [31:0] main_roundAndPackFloat64exiti_151;
reg [31:0] main_roundAndPackFloat64exiti_151_reg;
reg  main_roundAndPackFloat64exiti_152;
reg  main_roundAndPackFloat64exiti_152_reg;
reg [31:0] main_roundAndPackFloat64exiti_153;
reg [31:0] main_roundAndPackFloat64exiti_153_reg;
reg [31:0] main_roundAndPackFloat64exiti_float_exception_flags0;
reg [31:0] main_roundAndPackFloat64exiti_float_exception_flags0_reg;
reg [63:0] main_roundAndPackFloat64exiti_154;
reg [63:0] main_roundAndPackFloat64exiti_154_reg;
reg [63:0] main_roundAndPackFloat64exiti_155;
reg [63:0] main_roundAndPackFloat64exiti_155_reg;
reg  main_roundAndPackFloat64exiti_156;
reg  main_roundAndPackFloat64exiti_156_reg;
reg [31:0] main_roundAndPackFloat64exiti_157;
reg [31:0] main_roundAndPackFloat64exiti_157_reg;
reg [31:0] main_roundAndPackFloat64exiti_158;
reg [31:0] main_roundAndPackFloat64exiti_158_reg;
reg [63:0] main_roundAndPackFloat64exiti_159;
reg [63:0] main_roundAndPackFloat64exiti_159_reg;
reg [63:0] main_roundAndPackFloat64exiti_160;
reg [63:0] main_roundAndPackFloat64exiti_160_reg;
reg [63:0] main_roundAndPackFloat64exiti_161;
reg [63:0] main_roundAndPackFloat64exiti_161_reg;
reg [63:0] main_roundAndPackFloat64exiti_162;
reg [63:0] main_roundAndPackFloat64exiti_162_reg;
reg [31:0] main_float64_mulexit_float_exception_flags4;
reg [31:0] main_float64_mulexit_float_exception_flags4_reg;
reg [63:0] main_float64_mulexit_0i;
reg [63:0] main_float64_mulexit_0i_reg;
reg [31:0] main_float64_mulexit_gep_int10;
reg [31:0] main_float64_mulexit_gep_int10_reg;
reg [31:0] main_float64_mulexit_gep_array11;
reg [31:0] main_float64_mulexit_gep_array11_reg;
reg [31:0] main_float64_mulexit_gep12;
reg [31:0] main_float64_mulexit_gep12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_float64_mulexit_163;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_float64_mulexit_163_reg;
reg [63:0] main_float64_mulexit_164;
reg [63:0] main_float64_mulexit_164_reg;
reg  main_float64_mulexit_165;
reg  main_float64_mulexit_165_reg;
reg [31:0] main_float64_mulexit_166;
reg [31:0] main_float64_mulexit_166_reg;
reg [31:0] main_float64_mulexit_167;
reg [31:0] main_float64_mulexit_167_reg;
reg [31:0] main_float64_mulexit_169;
reg [31:0] main_float64_mulexit_169_reg;
reg  main_float64_mulexit_exitcond;
reg  main_float64_mulexit_exitcond_reg;
reg [31:0] main_170_lcssa;
reg [31:0] main_170_lcssa_reg;
reg  main_170_172;
reg  main_170_172_reg;
reg [4:0] a_input_address_a;
reg  a_input_write_enable_a;
wire [63:0] a_input_in_a;
wire [63:0] a_input_out_a;
wire [4:0] a_input_address_b;
wire  a_input_write_enable_b;
wire [63:0] a_input_in_b;
wire [63:0] a_input_out_b;
reg [4:0] b_input_address_a;
reg  b_input_write_enable_a;
wire [63:0] b_input_in_a;
wire [63:0] b_input_out_a;
wire [4:0] b_input_address_b;
wire  b_input_write_enable_b;
wire [63:0] b_input_in_b;
wire [63:0] b_input_out_b;
reg [4:0] z_output_address_a;
reg  z_output_write_enable_a;
wire [63:0] z_output_in_a;
wire [63:0] z_output_out_a;
wire [4:0] z_output_address_b;
wire  z_output_write_enable_b;
wire [63:0] z_output_in_b;
wire [63:0] z_output_out_b;
reg [7:0] countLeadingZeros32countLeadingZerosHigh_address_a;
reg  countLeadingZeros32countLeadingZerosHigh_write_enable_a;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_in_a;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_out_a;
wire [7:0] countLeadingZeros32countLeadingZerosHigh_address_b;
wire  countLeadingZeros32countLeadingZerosHigh_write_enable_b;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_in_b;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_out_b;
reg [31:0] main_signed_add_32_0_op0;
reg [31:0] main_signed_add_32_0_op1;
reg [31:0] main_signed_add_32_0;
reg [31:0] main_signed_add_32_1_op0;
reg [31:0] main_signed_add_32_1_op1;
reg [31:0] main_signed_add_32_1;
reg [63:0] main_signed_multiply_64_0_op0;
reg [63:0] main_signed_multiply_64_0_op1;
reg  lpm_mult_main_roundAndPackFloat64exiti_134_en;
reg [63:0] main_roundAndPackFloat64exiti_134_stage0_reg;
reg [63:0] main_signed_multiply_64_0;
reg [63:0] main_signed_multiply_64_1_op0;
reg [63:0] main_signed_multiply_64_1_op1;
reg  lpm_mult_main_roundAndPackFloat64exiti_135_en;
reg [63:0] main_roundAndPackFloat64exiti_135_stage0_reg;
reg [63:0] main_signed_multiply_64_1;
reg [63:0] main_signed_multiply_64_2_op0;
reg [63:0] main_signed_multiply_64_2_op1;
reg  lpm_mult_main_roundAndPackFloat64exiti_136_en;
reg [63:0] main_roundAndPackFloat64exiti_136_stage0_reg;
reg [63:0] main_signed_multiply_64_2;
reg [63:0] main_signed_multiply_64_3_op0;
reg [63:0] main_signed_multiply_64_3_op1;
reg  lpm_mult_main_roundAndPackFloat64exiti_137_en;
reg [63:0] main_roundAndPackFloat64exiti_137_stage0_reg;
reg [63:0] main_signed_multiply_64_3;
reg [63:0] main_signed_add_64_0_op0;
reg [63:0] main_signed_add_64_0_op1;
reg [63:0] main_signed_add_64_0;
reg [63:0] main_signed_add_64_1_op0;
reg [63:0] main_signed_add_64_1_op1;
reg [63:0] main_signed_add_64_1;
reg [63:0] main_signed_add_64_2_op0;
reg [63:0] main_signed_add_64_2_op1;
reg [63:0] main_signed_add_64_2;

// Local Rams


// @a_input = internal unnamed_addr constant [20 x i64] [i64 9218868437227405312, i64 9223090561878065152, i64 9218868437227405312, i64 9218868437227405312, i64 4607182418800017408, i64 0, i64 4607182418...
rom_dual_port a_input (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( a_input_address_a ),
	.address_b( a_input_address_b ),
	.q_a( a_input_out_a ),
	.q_b( a_input_out_b)
);
defparam a_input.width_a = 64;
defparam a_input.width_b = 64;
defparam a_input.widthad_a = 5;
defparam a_input.widthad_b = 5;
defparam a_input.numwords_a = 20;
defparam a_input.numwords_b = 20;
defparam a_input.latency = 1;
defparam a_input.init_file = "a_input.mif";


// @b_input = internal unnamed_addr constant [20 x i64] [i64 -1, i64 -4503599627370496, i64 0, i64 4607182418800017408, i64 -281474976710656, i64 9218868437227405312, i64 9218868437227405312, i64 4607182...
rom_dual_port b_input (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( b_input_address_a ),
	.address_b( b_input_address_b ),
	.q_a( b_input_out_a ),
	.q_b( b_input_out_b)
);
defparam b_input.width_a = 64;
defparam b_input.width_b = 64;
defparam b_input.widthad_a = 5;
defparam b_input.widthad_b = 5;
defparam b_input.numwords_a = 20;
defparam b_input.numwords_b = 20;
defparam b_input.latency = 1;
defparam b_input.init_file = "b_input.mif";


// @z_output = internal unnamed_addr constant [20 x i64] [i64 -1, i64 9223090561878065152, i64 9223372036854775807, i64 9218868437227405312, i64 -281474976710656, i64 9223372036854775807, i64 92188684372...
rom_dual_port z_output (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( z_output_address_a ),
	.address_b( z_output_address_b ),
	.q_a( z_output_out_a ),
	.q_b( z_output_out_b)
);
defparam z_output.width_a = 64;
defparam z_output.width_b = 64;
defparam z_output.widthad_a = 5;
defparam z_output.widthad_b = 5;
defparam z_output.numwords_a = 20;
defparam z_output.numwords_b = 20;
defparam z_output.latency = 1;
defparam z_output.init_file = "z_output.mif";


// @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4,...
rom_dual_port countLeadingZeros32countLeadingZerosHigh (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( countLeadingZeros32countLeadingZerosHigh_address_a ),
	.address_b( countLeadingZeros32countLeadingZerosHigh_address_b ),
	.q_a( countLeadingZeros32countLeadingZerosHigh_out_a ),
	.q_b( countLeadingZeros32countLeadingZerosHigh_out_b)
);
defparam countLeadingZeros32countLeadingZerosHigh.width_a = 32;
defparam countLeadingZeros32countLeadingZerosHigh.width_b = 32;
defparam countLeadingZeros32countLeadingZerosHigh.widthad_a = 8;
defparam countLeadingZeros32countLeadingZerosHigh.widthad_b = 8;
defparam countLeadingZeros32countLeadingZerosHigh.numwords_a = 256;
defparam countLeadingZeros32countLeadingZerosHigh.numwords_b = 256;
defparam countLeadingZeros32countLeadingZerosHigh.latency = 1;
defparam countLeadingZeros32countLeadingZerosHigh.init_file = "countLeadingZeros32countLeadingZerosHigh.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %float64_mul.exit*/
	/*   %168 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([65 x i8]* @.str, i32 0, i32 0), i64 %3, i64 %5, i64 %164, i64 %.0.i) #1*/
	if ((cur_state == LEGUP_F_main_BB_float64_mulexit_49)) begin
		$write("a_input=%0x b_input=%0x expected=%0x output=%0x\n", $signed(main_1_3_reg), $signed(main_1_5_reg), $signed(main_float64_mulexit_164), $signed(main_float64_mulexit_0i_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_1_3_reg) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_1_5_reg) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_float64_mulexit_164) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_float64_mulexit_0i_reg) === 1'bX) finish <= 0;
	end
	/* main: %170*/
	/*   %171 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str1, i32 0, i32 0), i32 %.lcssa) #1*/
	if ((cur_state == LEGUP_F_main_BB__170_50)) begin
		$write("Result: %d\n", $signed(main_170_lcssa_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_170_lcssa_reg) === 1'bX) finish <= 0;
	end
	/* main: %173*/
	/*   %174 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__173_51)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %175*/
	/*   %176 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str3, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__175_52)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB__102_35:
	if ((main_102_103 == 1'd1))
		next_state = LEGUP_F_main_BB__104_36;
	else if ((main_102_103 == 1'd0))
		next_state = LEGUP_F_main_BB__106_37;
LEGUP_F_main_BB__104_36:
		next_state = LEGUP_F_main_BB_float64_mulexit_47;
LEGUP_F_main_BB__106_37:
	if ((main_106_111 == 1'd1))
		next_state = LEGUP_F_main_BB__112_38;
	else if ((main_106_111 == 1'd0))
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_39;
LEGUP_F_main_BB__112_38:
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_39;
LEGUP_F_main_BB__15_4:
	if ((main_15_16 == 1'd1))
		next_state = LEGUP_F_main_BB__17_5;
	else if ((main_15_16 == 1'd0))
		next_state = LEGUP_F_main_BB__20_6;
LEGUP_F_main_BB__170_50:
	if ((main_170_172 == 1'd1))
		next_state = LEGUP_F_main_BB__173_51;
	else if ((main_170_172 == 1'd0))
		next_state = LEGUP_F_main_BB__175_52;
LEGUP_F_main_BB__173_51:
		next_state = LEGUP_F_main_BB__177_53;
LEGUP_F_main_BB__175_52:
		next_state = LEGUP_F_main_BB__177_53;
LEGUP_F_main_BB__177_53:
		next_state = LEGUP_0;
LEGUP_F_main_BB__17_5:
	if ((main_17_orcondi == 1'd1))
		next_state = LEGUP_F_main_BB__20_6;
	else if ((main_17_orcondi == 1'd0))
		next_state = LEGUP_F_main_BB__37_12;
LEGUP_F_main_BB__1_1:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__1_2:
		next_state = LEGUP_F_main_BB__1_3;
LEGUP_F_main_BB__1_3:
	if ((main_1_14 == 1'd1))
		next_state = LEGUP_F_main_BB__15_4;
	else if ((main_1_14 == 1'd0))
		next_state = LEGUP_F_main_BB__46_15;
LEGUP_F_main_BB__20_6:
	if ((main_20_22 == 1'd1))
		next_state = LEGUP_F_main_BB__23_7;
	else if ((main_20_22 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_8;
LEGUP_F_main_BB__23_7:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_8;
LEGUP_F_main_BB__31_9:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti11i_10;
LEGUP_F_main_BB__37_12:
	if ((main_37_40 == 1'd1))
		next_state = LEGUP_F_main_BB__41_13;
	else if ((main_37_40 == 1'd0))
		next_state = LEGUP_F_main_BB__43_14;
LEGUP_F_main_BB__41_13:
		next_state = LEGUP_F_main_BB_float64_mulexit_47;
LEGUP_F_main_BB__43_14:
		next_state = LEGUP_F_main_BB_float64_mulexit_47;
LEGUP_F_main_BB__46_15:
	if ((main_46_47 == 1'd1))
		next_state = LEGUP_F_main_BB__48_16;
	else if ((main_46_47 == 1'd0))
		next_state = LEGUP_F_main_BB__76_26;
LEGUP_F_main_BB__48_16:
	if ((main_48_49 == 1'd1))
		next_state = LEGUP_F_main_BB__67_23;
	else if ((main_48_49 == 1'd0))
		next_state = LEGUP_F_main_BB__50_17;
LEGUP_F_main_BB__50_17:
	if ((main_50_52 == 1'd1))
		next_state = LEGUP_F_main_BB__53_18;
	else if ((main_50_52 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_19;
LEGUP_F_main_BB__53_18:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_19;
LEGUP_F_main_BB__61_20:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexitii_21;
LEGUP_F_main_BB__67_23:
	if ((main_67_70 == 1'd1))
		next_state = LEGUP_F_main_BB__71_24;
	else if ((main_67_70 == 1'd0))
		next_state = LEGUP_F_main_BB__73_25;
LEGUP_F_main_BB__71_24:
		next_state = LEGUP_F_main_BB_float64_mulexit_47;
LEGUP_F_main_BB__73_25:
		next_state = LEGUP_F_main_BB_float64_mulexit_47;
LEGUP_F_main_BB__76_26:
	if ((main_76_77 == 1'd1))
		next_state = LEGUP_F_main_BB__78_27;
	else if ((main_76_77 == 1'd0))
		next_state = LEGUP_F_main_BB__99_34;
LEGUP_F_main_BB__78_27:
	if ((main_78_79 == 1'd1))
		next_state = LEGUP_F_main_BB__80_28;
	else if ((main_78_79 == 1'd0))
		next_state = LEGUP_F_main_BB__82_29;
LEGUP_F_main_BB__80_28:
		next_state = LEGUP_F_main_BB_float64_mulexit_47;
LEGUP_F_main_BB__82_29:
	if ((main_82_87 == 1'd1))
		next_state = LEGUP_F_main_BB__88_30;
	else if ((main_82_87 == 1'd0))
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_31;
LEGUP_F_main_BB__88_30:
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_31;
LEGUP_F_main_BB__99_34:
	if ((main_99_101 == 1'd1))
		next_state = LEGUP_F_main_BB__102_35;
	else if ((main_99_101 == 1'd0))
		next_state = LEGUP_F_main_BB_roundAndPackFloat64exiti_42;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_8:
	if ((main_float64_is_signaling_nanexit1i10i_30 == 1'd1))
		next_state = LEGUP_F_main_BB__31_9;
	else if ((main_float64_is_signaling_nanexit1i10i_30 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti11i_10;
LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_19:
	if ((main_float64_is_signaling_nanexit1ii_60 == 1'd1))
		next_state = LEGUP_F_main_BB__61_20;
	else if ((main_float64_is_signaling_nanexit1ii_60 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexitii_21;
LEGUP_F_main_BB_float64_is_signaling_nanexiti11i_10:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti11i_11;
LEGUP_F_main_BB_float64_is_signaling_nanexiti11i_11:
		next_state = LEGUP_F_main_BB_float64_mulexit_47;
LEGUP_F_main_BB_float64_is_signaling_nanexitii_21:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexitii_22;
LEGUP_F_main_BB_float64_is_signaling_nanexitii_22:
		next_state = LEGUP_F_main_BB_float64_mulexit_47;
LEGUP_F_main_BB_float64_mulexit_47:
		next_state = LEGUP_F_main_BB_float64_mulexit_48;
LEGUP_F_main_BB_float64_mulexit_48:
		next_state = LEGUP_F_main_BB_float64_mulexit_49;
LEGUP_F_main_BB_float64_mulexit_49:
	if ((main_float64_mulexit_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB__170_50;
	else if ((main_float64_mulexit_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_31:
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_32;
LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_32:
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_33;
LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_33:
		next_state = LEGUP_F_main_BB__99_34;
LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_39:
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_40;
LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_40:
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_41;
LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_41:
		next_state = LEGUP_F_main_BB_roundAndPackFloat64exiti_42;
LEGUP_F_main_BB_roundAndPackFloat64exiti_42:
		next_state = LEGUP_F_main_BB_roundAndPackFloat64exiti_43;
LEGUP_F_main_BB_roundAndPackFloat64exiti_43:
		next_state = LEGUP_F_main_BB_roundAndPackFloat64exiti_44;
LEGUP_F_main_BB_roundAndPackFloat64exiti_44:
		next_state = LEGUP_F_main_BB_roundAndPackFloat64exiti_45;
LEGUP_F_main_BB_roundAndPackFloat64exiti_45:
		next_state = LEGUP_F_main_BB_roundAndPackFloat64exiti_46;
LEGUP_F_main_BB_roundAndPackFloat64exiti_46:
		next_state = LEGUP_F_main_BB_float64_mulexit_47;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %float_exception_flags.0 = phi i32 [ 0, %0 ], [ %float_exception_flags.4, %float64_mul.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_float_exception_flags0 = 32'd0;
	end
	/* main: %1*/
	/*   %float_exception_flags.0 = phi i32 [ 0, %0 ], [ %float_exception_flags.4, %float64_mul.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_float64_mulexit_49) & (memory_controller_waitrequest == 1'd0)) & (main_float64_mulexit_exitcond_reg == 1'd0))) */ begin
		main_1_float_exception_flags0 = main_float64_mulexit_float_exception_flags4_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %float_exception_flags.0 = phi i32 [ 0, %0 ], [ %float_exception_flags.4, %float64_mul.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_float_exception_flags0_reg <= main_1_float_exception_flags0;
		if (start == 1'b0 && ^(main_1_float_exception_flags0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_float_exception_flags0_reg"); $finish; end
	end
	/* main: %1*/
	/*   %float_exception_flags.0 = phi i32 [ 0, %0 ], [ %float_exception_flags.4, %float64_mul.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_mulexit_49) & (memory_controller_waitrequest == 1'd0)) & (main_float64_mulexit_exitcond_reg == 1'd0))) begin
		main_1_float_exception_flags0_reg <= main_1_float_exception_flags0;
		if (start == 1'b0 && ^(main_1_float_exception_flags0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_float_exception_flags0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %167, %float64_mul.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_main_result02 = 32'd0;
	end
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %167, %float64_mul.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_float64_mulexit_49) & (memory_controller_waitrequest == 1'd0)) & (main_float64_mulexit_exitcond_reg == 1'd0))) */ begin
		main_1_main_result02 = main_float64_mulexit_167;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %167, %float64_mul.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_main_result02_reg <= main_1_main_result02;
		if (start == 1'b0 && ^(main_1_main_result02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_main_result02_reg"); $finish; end
	end
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %167, %float64_mul.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_mulexit_49) & (memory_controller_waitrequest == 1'd0)) & (main_float64_mulexit_exitcond_reg == 1'd0))) begin
		main_1_main_result02_reg <= main_1_main_result02;
		if (start == 1'b0 && ^(main_1_main_result02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_main_result02_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %i.01 = phi i32 [ 0, %0 ], [ %169, %float64_mul.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_i01 = 32'd0;
	end
	/* main: %1*/
	/*   %i.01 = phi i32 [ 0, %0 ], [ %169, %float64_mul.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_float64_mulexit_49) & (memory_controller_waitrequest == 1'd0)) & (main_float64_mulexit_exitcond_reg == 1'd0))) */ begin
		main_1_i01 = main_float64_mulexit_169_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %i.01 = phi i32 [ 0, %0 ], [ %169, %float64_mul.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_i01_reg <= main_1_i01;
		if (start == 1'b0 && ^(main_1_i01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i01_reg"); $finish; end
	end
	/* main: %1*/
	/*   %i.01 = phi i32 [ 0, %0 ], [ %169, %float64_mul.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_mulexit_49) & (memory_controller_waitrequest == 1'd0)) & (main_float64_mulexit_exitcond_reg == 1'd0))) begin
		main_1_i01_reg <= main_1_i01;
		if (start == 1'b0 && ^(main_1_i01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i01_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep_int = ptrtoint [20 x i64]* @a_input to i32*/
if (reset) begin main_1_gep_int = 0; end
		main_1_gep_int = 1'd0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_int = ptrtoint [20 x i64]* @a_input to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_gep_int_reg <= main_1_gep_int;
		if (start == 1'b0 && ^(main_1_gep_int) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_int_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep_array = mul i32 %i.01, 8*/
		main_1_gep_array = (main_1_i01_reg * 32'd8);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_array = mul i32 %i.01, 8*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_gep_array_reg <= main_1_gep_array;
		if (start == 1'b0 && ^(main_1_gep_array) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_array_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep = add i32 %gep_int, %gep_array*/
		main_1_gep = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_gep_reg <= main_1_gep;
		if (start == 1'b0 && ^(main_1_gep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %gep9 = add i32 %gep_int7, %gep_array8*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_40)) begin
		main_1_gep_reg <= main_normalizeFloat64Subnormalexiti_gep9;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_gep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %120 = add i32 %119, %117*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_41)) begin
		main_1_gep_reg <= main_normalizeFloat64Subnormalexiti_120;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %gep6 = add i32 %gep_int4, %gep_array5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_32)) begin
		main_1_gep_reg <= main_normalizeFloat64Subnormalexit9i_gep6;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9i_gep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %96 = add i32 %95, %93*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_33)) begin
		main_1_gep_reg <= main_normalizeFloat64Subnormalexit9i_96;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9i_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %float64_mul.exit*/
	/*   %gep12 = add i32 %gep_int10, %gep_array11*/
	if ((cur_state == LEGUP_F_main_BB_float64_mulexit_48)) begin
		main_1_gep_reg <= main_float64_mulexit_gep12;
		if (start == 1'b0 && ^(main_float64_mulexit_gep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %2 = inttoptr i32 %gep to i64**/
		main_1_2 = main_1_gep;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = inttoptr i32 %gep to i64**/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %3 = load i64* %2, align 8, !tbaa !1*/
		main_1_3 = a_input_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %3 = load i64* %2, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_3_reg <= main_1_3;
		if (start == 1'b0 && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep_int1 = ptrtoint [20 x i64]* @b_input to i32*/
if (reset) begin main_1_gep_int1 = 0; end
		main_1_gep_int1 = 1'd0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_int1 = ptrtoint [20 x i64]* @b_input to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_gep_int1_reg <= main_1_gep_int1;
		if (start == 1'b0 && ^(main_1_gep_int1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_int1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep_array2 = mul i32 %i.01, 8*/
		main_1_gep_array2 = (main_1_i01_reg * 32'd8);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_array2 = mul i32 %i.01, 8*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_gep_array2_reg <= main_1_gep_array2;
		if (start == 1'b0 && ^(main_1_gep_array2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_array2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
		main_1_gep3 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_gep3_reg <= main_1_gep3;
		if (start == 1'b0 && ^(main_1_gep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %4 = inttoptr i32 %gep3 to i64**/
		main_1_4 = main_1_gep3;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %4 = inttoptr i32 %gep3 to i64**/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_4_reg <= main_1_4;
		if (start == 1'b0 && ^(main_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %5 = load i64* %4, align 8, !tbaa !1*/
		main_1_5 = b_input_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %5 = load i64* %4, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_5_reg <= main_1_5;
		if (start == 1'b0 && ^(main_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %6 = and i64 %3, 4503599627370495*/
		main_1_6 = (main_1_3 & 64'd4503599627370495);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %6 = and i64 %3, 4503599627370495*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_6_reg <= main_1_6;
		if (start == 1'b0 && ^(main_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %7 = lshr i64 %3, 52*/
		main_1_7 = (main_1_3 >>> (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %7 = lshr i64 %3, 52*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_7_reg <= main_1_7;
		if (start == 1'b0 && ^(main_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %.tr.i18.i = trunc i64 %7 to i32*/
		main_1_tri18i = main_1_7[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %.tr.i18.i = trunc i64 %7 to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_tri18i_reg <= main_1_tri18i;
		if (start == 1'b0 && ^(main_1_tri18i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_tri18i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %8 = and i32 %.tr.i18.i, 2047*/
		main_1_8 = (main_1_tri18i & 32'd2047);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %8 = and i32 %.tr.i18.i, 2047*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_8_reg <= main_1_8;
		if (start == 1'b0 && ^(main_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %9 = and i64 %5, 4503599627370495*/
		main_1_9 = (main_1_5 & 64'd4503599627370495);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = and i64 %5, 4503599627370495*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_9_reg <= main_1_9;
		if (start == 1'b0 && ^(main_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %10 = lshr i64 %5, 52*/
		main_1_10 = (main_1_5 >>> (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %10 = lshr i64 %5, 52*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_10_reg <= main_1_10;
		if (start == 1'b0 && ^(main_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %.tr.i17.i = trunc i64 %10 to i32*/
		main_1_tri17i = main_1_10[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %.tr.i17.i = trunc i64 %10 to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_tri17i_reg <= main_1_tri17i;
		if (start == 1'b0 && ^(main_1_tri17i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_tri17i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %11 = and i32 %.tr.i17.i, 2047*/
		main_1_11 = (main_1_tri17i & 32'd2047);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %11 = and i32 %.tr.i17.i, 2047*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_11_reg <= main_1_11;
		if (start == 1'b0 && ^(main_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %12 = xor i64 %5, %3*/
		main_1_12 = (main_1_5 ^ main_1_3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = xor i64 %5, %3*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_12_reg <= main_1_12;
		if (start == 1'b0 && ^(main_1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %13 = lshr i64 %12, 63*/
		main_1_13 = (main_1_12 >>> (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %13 = lshr i64 %12, 63*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_13_reg <= main_1_13;
		if (start == 1'b0 && ^(main_1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %14 = icmp eq i32 %8, 2047*/
		main_1_14 = (main_1_8 == 32'd2047);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %14 = icmp eq i32 %8, 2047*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_14_reg <= main_1_14;
		if (start == 1'b0 && ^(main_1_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %16 = icmp eq i64 %6, 0*/
		main_15_16 = (main_1_6_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %16 = icmp eq i64 %6, 0*/
	if ((cur_state == LEGUP_F_main_BB__15_4)) begin
		main_15_16_reg <= main_15_16;
		if (start == 1'b0 && ^(main_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %17*/
	/*   %18 = icmp eq i32 %11, 2047*/
		main_17_18 = (main_1_11_reg == 32'd2047);
end
always @(posedge clk) begin
	/* main: %17*/
	/*   %18 = icmp eq i32 %11, 2047*/
	if ((cur_state == LEGUP_F_main_BB__17_5)) begin
		main_17_18_reg <= main_17_18;
		if (start == 1'b0 && ^(main_17_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_17_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %17*/
	/*   %19 = icmp ne i64 %9, 0*/
		main_17_19 = (main_1_9_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %17*/
	/*   %19 = icmp ne i64 %9, 0*/
	if ((cur_state == LEGUP_F_main_BB__17_5)) begin
		main_17_19_reg <= main_17_19;
		if (start == 1'b0 && ^(main_17_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_17_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %17*/
	/*   %or.cond.i = and i1 %18, %19*/
		main_17_orcondi = (main_17_18 & main_17_19);
end
always @(posedge clk) begin
	/* main: %17*/
	/*   %or.cond.i = and i1 %18, %19*/
	if ((cur_state == LEGUP_F_main_BB__17_5)) begin
		main_17_orcondi_reg <= main_17_orcondi;
		if (start == 1'b0 && ^(main_17_orcondi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_17_orcondi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %21 = and i64 %3, 9221120237041090560*/
		main_20_21 = (main_1_3_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %21 = and i64 %3, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB__20_6)) begin
		main_20_21_reg <= main_20_21;
		if (start == 1'b0 && ^(main_20_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %22 = icmp eq i64 %21, 9218868437227405312*/
		main_20_22 = (main_20_21 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %22 = icmp eq i64 %21, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__20_6)) begin
		main_20_22_reg <= main_20_22;
		if (start == 1'b0 && ^(main_20_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %24 = and i64 %3, 2251799813685247*/
		main_23_24 = (main_1_3_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %24 = and i64 %3, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__23_7)) begin
		main_23_24_reg <= main_23_24;
		if (start == 1'b0 && ^(main_23_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %25 = icmp ne i64 %24, 0*/
		main_23_25 = (main_23_24 != 64'd0);
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %25 = icmp ne i64 %24, 0*/
	if ((cur_state == LEGUP_F_main_BB__23_7)) begin
		main_23_25_reg <= main_23_25;
		if (start == 1'b0 && ^(main_23_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i*/
	/*   %26 = phi i1 [ false, %20 ], [ %25, %23 ]*/
	if ((((cur_state == LEGUP_F_main_BB__20_6) & (memory_controller_waitrequest == 1'd0)) & (main_20_22 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i10i_26 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit1.i10.i*/
	/*   %26 = phi i1 [ false, %20 ], [ %25, %23 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__23_7) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexit1i10i_26 = main_23_25;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i*/
	/*   %26 = phi i1 [ false, %20 ], [ %25, %23 ]*/
	if ((((cur_state == LEGUP_F_main_BB__20_6) & (memory_controller_waitrequest == 1'd0)) & (main_20_22 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i10i_26_reg <= main_float64_is_signaling_nanexit1i10i_26;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10i_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10i_26_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit1.i10.i*/
	/*   %26 = phi i1 [ false, %20 ], [ %25, %23 ]*/
	if (((cur_state == LEGUP_F_main_BB__23_7) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexit1i10i_26_reg <= main_float64_is_signaling_nanexit1i10i_26;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10i_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10i_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i*/
	/*   %27 = trunc i64 %5 to i63*/
		main_float64_is_signaling_nanexit1i10i_27 = main_1_5_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i*/
	/*   %27 = trunc i64 %5 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_8)) begin
		main_float64_is_signaling_nanexit1i10i_27_reg <= main_float64_is_signaling_nanexit1i10i_27;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10i_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10i_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i*/
	/*   %28 = icmp ugt i63 %27, -4503599627370496*/
		main_float64_is_signaling_nanexit1i10i_28 = (main_float64_is_signaling_nanexit1i10i_27 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i*/
	/*   %28 = icmp ugt i63 %27, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_8)) begin
		main_float64_is_signaling_nanexit1i10i_28_reg <= main_float64_is_signaling_nanexit1i10i_28;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10i_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10i_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i*/
	/*   %29 = and i64 %5, 9221120237041090560*/
		main_float64_is_signaling_nanexit1i10i_29 = (main_1_5_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i*/
	/*   %29 = and i64 %5, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_8)) begin
		main_float64_is_signaling_nanexit1i10i_29_reg <= main_float64_is_signaling_nanexit1i10i_29;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10i_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10i_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i*/
	/*   %30 = icmp eq i64 %29, 9218868437227405312*/
		main_float64_is_signaling_nanexit1i10i_30 = (main_float64_is_signaling_nanexit1i10i_29 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i*/
	/*   %30 = icmp eq i64 %29, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_8)) begin
		main_float64_is_signaling_nanexit1i10i_30_reg <= main_float64_is_signaling_nanexit1i10i_30;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10i_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10i_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %32 = and i64 %5, 2251799813685247*/
		main_31_32 = (main_1_5_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %32 = and i64 %5, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__31_9)) begin
		main_31_32_reg <= main_31_32;
		if (start == 1'b0 && ^(main_31_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %33 = icmp ne i64 %32, 0*/
		main_31_33 = (main_31_32 != 64'd0);
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %33 = icmp ne i64 %32, 0*/
	if ((cur_state == LEGUP_F_main_BB__31_9)) begin
		main_31_33_reg <= main_31_33;
		if (start == 1'b0 && ^(main_31_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i11.i*/
	/*   %34 = phi i1 [ false, %float64_is_signaling_nan.exit1.i10.i ], [ %33, %31 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_8) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i10i_30 == 1'd0))) begin
		main_float64_is_signaling_nanexiti11i_34 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit.i11.i*/
	/*   %34 = phi i1 [ false, %float64_is_signaling_nan.exit1.i10.i ], [ %33, %31 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__31_9) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexiti11i_34 = main_31_33;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i11.i*/
	/*   %34 = phi i1 [ false, %float64_is_signaling_nan.exit1.i10.i ], [ %33, %31 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_8) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i10i_30 == 1'd0))) begin
		main_float64_is_signaling_nanexiti11i_34_reg <= main_float64_is_signaling_nanexiti11i_34;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti11i_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti11i_34_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit.i11.i*/
	/*   %34 = phi i1 [ false, %float64_is_signaling_nan.exit1.i10.i ], [ %33, %31 ]*/
	if (((cur_state == LEGUP_F_main_BB__31_9) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexiti11i_34_reg <= main_float64_is_signaling_nanexiti11i_34;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti11i_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti11i_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i11.i*/
	/*   %35 = or i1 %26, %34*/
		main_float64_is_signaling_nanexiti11i_35 = (main_float64_is_signaling_nanexit1i10i_26_reg | main_float64_is_signaling_nanexiti11i_34_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i11.i*/
	/*   %35 = or i1 %26, %34*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti11i_10)) begin
		main_float64_is_signaling_nanexiti11i_35_reg <= main_float64_is_signaling_nanexiti11i_35;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti11i_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti11i_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i11.i*/
	/*   %36 = or i32 %float_exception_flags.0, 16*/
		main_float64_is_signaling_nanexiti11i_36 = (main_1_float_exception_flags0_reg | 32'd16);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i11.i*/
	/*   %36 = or i32 %float_exception_flags.0, 16*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti11i_10)) begin
		main_float64_is_signaling_nanexiti11i_36_reg <= main_float64_is_signaling_nanexiti11i_36;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti11i_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti11i_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i11.i*/
	/*   %.float_exception_flags.0 = select i1 %35, i32 %36, i32 %float_exception_flags.0*/
		main_float64_is_signaling_nanexiti11i_float_exception_flags0 = (main_float64_is_signaling_nanexiti11i_35 ? main_float64_is_signaling_nanexiti11i_36 : main_1_float_exception_flags0_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i11.i*/
	/*   %.float_exception_flags.0 = select i1 %35, i32 %36, i32 %float_exception_flags.0*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti11i_10)) begin
		main_float64_is_signaling_nanexiti11i_float_exception_flags0_reg <= main_float64_is_signaling_nanexiti11i_float_exception_flags0;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti11i_float_exception_flags0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti11i_float_exception_flags0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i11.i*/
	/*   %. = select i1 %35, i1 %34, i1 %28*/
		main_float64_is_signaling_nanexiti11i_ = (main_float64_is_signaling_nanexiti11i_35 ? main_float64_is_signaling_nanexiti11i_34_reg : main_float64_is_signaling_nanexit1i10i_28_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i11.i*/
	/*   %. = select i1 %35, i1 %34, i1 %28*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti11i_10)) begin
		main_float64_is_signaling_nanexiti11i__reg <= main_float64_is_signaling_nanexiti11i_;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti11i_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti11i__reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i11.i*/
	/*   %.mux2.v.i14.i = select i1 %., i64 %5, i64 %3*/
		main_float64_is_signaling_nanexiti11i_mux2vi14i = (main_float64_is_signaling_nanexiti11i__reg ? main_1_5_reg : main_1_3_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i11.i*/
	/*   %.mux2.v.i14.i = select i1 %., i64 %5, i64 %3*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti11i_11)) begin
		main_float64_is_signaling_nanexiti11i_mux2vi14i_reg <= main_float64_is_signaling_nanexiti11i_mux2vi14i;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti11i_mux2vi14i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti11i_mux2vi14i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i11.i*/
	/*   %.mux2.i15.i = or i64 %.mux2.v.i14.i, 2251799813685248*/
		main_float64_is_signaling_nanexiti11i_mux2i15i = (main_float64_is_signaling_nanexiti11i_mux2vi14i | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i11.i*/
	/*   %.mux2.i15.i = or i64 %.mux2.v.i14.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti11i_11)) begin
		main_float64_is_signaling_nanexiti11i_mux2i15i_reg <= main_float64_is_signaling_nanexiti11i_mux2i15i;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti11i_mux2i15i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti11i_mux2i15i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %37*/
	/*   %38 = zext i32 %11 to i64*/
		main_37_38 = main_1_11_reg;
end
always @(posedge clk) begin
	/* main: %37*/
	/*   %38 = zext i32 %11 to i64*/
	if ((cur_state == LEGUP_F_main_BB__37_12)) begin
		main_37_38_reg <= main_37_38;
		if (start == 1'b0 && ^(main_37_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_37_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %37*/
	/*   %39 = or i64 %38, %9*/
		main_37_39 = (main_37_38 | main_1_9_reg);
end
always @(posedge clk) begin
	/* main: %37*/
	/*   %39 = or i64 %38, %9*/
	if ((cur_state == LEGUP_F_main_BB__37_12)) begin
		main_37_39_reg <= main_37_39;
		if (start == 1'b0 && ^(main_37_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_37_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %37*/
	/*   %40 = icmp eq i64 %39, 0*/
		main_37_40 = (main_37_39 == 64'd0);
end
always @(posedge clk) begin
	/* main: %37*/
	/*   %40 = icmp eq i64 %39, 0*/
	if ((cur_state == LEGUP_F_main_BB__37_12)) begin
		main_37_40_reg <= main_37_40;
		if (start == 1'b0 && ^(main_37_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_37_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %41*/
	/*   %42 = or i32 %float_exception_flags.0, 16*/
		main_41_42 = (main_1_float_exception_flags0_reg | 32'd16);
end
always @(posedge clk) begin
	/* main: %41*/
	/*   %42 = or i32 %float_exception_flags.0, 16*/
	if ((cur_state == LEGUP_F_main_BB__41_13)) begin
		main_41_42_reg <= main_41_42;
		if (start == 1'b0 && ^(main_41_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_41_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %43*/
	/*   %44 = shl nuw i64 %13, 63*/
		main_43_44 = (main_1_13_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %43*/
	/*   %44 = shl nuw i64 %13, 63*/
	if ((cur_state == LEGUP_F_main_BB__43_14)) begin
		main_43_44_reg <= main_43_44;
		if (start == 1'b0 && ^(main_43_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_43_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %43*/
	/*   %45 = or i64 %44, 9218868437227405312*/
		main_43_45 = (main_43_44 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %43*/
	/*   %45 = or i64 %44, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__43_14)) begin
		main_43_45_reg <= main_43_45;
		if (start == 1'b0 && ^(main_43_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_43_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %46*/
	/*   %47 = icmp eq i32 %11, 2047*/
		main_46_47 = (main_1_11_reg == 32'd2047);
end
always @(posedge clk) begin
	/* main: %46*/
	/*   %47 = icmp eq i32 %11, 2047*/
	if ((cur_state == LEGUP_F_main_BB__46_15)) begin
		main_46_47_reg <= main_46_47;
		if (start == 1'b0 && ^(main_46_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %48*/
	/*   %49 = icmp eq i64 %9, 0*/
		main_48_49 = (main_1_9_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %48*/
	/*   %49 = icmp eq i64 %9, 0*/
	if ((cur_state == LEGUP_F_main_BB__48_16)) begin
		main_48_49_reg <= main_48_49;
		if (start == 1'b0 && ^(main_48_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_48_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %50*/
	/*   %51 = and i64 %3, 9221120237041090560*/
		main_50_51 = (main_1_3_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %50*/
	/*   %51 = and i64 %3, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB__50_17)) begin
		main_50_51_reg <= main_50_51;
		if (start == 1'b0 && ^(main_50_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_50_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %50*/
	/*   %52 = icmp eq i64 %51, 9218868437227405312*/
		main_50_52 = (main_50_51 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %50*/
	/*   %52 = icmp eq i64 %51, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__50_17)) begin
		main_50_52_reg <= main_50_52;
		if (start == 1'b0 && ^(main_50_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_50_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %53*/
	/*   %54 = and i64 %3, 2251799813685247*/
		main_53_54 = (main_1_3_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %53*/
	/*   %54 = and i64 %3, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__53_18)) begin
		main_53_54_reg <= main_53_54;
		if (start == 1'b0 && ^(main_53_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_53_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %53*/
	/*   %55 = icmp ne i64 %54, 0*/
		main_53_55 = (main_53_54 != 64'd0);
end
always @(posedge clk) begin
	/* main: %53*/
	/*   %55 = icmp ne i64 %54, 0*/
	if ((cur_state == LEGUP_F_main_BB__53_18)) begin
		main_53_55_reg <= main_53_55;
		if (start == 1'b0 && ^(main_53_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_53_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %56 = phi i1 [ false, %50 ], [ %55, %53 ]*/
	if ((((cur_state == LEGUP_F_main_BB__50_17) & (memory_controller_waitrequest == 1'd0)) & (main_50_52 == 1'd0))) begin
		main_float64_is_signaling_nanexit1ii_56 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %56 = phi i1 [ false, %50 ], [ %55, %53 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__53_18) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexit1ii_56 = main_53_55;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %56 = phi i1 [ false, %50 ], [ %55, %53 ]*/
	if ((((cur_state == LEGUP_F_main_BB__50_17) & (memory_controller_waitrequest == 1'd0)) & (main_50_52 == 1'd0))) begin
		main_float64_is_signaling_nanexit1ii_56_reg <= main_float64_is_signaling_nanexit1ii_56;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_56_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %56 = phi i1 [ false, %50 ], [ %55, %53 ]*/
	if (((cur_state == LEGUP_F_main_BB__53_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexit1ii_56_reg <= main_float64_is_signaling_nanexit1ii_56;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %57 = trunc i64 %5 to i63*/
		main_float64_is_signaling_nanexit1ii_57 = main_1_5_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %57 = trunc i64 %5 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_19)) begin
		main_float64_is_signaling_nanexit1ii_57_reg <= main_float64_is_signaling_nanexit1ii_57;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %58 = icmp ugt i63 %57, -4503599627370496*/
		main_float64_is_signaling_nanexit1ii_58 = (main_float64_is_signaling_nanexit1ii_57 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %58 = icmp ugt i63 %57, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_19)) begin
		main_float64_is_signaling_nanexit1ii_58_reg <= main_float64_is_signaling_nanexit1ii_58;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %59 = and i64 %5, 9221120237041090560*/
		main_float64_is_signaling_nanexit1ii_59 = (main_1_5_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %59 = and i64 %5, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_19)) begin
		main_float64_is_signaling_nanexit1ii_59_reg <= main_float64_is_signaling_nanexit1ii_59;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %60 = icmp eq i64 %59, 9218868437227405312*/
		main_float64_is_signaling_nanexit1ii_60 = (main_float64_is_signaling_nanexit1ii_59 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %60 = icmp eq i64 %59, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_19)) begin
		main_float64_is_signaling_nanexit1ii_60_reg <= main_float64_is_signaling_nanexit1ii_60;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %61*/
	/*   %62 = and i64 %5, 2251799813685247*/
		main_61_62 = (main_1_5_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %61*/
	/*   %62 = and i64 %5, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__61_20)) begin
		main_61_62_reg <= main_61_62;
		if (start == 1'b0 && ^(main_61_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_61_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %61*/
	/*   %63 = icmp ne i64 %62, 0*/
		main_61_63 = (main_61_62 != 64'd0);
end
always @(posedge clk) begin
	/* main: %61*/
	/*   %63 = icmp ne i64 %62, 0*/
	if ((cur_state == LEGUP_F_main_BB__61_20)) begin
		main_61_63_reg <= main_61_63;
		if (start == 1'b0 && ^(main_61_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_61_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %64 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i ], [ %63, %61 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_19) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1ii_60 == 1'd0))) begin
		main_float64_is_signaling_nanexitii_64 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %64 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i ], [ %63, %61 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__61_20) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexitii_64 = main_61_63;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %64 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i ], [ %63, %61 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_19) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1ii_60 == 1'd0))) begin
		main_float64_is_signaling_nanexitii_64_reg <= main_float64_is_signaling_nanexitii_64;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitii_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitii_64_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %64 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i ], [ %63, %61 ]*/
	if (((cur_state == LEGUP_F_main_BB__61_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexitii_64_reg <= main_float64_is_signaling_nanexitii_64;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitii_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitii_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %65 = or i1 %56, %64*/
		main_float64_is_signaling_nanexitii_65 = (main_float64_is_signaling_nanexit1ii_56_reg | main_float64_is_signaling_nanexitii_64_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %65 = or i1 %56, %64*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii_21)) begin
		main_float64_is_signaling_nanexitii_65_reg <= main_float64_is_signaling_nanexitii_65;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitii_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitii_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %66 = or i32 %float_exception_flags.0, 16*/
		main_float64_is_signaling_nanexitii_66 = (main_1_float_exception_flags0_reg | 32'd16);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %66 = or i32 %float_exception_flags.0, 16*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii_21)) begin
		main_float64_is_signaling_nanexitii_66_reg <= main_float64_is_signaling_nanexitii_66;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitii_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitii_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %.float_exception_flags.05 = select i1 %65, i32 %66, i32 %float_exception_flags.0*/
		main_float64_is_signaling_nanexitii_float_exception_flags05 = (main_float64_is_signaling_nanexitii_65 ? main_float64_is_signaling_nanexitii_66 : main_1_float_exception_flags0_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %.float_exception_flags.05 = select i1 %65, i32 %66, i32 %float_exception_flags.0*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii_21)) begin
		main_float64_is_signaling_nanexitii_float_exception_flags05_reg <= main_float64_is_signaling_nanexitii_float_exception_flags05;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitii_float_exception_flags05) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitii_float_exception_flags05_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %.6 = select i1 %65, i1 %64, i1 %58*/
		main_float64_is_signaling_nanexitii_6 = (main_float64_is_signaling_nanexitii_65 ? main_float64_is_signaling_nanexitii_64_reg : main_float64_is_signaling_nanexit1ii_58_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %.6 = select i1 %65, i1 %64, i1 %58*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii_21)) begin
		main_float64_is_signaling_nanexitii_6_reg <= main_float64_is_signaling_nanexitii_6;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitii_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitii_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %.mux2.v.i.i = select i1 %.6, i64 %5, i64 %3*/
		main_float64_is_signaling_nanexitii_mux2vii = (main_float64_is_signaling_nanexitii_6_reg ? main_1_5_reg : main_1_3_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %.mux2.v.i.i = select i1 %.6, i64 %5, i64 %3*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii_22)) begin
		main_float64_is_signaling_nanexitii_mux2vii_reg <= main_float64_is_signaling_nanexitii_mux2vii;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitii_mux2vii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitii_mux2vii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %.mux2.i.i = or i64 %.mux2.v.i.i, 2251799813685248*/
		main_float64_is_signaling_nanexitii_mux2ii = (main_float64_is_signaling_nanexitii_mux2vii | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %.mux2.i.i = or i64 %.mux2.v.i.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii_22)) begin
		main_float64_is_signaling_nanexitii_mux2ii_reg <= main_float64_is_signaling_nanexitii_mux2ii;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitii_mux2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitii_mux2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %68 = zext i32 %8 to i64*/
		main_67_68 = main_1_8_reg;
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %68 = zext i32 %8 to i64*/
	if ((cur_state == LEGUP_F_main_BB__67_23)) begin
		main_67_68_reg <= main_67_68;
		if (start == 1'b0 && ^(main_67_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %69 = or i64 %68, %6*/
		main_67_69 = (main_67_68 | main_1_6_reg);
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %69 = or i64 %68, %6*/
	if ((cur_state == LEGUP_F_main_BB__67_23)) begin
		main_67_69_reg <= main_67_69;
		if (start == 1'b0 && ^(main_67_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %70 = icmp eq i64 %69, 0*/
		main_67_70 = (main_67_69 == 64'd0);
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %70 = icmp eq i64 %69, 0*/
	if ((cur_state == LEGUP_F_main_BB__67_23)) begin
		main_67_70_reg <= main_67_70;
		if (start == 1'b0 && ^(main_67_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %71*/
	/*   %72 = or i32 %float_exception_flags.0, 16*/
		main_71_72 = (main_1_float_exception_flags0_reg | 32'd16);
end
always @(posedge clk) begin
	/* main: %71*/
	/*   %72 = or i32 %float_exception_flags.0, 16*/
	if ((cur_state == LEGUP_F_main_BB__71_24)) begin
		main_71_72_reg <= main_71_72;
		if (start == 1'b0 && ^(main_71_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_71_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %73*/
	/*   %74 = shl nuw i64 %13, 63*/
		main_73_74 = (main_1_13_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %73*/
	/*   %74 = shl nuw i64 %13, 63*/
	if ((cur_state == LEGUP_F_main_BB__73_25)) begin
		main_73_74_reg <= main_73_74;
		if (start == 1'b0 && ^(main_73_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_73_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %73*/
	/*   %75 = or i64 %74, 9218868437227405312*/
		main_73_75 = (main_73_74 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %73*/
	/*   %75 = or i64 %74, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__73_25)) begin
		main_73_75_reg <= main_73_75;
		if (start == 1'b0 && ^(main_73_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_73_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %76*/
	/*   %77 = icmp eq i32 %8, 0*/
		main_76_77 = (main_1_8_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %76*/
	/*   %77 = icmp eq i32 %8, 0*/
	if ((cur_state == LEGUP_F_main_BB__76_26)) begin
		main_76_77_reg <= main_76_77;
		if (start == 1'b0 && ^(main_76_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_76_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %78*/
	/*   %79 = icmp eq i64 %6, 0*/
		main_78_79 = (main_1_6_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %78*/
	/*   %79 = icmp eq i64 %6, 0*/
	if ((cur_state == LEGUP_F_main_BB__78_27)) begin
		main_78_79_reg <= main_78_79;
		if (start == 1'b0 && ^(main_78_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_78_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %80*/
	/*   %81 = shl nuw i64 %13, 63*/
		main_80_81 = (main_1_13_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %80*/
	/*   %81 = shl nuw i64 %13, 63*/
	if ((cur_state == LEGUP_F_main_BB__80_28)) begin
		main_80_81_reg <= main_80_81;
		if (start == 1'b0 && ^(main_80_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %82*/
	/*   %83 = icmp ult i64 %6, 4294967296*/
		main_82_83 = (main_1_6_reg < 64'd4294967296);
end
always @(posedge clk) begin
	/* main: %82*/
	/*   %83 = icmp ult i64 %6, 4294967296*/
	if ((cur_state == LEGUP_F_main_BB__82_29)) begin
		main_82_83_reg <= main_82_83;
		if (start == 1'b0 && ^(main_82_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_82_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %82*/
	/*   %84 = lshr i64 %6, 32*/
		main_82_84 = (main_1_6_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %82*/
	/*   %84 = lshr i64 %6, 32*/
	if ((cur_state == LEGUP_F_main_BB__82_29)) begin
		main_82_84_reg <= main_82_84;
		if (start == 1'b0 && ^(main_82_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_82_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %82*/
	/*   %a.sink.i.i2.i = select i1 %83, i64 %3, i64 %84*/
		main_82_asinkii2i = (main_82_83 ? main_1_3_reg : main_82_84);
end
always @(posedge clk) begin
	/* main: %82*/
	/*   %a.sink.i.i2.i = select i1 %83, i64 %3, i64 %84*/
	if ((cur_state == LEGUP_F_main_BB__82_29)) begin
		main_82_asinkii2i_reg <= main_82_asinkii2i;
		if (start == 1'b0 && ^(main_82_asinkii2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_82_asinkii2i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %82*/
	/*   %extract.t.i.i4.i = trunc i64 %a.sink.i.i2.i to i32*/
		main_82_extracttii4i = main_82_asinkii2i[31:0];
end
always @(posedge clk) begin
	/* main: %82*/
	/*   %extract.t.i.i4.i = trunc i64 %a.sink.i.i2.i to i32*/
	if ((cur_state == LEGUP_F_main_BB__82_29)) begin
		main_82_extracttii4i_reg <= main_82_extracttii4i;
		if (start == 1'b0 && ^(main_82_extracttii4i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_82_extracttii4i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %82*/
	/*   %85 = icmp ult i32 %extract.t.i.i4.i, 65536*/
		main_82_85 = (main_82_extracttii4i < 32'd65536);
end
always @(posedge clk) begin
	/* main: %82*/
	/*   %85 = icmp ult i32 %extract.t.i.i4.i, 65536*/
	if ((cur_state == LEGUP_F_main_BB__82_29)) begin
		main_82_85_reg <= main_82_85;
		if (start == 1'b0 && ^(main_82_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_82_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %82*/
	/*   %86 = shl i32 %extract.t.i.i4.i, 16*/
		main_82_86 = (main_82_extracttii4i <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %82*/
	/*   %86 = shl i32 %extract.t.i.i4.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__82_29)) begin
		main_82_86_reg <= main_82_86;
		if (start == 1'b0 && ^(main_82_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_82_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %82*/
	/*   %.a.i.i.i5.i = select i1 %85, i32 %86, i32 %extract.t.i.i4.i*/
		main_82_aiii5i = (main_82_85 ? main_82_86 : main_82_extracttii4i);
end
always @(posedge clk) begin
	/* main: %82*/
	/*   %.a.i.i.i5.i = select i1 %85, i32 %86, i32 %extract.t.i.i4.i*/
	if ((cur_state == LEGUP_F_main_BB__82_29)) begin
		main_82_aiii5i_reg <= main_82_aiii5i;
		if (start == 1'b0 && ^(main_82_aiii5i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_82_aiii5i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %82*/
	/*   %..i.i.i6.i = select i1 %85, i32 16, i32 0*/
		main_82_iii6i = (main_82_85 ? 32'd16 : 32'd0);
end
always @(posedge clk) begin
	/* main: %82*/
	/*   %..i.i.i6.i = select i1 %85, i32 16, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__82_29)) begin
		main_82_iii6i_reg <= main_82_iii6i;
		if (start == 1'b0 && ^(main_82_iii6i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_82_iii6i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %82*/
	/*   %87 = icmp ult i32 %.a.i.i.i5.i, 16777216*/
		main_82_87 = (main_82_aiii5i < 32'd16777216);
end
always @(posedge clk) begin
	/* main: %82*/
	/*   %87 = icmp ult i32 %.a.i.i.i5.i, 16777216*/
	if ((cur_state == LEGUP_F_main_BB__82_29)) begin
		main_82_87_reg <= main_82_87;
		if (start == 1'b0 && ^(main_82_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_82_87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %89 = or i32 %..i.i.i6.i, 8*/
		main_88_89 = (main_82_iii6i_reg | 32'd8);
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %89 = or i32 %..i.i.i6.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__88_30)) begin
		main_88_89_reg <= main_88_89;
		if (start == 1'b0 && ^(main_88_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %90 = shl i32 %.a.i.i.i5.i, 8*/
		main_88_90 = (main_82_aiii5i_reg <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %90 = shl i32 %.a.i.i.i5.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__88_30)) begin
		main_88_90_reg <= main_88_90;
		if (start == 1'b0 && ^(main_88_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %.1.i.i.i7.i = phi i32 [ %90, %88 ], [ %.a.i.i.i5.i, %82 ]*/
	if ((((cur_state == LEGUP_F_main_BB__82_29) & (memory_controller_waitrequest == 1'd0)) & (main_82_87 == 1'd0))) begin
		main_normalizeFloat64Subnormalexit9i_1iii7i = main_82_aiii5i;
	end
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %.1.i.i.i7.i = phi i32 [ %90, %88 ], [ %.a.i.i.i5.i, %82 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__88_30) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeFloat64Subnormalexit9i_1iii7i = main_88_90;
	end
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %.1.i.i.i7.i = phi i32 [ %90, %88 ], [ %.a.i.i.i5.i, %82 ]*/
	if ((((cur_state == LEGUP_F_main_BB__82_29) & (memory_controller_waitrequest == 1'd0)) & (main_82_87 == 1'd0))) begin
		main_normalizeFloat64Subnormalexit9i_1iii7i_reg <= main_normalizeFloat64Subnormalexit9i_1iii7i;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9i_1iii7i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9i_1iii7i_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %.1.i.i.i7.i = phi i32 [ %90, %88 ], [ %.a.i.i.i5.i, %82 ]*/
	if (((cur_state == LEGUP_F_main_BB__88_30) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeFloat64Subnormalexit9i_1iii7i_reg <= main_normalizeFloat64Subnormalexit9i_1iii7i;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9i_1iii7i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9i_1iii7i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %shiftCount.1.i.i.i8.i = phi i32 [ %89, %88 ], [ %..i.i.i6.i, %82 ]*/
	if ((((cur_state == LEGUP_F_main_BB__82_29) & (memory_controller_waitrequest == 1'd0)) & (main_82_87 == 1'd0))) begin
		main_normalizeFloat64Subnormalexit9i_shiftCount1iii8i = main_82_iii6i;
	end
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %shiftCount.1.i.i.i8.i = phi i32 [ %89, %88 ], [ %..i.i.i6.i, %82 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__88_30) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeFloat64Subnormalexit9i_shiftCount1iii8i = main_88_89;
	end
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %shiftCount.1.i.i.i8.i = phi i32 [ %89, %88 ], [ %..i.i.i6.i, %82 ]*/
	if ((((cur_state == LEGUP_F_main_BB__82_29) & (memory_controller_waitrequest == 1'd0)) & (main_82_87 == 1'd0))) begin
		main_normalizeFloat64Subnormalexit9i_shiftCount1iii8i_reg <= main_normalizeFloat64Subnormalexit9i_shiftCount1iii8i;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9i_shiftCount1iii8i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9i_shiftCount1iii8i_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %shiftCount.1.i.i.i8.i = phi i32 [ %89, %88 ], [ %..i.i.i6.i, %82 ]*/
	if (((cur_state == LEGUP_F_main_BB__88_30) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeFloat64Subnormalexit9i_shiftCount1iii8i_reg <= main_normalizeFloat64Subnormalexit9i_shiftCount1iii8i;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9i_shiftCount1iii8i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9i_shiftCount1iii8i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %91 = lshr i32 %.1.i.i.i7.i, 24*/
		main_normalizeFloat64Subnormalexit9i_91 = (main_normalizeFloat64Subnormalexit9i_1iii7i_reg >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %91 = lshr i32 %.1.i.i.i7.i, 24*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_31)) begin
		main_normalizeFloat64Subnormalexit9i_91_reg <= main_normalizeFloat64Subnormalexit9i_91;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9i_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9i_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %gep_int4 = ptrtoint [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh to i32*/
if (reset) begin main_normalizeFloat64Subnormalexit9i_gep_int4 = 0; end
		main_normalizeFloat64Subnormalexit9i_gep_int4 = 1'd0;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %gep_int4 = ptrtoint [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh to i32*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_31)) begin
		main_normalizeFloat64Subnormalexit9i_gep_int4_reg <= main_normalizeFloat64Subnormalexit9i_gep_int4;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9i_gep_int4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9i_gep_int4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %gep_array5 = mul i32 %91, 4*/
		main_normalizeFloat64Subnormalexit9i_gep_array5 = (main_normalizeFloat64Subnormalexit9i_91 * 32'd4);
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %gep_array5 = mul i32 %91, 4*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_31)) begin
		main_normalizeFloat64Subnormalexit9i_gep_array5_reg <= main_normalizeFloat64Subnormalexit9i_gep_array5;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9i_gep_array5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9i_gep_array5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %gep6 = add i32 %gep_int4, %gep_array5*/
		main_normalizeFloat64Subnormalexit9i_gep6 = main_signed_add_32_0;
end
always @(*) begin
/* main: %normalizeFloat64Subnormal.exit9.i*/
/*   %gep6 = add i32 %gep_int4, %gep_array5*/
	main_normalizeFloat64Subnormalexit9i_gep6_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %92 = inttoptr i32 %gep6 to i32**/
		main_normalizeFloat64Subnormalexit9i_92 = main_normalizeFloat64Subnormalexit9i_gep6;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %92 = inttoptr i32 %gep6 to i32**/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_32)) begin
		main_normalizeFloat64Subnormalexit9i_92_reg <= main_normalizeFloat64Subnormalexit9i_92;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9i_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9i_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %93 = load i32* %92, align 4, !tbaa !5*/
		main_normalizeFloat64Subnormalexit9i_93 = countLeadingZeros32countLeadingZerosHigh_out_a;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %93 = load i32* %92, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_33)) begin
		main_normalizeFloat64Subnormalexit9i_93_reg <= main_normalizeFloat64Subnormalexit9i_93;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9i_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9i_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %94 = select i1 %83, i32 21, i32 -11*/
		main_normalizeFloat64Subnormalexit9i_94 = (main_82_83_reg ? 32'd21 : -32'd11);
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %94 = select i1 %83, i32 21, i32 -11*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_31)) begin
		main_normalizeFloat64Subnormalexit9i_94_reg <= main_normalizeFloat64Subnormalexit9i_94;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9i_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9i_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %95 = add nsw i32 %94, %shiftCount.1.i.i.i8.i*/
		main_normalizeFloat64Subnormalexit9i_95 = main_signed_add_32_0;
end
always @(*) begin
/* main: %normalizeFloat64Subnormal.exit9.i*/
/*   %95 = add nsw i32 %94, %shiftCount.1.i.i.i8.i*/
	main_normalizeFloat64Subnormalexit9i_95_reg = main_normalizeFloat64Subnormalexiti_119_reg;
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %96 = add i32 %95, %93*/
		main_normalizeFloat64Subnormalexit9i_96 = main_signed_add_32_0;
end
always @(*) begin
/* main: %normalizeFloat64Subnormal.exit9.i*/
/*   %96 = add i32 %95, %93*/
	main_normalizeFloat64Subnormalexit9i_96_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %97 = zext i32 %96 to i64*/
		main_normalizeFloat64Subnormalexit9i_97 = main_normalizeFloat64Subnormalexit9i_96;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %97 = zext i32 %96 to i64*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_33)) begin
		main_normalizeFloat64Subnormalexit9i_97_reg <= main_normalizeFloat64Subnormalexit9i_97;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9i_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9i_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %98 = shl i64 %6, %97*/
		main_normalizeFloat64Subnormalexit9i_98 = (main_1_6_reg <<< (main_normalizeFloat64Subnormalexit9i_97 % 64'd64));
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %98 = shl i64 %6, %97*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_33)) begin
		main_normalizeFloat64Subnormalexit9i_98_reg <= main_normalizeFloat64Subnormalexit9i_98;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9i_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9i_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %99*/
	/*   %100 = phi i64 [ %98, %normalizeFloat64Subnormal.exit9.i ], [ %6, %76 ]*/
	if ((((cur_state == LEGUP_F_main_BB__76_26) & (memory_controller_waitrequest == 1'd0)) & (main_76_77 == 1'd0))) begin
		main_99_100 = main_1_6_reg;
	end
	/* main: %99*/
	/*   %100 = phi i64 [ %98, %normalizeFloat64Subnormal.exit9.i ], [ %6, %76 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_33) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_99_100 = main_normalizeFloat64Subnormalexit9i_98;
	end
end
always @(posedge clk) begin
	/* main: %99*/
	/*   %100 = phi i64 [ %98, %normalizeFloat64Subnormal.exit9.i ], [ %6, %76 ]*/
	if ((((cur_state == LEGUP_F_main_BB__76_26) & (memory_controller_waitrequest == 1'd0)) & (main_76_77 == 1'd0))) begin
		main_99_100_reg <= main_99_100;
		if (start == 1'b0 && ^(main_99_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_99_100_reg"); $finish; end
	end
	/* main: %99*/
	/*   %100 = phi i64 [ %98, %normalizeFloat64Subnormal.exit9.i ], [ %6, %76 ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_33) & (memory_controller_waitrequest == 1'd0))) begin
		main_99_100_reg <= main_99_100;
		if (start == 1'b0 && ^(main_99_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_99_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %99*/
	/*   %101 = icmp eq i32 %11, 0*/
		main_99_101 = (main_1_11_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %99*/
	/*   %101 = icmp eq i32 %11, 0*/
	if ((cur_state == LEGUP_F_main_BB__99_34)) begin
		main_99_101_reg <= main_99_101;
		if (start == 1'b0 && ^(main_99_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_99_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %102*/
	/*   %103 = icmp eq i64 %9, 0*/
		main_102_103 = (main_1_9_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %102*/
	/*   %103 = icmp eq i64 %9, 0*/
	if ((cur_state == LEGUP_F_main_BB__102_35)) begin
		main_102_103_reg <= main_102_103;
		if (start == 1'b0 && ^(main_102_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_102_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %104*/
	/*   %105 = shl nuw i64 %13, 63*/
		main_104_105 = (main_1_13_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %104*/
	/*   %105 = shl nuw i64 %13, 63*/
	if ((cur_state == LEGUP_F_main_BB__104_36)) begin
		main_104_105_reg <= main_104_105;
		if (start == 1'b0 && ^(main_104_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_104_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %106*/
	/*   %107 = icmp ult i64 %9, 4294967296*/
		main_106_107 = (main_1_9_reg < 64'd4294967296);
end
always @(posedge clk) begin
	/* main: %106*/
	/*   %107 = icmp ult i64 %9, 4294967296*/
	if ((cur_state == LEGUP_F_main_BB__106_37)) begin
		main_106_107_reg <= main_106_107;
		if (start == 1'b0 && ^(main_106_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_106_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %106*/
	/*   %108 = lshr i64 %9, 32*/
		main_106_108 = (main_1_9_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %106*/
	/*   %108 = lshr i64 %9, 32*/
	if ((cur_state == LEGUP_F_main_BB__106_37)) begin
		main_106_108_reg <= main_106_108;
		if (start == 1'b0 && ^(main_106_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_106_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %106*/
	/*   %a.sink.i.i.i = select i1 %107, i64 %5, i64 %108*/
		main_106_asinkiii = (main_106_107 ? main_1_5_reg : main_106_108);
end
always @(posedge clk) begin
	/* main: %106*/
	/*   %a.sink.i.i.i = select i1 %107, i64 %5, i64 %108*/
	if ((cur_state == LEGUP_F_main_BB__106_37)) begin
		main_106_asinkiii_reg <= main_106_asinkiii;
		if (start == 1'b0 && ^(main_106_asinkiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_106_asinkiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %106*/
	/*   %extract.t.i.i.i = trunc i64 %a.sink.i.i.i to i32*/
		main_106_extracttiii = main_106_asinkiii[31:0];
end
always @(posedge clk) begin
	/* main: %106*/
	/*   %extract.t.i.i.i = trunc i64 %a.sink.i.i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB__106_37)) begin
		main_106_extracttiii_reg <= main_106_extracttiii;
		if (start == 1'b0 && ^(main_106_extracttiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_106_extracttiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %106*/
	/*   %109 = icmp ult i32 %extract.t.i.i.i, 65536*/
		main_106_109 = (main_106_extracttiii < 32'd65536);
end
always @(posedge clk) begin
	/* main: %106*/
	/*   %109 = icmp ult i32 %extract.t.i.i.i, 65536*/
	if ((cur_state == LEGUP_F_main_BB__106_37)) begin
		main_106_109_reg <= main_106_109;
		if (start == 1'b0 && ^(main_106_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_106_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %106*/
	/*   %110 = shl i32 %extract.t.i.i.i, 16*/
		main_106_110 = (main_106_extracttiii <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %106*/
	/*   %110 = shl i32 %extract.t.i.i.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__106_37)) begin
		main_106_110_reg <= main_106_110;
		if (start == 1'b0 && ^(main_106_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_106_110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %106*/
	/*   %.a.i.i.i.i = select i1 %109, i32 %110, i32 %extract.t.i.i.i*/
		main_106_aiiii = (main_106_109 ? main_106_110 : main_106_extracttiii);
end
always @(posedge clk) begin
	/* main: %106*/
	/*   %.a.i.i.i.i = select i1 %109, i32 %110, i32 %extract.t.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__106_37)) begin
		main_106_aiiii_reg <= main_106_aiiii;
		if (start == 1'b0 && ^(main_106_aiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_106_aiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %106*/
	/*   %..i.i.i.i = select i1 %109, i32 16, i32 0*/
		main_106_iiii = (main_106_109 ? 32'd16 : 32'd0);
end
always @(posedge clk) begin
	/* main: %106*/
	/*   %..i.i.i.i = select i1 %109, i32 16, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__106_37)) begin
		main_106_iiii_reg <= main_106_iiii;
		if (start == 1'b0 && ^(main_106_iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_106_iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %106*/
	/*   %111 = icmp ult i32 %.a.i.i.i.i, 16777216*/
		main_106_111 = (main_106_aiiii < 32'd16777216);
end
always @(posedge clk) begin
	/* main: %106*/
	/*   %111 = icmp ult i32 %.a.i.i.i.i, 16777216*/
	if ((cur_state == LEGUP_F_main_BB__106_37)) begin
		main_106_111_reg <= main_106_111;
		if (start == 1'b0 && ^(main_106_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_106_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %113 = or i32 %..i.i.i.i, 8*/
		main_112_113 = (main_106_iiii_reg | 32'd8);
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %113 = or i32 %..i.i.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__112_38)) begin
		main_112_113_reg <= main_112_113;
		if (start == 1'b0 && ^(main_112_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %114 = shl i32 %.a.i.i.i.i, 8*/
		main_112_114 = (main_106_aiiii_reg <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %114 = shl i32 %.a.i.i.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__112_38)) begin
		main_112_114_reg <= main_112_114;
		if (start == 1'b0 && ^(main_112_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %.1.i.i.i.i = phi i32 [ %114, %112 ], [ %.a.i.i.i.i, %106 ]*/
	if ((((cur_state == LEGUP_F_main_BB__106_37) & (memory_controller_waitrequest == 1'd0)) & (main_106_111 == 1'd0))) begin
		main_normalizeFloat64Subnormalexiti_1iiii = main_106_aiiii;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %.1.i.i.i.i = phi i32 [ %114, %112 ], [ %.a.i.i.i.i, %106 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__112_38) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeFloat64Subnormalexiti_1iiii = main_112_114;
	end
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %.1.i.i.i.i = phi i32 [ %114, %112 ], [ %.a.i.i.i.i, %106 ]*/
	if ((((cur_state == LEGUP_F_main_BB__106_37) & (memory_controller_waitrequest == 1'd0)) & (main_106_111 == 1'd0))) begin
		main_normalizeFloat64Subnormalexiti_1iiii_reg <= main_normalizeFloat64Subnormalexiti_1iiii;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_1iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_1iiii_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %.1.i.i.i.i = phi i32 [ %114, %112 ], [ %.a.i.i.i.i, %106 ]*/
	if (((cur_state == LEGUP_F_main_BB__112_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeFloat64Subnormalexiti_1iiii_reg <= main_normalizeFloat64Subnormalexiti_1iiii;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_1iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_1iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %shiftCount.1.i.i.i.i = phi i32 [ %113, %112 ], [ %..i.i.i.i, %106 ]*/
	if ((((cur_state == LEGUP_F_main_BB__106_37) & (memory_controller_waitrequest == 1'd0)) & (main_106_111 == 1'd0))) begin
		main_normalizeFloat64Subnormalexiti_shiftCount1iiii = main_106_iiii;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %shiftCount.1.i.i.i.i = phi i32 [ %113, %112 ], [ %..i.i.i.i, %106 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__112_38) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeFloat64Subnormalexiti_shiftCount1iiii = main_112_113;
	end
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %shiftCount.1.i.i.i.i = phi i32 [ %113, %112 ], [ %..i.i.i.i, %106 ]*/
	if ((((cur_state == LEGUP_F_main_BB__106_37) & (memory_controller_waitrequest == 1'd0)) & (main_106_111 == 1'd0))) begin
		main_normalizeFloat64Subnormalexiti_shiftCount1iiii_reg <= main_normalizeFloat64Subnormalexiti_shiftCount1iiii;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_shiftCount1iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_shiftCount1iiii_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %shiftCount.1.i.i.i.i = phi i32 [ %113, %112 ], [ %..i.i.i.i, %106 ]*/
	if (((cur_state == LEGUP_F_main_BB__112_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeFloat64Subnormalexiti_shiftCount1iiii_reg <= main_normalizeFloat64Subnormalexiti_shiftCount1iiii;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_shiftCount1iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_shiftCount1iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %115 = lshr i32 %.1.i.i.i.i, 24*/
		main_normalizeFloat64Subnormalexiti_115 = (main_normalizeFloat64Subnormalexiti_1iiii_reg >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %115 = lshr i32 %.1.i.i.i.i, 24*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_39)) begin
		main_normalizeFloat64Subnormalexiti_115_reg <= main_normalizeFloat64Subnormalexiti_115;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %gep_int7 = ptrtoint [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh to i32*/
if (reset) begin main_normalizeFloat64Subnormalexiti_gep_int7 = 0; end
		main_normalizeFloat64Subnormalexiti_gep_int7 = 1'd0;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %gep_int7 = ptrtoint [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh to i32*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_39)) begin
		main_normalizeFloat64Subnormalexiti_gep_int7_reg <= main_normalizeFloat64Subnormalexiti_gep_int7;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_gep_int7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_gep_int7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %gep_array8 = mul i32 %115, 4*/
		main_normalizeFloat64Subnormalexiti_gep_array8 = (main_normalizeFloat64Subnormalexiti_115 * 32'd4);
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %gep_array8 = mul i32 %115, 4*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_39)) begin
		main_normalizeFloat64Subnormalexiti_gep_array8_reg <= main_normalizeFloat64Subnormalexiti_gep_array8;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_gep_array8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_gep_array8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %gep9 = add i32 %gep_int7, %gep_array8*/
		main_normalizeFloat64Subnormalexiti_gep9 = main_signed_add_32_0;
end
always @(*) begin
/* main: %normalizeFloat64Subnormal.exit.i*/
/*   %gep9 = add i32 %gep_int7, %gep_array8*/
	main_normalizeFloat64Subnormalexiti_gep9_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %116 = inttoptr i32 %gep9 to i32**/
		main_normalizeFloat64Subnormalexiti_116 = main_normalizeFloat64Subnormalexiti_gep9;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %116 = inttoptr i32 %gep9 to i32**/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_40)) begin
		main_normalizeFloat64Subnormalexiti_116_reg <= main_normalizeFloat64Subnormalexiti_116;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %117 = load i32* %116, align 4, !tbaa !5*/
		main_normalizeFloat64Subnormalexiti_117 = countLeadingZeros32countLeadingZerosHigh_out_a;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %117 = load i32* %116, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_41)) begin
		main_normalizeFloat64Subnormalexiti_117_reg <= main_normalizeFloat64Subnormalexiti_117;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %118 = select i1 %107, i32 21, i32 -11*/
		main_normalizeFloat64Subnormalexiti_118 = (main_106_107_reg ? 32'd21 : -32'd11);
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %118 = select i1 %107, i32 21, i32 -11*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_39)) begin
		main_normalizeFloat64Subnormalexiti_118_reg <= main_normalizeFloat64Subnormalexiti_118;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %119 = add nsw i32 %118, %shiftCount.1.i.i.i.i*/
		main_normalizeFloat64Subnormalexiti_119 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %119 = add nsw i32 %118, %shiftCount.1.i.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_39)) begin
		main_normalizeFloat64Subnormalexiti_119_reg <= main_normalizeFloat64Subnormalexiti_119;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_119_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %95 = add nsw i32 %94, %shiftCount.1.i.i.i8.i*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_31)) begin
		main_normalizeFloat64Subnormalexiti_119_reg <= main_normalizeFloat64Subnormalexit9i_95;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9i_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_119_reg"); $finish; end
	end
	/* main: %float64_mul.exit*/
	/*   %167 = add nsw i32 %166, %main_result.02*/
	if ((cur_state == LEGUP_F_main_BB_float64_mulexit_49)) begin
		main_normalizeFloat64Subnormalexiti_119_reg <= main_float64_mulexit_167;
		if (start == 1'b0 && ^(main_float64_mulexit_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %120 = add i32 %119, %117*/
		main_normalizeFloat64Subnormalexiti_120 = main_signed_add_32_0;
end
always @(*) begin
/* main: %normalizeFloat64Subnormal.exit.i*/
/*   %120 = add i32 %119, %117*/
	main_normalizeFloat64Subnormalexiti_120_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %121 = zext i32 %120 to i64*/
		main_normalizeFloat64Subnormalexiti_121 = main_normalizeFloat64Subnormalexiti_120;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %121 = zext i32 %120 to i64*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_41)) begin
		main_normalizeFloat64Subnormalexiti_121_reg <= main_normalizeFloat64Subnormalexiti_121;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %122 = shl i64 %9, %121*/
		main_normalizeFloat64Subnormalexiti_122 = (main_1_9_reg <<< (main_normalizeFloat64Subnormalexiti_121 % 64'd64));
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %122 = shl i64 %9, %121*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_41)) begin
		main_normalizeFloat64Subnormalexiti_122_reg <= main_normalizeFloat64Subnormalexiti_122;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %123 = phi i64 [ %122, %normalizeFloat64Subnormal.exit.i ], [ %9, %99 ]*/
	if ((((cur_state == LEGUP_F_main_BB__99_34) & (memory_controller_waitrequest == 1'd0)) & (main_99_101 == 1'd0))) begin
		main_roundAndPackFloat64exiti_123 = main_1_9_reg;
	end
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %123 = phi i64 [ %122, %normalizeFloat64Subnormal.exit.i ], [ %9, %99 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_41) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_roundAndPackFloat64exiti_123 = main_normalizeFloat64Subnormalexiti_122;
	end
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %123 = phi i64 [ %122, %normalizeFloat64Subnormal.exit.i ], [ %9, %99 ]*/
	if ((((cur_state == LEGUP_F_main_BB__99_34) & (memory_controller_waitrequest == 1'd0)) & (main_99_101 == 1'd0))) begin
		main_roundAndPackFloat64exiti_123_reg <= main_roundAndPackFloat64exiti_123;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_123_reg"); $finish; end
	end
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %123 = phi i64 [ %122, %normalizeFloat64Subnormal.exit.i ], [ %9, %99 ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_41) & (memory_controller_waitrequest == 1'd0))) begin
		main_roundAndPackFloat64exiti_123_reg <= main_roundAndPackFloat64exiti_123;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %124 = shl i64 %100, 10*/
		main_roundAndPackFloat64exiti_124 = (main_99_100_reg <<< (64'd10 % 64'd64));
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %124 = shl i64 %100, 10*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_42)) begin
		main_roundAndPackFloat64exiti_124_reg <= main_roundAndPackFloat64exiti_124;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %125 = shl i64 %123, 11*/
		main_roundAndPackFloat64exiti_125 = (main_roundAndPackFloat64exiti_123_reg <<< (64'd11 % 64'd64));
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %125 = shl i64 %123, 11*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_42)) begin
		main_roundAndPackFloat64exiti_125_reg <= main_roundAndPackFloat64exiti_125;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %126 = lshr i64 %100, 22*/
		main_roundAndPackFloat64exiti_126 = (main_99_100_reg >>> (64'd22 % 64'd64));
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %126 = lshr i64 %100, 22*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_42)) begin
		main_roundAndPackFloat64exiti_126_reg <= main_roundAndPackFloat64exiti_126;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %127 = and i64 %126, 3221225471*/
		main_roundAndPackFloat64exiti_127 = (main_roundAndPackFloat64exiti_126 & 64'd3221225471);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %127 = and i64 %126, 3221225471*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_42)) begin
		main_roundAndPackFloat64exiti_127_reg <= main_roundAndPackFloat64exiti_127;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %128 = or i64 %127, 1073741824*/
		main_roundAndPackFloat64exiti_128 = (main_roundAndPackFloat64exiti_127 | 64'd1073741824);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %128 = or i64 %127, 1073741824*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_42)) begin
		main_roundAndPackFloat64exiti_128_reg <= main_roundAndPackFloat64exiti_128;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %129 = lshr i64 %123, 21*/
		main_roundAndPackFloat64exiti_129 = (main_roundAndPackFloat64exiti_123_reg >>> (64'd21 % 64'd64));
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %129 = lshr i64 %123, 21*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_42)) begin
		main_roundAndPackFloat64exiti_129_reg <= main_roundAndPackFloat64exiti_129;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %130 = and i64 %129, 2147483647*/
		main_roundAndPackFloat64exiti_130 = (main_roundAndPackFloat64exiti_129 & 64'd2147483647);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %130 = and i64 %129, 2147483647*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_42)) begin
		main_roundAndPackFloat64exiti_130_reg <= main_roundAndPackFloat64exiti_130;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %131 = or i64 %130, 2147483648*/
		main_roundAndPackFloat64exiti_131 = (main_roundAndPackFloat64exiti_130 | 64'd2147483648);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %131 = or i64 %130, 2147483648*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_42)) begin
		main_roundAndPackFloat64exiti_131_reg <= main_roundAndPackFloat64exiti_131;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %132 = and i64 %124, 4294966272*/
		main_roundAndPackFloat64exiti_132 = (main_roundAndPackFloat64exiti_124 & 64'd4294966272);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %132 = and i64 %124, 4294966272*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_42)) begin
		main_roundAndPackFloat64exiti_132_reg <= main_roundAndPackFloat64exiti_132;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %133 = and i64 %125, 4294965248*/
		main_roundAndPackFloat64exiti_133 = (main_roundAndPackFloat64exiti_125 & 64'd4294965248);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %133 = and i64 %125, 4294965248*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_42)) begin
		main_roundAndPackFloat64exiti_133_reg <= main_roundAndPackFloat64exiti_133;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_133_reg"); $finish; end
	end
end
always @(*) begin
	main_roundAndPackFloat64exiti_134 = main_signed_multiply_64_0;
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %134 = mul i64 %133, %132*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_43)) begin
		main_roundAndPackFloat64exiti_134_reg <= main_roundAndPackFloat64exiti_134;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_134_reg"); $finish; end
	end
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %134 = mul i64 %133, %132*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_43)) begin
		main_roundAndPackFloat64exiti_134_reg <= main_roundAndPackFloat64exiti_134;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_134_reg"); $finish; end
	end
end
always @(*) begin
	main_roundAndPackFloat64exiti_135 = main_signed_multiply_64_1;
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %135 = mul i64 %131, %132*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_43)) begin
		main_roundAndPackFloat64exiti_135_reg <= main_roundAndPackFloat64exiti_135;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_135_reg"); $finish; end
	end
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %135 = mul i64 %131, %132*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_43)) begin
		main_roundAndPackFloat64exiti_135_reg <= main_roundAndPackFloat64exiti_135;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_135_reg"); $finish; end
	end
end
always @(*) begin
	main_roundAndPackFloat64exiti_136 = main_signed_multiply_64_2;
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %136 = mul i64 %133, %128*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_43)) begin
		main_roundAndPackFloat64exiti_136_reg <= main_roundAndPackFloat64exiti_136;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_136_reg"); $finish; end
	end
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %136 = mul i64 %133, %128*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_43)) begin
		main_roundAndPackFloat64exiti_136_reg <= main_roundAndPackFloat64exiti_136;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_136_reg"); $finish; end
	end
end
always @(*) begin
	main_roundAndPackFloat64exiti_137 = main_signed_multiply_64_3;
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %137 = mul i64 %131, %128*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_43)) begin
		main_roundAndPackFloat64exiti_137_reg <= main_roundAndPackFloat64exiti_137;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_137_reg"); $finish; end
	end
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %137 = mul i64 %131, %128*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_43)) begin
		main_roundAndPackFloat64exiti_137_reg <= main_roundAndPackFloat64exiti_137;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic = zext i64 %135 to i65*/
		main_roundAndPackFloat64exiti_overflow_intrinsic = main_roundAndPackFloat64exiti_135;
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic = zext i64 %135 to i65*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_43)) begin
		main_roundAndPackFloat64exiti_overflow_intrinsic_reg <= main_roundAndPackFloat64exiti_overflow_intrinsic;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_overflow_intrinsic) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_overflow_intrinsic_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic1 = zext i64 %136 to i65*/
		main_roundAndPackFloat64exiti_overflow_intrinsic1 = main_roundAndPackFloat64exiti_136;
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic1 = zext i64 %136 to i65*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_43)) begin
		main_roundAndPackFloat64exiti_overflow_intrinsic1_reg <= main_roundAndPackFloat64exiti_overflow_intrinsic1;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_overflow_intrinsic1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_overflow_intrinsic1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic2 = add i65 %overflow_intrinsic, %overflow_intrinsic1*/
		main_roundAndPackFloat64exiti_overflow_intrinsic2 = (main_roundAndPackFloat64exiti_overflow_intrinsic + main_roundAndPackFloat64exiti_overflow_intrinsic1);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic2 = add i65 %overflow_intrinsic, %overflow_intrinsic1*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_43)) begin
		main_roundAndPackFloat64exiti_overflow_intrinsic2_reg <= main_roundAndPackFloat64exiti_overflow_intrinsic2;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_overflow_intrinsic2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_overflow_intrinsic2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic_sum = trunc i65 %overflow_intrinsic2 to i64*/
		main_roundAndPackFloat64exiti_overflow_intrinsic_sum = main_roundAndPackFloat64exiti_overflow_intrinsic2[63:0];
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic_sum = trunc i65 %overflow_intrinsic2 to i64*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_43)) begin
		main_roundAndPackFloat64exiti_overflow_intrinsic_sum_reg <= main_roundAndPackFloat64exiti_overflow_intrinsic_sum;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_overflow_intrinsic_sum) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_overflow_intrinsic_sum_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic3 = lshr i65 %overflow_intrinsic2, 64*/
		main_roundAndPackFloat64exiti_overflow_intrinsic3 = (main_roundAndPackFloat64exiti_overflow_intrinsic2 >>> (65'd64 % 65'd65));
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic3 = lshr i65 %overflow_intrinsic2, 64*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_43)) begin
		main_roundAndPackFloat64exiti_overflow_intrinsic3_reg <= main_roundAndPackFloat64exiti_overflow_intrinsic3;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_overflow_intrinsic3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_overflow_intrinsic3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic_carry = trunc i65 %overflow_intrinsic3 to i1*/
		main_roundAndPackFloat64exiti_overflow_intrinsic_carry = main_roundAndPackFloat64exiti_overflow_intrinsic3;
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic_carry = trunc i65 %overflow_intrinsic3 to i1*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_43)) begin
		main_roundAndPackFloat64exiti_overflow_intrinsic_carry_reg <= main_roundAndPackFloat64exiti_overflow_intrinsic_carry;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_overflow_intrinsic_carry) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_overflow_intrinsic_carry_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %138 = zext i1 %overflow_intrinsic_carry to i64*/
		main_roundAndPackFloat64exiti_138 = main_roundAndPackFloat64exiti_overflow_intrinsic_carry;
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %138 = zext i1 %overflow_intrinsic_carry to i64*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_43)) begin
		main_roundAndPackFloat64exiti_138_reg <= main_roundAndPackFloat64exiti_138;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %139 = shl nuw nsw i64 %138, 32*/
		main_roundAndPackFloat64exiti_139 = (main_roundAndPackFloat64exiti_138 <<< (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %139 = shl nuw nsw i64 %138, 32*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_43)) begin
		main_roundAndPackFloat64exiti_139_reg <= main_roundAndPackFloat64exiti_139;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %140 = lshr i64 %overflow_intrinsic_sum, 32*/
		main_roundAndPackFloat64exiti_140 = (main_roundAndPackFloat64exiti_overflow_intrinsic_sum >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %140 = lshr i64 %overflow_intrinsic_sum, 32*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_43)) begin
		main_roundAndPackFloat64exiti_140_reg <= main_roundAndPackFloat64exiti_140;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %141 = or i64 %139, %140*/
		main_roundAndPackFloat64exiti_141 = (main_roundAndPackFloat64exiti_139_reg | main_roundAndPackFloat64exiti_140_reg);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %141 = or i64 %139, %140*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_44)) begin
		main_roundAndPackFloat64exiti_141_reg <= main_roundAndPackFloat64exiti_141;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %142 = shl i64 %overflow_intrinsic_sum, 32*/
		main_roundAndPackFloat64exiti_142 = (main_roundAndPackFloat64exiti_overflow_intrinsic_sum <<< (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %142 = shl i64 %overflow_intrinsic_sum, 32*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_43)) begin
		main_roundAndPackFloat64exiti_142_reg <= main_roundAndPackFloat64exiti_142;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic4 = zext i64 %134 to i65*/
		main_roundAndPackFloat64exiti_overflow_intrinsic4 = main_roundAndPackFloat64exiti_134;
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic4 = zext i64 %134 to i65*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_43)) begin
		main_roundAndPackFloat64exiti_overflow_intrinsic4_reg <= main_roundAndPackFloat64exiti_overflow_intrinsic4;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_overflow_intrinsic4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_overflow_intrinsic4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic5 = zext i64 %142 to i65*/
		main_roundAndPackFloat64exiti_overflow_intrinsic5 = main_roundAndPackFloat64exiti_142;
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic5 = zext i64 %142 to i65*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_43)) begin
		main_roundAndPackFloat64exiti_overflow_intrinsic5_reg <= main_roundAndPackFloat64exiti_overflow_intrinsic5;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_overflow_intrinsic5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_overflow_intrinsic5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic6 = add i65 %overflow_intrinsic4, %overflow_intrinsic5*/
		main_roundAndPackFloat64exiti_overflow_intrinsic6 = (main_roundAndPackFloat64exiti_overflow_intrinsic4_reg + main_roundAndPackFloat64exiti_overflow_intrinsic5_reg);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic6 = add i65 %overflow_intrinsic4, %overflow_intrinsic5*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_44)) begin
		main_roundAndPackFloat64exiti_overflow_intrinsic6_reg <= main_roundAndPackFloat64exiti_overflow_intrinsic6;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_overflow_intrinsic6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_overflow_intrinsic6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic_sum7 = trunc i65 %overflow_intrinsic6 to i64*/
		main_roundAndPackFloat64exiti_overflow_intrinsic_sum7 = main_roundAndPackFloat64exiti_overflow_intrinsic6[63:0];
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic_sum7 = trunc i65 %overflow_intrinsic6 to i64*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_44)) begin
		main_roundAndPackFloat64exiti_overflow_intrinsic_sum7_reg <= main_roundAndPackFloat64exiti_overflow_intrinsic_sum7;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_overflow_intrinsic_sum7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_overflow_intrinsic_sum7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic8 = lshr i65 %overflow_intrinsic6, 64*/
		main_roundAndPackFloat64exiti_overflow_intrinsic8 = (main_roundAndPackFloat64exiti_overflow_intrinsic6 >>> (65'd64 % 65'd65));
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic8 = lshr i65 %overflow_intrinsic6, 64*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_44)) begin
		main_roundAndPackFloat64exiti_overflow_intrinsic8_reg <= main_roundAndPackFloat64exiti_overflow_intrinsic8;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_overflow_intrinsic8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_overflow_intrinsic8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic_carry9 = trunc i65 %overflow_intrinsic8 to i1*/
		main_roundAndPackFloat64exiti_overflow_intrinsic_carry9 = main_roundAndPackFloat64exiti_overflow_intrinsic8;
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %overflow_intrinsic_carry9 = trunc i65 %overflow_intrinsic8 to i1*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_44)) begin
		main_roundAndPackFloat64exiti_overflow_intrinsic_carry9_reg <= main_roundAndPackFloat64exiti_overflow_intrinsic_carry9;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_overflow_intrinsic_carry9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_overflow_intrinsic_carry9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %143 = zext i1 %overflow_intrinsic_carry9 to i64*/
		main_roundAndPackFloat64exiti_143 = main_roundAndPackFloat64exiti_overflow_intrinsic_carry9;
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %143 = zext i1 %overflow_intrinsic_carry9 to i64*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_44)) begin
		main_roundAndPackFloat64exiti_143_reg <= main_roundAndPackFloat64exiti_143;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %144 = add i64 %143, %137*/
		main_roundAndPackFloat64exiti_144 = main_signed_add_64_0;
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %144 = add i64 %143, %137*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_45)) begin
		main_roundAndPackFloat64exiti_144_reg <= main_roundAndPackFloat64exiti_144;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %145 = add i64 %144, %141*/
		main_roundAndPackFloat64exiti_145 = main_signed_add_64_1;
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %145 = add i64 %144, %141*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_45)) begin
		main_roundAndPackFloat64exiti_145_reg <= main_roundAndPackFloat64exiti_145;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %146 = icmp ne i64 %overflow_intrinsic_sum7, 0*/
		main_roundAndPackFloat64exiti_146 = (main_roundAndPackFloat64exiti_overflow_intrinsic_sum7_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %146 = icmp ne i64 %overflow_intrinsic_sum7, 0*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_45)) begin
		main_roundAndPackFloat64exiti_146_reg <= main_roundAndPackFloat64exiti_146;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %147 = zext i1 %146 to i64*/
		main_roundAndPackFloat64exiti_147 = main_roundAndPackFloat64exiti_146;
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %147 = zext i1 %146 to i64*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_45)) begin
		main_roundAndPackFloat64exiti_147_reg <= main_roundAndPackFloat64exiti_147;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %148 = or i64 %145, %147*/
		main_roundAndPackFloat64exiti_148 = (main_roundAndPackFloat64exiti_145 | main_roundAndPackFloat64exiti_147);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %148 = or i64 %145, %147*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_45)) begin
		main_roundAndPackFloat64exiti_148_reg <= main_roundAndPackFloat64exiti_148;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %149 = shl i64 %148, 1*/
		main_roundAndPackFloat64exiti_149 = (main_roundAndPackFloat64exiti_148 <<< (64'd1 % 64'd64));
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %149 = shl i64 %148, 1*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_45)) begin
		main_roundAndPackFloat64exiti_149_reg <= main_roundAndPackFloat64exiti_149;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %150 = icmp sgt i64 %149, -1*/
		main_roundAndPackFloat64exiti_150 = ($signed(main_roundAndPackFloat64exiti_149) > $signed(-64'd1));
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %150 = icmp sgt i64 %149, -1*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_45)) begin
		main_roundAndPackFloat64exiti_150_reg <= main_roundAndPackFloat64exiti_150;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %..i = select i1 %150, i64 %149, i64 %148*/
		main_roundAndPackFloat64exiti_i = (main_roundAndPackFloat64exiti_150 ? main_roundAndPackFloat64exiti_149 : main_roundAndPackFloat64exiti_148);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %..i = select i1 %150, i64 %149, i64 %148*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_45)) begin
		main_roundAndPackFloat64exiti_i_reg <= main_roundAndPackFloat64exiti_i;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %.tr.i.i = trunc i64 %..i to i32*/
		main_roundAndPackFloat64exiti_trii = main_roundAndPackFloat64exiti_i[31:0];
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %.tr.i.i = trunc i64 %..i to i32*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_45)) begin
		main_roundAndPackFloat64exiti_trii_reg <= main_roundAndPackFloat64exiti_trii;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_trii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_trii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %151 = and i32 %.tr.i.i, 1023*/
		main_roundAndPackFloat64exiti_151 = (main_roundAndPackFloat64exiti_trii & 32'd1023);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %151 = and i32 %.tr.i.i, 1023*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_45)) begin
		main_roundAndPackFloat64exiti_151_reg <= main_roundAndPackFloat64exiti_151;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %152 = icmp eq i32 %151, 0*/
		main_roundAndPackFloat64exiti_152 = (main_roundAndPackFloat64exiti_151 == 32'd0);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %152 = icmp eq i32 %151, 0*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_45)) begin
		main_roundAndPackFloat64exiti_152_reg <= main_roundAndPackFloat64exiti_152;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %153 = or i32 %float_exception_flags.0, 1*/
		main_roundAndPackFloat64exiti_153 = (main_1_float_exception_flags0_reg | 32'd1);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %153 = or i32 %float_exception_flags.0, 1*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_42)) begin
		main_roundAndPackFloat64exiti_153_reg <= main_roundAndPackFloat64exiti_153;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %float_exception_flags.0. = select i1 %152, i32 %float_exception_flags.0, i32 %153*/
		main_roundAndPackFloat64exiti_float_exception_flags0 = (main_roundAndPackFloat64exiti_152_reg ? main_1_float_exception_flags0_reg : main_roundAndPackFloat64exiti_153_reg);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %float_exception_flags.0. = select i1 %152, i32 %float_exception_flags.0, i32 %153*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_46)) begin
		main_roundAndPackFloat64exiti_float_exception_flags0_reg <= main_roundAndPackFloat64exiti_float_exception_flags0;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_float_exception_flags0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_float_exception_flags0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %154 = add i64 512, %..i*/
		main_roundAndPackFloat64exiti_154 = main_signed_add_64_2;
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %154 = add i64 512, %..i*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_45)) begin
		main_roundAndPackFloat64exiti_154_reg <= main_roundAndPackFloat64exiti_154;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %155 = lshr i64 %154, 10*/
		main_roundAndPackFloat64exiti_155 = (main_roundAndPackFloat64exiti_154 >>> (64'd10 % 64'd64));
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %155 = lshr i64 %154, 10*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_45)) begin
		main_roundAndPackFloat64exiti_155_reg <= main_roundAndPackFloat64exiti_155;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %156 = icmp eq i32 %151, 512*/
		main_roundAndPackFloat64exiti_156 = (main_roundAndPackFloat64exiti_151 == 32'd512);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %156 = icmp eq i32 %151, 512*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_45)) begin
		main_roundAndPackFloat64exiti_156_reg <= main_roundAndPackFloat64exiti_156;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %157 = zext i1 %156 to i32*/
		main_roundAndPackFloat64exiti_157 = main_roundAndPackFloat64exiti_156;
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %157 = zext i1 %156 to i32*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_45)) begin
		main_roundAndPackFloat64exiti_157_reg <= main_roundAndPackFloat64exiti_157;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %158 = xor i32 %157, -1*/
		main_roundAndPackFloat64exiti_158 = (main_roundAndPackFloat64exiti_157 ^ -32'd1);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %158 = xor i32 %157, -1*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_45)) begin
		main_roundAndPackFloat64exiti_158_reg <= main_roundAndPackFloat64exiti_158;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %159 = sext i32 %158 to i64*/
		main_roundAndPackFloat64exiti_159 = $signed(main_roundAndPackFloat64exiti_158);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %159 = sext i32 %158 to i64*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_45)) begin
		main_roundAndPackFloat64exiti_159_reg <= main_roundAndPackFloat64exiti_159;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %160 = and i64 %155, %159*/
		main_roundAndPackFloat64exiti_160 = (main_roundAndPackFloat64exiti_155 & main_roundAndPackFloat64exiti_159);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %160 = and i64 %155, %159*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_45)) begin
		main_roundAndPackFloat64exiti_160_reg <= main_roundAndPackFloat64exiti_160;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %161 = shl nuw i64 %13, 63*/
		main_roundAndPackFloat64exiti_161 = (main_1_13_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %161 = shl nuw i64 %13, 63*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_42)) begin
		main_roundAndPackFloat64exiti_161_reg <= main_roundAndPackFloat64exiti_161;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %162 = or i64 %160, %161*/
		main_roundAndPackFloat64exiti_162 = (main_roundAndPackFloat64exiti_160_reg | main_roundAndPackFloat64exiti_161_reg);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %162 = or i64 %160, %161*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_46)) begin
		main_roundAndPackFloat64exiti_162_reg <= main_roundAndPackFloat64exiti_162;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_162_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_mul.exit*/
	/*   %float_exception_flags.4 = phi i32 [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i11.i ], [ %42, %41 ], [ %float_exception_flags.0, %43 ], [ %72, %71 ], [ %float_exception_flags.0, %73 ], [ %.float_exception_flags.05, %float64_is_signaling_nan.exit.i.i ], [ %float_exception_flags.0, %80 ], [ %float_exception_flags.0, %104 ], [ %float_exception_flags.0., %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti11i_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_float_exception_flags4 = main_float64_is_signaling_nanexiti11i_float_exception_flags0_reg;
	end
	/* main: %float64_mul.exit*/
	/*   %float_exception_flags.4 = phi i32 [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i11.i ], [ %42, %41 ], [ %float_exception_flags.0, %43 ], [ %72, %71 ], [ %float_exception_flags.0, %73 ], [ %.float_exception_flags.05, %float64_is_signaling_nan.exit.i.i ], [ %float_exception_flags.0, %80 ], [ %float_exception_flags.0, %104 ], [ %float_exception_flags.0., %roundAndPackFloat64.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__41_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_float_exception_flags4 = main_41_42;
	end
	/* main: %float64_mul.exit*/
	/*   %float_exception_flags.4 = phi i32 [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i11.i ], [ %42, %41 ], [ %float_exception_flags.0, %43 ], [ %72, %71 ], [ %float_exception_flags.0, %73 ], [ %.float_exception_flags.05, %float64_is_signaling_nan.exit.i.i ], [ %float_exception_flags.0, %80 ], [ %float_exception_flags.0, %104 ], [ %float_exception_flags.0., %roundAndPackFloat64.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__43_14) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_float_exception_flags4 = main_1_float_exception_flags0_reg;
	end
	/* main: %float64_mul.exit*/
	/*   %float_exception_flags.4 = phi i32 [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i11.i ], [ %42, %41 ], [ %float_exception_flags.0, %43 ], [ %72, %71 ], [ %float_exception_flags.0, %73 ], [ %.float_exception_flags.05, %float64_is_signaling_nan.exit.i.i ], [ %float_exception_flags.0, %80 ], [ %float_exception_flags.0, %104 ], [ %float_exception_flags.0., %roundAndPackFloat64.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_float_exception_flags4 = main_float64_is_signaling_nanexitii_float_exception_flags05_reg;
	end
	/* main: %float64_mul.exit*/
	/*   %float_exception_flags.4 = phi i32 [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i11.i ], [ %42, %41 ], [ %float_exception_flags.0, %43 ], [ %72, %71 ], [ %float_exception_flags.0, %73 ], [ %.float_exception_flags.05, %float64_is_signaling_nan.exit.i.i ], [ %float_exception_flags.0, %80 ], [ %float_exception_flags.0, %104 ], [ %float_exception_flags.0., %roundAndPackFloat64.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__71_24) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_float_exception_flags4 = main_71_72;
	end
	/* main: %float64_mul.exit*/
	/*   %float_exception_flags.4 = phi i32 [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i11.i ], [ %42, %41 ], [ %float_exception_flags.0, %43 ], [ %72, %71 ], [ %float_exception_flags.0, %73 ], [ %.float_exception_flags.05, %float64_is_signaling_nan.exit.i.i ], [ %float_exception_flags.0, %80 ], [ %float_exception_flags.0, %104 ], [ %float_exception_flags.0., %roundAndPackFloat64.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__73_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_float_exception_flags4 = main_1_float_exception_flags0_reg;
	end
	/* main: %float64_mul.exit*/
	/*   %float_exception_flags.4 = phi i32 [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i11.i ], [ %42, %41 ], [ %float_exception_flags.0, %43 ], [ %72, %71 ], [ %float_exception_flags.0, %73 ], [ %.float_exception_flags.05, %float64_is_signaling_nan.exit.i.i ], [ %float_exception_flags.0, %80 ], [ %float_exception_flags.0, %104 ], [ %float_exception_flags.0., %roundAndPackFloat64.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__80_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_float_exception_flags4 = main_1_float_exception_flags0_reg;
	end
	/* main: %float64_mul.exit*/
	/*   %float_exception_flags.4 = phi i32 [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i11.i ], [ %42, %41 ], [ %float_exception_flags.0, %43 ], [ %72, %71 ], [ %float_exception_flags.0, %73 ], [ %.float_exception_flags.05, %float64_is_signaling_nan.exit.i.i ], [ %float_exception_flags.0, %80 ], [ %float_exception_flags.0, %104 ], [ %float_exception_flags.0., %roundAndPackFloat64.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__104_36) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_float_exception_flags4 = main_1_float_exception_flags0_reg;
	end
	/* main: %float64_mul.exit*/
	/*   %float_exception_flags.4 = phi i32 [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i11.i ], [ %42, %41 ], [ %float_exception_flags.0, %43 ], [ %72, %71 ], [ %float_exception_flags.0, %73 ], [ %.float_exception_flags.05, %float64_is_signaling_nan.exit.i.i ], [ %float_exception_flags.0, %80 ], [ %float_exception_flags.0, %104 ], [ %float_exception_flags.0., %roundAndPackFloat64.exit.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_46) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_mulexit_float_exception_flags4 = main_roundAndPackFloat64exiti_float_exception_flags0;
	end
end
always @(posedge clk) begin
	/* main: %float64_mul.exit*/
	/*   %float_exception_flags.4 = phi i32 [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i11.i ], [ %42, %41 ], [ %float_exception_flags.0, %43 ], [ %72, %71 ], [ %float_exception_flags.0, %73 ], [ %.float_exception_flags.05, %float64_is_signaling_nan.exit.i.i ], [ %float_exception_flags.0, %80 ], [ %float_exception_flags.0, %104 ], [ %float_exception_flags.0., %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti11i_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_float_exception_flags4_reg <= main_float64_mulexit_float_exception_flags4;
		if (start == 1'b0 && ^(main_float64_mulexit_float_exception_flags4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_float_exception_flags4_reg"); $finish; end
	end
	/* main: %float64_mul.exit*/
	/*   %float_exception_flags.4 = phi i32 [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i11.i ], [ %42, %41 ], [ %float_exception_flags.0, %43 ], [ %72, %71 ], [ %float_exception_flags.0, %73 ], [ %.float_exception_flags.05, %float64_is_signaling_nan.exit.i.i ], [ %float_exception_flags.0, %80 ], [ %float_exception_flags.0, %104 ], [ %float_exception_flags.0., %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__41_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_float_exception_flags4_reg <= main_float64_mulexit_float_exception_flags4;
		if (start == 1'b0 && ^(main_float64_mulexit_float_exception_flags4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_float_exception_flags4_reg"); $finish; end
	end
	/* main: %float64_mul.exit*/
	/*   %float_exception_flags.4 = phi i32 [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i11.i ], [ %42, %41 ], [ %float_exception_flags.0, %43 ], [ %72, %71 ], [ %float_exception_flags.0, %73 ], [ %.float_exception_flags.05, %float64_is_signaling_nan.exit.i.i ], [ %float_exception_flags.0, %80 ], [ %float_exception_flags.0, %104 ], [ %float_exception_flags.0., %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__43_14) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_float_exception_flags4_reg <= main_float64_mulexit_float_exception_flags4;
		if (start == 1'b0 && ^(main_float64_mulexit_float_exception_flags4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_float_exception_flags4_reg"); $finish; end
	end
	/* main: %float64_mul.exit*/
	/*   %float_exception_flags.4 = phi i32 [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i11.i ], [ %42, %41 ], [ %float_exception_flags.0, %43 ], [ %72, %71 ], [ %float_exception_flags.0, %73 ], [ %.float_exception_flags.05, %float64_is_signaling_nan.exit.i.i ], [ %float_exception_flags.0, %80 ], [ %float_exception_flags.0, %104 ], [ %float_exception_flags.0., %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_float_exception_flags4_reg <= main_float64_mulexit_float_exception_flags4;
		if (start == 1'b0 && ^(main_float64_mulexit_float_exception_flags4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_float_exception_flags4_reg"); $finish; end
	end
	/* main: %float64_mul.exit*/
	/*   %float_exception_flags.4 = phi i32 [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i11.i ], [ %42, %41 ], [ %float_exception_flags.0, %43 ], [ %72, %71 ], [ %float_exception_flags.0, %73 ], [ %.float_exception_flags.05, %float64_is_signaling_nan.exit.i.i ], [ %float_exception_flags.0, %80 ], [ %float_exception_flags.0, %104 ], [ %float_exception_flags.0., %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__71_24) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_float_exception_flags4_reg <= main_float64_mulexit_float_exception_flags4;
		if (start == 1'b0 && ^(main_float64_mulexit_float_exception_flags4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_float_exception_flags4_reg"); $finish; end
	end
	/* main: %float64_mul.exit*/
	/*   %float_exception_flags.4 = phi i32 [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i11.i ], [ %42, %41 ], [ %float_exception_flags.0, %43 ], [ %72, %71 ], [ %float_exception_flags.0, %73 ], [ %.float_exception_flags.05, %float64_is_signaling_nan.exit.i.i ], [ %float_exception_flags.0, %80 ], [ %float_exception_flags.0, %104 ], [ %float_exception_flags.0., %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__73_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_float_exception_flags4_reg <= main_float64_mulexit_float_exception_flags4;
		if (start == 1'b0 && ^(main_float64_mulexit_float_exception_flags4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_float_exception_flags4_reg"); $finish; end
	end
	/* main: %float64_mul.exit*/
	/*   %float_exception_flags.4 = phi i32 [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i11.i ], [ %42, %41 ], [ %float_exception_flags.0, %43 ], [ %72, %71 ], [ %float_exception_flags.0, %73 ], [ %.float_exception_flags.05, %float64_is_signaling_nan.exit.i.i ], [ %float_exception_flags.0, %80 ], [ %float_exception_flags.0, %104 ], [ %float_exception_flags.0., %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__80_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_float_exception_flags4_reg <= main_float64_mulexit_float_exception_flags4;
		if (start == 1'b0 && ^(main_float64_mulexit_float_exception_flags4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_float_exception_flags4_reg"); $finish; end
	end
	/* main: %float64_mul.exit*/
	/*   %float_exception_flags.4 = phi i32 [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i11.i ], [ %42, %41 ], [ %float_exception_flags.0, %43 ], [ %72, %71 ], [ %float_exception_flags.0, %73 ], [ %.float_exception_flags.05, %float64_is_signaling_nan.exit.i.i ], [ %float_exception_flags.0, %80 ], [ %float_exception_flags.0, %104 ], [ %float_exception_flags.0., %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__104_36) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_float_exception_flags4_reg <= main_float64_mulexit_float_exception_flags4;
		if (start == 1'b0 && ^(main_float64_mulexit_float_exception_flags4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_float_exception_flags4_reg"); $finish; end
	end
	/* main: %float64_mul.exit*/
	/*   %float_exception_flags.4 = phi i32 [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i11.i ], [ %42, %41 ], [ %float_exception_flags.0, %43 ], [ %72, %71 ], [ %float_exception_flags.0, %73 ], [ %.float_exception_flags.05, %float64_is_signaling_nan.exit.i.i ], [ %float_exception_flags.0, %80 ], [ %float_exception_flags.0, %104 ], [ %float_exception_flags.0., %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_float_exception_flags4_reg <= main_float64_mulexit_float_exception_flags4;
		if (start == 1'b0 && ^(main_float64_mulexit_float_exception_flags4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_float_exception_flags4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_mul.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit.i11.i ], [ 9223372036854775807, %41 ], [ %45, %43 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ 9223372036854775807, %71 ], [ %75, %73 ], [ %81, %80 ], [ %105, %104 ], [ %162, %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti11i_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_0i = main_float64_is_signaling_nanexiti11i_mux2i15i;
	end
	/* main: %float64_mul.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit.i11.i ], [ 9223372036854775807, %41 ], [ %45, %43 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ 9223372036854775807, %71 ], [ %75, %73 ], [ %81, %80 ], [ %105, %104 ], [ %162, %roundAndPackFloat64.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__41_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_0i = 64'd9223372036854775807;
	end
	/* main: %float64_mul.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit.i11.i ], [ 9223372036854775807, %41 ], [ %45, %43 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ 9223372036854775807, %71 ], [ %75, %73 ], [ %81, %80 ], [ %105, %104 ], [ %162, %roundAndPackFloat64.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__43_14) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_0i = main_43_45;
	end
	/* main: %float64_mul.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit.i11.i ], [ 9223372036854775807, %41 ], [ %45, %43 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ 9223372036854775807, %71 ], [ %75, %73 ], [ %81, %80 ], [ %105, %104 ], [ %162, %roundAndPackFloat64.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_0i = main_float64_is_signaling_nanexitii_mux2ii;
	end
	/* main: %float64_mul.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit.i11.i ], [ 9223372036854775807, %41 ], [ %45, %43 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ 9223372036854775807, %71 ], [ %75, %73 ], [ %81, %80 ], [ %105, %104 ], [ %162, %roundAndPackFloat64.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__71_24) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_0i = 64'd9223372036854775807;
	end
	/* main: %float64_mul.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit.i11.i ], [ 9223372036854775807, %41 ], [ %45, %43 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ 9223372036854775807, %71 ], [ %75, %73 ], [ %81, %80 ], [ %105, %104 ], [ %162, %roundAndPackFloat64.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__73_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_0i = main_73_75;
	end
	/* main: %float64_mul.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit.i11.i ], [ 9223372036854775807, %41 ], [ %45, %43 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ 9223372036854775807, %71 ], [ %75, %73 ], [ %81, %80 ], [ %105, %104 ], [ %162, %roundAndPackFloat64.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__80_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_0i = main_80_81;
	end
	/* main: %float64_mul.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit.i11.i ], [ 9223372036854775807, %41 ], [ %45, %43 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ 9223372036854775807, %71 ], [ %75, %73 ], [ %81, %80 ], [ %105, %104 ], [ %162, %roundAndPackFloat64.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__104_36) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_0i = main_104_105;
	end
	/* main: %float64_mul.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit.i11.i ], [ 9223372036854775807, %41 ], [ %45, %43 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ 9223372036854775807, %71 ], [ %75, %73 ], [ %81, %80 ], [ %105, %104 ], [ %162, %roundAndPackFloat64.exit.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_46) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_mulexit_0i = main_roundAndPackFloat64exiti_162;
	end
end
always @(posedge clk) begin
	/* main: %float64_mul.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit.i11.i ], [ 9223372036854775807, %41 ], [ %45, %43 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ 9223372036854775807, %71 ], [ %75, %73 ], [ %81, %80 ], [ %105, %104 ], [ %162, %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti11i_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_0i_reg <= main_float64_mulexit_0i;
		if (start == 1'b0 && ^(main_float64_mulexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_0i_reg"); $finish; end
	end
	/* main: %float64_mul.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit.i11.i ], [ 9223372036854775807, %41 ], [ %45, %43 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ 9223372036854775807, %71 ], [ %75, %73 ], [ %81, %80 ], [ %105, %104 ], [ %162, %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__41_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_0i_reg <= main_float64_mulexit_0i;
		if (start == 1'b0 && ^(main_float64_mulexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_0i_reg"); $finish; end
	end
	/* main: %float64_mul.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit.i11.i ], [ 9223372036854775807, %41 ], [ %45, %43 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ 9223372036854775807, %71 ], [ %75, %73 ], [ %81, %80 ], [ %105, %104 ], [ %162, %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__43_14) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_0i_reg <= main_float64_mulexit_0i;
		if (start == 1'b0 && ^(main_float64_mulexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_0i_reg"); $finish; end
	end
	/* main: %float64_mul.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit.i11.i ], [ 9223372036854775807, %41 ], [ %45, %43 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ 9223372036854775807, %71 ], [ %75, %73 ], [ %81, %80 ], [ %105, %104 ], [ %162, %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_0i_reg <= main_float64_mulexit_0i;
		if (start == 1'b0 && ^(main_float64_mulexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_0i_reg"); $finish; end
	end
	/* main: %float64_mul.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit.i11.i ], [ 9223372036854775807, %41 ], [ %45, %43 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ 9223372036854775807, %71 ], [ %75, %73 ], [ %81, %80 ], [ %105, %104 ], [ %162, %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__71_24) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_0i_reg <= main_float64_mulexit_0i;
		if (start == 1'b0 && ^(main_float64_mulexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_0i_reg"); $finish; end
	end
	/* main: %float64_mul.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit.i11.i ], [ 9223372036854775807, %41 ], [ %45, %43 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ 9223372036854775807, %71 ], [ %75, %73 ], [ %81, %80 ], [ %105, %104 ], [ %162, %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__73_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_0i_reg <= main_float64_mulexit_0i;
		if (start == 1'b0 && ^(main_float64_mulexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_0i_reg"); $finish; end
	end
	/* main: %float64_mul.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit.i11.i ], [ 9223372036854775807, %41 ], [ %45, %43 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ 9223372036854775807, %71 ], [ %75, %73 ], [ %81, %80 ], [ %105, %104 ], [ %162, %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__80_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_0i_reg <= main_float64_mulexit_0i;
		if (start == 1'b0 && ^(main_float64_mulexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_0i_reg"); $finish; end
	end
	/* main: %float64_mul.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit.i11.i ], [ 9223372036854775807, %41 ], [ %45, %43 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ 9223372036854775807, %71 ], [ %75, %73 ], [ %81, %80 ], [ %105, %104 ], [ %162, %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__104_36) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_0i_reg <= main_float64_mulexit_0i;
		if (start == 1'b0 && ^(main_float64_mulexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_0i_reg"); $finish; end
	end
	/* main: %float64_mul.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit.i11.i ], [ 9223372036854775807, %41 ], [ %45, %43 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ 9223372036854775807, %71 ], [ %75, %73 ], [ %81, %80 ], [ %105, %104 ], [ %162, %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_mulexit_0i_reg <= main_float64_mulexit_0i;
		if (start == 1'b0 && ^(main_float64_mulexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_mul.exit*/
	/*   %gep_int10 = ptrtoint [20 x i64]* @z_output to i32*/
if (reset) begin main_float64_mulexit_gep_int10 = 0; end
		main_float64_mulexit_gep_int10 = 1'd0;
end
always @(posedge clk) begin
	/* main: %float64_mul.exit*/
	/*   %gep_int10 = ptrtoint [20 x i64]* @z_output to i32*/
	if ((cur_state == LEGUP_F_main_BB_float64_mulexit_47)) begin
		main_float64_mulexit_gep_int10_reg <= main_float64_mulexit_gep_int10;
		if (start == 1'b0 && ^(main_float64_mulexit_gep_int10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_gep_int10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_mul.exit*/
	/*   %gep_array11 = mul i32 %i.01, 8*/
		main_float64_mulexit_gep_array11 = (main_1_i01_reg * 32'd8);
end
always @(posedge clk) begin
	/* main: %float64_mul.exit*/
	/*   %gep_array11 = mul i32 %i.01, 8*/
	if ((cur_state == LEGUP_F_main_BB_float64_mulexit_47)) begin
		main_float64_mulexit_gep_array11_reg <= main_float64_mulexit_gep_array11;
		if (start == 1'b0 && ^(main_float64_mulexit_gep_array11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_gep_array11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_mul.exit*/
	/*   %gep12 = add i32 %gep_int10, %gep_array11*/
		main_float64_mulexit_gep12 = main_signed_add_32_0;
end
always @(*) begin
/* main: %float64_mul.exit*/
/*   %gep12 = add i32 %gep_int10, %gep_array11*/
	main_float64_mulexit_gep12_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %float64_mul.exit*/
	/*   %163 = inttoptr i32 %gep12 to i64**/
		main_float64_mulexit_163 = main_float64_mulexit_gep12;
end
always @(posedge clk) begin
	/* main: %float64_mul.exit*/
	/*   %163 = inttoptr i32 %gep12 to i64**/
	if ((cur_state == LEGUP_F_main_BB_float64_mulexit_48)) begin
		main_float64_mulexit_163_reg <= main_float64_mulexit_163;
		if (start == 1'b0 && ^(main_float64_mulexit_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_mul.exit*/
	/*   %164 = load i64* %163, align 8, !tbaa !1*/
		main_float64_mulexit_164 = z_output_out_a;
end
always @(posedge clk) begin
	/* main: %float64_mul.exit*/
	/*   %164 = load i64* %163, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_float64_mulexit_49)) begin
		main_float64_mulexit_164_reg <= main_float64_mulexit_164;
		if (start == 1'b0 && ^(main_float64_mulexit_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_164_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_mul.exit*/
	/*   %165 = icmp eq i64 %.0.i, %164*/
		main_float64_mulexit_165 = (main_float64_mulexit_0i_reg == main_float64_mulexit_164);
end
always @(posedge clk) begin
	/* main: %float64_mul.exit*/
	/*   %165 = icmp eq i64 %.0.i, %164*/
	if ((cur_state == LEGUP_F_main_BB_float64_mulexit_49)) begin
		main_float64_mulexit_165_reg <= main_float64_mulexit_165;
		if (start == 1'b0 && ^(main_float64_mulexit_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_mul.exit*/
	/*   %166 = zext i1 %165 to i32*/
		main_float64_mulexit_166 = main_float64_mulexit_165;
end
always @(posedge clk) begin
	/* main: %float64_mul.exit*/
	/*   %166 = zext i1 %165 to i32*/
	if ((cur_state == LEGUP_F_main_BB_float64_mulexit_49)) begin
		main_float64_mulexit_166_reg <= main_float64_mulexit_166;
		if (start == 1'b0 && ^(main_float64_mulexit_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_166_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_mul.exit*/
	/*   %167 = add nsw i32 %166, %main_result.02*/
		main_float64_mulexit_167 = main_signed_add_32_0;
end
always @(*) begin
/* main: %float64_mul.exit*/
/*   %167 = add nsw i32 %166, %main_result.02*/
	main_float64_mulexit_167_reg = main_normalizeFloat64Subnormalexiti_119_reg;
end
always @(*) begin
	/* main: %float64_mul.exit*/
	/*   %169 = add nsw i32 %i.01, 1*/
		main_float64_mulexit_169 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %float64_mul.exit*/
	/*   %169 = add nsw i32 %i.01, 1*/
	if ((cur_state == LEGUP_F_main_BB_float64_mulexit_47)) begin
		main_float64_mulexit_169_reg <= main_float64_mulexit_169;
		if (start == 1'b0 && ^(main_float64_mulexit_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_mul.exit*/
	/*   %exitcond = icmp eq i32 %169, 20*/
		main_float64_mulexit_exitcond = (main_float64_mulexit_169 == 32'd20);
end
always @(posedge clk) begin
	/* main: %float64_mul.exit*/
	/*   %exitcond = icmp eq i32 %169, 20*/
	if ((cur_state == LEGUP_F_main_BB_float64_mulexit_47)) begin
		main_float64_mulexit_exitcond_reg <= main_float64_mulexit_exitcond;
		if (start == 1'b0 && ^(main_float64_mulexit_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_mulexit_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %170*/
	/*   %.lcssa = phi i32 [ %167, %float64_mul.exit ]*/
		main_170_lcssa = main_float64_mulexit_167;
end
always @(posedge clk) begin
	/* main: %170*/
	/*   %.lcssa = phi i32 [ %167, %float64_mul.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_mulexit_49) & (memory_controller_waitrequest == 1'd0)) & (main_float64_mulexit_exitcond_reg == 1'd1))) begin
		main_170_lcssa_reg <= main_170_lcssa;
		if (start == 1'b0 && ^(main_170_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_170_lcssa_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %170*/
	/*   %172 = icmp eq i32 %.lcssa, 20*/
		main_170_172 = (main_170_lcssa_reg == 32'd20);
end
always @(posedge clk) begin
	/* main: %170*/
	/*   %172 = icmp eq i32 %.lcssa, 20*/
	if ((cur_state == LEGUP_F_main_BB__170_50)) begin
		main_170_172_reg <= main_170_172;
		if (start == 1'b0 && ^(main_170_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_170_172_reg"); $finish; end
	end
end
always @(*) begin
	a_input_address_a = 1'd0;
	/* main: %1*/
	/*   %3 = load i64* %2, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		a_input_address_a = (main_1_2 >>> 3'd3);
	end
end
always @(*) begin
	a_input_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %3 = load i64* %2, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		a_input_write_enable_a = 1'd0;
	end
end
always @(*) begin
	b_input_address_a = 1'd0;
	/* main: %1*/
	/*   %5 = load i64* %4, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		b_input_address_a = (main_1_4 >>> 3'd3);
	end
end
always @(*) begin
	b_input_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %5 = load i64* %4, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		b_input_write_enable_a = 1'd0;
	end
end
always @(*) begin
	z_output_address_a = 1'd0;
	/* main: %float64_mul.exit*/
	/*   %164 = load i64* %163, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_float64_mulexit_48)) begin
		z_output_address_a = (main_float64_mulexit_163 >>> 3'd3);
	end
end
always @(*) begin
	z_output_write_enable_a = 1'd0;
	/* main: %float64_mul.exit*/
	/*   %164 = load i64* %163, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_float64_mulexit_48)) begin
		z_output_write_enable_a = 1'd0;
	end
end
always @(*) begin
	countLeadingZeros32countLeadingZerosHigh_address_a = 1'd0;
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %93 = load i32* %92, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_32)) begin
		countLeadingZeros32countLeadingZerosHigh_address_a = (main_normalizeFloat64Subnormalexit9i_92 >>> 3'd2);
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %117 = load i32* %116, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_40)) begin
		countLeadingZeros32countLeadingZerosHigh_address_a = (main_normalizeFloat64Subnormalexiti_116 >>> 3'd2);
	end
end
always @(*) begin
	countLeadingZeros32countLeadingZerosHigh_write_enable_a = 1'd0;
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %93 = load i32* %92, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_32)) begin
		countLeadingZeros32countLeadingZerosHigh_write_enable_a = 1'd0;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %117 = load i32* %116, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_40)) begin
		countLeadingZeros32countLeadingZerosHigh_write_enable_a = 1'd0;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_signed_add_32_0_op0 = main_1_gep_int_reg;
	end
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %95 = add nsw i32 %94, %shiftCount.1.i.i.i8.i*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_31)) begin
		main_signed_add_32_0_op0 = main_normalizeFloat64Subnormalexit9i_94;
	end
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %gep6 = add i32 %gep_int4, %gep_array5*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_32)) begin
		main_signed_add_32_0_op0 = main_normalizeFloat64Subnormalexit9i_gep_int4_reg;
	end
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %96 = add i32 %95, %93*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_33)) begin
		main_signed_add_32_0_op0 = main_normalizeFloat64Subnormalexit9i_95_reg;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %119 = add nsw i32 %118, %shiftCount.1.i.i.i.i*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_39)) begin
		main_signed_add_32_0_op0 = main_normalizeFloat64Subnormalexiti_118;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %gep9 = add i32 %gep_int7, %gep_array8*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_40)) begin
		main_signed_add_32_0_op0 = main_normalizeFloat64Subnormalexiti_gep_int7_reg;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %120 = add i32 %119, %117*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_41)) begin
		main_signed_add_32_0_op0 = main_normalizeFloat64Subnormalexiti_119_reg;
	end
	/* main: %float64_mul.exit*/
	/*   %169 = add nsw i32 %i.01, 1*/
	else if ((cur_state == LEGUP_F_main_BB_float64_mulexit_47)) begin
		main_signed_add_32_0_op0 = main_1_i01_reg;
	end
	/* main: %float64_mul.exit*/
	/*   %gep12 = add i32 %gep_int10, %gep_array11*/
	else if ((cur_state == LEGUP_F_main_BB_float64_mulexit_48)) begin
		main_signed_add_32_0_op0 = main_float64_mulexit_gep_int10_reg;
	end
	/* main: %float64_mul.exit*/
	/*   %167 = add nsw i32 %166, %main_result.02*/
	else /* if ((cur_state == LEGUP_F_main_BB_float64_mulexit_49)) */ begin
		main_signed_add_32_0_op0 = main_float64_mulexit_166;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_signed_add_32_0_op1 = main_1_gep_array_reg;
	end
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %95 = add nsw i32 %94, %shiftCount.1.i.i.i8.i*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_31)) begin
		main_signed_add_32_0_op1 = main_normalizeFloat64Subnormalexit9i_shiftCount1iii8i_reg;
	end
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %gep6 = add i32 %gep_int4, %gep_array5*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_32)) begin
		main_signed_add_32_0_op1 = main_normalizeFloat64Subnormalexit9i_gep_array5_reg;
	end
	/* main: %normalizeFloat64Subnormal.exit9.i*/
	/*   %96 = add i32 %95, %93*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9i_33)) begin
		main_signed_add_32_0_op1 = main_normalizeFloat64Subnormalexit9i_93;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %119 = add nsw i32 %118, %shiftCount.1.i.i.i.i*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_39)) begin
		main_signed_add_32_0_op1 = main_normalizeFloat64Subnormalexiti_shiftCount1iiii_reg;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %gep9 = add i32 %gep_int7, %gep_array8*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_40)) begin
		main_signed_add_32_0_op1 = main_normalizeFloat64Subnormalexiti_gep_array8_reg;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %120 = add i32 %119, %117*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_41)) begin
		main_signed_add_32_0_op1 = main_normalizeFloat64Subnormalexiti_117;
	end
	/* main: %float64_mul.exit*/
	/*   %169 = add nsw i32 %i.01, 1*/
	else if ((cur_state == LEGUP_F_main_BB_float64_mulexit_47)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %float64_mul.exit*/
	/*   %gep12 = add i32 %gep_int10, %gep_array11*/
	else if ((cur_state == LEGUP_F_main_BB_float64_mulexit_48)) begin
		main_signed_add_32_0_op1 = main_float64_mulexit_gep_array11_reg;
	end
	/* main: %float64_mul.exit*/
	/*   %167 = add nsw i32 %166, %main_result.02*/
	else /* if ((cur_state == LEGUP_F_main_BB_float64_mulexit_49)) */ begin
		main_signed_add_32_0_op1 = main_1_main_result02_reg;
	end
end
always @(*) begin
	main_signed_add_32_0 = (main_signed_add_32_0_op0 + main_signed_add_32_0_op1);
end
always @(*) begin
	/* main: %1*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
		main_signed_add_32_1_op0 = main_1_gep_int1_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
		main_signed_add_32_1_op1 = main_1_gep_array2_reg;
end
always @(*) begin
	main_signed_add_32_1 = (main_signed_add_32_1_op0 + main_signed_add_32_1_op1);
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %134 = mul i64 %133, %132*/
		main_signed_multiply_64_0_op0 = main_roundAndPackFloat64exiti_133;
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %134 = mul i64 %133, %132*/
		main_signed_multiply_64_0_op1 = main_roundAndPackFloat64exiti_132;
end
always @(*) begin
	lpm_mult_main_roundAndPackFloat64exiti_134_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %134 = mul i64 %133, %132*/
	if ((lpm_mult_main_roundAndPackFloat64exiti_134_en == 1'd1)) begin
		main_roundAndPackFloat64exiti_134_stage0_reg <= (main_signed_multiply_64_0_op0 * main_signed_multiply_64_0_op1);
	end
end
always @(*) begin
	main_signed_multiply_64_0 = main_roundAndPackFloat64exiti_134_stage0_reg;
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %135 = mul i64 %131, %132*/
		main_signed_multiply_64_1_op0 = main_roundAndPackFloat64exiti_131;
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %135 = mul i64 %131, %132*/
		main_signed_multiply_64_1_op1 = main_roundAndPackFloat64exiti_132;
end
always @(*) begin
	lpm_mult_main_roundAndPackFloat64exiti_135_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %135 = mul i64 %131, %132*/
	if ((lpm_mult_main_roundAndPackFloat64exiti_135_en == 1'd1)) begin
		main_roundAndPackFloat64exiti_135_stage0_reg <= (main_signed_multiply_64_1_op0 * main_signed_multiply_64_1_op1);
	end
end
always @(*) begin
	main_signed_multiply_64_1 = main_roundAndPackFloat64exiti_135_stage0_reg;
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %136 = mul i64 %133, %128*/
		main_signed_multiply_64_2_op0 = main_roundAndPackFloat64exiti_133;
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %136 = mul i64 %133, %128*/
		main_signed_multiply_64_2_op1 = main_roundAndPackFloat64exiti_128;
end
always @(*) begin
	lpm_mult_main_roundAndPackFloat64exiti_136_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %136 = mul i64 %133, %128*/
	if ((lpm_mult_main_roundAndPackFloat64exiti_136_en == 1'd1)) begin
		main_roundAndPackFloat64exiti_136_stage0_reg <= (main_signed_multiply_64_2_op0 * main_signed_multiply_64_2_op1);
	end
end
always @(*) begin
	main_signed_multiply_64_2 = main_roundAndPackFloat64exiti_136_stage0_reg;
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %137 = mul i64 %131, %128*/
		main_signed_multiply_64_3_op0 = main_roundAndPackFloat64exiti_131;
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %137 = mul i64 %131, %128*/
		main_signed_multiply_64_3_op1 = main_roundAndPackFloat64exiti_128;
end
always @(*) begin
	lpm_mult_main_roundAndPackFloat64exiti_137_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %137 = mul i64 %131, %128*/
	if ((lpm_mult_main_roundAndPackFloat64exiti_137_en == 1'd1)) begin
		main_roundAndPackFloat64exiti_137_stage0_reg <= (main_signed_multiply_64_3_op0 * main_signed_multiply_64_3_op1);
	end
end
always @(*) begin
	main_signed_multiply_64_3 = main_roundAndPackFloat64exiti_137_stage0_reg;
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %144 = add i64 %143, %137*/
		main_signed_add_64_0_op0 = main_roundAndPackFloat64exiti_143_reg;
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %144 = add i64 %143, %137*/
		main_signed_add_64_0_op1 = main_roundAndPackFloat64exiti_137_reg;
end
always @(*) begin
	main_signed_add_64_0 = (main_signed_add_64_0_op0 + main_signed_add_64_0_op1);
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %145 = add i64 %144, %141*/
		main_signed_add_64_1_op0 = main_roundAndPackFloat64exiti_144;
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %145 = add i64 %144, %141*/
		main_signed_add_64_1_op1 = main_roundAndPackFloat64exiti_141_reg;
end
always @(*) begin
	main_signed_add_64_1 = (main_signed_add_64_1_op0 + main_signed_add_64_1_op1);
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %154 = add i64 512, %..i*/
if (reset) begin main_signed_add_64_2_op0 = 0; end
		main_signed_add_64_2_op0 = 64'd512;
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %154 = add i64 512, %..i*/
		main_signed_add_64_2_op1 = main_roundAndPackFloat64exiti_i;
end
always @(*) begin
	main_signed_add_64_2 = (main_signed_add_64_2_op0 + main_signed_add_64_2_op1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %177*/
	/*   ret i32 %.lcssa*/
	if ((cur_state == LEGUP_F_main_BB__177_53)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %177*/
	/*   ret i32 %.lcssa*/
	if ((cur_state == LEGUP_F_main_BB__177_53)) begin
		return_val <= main_170_lcssa_reg;
		if (start == 1'b0 && ^(main_170_lcssa_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 

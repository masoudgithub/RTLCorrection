//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Tue Jun 18 03:11:52 2019
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sun Jun 23 13:47:14 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 10
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @Sbox = internal unnamed_addr constant [16 x [16 x i32]] [[16 x i32] [i32 99, i32 124, i32 119, i32 123, i32 242, i32 107, i32 111, i32 197, i32 48, i32 1, i32 103, i32 43, i32 254, i32 215, i32 171, ...
`define TAG_g_Sbox `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_Sbox_a {`TAG_g_Sbox, 23'd0}
// @key = internal global [32 x i32] zeroinitializer, align 4
`define TAG_g_key `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_key_a {`TAG_g_key, 23'd2048}
// @statemt = internal global [32 x i32] zeroinitializer, align 4
`define TAG_g_statemt `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_statemt_a {`TAG_g_statemt, 23'd1920}
// @word = internal unnamed_addr global [4 x [120 x i32]] zeroinitializer, align 4
`define TAG_g_word `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_word_a {`TAG_g_word, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [7:0] rom_32_address_a;
reg [7:0] rom_32_address_b;
reg rom_32_write_enable_a;
reg rom_32_write_enable_b;
reg [31:0] rom_32_in_a;
reg [31:0] rom_32_in_b;
wire [31:0] rom_32_out_a;
wire [31:0] rom_32_out_b;

// @Sbox = internal unnamed_addr constant [16 x [16 x i32]] [[16 x i32] [i32 99, i32 124, i32 119, i32 123, i32 242, i32 107, i32 111, i32 197, i32 48, i32 1, i32 103, i32 43, i32 254, i32 215, i32 171, ...
rom_dual_port rom_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( rom_32_address_a ),
	.address_b( rom_32_address_b ),
	.q_a( rom_32_out_a ),
	.q_b( rom_32_out_b)
);
defparam rom_32.width_a = 32;
defparam rom_32.width_b = 32;
defparam rom_32.widthad_a = 8;
defparam rom_32.widthad_b = 8;
defparam rom_32.numwords_a = 256;
defparam rom_32.numwords_b = 256;
defparam rom_32.latency = ram_latency;
defparam rom_32.init_file = "rom_32.mif";

reg [9:0] ram_32_address_a;
reg [9:0] ram_32_address_b;
reg ram_32_write_enable_a;
reg ram_32_write_enable_b;
reg [31:0] ram_32_in_a;
reg [31:0] ram_32_in_b;
wire [31:0] ram_32_out_a;
wire [31:0] ram_32_out_b;

// @statemt = internal global [32 x i32] zeroinitializer, align 4
ram_dual_port ram_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_32_address_a ),
	.address_b( ram_32_address_b ),
	.wren_a( ram_32_write_enable_a ),
	.wren_b( ram_32_write_enable_b ),
	.data_a( ram_32_in_a ),
	.data_b( ram_32_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_32_out_a ),
	.q_b( ram_32_out_b)
);
defparam ram_32.width_a = 32;
defparam ram_32.width_b = 32;
defparam ram_32.widthad_a = 10;
defparam ram_32.widthad_b = 10;
defparam ram_32.width_be_a = 1;
defparam ram_32.width_be_b = 1;
defparam ram_32.numwords_a = 544;
defparam ram_32.numwords_b = 544;
defparam ram_32.latency = ram_latency;
defparam ram_32.init_file = "ram_32.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_rom_32_a;
assign select_rom_32_a = (tag_a == 2);
reg [ram_latency:0] select_rom_32_reg_a;
wire [31:0] memory_controller_rom_32_out_a;
assign memory_controller_rom_32_out_a = {32{ select_rom_32_reg_a[ram_latency]}} & rom_32_out_a;

wire select_ram_32_a;
assign select_ram_32_a = (tag_a == 3);
reg [ram_latency:0] select_ram_32_reg_a;
wire [31:0] memory_controller_ram_32_out_a;
assign memory_controller_ram_32_out_a = {32{ select_ram_32_reg_a[ram_latency]}} & ram_32_out_a;

always @(*)
begin
	rom_32_address_a = memory_controller_address_a [8-1+2:2] & {8{select_rom_32_a}};
	rom_32_write_enable_a = memory_controller_write_enable_a & select_rom_32_a;
	rom_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	ram_32_address_a = memory_controller_address_a [10-1+2:2] & {10{select_ram_32_a}};
	ram_32_write_enable_a = memory_controller_write_enable_a & select_ram_32_a;
	ram_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_rom_32_reg_a[ram_latency]}} | {2{select_ram_32_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_rom_32_out_a | memory_controller_ram_32_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
end
always @(*)
begin
select_rom_32_reg_a[0] <= select_rom_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
end

reg [2:0] select_not_struct_b;

wire select_rom_32_b;
assign select_rom_32_b = (tag_b == 2);
reg [ram_latency:0] select_rom_32_reg_b;
wire [31:0] memory_controller_rom_32_out_b;
assign memory_controller_rom_32_out_b = {32{ select_rom_32_reg_b[ram_latency]}} & rom_32_out_b;

wire select_ram_32_b;
assign select_ram_32_b = (tag_b == 3);
reg [ram_latency:0] select_ram_32_reg_b;
wire [31:0] memory_controller_ram_32_out_b;
assign memory_controller_ram_32_out_b = {32{ select_ram_32_reg_b[ram_latency]}} & ram_32_out_b;

always @(*)
begin
	rom_32_address_b = memory_controller_address_b [8-1+2:2] & {8{select_rom_32_b}};
	rom_32_write_enable_b = memory_controller_write_enable_b & select_rom_32_b;
	rom_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	ram_32_address_b = memory_controller_address_b [10-1+2:2] & {10{select_ram_32_b}};
	ram_32_write_enable_b = memory_controller_write_enable_b & select_ram_32_b;
	ram_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_rom_32_reg_b[ram_latency]}} | {2{select_ram_32_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_rom_32_out_b | memory_controller_ram_32_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
end
always @(*)
begin
select_rom_32_reg_b[0] <= select_rom_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [8:0] LEGUP_0 = 9'd0;
parameter [8:0] LEGUP_F_main_BB__0_1 = 9'd1;
parameter [8:0] LEGUP_F_main_BB__0_2 = 9'd2;
parameter [8:0] LEGUP_F_main_BB__0_3 = 9'd3;
parameter [8:0] LEGUP_F_main_BB__0_4 = 9'd4;
parameter [8:0] LEGUP_F_main_BB__0_5 = 9'd5;
parameter [8:0] LEGUP_F_main_BB__0_6 = 9'd6;
parameter [8:0] LEGUP_F_main_BB__0_7 = 9'd7;
parameter [8:0] LEGUP_F_main_BB__0_8 = 9'd8;
parameter [8:0] LEGUP_F_main_BB__0_9 = 9'd9;
parameter [8:0] LEGUP_F_main_BB__0_10 = 9'd10;
parameter [8:0] LEGUP_F_main_BB__0_11 = 9'd11;
parameter [8:0] LEGUP_F_main_BB__0_12 = 9'd12;
parameter [8:0] LEGUP_F_main_BB__0_13 = 9'd13;
parameter [8:0] LEGUP_F_main_BB__0_14 = 9'd14;
parameter [8:0] LEGUP_F_main_BB__0_15 = 9'd15;
parameter [8:0] LEGUP_F_main_BB__0_16 = 9'd16;
parameter [8:0] LEGUP_F_main_BB__0_17 = 9'd17;
parameter [8:0] LEGUP_F_main_BB__0_19 = 9'd19;
parameter [8:0] LEGUP_F_main_BB__2_20 = 9'd20;
parameter [8:0] LEGUP_F_main_BB__2_21 = 9'd21;
parameter [8:0] LEGUP_F_main_BB__2_22 = 9'd22;
parameter [8:0] LEGUP_F_main_BB__2_23 = 9'd23;
parameter [8:0] LEGUP_F_main_BB__2_24 = 9'd24;
parameter [8:0] LEGUP_F_main_BB__2_25 = 9'd25;
parameter [8:0] LEGUP_F_main_BB__2_26 = 9'd26;
parameter [8:0] LEGUP_F_main_BB__2_27 = 9'd27;
parameter [8:0] LEGUP_F_main_BB__2_28 = 9'd28;
parameter [8:0] LEGUP_F_main_BB__2_29 = 9'd29;
parameter [8:0] LEGUP_F_main_BB__2_30 = 9'd30;
parameter [8:0] LEGUP_F_main_BB__2_31 = 9'd31;
parameter [8:0] LEGUP_F_main_BB__2_32 = 9'd32;
parameter [8:0] LEGUP_F_main_BB__2_33 = 9'd33;
parameter [8:0] LEGUP_F_main_BB_preheaderii_34 = 9'd34;
parameter [8:0] LEGUP_F_main_BB_preheaderii_35 = 9'd35;
parameter [8:0] LEGUP_F_main_BB_preheaderii_36 = 9'd36;
parameter [8:0] LEGUP_F_main_BB_preheaderii_37 = 9'd37;
parameter [8:0] LEGUP_F_main_BB_preheaderii_38 = 9'd38;
parameter [8:0] LEGUP_F_main_BB_preheaderii_39 = 9'd39;
parameter [8:0] LEGUP_F_main_BB_preheaderii_40 = 9'd40;
parameter [8:0] LEGUP_F_main_BB_preheaderii_41 = 9'd41;
parameter [8:0] LEGUP_F_main_BB_preheaderii_42 = 9'd42;
parameter [8:0] LEGUP_F_main_BB_preheaderii_43 = 9'd43;
parameter [8:0] LEGUP_F_main_BB_preheaderii_44 = 9'd44;
parameter [8:0] LEGUP_F_main_BB_preheaderii_45 = 9'd45;
parameter [8:0] LEGUP_F_main_BB_preheaderii_46 = 9'd46;
parameter [8:0] LEGUP_F_main_BB_preheaderii_47 = 9'd47;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_48 = 9'd48;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_49 = 9'd49;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_50 = 9'd50;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_51 = 9'd51;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_52 = 9'd52;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_53 = 9'd53;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_54 = 9'd54;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_55 = 9'd55;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_56 = 9'd56;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_57 = 9'd57;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_58 = 9'd58;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_59 = 9'd59;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_60 = 9'd60;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_61 = 9'd61;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_62 = 9'd62;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_63 = 9'd63;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_64 = 9'd64;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_65 = 9'd65;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_66 = 9'd66;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_67 = 9'd67;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_68 = 9'd68;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_69 = 9'd69;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_70 = 9'd70;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_71 = 9'd71;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_72 = 9'd72;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_73 = 9'd73;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_74 = 9'd74;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_75 = 9'd75;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_76 = 9'd76;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_77 = 9'd77;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_78 = 9'd78;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_79 = 9'd79;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_80 = 9'd80;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_81 = 9'd81;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_82 = 9'd82;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_83 = 9'd83;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_84 = 9'd84;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_85 = 9'd85;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_86 = 9'd86;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_87 = 9'd87;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_88 = 9'd88;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_89 = 9'd89;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_90 = 9'd90;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_91 = 9'd91;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_92 = 9'd92;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_93 = 9'd93;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_95 = 9'd95;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_96 = 9'd96;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_97 = 9'd97;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_98 = 9'd98;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_99 = 9'd99;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_100 = 9'd100;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_101 = 9'd101;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_102 = 9'd102;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_103 = 9'd103;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_104 = 9'd104;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_105 = 9'd105;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_106 = 9'd106;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_107 = 9'd107;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_108 = 9'd108;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_109 = 9'd109;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_110 = 9'd110;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_111 = 9'd111;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_112 = 9'd112;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_113 = 9'd113;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_114 = 9'd114;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_115 = 9'd115;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_116 = 9'd116;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_117 = 9'd117;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_118 = 9'd118;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_119 = 9'd119;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_120 = 9'd120;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_121 = 9'd121;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_122 = 9'd122;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_123 = 9'd123;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_124 = 9'd124;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_125 = 9'd125;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_126 = 9'd126;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_127 = 9'd127;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_128 = 9'd128;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_129 = 9'd129;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_130 = 9'd130;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_131 = 9'd131;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_132 = 9'd132;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_133 = 9'd133;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_134 = 9'd134;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_135 = 9'd135;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_136 = 9'd136;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_137 = 9'd137;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_138 = 9'd138;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139 = 9'd139;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140 = 9'd140;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_141 = 9'd141;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_142 = 9'd142;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_143 = 9'd143;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_144 = 9'd144;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_145 = 9'd145;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_146 = 9'd146;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_147 = 9'd147;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_148 = 9'd148;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_149 = 9'd149;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_150 = 9'd150;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_151 = 9'd151;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_152 = 9'd152;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_153 = 9'd153;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i_154 = 9'd154;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i_155 = 9'd155;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i_156 = 9'd156;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i_157 = 9'd157;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i_158 = 9'd158;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i_159 = 9'd159;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i_160 = 9'd160;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i_161 = 9'd161;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i_162 = 9'd162;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i_163 = 9'd163;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i_164 = 9'd164;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i_165 = 9'd165;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i_166 = 9'd166;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i_167 = 9'd167;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i_168 = 9'd168;
parameter [8:0] LEGUP_F_main_BB_lrphipreheader_169 = 9'd169;
parameter [8:0] LEGUP_F_main_BB_lrphi_170 = 9'd170;
parameter [8:0] LEGUP_F_main_BB_lrphi_171 = 9'd171;
parameter [8:0] LEGUP_F_main_BB_lrphi_172 = 9'd172;
parameter [8:0] LEGUP_F_main_BB_lrphi_173 = 9'd173;
parameter [8:0] LEGUP_F_main_BB__269_174 = 9'd174;
parameter [8:0] LEGUP_F_main_BB__269_175 = 9'd175;
parameter [8:0] LEGUP_F_main_BB__269_176 = 9'd176;
parameter [8:0] LEGUP_F_main_BB__271_177 = 9'd177;
parameter [8:0] LEGUP_F_main_BB_preheaderi_178 = 9'd178;
parameter [8:0] LEGUP_F_main_BB_preheaderi_179 = 9'd179;
parameter [8:0] LEGUP_F_main_BB_preheaderi_180 = 9'd180;
parameter [8:0] LEGUP_F_main_BB_preheaderi_181 = 9'd181;
parameter [8:0] LEGUP_F_main_BB_encryptexit_182 = 9'd182;
parameter [8:0] LEGUP_F_main_BB_encryptexit_184 = 9'd184;
parameter [8:0] LEGUP_F_main_BB__285_185 = 9'd185;
parameter [8:0] LEGUP_F_main_BB__285_186 = 9'd186;
parameter [8:0] LEGUP_F_main_BB__285_187 = 9'd187;
parameter [8:0] LEGUP_F_main_BB__285_188 = 9'd188;
parameter [8:0] LEGUP_F_main_BB__285_189 = 9'd189;
parameter [8:0] LEGUP_F_main_BB__285_190 = 9'd190;
parameter [8:0] LEGUP_F_main_BB__285_191 = 9'd191;
parameter [8:0] LEGUP_F_main_BB__285_192 = 9'd192;
parameter [8:0] LEGUP_F_main_BB__285_193 = 9'd193;
parameter [8:0] LEGUP_F_main_BB__285_194 = 9'd194;
parameter [8:0] LEGUP_F_main_BB__285_195 = 9'd195;
parameter [8:0] LEGUP_F_main_BB__285_196 = 9'd196;
parameter [8:0] LEGUP_F_main_BB__285_197 = 9'd197;
parameter [8:0] LEGUP_F_main_BB__285_198 = 9'd198;
parameter [8:0] LEGUP_F_main_BB__285_199 = 9'd199;
parameter [8:0] LEGUP_F_main_BB_preheaderii4_200 = 9'd200;
parameter [8:0] LEGUP_F_main_BB_preheaderii4_201 = 9'd201;
parameter [8:0] LEGUP_F_main_BB_preheaderii4_202 = 9'd202;
parameter [8:0] LEGUP_F_main_BB_preheaderii4_203 = 9'd203;
parameter [8:0] LEGUP_F_main_BB_preheaderii4_204 = 9'd204;
parameter [8:0] LEGUP_F_main_BB_preheaderii4_205 = 9'd205;
parameter [8:0] LEGUP_F_main_BB_preheaderii4_206 = 9'd206;
parameter [8:0] LEGUP_F_main_BB_preheaderii4_207 = 9'd207;
parameter [8:0] LEGUP_F_main_BB_preheaderii4_208 = 9'd208;
parameter [8:0] LEGUP_F_main_BB_preheaderii4_209 = 9'd209;
parameter [8:0] LEGUP_F_main_BB_preheaderii4_210 = 9'd210;
parameter [8:0] LEGUP_F_main_BB_preheaderii4_211 = 9'd211;
parameter [8:0] LEGUP_F_main_BB_preheaderii4_212 = 9'd212;
parameter [8:0] LEGUP_F_main_BB_preheaderii4_213 = 9'd213;
parameter [8:0] LEGUP_F_main_BB_preheaderii4_214 = 9'd214;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_215 = 9'd215;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_216 = 9'd216;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_217 = 9'd217;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_218 = 9'd218;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_219 = 9'd219;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_220 = 9'd220;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_221 = 9'd221;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_222 = 9'd222;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_223 = 9'd223;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_224 = 9'd224;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_225 = 9'd225;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_226 = 9'd226;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_227 = 9'd227;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_228 = 9'd228;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_229 = 9'd229;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_230 = 9'd230;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_231 = 9'd231;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_232 = 9'd232;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_233 = 9'd233;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_234 = 9'd234;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_235 = 9'd235;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_236 = 9'd236;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_237 = 9'd237;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_238 = 9'd238;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_239 = 9'd239;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_240 = 9'd240;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_241 = 9'd241;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_242 = 9'd242;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_243 = 9'd243;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_244 = 9'd244;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_245 = 9'd245;
parameter [8:0] LEGUP_F_main_BB_lrph12ipreheader_246 = 9'd246;
parameter [8:0] LEGUP_F_main_BB_lrph12i_247 = 9'd247;
parameter [8:0] LEGUP_F_main_BB_lrph12i_249 = 9'd249;
parameter [8:0] LEGUP_F_main_BB_lrph12i_250 = 9'd250;
parameter [8:0] LEGUP_F_main_BB_lrph12i_251 = 9'd251;
parameter [8:0] LEGUP_F_main_BB_lrph12i_252 = 9'd252;
parameter [8:0] LEGUP_F_main_BB_lrph12i_253 = 9'd253;
parameter [8:0] LEGUP_F_main_BB_lrph12i_254 = 9'd254;
parameter [8:0] LEGUP_F_main_BB_lrph12i_255 = 9'd255;
parameter [8:0] LEGUP_F_main_BB_lrph12i_256 = 9'd256;
parameter [8:0] LEGUP_F_main_BB_lrph12i_257 = 9'd257;
parameter [8:0] LEGUP_F_main_BB_lrph12i_258 = 9'd258;
parameter [8:0] LEGUP_F_main_BB_lrph12i_259 = 9'd259;
parameter [8:0] LEGUP_F_main_BB_lrph12i_260 = 9'd260;
parameter [8:0] LEGUP_F_main_BB_lrph12i_261 = 9'd261;
parameter [8:0] LEGUP_F_main_BB_lrph12i_262 = 9'd262;
parameter [8:0] LEGUP_F_main_BB_lrph12i_263 = 9'd263;
parameter [8:0] LEGUP_F_main_BB_lrph12i_264 = 9'd264;
parameter [8:0] LEGUP_F_main_BB_lrph12i_265 = 9'd265;
parameter [8:0] LEGUP_F_main_BB_lrph12i_266 = 9'd266;
parameter [8:0] LEGUP_F_main_BB_lrph12i_267 = 9'd267;
parameter [8:0] LEGUP_F_main_BB_lrph12i_268 = 9'd268;
parameter [8:0] LEGUP_F_main_BB_lrph12i_269 = 9'd269;
parameter [8:0] LEGUP_F_main_BB_lrph12i_270 = 9'd270;
parameter [8:0] LEGUP_F_main_BB_lrph12i_271 = 9'd271;
parameter [8:0] LEGUP_F_main_BB_lrph12i_272 = 9'd272;
parameter [8:0] LEGUP_F_main_BB_lrph12i_273 = 9'd273;
parameter [8:0] LEGUP_F_main_BB_lrph12i_274 = 9'd274;
parameter [8:0] LEGUP_F_main_BB_lrph12i_275 = 9'd275;
parameter [8:0] LEGUP_F_main_BB_lrph12i_276 = 9'd276;
parameter [8:0] LEGUP_F_main_BB_lrph12i_277 = 9'd277;
parameter [8:0] LEGUP_F_main_BB_lrph12i_278 = 9'd278;
parameter [8:0] LEGUP_F_main_BB_lrph12i_279 = 9'd279;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_280 = 9'd280;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_281 = 9'd281;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_282 = 9'd282;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_283 = 9'd283;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_284 = 9'd284;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_285 = 9'd285;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_286 = 9'd286;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_287 = 9'd287;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_288 = 9'd288;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_289 = 9'd289;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_290 = 9'd290;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_291 = 9'd291;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_292 = 9'd292;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_293 = 9'd293;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i14_294 = 9'd294;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i14_295 = 9'd295;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i14_296 = 9'd296;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i14_297 = 9'd297;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i14_298 = 9'd298;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i14_299 = 9'd299;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i14_300 = 9'd300;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i14_301 = 9'd301;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i14_302 = 9'd302;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i14_303 = 9'd303;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i14_304 = 9'd304;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i14_305 = 9'd305;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i14_306 = 9'd306;
parameter [8:0] LEGUP_F_main_BB_preheaderi4i14_307 = 9'd307;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit5i15_308 = 9'd308;
parameter [8:0] LEGUP_F_main_BB_lrphi20_309 = 9'd309;
parameter [8:0] LEGUP_F_main_BB_lrphi20_310 = 9'd310;
parameter [8:0] LEGUP_F_main_BB_lrphi20_311 = 9'd311;
parameter [8:0] LEGUP_F_main_BB_lrphi20_312 = 9'd312;
parameter [8:0] LEGUP_F_main_BB__552_313 = 9'd313;
parameter [8:0] LEGUP_F_main_BB__552_314 = 9'd314;
parameter [8:0] LEGUP_F_main_BB__552_315 = 9'd315;
parameter [8:0] LEGUP_F_main_BB__554_316 = 9'd316;
parameter [8:0] LEGUP_F_main_BB_preheaderloopexiti17_317 = 9'd317;
parameter [8:0] LEGUP_F_main_BB_preheaderloopexiti17_318 = 9'd318;
parameter [8:0] LEGUP_F_main_BB_preheaderloopexiti17_319 = 9'd319;
parameter [8:0] LEGUP_F_main_BB_preheaderloopexiti17_320 = 9'd320;
parameter [8:0] LEGUP_F_main_BB_decryptexit_321 = 9'd321;
parameter [8:0] LEGUP_F_main_BB__569_322 = 9'd322;
parameter [8:0] LEGUP_F_main_BB__571_323 = 9'd323;
parameter [8:0] LEGUP_F_main_BB__573_324 = 9'd324;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [8:0] LEGUP_function_call_18 = 9'd18;
parameter [8:0] LEGUP_function_call_94 = 9'd94;
parameter [8:0] LEGUP_function_call_183 = 9'd183;
parameter [8:0] LEGUP_function_call_248 = 9'd248;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [8:0] cur_state;
reg [8:0] next_state;
reg [31:0] main_2_j02ii;
reg [31:0] main_2_j02ii_reg;
reg [31:0] main_2_gep_int;
reg [31:0] main_2_gep_int_reg;
reg [31:0] main_2_gep_array;
reg [31:0] main_2_gep_array_reg;
reg [31:0] main_2_gep;
reg [31:0] main_2_gep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_3_reg;
reg [31:0] main_2_4;
reg [31:0] main_2_4_reg;
reg [31:0] main_2_5;
reg [31:0] main_2_5_reg;
reg [31:0] main_2_gep_int1;
reg [31:0] main_2_gep_int1_reg;
reg [31:0] main_2_gep_array2;
reg [31:0] main_2_gep_array2_reg;
reg [31:0] main_2_gep3;
reg [31:0] main_2_gep3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_6_reg;
reg [31:0] main_2_7;
reg [31:0] main_2_7_reg;
reg [31:0] main_2_8;
reg [31:0] main_2_8_reg;
reg [31:0] main_2_gep_int4;
reg [31:0] main_2_gep_int4_reg;
reg [31:0] main_2_gep5;
reg [31:0] main_2_gep5_reg;
reg [31:0] main_2_gep_array6;
reg [31:0] main_2_gep_array6_reg;
reg [31:0] main_2_gep7;
reg [31:0] main_2_gep7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_9_reg;
reg [31:0] main_2_10;
reg [31:0] main_2_10_reg;
reg [31:0] main_2_11;
reg [31:0] main_2_11_reg;
reg [31:0] main_2_gep_int8;
reg [31:0] main_2_gep_int8_reg;
reg [31:0] main_2_gep_array9;
reg [31:0] main_2_gep_array9_reg;
reg [31:0] main_2_gep10;
reg [31:0] main_2_gep10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_12_reg;
reg [31:0] main_2_13;
reg [31:0] main_2_13_reg;
reg [31:0] main_2_14;
reg [31:0] main_2_14_reg;
reg [31:0] main_2_gep_int11;
reg [31:0] main_2_gep_int11_reg;
reg [31:0] main_2_gep12;
reg [31:0] main_2_gep12_reg;
reg [31:0] main_2_gep_array13;
reg [31:0] main_2_gep_array13_reg;
reg [31:0] main_2_gep14;
reg [31:0] main_2_gep14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_15_reg;
reg [31:0] main_2_16;
reg [31:0] main_2_16_reg;
reg [31:0] main_2_17;
reg [31:0] main_2_17_reg;
reg [31:0] main_2_gep_int15;
reg [31:0] main_2_gep_int15_reg;
reg [31:0] main_2_gep_array16;
reg [31:0] main_2_gep_array16_reg;
reg [31:0] main_2_gep17;
reg [31:0] main_2_gep17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_18_reg;
reg [31:0] main_2_19;
reg [31:0] main_2_19_reg;
reg [31:0] main_2_20;
reg [31:0] main_2_20_reg;
reg [31:0] main_2_gep_int18;
reg [31:0] main_2_gep_int18_reg;
reg [31:0] main_2_gep19;
reg [31:0] main_2_gep19_reg;
reg [31:0] main_2_gep_array20;
reg [31:0] main_2_gep_array20_reg;
reg [31:0] main_2_gep21;
reg [31:0] main_2_gep21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_21_reg;
reg [31:0] main_2_22;
reg [31:0] main_2_22_reg;
reg [31:0] main_2_23;
reg [31:0] main_2_23_reg;
reg [31:0] main_2_gep_int22;
reg [31:0] main_2_gep_int22_reg;
reg [31:0] main_2_gep_array23;
reg [31:0] main_2_gep_array23_reg;
reg [31:0] main_2_gep24;
reg [31:0] main_2_gep24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_24_reg;
reg [31:0] main_2_25;
reg [31:0] main_2_25_reg;
reg [31:0] main_2_26;
reg [31:0] main_2_26_reg;
reg [31:0] main_2_27;
reg [31:0] main_2_27_reg;
reg  main_2_exitcond40;
reg  main_2_exitcond40_reg;
reg [31:0] main_preheaderii_j11ii;
reg [31:0] main_preheaderii_j11ii_reg;
reg [31:0] main_preheaderii_gep_int25;
reg [31:0] main_preheaderii_gep_int25_reg;
reg [31:0] main_preheaderii_gep_array26;
reg [31:0] main_preheaderii_gep_array26_reg;
reg [31:0] main_preheaderii_gep27;
reg [31:0] main_preheaderii_gep27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_28_reg;
reg [31:0] main_preheaderii_29;
reg [31:0] main_preheaderii_29_reg;
reg [31:0] main_preheaderii_30;
reg [31:0] main_preheaderii_30_reg;
reg [31:0] main_preheaderii_gep_int28;
reg [31:0] main_preheaderii_gep_int28_reg;
reg [31:0] main_preheaderii_gep_array29;
reg [31:0] main_preheaderii_gep_array29_reg;
reg [31:0] main_preheaderii_gep30;
reg [31:0] main_preheaderii_gep30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_31_reg;
reg [31:0] main_preheaderii_32;
reg [31:0] main_preheaderii_32_reg;
reg [31:0] main_preheaderii_33;
reg [31:0] main_preheaderii_33_reg;
reg [31:0] main_preheaderii_gep_int31;
reg [31:0] main_preheaderii_gep_int31_reg;
reg [31:0] main_preheaderii_gep32;
reg [31:0] main_preheaderii_gep32_reg;
reg [31:0] main_preheaderii_gep_array33;
reg [31:0] main_preheaderii_gep_array33_reg;
reg [31:0] main_preheaderii_gep34;
reg [31:0] main_preheaderii_gep34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_34_reg;
reg [31:0] main_preheaderii_35;
reg [31:0] main_preheaderii_35_reg;
reg [31:0] main_preheaderii_36;
reg [31:0] main_preheaderii_36_reg;
reg [31:0] main_preheaderii_gep_int35;
reg [31:0] main_preheaderii_gep_int35_reg;
reg [31:0] main_preheaderii_gep_array36;
reg [31:0] main_preheaderii_gep_array36_reg;
reg [31:0] main_preheaderii_gep37;
reg [31:0] main_preheaderii_gep37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_37_reg;
reg [31:0] main_preheaderii_38;
reg [31:0] main_preheaderii_38_reg;
reg [31:0] main_preheaderii_39;
reg [31:0] main_preheaderii_39_reg;
reg [31:0] main_preheaderii_gep_int38;
reg [31:0] main_preheaderii_gep_int38_reg;
reg [31:0] main_preheaderii_gep39;
reg [31:0] main_preheaderii_gep39_reg;
reg [31:0] main_preheaderii_gep_array40;
reg [31:0] main_preheaderii_gep_array40_reg;
reg [31:0] main_preheaderii_gep41;
reg [31:0] main_preheaderii_gep41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_40_reg;
reg [31:0] main_preheaderii_41;
reg [31:0] main_preheaderii_41_reg;
reg [31:0] main_preheaderii_42;
reg [31:0] main_preheaderii_42_reg;
reg [31:0] main_preheaderii_gep_int42;
reg [31:0] main_preheaderii_gep_int42_reg;
reg [31:0] main_preheaderii_gep_array43;
reg [31:0] main_preheaderii_gep_array43_reg;
reg [31:0] main_preheaderii_gep44;
reg [31:0] main_preheaderii_gep44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_43_reg;
reg [31:0] main_preheaderii_44;
reg [31:0] main_preheaderii_44_reg;
reg [31:0] main_preheaderii_45;
reg [31:0] main_preheaderii_45_reg;
reg [31:0] main_preheaderii_gep_int45;
reg [31:0] main_preheaderii_gep_int45_reg;
reg [31:0] main_preheaderii_gep46;
reg [31:0] main_preheaderii_gep46_reg;
reg [31:0] main_preheaderii_gep_array47;
reg [31:0] main_preheaderii_gep_array47_reg;
reg [31:0] main_preheaderii_gep48;
reg [31:0] main_preheaderii_gep48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_46_reg;
reg [31:0] main_preheaderii_47;
reg [31:0] main_preheaderii_47_reg;
reg [31:0] main_preheaderii_48;
reg [31:0] main_preheaderii_48_reg;
reg [31:0] main_preheaderii_gep_int49;
reg [31:0] main_preheaderii_gep_int49_reg;
reg [31:0] main_preheaderii_gep_array50;
reg [31:0] main_preheaderii_gep_array50_reg;
reg [31:0] main_preheaderii_gep51;
reg [31:0] main_preheaderii_gep51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_49_reg;
reg [31:0] main_preheaderii_50;
reg [31:0] main_preheaderii_50_reg;
reg [31:0] main_preheaderii_51;
reg [31:0] main_preheaderii_51_reg;
reg  main_preheaderii_exitcond39;
reg  main_preheaderii_exitcond39_reg;
reg [31:0] main_AddRoundKeyexitipreheader_52;
reg [31:0] main_AddRoundKeyexitipreheader_52_reg;
reg [31:0] main_AddRoundKeyexitipreheader_53;
reg [31:0] main_AddRoundKeyexitipreheader_53_reg;
reg [31:0] main_AddRoundKeyexitipreheader_54;
reg [31:0] main_AddRoundKeyexitipreheader_54_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int52;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int52_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array53;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array53_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep54;
reg [31:0] main_AddRoundKeyexitipreheader_gep54_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array55;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array55_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep56;
reg [31:0] main_AddRoundKeyexitipreheader_gep56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_55_reg;
reg [31:0] main_AddRoundKeyexitipreheader_56;
reg [31:0] main_AddRoundKeyexitipreheader_56_reg;
reg [31:0] main_AddRoundKeyexitipreheader_57;
reg [31:0] main_AddRoundKeyexitipreheader_57_reg;
reg [31:0] main_AddRoundKeyexitipreheader_58;
reg [31:0] main_AddRoundKeyexitipreheader_58_reg;
reg [31:0] main_AddRoundKeyexitipreheader_59;
reg [31:0] main_AddRoundKeyexitipreheader_59_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int57;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int57_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array58;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array58_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep59;
reg [31:0] main_AddRoundKeyexitipreheader_gep59_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array60;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array60_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep61;
reg [31:0] main_AddRoundKeyexitipreheader_gep61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_60_reg;
reg [31:0] main_AddRoundKeyexitipreheader_61;
reg [31:0] main_AddRoundKeyexitipreheader_61_reg;
reg [31:0] main_AddRoundKeyexitipreheader_62;
reg [31:0] main_AddRoundKeyexitipreheader_62_reg;
reg [31:0] main_AddRoundKeyexitipreheader_63;
reg [31:0] main_AddRoundKeyexitipreheader_63_reg;
reg [31:0] main_AddRoundKeyexitipreheader_64;
reg [31:0] main_AddRoundKeyexitipreheader_64_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int62;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int62_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array63;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array63_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep64;
reg [31:0] main_AddRoundKeyexitipreheader_gep64_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array65;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array65_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep66;
reg [31:0] main_AddRoundKeyexitipreheader_gep66_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_65_reg;
reg [31:0] main_AddRoundKeyexitipreheader_66;
reg [31:0] main_AddRoundKeyexitipreheader_66_reg;
reg [31:0] main_AddRoundKeyexitipreheader_67;
reg [31:0] main_AddRoundKeyexitipreheader_67_reg;
reg [31:0] main_AddRoundKeyexitipreheader_68;
reg [31:0] main_AddRoundKeyexitipreheader_68_reg;
reg [31:0] main_AddRoundKeyexitipreheader_69;
reg [31:0] main_AddRoundKeyexitipreheader_69_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int67;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int67_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array68;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array68_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep69;
reg [31:0] main_AddRoundKeyexitipreheader_gep69_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array70;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array70_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep71;
reg [31:0] main_AddRoundKeyexitipreheader_gep71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_70_reg;
reg [31:0] main_AddRoundKeyexitipreheader_71;
reg [31:0] main_AddRoundKeyexitipreheader_71_reg;
reg [31:0] main_AddRoundKeyexitipreheader_72;
reg [31:0] main_AddRoundKeyexitipreheader_72_reg;
reg [31:0] main_AddRoundKeyexitipreheader_73;
reg [31:0] main_AddRoundKeyexitipreheader_73_reg;
reg [31:0] main_AddRoundKeyexitipreheader_74;
reg [31:0] main_AddRoundKeyexitipreheader_74_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int72;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int72_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array73;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array73_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep74;
reg [31:0] main_AddRoundKeyexitipreheader_gep74_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array75;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array75_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep76;
reg [31:0] main_AddRoundKeyexitipreheader_gep76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_75_reg;
reg [31:0] main_AddRoundKeyexitipreheader_76;
reg [31:0] main_AddRoundKeyexitipreheader_76_reg;
reg [31:0] main_AddRoundKeyexitipreheader_77;
reg [31:0] main_AddRoundKeyexitipreheader_77_reg;
reg [31:0] main_AddRoundKeyexitipreheader_78;
reg [31:0] main_AddRoundKeyexitipreheader_78_reg;
reg [31:0] main_AddRoundKeyexitipreheader_79;
reg [31:0] main_AddRoundKeyexitipreheader_79_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int77;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int77_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array78;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array78_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep79;
reg [31:0] main_AddRoundKeyexitipreheader_gep79_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array80;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array80_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep81;
reg [31:0] main_AddRoundKeyexitipreheader_gep81_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_80;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_80_reg;
reg [31:0] main_AddRoundKeyexitipreheader_81;
reg [31:0] main_AddRoundKeyexitipreheader_81_reg;
reg [31:0] main_AddRoundKeyexitipreheader_82;
reg [31:0] main_AddRoundKeyexitipreheader_82_reg;
reg [31:0] main_AddRoundKeyexitipreheader_83;
reg [31:0] main_AddRoundKeyexitipreheader_83_reg;
reg [31:0] main_AddRoundKeyexitipreheader_84;
reg [31:0] main_AddRoundKeyexitipreheader_84_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int82;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int82_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array83;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array83_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep84;
reg [31:0] main_AddRoundKeyexitipreheader_gep84_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array85;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array85_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep86;
reg [31:0] main_AddRoundKeyexitipreheader_gep86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_85_reg;
reg [31:0] main_AddRoundKeyexitipreheader_86;
reg [31:0] main_AddRoundKeyexitipreheader_86_reg;
reg [31:0] main_AddRoundKeyexitipreheader_87;
reg [31:0] main_AddRoundKeyexitipreheader_87_reg;
reg [31:0] main_AddRoundKeyexitipreheader_88;
reg [31:0] main_AddRoundKeyexitipreheader_88_reg;
reg [31:0] main_AddRoundKeyexitipreheader_89;
reg [31:0] main_AddRoundKeyexitipreheader_89_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int87;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int87_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array88;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array88_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep89;
reg [31:0] main_AddRoundKeyexitipreheader_gep89_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array90;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array90_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep91;
reg [31:0] main_AddRoundKeyexitipreheader_gep91_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_90;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_90_reg;
reg [31:0] main_AddRoundKeyexitipreheader_91;
reg [31:0] main_AddRoundKeyexitipreheader_91_reg;
reg [31:0] main_AddRoundKeyexitipreheader_92;
reg [31:0] main_AddRoundKeyexitipreheader_92_reg;
reg [31:0] main_AddRoundKeyexitipreheader_93;
reg [31:0] main_AddRoundKeyexitipreheader_93_reg;
reg [31:0] main_AddRoundKeyexitipreheader_94;
reg [31:0] main_AddRoundKeyexitipreheader_94_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int92;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int92_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array93;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array93_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep94;
reg [31:0] main_AddRoundKeyexitipreheader_gep94_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array95;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array95_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep96;
reg [31:0] main_AddRoundKeyexitipreheader_gep96_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_95_reg;
reg [31:0] main_AddRoundKeyexitipreheader_96;
reg [31:0] main_AddRoundKeyexitipreheader_96_reg;
reg [31:0] main_AddRoundKeyexitipreheader_97;
reg [31:0] main_AddRoundKeyexitipreheader_97_reg;
reg [31:0] main_AddRoundKeyexitipreheader_98;
reg [31:0] main_AddRoundKeyexitipreheader_98_reg;
reg [31:0] main_AddRoundKeyexitipreheader_99;
reg [31:0] main_AddRoundKeyexitipreheader_99_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int97;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int97_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array98;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array98_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep99;
reg [31:0] main_AddRoundKeyexitipreheader_gep99_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array100;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array100_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep101;
reg [31:0] main_AddRoundKeyexitipreheader_gep101_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_100_reg;
reg [31:0] main_AddRoundKeyexitipreheader_101;
reg [31:0] main_AddRoundKeyexitipreheader_101_reg;
reg [31:0] main_AddRoundKeyexitipreheader_102;
reg [31:0] main_AddRoundKeyexitipreheader_102_reg;
reg [31:0] main_AddRoundKeyexitipreheader_103;
reg [31:0] main_AddRoundKeyexitipreheader_103_reg;
reg [31:0] main_AddRoundKeyexitipreheader_104;
reg [31:0] main_AddRoundKeyexitipreheader_104_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int102;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int102_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array103;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array103_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep104;
reg [31:0] main_AddRoundKeyexitipreheader_gep104_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array105;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array105_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep106;
reg [31:0] main_AddRoundKeyexitipreheader_gep106_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_105;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_105_reg;
reg [31:0] main_AddRoundKeyexitipreheader_106;
reg [31:0] main_AddRoundKeyexitipreheader_106_reg;
reg [31:0] main_AddRoundKeyexitipreheader_107;
reg [31:0] main_AddRoundKeyexitipreheader_107_reg;
reg [31:0] main_AddRoundKeyexitipreheader_108;
reg [31:0] main_AddRoundKeyexitipreheader_108_reg;
reg [31:0] main_AddRoundKeyexitipreheader_109;
reg [31:0] main_AddRoundKeyexitipreheader_109_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int107;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int107_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array108;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array108_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep109;
reg [31:0] main_AddRoundKeyexitipreheader_gep109_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array110;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array110_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep111;
reg [31:0] main_AddRoundKeyexitipreheader_gep111_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_110;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_110_reg;
reg [31:0] main_AddRoundKeyexitipreheader_111;
reg [31:0] main_AddRoundKeyexitipreheader_111_reg;
reg [31:0] main_AddRoundKeyexitipreheader_112;
reg [31:0] main_AddRoundKeyexitipreheader_112_reg;
reg [31:0] main_AddRoundKeyexitipreheader_113;
reg [31:0] main_AddRoundKeyexitipreheader_113_reg;
reg [31:0] main_AddRoundKeyexitipreheader_114;
reg [31:0] main_AddRoundKeyexitipreheader_114_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int112;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int112_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array113;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array113_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep114;
reg [31:0] main_AddRoundKeyexitipreheader_gep114_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array115;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array115_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep116;
reg [31:0] main_AddRoundKeyexitipreheader_gep116_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_115;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_115_reg;
reg [31:0] main_AddRoundKeyexitipreheader_116;
reg [31:0] main_AddRoundKeyexitipreheader_116_reg;
reg [31:0] main_AddRoundKeyexitipreheader_117;
reg [31:0] main_AddRoundKeyexitipreheader_117_reg;
reg [31:0] main_AddRoundKeyexitipreheader_118;
reg [31:0] main_AddRoundKeyexitipreheader_118_reg;
reg [31:0] main_AddRoundKeyexitipreheader_119;
reg [31:0] main_AddRoundKeyexitipreheader_119_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int117;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int117_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array118;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array118_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep119;
reg [31:0] main_AddRoundKeyexitipreheader_gep119_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array120;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array120_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep121;
reg [31:0] main_AddRoundKeyexitipreheader_gep121_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_120;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_120_reg;
reg [31:0] main_AddRoundKeyexitipreheader_121;
reg [31:0] main_AddRoundKeyexitipreheader_121_reg;
reg [31:0] main_AddRoundKeyexitipreheader_122;
reg [31:0] main_AddRoundKeyexitipreheader_122_reg;
reg [31:0] main_AddRoundKeyexitipreheader_123;
reg [31:0] main_AddRoundKeyexitipreheader_123_reg;
reg [31:0] main_AddRoundKeyexitipreheader_124;
reg [31:0] main_AddRoundKeyexitipreheader_124_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int122;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int122_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array123;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array123_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep124;
reg [31:0] main_AddRoundKeyexitipreheader_gep124_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array125;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array125_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep126;
reg [31:0] main_AddRoundKeyexitipreheader_gep126_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_125;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_125_reg;
reg [31:0] main_AddRoundKeyexitipreheader_126;
reg [31:0] main_AddRoundKeyexitipreheader_126_reg;
reg [31:0] main_AddRoundKeyexitipreheader_127;
reg [31:0] main_AddRoundKeyexitipreheader_127_reg;
reg [31:0] main_AddRoundKeyexitipreheader_128;
reg [31:0] main_AddRoundKeyexitipreheader_128_reg;
reg [31:0] main_AddRoundKeyexitipreheader_129;
reg [31:0] main_AddRoundKeyexitipreheader_129_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int127;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int127_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array128;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array128_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep129;
reg [31:0] main_AddRoundKeyexitipreheader_gep129_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array130;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array130_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep131;
reg [31:0] main_AddRoundKeyexitipreheader_gep131_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_130;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_130_reg;
reg [31:0] main_AddRoundKeyexitipreheader_131;
reg [31:0] main_AddRoundKeyexitipreheader_131_reg;
reg [31:0] main_AddRoundKeyexiti_i010i;
reg [31:0] main_AddRoundKeyexiti_i010i_reg;
reg [31:0] main_AddRoundKeyexiti_133;
reg [31:0] main_AddRoundKeyexiti_133_reg;
reg [31:0] main_AddRoundKeyexiti_134;
reg [31:0] main_AddRoundKeyexiti_134_reg;
reg [31:0] main_AddRoundKeyexiti_135;
reg [31:0] main_AddRoundKeyexiti_135_reg;
reg [31:0] main_AddRoundKeyexiti_136;
reg [31:0] main_AddRoundKeyexiti_136_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int132;
reg [31:0] main_AddRoundKeyexiti_gep_int132_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array133;
reg [31:0] main_AddRoundKeyexiti_gep_array133_reg;
reg [31:0] main_AddRoundKeyexiti_gep134;
reg [31:0] main_AddRoundKeyexiti_gep134_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array135;
reg [31:0] main_AddRoundKeyexiti_gep_array135_reg;
reg [31:0] main_AddRoundKeyexiti_gep136;
reg [31:0] main_AddRoundKeyexiti_gep136_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_137;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_137_reg;
reg [31:0] main_AddRoundKeyexiti_138;
reg [31:0] main_AddRoundKeyexiti_138_reg;
reg [31:0] main_AddRoundKeyexiti_139;
reg [31:0] main_AddRoundKeyexiti_139_reg;
reg [31:0] main_AddRoundKeyexiti_140;
reg [31:0] main_AddRoundKeyexiti_140_reg;
reg [31:0] main_AddRoundKeyexiti_141;
reg [31:0] main_AddRoundKeyexiti_141_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int137;
reg [31:0] main_AddRoundKeyexiti_gep_int137_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array138;
reg [31:0] main_AddRoundKeyexiti_gep_array138_reg;
reg [31:0] main_AddRoundKeyexiti_gep139;
reg [31:0] main_AddRoundKeyexiti_gep139_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array140;
reg [31:0] main_AddRoundKeyexiti_gep_array140_reg;
reg [31:0] main_AddRoundKeyexiti_gep141;
reg [31:0] main_AddRoundKeyexiti_gep141_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_142;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_142_reg;
reg [31:0] main_AddRoundKeyexiti_143;
reg [31:0] main_AddRoundKeyexiti_143_reg;
reg [31:0] main_AddRoundKeyexiti_144;
reg [31:0] main_AddRoundKeyexiti_144_reg;
reg [31:0] main_AddRoundKeyexiti_145;
reg [31:0] main_AddRoundKeyexiti_145_reg;
reg [31:0] main_AddRoundKeyexiti_146;
reg [31:0] main_AddRoundKeyexiti_146_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int142;
reg [31:0] main_AddRoundKeyexiti_gep_int142_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array143;
reg [31:0] main_AddRoundKeyexiti_gep_array143_reg;
reg [31:0] main_AddRoundKeyexiti_gep144;
reg [31:0] main_AddRoundKeyexiti_gep144_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array145;
reg [31:0] main_AddRoundKeyexiti_gep_array145_reg;
reg [31:0] main_AddRoundKeyexiti_gep146;
reg [31:0] main_AddRoundKeyexiti_gep146_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_147;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_147_reg;
reg [31:0] main_AddRoundKeyexiti_148;
reg [31:0] main_AddRoundKeyexiti_148_reg;
reg [31:0] main_AddRoundKeyexiti_149;
reg [31:0] main_AddRoundKeyexiti_149_reg;
reg [31:0] main_AddRoundKeyexiti_150;
reg [31:0] main_AddRoundKeyexiti_150_reg;
reg [31:0] main_AddRoundKeyexiti_151;
reg [31:0] main_AddRoundKeyexiti_151_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int147;
reg [31:0] main_AddRoundKeyexiti_gep_int147_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array148;
reg [31:0] main_AddRoundKeyexiti_gep_array148_reg;
reg [31:0] main_AddRoundKeyexiti_gep149;
reg [31:0] main_AddRoundKeyexiti_gep149_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array150;
reg [31:0] main_AddRoundKeyexiti_gep_array150_reg;
reg [31:0] main_AddRoundKeyexiti_gep151;
reg [31:0] main_AddRoundKeyexiti_gep151_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_152;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_152_reg;
reg [31:0] main_AddRoundKeyexiti_153;
reg [31:0] main_AddRoundKeyexiti_153_reg;
reg [31:0] main_AddRoundKeyexiti_154;
reg [31:0] main_AddRoundKeyexiti_154_reg;
reg [31:0] main_AddRoundKeyexiti_155;
reg [31:0] main_AddRoundKeyexiti_155_reg;
reg [31:0] main_AddRoundKeyexiti_156;
reg [31:0] main_AddRoundKeyexiti_156_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int152;
reg [31:0] main_AddRoundKeyexiti_gep_int152_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array153;
reg [31:0] main_AddRoundKeyexiti_gep_array153_reg;
reg [31:0] main_AddRoundKeyexiti_gep154;
reg [31:0] main_AddRoundKeyexiti_gep154_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array155;
reg [31:0] main_AddRoundKeyexiti_gep_array155_reg;
reg [31:0] main_AddRoundKeyexiti_gep156;
reg [31:0] main_AddRoundKeyexiti_gep156_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_157;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_157_reg;
reg [31:0] main_AddRoundKeyexiti_158;
reg [31:0] main_AddRoundKeyexiti_158_reg;
reg [31:0] main_AddRoundKeyexiti_159;
reg [31:0] main_AddRoundKeyexiti_159_reg;
reg [31:0] main_AddRoundKeyexiti_160;
reg [31:0] main_AddRoundKeyexiti_160_reg;
reg [31:0] main_AddRoundKeyexiti_161;
reg [31:0] main_AddRoundKeyexiti_161_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int157;
reg [31:0] main_AddRoundKeyexiti_gep_int157_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array158;
reg [31:0] main_AddRoundKeyexiti_gep_array158_reg;
reg [31:0] main_AddRoundKeyexiti_gep159;
reg [31:0] main_AddRoundKeyexiti_gep159_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array160;
reg [31:0] main_AddRoundKeyexiti_gep_array160_reg;
reg [31:0] main_AddRoundKeyexiti_gep161;
reg [31:0] main_AddRoundKeyexiti_gep161_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_162;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_162_reg;
reg [31:0] main_AddRoundKeyexiti_163;
reg [31:0] main_AddRoundKeyexiti_163_reg;
reg [31:0] main_AddRoundKeyexiti_164;
reg [31:0] main_AddRoundKeyexiti_164_reg;
reg [31:0] main_AddRoundKeyexiti_165;
reg [31:0] main_AddRoundKeyexiti_165_reg;
reg [31:0] main_AddRoundKeyexiti_166;
reg [31:0] main_AddRoundKeyexiti_166_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int162;
reg [31:0] main_AddRoundKeyexiti_gep_int162_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array163;
reg [31:0] main_AddRoundKeyexiti_gep_array163_reg;
reg [31:0] main_AddRoundKeyexiti_gep164;
reg [31:0] main_AddRoundKeyexiti_gep164_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array165;
reg [31:0] main_AddRoundKeyexiti_gep_array165_reg;
reg [31:0] main_AddRoundKeyexiti_gep166;
reg [31:0] main_AddRoundKeyexiti_gep166_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_167;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_167_reg;
reg [31:0] main_AddRoundKeyexiti_168;
reg [31:0] main_AddRoundKeyexiti_168_reg;
reg [31:0] main_AddRoundKeyexiti_169;
reg [31:0] main_AddRoundKeyexiti_169_reg;
reg [31:0] main_AddRoundKeyexiti_170;
reg [31:0] main_AddRoundKeyexiti_170_reg;
reg [31:0] main_AddRoundKeyexiti_171;
reg [31:0] main_AddRoundKeyexiti_171_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int167;
reg [31:0] main_AddRoundKeyexiti_gep_int167_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array168;
reg [31:0] main_AddRoundKeyexiti_gep_array168_reg;
reg [31:0] main_AddRoundKeyexiti_gep169;
reg [31:0] main_AddRoundKeyexiti_gep169_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array170;
reg [31:0] main_AddRoundKeyexiti_gep_array170_reg;
reg [31:0] main_AddRoundKeyexiti_gep171;
reg [31:0] main_AddRoundKeyexiti_gep171_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_172;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_172_reg;
reg [31:0] main_AddRoundKeyexiti_173;
reg [31:0] main_AddRoundKeyexiti_173_reg;
reg [31:0] main_AddRoundKeyexiti_174;
reg [31:0] main_AddRoundKeyexiti_174_reg;
reg [31:0] main_AddRoundKeyexiti_175;
reg [31:0] main_AddRoundKeyexiti_175_reg;
reg [31:0] main_AddRoundKeyexiti_176;
reg [31:0] main_AddRoundKeyexiti_176_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int172;
reg [31:0] main_AddRoundKeyexiti_gep_int172_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array173;
reg [31:0] main_AddRoundKeyexiti_gep_array173_reg;
reg [31:0] main_AddRoundKeyexiti_gep174;
reg [31:0] main_AddRoundKeyexiti_gep174_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array175;
reg [31:0] main_AddRoundKeyexiti_gep_array175_reg;
reg [31:0] main_AddRoundKeyexiti_gep176;
reg [31:0] main_AddRoundKeyexiti_gep176_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_177;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_177_reg;
reg [31:0] main_AddRoundKeyexiti_178;
reg [31:0] main_AddRoundKeyexiti_178_reg;
reg [31:0] main_AddRoundKeyexiti_179;
reg [31:0] main_AddRoundKeyexiti_179_reg;
reg [31:0] main_AddRoundKeyexiti_180;
reg [31:0] main_AddRoundKeyexiti_180_reg;
reg [31:0] main_AddRoundKeyexiti_181;
reg [31:0] main_AddRoundKeyexiti_181_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int177;
reg [31:0] main_AddRoundKeyexiti_gep_int177_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array178;
reg [31:0] main_AddRoundKeyexiti_gep_array178_reg;
reg [31:0] main_AddRoundKeyexiti_gep179;
reg [31:0] main_AddRoundKeyexiti_gep179_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array180;
reg [31:0] main_AddRoundKeyexiti_gep_array180_reg;
reg [31:0] main_AddRoundKeyexiti_gep181;
reg [31:0] main_AddRoundKeyexiti_gep181_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_182;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_182_reg;
reg [31:0] main_AddRoundKeyexiti_183;
reg [31:0] main_AddRoundKeyexiti_183_reg;
reg [31:0] main_AddRoundKeyexiti_184;
reg [31:0] main_AddRoundKeyexiti_184_reg;
reg [31:0] main_AddRoundKeyexiti_185;
reg [31:0] main_AddRoundKeyexiti_185_reg;
reg [31:0] main_AddRoundKeyexiti_186;
reg [31:0] main_AddRoundKeyexiti_186_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int182;
reg [31:0] main_AddRoundKeyexiti_gep_int182_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array183;
reg [31:0] main_AddRoundKeyexiti_gep_array183_reg;
reg [31:0] main_AddRoundKeyexiti_gep184;
reg [31:0] main_AddRoundKeyexiti_gep184_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array185;
reg [31:0] main_AddRoundKeyexiti_gep_array185_reg;
reg [31:0] main_AddRoundKeyexiti_gep186;
reg [31:0] main_AddRoundKeyexiti_gep186_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_187;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_187_reg;
reg [31:0] main_AddRoundKeyexiti_188;
reg [31:0] main_AddRoundKeyexiti_188_reg;
reg [31:0] main_AddRoundKeyexiti_189;
reg [31:0] main_AddRoundKeyexiti_189_reg;
reg [31:0] main_AddRoundKeyexiti_190;
reg [31:0] main_AddRoundKeyexiti_190_reg;
reg [31:0] main_AddRoundKeyexiti_191;
reg [31:0] main_AddRoundKeyexiti_191_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int187;
reg [31:0] main_AddRoundKeyexiti_gep_int187_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array188;
reg [31:0] main_AddRoundKeyexiti_gep_array188_reg;
reg [31:0] main_AddRoundKeyexiti_gep189;
reg [31:0] main_AddRoundKeyexiti_gep189_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array190;
reg [31:0] main_AddRoundKeyexiti_gep_array190_reg;
reg [31:0] main_AddRoundKeyexiti_gep191;
reg [31:0] main_AddRoundKeyexiti_gep191_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_192;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_192_reg;
reg [31:0] main_AddRoundKeyexiti_193;
reg [31:0] main_AddRoundKeyexiti_193_reg;
reg [31:0] main_AddRoundKeyexiti_194;
reg [31:0] main_AddRoundKeyexiti_194_reg;
reg [31:0] main_AddRoundKeyexiti_195;
reg [31:0] main_AddRoundKeyexiti_195_reg;
reg [31:0] main_AddRoundKeyexiti_196;
reg [31:0] main_AddRoundKeyexiti_196_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int192;
reg [31:0] main_AddRoundKeyexiti_gep_int192_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array193;
reg [31:0] main_AddRoundKeyexiti_gep_array193_reg;
reg [31:0] main_AddRoundKeyexiti_gep194;
reg [31:0] main_AddRoundKeyexiti_gep194_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array195;
reg [31:0] main_AddRoundKeyexiti_gep_array195_reg;
reg [31:0] main_AddRoundKeyexiti_gep196;
reg [31:0] main_AddRoundKeyexiti_gep196_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_197;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_197_reg;
reg [31:0] main_AddRoundKeyexiti_198;
reg [31:0] main_AddRoundKeyexiti_198_reg;
reg [31:0] main_AddRoundKeyexiti_199;
reg [31:0] main_AddRoundKeyexiti_199_reg;
reg [31:0] main_AddRoundKeyexiti_200;
reg [31:0] main_AddRoundKeyexiti_200_reg;
reg [31:0] main_AddRoundKeyexiti_201;
reg [31:0] main_AddRoundKeyexiti_201_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int197;
reg [31:0] main_AddRoundKeyexiti_gep_int197_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array198;
reg [31:0] main_AddRoundKeyexiti_gep_array198_reg;
reg [31:0] main_AddRoundKeyexiti_gep199;
reg [31:0] main_AddRoundKeyexiti_gep199_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array200;
reg [31:0] main_AddRoundKeyexiti_gep_array200_reg;
reg [31:0] main_AddRoundKeyexiti_gep201;
reg [31:0] main_AddRoundKeyexiti_gep201_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_202;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_202_reg;
reg [31:0] main_AddRoundKeyexiti_203;
reg [31:0] main_AddRoundKeyexiti_203_reg;
reg [31:0] main_AddRoundKeyexiti_204;
reg [31:0] main_AddRoundKeyexiti_204_reg;
reg [31:0] main_AddRoundKeyexiti_205;
reg [31:0] main_AddRoundKeyexiti_205_reg;
reg [31:0] main_AddRoundKeyexiti_206;
reg [31:0] main_AddRoundKeyexiti_206_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int202;
reg [31:0] main_AddRoundKeyexiti_gep_int202_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array203;
reg [31:0] main_AddRoundKeyexiti_gep_array203_reg;
reg [31:0] main_AddRoundKeyexiti_gep204;
reg [31:0] main_AddRoundKeyexiti_gep204_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array205;
reg [31:0] main_AddRoundKeyexiti_gep_array205_reg;
reg [31:0] main_AddRoundKeyexiti_gep206;
reg [31:0] main_AddRoundKeyexiti_gep206_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_207;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_207_reg;
reg [31:0] main_AddRoundKeyexiti_208;
reg [31:0] main_AddRoundKeyexiti_208_reg;
reg [31:0] main_AddRoundKeyexiti_209;
reg [31:0] main_AddRoundKeyexiti_209_reg;
reg [31:0] main_AddRoundKeyexiti_210;
reg [31:0] main_AddRoundKeyexiti_210_reg;
reg [31:0] main_AddRoundKeyexiti_211;
reg [31:0] main_AddRoundKeyexiti_211_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int207;
reg [31:0] main_AddRoundKeyexiti_gep_int207_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array208;
reg [31:0] main_AddRoundKeyexiti_gep_array208_reg;
reg [31:0] main_AddRoundKeyexiti_gep209;
reg [31:0] main_AddRoundKeyexiti_gep209_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array210;
reg [31:0] main_AddRoundKeyexiti_gep_array210_reg;
reg [31:0] main_AddRoundKeyexiti_gep211;
reg [31:0] main_AddRoundKeyexiti_gep211_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_212;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_212_reg;
reg [31:0] main_AddRoundKeyexiti_213;
reg [31:0] main_AddRoundKeyexiti_213_reg;
reg  main_AddRoundKeyexiti_exitcond38;
reg  main_AddRoundKeyexiti_exitcond38_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_j02i2i;
reg [31:0] main_AddRoundKeyexit_crit_edgei_j02i2i_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_214;
reg [31:0] main_AddRoundKeyexit_crit_edgei_214_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int212;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int212_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array213;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array213_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep214;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep214_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_215;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_215_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_216;
reg [31:0] main_AddRoundKeyexit_crit_edgei_216_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_217;
reg [31:0] main_AddRoundKeyexit_crit_edgei_217_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int215;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int215_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array216;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array216_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep217;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep217_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_218;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_218_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_219;
reg [31:0] main_AddRoundKeyexit_crit_edgei_219_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_220;
reg [31:0] main_AddRoundKeyexit_crit_edgei_220_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int218;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int218_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep219;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep219_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array220;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array220_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep221;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep221_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_221;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_221_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_222;
reg [31:0] main_AddRoundKeyexit_crit_edgei_222_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_223;
reg [31:0] main_AddRoundKeyexit_crit_edgei_223_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int222;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int222_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array223;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array223_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep224;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep224_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_224;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_224_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_225;
reg [31:0] main_AddRoundKeyexit_crit_edgei_225_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_226;
reg [31:0] main_AddRoundKeyexit_crit_edgei_226_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int225;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int225_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep226;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep226_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array227;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array227_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep228;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep228_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_227;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_227_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_228;
reg [31:0] main_AddRoundKeyexit_crit_edgei_228_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_229;
reg [31:0] main_AddRoundKeyexit_crit_edgei_229_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int229;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int229_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array230;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array230_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep231;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep231_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_230;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_230_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_231;
reg [31:0] main_AddRoundKeyexit_crit_edgei_231_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_232;
reg [31:0] main_AddRoundKeyexit_crit_edgei_232_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int232;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int232_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep233;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep233_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array234;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array234_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep235;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep235_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_233;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_233_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_234;
reg [31:0] main_AddRoundKeyexit_crit_edgei_234_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_235;
reg [31:0] main_AddRoundKeyexit_crit_edgei_235_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int236;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int236_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array237;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array237_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep238;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep238_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_236;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_236_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_237;
reg [31:0] main_AddRoundKeyexit_crit_edgei_237_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_238;
reg [31:0] main_AddRoundKeyexit_crit_edgei_238_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_239;
reg [31:0] main_AddRoundKeyexit_crit_edgei_239_reg;
reg  main_AddRoundKeyexit_crit_edgei_exitcond37;
reg  main_AddRoundKeyexit_crit_edgei_exitcond37_reg;
reg [31:0] main_preheaderi4i_j11i3i;
reg [31:0] main_preheaderi4i_j11i3i_reg;
reg [31:0] main_preheaderi4i_240;
reg [31:0] main_preheaderi4i_240_reg;
reg [31:0] main_preheaderi4i_gep_int239;
reg [31:0] main_preheaderi4i_gep_int239_reg;
reg [31:0] main_preheaderi4i_gep_array240;
reg [31:0] main_preheaderi4i_gep_array240_reg;
reg [31:0] main_preheaderi4i_gep241;
reg [31:0] main_preheaderi4i_gep241_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_241;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_241_reg;
reg [31:0] main_preheaderi4i_242;
reg [31:0] main_preheaderi4i_242_reg;
reg [31:0] main_preheaderi4i_243;
reg [31:0] main_preheaderi4i_243_reg;
reg [31:0] main_preheaderi4i_gep_int242;
reg [31:0] main_preheaderi4i_gep_int242_reg;
reg [31:0] main_preheaderi4i_gep_array243;
reg [31:0] main_preheaderi4i_gep_array243_reg;
reg [31:0] main_preheaderi4i_gep244;
reg [31:0] main_preheaderi4i_gep244_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_244;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_244_reg;
reg [31:0] main_preheaderi4i_245;
reg [31:0] main_preheaderi4i_245_reg;
reg [31:0] main_preheaderi4i_246;
reg [31:0] main_preheaderi4i_246_reg;
reg [31:0] main_preheaderi4i_gep_int245;
reg [31:0] main_preheaderi4i_gep_int245_reg;
reg [31:0] main_preheaderi4i_gep246;
reg [31:0] main_preheaderi4i_gep246_reg;
reg [31:0] main_preheaderi4i_gep_array247;
reg [31:0] main_preheaderi4i_gep_array247_reg;
reg [31:0] main_preheaderi4i_gep248;
reg [31:0] main_preheaderi4i_gep248_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_247;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_247_reg;
reg [31:0] main_preheaderi4i_248;
reg [31:0] main_preheaderi4i_248_reg;
reg [31:0] main_preheaderi4i_249;
reg [31:0] main_preheaderi4i_249_reg;
reg [31:0] main_preheaderi4i_gep_int249;
reg [31:0] main_preheaderi4i_gep_int249_reg;
reg [31:0] main_preheaderi4i_gep_array250;
reg [31:0] main_preheaderi4i_gep_array250_reg;
reg [31:0] main_preheaderi4i_gep251;
reg [31:0] main_preheaderi4i_gep251_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_250;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_250_reg;
reg [31:0] main_preheaderi4i_251;
reg [31:0] main_preheaderi4i_251_reg;
reg [31:0] main_preheaderi4i_252;
reg [31:0] main_preheaderi4i_252_reg;
reg [31:0] main_preheaderi4i_gep_int252;
reg [31:0] main_preheaderi4i_gep_int252_reg;
reg [31:0] main_preheaderi4i_gep253;
reg [31:0] main_preheaderi4i_gep253_reg;
reg [31:0] main_preheaderi4i_gep_array254;
reg [31:0] main_preheaderi4i_gep_array254_reg;
reg [31:0] main_preheaderi4i_gep255;
reg [31:0] main_preheaderi4i_gep255_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_253;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_253_reg;
reg [31:0] main_preheaderi4i_254;
reg [31:0] main_preheaderi4i_254_reg;
reg [31:0] main_preheaderi4i_255;
reg [31:0] main_preheaderi4i_255_reg;
reg [31:0] main_preheaderi4i_gep_int256;
reg [31:0] main_preheaderi4i_gep_int256_reg;
reg [31:0] main_preheaderi4i_gep_array257;
reg [31:0] main_preheaderi4i_gep_array257_reg;
reg [31:0] main_preheaderi4i_gep258;
reg [31:0] main_preheaderi4i_gep258_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_256;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_256_reg;
reg [31:0] main_preheaderi4i_257;
reg [31:0] main_preheaderi4i_257_reg;
reg [31:0] main_preheaderi4i_258;
reg [31:0] main_preheaderi4i_258_reg;
reg [31:0] main_preheaderi4i_gep_int259;
reg [31:0] main_preheaderi4i_gep_int259_reg;
reg [31:0] main_preheaderi4i_gep260;
reg [31:0] main_preheaderi4i_gep260_reg;
reg [31:0] main_preheaderi4i_gep_array261;
reg [31:0] main_preheaderi4i_gep_array261_reg;
reg [31:0] main_preheaderi4i_gep262;
reg [31:0] main_preheaderi4i_gep262_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_259;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_259_reg;
reg [31:0] main_preheaderi4i_260;
reg [31:0] main_preheaderi4i_260_reg;
reg [31:0] main_preheaderi4i_261;
reg [31:0] main_preheaderi4i_261_reg;
reg [31:0] main_preheaderi4i_gep_int263;
reg [31:0] main_preheaderi4i_gep_int263_reg;
reg [31:0] main_preheaderi4i_gep_array264;
reg [31:0] main_preheaderi4i_gep_array264_reg;
reg [31:0] main_preheaderi4i_gep265;
reg [31:0] main_preheaderi4i_gep265_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_262;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_262_reg;
reg [31:0] main_preheaderi4i_263;
reg [31:0] main_preheaderi4i_263_reg;
reg [31:0] main_preheaderi4i_264;
reg [31:0] main_preheaderi4i_264_reg;
reg  main_preheaderi4i_exitcond36;
reg  main_preheaderi4i_exitcond36_reg;
reg [31:0] main_lrphi_i19i;
reg [31:0] main_lrphi_i19i_reg;
reg [31:0] main_lrphi_gep_int266;
reg [31:0] main_lrphi_gep_int266_reg;
reg [31:0] main_lrphi_gep_array267;
reg [31:0] main_lrphi_gep_array267_reg;
reg [31:0] main_lrphi_gep268;
reg [31:0] main_lrphi_gep268_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_266;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_266_reg;
reg [31:0] main_lrphi_267;
reg [31:0] main_lrphi_267_reg;
reg  main_lrphi_268;
reg  main_lrphi_268_reg;
reg [31:0] main_269_prei;
reg [31:0] main_269_prei_reg;
reg [31:0] main_271_272;
reg [31:0] main_271_272_reg;
reg [31:0] main_271_274;
reg [31:0] main_271_274_reg;
reg  main_271_exitcond35;
reg  main_271_exitcond35_reg;
reg [31:0] main_preheaderi_275;
reg [31:0] main_preheaderi_275_reg;
reg [31:0] main_preheaderi_i28i;
reg [31:0] main_preheaderi_i28i_reg;
reg [31:0] main_preheaderi_gep_int269;
reg [31:0] main_preheaderi_gep_int269_reg;
reg [31:0] main_preheaderi_gep_array270;
reg [31:0] main_preheaderi_gep_array270_reg;
reg [31:0] main_preheaderi_gep271;
reg [31:0] main_preheaderi_gep271_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_276;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_276_reg;
reg [31:0] main_preheaderi_277;
reg [31:0] main_preheaderi_277_reg;
reg [31:0] main_preheaderi_gep_int272;
reg [31:0] main_preheaderi_gep_int272_reg;
reg [31:0] main_preheaderi_gep_array273;
reg [31:0] main_preheaderi_gep_array273_reg;
reg [31:0] main_preheaderi_gep274;
reg [31:0] main_preheaderi_gep274_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_278;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_278_reg;
reg [31:0] main_preheaderi_279;
reg [31:0] main_preheaderi_279_reg;
reg  main_preheaderi_280;
reg  main_preheaderi_280_reg;
reg [31:0] main_preheaderi_281;
reg [31:0] main_preheaderi_281_reg;
reg [31:0] main_preheaderi_282;
reg [31:0] main_preheaderi_282_reg;
reg [31:0] main_preheaderi_283;
reg [31:0] main_preheaderi_283_reg;
reg  main_preheaderi_exitcondi;
reg  main_preheaderi_exitcondi_reg;
reg [31:0] main_encryptexit_lcssa1;
reg [31:0] main_encryptexit_lcssa1_reg;
reg [31:0] main_285_j02ii1;
reg [31:0] main_285_j02ii1_reg;
reg [31:0] main_285_286;
reg [31:0] main_285_286_reg;
reg [31:0] main_285_gep_int275;
reg [31:0] main_285_gep_int275_reg;
reg [31:0] main_285_gep_array276;
reg [31:0] main_285_gep_array276_reg;
reg [31:0] main_285_gep277;
reg [31:0] main_285_gep277_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_285_287;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_285_287_reg;
reg [31:0] main_285_288;
reg [31:0] main_285_288_reg;
reg [31:0] main_285_289;
reg [31:0] main_285_289_reg;
reg [31:0] main_285_gep_int278;
reg [31:0] main_285_gep_int278_reg;
reg [31:0] main_285_gep_array279;
reg [31:0] main_285_gep_array279_reg;
reg [31:0] main_285_gep280;
reg [31:0] main_285_gep280_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_285_290;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_285_290_reg;
reg [31:0] main_285_291;
reg [31:0] main_285_291_reg;
reg [31:0] main_285_292;
reg [31:0] main_285_292_reg;
reg [31:0] main_285_gep_int281;
reg [31:0] main_285_gep_int281_reg;
reg [31:0] main_285_gep282;
reg [31:0] main_285_gep282_reg;
reg [31:0] main_285_gep_array283;
reg [31:0] main_285_gep_array283_reg;
reg [31:0] main_285_gep284;
reg [31:0] main_285_gep284_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_285_293;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_285_293_reg;
reg [31:0] main_285_294;
reg [31:0] main_285_294_reg;
reg [31:0] main_285_295;
reg [31:0] main_285_295_reg;
reg [31:0] main_285_gep_int285;
reg [31:0] main_285_gep_int285_reg;
reg [31:0] main_285_gep_array286;
reg [31:0] main_285_gep_array286_reg;
reg [31:0] main_285_gep287;
reg [31:0] main_285_gep287_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_285_296;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_285_296_reg;
reg [31:0] main_285_297;
reg [31:0] main_285_297_reg;
reg [31:0] main_285_298;
reg [31:0] main_285_298_reg;
reg [31:0] main_285_gep_int288;
reg [31:0] main_285_gep_int288_reg;
reg [31:0] main_285_gep289;
reg [31:0] main_285_gep289_reg;
reg [31:0] main_285_gep_array290;
reg [31:0] main_285_gep_array290_reg;
reg [31:0] main_285_gep291;
reg [31:0] main_285_gep291_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_285_299;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_285_299_reg;
reg [31:0] main_285_300;
reg [31:0] main_285_300_reg;
reg [31:0] main_285_301;
reg [31:0] main_285_301_reg;
reg [31:0] main_285_gep_int292;
reg [31:0] main_285_gep_int292_reg;
reg [31:0] main_285_gep_array293;
reg [31:0] main_285_gep_array293_reg;
reg [31:0] main_285_gep294;
reg [31:0] main_285_gep294_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_285_302;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_285_302_reg;
reg [31:0] main_285_303;
reg [31:0] main_285_303_reg;
reg [31:0] main_285_304;
reg [31:0] main_285_304_reg;
reg [31:0] main_285_gep_int295;
reg [31:0] main_285_gep_int295_reg;
reg [31:0] main_285_gep296;
reg [31:0] main_285_gep296_reg;
reg [31:0] main_285_gep_array297;
reg [31:0] main_285_gep_array297_reg;
reg [31:0] main_285_gep298;
reg [31:0] main_285_gep298_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_285_305;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_285_305_reg;
reg [31:0] main_285_306;
reg [31:0] main_285_306_reg;
reg [31:0] main_285_307;
reg [31:0] main_285_307_reg;
reg [31:0] main_285_gep_int299;
reg [31:0] main_285_gep_int299_reg;
reg [31:0] main_285_gep_array300;
reg [31:0] main_285_gep_array300_reg;
reg [31:0] main_285_gep301;
reg [31:0] main_285_gep301_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_285_308;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_285_308_reg;
reg [31:0] main_285_309;
reg [31:0] main_285_309_reg;
reg [31:0] main_285_310;
reg [31:0] main_285_310_reg;
reg [31:0] main_285_311;
reg [31:0] main_285_311_reg;
reg  main_285_exitcond34;
reg  main_285_exitcond34_reg;
reg [31:0] main_preheaderii4_j11ii3;
reg [31:0] main_preheaderii4_j11ii3_reg;
reg [31:0] main_preheaderii4_312;
reg [31:0] main_preheaderii4_312_reg;
reg [31:0] main_preheaderii4_gep_int302;
reg [31:0] main_preheaderii4_gep_int302_reg;
reg [31:0] main_preheaderii4_gep_array303;
reg [31:0] main_preheaderii4_gep_array303_reg;
reg [31:0] main_preheaderii4_gep304;
reg [31:0] main_preheaderii4_gep304_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_313;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_313_reg;
reg [31:0] main_preheaderii4_314;
reg [31:0] main_preheaderii4_314_reg;
reg [31:0] main_preheaderii4_315;
reg [31:0] main_preheaderii4_315_reg;
reg [31:0] main_preheaderii4_gep_int305;
reg [31:0] main_preheaderii4_gep_int305_reg;
reg [31:0] main_preheaderii4_gep_array306;
reg [31:0] main_preheaderii4_gep_array306_reg;
reg [31:0] main_preheaderii4_gep307;
reg [31:0] main_preheaderii4_gep307_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_316;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_316_reg;
reg [31:0] main_preheaderii4_317;
reg [31:0] main_preheaderii4_317_reg;
reg [31:0] main_preheaderii4_318;
reg [31:0] main_preheaderii4_318_reg;
reg [31:0] main_preheaderii4_gep_int308;
reg [31:0] main_preheaderii4_gep_int308_reg;
reg [31:0] main_preheaderii4_gep309;
reg [31:0] main_preheaderii4_gep309_reg;
reg [31:0] main_preheaderii4_gep_array310;
reg [31:0] main_preheaderii4_gep_array310_reg;
reg [31:0] main_preheaderii4_gep311;
reg [31:0] main_preheaderii4_gep311_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_319;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_319_reg;
reg [31:0] main_preheaderii4_320;
reg [31:0] main_preheaderii4_320_reg;
reg [31:0] main_preheaderii4_321;
reg [31:0] main_preheaderii4_321_reg;
reg [31:0] main_preheaderii4_gep_int312;
reg [31:0] main_preheaderii4_gep_int312_reg;
reg [31:0] main_preheaderii4_gep_array313;
reg [31:0] main_preheaderii4_gep_array313_reg;
reg [31:0] main_preheaderii4_gep314;
reg [31:0] main_preheaderii4_gep314_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_322;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_322_reg;
reg [31:0] main_preheaderii4_323;
reg [31:0] main_preheaderii4_323_reg;
reg [31:0] main_preheaderii4_324;
reg [31:0] main_preheaderii4_324_reg;
reg [31:0] main_preheaderii4_gep_int315;
reg [31:0] main_preheaderii4_gep_int315_reg;
reg [31:0] main_preheaderii4_gep316;
reg [31:0] main_preheaderii4_gep316_reg;
reg [31:0] main_preheaderii4_gep_array317;
reg [31:0] main_preheaderii4_gep_array317_reg;
reg [31:0] main_preheaderii4_gep318;
reg [31:0] main_preheaderii4_gep318_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_325;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_325_reg;
reg [31:0] main_preheaderii4_326;
reg [31:0] main_preheaderii4_326_reg;
reg [31:0] main_preheaderii4_327;
reg [31:0] main_preheaderii4_327_reg;
reg [31:0] main_preheaderii4_gep_int319;
reg [31:0] main_preheaderii4_gep_int319_reg;
reg [31:0] main_preheaderii4_gep_array320;
reg [31:0] main_preheaderii4_gep_array320_reg;
reg [31:0] main_preheaderii4_gep321;
reg [31:0] main_preheaderii4_gep321_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_328;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_328_reg;
reg [31:0] main_preheaderii4_329;
reg [31:0] main_preheaderii4_329_reg;
reg [31:0] main_preheaderii4_330;
reg [31:0] main_preheaderii4_330_reg;
reg [31:0] main_preheaderii4_gep_int322;
reg [31:0] main_preheaderii4_gep_int322_reg;
reg [31:0] main_preheaderii4_gep323;
reg [31:0] main_preheaderii4_gep323_reg;
reg [31:0] main_preheaderii4_gep_array324;
reg [31:0] main_preheaderii4_gep_array324_reg;
reg [31:0] main_preheaderii4_gep325;
reg [31:0] main_preheaderii4_gep325_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_331;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_331_reg;
reg [31:0] main_preheaderii4_332;
reg [31:0] main_preheaderii4_332_reg;
reg [31:0] main_preheaderii4_333;
reg [31:0] main_preheaderii4_333_reg;
reg [31:0] main_preheaderii4_gep_int326;
reg [31:0] main_preheaderii4_gep_int326_reg;
reg [31:0] main_preheaderii4_gep_array327;
reg [31:0] main_preheaderii4_gep_array327_reg;
reg [31:0] main_preheaderii4_gep328;
reg [31:0] main_preheaderii4_gep328_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_334;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_334_reg;
reg [31:0] main_preheaderii4_335;
reg [31:0] main_preheaderii4_335_reg;
reg [31:0] main_preheaderii4_336;
reg [31:0] main_preheaderii4_336_reg;
reg  main_preheaderii4_exitcond33;
reg  main_preheaderii4_exitcond33_reg;
reg [31:0] main_lrph12ipreheader_337;
reg [31:0] main_lrph12ipreheader_337_reg;
reg [31:0] main_lrph12ipreheader_338;
reg [31:0] main_lrph12ipreheader_338_reg;
reg [31:0] main_lrph12ipreheader_339;
reg [31:0] main_lrph12ipreheader_339_reg;
reg [31:0] main_lrph12ipreheader_gep_int329;
reg [31:0] main_lrph12ipreheader_gep_int329_reg;
reg [31:0] main_lrph12ipreheader_gep_array330;
reg [31:0] main_lrph12ipreheader_gep_array330_reg;
reg [31:0] main_lrph12ipreheader_gep331;
reg [31:0] main_lrph12ipreheader_gep331_reg;
reg [31:0] main_lrph12ipreheader_gep_array332;
reg [31:0] main_lrph12ipreheader_gep_array332_reg;
reg [31:0] main_lrph12ipreheader_gep333;
reg [31:0] main_lrph12ipreheader_gep333_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_340;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_340_reg;
reg [31:0] main_lrph12ipreheader_341;
reg [31:0] main_lrph12ipreheader_341_reg;
reg [31:0] main_lrph12ipreheader_342;
reg [31:0] main_lrph12ipreheader_342_reg;
reg [31:0] main_lrph12ipreheader_343;
reg [31:0] main_lrph12ipreheader_343_reg;
reg [31:0] main_lrph12ipreheader_344;
reg [31:0] main_lrph12ipreheader_344_reg;
reg [31:0] main_lrph12ipreheader_gep_int334;
reg [31:0] main_lrph12ipreheader_gep_int334_reg;
reg [31:0] main_lrph12ipreheader_gep_array335;
reg [31:0] main_lrph12ipreheader_gep_array335_reg;
reg [31:0] main_lrph12ipreheader_gep336;
reg [31:0] main_lrph12ipreheader_gep336_reg;
reg [31:0] main_lrph12ipreheader_gep_array337;
reg [31:0] main_lrph12ipreheader_gep_array337_reg;
reg [31:0] main_lrph12ipreheader_gep338;
reg [31:0] main_lrph12ipreheader_gep338_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_345;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_345_reg;
reg [31:0] main_lrph12ipreheader_346;
reg [31:0] main_lrph12ipreheader_346_reg;
reg [31:0] main_lrph12ipreheader_347;
reg [31:0] main_lrph12ipreheader_347_reg;
reg [31:0] main_lrph12ipreheader_348;
reg [31:0] main_lrph12ipreheader_348_reg;
reg [31:0] main_lrph12ipreheader_349;
reg [31:0] main_lrph12ipreheader_349_reg;
reg [31:0] main_lrph12ipreheader_gep_int339;
reg [31:0] main_lrph12ipreheader_gep_int339_reg;
reg [31:0] main_lrph12ipreheader_gep_array340;
reg [31:0] main_lrph12ipreheader_gep_array340_reg;
reg [31:0] main_lrph12ipreheader_gep341;
reg [31:0] main_lrph12ipreheader_gep341_reg;
reg [31:0] main_lrph12ipreheader_gep_array342;
reg [31:0] main_lrph12ipreheader_gep_array342_reg;
reg [31:0] main_lrph12ipreheader_gep343;
reg [31:0] main_lrph12ipreheader_gep343_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_350;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_350_reg;
reg [31:0] main_lrph12ipreheader_351;
reg [31:0] main_lrph12ipreheader_351_reg;
reg [31:0] main_lrph12ipreheader_352;
reg [31:0] main_lrph12ipreheader_352_reg;
reg [31:0] main_lrph12ipreheader_353;
reg [31:0] main_lrph12ipreheader_353_reg;
reg [31:0] main_lrph12ipreheader_354;
reg [31:0] main_lrph12ipreheader_354_reg;
reg [31:0] main_lrph12ipreheader_gep_int344;
reg [31:0] main_lrph12ipreheader_gep_int344_reg;
reg [31:0] main_lrph12ipreheader_gep_array345;
reg [31:0] main_lrph12ipreheader_gep_array345_reg;
reg [31:0] main_lrph12ipreheader_gep346;
reg [31:0] main_lrph12ipreheader_gep346_reg;
reg [31:0] main_lrph12ipreheader_gep_array347;
reg [31:0] main_lrph12ipreheader_gep_array347_reg;
reg [31:0] main_lrph12ipreheader_gep348;
reg [31:0] main_lrph12ipreheader_gep348_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_355;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_355_reg;
reg [31:0] main_lrph12ipreheader_356;
reg [31:0] main_lrph12ipreheader_356_reg;
reg [31:0] main_lrph12ipreheader_357;
reg [31:0] main_lrph12ipreheader_357_reg;
reg [31:0] main_lrph12ipreheader_358;
reg [31:0] main_lrph12ipreheader_358_reg;
reg [31:0] main_lrph12ipreheader_359;
reg [31:0] main_lrph12ipreheader_359_reg;
reg [31:0] main_lrph12ipreheader_gep_int349;
reg [31:0] main_lrph12ipreheader_gep_int349_reg;
reg [31:0] main_lrph12ipreheader_gep_array350;
reg [31:0] main_lrph12ipreheader_gep_array350_reg;
reg [31:0] main_lrph12ipreheader_gep351;
reg [31:0] main_lrph12ipreheader_gep351_reg;
reg [31:0] main_lrph12ipreheader_gep_array352;
reg [31:0] main_lrph12ipreheader_gep_array352_reg;
reg [31:0] main_lrph12ipreheader_gep353;
reg [31:0] main_lrph12ipreheader_gep353_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_360;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_360_reg;
reg [31:0] main_lrph12ipreheader_361;
reg [31:0] main_lrph12ipreheader_361_reg;
reg [31:0] main_lrph12ipreheader_362;
reg [31:0] main_lrph12ipreheader_362_reg;
reg [31:0] main_lrph12ipreheader_363;
reg [31:0] main_lrph12ipreheader_363_reg;
reg [31:0] main_lrph12ipreheader_364;
reg [31:0] main_lrph12ipreheader_364_reg;
reg [31:0] main_lrph12ipreheader_gep_int354;
reg [31:0] main_lrph12ipreheader_gep_int354_reg;
reg [31:0] main_lrph12ipreheader_gep_array355;
reg [31:0] main_lrph12ipreheader_gep_array355_reg;
reg [31:0] main_lrph12ipreheader_gep356;
reg [31:0] main_lrph12ipreheader_gep356_reg;
reg [31:0] main_lrph12ipreheader_gep_array357;
reg [31:0] main_lrph12ipreheader_gep_array357_reg;
reg [31:0] main_lrph12ipreheader_gep358;
reg [31:0] main_lrph12ipreheader_gep358_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_365;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_365_reg;
reg [31:0] main_lrph12ipreheader_366;
reg [31:0] main_lrph12ipreheader_366_reg;
reg [31:0] main_lrph12ipreheader_367;
reg [31:0] main_lrph12ipreheader_367_reg;
reg [31:0] main_lrph12ipreheader_368;
reg [31:0] main_lrph12ipreheader_368_reg;
reg [31:0] main_lrph12ipreheader_369;
reg [31:0] main_lrph12ipreheader_369_reg;
reg [31:0] main_lrph12ipreheader_gep_int359;
reg [31:0] main_lrph12ipreheader_gep_int359_reg;
reg [31:0] main_lrph12ipreheader_gep_array360;
reg [31:0] main_lrph12ipreheader_gep_array360_reg;
reg [31:0] main_lrph12ipreheader_gep361;
reg [31:0] main_lrph12ipreheader_gep361_reg;
reg [31:0] main_lrph12ipreheader_gep_array362;
reg [31:0] main_lrph12ipreheader_gep_array362_reg;
reg [31:0] main_lrph12ipreheader_gep363;
reg [31:0] main_lrph12ipreheader_gep363_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_370;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_370_reg;
reg [31:0] main_lrph12ipreheader_371;
reg [31:0] main_lrph12ipreheader_371_reg;
reg [31:0] main_lrph12ipreheader_372;
reg [31:0] main_lrph12ipreheader_372_reg;
reg [31:0] main_lrph12ipreheader_373;
reg [31:0] main_lrph12ipreheader_373_reg;
reg [31:0] main_lrph12ipreheader_374;
reg [31:0] main_lrph12ipreheader_374_reg;
reg [31:0] main_lrph12ipreheader_gep_int364;
reg [31:0] main_lrph12ipreheader_gep_int364_reg;
reg [31:0] main_lrph12ipreheader_gep_array365;
reg [31:0] main_lrph12ipreheader_gep_array365_reg;
reg [31:0] main_lrph12ipreheader_gep366;
reg [31:0] main_lrph12ipreheader_gep366_reg;
reg [31:0] main_lrph12ipreheader_gep_array367;
reg [31:0] main_lrph12ipreheader_gep_array367_reg;
reg [31:0] main_lrph12ipreheader_gep368;
reg [31:0] main_lrph12ipreheader_gep368_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_375;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_375_reg;
reg [31:0] main_lrph12ipreheader_376;
reg [31:0] main_lrph12ipreheader_376_reg;
reg [31:0] main_lrph12ipreheader_377;
reg [31:0] main_lrph12ipreheader_377_reg;
reg [31:0] main_lrph12ipreheader_378;
reg [31:0] main_lrph12ipreheader_378_reg;
reg [31:0] main_lrph12ipreheader_379;
reg [31:0] main_lrph12ipreheader_379_reg;
reg [31:0] main_lrph12ipreheader_gep_int369;
reg [31:0] main_lrph12ipreheader_gep_int369_reg;
reg [31:0] main_lrph12ipreheader_gep_array370;
reg [31:0] main_lrph12ipreheader_gep_array370_reg;
reg [31:0] main_lrph12ipreheader_gep371;
reg [31:0] main_lrph12ipreheader_gep371_reg;
reg [31:0] main_lrph12ipreheader_gep_array372;
reg [31:0] main_lrph12ipreheader_gep_array372_reg;
reg [31:0] main_lrph12ipreheader_gep373;
reg [31:0] main_lrph12ipreheader_gep373_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_380;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_380_reg;
reg [31:0] main_lrph12ipreheader_381;
reg [31:0] main_lrph12ipreheader_381_reg;
reg [31:0] main_lrph12ipreheader_382;
reg [31:0] main_lrph12ipreheader_382_reg;
reg [31:0] main_lrph12ipreheader_383;
reg [31:0] main_lrph12ipreheader_383_reg;
reg [31:0] main_lrph12ipreheader_384;
reg [31:0] main_lrph12ipreheader_384_reg;
reg [31:0] main_lrph12ipreheader_gep_int374;
reg [31:0] main_lrph12ipreheader_gep_int374_reg;
reg [31:0] main_lrph12ipreheader_gep_array375;
reg [31:0] main_lrph12ipreheader_gep_array375_reg;
reg [31:0] main_lrph12ipreheader_gep376;
reg [31:0] main_lrph12ipreheader_gep376_reg;
reg [31:0] main_lrph12ipreheader_gep_array377;
reg [31:0] main_lrph12ipreheader_gep_array377_reg;
reg [31:0] main_lrph12ipreheader_gep378;
reg [31:0] main_lrph12ipreheader_gep378_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_385;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_385_reg;
reg [31:0] main_lrph12ipreheader_386;
reg [31:0] main_lrph12ipreheader_386_reg;
reg [31:0] main_lrph12ipreheader_387;
reg [31:0] main_lrph12ipreheader_387_reg;
reg [31:0] main_lrph12ipreheader_388;
reg [31:0] main_lrph12ipreheader_388_reg;
reg [31:0] main_lrph12ipreheader_389;
reg [31:0] main_lrph12ipreheader_389_reg;
reg [31:0] main_lrph12ipreheader_gep_int379;
reg [31:0] main_lrph12ipreheader_gep_int379_reg;
reg [31:0] main_lrph12ipreheader_gep_array380;
reg [31:0] main_lrph12ipreheader_gep_array380_reg;
reg [31:0] main_lrph12ipreheader_gep381;
reg [31:0] main_lrph12ipreheader_gep381_reg;
reg [31:0] main_lrph12ipreheader_gep_array382;
reg [31:0] main_lrph12ipreheader_gep_array382_reg;
reg [31:0] main_lrph12ipreheader_gep383;
reg [31:0] main_lrph12ipreheader_gep383_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_390;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_390_reg;
reg [31:0] main_lrph12ipreheader_391;
reg [31:0] main_lrph12ipreheader_391_reg;
reg [31:0] main_lrph12ipreheader_392;
reg [31:0] main_lrph12ipreheader_392_reg;
reg [31:0] main_lrph12ipreheader_393;
reg [31:0] main_lrph12ipreheader_393_reg;
reg [31:0] main_lrph12ipreheader_394;
reg [31:0] main_lrph12ipreheader_394_reg;
reg [31:0] main_lrph12ipreheader_gep_int384;
reg [31:0] main_lrph12ipreheader_gep_int384_reg;
reg [31:0] main_lrph12ipreheader_gep_array385;
reg [31:0] main_lrph12ipreheader_gep_array385_reg;
reg [31:0] main_lrph12ipreheader_gep386;
reg [31:0] main_lrph12ipreheader_gep386_reg;
reg [31:0] main_lrph12ipreheader_gep_array387;
reg [31:0] main_lrph12ipreheader_gep_array387_reg;
reg [31:0] main_lrph12ipreheader_gep388;
reg [31:0] main_lrph12ipreheader_gep388_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_395;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_395_reg;
reg [31:0] main_lrph12ipreheader_396;
reg [31:0] main_lrph12ipreheader_396_reg;
reg [31:0] main_lrph12ipreheader_397;
reg [31:0] main_lrph12ipreheader_397_reg;
reg [31:0] main_lrph12ipreheader_398;
reg [31:0] main_lrph12ipreheader_398_reg;
reg [31:0] main_lrph12ipreheader_399;
reg [31:0] main_lrph12ipreheader_399_reg;
reg [31:0] main_lrph12ipreheader_gep_int389;
reg [31:0] main_lrph12ipreheader_gep_int389_reg;
reg [31:0] main_lrph12ipreheader_gep_array390;
reg [31:0] main_lrph12ipreheader_gep_array390_reg;
reg [31:0] main_lrph12ipreheader_gep391;
reg [31:0] main_lrph12ipreheader_gep391_reg;
reg [31:0] main_lrph12ipreheader_gep_array392;
reg [31:0] main_lrph12ipreheader_gep_array392_reg;
reg [31:0] main_lrph12ipreheader_gep393;
reg [31:0] main_lrph12ipreheader_gep393_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_400;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_400_reg;
reg [31:0] main_lrph12ipreheader_401;
reg [31:0] main_lrph12ipreheader_401_reg;
reg [31:0] main_lrph12ipreheader_402;
reg [31:0] main_lrph12ipreheader_402_reg;
reg [31:0] main_lrph12ipreheader_403;
reg [31:0] main_lrph12ipreheader_403_reg;
reg [31:0] main_lrph12ipreheader_404;
reg [31:0] main_lrph12ipreheader_404_reg;
reg [31:0] main_lrph12ipreheader_gep_int394;
reg [31:0] main_lrph12ipreheader_gep_int394_reg;
reg [31:0] main_lrph12ipreheader_gep_array395;
reg [31:0] main_lrph12ipreheader_gep_array395_reg;
reg [31:0] main_lrph12ipreheader_gep396;
reg [31:0] main_lrph12ipreheader_gep396_reg;
reg [31:0] main_lrph12ipreheader_gep_array397;
reg [31:0] main_lrph12ipreheader_gep_array397_reg;
reg [31:0] main_lrph12ipreheader_gep398;
reg [31:0] main_lrph12ipreheader_gep398_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_405;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_405_reg;
reg [31:0] main_lrph12ipreheader_406;
reg [31:0] main_lrph12ipreheader_406_reg;
reg [31:0] main_lrph12ipreheader_407;
reg [31:0] main_lrph12ipreheader_407_reg;
reg [31:0] main_lrph12ipreheader_408;
reg [31:0] main_lrph12ipreheader_408_reg;
reg [31:0] main_lrph12ipreheader_409;
reg [31:0] main_lrph12ipreheader_409_reg;
reg [31:0] main_lrph12ipreheader_gep_int399;
reg [31:0] main_lrph12ipreheader_gep_int399_reg;
reg [31:0] main_lrph12ipreheader_gep_array400;
reg [31:0] main_lrph12ipreheader_gep_array400_reg;
reg [31:0] main_lrph12ipreheader_gep401;
reg [31:0] main_lrph12ipreheader_gep401_reg;
reg [31:0] main_lrph12ipreheader_gep_array402;
reg [31:0] main_lrph12ipreheader_gep_array402_reg;
reg [31:0] main_lrph12ipreheader_gep403;
reg [31:0] main_lrph12ipreheader_gep403_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_410;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_410_reg;
reg [31:0] main_lrph12ipreheader_411;
reg [31:0] main_lrph12ipreheader_411_reg;
reg [31:0] main_lrph12ipreheader_412;
reg [31:0] main_lrph12ipreheader_412_reg;
reg [31:0] main_lrph12ipreheader_413;
reg [31:0] main_lrph12ipreheader_413_reg;
reg [31:0] main_lrph12ipreheader_414;
reg [31:0] main_lrph12ipreheader_414_reg;
reg [31:0] main_lrph12ipreheader_gep_int404;
reg [31:0] main_lrph12ipreheader_gep_int404_reg;
reg [31:0] main_lrph12ipreheader_gep_array405;
reg [31:0] main_lrph12ipreheader_gep_array405_reg;
reg [31:0] main_lrph12ipreheader_gep406;
reg [31:0] main_lrph12ipreheader_gep406_reg;
reg [31:0] main_lrph12ipreheader_gep_array407;
reg [31:0] main_lrph12ipreheader_gep_array407_reg;
reg [31:0] main_lrph12ipreheader_gep408;
reg [31:0] main_lrph12ipreheader_gep408_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_415;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_415_reg;
reg [31:0] main_lrph12ipreheader_416;
reg [31:0] main_lrph12ipreheader_416_reg;
reg [31:0] main_lrph12i_i011i;
reg [31:0] main_lrph12i_i011i_reg;
reg [31:0] main_lrph12i_418;
reg [31:0] main_lrph12i_418_reg;
reg [31:0] main_lrph12i_419;
reg [31:0] main_lrph12i_419_reg;
reg [31:0] main_lrph12i_420;
reg [31:0] main_lrph12i_420_reg;
reg [31:0] main_lrph12i_gep_int409;
reg [31:0] main_lrph12i_gep_int409_reg;
reg [31:0] main_lrph12i_gep_array410;
reg [31:0] main_lrph12i_gep_array410_reg;
reg [31:0] main_lrph12i_gep411;
reg [31:0] main_lrph12i_gep411_reg;
reg [31:0] main_lrph12i_gep_array412;
reg [31:0] main_lrph12i_gep_array412_reg;
reg [31:0] main_lrph12i_gep413;
reg [31:0] main_lrph12i_gep413_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_421;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_421_reg;
reg [31:0] main_lrph12i_422;
reg [31:0] main_lrph12i_422_reg;
reg [31:0] main_lrph12i_423;
reg [31:0] main_lrph12i_423_reg;
reg [31:0] main_lrph12i_424;
reg [31:0] main_lrph12i_424_reg;
reg [31:0] main_lrph12i_425;
reg [31:0] main_lrph12i_425_reg;
reg [31:0] main_lrph12i_gep_int414;
reg [31:0] main_lrph12i_gep_int414_reg;
reg [31:0] main_lrph12i_gep_array415;
reg [31:0] main_lrph12i_gep_array415_reg;
reg [31:0] main_lrph12i_gep416;
reg [31:0] main_lrph12i_gep416_reg;
reg [31:0] main_lrph12i_gep_array417;
reg [31:0] main_lrph12i_gep_array417_reg;
reg [31:0] main_lrph12i_gep418;
reg [31:0] main_lrph12i_gep418_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_426;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_426_reg;
reg [31:0] main_lrph12i_427;
reg [31:0] main_lrph12i_427_reg;
reg [31:0] main_lrph12i_428;
reg [31:0] main_lrph12i_428_reg;
reg [31:0] main_lrph12i_429;
reg [31:0] main_lrph12i_429_reg;
reg [31:0] main_lrph12i_430;
reg [31:0] main_lrph12i_430_reg;
reg [31:0] main_lrph12i_gep_int419;
reg [31:0] main_lrph12i_gep_int419_reg;
reg [31:0] main_lrph12i_gep_array420;
reg [31:0] main_lrph12i_gep_array420_reg;
reg [31:0] main_lrph12i_gep421;
reg [31:0] main_lrph12i_gep421_reg;
reg [31:0] main_lrph12i_gep_array422;
reg [31:0] main_lrph12i_gep_array422_reg;
reg [31:0] main_lrph12i_gep423;
reg [31:0] main_lrph12i_gep423_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_431;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_431_reg;
reg [31:0] main_lrph12i_432;
reg [31:0] main_lrph12i_432_reg;
reg [31:0] main_lrph12i_433;
reg [31:0] main_lrph12i_433_reg;
reg [31:0] main_lrph12i_434;
reg [31:0] main_lrph12i_434_reg;
reg [31:0] main_lrph12i_435;
reg [31:0] main_lrph12i_435_reg;
reg [31:0] main_lrph12i_gep_int424;
reg [31:0] main_lrph12i_gep_int424_reg;
reg [31:0] main_lrph12i_gep_array425;
reg [31:0] main_lrph12i_gep_array425_reg;
reg [31:0] main_lrph12i_gep426;
reg [31:0] main_lrph12i_gep426_reg;
reg [31:0] main_lrph12i_gep_array427;
reg [31:0] main_lrph12i_gep_array427_reg;
reg [31:0] main_lrph12i_gep428;
reg [31:0] main_lrph12i_gep428_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_436;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_436_reg;
reg [31:0] main_lrph12i_437;
reg [31:0] main_lrph12i_437_reg;
reg [31:0] main_lrph12i_438;
reg [31:0] main_lrph12i_438_reg;
reg [31:0] main_lrph12i_439;
reg [31:0] main_lrph12i_439_reg;
reg [31:0] main_lrph12i_440;
reg [31:0] main_lrph12i_440_reg;
reg [31:0] main_lrph12i_gep_int429;
reg [31:0] main_lrph12i_gep_int429_reg;
reg [31:0] main_lrph12i_gep_array430;
reg [31:0] main_lrph12i_gep_array430_reg;
reg [31:0] main_lrph12i_gep431;
reg [31:0] main_lrph12i_gep431_reg;
reg [31:0] main_lrph12i_gep_array432;
reg [31:0] main_lrph12i_gep_array432_reg;
reg [31:0] main_lrph12i_gep433;
reg [31:0] main_lrph12i_gep433_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_441;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_441_reg;
reg [31:0] main_lrph12i_442;
reg [31:0] main_lrph12i_442_reg;
reg [31:0] main_lrph12i_443;
reg [31:0] main_lrph12i_443_reg;
reg [31:0] main_lrph12i_444;
reg [31:0] main_lrph12i_444_reg;
reg [31:0] main_lrph12i_445;
reg [31:0] main_lrph12i_445_reg;
reg [31:0] main_lrph12i_gep_int434;
reg [31:0] main_lrph12i_gep_int434_reg;
reg [31:0] main_lrph12i_gep_array435;
reg [31:0] main_lrph12i_gep_array435_reg;
reg [31:0] main_lrph12i_gep436;
reg [31:0] main_lrph12i_gep436_reg;
reg [31:0] main_lrph12i_gep_array437;
reg [31:0] main_lrph12i_gep_array437_reg;
reg [31:0] main_lrph12i_gep438;
reg [31:0] main_lrph12i_gep438_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_446;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_446_reg;
reg [31:0] main_lrph12i_447;
reg [31:0] main_lrph12i_447_reg;
reg [31:0] main_lrph12i_448;
reg [31:0] main_lrph12i_448_reg;
reg [31:0] main_lrph12i_449;
reg [31:0] main_lrph12i_449_reg;
reg [31:0] main_lrph12i_450;
reg [31:0] main_lrph12i_450_reg;
reg [31:0] main_lrph12i_gep_int439;
reg [31:0] main_lrph12i_gep_int439_reg;
reg [31:0] main_lrph12i_gep_array440;
reg [31:0] main_lrph12i_gep_array440_reg;
reg [31:0] main_lrph12i_gep441;
reg [31:0] main_lrph12i_gep441_reg;
reg [31:0] main_lrph12i_gep_array442;
reg [31:0] main_lrph12i_gep_array442_reg;
reg [31:0] main_lrph12i_gep443;
reg [31:0] main_lrph12i_gep443_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_451;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_451_reg;
reg [31:0] main_lrph12i_452;
reg [31:0] main_lrph12i_452_reg;
reg [31:0] main_lrph12i_453;
reg [31:0] main_lrph12i_453_reg;
reg [31:0] main_lrph12i_454;
reg [31:0] main_lrph12i_454_reg;
reg [31:0] main_lrph12i_455;
reg [31:0] main_lrph12i_455_reg;
reg [31:0] main_lrph12i_gep_int444;
reg [31:0] main_lrph12i_gep_int444_reg;
reg [31:0] main_lrph12i_gep_array445;
reg [31:0] main_lrph12i_gep_array445_reg;
reg [31:0] main_lrph12i_gep446;
reg [31:0] main_lrph12i_gep446_reg;
reg [31:0] main_lrph12i_gep_array447;
reg [31:0] main_lrph12i_gep_array447_reg;
reg [31:0] main_lrph12i_gep448;
reg [31:0] main_lrph12i_gep448_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_456;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_456_reg;
reg [31:0] main_lrph12i_457;
reg [31:0] main_lrph12i_457_reg;
reg [31:0] main_lrph12i_458;
reg [31:0] main_lrph12i_458_reg;
reg [31:0] main_lrph12i_459;
reg [31:0] main_lrph12i_459_reg;
reg [31:0] main_lrph12i_460;
reg [31:0] main_lrph12i_460_reg;
reg [31:0] main_lrph12i_gep_int449;
reg [31:0] main_lrph12i_gep_int449_reg;
reg [31:0] main_lrph12i_gep_array450;
reg [31:0] main_lrph12i_gep_array450_reg;
reg [31:0] main_lrph12i_gep451;
reg [31:0] main_lrph12i_gep451_reg;
reg [31:0] main_lrph12i_gep_array452;
reg [31:0] main_lrph12i_gep_array452_reg;
reg [31:0] main_lrph12i_gep453;
reg [31:0] main_lrph12i_gep453_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_461;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_461_reg;
reg [31:0] main_lrph12i_462;
reg [31:0] main_lrph12i_462_reg;
reg [31:0] main_lrph12i_463;
reg [31:0] main_lrph12i_463_reg;
reg [31:0] main_lrph12i_464;
reg [31:0] main_lrph12i_464_reg;
reg [31:0] main_lrph12i_465;
reg [31:0] main_lrph12i_465_reg;
reg [31:0] main_lrph12i_gep_int454;
reg [31:0] main_lrph12i_gep_int454_reg;
reg [31:0] main_lrph12i_gep_array455;
reg [31:0] main_lrph12i_gep_array455_reg;
reg [31:0] main_lrph12i_gep456;
reg [31:0] main_lrph12i_gep456_reg;
reg [31:0] main_lrph12i_gep_array457;
reg [31:0] main_lrph12i_gep_array457_reg;
reg [31:0] main_lrph12i_gep458;
reg [31:0] main_lrph12i_gep458_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_466;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_466_reg;
reg [31:0] main_lrph12i_467;
reg [31:0] main_lrph12i_467_reg;
reg [31:0] main_lrph12i_468;
reg [31:0] main_lrph12i_468_reg;
reg [31:0] main_lrph12i_469;
reg [31:0] main_lrph12i_469_reg;
reg [31:0] main_lrph12i_470;
reg [31:0] main_lrph12i_470_reg;
reg [31:0] main_lrph12i_gep_int459;
reg [31:0] main_lrph12i_gep_int459_reg;
reg [31:0] main_lrph12i_gep_array460;
reg [31:0] main_lrph12i_gep_array460_reg;
reg [31:0] main_lrph12i_gep461;
reg [31:0] main_lrph12i_gep461_reg;
reg [31:0] main_lrph12i_gep_array462;
reg [31:0] main_lrph12i_gep_array462_reg;
reg [31:0] main_lrph12i_gep463;
reg [31:0] main_lrph12i_gep463_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_471;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_471_reg;
reg [31:0] main_lrph12i_472;
reg [31:0] main_lrph12i_472_reg;
reg [31:0] main_lrph12i_473;
reg [31:0] main_lrph12i_473_reg;
reg [31:0] main_lrph12i_474;
reg [31:0] main_lrph12i_474_reg;
reg [31:0] main_lrph12i_475;
reg [31:0] main_lrph12i_475_reg;
reg [31:0] main_lrph12i_gep_int464;
reg [31:0] main_lrph12i_gep_int464_reg;
reg [31:0] main_lrph12i_gep_array465;
reg [31:0] main_lrph12i_gep_array465_reg;
reg [31:0] main_lrph12i_gep466;
reg [31:0] main_lrph12i_gep466_reg;
reg [31:0] main_lrph12i_gep_array467;
reg [31:0] main_lrph12i_gep_array467_reg;
reg [31:0] main_lrph12i_gep468;
reg [31:0] main_lrph12i_gep468_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_476;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_476_reg;
reg [31:0] main_lrph12i_477;
reg [31:0] main_lrph12i_477_reg;
reg [31:0] main_lrph12i_478;
reg [31:0] main_lrph12i_478_reg;
reg [31:0] main_lrph12i_479;
reg [31:0] main_lrph12i_479_reg;
reg [31:0] main_lrph12i_480;
reg [31:0] main_lrph12i_480_reg;
reg [31:0] main_lrph12i_gep_int469;
reg [31:0] main_lrph12i_gep_int469_reg;
reg [31:0] main_lrph12i_gep_array470;
reg [31:0] main_lrph12i_gep_array470_reg;
reg [31:0] main_lrph12i_gep471;
reg [31:0] main_lrph12i_gep471_reg;
reg [31:0] main_lrph12i_gep_array472;
reg [31:0] main_lrph12i_gep_array472_reg;
reg [31:0] main_lrph12i_gep473;
reg [31:0] main_lrph12i_gep473_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_481;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_481_reg;
reg [31:0] main_lrph12i_482;
reg [31:0] main_lrph12i_482_reg;
reg [31:0] main_lrph12i_483;
reg [31:0] main_lrph12i_483_reg;
reg [31:0] main_lrph12i_484;
reg [31:0] main_lrph12i_484_reg;
reg [31:0] main_lrph12i_485;
reg [31:0] main_lrph12i_485_reg;
reg [31:0] main_lrph12i_gep_int474;
reg [31:0] main_lrph12i_gep_int474_reg;
reg [31:0] main_lrph12i_gep_array475;
reg [31:0] main_lrph12i_gep_array475_reg;
reg [31:0] main_lrph12i_gep476;
reg [31:0] main_lrph12i_gep476_reg;
reg [31:0] main_lrph12i_gep_array477;
reg [31:0] main_lrph12i_gep_array477_reg;
reg [31:0] main_lrph12i_gep478;
reg [31:0] main_lrph12i_gep478_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_486;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_486_reg;
reg [31:0] main_lrph12i_487;
reg [31:0] main_lrph12i_487_reg;
reg [31:0] main_lrph12i_488;
reg [31:0] main_lrph12i_488_reg;
reg [31:0] main_lrph12i_489;
reg [31:0] main_lrph12i_489_reg;
reg [31:0] main_lrph12i_490;
reg [31:0] main_lrph12i_490_reg;
reg [31:0] main_lrph12i_gep_int479;
reg [31:0] main_lrph12i_gep_int479_reg;
reg [31:0] main_lrph12i_gep_array480;
reg [31:0] main_lrph12i_gep_array480_reg;
reg [31:0] main_lrph12i_gep481;
reg [31:0] main_lrph12i_gep481_reg;
reg [31:0] main_lrph12i_gep_array482;
reg [31:0] main_lrph12i_gep_array482_reg;
reg [31:0] main_lrph12i_gep483;
reg [31:0] main_lrph12i_gep483_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_491;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_491_reg;
reg [31:0] main_lrph12i_492;
reg [31:0] main_lrph12i_492_reg;
reg [31:0] main_lrph12i_493;
reg [31:0] main_lrph12i_493_reg;
reg [31:0] main_lrph12i_494;
reg [31:0] main_lrph12i_494_reg;
reg [31:0] main_lrph12i_495;
reg [31:0] main_lrph12i_495_reg;
reg [31:0] main_lrph12i_gep_int484;
reg [31:0] main_lrph12i_gep_int484_reg;
reg [31:0] main_lrph12i_gep_array485;
reg [31:0] main_lrph12i_gep_array485_reg;
reg [31:0] main_lrph12i_gep486;
reg [31:0] main_lrph12i_gep486_reg;
reg [31:0] main_lrph12i_gep_array487;
reg [31:0] main_lrph12i_gep_array487_reg;
reg [31:0] main_lrph12i_gep488;
reg [31:0] main_lrph12i_gep488_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_496;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_496_reg;
reg [31:0] main_lrph12i_497;
reg [31:0] main_lrph12i_497_reg;
reg [31:0] main_lrph12i_i0i;
reg [31:0] main_lrph12i_i0i_reg;
reg  main_lrph12i_498;
reg  main_lrph12i_498_reg;
reg [31:0] main__crit_edgei_j02i2i11;
reg [31:0] main__crit_edgei_j02i2i11_reg;
reg [31:0] main__crit_edgei_gep_int489;
reg [31:0] main__crit_edgei_gep_int489_reg;
reg [31:0] main__crit_edgei_gep_array490;
reg [31:0] main__crit_edgei_gep_array490_reg;
reg [31:0] main__crit_edgei_gep491;
reg [31:0] main__crit_edgei_gep491_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_499;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_499_reg;
reg [31:0] main__crit_edgei_500;
reg [31:0] main__crit_edgei_500_reg;
reg [31:0] main__crit_edgei_501;
reg [31:0] main__crit_edgei_501_reg;
reg [31:0] main__crit_edgei_gep_int492;
reg [31:0] main__crit_edgei_gep_int492_reg;
reg [31:0] main__crit_edgei_gep_array493;
reg [31:0] main__crit_edgei_gep_array493_reg;
reg [31:0] main__crit_edgei_gep494;
reg [31:0] main__crit_edgei_gep494_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_502;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_502_reg;
reg [31:0] main__crit_edgei_503;
reg [31:0] main__crit_edgei_503_reg;
reg [31:0] main__crit_edgei_504;
reg [31:0] main__crit_edgei_504_reg;
reg [31:0] main__crit_edgei_gep_int495;
reg [31:0] main__crit_edgei_gep_int495_reg;
reg [31:0] main__crit_edgei_gep496;
reg [31:0] main__crit_edgei_gep496_reg;
reg [31:0] main__crit_edgei_gep_array497;
reg [31:0] main__crit_edgei_gep_array497_reg;
reg [31:0] main__crit_edgei_gep498;
reg [31:0] main__crit_edgei_gep498_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_505;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_505_reg;
reg [31:0] main__crit_edgei_506;
reg [31:0] main__crit_edgei_506_reg;
reg [31:0] main__crit_edgei_507;
reg [31:0] main__crit_edgei_507_reg;
reg [31:0] main__crit_edgei_gep_int499;
reg [31:0] main__crit_edgei_gep_int499_reg;
reg [31:0] main__crit_edgei_gep_array500;
reg [31:0] main__crit_edgei_gep_array500_reg;
reg [31:0] main__crit_edgei_gep501;
reg [31:0] main__crit_edgei_gep501_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_508;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_508_reg;
reg [31:0] main__crit_edgei_509;
reg [31:0] main__crit_edgei_509_reg;
reg [31:0] main__crit_edgei_510;
reg [31:0] main__crit_edgei_510_reg;
reg [31:0] main__crit_edgei_gep_int502;
reg [31:0] main__crit_edgei_gep_int502_reg;
reg [31:0] main__crit_edgei_gep503;
reg [31:0] main__crit_edgei_gep503_reg;
reg [31:0] main__crit_edgei_gep_array504;
reg [31:0] main__crit_edgei_gep_array504_reg;
reg [31:0] main__crit_edgei_gep505;
reg [31:0] main__crit_edgei_gep505_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_511;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_511_reg;
reg [31:0] main__crit_edgei_512;
reg [31:0] main__crit_edgei_512_reg;
reg [31:0] main__crit_edgei_513;
reg [31:0] main__crit_edgei_513_reg;
reg [31:0] main__crit_edgei_gep_int506;
reg [31:0] main__crit_edgei_gep_int506_reg;
reg [31:0] main__crit_edgei_gep_array507;
reg [31:0] main__crit_edgei_gep_array507_reg;
reg [31:0] main__crit_edgei_gep508;
reg [31:0] main__crit_edgei_gep508_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_514;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_514_reg;
reg [31:0] main__crit_edgei_515;
reg [31:0] main__crit_edgei_515_reg;
reg [31:0] main__crit_edgei_516;
reg [31:0] main__crit_edgei_516_reg;
reg [31:0] main__crit_edgei_gep_int509;
reg [31:0] main__crit_edgei_gep_int509_reg;
reg [31:0] main__crit_edgei_gep510;
reg [31:0] main__crit_edgei_gep510_reg;
reg [31:0] main__crit_edgei_gep_array511;
reg [31:0] main__crit_edgei_gep_array511_reg;
reg [31:0] main__crit_edgei_gep512;
reg [31:0] main__crit_edgei_gep512_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_517;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_517_reg;
reg [31:0] main__crit_edgei_518;
reg [31:0] main__crit_edgei_518_reg;
reg [31:0] main__crit_edgei_519;
reg [31:0] main__crit_edgei_519_reg;
reg [31:0] main__crit_edgei_gep_int513;
reg [31:0] main__crit_edgei_gep_int513_reg;
reg [31:0] main__crit_edgei_gep_array514;
reg [31:0] main__crit_edgei_gep_array514_reg;
reg [31:0] main__crit_edgei_gep515;
reg [31:0] main__crit_edgei_gep515_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_520;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_520_reg;
reg [31:0] main__crit_edgei_521;
reg [31:0] main__crit_edgei_521_reg;
reg [31:0] main__crit_edgei_522;
reg [31:0] main__crit_edgei_522_reg;
reg [31:0] main__crit_edgei_523;
reg [31:0] main__crit_edgei_523_reg;
reg  main__crit_edgei_exitcond32;
reg  main__crit_edgei_exitcond32_reg;
reg [31:0] main_preheaderi4i14_j11i3i13;
reg [31:0] main_preheaderi4i14_j11i3i13_reg;
reg [31:0] main_preheaderi4i14_gep_int516;
reg [31:0] main_preheaderi4i14_gep_int516_reg;
reg [31:0] main_preheaderi4i14_gep_array517;
reg [31:0] main_preheaderi4i14_gep_array517_reg;
reg [31:0] main_preheaderi4i14_gep518;
reg [31:0] main_preheaderi4i14_gep518_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_524;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_524_reg;
reg [31:0] main_preheaderi4i14_525;
reg [31:0] main_preheaderi4i14_525_reg;
reg [31:0] main_preheaderi4i14_526;
reg [31:0] main_preheaderi4i14_526_reg;
reg [31:0] main_preheaderi4i14_gep_int519;
reg [31:0] main_preheaderi4i14_gep_int519_reg;
reg [31:0] main_preheaderi4i14_gep_array520;
reg [31:0] main_preheaderi4i14_gep_array520_reg;
reg [31:0] main_preheaderi4i14_gep521;
reg [31:0] main_preheaderi4i14_gep521_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_527;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_527_reg;
reg [31:0] main_preheaderi4i14_528;
reg [31:0] main_preheaderi4i14_528_reg;
reg [31:0] main_preheaderi4i14_529;
reg [31:0] main_preheaderi4i14_529_reg;
reg [31:0] main_preheaderi4i14_gep_int522;
reg [31:0] main_preheaderi4i14_gep_int522_reg;
reg [31:0] main_preheaderi4i14_gep523;
reg [31:0] main_preheaderi4i14_gep523_reg;
reg [31:0] main_preheaderi4i14_gep_array524;
reg [31:0] main_preheaderi4i14_gep_array524_reg;
reg [31:0] main_preheaderi4i14_gep525;
reg [31:0] main_preheaderi4i14_gep525_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_530;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_530_reg;
reg [31:0] main_preheaderi4i14_531;
reg [31:0] main_preheaderi4i14_531_reg;
reg [31:0] main_preheaderi4i14_532;
reg [31:0] main_preheaderi4i14_532_reg;
reg [31:0] main_preheaderi4i14_gep_int526;
reg [31:0] main_preheaderi4i14_gep_int526_reg;
reg [31:0] main_preheaderi4i14_gep_array527;
reg [31:0] main_preheaderi4i14_gep_array527_reg;
reg [31:0] main_preheaderi4i14_gep528;
reg [31:0] main_preheaderi4i14_gep528_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_533;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_533_reg;
reg [31:0] main_preheaderi4i14_534;
reg [31:0] main_preheaderi4i14_534_reg;
reg [31:0] main_preheaderi4i14_535;
reg [31:0] main_preheaderi4i14_535_reg;
reg [31:0] main_preheaderi4i14_gep_int529;
reg [31:0] main_preheaderi4i14_gep_int529_reg;
reg [31:0] main_preheaderi4i14_gep530;
reg [31:0] main_preheaderi4i14_gep530_reg;
reg [31:0] main_preheaderi4i14_gep_array531;
reg [31:0] main_preheaderi4i14_gep_array531_reg;
reg [31:0] main_preheaderi4i14_gep532;
reg [31:0] main_preheaderi4i14_gep532_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_536;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_536_reg;
reg [31:0] main_preheaderi4i14_537;
reg [31:0] main_preheaderi4i14_537_reg;
reg [31:0] main_preheaderi4i14_538;
reg [31:0] main_preheaderi4i14_538_reg;
reg [31:0] main_preheaderi4i14_gep_int533;
reg [31:0] main_preheaderi4i14_gep_int533_reg;
reg [31:0] main_preheaderi4i14_gep_array534;
reg [31:0] main_preheaderi4i14_gep_array534_reg;
reg [31:0] main_preheaderi4i14_gep535;
reg [31:0] main_preheaderi4i14_gep535_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_539;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_539_reg;
reg [31:0] main_preheaderi4i14_540;
reg [31:0] main_preheaderi4i14_540_reg;
reg [31:0] main_preheaderi4i14_541;
reg [31:0] main_preheaderi4i14_541_reg;
reg [31:0] main_preheaderi4i14_gep_int536;
reg [31:0] main_preheaderi4i14_gep_int536_reg;
reg [31:0] main_preheaderi4i14_gep537;
reg [31:0] main_preheaderi4i14_gep537_reg;
reg [31:0] main_preheaderi4i14_gep_array538;
reg [31:0] main_preheaderi4i14_gep_array538_reg;
reg [31:0] main_preheaderi4i14_gep539;
reg [31:0] main_preheaderi4i14_gep539_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_542;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_542_reg;
reg [31:0] main_preheaderi4i14_543;
reg [31:0] main_preheaderi4i14_543_reg;
reg [31:0] main_preheaderi4i14_544;
reg [31:0] main_preheaderi4i14_544_reg;
reg [31:0] main_preheaderi4i14_gep_int540;
reg [31:0] main_preheaderi4i14_gep_int540_reg;
reg [31:0] main_preheaderi4i14_gep_array541;
reg [31:0] main_preheaderi4i14_gep_array541_reg;
reg [31:0] main_preheaderi4i14_gep542;
reg [31:0] main_preheaderi4i14_gep542_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_545;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_545_reg;
reg [31:0] main_preheaderi4i14_546;
reg [31:0] main_preheaderi4i14_546_reg;
reg [31:0] main_preheaderi4i14_547;
reg [31:0] main_preheaderi4i14_547_reg;
reg  main_preheaderi4i14_exitcond31;
reg  main_preheaderi4i14_exitcond31_reg;
reg [31:0] main_lrphi20_i19i19;
reg [31:0] main_lrphi20_i19i19_reg;
reg [31:0] main_lrphi20_gep_int543;
reg [31:0] main_lrphi20_gep_int543_reg;
reg [31:0] main_lrphi20_gep_array544;
reg [31:0] main_lrphi20_gep_array544_reg;
reg [31:0] main_lrphi20_gep545;
reg [31:0] main_lrphi20_gep545_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi20_549;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi20_549_reg;
reg [31:0] main_lrphi20_550;
reg [31:0] main_lrphi20_550_reg;
reg  main_lrphi20_551;
reg  main_lrphi20_551_reg;
reg [31:0] main_552_pre14i;
reg [31:0] main_552_pre14i_reg;
reg [31:0] main_554_555;
reg [31:0] main_554_555_reg;
reg [31:0] main_554_557;
reg [31:0] main_554_557_reg;
reg  main_554_exitcond;
reg  main_554_exitcond_reg;
reg [31:0] main_preheaderloopexiti17_558;
reg [31:0] main_preheaderloopexiti17_558_reg;
reg [31:0] main_preheaderloopexiti17_i28i21;
reg [31:0] main_preheaderloopexiti17_i28i21_reg;
reg [31:0] main_preheaderloopexiti17_gep_int546;
reg [31:0] main_preheaderloopexiti17_gep_int546_reg;
reg [31:0] main_preheaderloopexiti17_gep_array547;
reg [31:0] main_preheaderloopexiti17_gep_array547_reg;
reg [31:0] main_preheaderloopexiti17_gep548;
reg [31:0] main_preheaderloopexiti17_gep548_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderloopexiti17_559;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderloopexiti17_559_reg;
reg [31:0] main_preheaderloopexiti17_560;
reg [31:0] main_preheaderloopexiti17_560_reg;
reg [31:0] main_preheaderloopexiti17_gep_int549;
reg [31:0] main_preheaderloopexiti17_gep_int549_reg;
reg [31:0] main_preheaderloopexiti17_gep_array550;
reg [31:0] main_preheaderloopexiti17_gep_array550_reg;
reg [31:0] main_preheaderloopexiti17_gep551;
reg [31:0] main_preheaderloopexiti17_gep551_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderloopexiti17_561;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderloopexiti17_561_reg;
reg [31:0] main_preheaderloopexiti17_562;
reg [31:0] main_preheaderloopexiti17_562_reg;
reg  main_preheaderloopexiti17_563;
reg  main_preheaderloopexiti17_563_reg;
reg [31:0] main_preheaderloopexiti17_564;
reg [31:0] main_preheaderloopexiti17_564_reg;
reg [31:0] main_preheaderloopexiti17_565;
reg [31:0] main_preheaderloopexiti17_565_reg;
reg [31:0] main_preheaderloopexiti17_566;
reg [31:0] main_preheaderloopexiti17_566_reg;
reg  main_preheaderloopexiti17_exitcondi22;
reg  main_preheaderloopexiti17_exitcondi22_reg;
reg [31:0] main_decryptexit_lcssa;
reg [31:0] main_decryptexit_lcssa_reg;
reg  main_decryptexit_568;
reg  main_decryptexit_568_reg;
reg [3:0] encryptout_enc_statemt_address_a;
reg  encryptout_enc_statemt_write_enable_a;
wire [31:0] encryptout_enc_statemt_in_a;
wire [31:0] encryptout_enc_statemt_out_a;
wire [3:0] encryptout_enc_statemt_address_b;
wire  encryptout_enc_statemt_write_enable_b;
wire [31:0] encryptout_enc_statemt_in_b;
wire [31:0] encryptout_enc_statemt_out_b;
reg [3:0] decryptout_dec_statemt_address_a;
reg  decryptout_dec_statemt_write_enable_a;
wire [31:0] decryptout_dec_statemt_in_a;
wire [31:0] decryptout_dec_statemt_out_a;
wire [3:0] decryptout_dec_statemt_address_b;
wire  decryptout_dec_statemt_write_enable_b;
wire [31:0] decryptout_dec_statemt_in_b;
wire [31:0] decryptout_dec_statemt_out_b;
wire [4:0] Rcon0_address_a;
wire  Rcon0_write_enable_a;
wire [31:0] Rcon0_in_a;
wire [31:0] Rcon0_out_a;
wire [4:0] Rcon0_address_b;
wire  Rcon0_write_enable_b;
wire [31:0] Rcon0_in_b;
wire [31:0] Rcon0_out_b;
wire [7:0] rom_32_address_a;
wire  rom_32_write_enable_a;
wire [31:0] rom_32_in_a;
wire [31:0] rom_32_out_a;
wire [7:0] rom_32_address_b;
wire  rom_32_write_enable_b;
wire [31:0] rom_32_in_b;
wire [31:0] rom_32_out_b;
reg [7:0] invSbox_address_a;
reg  invSbox_write_enable_a;
wire [31:0] invSbox_in_a;
wire [31:0] invSbox_out_a;
reg [7:0] invSbox_address_b;
reg  invSbox_write_enable_b;
wire [31:0] invSbox_in_b;
wire [31:0] invSbox_out_b;
wire [8:0] ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire [8:0] ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire [4:0] MixColumn_AddRoundKey_0_ret_address_a;
wire  MixColumn_AddRoundKey_0_ret_write_enable_a;
wire [31:0] MixColumn_AddRoundKey_0_ret_in_a;
wire [31:0] MixColumn_AddRoundKey_0_ret_out_a;
wire [4:0] MixColumn_AddRoundKey_0_ret_address_b;
wire  MixColumn_AddRoundKey_0_ret_write_enable_b;
wire [31:0] MixColumn_AddRoundKey_0_ret_in_b;
wire [31:0] MixColumn_AddRoundKey_0_ret_out_b;
wire [4:0] AddRoundKey_InversMixColumn_0_ret_address_a;
wire  AddRoundKey_InversMixColumn_0_ret_write_enable_a;
wire [31:0] AddRoundKey_InversMixColumn_0_ret_in_a;
wire [31:0] AddRoundKey_InversMixColumn_0_ret_out_a;
wire [4:0] AddRoundKey_InversMixColumn_0_ret_address_b;
wire  AddRoundKey_InversMixColumn_0_ret_write_enable_b;
wire [31:0] AddRoundKey_InversMixColumn_0_ret_in_b;
wire [31:0] AddRoundKey_InversMixColumn_0_ret_out_b;
reg  KeySchedule_start;
reg [31:0] KeySchedule_arg_type;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_arg_key;
reg  KeySchedule_finish_final;
reg  KeySchedule_finish_reg;
wire  KeySchedule_finish;
wire [31:0] KeySchedule_return_val;
reg [31:0] KeySchedule_return_val_reg;
reg [31:0] main_0_1;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;
reg  MixColumn_AddRoundKey_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] MixColumn_AddRoundKey_arg_statemt;
reg [31:0] MixColumn_AddRoundKey_arg_nb;
reg [31:0] MixColumn_AddRoundKey_arg_n;
reg  MixColumn_AddRoundKey_finish_final;
reg  MixColumn_AddRoundKey_finish_reg;
wire  MixColumn_AddRoundKey_finish;
wire [31:0] MixColumn_AddRoundKey_return_val;
reg [31:0] MixColumn_AddRoundKey_return_val_reg;
reg [31:0] main_AddRoundKeyexiti_132;
reg [31:0] main_encryptexit_284;
reg  AddRoundKey_InversMixColumn_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] AddRoundKey_InversMixColumn_arg_statemt;
reg [31:0] AddRoundKey_InversMixColumn_arg_nb;
reg [31:0] AddRoundKey_InversMixColumn_arg_n;
reg  AddRoundKey_InversMixColumn_finish_final;
reg  AddRoundKey_InversMixColumn_finish_reg;
wire  AddRoundKey_InversMixColumn_finish;
wire [31:0] AddRoundKey_InversMixColumn_return_val;
reg [31:0] AddRoundKey_InversMixColumn_return_val_reg;
reg [31:0] main_lrph12i_417;
reg [31:0] main_signed_add_32_0_op0;
reg [31:0] main_signed_add_32_0_op1;
reg [31:0] main_signed_add_32_0;
reg [31:0] main_signed_add_32_2_op0;
reg [31:0] main_signed_add_32_2_op1;
reg [31:0] main_signed_add_32_2;
reg [31:0] main_signed_add_32_3_op0;
reg [31:0] main_signed_add_32_3_op1;
reg [31:0] main_signed_add_32_3;
reg [31:0] main_signed_add_32_1_op0;
reg [31:0] main_signed_add_32_1_op1;
reg [31:0] main_signed_add_32_1;
reg [31:0] main_signed_add_32_4_op0;
reg [31:0] main_signed_add_32_4_op1;
reg [31:0] main_signed_add_32_4;
reg [31:0] main_signed_add_32_7_op0;
reg [31:0] main_signed_add_32_7_op1;
reg [31:0] main_signed_add_32_7;
reg [31:0] main_signed_add_32_6_op0;
reg [31:0] main_signed_add_32_6_op1;
reg [31:0] main_signed_add_32_6;
reg [31:0] main_signed_add_32_5_op0;
reg [31:0] main_signed_add_32_5_op1;
reg [31:0] main_signed_add_32_5;


KeySchedule KeySchedule (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (KeySchedule_start),
	.finish (KeySchedule_finish),
	.return_val (KeySchedule_return_val),
	.arg_type (KeySchedule_arg_type),
	.arg_key (KeySchedule_arg_key)
);

defparam
	KeySchedule.tag_offset = tag_offset;


MixColumn_AddRoundKey MixColumn_AddRoundKey (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (MixColumn_AddRoundKey_start),
	.finish (MixColumn_AddRoundKey_finish),
	.return_val (MixColumn_AddRoundKey_return_val),
	.arg_statemt (MixColumn_AddRoundKey_arg_statemt),
	.arg_nb (MixColumn_AddRoundKey_arg_nb),
	.arg_n (MixColumn_AddRoundKey_arg_n)
);

defparam
	MixColumn_AddRoundKey.tag_offset = tag_offset;


AddRoundKey_InversMixColumn AddRoundKey_InversMixColumn (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (AddRoundKey_InversMixColumn_start),
	.finish (AddRoundKey_InversMixColumn_finish),
	.return_val (AddRoundKey_InversMixColumn_return_val),
	.arg_statemt (AddRoundKey_InversMixColumn_arg_statemt),
	.arg_nb (AddRoundKey_InversMixColumn_arg_nb),
	.arg_n (AddRoundKey_InversMixColumn_arg_n)
);

defparam
	AddRoundKey_InversMixColumn.tag_offset = tag_offset;

// Local Rams


// @encrypt.out_enc_statemt = internal unnamed_addr constant [16 x i32] [i32 57, i32 37, i32 132, i32 29, i32 2, i32 220, i32 9, i32 251, i32 220, i32 17, i32 133, i32 151, i32 25, i32 106, i32 11, i32 5...
rom_dual_port encryptout_enc_statemt (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( encryptout_enc_statemt_address_a ),
	.address_b( encryptout_enc_statemt_address_b ),
	.q_a( encryptout_enc_statemt_out_a ),
	.q_b( encryptout_enc_statemt_out_b)
);
defparam encryptout_enc_statemt.width_a = 32;
defparam encryptout_enc_statemt.width_b = 32;
defparam encryptout_enc_statemt.widthad_a = 4;
defparam encryptout_enc_statemt.widthad_b = 4;
defparam encryptout_enc_statemt.numwords_a = 16;
defparam encryptout_enc_statemt.numwords_b = 16;
defparam encryptout_enc_statemt.latency = 1;
defparam encryptout_enc_statemt.init_file = "encryptout_enc_statemt.mif";


// @decrypt.out_dec_statemt = internal unnamed_addr constant [16 x i32] [i32 50, i32 67, i32 246, i32 168, i32 136, i32 90, i32 48, i32 141, i32 49, i32 49, i32 152, i32 162, i32 224, i32 55, i32 7, i32 ...
rom_dual_port decryptout_dec_statemt (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( decryptout_dec_statemt_address_a ),
	.address_b( decryptout_dec_statemt_address_b ),
	.q_a( decryptout_dec_statemt_out_a ),
	.q_b( decryptout_dec_statemt_out_b)
);
defparam decryptout_dec_statemt.width_a = 32;
defparam decryptout_dec_statemt.width_b = 32;
defparam decryptout_dec_statemt.widthad_a = 4;
defparam decryptout_dec_statemt.widthad_b = 4;
defparam decryptout_dec_statemt.numwords_a = 16;
defparam decryptout_dec_statemt.numwords_b = 16;
defparam decryptout_dec_statemt.latency = 1;
defparam decryptout_dec_statemt.init_file = "decryptout_dec_statemt.mif";


// @invSbox = internal unnamed_addr constant [16 x [16 x i32]] [[16 x i32] [i32 82, i32 9, i32 106, i32 213, i32 48, i32 54, i32 165, i32 56, i32 191, i32 64, i32 163, i32 158, i32 129, i32 243, i32 215,...
rom_dual_port invSbox (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( invSbox_address_a ),
	.address_b( invSbox_address_b ),
	.q_a( invSbox_out_a ),
	.q_b( invSbox_out_b)
);
defparam invSbox.width_a = 32;
defparam invSbox.width_b = 32;
defparam invSbox.widthad_a = 8;
defparam invSbox.widthad_b = 8;
defparam invSbox.numwords_a = 256;
defparam invSbox.numwords_b = 256;
defparam invSbox.latency = 1;
defparam invSbox.init_file = "invSbox.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %265 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([20 x i8]* @.str, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_169)) begin
		$write("encrypted message 	");
	end
	/* main: %269*/
	/*   %270 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str1, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__269_174)) begin
		$write("0");
	end
	/* main: %271*/
	/*   %273 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str2, i32 0, i32 0), i32 %272) #2*/
	if ((cur_state == LEGUP_F_main_BB__271_177)) begin
		$write("%0x", $signed(main_271_272_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_271_272_reg) === 1'bX) finish <= 0;
	end
	/* main: %AddRoundKey.exit5.i15*/
	/*   %548 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([19 x i8]* @.str3, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit5i15_308)) begin
		$write("\ndecrypto message	");
	end
	/* main: %552*/
	/*   %553 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str1, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__552_313)) begin
		$write("0");
	end
	/* main: %554*/
	/*   %556 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str2, i32 0, i32 0), i32 %555) #2*/
	if ((cur_state == LEGUP_F_main_BB__554_316)) begin
		$write("%0x", $signed(main_554_555_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_554_555_reg) === 1'bX) finish <= 0;
	end
	/* main: %decrypt.exit*/
	/*   %567 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str4, i32 0, i32 0), i32 %.lcssa) #2*/
	if ((cur_state == LEGUP_F_main_BB_decryptexit_321)) begin
		$write("\nResult: %d\n", $signed(main_decryptexit_lcssa_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_decryptexit_lcssa_reg) === 1'bX) finish <= 0;
	end
	/* main: %569*/
	/*   %570 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str5, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__569_322)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %571*/
	/*   %572 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str6, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__571_323)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB_AddRoundKeyexit5i15_308:
		next_state = LEGUP_F_main_BB_lrphi20_309;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_141;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_141:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_142;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_142:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_143;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_143:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_144;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_144:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_145;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_145:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_146;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_146:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_147;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_147:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_148;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_148:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_149;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_149:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_150;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_150:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_151;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_151:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_152;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_152:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_153;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_153:
	if ((main_AddRoundKeyexit_crit_edgei_exitcond37_reg == 1'd1))
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139;
	else if ((main_AddRoundKeyexit_crit_edgei_exitcond37_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderi4i_154;
LEGUP_F_main_BB_AddRoundKeyexiti_100:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_101;
LEGUP_F_main_BB_AddRoundKeyexiti_101:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_102;
LEGUP_F_main_BB_AddRoundKeyexiti_102:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_103;
LEGUP_F_main_BB_AddRoundKeyexiti_103:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_104;
LEGUP_F_main_BB_AddRoundKeyexiti_104:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_105;
LEGUP_F_main_BB_AddRoundKeyexiti_105:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_106;
LEGUP_F_main_BB_AddRoundKeyexiti_106:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_107;
LEGUP_F_main_BB_AddRoundKeyexiti_107:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_108;
LEGUP_F_main_BB_AddRoundKeyexiti_108:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_109;
LEGUP_F_main_BB_AddRoundKeyexiti_109:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_110;
LEGUP_F_main_BB_AddRoundKeyexiti_110:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_111;
LEGUP_F_main_BB_AddRoundKeyexiti_111:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_112;
LEGUP_F_main_BB_AddRoundKeyexiti_112:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_113;
LEGUP_F_main_BB_AddRoundKeyexiti_113:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_114;
LEGUP_F_main_BB_AddRoundKeyexiti_114:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_115;
LEGUP_F_main_BB_AddRoundKeyexiti_115:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_116;
LEGUP_F_main_BB_AddRoundKeyexiti_116:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_117;
LEGUP_F_main_BB_AddRoundKeyexiti_117:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_118;
LEGUP_F_main_BB_AddRoundKeyexiti_118:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_119;
LEGUP_F_main_BB_AddRoundKeyexiti_119:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_120;
LEGUP_F_main_BB_AddRoundKeyexiti_120:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_121;
LEGUP_F_main_BB_AddRoundKeyexiti_121:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_122;
LEGUP_F_main_BB_AddRoundKeyexiti_122:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_123;
LEGUP_F_main_BB_AddRoundKeyexiti_123:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_124;
LEGUP_F_main_BB_AddRoundKeyexiti_124:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_125;
LEGUP_F_main_BB_AddRoundKeyexiti_125:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_126;
LEGUP_F_main_BB_AddRoundKeyexiti_126:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_127;
LEGUP_F_main_BB_AddRoundKeyexiti_127:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_128;
LEGUP_F_main_BB_AddRoundKeyexiti_128:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_129;
LEGUP_F_main_BB_AddRoundKeyexiti_129:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_130;
LEGUP_F_main_BB_AddRoundKeyexiti_130:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_131;
LEGUP_F_main_BB_AddRoundKeyexiti_131:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_132;
LEGUP_F_main_BB_AddRoundKeyexiti_132:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_133;
LEGUP_F_main_BB_AddRoundKeyexiti_133:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_134;
LEGUP_F_main_BB_AddRoundKeyexiti_134:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_135;
LEGUP_F_main_BB_AddRoundKeyexiti_135:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_136;
LEGUP_F_main_BB_AddRoundKeyexiti_136:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_137;
LEGUP_F_main_BB_AddRoundKeyexiti_137:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_138;
LEGUP_F_main_BB_AddRoundKeyexiti_138:
	if ((main_AddRoundKeyexiti_exitcond38_reg == 1'd1))
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_93;
	else if ((main_AddRoundKeyexiti_exitcond38_reg == 1'd0))
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139;
LEGUP_F_main_BB_AddRoundKeyexiti_93:
		next_state = LEGUP_function_call_94;
LEGUP_F_main_BB_AddRoundKeyexiti_95:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_96;
LEGUP_F_main_BB_AddRoundKeyexiti_96:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_97;
LEGUP_F_main_BB_AddRoundKeyexiti_97:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_98;
LEGUP_F_main_BB_AddRoundKeyexiti_98:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_99;
LEGUP_F_main_BB_AddRoundKeyexiti_99:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_100;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_48:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_49;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_49:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_50;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_50:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_51;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_51:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_52;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_52:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_53;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_53:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_54;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_54:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_55;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_55:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_56;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_56:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_57;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_57:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_58;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_58:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_59;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_59:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_60;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_60:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_61;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_61:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_62;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_62:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_63;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_63:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_64;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_64:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_65;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_65:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_66;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_66:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_67;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_67:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_68;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_68:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_69;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_69:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_70;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_70:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_71;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_71:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_72;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_72:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_73;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_73:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_74;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_74:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_75;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_75:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_76;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_76:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_77;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_77:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_78;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_78:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_79;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_79:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_80;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_80:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_81;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_81:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_82;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_82:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_83;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_83:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_84;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_84:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_85;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_85:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_86;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_86:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_87;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_87:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_88;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_88:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_89;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_89:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_90;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_90:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_91;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_91:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_92;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_92:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_93;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__0_2;
LEGUP_F_main_BB__0_10:
		next_state = LEGUP_F_main_BB__0_11;
LEGUP_F_main_BB__0_11:
		next_state = LEGUP_F_main_BB__0_12;
LEGUP_F_main_BB__0_12:
		next_state = LEGUP_F_main_BB__0_13;
LEGUP_F_main_BB__0_13:
		next_state = LEGUP_F_main_BB__0_14;
LEGUP_F_main_BB__0_14:
		next_state = LEGUP_F_main_BB__0_15;
LEGUP_F_main_BB__0_15:
		next_state = LEGUP_F_main_BB__0_16;
LEGUP_F_main_BB__0_16:
		next_state = LEGUP_F_main_BB__0_17;
LEGUP_F_main_BB__0_17:
		next_state = LEGUP_function_call_18;
LEGUP_F_main_BB__0_19:
		next_state = LEGUP_F_main_BB__2_20;
LEGUP_F_main_BB__0_2:
		next_state = LEGUP_F_main_BB__0_3;
LEGUP_F_main_BB__0_3:
		next_state = LEGUP_F_main_BB__0_4;
LEGUP_F_main_BB__0_4:
		next_state = LEGUP_F_main_BB__0_5;
LEGUP_F_main_BB__0_5:
		next_state = LEGUP_F_main_BB__0_6;
LEGUP_F_main_BB__0_6:
		next_state = LEGUP_F_main_BB__0_7;
LEGUP_F_main_BB__0_7:
		next_state = LEGUP_F_main_BB__0_8;
LEGUP_F_main_BB__0_8:
		next_state = LEGUP_F_main_BB__0_9;
LEGUP_F_main_BB__0_9:
		next_state = LEGUP_F_main_BB__0_10;
LEGUP_F_main_BB__269_174:
		next_state = LEGUP_F_main_BB__269_175;
LEGUP_F_main_BB__269_175:
		next_state = LEGUP_F_main_BB__269_176;
LEGUP_F_main_BB__269_176:
		next_state = LEGUP_F_main_BB__271_177;
LEGUP_F_main_BB__271_177:
	if ((main_271_exitcond35 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphi_170;
	else if ((main_271_exitcond35 == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderi_178;
LEGUP_F_main_BB__285_185:
		next_state = LEGUP_F_main_BB__285_186;
LEGUP_F_main_BB__285_186:
		next_state = LEGUP_F_main_BB__285_187;
LEGUP_F_main_BB__285_187:
		next_state = LEGUP_F_main_BB__285_188;
LEGUP_F_main_BB__285_188:
		next_state = LEGUP_F_main_BB__285_189;
LEGUP_F_main_BB__285_189:
		next_state = LEGUP_F_main_BB__285_190;
LEGUP_F_main_BB__285_190:
		next_state = LEGUP_F_main_BB__285_191;
LEGUP_F_main_BB__285_191:
		next_state = LEGUP_F_main_BB__285_192;
LEGUP_F_main_BB__285_192:
		next_state = LEGUP_F_main_BB__285_193;
LEGUP_F_main_BB__285_193:
		next_state = LEGUP_F_main_BB__285_194;
LEGUP_F_main_BB__285_194:
		next_state = LEGUP_F_main_BB__285_195;
LEGUP_F_main_BB__285_195:
		next_state = LEGUP_F_main_BB__285_196;
LEGUP_F_main_BB__285_196:
		next_state = LEGUP_F_main_BB__285_197;
LEGUP_F_main_BB__285_197:
		next_state = LEGUP_F_main_BB__285_198;
LEGUP_F_main_BB__285_198:
		next_state = LEGUP_F_main_BB__285_199;
LEGUP_F_main_BB__285_199:
	if ((main_285_exitcond34_reg == 1'd1))
		next_state = LEGUP_F_main_BB__285_185;
	else if ((main_285_exitcond34_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderii4_200;
LEGUP_F_main_BB__2_20:
		next_state = LEGUP_F_main_BB__2_21;
LEGUP_F_main_BB__2_21:
		next_state = LEGUP_F_main_BB__2_22;
LEGUP_F_main_BB__2_22:
		next_state = LEGUP_F_main_BB__2_23;
LEGUP_F_main_BB__2_23:
		next_state = LEGUP_F_main_BB__2_24;
LEGUP_F_main_BB__2_24:
		next_state = LEGUP_F_main_BB__2_25;
LEGUP_F_main_BB__2_25:
		next_state = LEGUP_F_main_BB__2_26;
LEGUP_F_main_BB__2_26:
		next_state = LEGUP_F_main_BB__2_27;
LEGUP_F_main_BB__2_27:
		next_state = LEGUP_F_main_BB__2_28;
LEGUP_F_main_BB__2_28:
		next_state = LEGUP_F_main_BB__2_29;
LEGUP_F_main_BB__2_29:
		next_state = LEGUP_F_main_BB__2_30;
LEGUP_F_main_BB__2_30:
		next_state = LEGUP_F_main_BB__2_31;
LEGUP_F_main_BB__2_31:
		next_state = LEGUP_F_main_BB__2_32;
LEGUP_F_main_BB__2_32:
		next_state = LEGUP_F_main_BB__2_33;
LEGUP_F_main_BB__2_33:
	if ((main_2_exitcond40_reg == 1'd1))
		next_state = LEGUP_F_main_BB__2_20;
	else if ((main_2_exitcond40_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderii_34;
LEGUP_F_main_BB__552_313:
		next_state = LEGUP_F_main_BB__552_314;
LEGUP_F_main_BB__552_314:
		next_state = LEGUP_F_main_BB__552_315;
LEGUP_F_main_BB__552_315:
		next_state = LEGUP_F_main_BB__554_316;
LEGUP_F_main_BB__554_316:
	if ((main_554_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB_lrphi20_309;
	else if ((main_554_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderloopexiti17_317;
LEGUP_F_main_BB__569_322:
		next_state = LEGUP_F_main_BB__573_324;
LEGUP_F_main_BB__571_323:
		next_state = LEGUP_F_main_BB__573_324;
LEGUP_F_main_BB__573_324:
		next_state = LEGUP_0;
LEGUP_F_main_BB__crit_edgei_280:
		next_state = LEGUP_F_main_BB__crit_edgei_281;
LEGUP_F_main_BB__crit_edgei_281:
		next_state = LEGUP_F_main_BB__crit_edgei_282;
LEGUP_F_main_BB__crit_edgei_282:
		next_state = LEGUP_F_main_BB__crit_edgei_283;
LEGUP_F_main_BB__crit_edgei_283:
		next_state = LEGUP_F_main_BB__crit_edgei_284;
LEGUP_F_main_BB__crit_edgei_284:
		next_state = LEGUP_F_main_BB__crit_edgei_285;
LEGUP_F_main_BB__crit_edgei_285:
		next_state = LEGUP_F_main_BB__crit_edgei_286;
LEGUP_F_main_BB__crit_edgei_286:
		next_state = LEGUP_F_main_BB__crit_edgei_287;
LEGUP_F_main_BB__crit_edgei_287:
		next_state = LEGUP_F_main_BB__crit_edgei_288;
LEGUP_F_main_BB__crit_edgei_288:
		next_state = LEGUP_F_main_BB__crit_edgei_289;
LEGUP_F_main_BB__crit_edgei_289:
		next_state = LEGUP_F_main_BB__crit_edgei_290;
LEGUP_F_main_BB__crit_edgei_290:
		next_state = LEGUP_F_main_BB__crit_edgei_291;
LEGUP_F_main_BB__crit_edgei_291:
		next_state = LEGUP_F_main_BB__crit_edgei_292;
LEGUP_F_main_BB__crit_edgei_292:
		next_state = LEGUP_F_main_BB__crit_edgei_293;
LEGUP_F_main_BB__crit_edgei_293:
	if ((main__crit_edgei_exitcond32_reg == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edgei_280;
	else if ((main__crit_edgei_exitcond32_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderi4i14_294;
LEGUP_F_main_BB_decryptexit_321:
	if ((main_decryptexit_568 == 1'd1))
		next_state = LEGUP_F_main_BB__569_322;
	else if ((main_decryptexit_568 == 1'd0))
		next_state = LEGUP_F_main_BB__571_323;
LEGUP_F_main_BB_encryptexit_182:
		next_state = LEGUP_function_call_183;
LEGUP_F_main_BB_encryptexit_184:
		next_state = LEGUP_F_main_BB__285_185;
LEGUP_F_main_BB_lrph12i_247:
		next_state = LEGUP_function_call_248;
LEGUP_F_main_BB_lrph12i_249:
		next_state = LEGUP_F_main_BB_lrph12i_250;
LEGUP_F_main_BB_lrph12i_250:
		next_state = LEGUP_F_main_BB_lrph12i_251;
LEGUP_F_main_BB_lrph12i_251:
		next_state = LEGUP_F_main_BB_lrph12i_252;
LEGUP_F_main_BB_lrph12i_252:
		next_state = LEGUP_F_main_BB_lrph12i_253;
LEGUP_F_main_BB_lrph12i_253:
		next_state = LEGUP_F_main_BB_lrph12i_254;
LEGUP_F_main_BB_lrph12i_254:
		next_state = LEGUP_F_main_BB_lrph12i_255;
LEGUP_F_main_BB_lrph12i_255:
		next_state = LEGUP_F_main_BB_lrph12i_256;
LEGUP_F_main_BB_lrph12i_256:
		next_state = LEGUP_F_main_BB_lrph12i_257;
LEGUP_F_main_BB_lrph12i_257:
		next_state = LEGUP_F_main_BB_lrph12i_258;
LEGUP_F_main_BB_lrph12i_258:
		next_state = LEGUP_F_main_BB_lrph12i_259;
LEGUP_F_main_BB_lrph12i_259:
		next_state = LEGUP_F_main_BB_lrph12i_260;
LEGUP_F_main_BB_lrph12i_260:
		next_state = LEGUP_F_main_BB_lrph12i_261;
LEGUP_F_main_BB_lrph12i_261:
		next_state = LEGUP_F_main_BB_lrph12i_262;
LEGUP_F_main_BB_lrph12i_262:
		next_state = LEGUP_F_main_BB_lrph12i_263;
LEGUP_F_main_BB_lrph12i_263:
		next_state = LEGUP_F_main_BB_lrph12i_264;
LEGUP_F_main_BB_lrph12i_264:
		next_state = LEGUP_F_main_BB_lrph12i_265;
LEGUP_F_main_BB_lrph12i_265:
		next_state = LEGUP_F_main_BB_lrph12i_266;
LEGUP_F_main_BB_lrph12i_266:
		next_state = LEGUP_F_main_BB_lrph12i_267;
LEGUP_F_main_BB_lrph12i_267:
		next_state = LEGUP_F_main_BB_lrph12i_268;
LEGUP_F_main_BB_lrph12i_268:
		next_state = LEGUP_F_main_BB_lrph12i_269;
LEGUP_F_main_BB_lrph12i_269:
		next_state = LEGUP_F_main_BB_lrph12i_270;
LEGUP_F_main_BB_lrph12i_270:
		next_state = LEGUP_F_main_BB_lrph12i_271;
LEGUP_F_main_BB_lrph12i_271:
		next_state = LEGUP_F_main_BB_lrph12i_272;
LEGUP_F_main_BB_lrph12i_272:
		next_state = LEGUP_F_main_BB_lrph12i_273;
LEGUP_F_main_BB_lrph12i_273:
		next_state = LEGUP_F_main_BB_lrph12i_274;
LEGUP_F_main_BB_lrph12i_274:
		next_state = LEGUP_F_main_BB_lrph12i_275;
LEGUP_F_main_BB_lrph12i_275:
		next_state = LEGUP_F_main_BB_lrph12i_276;
LEGUP_F_main_BB_lrph12i_276:
		next_state = LEGUP_F_main_BB_lrph12i_277;
LEGUP_F_main_BB_lrph12i_277:
		next_state = LEGUP_F_main_BB_lrph12i_278;
LEGUP_F_main_BB_lrph12i_278:
		next_state = LEGUP_F_main_BB_lrph12i_279;
LEGUP_F_main_BB_lrph12i_279:
	if ((main_lrph12i_498_reg == 1'd1))
		next_state = LEGUP_F_main_BB_lrph12i_247;
	else if ((main_lrph12i_498_reg == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgei_280;
LEGUP_F_main_BB_lrph12ipreheader_215:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_216;
LEGUP_F_main_BB_lrph12ipreheader_216:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_217;
LEGUP_F_main_BB_lrph12ipreheader_217:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_218;
LEGUP_F_main_BB_lrph12ipreheader_218:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_219;
LEGUP_F_main_BB_lrph12ipreheader_219:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_220;
LEGUP_F_main_BB_lrph12ipreheader_220:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_221;
LEGUP_F_main_BB_lrph12ipreheader_221:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_222;
LEGUP_F_main_BB_lrph12ipreheader_222:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_223;
LEGUP_F_main_BB_lrph12ipreheader_223:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_224;
LEGUP_F_main_BB_lrph12ipreheader_224:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_225;
LEGUP_F_main_BB_lrph12ipreheader_225:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_226;
LEGUP_F_main_BB_lrph12ipreheader_226:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_227;
LEGUP_F_main_BB_lrph12ipreheader_227:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_228;
LEGUP_F_main_BB_lrph12ipreheader_228:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_229;
LEGUP_F_main_BB_lrph12ipreheader_229:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_230;
LEGUP_F_main_BB_lrph12ipreheader_230:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_231;
LEGUP_F_main_BB_lrph12ipreheader_231:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_232;
LEGUP_F_main_BB_lrph12ipreheader_232:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_233;
LEGUP_F_main_BB_lrph12ipreheader_233:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_234;
LEGUP_F_main_BB_lrph12ipreheader_234:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_235;
LEGUP_F_main_BB_lrph12ipreheader_235:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_236;
LEGUP_F_main_BB_lrph12ipreheader_236:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_237;
LEGUP_F_main_BB_lrph12ipreheader_237:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_238;
LEGUP_F_main_BB_lrph12ipreheader_238:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_239;
LEGUP_F_main_BB_lrph12ipreheader_239:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_240;
LEGUP_F_main_BB_lrph12ipreheader_240:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_241;
LEGUP_F_main_BB_lrph12ipreheader_241:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_242;
LEGUP_F_main_BB_lrph12ipreheader_242:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_243;
LEGUP_F_main_BB_lrph12ipreheader_243:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_244;
LEGUP_F_main_BB_lrph12ipreheader_244:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_245;
LEGUP_F_main_BB_lrph12ipreheader_245:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_246;
LEGUP_F_main_BB_lrph12ipreheader_246:
		next_state = LEGUP_F_main_BB_lrph12i_247;
LEGUP_F_main_BB_lrphi20_309:
		next_state = LEGUP_F_main_BB_lrphi20_310;
LEGUP_F_main_BB_lrphi20_310:
		next_state = LEGUP_F_main_BB_lrphi20_311;
LEGUP_F_main_BB_lrphi20_311:
		next_state = LEGUP_F_main_BB_lrphi20_312;
LEGUP_F_main_BB_lrphi20_312:
	if ((main_lrphi20_551 == 1'd1))
		next_state = LEGUP_F_main_BB__552_313;
	else if ((main_lrphi20_551 == 1'd0))
		next_state = LEGUP_F_main_BB__554_316;
LEGUP_F_main_BB_lrphi_170:
		next_state = LEGUP_F_main_BB_lrphi_171;
LEGUP_F_main_BB_lrphi_171:
		next_state = LEGUP_F_main_BB_lrphi_172;
LEGUP_F_main_BB_lrphi_172:
		next_state = LEGUP_F_main_BB_lrphi_173;
LEGUP_F_main_BB_lrphi_173:
	if ((main_lrphi_268 == 1'd1))
		next_state = LEGUP_F_main_BB__269_174;
	else if ((main_lrphi_268 == 1'd0))
		next_state = LEGUP_F_main_BB__271_177;
LEGUP_F_main_BB_lrphipreheader_169:
		next_state = LEGUP_F_main_BB_lrphi_170;
LEGUP_F_main_BB_preheaderi4i14_294:
		next_state = LEGUP_F_main_BB_preheaderi4i14_295;
LEGUP_F_main_BB_preheaderi4i14_295:
		next_state = LEGUP_F_main_BB_preheaderi4i14_296;
LEGUP_F_main_BB_preheaderi4i14_296:
		next_state = LEGUP_F_main_BB_preheaderi4i14_297;
LEGUP_F_main_BB_preheaderi4i14_297:
		next_state = LEGUP_F_main_BB_preheaderi4i14_298;
LEGUP_F_main_BB_preheaderi4i14_298:
		next_state = LEGUP_F_main_BB_preheaderi4i14_299;
LEGUP_F_main_BB_preheaderi4i14_299:
		next_state = LEGUP_F_main_BB_preheaderi4i14_300;
LEGUP_F_main_BB_preheaderi4i14_300:
		next_state = LEGUP_F_main_BB_preheaderi4i14_301;
LEGUP_F_main_BB_preheaderi4i14_301:
		next_state = LEGUP_F_main_BB_preheaderi4i14_302;
LEGUP_F_main_BB_preheaderi4i14_302:
		next_state = LEGUP_F_main_BB_preheaderi4i14_303;
LEGUP_F_main_BB_preheaderi4i14_303:
		next_state = LEGUP_F_main_BB_preheaderi4i14_304;
LEGUP_F_main_BB_preheaderi4i14_304:
		next_state = LEGUP_F_main_BB_preheaderi4i14_305;
LEGUP_F_main_BB_preheaderi4i14_305:
		next_state = LEGUP_F_main_BB_preheaderi4i14_306;
LEGUP_F_main_BB_preheaderi4i14_306:
		next_state = LEGUP_F_main_BB_preheaderi4i14_307;
LEGUP_F_main_BB_preheaderi4i14_307:
	if ((main_preheaderi4i14_exitcond31_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi4i14_294;
	else if ((main_preheaderi4i14_exitcond31_reg == 1'd0))
		next_state = LEGUP_F_main_BB_AddRoundKeyexit5i15_308;
LEGUP_F_main_BB_preheaderi4i_154:
		next_state = LEGUP_F_main_BB_preheaderi4i_155;
LEGUP_F_main_BB_preheaderi4i_155:
		next_state = LEGUP_F_main_BB_preheaderi4i_156;
LEGUP_F_main_BB_preheaderi4i_156:
		next_state = LEGUP_F_main_BB_preheaderi4i_157;
LEGUP_F_main_BB_preheaderi4i_157:
		next_state = LEGUP_F_main_BB_preheaderi4i_158;
LEGUP_F_main_BB_preheaderi4i_158:
		next_state = LEGUP_F_main_BB_preheaderi4i_159;
LEGUP_F_main_BB_preheaderi4i_159:
		next_state = LEGUP_F_main_BB_preheaderi4i_160;
LEGUP_F_main_BB_preheaderi4i_160:
		next_state = LEGUP_F_main_BB_preheaderi4i_161;
LEGUP_F_main_BB_preheaderi4i_161:
		next_state = LEGUP_F_main_BB_preheaderi4i_162;
LEGUP_F_main_BB_preheaderi4i_162:
		next_state = LEGUP_F_main_BB_preheaderi4i_163;
LEGUP_F_main_BB_preheaderi4i_163:
		next_state = LEGUP_F_main_BB_preheaderi4i_164;
LEGUP_F_main_BB_preheaderi4i_164:
		next_state = LEGUP_F_main_BB_preheaderi4i_165;
LEGUP_F_main_BB_preheaderi4i_165:
		next_state = LEGUP_F_main_BB_preheaderi4i_166;
LEGUP_F_main_BB_preheaderi4i_166:
		next_state = LEGUP_F_main_BB_preheaderi4i_167;
LEGUP_F_main_BB_preheaderi4i_167:
		next_state = LEGUP_F_main_BB_preheaderi4i_168;
LEGUP_F_main_BB_preheaderi4i_168:
	if ((main_preheaderi4i_exitcond36_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi4i_154;
	else if ((main_preheaderi4i_exitcond36_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrphipreheader_169;
LEGUP_F_main_BB_preheaderi_178:
		next_state = LEGUP_F_main_BB_preheaderi_179;
LEGUP_F_main_BB_preheaderi_179:
		next_state = LEGUP_F_main_BB_preheaderi_180;
LEGUP_F_main_BB_preheaderi_180:
		next_state = LEGUP_F_main_BB_preheaderi_181;
LEGUP_F_main_BB_preheaderi_181:
	if ((main_preheaderi_exitcondi_reg == 1'd1))
		next_state = LEGUP_F_main_BB_encryptexit_182;
	else if ((main_preheaderi_exitcondi_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderi_178;
LEGUP_F_main_BB_preheaderii4_200:
		next_state = LEGUP_F_main_BB_preheaderii4_201;
LEGUP_F_main_BB_preheaderii4_201:
		next_state = LEGUP_F_main_BB_preheaderii4_202;
LEGUP_F_main_BB_preheaderii4_202:
		next_state = LEGUP_F_main_BB_preheaderii4_203;
LEGUP_F_main_BB_preheaderii4_203:
		next_state = LEGUP_F_main_BB_preheaderii4_204;
LEGUP_F_main_BB_preheaderii4_204:
		next_state = LEGUP_F_main_BB_preheaderii4_205;
LEGUP_F_main_BB_preheaderii4_205:
		next_state = LEGUP_F_main_BB_preheaderii4_206;
LEGUP_F_main_BB_preheaderii4_206:
		next_state = LEGUP_F_main_BB_preheaderii4_207;
LEGUP_F_main_BB_preheaderii4_207:
		next_state = LEGUP_F_main_BB_preheaderii4_208;
LEGUP_F_main_BB_preheaderii4_208:
		next_state = LEGUP_F_main_BB_preheaderii4_209;
LEGUP_F_main_BB_preheaderii4_209:
		next_state = LEGUP_F_main_BB_preheaderii4_210;
LEGUP_F_main_BB_preheaderii4_210:
		next_state = LEGUP_F_main_BB_preheaderii4_211;
LEGUP_F_main_BB_preheaderii4_211:
		next_state = LEGUP_F_main_BB_preheaderii4_212;
LEGUP_F_main_BB_preheaderii4_212:
		next_state = LEGUP_F_main_BB_preheaderii4_213;
LEGUP_F_main_BB_preheaderii4_213:
		next_state = LEGUP_F_main_BB_preheaderii4_214;
LEGUP_F_main_BB_preheaderii4_214:
	if ((main_preheaderii4_exitcond33_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderii4_200;
	else if ((main_preheaderii4_exitcond33_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrph12ipreheader_215;
LEGUP_F_main_BB_preheaderii_34:
		next_state = LEGUP_F_main_BB_preheaderii_35;
LEGUP_F_main_BB_preheaderii_35:
		next_state = LEGUP_F_main_BB_preheaderii_36;
LEGUP_F_main_BB_preheaderii_36:
		next_state = LEGUP_F_main_BB_preheaderii_37;
LEGUP_F_main_BB_preheaderii_37:
		next_state = LEGUP_F_main_BB_preheaderii_38;
LEGUP_F_main_BB_preheaderii_38:
		next_state = LEGUP_F_main_BB_preheaderii_39;
LEGUP_F_main_BB_preheaderii_39:
		next_state = LEGUP_F_main_BB_preheaderii_40;
LEGUP_F_main_BB_preheaderii_40:
		next_state = LEGUP_F_main_BB_preheaderii_41;
LEGUP_F_main_BB_preheaderii_41:
		next_state = LEGUP_F_main_BB_preheaderii_42;
LEGUP_F_main_BB_preheaderii_42:
		next_state = LEGUP_F_main_BB_preheaderii_43;
LEGUP_F_main_BB_preheaderii_43:
		next_state = LEGUP_F_main_BB_preheaderii_44;
LEGUP_F_main_BB_preheaderii_44:
		next_state = LEGUP_F_main_BB_preheaderii_45;
LEGUP_F_main_BB_preheaderii_45:
		next_state = LEGUP_F_main_BB_preheaderii_46;
LEGUP_F_main_BB_preheaderii_46:
		next_state = LEGUP_F_main_BB_preheaderii_47;
LEGUP_F_main_BB_preheaderii_47:
	if ((main_preheaderii_exitcond39_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderii_34;
	else if ((main_preheaderii_exitcond39_reg == 1'd0))
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_48;
LEGUP_F_main_BB_preheaderloopexiti17_317:
		next_state = LEGUP_F_main_BB_preheaderloopexiti17_318;
LEGUP_F_main_BB_preheaderloopexiti17_318:
		next_state = LEGUP_F_main_BB_preheaderloopexiti17_319;
LEGUP_F_main_BB_preheaderloopexiti17_319:
		next_state = LEGUP_F_main_BB_preheaderloopexiti17_320;
LEGUP_F_main_BB_preheaderloopexiti17_320:
	if ((main_preheaderloopexiti17_exitcondi22_reg == 1'd1))
		next_state = LEGUP_F_main_BB_decryptexit_321;
	else if ((main_preheaderloopexiti17_exitcondi22_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderloopexiti17_317;
LEGUP_function_call_18:
	if ((KeySchedule_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_19;
LEGUP_function_call_183:
	if ((KeySchedule_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_encryptexit_184;
LEGUP_function_call_248:
	if ((AddRoundKey_InversMixColumn_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_lrph12i_249;
LEGUP_function_call_94:
	if ((MixColumn_AddRoundKey_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_95;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %2*/
	/*   %j.02.i.i = phi i32 [ 0, %0 ], [ %27, %2 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_2_j02ii = 32'd0;
	end
	/* main: %2*/
	/*   %j.02.i.i = phi i32 [ 0, %0 ], [ %27, %2 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__2_33) & (memory_controller_waitrequest == 1'd0)) & (main_2_exitcond40_reg == 1'd1))) */ begin
		main_2_j02ii = main_2_27_reg;
	end
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %j.02.i.i = phi i32 [ 0, %0 ], [ %27, %2 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_2_j02ii_reg <= main_2_j02ii;
		if (start == 1'b0 && ^(main_2_j02ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_j02ii_reg"); $finish; end
	end
	/* main: %2*/
	/*   %j.02.i.i = phi i32 [ 0, %0 ], [ %27, %2 ]*/
	if ((((cur_state == LEGUP_F_main_BB__2_33) & (memory_controller_waitrequest == 1'd0)) & (main_2_exitcond40_reg == 1'd1))) begin
		main_2_j02ii_reg <= main_2_j02ii;
		if (start == 1'b0 && ^(main_2_j02ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_j02ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_int = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_2_gep_int = 0; end
		main_2_gep_int = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_int = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_int_reg <= main_2_gep_int;
		if (start == 1'b0 && ^(main_2_gep_int) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_int_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_array = mul i32 %j.02.i.i, 4*/
		main_2_gep_array = (main_2_j02ii_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_array = mul i32 %j.02.i.i, 4*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_array_reg <= main_2_gep_array;
		if (start == 1'b0 && ^(main_2_gep_array) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_array_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep = add i32 %gep_int, %gep_array*/
		main_2_gep = main_signed_add_32_0;
end
always @(*) begin
/* main: %2*/
/*   %gep = add i32 %gep_int, %gep_array*/
	main_2_gep_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %2*/
	/*   %3 = inttoptr i32 %gep to i32**/
		main_2_3 = main_2_gep;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %3 = inttoptr i32 %gep to i32**/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_2_3_reg <= main_2_3;
		if (start == 1'b0 && ^(main_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %4 = load i32* %3, align 4, !tbaa !1*/
		main_2_4 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %4 = load i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		main_2_4_reg <= main_2_4;
		if (start == 1'b0 && ^(main_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %5 = shl nsw i32 %j.02.i.i, 2*/
		main_2_5 = (main_2_j02ii_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %5 = shl nsw i32 %j.02.i.i, 2*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_5_reg <= main_2_5;
		if (start == 1'b0 && ^(main_2_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_int1 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_2_gep_int1 = 0; end
		main_2_gep_int1 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_int1 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_int1_reg <= main_2_gep_int1;
		if (start == 1'b0 && ^(main_2_gep_int1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_int1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_array2 = mul i32 %5, 4*/
		main_2_gep_array2 = (main_2_5 * 32'd4);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_array2 = mul i32 %5, 4*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_array2_reg <= main_2_gep_array2;
		if (start == 1'b0 && ^(main_2_gep_array2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_array2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
		main_2_gep3 = main_signed_add_32_1;
end
always @(*) begin
/* main: %2*/
/*   %gep3 = add i32 %gep_int1, %gep_array2*/
	main_2_gep3_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %2*/
	/*   %6 = inttoptr i32 %gep3 to i32**/
		main_2_6 = main_2_gep3;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %6 = inttoptr i32 %gep3 to i32**/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_2_6_reg <= main_2_6;
		if (start == 1'b0 && ^(main_2_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %7 = load i32* %6, align 4, !tbaa !1*/
		main_2_7 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %7 = load i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		main_2_7_reg <= main_2_7;
		if (start == 1'b0 && ^(main_2_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %8 = xor i32 %7, %4*/
		main_2_8 = (main_2_7 ^ main_2_4);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %8 = xor i32 %7, %4*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		main_2_8_reg <= main_2_8;
		if (start == 1'b0 && ^(main_2_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_int4 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_2_gep_int4 = 0; end
		main_2_gep_int4 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_int4 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_int4_reg <= main_2_gep_int4;
		if (start == 1'b0 && ^(main_2_gep_int4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_int4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep5 = add i32 %gep_int4, 480*/
		main_2_gep5 = main_signed_add_32_0;
end
always @(*) begin
/* main: %2*/
/*   %gep5 = add i32 %gep_int4, 480*/
	main_2_gep5_reg = main_AddRoundKeyexit_crit_edgei_gep217_reg;
end
always @(*) begin
	/* main: %2*/
	/*   %gep_array6 = mul i32 %j.02.i.i, 4*/
		main_2_gep_array6 = (main_2_j02ii_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_array6 = mul i32 %j.02.i.i, 4*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_array6_reg <= main_2_gep_array6;
		if (start == 1'b0 && ^(main_2_gep_array6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_array6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep7 = add i32 %gep5, %gep_array6*/
		main_2_gep7 = main_signed_add_32_2;
end
always @(*) begin
/* main: %2*/
/*   %gep7 = add i32 %gep5, %gep_array6*/
	main_2_gep7_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %2*/
	/*   %9 = inttoptr i32 %gep7 to i32**/
		main_2_9 = main_2_gep7;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %9 = inttoptr i32 %gep7 to i32**/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_2_9_reg <= main_2_9;
		if (start == 1'b0 && ^(main_2_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
		main_2_10 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_26)) begin
		main_2_10_reg <= main_2_10;
		if (start == 1'b0 && ^(main_2_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %11 = or i32 %5, 1*/
		main_2_11 = (main_2_5 | 32'd1);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %11 = or i32 %5, 1*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_11_reg <= main_2_11;
		if (start == 1'b0 && ^(main_2_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_int8 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_2_gep_int8 = 0; end
		main_2_gep_int8 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_int8 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_int8_reg <= main_2_gep_int8;
		if (start == 1'b0 && ^(main_2_gep_int8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_int8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_array9 = mul i32 %11, 4*/
		main_2_gep_array9 = (main_2_11 * 32'd4);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_array9 = mul i32 %11, 4*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_array9_reg <= main_2_gep_array9;
		if (start == 1'b0 && ^(main_2_gep_array9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_array9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep10 = add i32 %gep_int8, %gep_array9*/
		main_2_gep10 = main_signed_add_32_3;
end
always @(*) begin
/* main: %2*/
/*   %gep10 = add i32 %gep_int8, %gep_array9*/
	main_2_gep10_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %2*/
	/*   %12 = inttoptr i32 %gep10 to i32**/
		main_2_12 = main_2_gep10;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %12 = inttoptr i32 %gep10 to i32**/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_2_12_reg <= main_2_12;
		if (start == 1'b0 && ^(main_2_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %13 = load i32* %12, align 4, !tbaa !1*/
		main_2_13 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %13 = load i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_26)) begin
		main_2_13_reg <= main_2_13;
		if (start == 1'b0 && ^(main_2_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %14 = xor i32 %13, %10*/
		main_2_14 = (main_2_13 ^ main_2_10);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %14 = xor i32 %13, %10*/
	if ((cur_state == LEGUP_F_main_BB__2_26)) begin
		main_2_14_reg <= main_2_14;
		if (start == 1'b0 && ^(main_2_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_int11 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_2_gep_int11 = 0; end
		main_2_gep_int11 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_int11 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_int11_reg <= main_2_gep_int11;
		if (start == 1'b0 && ^(main_2_gep_int11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_int11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep12 = add i32 %gep_int11, 960*/
		main_2_gep12 = main_signed_add_32_1;
end
always @(*) begin
/* main: %2*/
/*   %gep12 = add i32 %gep_int11, 960*/
	main_2_gep12_reg = main_AddRoundKeyexit_crit_edgei_gep221_reg;
end
always @(*) begin
	/* main: %2*/
	/*   %gep_array13 = mul i32 %j.02.i.i, 4*/
		main_2_gep_array13 = (main_2_j02ii_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_array13 = mul i32 %j.02.i.i, 4*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_array13_reg <= main_2_gep_array13;
		if (start == 1'b0 && ^(main_2_gep_array13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_array13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep14 = add i32 %gep12, %gep_array13*/
		main_2_gep14 = main_signed_add_32_4;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep14 = add i32 %gep12, %gep_array13*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_2_gep14_reg <= main_2_gep14;
		if (start == 1'b0 && ^(main_2_gep14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep14_reg"); $finish; end
	end
	/* main: %.preheader.i.i*/
	/*   %gep48 = add i32 %gep46, %gep_array47*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_2_gep14_reg <= main_preheaderii_gep48;
		if (start == 1'b0 && ^(main_preheaderii_gep48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep14_reg"); $finish; end
	end
	/* main: %.preheader.i4.i14*/
	/*   %544 = add nsw i32 %j.11.i3.i13, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_2_gep14_reg <= main_preheaderi4i14_544;
		if (start == 1'b0 && ^(main_preheaderi4i14_544) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %15 = inttoptr i32 %gep14 to i32**/
		main_2_15 = main_2_gep14;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %15 = inttoptr i32 %gep14 to i32**/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_2_15_reg <= main_2_15;
		if (start == 1'b0 && ^(main_2_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %16 = load i32* %15, align 4, !tbaa !1*/
		main_2_16 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %16 = load i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_29)) begin
		main_2_16_reg <= main_2_16;
		if (start == 1'b0 && ^(main_2_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %17 = or i32 %5, 2*/
		main_2_17 = (main_2_5 | 32'd2);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %17 = or i32 %5, 2*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_17_reg <= main_2_17;
		if (start == 1'b0 && ^(main_2_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_int15 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_2_gep_int15 = 0; end
		main_2_gep_int15 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_int15 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_int15_reg <= main_2_gep_int15;
		if (start == 1'b0 && ^(main_2_gep_int15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_int15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_array16 = mul i32 %17, 4*/
		main_2_gep_array16 = (main_2_17 * 32'd4);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_array16 = mul i32 %17, 4*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_array16_reg <= main_2_gep_array16;
		if (start == 1'b0 && ^(main_2_gep_array16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_array16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep17 = add i32 %gep_int15, %gep_array16*/
		main_2_gep17 = main_signed_add_32_5;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep17 = add i32 %gep_int15, %gep_array16*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_2_gep17_reg <= main_2_gep17;
		if (start == 1'b0 && ^(main_2_gep17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep17_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %gep508 = add i32 %gep_int506, %gep_array507*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main_2_gep17_reg <= main__crit_edgei_gep508;
		if (start == 1'b0 && ^(main__crit_edgei_gep508) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %18 = inttoptr i32 %gep17 to i32**/
		main_2_18 = main_2_gep17;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %18 = inttoptr i32 %gep17 to i32**/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_2_18_reg <= main_2_18;
		if (start == 1'b0 && ^(main_2_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %19 = load i32* %18, align 4, !tbaa !1*/
		main_2_19 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %19 = load i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_29)) begin
		main_2_19_reg <= main_2_19;
		if (start == 1'b0 && ^(main_2_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %20 = xor i32 %19, %16*/
		main_2_20 = (main_2_19 ^ main_2_16);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %20 = xor i32 %19, %16*/
	if ((cur_state == LEGUP_F_main_BB__2_29)) begin
		main_2_20_reg <= main_2_20;
		if (start == 1'b0 && ^(main_2_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_int18 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_2_gep_int18 = 0; end
		main_2_gep_int18 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_int18 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_int18_reg <= main_2_gep_int18;
		if (start == 1'b0 && ^(main_2_gep_int18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_int18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep19 = add i32 %gep_int18, 1440*/
		main_2_gep19 = main_signed_add_32_2;
end
always @(*) begin
/* main: %2*/
/*   %gep19 = add i32 %gep_int18, 1440*/
	main_2_gep19_reg = main_AddRoundKeyexit_crit_edgei_gep228_reg;
end
always @(*) begin
	/* main: %2*/
	/*   %gep_array20 = mul i32 %j.02.i.i, 4*/
		main_2_gep_array20 = (main_2_j02ii_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_array20 = mul i32 %j.02.i.i, 4*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_array20_reg <= main_2_gep_array20;
		if (start == 1'b0 && ^(main_2_gep_array20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_array20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep21 = add i32 %gep19, %gep_array20*/
		main_2_gep21 = main_signed_add_32_6;
end
always @(*) begin
/* main: %2*/
/*   %gep21 = add i32 %gep19, %gep_array20*/
	main_2_gep21_reg = main_preheaderi4i_255_reg;
end
always @(*) begin
	/* main: %2*/
	/*   %21 = inttoptr i32 %gep21 to i32**/
		main_2_21 = main_2_gep21;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %21 = inttoptr i32 %gep21 to i32**/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_2_21_reg <= main_2_21;
		if (start == 1'b0 && ^(main_2_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %22 = load i32* %21, align 4, !tbaa !1*/
		main_2_22 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %22 = load i32* %21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_32)) begin
		main_2_22_reg <= main_2_22;
		if (start == 1'b0 && ^(main_2_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %23 = or i32 %5, 3*/
		main_2_23 = (main_2_5 | 32'd3);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %23 = or i32 %5, 3*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_23_reg <= main_2_23;
		if (start == 1'b0 && ^(main_2_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_int22 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_2_gep_int22 = 0; end
		main_2_gep_int22 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_int22 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_int22_reg <= main_2_gep_int22;
		if (start == 1'b0 && ^(main_2_gep_int22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_int22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_array23 = mul i32 %23, 4*/
		main_2_gep_array23 = (main_2_23 * 32'd4);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_array23 = mul i32 %23, 4*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_array23_reg <= main_2_gep_array23;
		if (start == 1'b0 && ^(main_2_gep_array23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_array23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep24 = add i32 %gep_int22, %gep_array23*/
		main_2_gep24 = main_signed_add_32_7;
end
always @(*) begin
/* main: %2*/
/*   %gep24 = add i32 %gep_int22, %gep_array23*/
	main_2_gep24_reg = main_preheaderi4i_gep265_reg;
end
always @(*) begin
	/* main: %2*/
	/*   %24 = inttoptr i32 %gep24 to i32**/
		main_2_24 = main_2_gep24;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %24 = inttoptr i32 %gep24 to i32**/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_2_24_reg <= main_2_24;
		if (start == 1'b0 && ^(main_2_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %25 = load i32* %24, align 4, !tbaa !1*/
		main_2_25 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %25 = load i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_32)) begin
		main_2_25_reg <= main_2_25;
		if (start == 1'b0 && ^(main_2_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %26 = xor i32 %25, %22*/
		main_2_26 = (main_2_25 ^ main_2_22);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %26 = xor i32 %25, %22*/
	if ((cur_state == LEGUP_F_main_BB__2_32)) begin
		main_2_26_reg <= main_2_26;
		if (start == 1'b0 && ^(main_2_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %27 = add nsw i32 %j.02.i.i, 1*/
		main_2_27 = main_signed_add_32_3;
end
always @(*) begin
/* main: %2*/
/*   %27 = add nsw i32 %j.02.i.i, 1*/
	main_2_27_reg = main_AddRoundKeyexit_crit_edgei_gep235_reg;
end
always @(*) begin
	/* main: %2*/
	/*   %exitcond40 = icmp ne i32 %27, 4*/
		main_2_exitcond40 = (main_2_27 != 32'd4);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %exitcond40 = icmp ne i32 %27, 4*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_exitcond40_reg <= main_2_exitcond40;
		if (start == 1'b0 && ^(main_2_exitcond40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_exitcond40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %j.11.i.i = phi i32 [ %36, %.preheader.i.i ], [ 0, %2 ]*/
	if ((((cur_state == LEGUP_F_main_BB__2_33) & (memory_controller_waitrequest == 1'd0)) & (main_2_exitcond40_reg == 1'd0))) begin
		main_preheaderii_j11ii = 32'd0;
	end
	/* main: %.preheader.i.i*/
	/*   %j.11.i.i = phi i32 [ %36, %.preheader.i.i ], [ 0, %2 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderii_47) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderii_exitcond39_reg == 1'd1))) */ begin
		main_preheaderii_j11ii = main_preheaderii_36_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %j.11.i.i = phi i32 [ %36, %.preheader.i.i ], [ 0, %2 ]*/
	if ((((cur_state == LEGUP_F_main_BB__2_33) & (memory_controller_waitrequest == 1'd0)) & (main_2_exitcond40_reg == 1'd0))) begin
		main_preheaderii_j11ii_reg <= main_preheaderii_j11ii;
		if (start == 1'b0 && ^(main_preheaderii_j11ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_j11ii_reg"); $finish; end
	end
	/* main: %.preheader.i.i*/
	/*   %j.11.i.i = phi i32 [ %36, %.preheader.i.i ], [ 0, %2 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderii_47) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderii_exitcond39_reg == 1'd1))) begin
		main_preheaderii_j11ii_reg <= main_preheaderii_j11ii;
		if (start == 1'b0 && ^(main_preheaderii_j11ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_j11ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep_int25 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_preheaderii_gep_int25 = 0; end
		main_preheaderii_gep_int25 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %gep_int25 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_preheaderii_gep_int25_reg <= main_preheaderii_gep_int25;
		if (start == 1'b0 && ^(main_preheaderii_gep_int25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_gep_int25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep_array26 = mul i32 %j.11.i.i, 4*/
		main_preheaderii_gep_array26 = (main_preheaderii_j11ii_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %gep_array26 = mul i32 %j.11.i.i, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_preheaderii_gep_array26_reg <= main_preheaderii_gep_array26;
		if (start == 1'b0 && ^(main_preheaderii_gep_array26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_gep_array26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep27 = add i32 %gep_int25, %gep_array26*/
		main_preheaderii_gep27 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i.i*/
/*   %gep27 = add i32 %gep_int25, %gep_array26*/
	main_preheaderii_gep27_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %28 = inttoptr i32 %gep27 to i32**/
		main_preheaderii_28 = main_preheaderii_gep27;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %28 = inttoptr i32 %gep27 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_preheaderii_28_reg <= main_preheaderii_28;
		if (start == 1'b0 && ^(main_preheaderii_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
		main_preheaderii_29 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_37)) begin
		main_preheaderii_29_reg <= main_preheaderii_29;
		if (start == 1'b0 && ^(main_preheaderii_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %30 = shl nsw i32 %j.11.i.i, 2*/
		main_preheaderii_30 = (main_preheaderii_j11ii_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %30 = shl nsw i32 %j.11.i.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_preheaderii_30_reg <= main_preheaderii_30;
		if (start == 1'b0 && ^(main_preheaderii_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep_int28 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_preheaderii_gep_int28 = 0; end
		main_preheaderii_gep_int28 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %gep_int28 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_preheaderii_gep_int28_reg <= main_preheaderii_gep_int28;
		if (start == 1'b0 && ^(main_preheaderii_gep_int28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_gep_int28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep_array29 = mul i32 %30, 4*/
		main_preheaderii_gep_array29 = (main_preheaderii_30 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %gep_array29 = mul i32 %30, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_preheaderii_gep_array29_reg <= main_preheaderii_gep_array29;
		if (start == 1'b0 && ^(main_preheaderii_gep_array29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_gep_array29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep30 = add i32 %gep_int28, %gep_array29*/
		main_preheaderii_gep30 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i.i*/
/*   %gep30 = add i32 %gep_int28, %gep_array29*/
	main_preheaderii_gep30_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %31 = inttoptr i32 %gep30 to i32**/
		main_preheaderii_31 = main_preheaderii_gep30;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %31 = inttoptr i32 %gep30 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_preheaderii_31_reg <= main_preheaderii_31;
		if (start == 1'b0 && ^(main_preheaderii_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %32 = load i32* %31, align 4, !tbaa !1*/
		main_preheaderii_32 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %32 = load i32* %31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_37)) begin
		main_preheaderii_32_reg <= main_preheaderii_32;
		if (start == 1'b0 && ^(main_preheaderii_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %33 = xor i32 %32, %29*/
		main_preheaderii_33 = (main_preheaderii_32 ^ main_preheaderii_29);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %33 = xor i32 %32, %29*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_37)) begin
		main_preheaderii_33_reg <= main_preheaderii_33;
		if (start == 1'b0 && ^(main_preheaderii_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep_int31 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_preheaderii_gep_int31 = 0; end
		main_preheaderii_gep_int31 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %gep_int31 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_preheaderii_gep_int31_reg <= main_preheaderii_gep_int31;
		if (start == 1'b0 && ^(main_preheaderii_gep_int31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_gep_int31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep32 = add i32 %gep_int31, 480*/
		main_preheaderii_gep32 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i.i*/
/*   %gep32 = add i32 %gep_int31, 480*/
	main_preheaderii_gep32_reg = main_AddRoundKeyexit_crit_edgei_gep217_reg;
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep_array33 = mul i32 %j.11.i.i, 4*/
		main_preheaderii_gep_array33 = (main_preheaderii_j11ii_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %gep_array33 = mul i32 %j.11.i.i, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_preheaderii_gep_array33_reg <= main_preheaderii_gep_array33;
		if (start == 1'b0 && ^(main_preheaderii_gep_array33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_gep_array33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep34 = add i32 %gep32, %gep_array33*/
		main_preheaderii_gep34 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.preheader.i.i*/
/*   %gep34 = add i32 %gep32, %gep_array33*/
	main_preheaderii_gep34_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %34 = inttoptr i32 %gep34 to i32**/
		main_preheaderii_34 = main_preheaderii_gep34;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %34 = inttoptr i32 %gep34 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_preheaderii_34_reg <= main_preheaderii_34;
		if (start == 1'b0 && ^(main_preheaderii_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
		main_preheaderii_35 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_40)) begin
		main_preheaderii_35_reg <= main_preheaderii_35;
		if (start == 1'b0 && ^(main_preheaderii_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %36 = add nsw i32 %j.11.i.i, 1*/
		main_preheaderii_36 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %36 = add nsw i32 %j.11.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_preheaderii_36_reg <= main_preheaderii_36;
		if (start == 1'b0 && ^(main_preheaderii_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep_int35 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_preheaderii_gep_int35 = 0; end
		main_preheaderii_gep_int35 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %gep_int35 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_preheaderii_gep_int35_reg <= main_preheaderii_gep_int35;
		if (start == 1'b0 && ^(main_preheaderii_gep_int35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_gep_int35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep_array36 = mul i32 %36, 4*/
		main_preheaderii_gep_array36 = (main_preheaderii_36_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %gep_array36 = mul i32 %36, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_preheaderii_gep_array36_reg <= main_preheaderii_gep_array36;
		if (start == 1'b0 && ^(main_preheaderii_gep_array36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_gep_array36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep37 = add i32 %gep_int35, %gep_array36*/
		main_preheaderii_gep37 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i.i*/
/*   %gep37 = add i32 %gep_int35, %gep_array36*/
	main_preheaderii_gep37_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %37 = inttoptr i32 %gep37 to i32**/
		main_preheaderii_37 = main_preheaderii_gep37;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %37 = inttoptr i32 %gep37 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_36)) begin
		main_preheaderii_37_reg <= main_preheaderii_37;
		if (start == 1'b0 && ^(main_preheaderii_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %38 = load i32* %37, align 4, !tbaa !1*/
		main_preheaderii_38 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %38 = load i32* %37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_40)) begin
		main_preheaderii_38_reg <= main_preheaderii_38;
		if (start == 1'b0 && ^(main_preheaderii_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %39 = xor i32 %38, %35*/
		main_preheaderii_39 = (main_preheaderii_38 ^ main_preheaderii_35);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %39 = xor i32 %38, %35*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_40)) begin
		main_preheaderii_39_reg <= main_preheaderii_39;
		if (start == 1'b0 && ^(main_preheaderii_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep_int38 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_preheaderii_gep_int38 = 0; end
		main_preheaderii_gep_int38 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %gep_int38 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_preheaderii_gep_int38_reg <= main_preheaderii_gep_int38;
		if (start == 1'b0 && ^(main_preheaderii_gep_int38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_gep_int38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep39 = add i32 %gep_int38, 960*/
		main_preheaderii_gep39 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.preheader.i.i*/
/*   %gep39 = add i32 %gep_int38, 960*/
	main_preheaderii_gep39_reg = main_AddRoundKeyexit_crit_edgei_gep228_reg;
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep_array40 = mul i32 %j.11.i.i, 4*/
		main_preheaderii_gep_array40 = (main_preheaderii_j11ii_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %gep_array40 = mul i32 %j.11.i.i, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_preheaderii_gep_array40_reg <= main_preheaderii_gep_array40;
		if (start == 1'b0 && ^(main_preheaderii_gep_array40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_gep_array40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep41 = add i32 %gep39, %gep_array40*/
		main_preheaderii_gep41 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.preheader.i.i*/
/*   %gep41 = add i32 %gep39, %gep_array40*/
	main_preheaderii_gep41_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %40 = inttoptr i32 %gep41 to i32**/
		main_preheaderii_40 = main_preheaderii_gep41;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %40 = inttoptr i32 %gep41 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_preheaderii_40_reg <= main_preheaderii_40;
		if (start == 1'b0 && ^(main_preheaderii_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %41 = load i32* %40, align 4, !tbaa !1*/
		main_preheaderii_41 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %41 = load i32* %40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_43)) begin
		main_preheaderii_41_reg <= main_preheaderii_41;
		if (start == 1'b0 && ^(main_preheaderii_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %42 = add nsw i32 %j.11.i.i, 2*/
		main_preheaderii_42 = main_signed_add_32_6;
end
always @(*) begin
/* main: %.preheader.i.i*/
/*   %42 = add nsw i32 %j.11.i.i, 2*/
	main_preheaderii_42_reg = main_preheaderi4i_255_reg;
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep_int42 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_preheaderii_gep_int42 = 0; end
		main_preheaderii_gep_int42 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %gep_int42 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_preheaderii_gep_int42_reg <= main_preheaderii_gep_int42;
		if (start == 1'b0 && ^(main_preheaderii_gep_int42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_gep_int42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep_array43 = mul i32 %42, 4*/
		main_preheaderii_gep_array43 = (main_preheaderii_42_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %gep_array43 = mul i32 %42, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_preheaderii_gep_array43_reg <= main_preheaderii_gep_array43;
		if (start == 1'b0 && ^(main_preheaderii_gep_array43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_gep_array43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep44 = add i32 %gep_int42, %gep_array43*/
		main_preheaderii_gep44 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i.i*/
/*   %gep44 = add i32 %gep_int42, %gep_array43*/
	main_preheaderii_gep44_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %43 = inttoptr i32 %gep44 to i32**/
		main_preheaderii_43 = main_preheaderii_gep44;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %43 = inttoptr i32 %gep44 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_36)) begin
		main_preheaderii_43_reg <= main_preheaderii_43;
		if (start == 1'b0 && ^(main_preheaderii_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
		main_preheaderii_44 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_43)) begin
		main_preheaderii_44_reg <= main_preheaderii_44;
		if (start == 1'b0 && ^(main_preheaderii_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %45 = xor i32 %44, %41*/
		main_preheaderii_45 = (main_preheaderii_44 ^ main_preheaderii_41);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %45 = xor i32 %44, %41*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_43)) begin
		main_preheaderii_45_reg <= main_preheaderii_45;
		if (start == 1'b0 && ^(main_preheaderii_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep_int45 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_preheaderii_gep_int45 = 0; end
		main_preheaderii_gep_int45 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %gep_int45 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_preheaderii_gep_int45_reg <= main_preheaderii_gep_int45;
		if (start == 1'b0 && ^(main_preheaderii_gep_int45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_gep_int45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep46 = add i32 %gep_int45, 1440*/
		main_preheaderii_gep46 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.preheader.i.i*/
/*   %gep46 = add i32 %gep_int45, 1440*/
	main_preheaderii_gep46_reg = main_AddRoundKeyexit_crit_edgei_gep235_reg;
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep_array47 = mul i32 %j.11.i.i, 4*/
		main_preheaderii_gep_array47 = (main_preheaderii_j11ii_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %gep_array47 = mul i32 %j.11.i.i, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_preheaderii_gep_array47_reg <= main_preheaderii_gep_array47;
		if (start == 1'b0 && ^(main_preheaderii_gep_array47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_gep_array47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep48 = add i32 %gep46, %gep_array47*/
		main_preheaderii_gep48 = main_signed_add_32_4;
end
always @(*) begin
/* main: %.preheader.i.i*/
/*   %gep48 = add i32 %gep46, %gep_array47*/
	main_preheaderii_gep48_reg = main_2_gep14_reg;
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %46 = inttoptr i32 %gep48 to i32**/
		main_preheaderii_46 = main_preheaderii_gep48;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %46 = inttoptr i32 %gep48 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_preheaderii_46_reg <= main_preheaderii_46;
		if (start == 1'b0 && ^(main_preheaderii_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %47 = load i32* %46, align 4, !tbaa !1*/
		main_preheaderii_47 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %47 = load i32* %46, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_46)) begin
		main_preheaderii_47_reg <= main_preheaderii_47;
		if (start == 1'b0 && ^(main_preheaderii_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %48 = add nsw i32 %j.11.i.i, 3*/
		main_preheaderii_48 = main_signed_add_32_4;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %48 = add nsw i32 %j.11.i.i, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_preheaderii_48_reg <= main_preheaderii_48;
		if (start == 1'b0 && ^(main_preheaderii_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep_int49 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_preheaderii_gep_int49 = 0; end
		main_preheaderii_gep_int49 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %gep_int49 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_preheaderii_gep_int49_reg <= main_preheaderii_gep_int49;
		if (start == 1'b0 && ^(main_preheaderii_gep_int49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_gep_int49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep_array50 = mul i32 %48, 4*/
		main_preheaderii_gep_array50 = (main_preheaderii_48_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %gep_array50 = mul i32 %48, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_preheaderii_gep_array50_reg <= main_preheaderii_gep_array50;
		if (start == 1'b0 && ^(main_preheaderii_gep_array50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_gep_array50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %gep51 = add i32 %gep_int49, %gep_array50*/
		main_preheaderii_gep51 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.preheader.i.i*/
/*   %gep51 = add i32 %gep_int49, %gep_array50*/
	main_preheaderii_gep51_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %49 = inttoptr i32 %gep51 to i32**/
		main_preheaderii_49 = main_preheaderii_gep51;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %49 = inttoptr i32 %gep51 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_36)) begin
		main_preheaderii_49_reg <= main_preheaderii_49;
		if (start == 1'b0 && ^(main_preheaderii_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %50 = load i32* %49, align 4, !tbaa !1*/
		main_preheaderii_50 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %50 = load i32* %49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_46)) begin
		main_preheaderii_50_reg <= main_preheaderii_50;
		if (start == 1'b0 && ^(main_preheaderii_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %51 = xor i32 %50, %47*/
		main_preheaderii_51 = (main_preheaderii_50 ^ main_preheaderii_47);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %51 = xor i32 %50, %47*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_46)) begin
		main_preheaderii_51_reg <= main_preheaderii_51;
		if (start == 1'b0 && ^(main_preheaderii_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %exitcond39 = icmp ne i32 %36, 4*/
		main_preheaderii_exitcond39 = (main_preheaderii_36 != 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %exitcond39 = icmp ne i32 %36, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_preheaderii_exitcond39_reg <= main_preheaderii_exitcond39;
		if (start == 1'b0 && ^(main_preheaderii_exitcond39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_exitcond39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %52 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_52 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %52 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		main_AddRoundKeyexitipreheader_52_reg <= main_AddRoundKeyexitipreheader_52;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %53 = and i32 %52, 15*/
		main_AddRoundKeyexitipreheader_53 = (main_AddRoundKeyexitipreheader_52 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %53 = and i32 %52, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		main_AddRoundKeyexitipreheader_53_reg <= main_AddRoundKeyexitipreheader_53;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %54 = ashr i32 %52, 4*/
		main_AddRoundKeyexitipreheader_54 = ($signed(main_AddRoundKeyexitipreheader_52) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %54 = ashr i32 %52, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		main_AddRoundKeyexitipreheader_54_reg <= main_AddRoundKeyexitipreheader_54;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int52 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int52 = 0; end
		main_AddRoundKeyexitipreheader_gep_int52 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int52 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		main_AddRoundKeyexitipreheader_gep_int52_reg <= main_AddRoundKeyexitipreheader_gep_int52;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array53 = mul i32 %54, 64*/
		main_AddRoundKeyexitipreheader_gep_array53 = (main_AddRoundKeyexitipreheader_54 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array53 = mul i32 %54, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		main_AddRoundKeyexitipreheader_gep_array53_reg <= main_AddRoundKeyexitipreheader_gep_array53;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep54 = add i32 %gep_int52, %gep_array53*/
		main_AddRoundKeyexitipreheader_gep54 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep54 = add i32 %gep_int52, %gep_array53*/
	main_AddRoundKeyexitipreheader_gep54_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array55 = mul i32 %53, 4*/
		main_AddRoundKeyexitipreheader_gep_array55 = (main_AddRoundKeyexitipreheader_53 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array55 = mul i32 %53, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		main_AddRoundKeyexitipreheader_gep_array55_reg <= main_AddRoundKeyexitipreheader_gep_array55;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep56 = add i32 %gep54, %gep_array55*/
		main_AddRoundKeyexitipreheader_gep56 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep56 = add i32 %gep54, %gep_array55*/
	main_AddRoundKeyexitipreheader_gep56_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %55 = inttoptr i32 %gep56 to i32**/
		main_AddRoundKeyexitipreheader_55 = main_AddRoundKeyexitipreheader_gep56;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %55 = inttoptr i32 %gep56 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_AddRoundKeyexitipreheader_55_reg <= main_AddRoundKeyexitipreheader_55;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_56 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		main_AddRoundKeyexitipreheader_56_reg <= main_AddRoundKeyexitipreheader_56;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %57 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_57 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %57 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		main_AddRoundKeyexitipreheader_57_reg <= main_AddRoundKeyexitipreheader_57;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %58 = and i32 %57, 15*/
		main_AddRoundKeyexitipreheader_58 = (main_AddRoundKeyexitipreheader_57 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %58 = and i32 %57, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		main_AddRoundKeyexitipreheader_58_reg <= main_AddRoundKeyexitipreheader_58;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %59 = ashr i32 %57, 4*/
		main_AddRoundKeyexitipreheader_59 = ($signed(main_AddRoundKeyexitipreheader_57) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %59 = ashr i32 %57, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		main_AddRoundKeyexitipreheader_59_reg <= main_AddRoundKeyexitipreheader_59;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int57 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int57 = 0; end
		main_AddRoundKeyexitipreheader_gep_int57 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int57 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		main_AddRoundKeyexitipreheader_gep_int57_reg <= main_AddRoundKeyexitipreheader_gep_int57;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array58 = mul i32 %59, 64*/
		main_AddRoundKeyexitipreheader_gep_array58 = (main_AddRoundKeyexitipreheader_59 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array58 = mul i32 %59, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		main_AddRoundKeyexitipreheader_gep_array58_reg <= main_AddRoundKeyexitipreheader_gep_array58;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep59 = add i32 %gep_int57, %gep_array58*/
		main_AddRoundKeyexitipreheader_gep59 = main_signed_add_32_2;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep59 = add i32 %gep_int57, %gep_array58*/
	main_AddRoundKeyexitipreheader_gep59_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array60 = mul i32 %58, 4*/
		main_AddRoundKeyexitipreheader_gep_array60 = (main_AddRoundKeyexitipreheader_58 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array60 = mul i32 %58, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		main_AddRoundKeyexitipreheader_gep_array60_reg <= main_AddRoundKeyexitipreheader_gep_array60;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep61 = add i32 %gep59, %gep_array60*/
		main_AddRoundKeyexitipreheader_gep61 = main_signed_add_32_3;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep61 = add i32 %gep59, %gep_array60*/
	main_AddRoundKeyexitipreheader_gep61_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %60 = inttoptr i32 %gep61 to i32**/
		main_AddRoundKeyexitipreheader_60 = main_AddRoundKeyexitipreheader_gep61;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %60 = inttoptr i32 %gep61 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_AddRoundKeyexitipreheader_60_reg <= main_AddRoundKeyexitipreheader_60;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %61 = load i32* %60, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_61 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %61 = load i32* %60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		main_AddRoundKeyexitipreheader_61_reg <= main_AddRoundKeyexitipreheader_61;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %62 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_62 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %62 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_AddRoundKeyexitipreheader_62_reg <= main_AddRoundKeyexitipreheader_62;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %63 = and i32 %62, 15*/
		main_AddRoundKeyexitipreheader_63 = (main_AddRoundKeyexitipreheader_62 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %63 = and i32 %62, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_AddRoundKeyexitipreheader_63_reg <= main_AddRoundKeyexitipreheader_63;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %64 = ashr i32 %62, 4*/
		main_AddRoundKeyexitipreheader_64 = ($signed(main_AddRoundKeyexitipreheader_62) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %64 = ashr i32 %62, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_AddRoundKeyexitipreheader_64_reg <= main_AddRoundKeyexitipreheader_64;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int62 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int62 = 0; end
		main_AddRoundKeyexitipreheader_gep_int62 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int62 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		main_AddRoundKeyexitipreheader_gep_int62_reg <= main_AddRoundKeyexitipreheader_gep_int62;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array63 = mul i32 %64, 64*/
		main_AddRoundKeyexitipreheader_gep_array63 = (main_AddRoundKeyexitipreheader_64 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array63 = mul i32 %64, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_AddRoundKeyexitipreheader_gep_array63_reg <= main_AddRoundKeyexitipreheader_gep_array63;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep64 = add i32 %gep_int62, %gep_array63*/
		main_AddRoundKeyexitipreheader_gep64 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep64 = add i32 %gep_int62, %gep_array63*/
	main_AddRoundKeyexitipreheader_gep64_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array65 = mul i32 %63, 4*/
		main_AddRoundKeyexitipreheader_gep_array65 = (main_AddRoundKeyexitipreheader_63 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array65 = mul i32 %63, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_AddRoundKeyexitipreheader_gep_array65_reg <= main_AddRoundKeyexitipreheader_gep_array65;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep66 = add i32 %gep64, %gep_array65*/
		main_AddRoundKeyexitipreheader_gep66 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep66 = add i32 %gep64, %gep_array65*/
	main_AddRoundKeyexitipreheader_gep66_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %65 = inttoptr i32 %gep66 to i32**/
		main_AddRoundKeyexitipreheader_65 = main_AddRoundKeyexitipreheader_gep66;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %65 = inttoptr i32 %gep66 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_AddRoundKeyexitipreheader_65_reg <= main_AddRoundKeyexitipreheader_65;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %66 = load i32* %65, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_66 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %66 = load i32* %65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_61)) begin
		main_AddRoundKeyexitipreheader_66_reg <= main_AddRoundKeyexitipreheader_66;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %67 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_67 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %67 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_AddRoundKeyexitipreheader_67_reg <= main_AddRoundKeyexitipreheader_67;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %68 = and i32 %67, 15*/
		main_AddRoundKeyexitipreheader_68 = (main_AddRoundKeyexitipreheader_67 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %68 = and i32 %67, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_AddRoundKeyexitipreheader_68_reg <= main_AddRoundKeyexitipreheader_68;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %69 = ashr i32 %67, 4*/
		main_AddRoundKeyexitipreheader_69 = ($signed(main_AddRoundKeyexitipreheader_67) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %69 = ashr i32 %67, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_AddRoundKeyexitipreheader_69_reg <= main_AddRoundKeyexitipreheader_69;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int67 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int67 = 0; end
		main_AddRoundKeyexitipreheader_gep_int67 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int67 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		main_AddRoundKeyexitipreheader_gep_int67_reg <= main_AddRoundKeyexitipreheader_gep_int67;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array68 = mul i32 %69, 64*/
		main_AddRoundKeyexitipreheader_gep_array68 = (main_AddRoundKeyexitipreheader_69 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array68 = mul i32 %69, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_AddRoundKeyexitipreheader_gep_array68_reg <= main_AddRoundKeyexitipreheader_gep_array68;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep69 = add i32 %gep_int67, %gep_array68*/
		main_AddRoundKeyexitipreheader_gep69 = main_signed_add_32_2;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep69 = add i32 %gep_int67, %gep_array68*/
	main_AddRoundKeyexitipreheader_gep69_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array70 = mul i32 %68, 4*/
		main_AddRoundKeyexitipreheader_gep_array70 = (main_AddRoundKeyexitipreheader_68 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array70 = mul i32 %68, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_AddRoundKeyexitipreheader_gep_array70_reg <= main_AddRoundKeyexitipreheader_gep_array70;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep71 = add i32 %gep69, %gep_array70*/
		main_AddRoundKeyexitipreheader_gep71 = main_signed_add_32_3;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep71 = add i32 %gep69, %gep_array70*/
	main_AddRoundKeyexitipreheader_gep71_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %70 = inttoptr i32 %gep71 to i32**/
		main_AddRoundKeyexitipreheader_70 = main_AddRoundKeyexitipreheader_gep71;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %70 = inttoptr i32 %gep71 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_AddRoundKeyexitipreheader_70_reg <= main_AddRoundKeyexitipreheader_70;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %71 = load i32* %70, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_71 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %71 = load i32* %70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_64)) begin
		main_AddRoundKeyexitipreheader_71_reg <= main_AddRoundKeyexitipreheader_71;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %72 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_72 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %72 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_AddRoundKeyexitipreheader_72_reg <= main_AddRoundKeyexitipreheader_72;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %73 = and i32 %72, 15*/
		main_AddRoundKeyexitipreheader_73 = (main_AddRoundKeyexitipreheader_72 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %73 = and i32 %72, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_AddRoundKeyexitipreheader_73_reg <= main_AddRoundKeyexitipreheader_73;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %74 = ashr i32 %72, 4*/
		main_AddRoundKeyexitipreheader_74 = ($signed(main_AddRoundKeyexitipreheader_72) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %74 = ashr i32 %72, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_AddRoundKeyexitipreheader_74_reg <= main_AddRoundKeyexitipreheader_74;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int72 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int72 = 0; end
		main_AddRoundKeyexitipreheader_gep_int72 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int72 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		main_AddRoundKeyexitipreheader_gep_int72_reg <= main_AddRoundKeyexitipreheader_gep_int72;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array73 = mul i32 %74, 64*/
		main_AddRoundKeyexitipreheader_gep_array73 = (main_AddRoundKeyexitipreheader_74 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array73 = mul i32 %74, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_AddRoundKeyexitipreheader_gep_array73_reg <= main_AddRoundKeyexitipreheader_gep_array73;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep74 = add i32 %gep_int72, %gep_array73*/
		main_AddRoundKeyexitipreheader_gep74 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep74 = add i32 %gep_int72, %gep_array73*/
	main_AddRoundKeyexitipreheader_gep74_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array75 = mul i32 %73, 4*/
		main_AddRoundKeyexitipreheader_gep_array75 = (main_AddRoundKeyexitipreheader_73 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array75 = mul i32 %73, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_AddRoundKeyexitipreheader_gep_array75_reg <= main_AddRoundKeyexitipreheader_gep_array75;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep76 = add i32 %gep74, %gep_array75*/
		main_AddRoundKeyexitipreheader_gep76 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep76 = add i32 %gep74, %gep_array75*/
	main_AddRoundKeyexitipreheader_gep76_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %75 = inttoptr i32 %gep76 to i32**/
		main_AddRoundKeyexitipreheader_75 = main_AddRoundKeyexitipreheader_gep76;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %75 = inttoptr i32 %gep76 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_AddRoundKeyexitipreheader_75_reg <= main_AddRoundKeyexitipreheader_75;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %76 = load i32* %75, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_76 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %76 = load i32* %75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_67)) begin
		main_AddRoundKeyexitipreheader_76_reg <= main_AddRoundKeyexitipreheader_76;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %77 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_77 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %77 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_AddRoundKeyexitipreheader_77_reg <= main_AddRoundKeyexitipreheader_77;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %78 = and i32 %77, 15*/
		main_AddRoundKeyexitipreheader_78 = (main_AddRoundKeyexitipreheader_77 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %78 = and i32 %77, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_AddRoundKeyexitipreheader_78_reg <= main_AddRoundKeyexitipreheader_78;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %79 = ashr i32 %77, 4*/
		main_AddRoundKeyexitipreheader_79 = ($signed(main_AddRoundKeyexitipreheader_77) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %79 = ashr i32 %77, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_AddRoundKeyexitipreheader_79_reg <= main_AddRoundKeyexitipreheader_79;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int77 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int77 = 0; end
		main_AddRoundKeyexitipreheader_gep_int77 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int77 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		main_AddRoundKeyexitipreheader_gep_int77_reg <= main_AddRoundKeyexitipreheader_gep_int77;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array78 = mul i32 %79, 64*/
		main_AddRoundKeyexitipreheader_gep_array78 = (main_AddRoundKeyexitipreheader_79 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array78 = mul i32 %79, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_AddRoundKeyexitipreheader_gep_array78_reg <= main_AddRoundKeyexitipreheader_gep_array78;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep79 = add i32 %gep_int77, %gep_array78*/
		main_AddRoundKeyexitipreheader_gep79 = main_signed_add_32_2;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep79 = add i32 %gep_int77, %gep_array78*/
	main_AddRoundKeyexitipreheader_gep79_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array80 = mul i32 %78, 4*/
		main_AddRoundKeyexitipreheader_gep_array80 = (main_AddRoundKeyexitipreheader_78 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array80 = mul i32 %78, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_AddRoundKeyexitipreheader_gep_array80_reg <= main_AddRoundKeyexitipreheader_gep_array80;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep81 = add i32 %gep79, %gep_array80*/
		main_AddRoundKeyexitipreheader_gep81 = main_signed_add_32_3;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep81 = add i32 %gep79, %gep_array80*/
	main_AddRoundKeyexitipreheader_gep81_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %80 = inttoptr i32 %gep81 to i32**/
		main_AddRoundKeyexitipreheader_80 = main_AddRoundKeyexitipreheader_gep81;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %80 = inttoptr i32 %gep81 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_AddRoundKeyexitipreheader_80_reg <= main_AddRoundKeyexitipreheader_80;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %81 = load i32* %80, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_81 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %81 = load i32* %80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_67)) begin
		main_AddRoundKeyexitipreheader_81_reg <= main_AddRoundKeyexitipreheader_81;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %82 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_82 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %82 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_AddRoundKeyexitipreheader_82_reg <= main_AddRoundKeyexitipreheader_82;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %83 = and i32 %82, 15*/
		main_AddRoundKeyexitipreheader_83 = (main_AddRoundKeyexitipreheader_82 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %83 = and i32 %82, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_AddRoundKeyexitipreheader_83_reg <= main_AddRoundKeyexitipreheader_83;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %84 = ashr i32 %82, 4*/
		main_AddRoundKeyexitipreheader_84 = ($signed(main_AddRoundKeyexitipreheader_82) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %84 = ashr i32 %82, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_AddRoundKeyexitipreheader_84_reg <= main_AddRoundKeyexitipreheader_84;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int82 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int82 = 0; end
		main_AddRoundKeyexitipreheader_gep_int82 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int82 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		main_AddRoundKeyexitipreheader_gep_int82_reg <= main_AddRoundKeyexitipreheader_gep_int82;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array83 = mul i32 %84, 64*/
		main_AddRoundKeyexitipreheader_gep_array83 = (main_AddRoundKeyexitipreheader_84 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array83 = mul i32 %84, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_AddRoundKeyexitipreheader_gep_array83_reg <= main_AddRoundKeyexitipreheader_gep_array83;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep84 = add i32 %gep_int82, %gep_array83*/
		main_AddRoundKeyexitipreheader_gep84 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep84 = add i32 %gep_int82, %gep_array83*/
	main_AddRoundKeyexitipreheader_gep84_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array85 = mul i32 %83, 4*/
		main_AddRoundKeyexitipreheader_gep_array85 = (main_AddRoundKeyexitipreheader_83 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array85 = mul i32 %83, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_AddRoundKeyexitipreheader_gep_array85_reg <= main_AddRoundKeyexitipreheader_gep_array85;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep86 = add i32 %gep84, %gep_array85*/
		main_AddRoundKeyexitipreheader_gep86 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep86 = add i32 %gep84, %gep_array85*/
	main_AddRoundKeyexitipreheader_gep86_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %85 = inttoptr i32 %gep86 to i32**/
		main_AddRoundKeyexitipreheader_85 = main_AddRoundKeyexitipreheader_gep86;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %85 = inttoptr i32 %gep86 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_AddRoundKeyexitipreheader_85_reg <= main_AddRoundKeyexitipreheader_85;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_86 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_70)) begin
		main_AddRoundKeyexitipreheader_86_reg <= main_AddRoundKeyexitipreheader_86;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %87 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_87 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %87 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_AddRoundKeyexitipreheader_87_reg <= main_AddRoundKeyexitipreheader_87;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %88 = and i32 %87, 15*/
		main_AddRoundKeyexitipreheader_88 = (main_AddRoundKeyexitipreheader_87 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %88 = and i32 %87, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_AddRoundKeyexitipreheader_88_reg <= main_AddRoundKeyexitipreheader_88;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %89 = ashr i32 %87, 4*/
		main_AddRoundKeyexitipreheader_89 = ($signed(main_AddRoundKeyexitipreheader_87) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %89 = ashr i32 %87, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_AddRoundKeyexitipreheader_89_reg <= main_AddRoundKeyexitipreheader_89;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int87 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int87 = 0; end
		main_AddRoundKeyexitipreheader_gep_int87 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int87 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		main_AddRoundKeyexitipreheader_gep_int87_reg <= main_AddRoundKeyexitipreheader_gep_int87;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array88 = mul i32 %89, 64*/
		main_AddRoundKeyexitipreheader_gep_array88 = (main_AddRoundKeyexitipreheader_89 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array88 = mul i32 %89, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_AddRoundKeyexitipreheader_gep_array88_reg <= main_AddRoundKeyexitipreheader_gep_array88;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep89 = add i32 %gep_int87, %gep_array88*/
		main_AddRoundKeyexitipreheader_gep89 = main_signed_add_32_2;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep89 = add i32 %gep_int87, %gep_array88*/
	main_AddRoundKeyexitipreheader_gep89_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array90 = mul i32 %88, 4*/
		main_AddRoundKeyexitipreheader_gep_array90 = (main_AddRoundKeyexitipreheader_88 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array90 = mul i32 %88, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_AddRoundKeyexitipreheader_gep_array90_reg <= main_AddRoundKeyexitipreheader_gep_array90;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep91 = add i32 %gep89, %gep_array90*/
		main_AddRoundKeyexitipreheader_gep91 = main_signed_add_32_3;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep91 = add i32 %gep89, %gep_array90*/
	main_AddRoundKeyexitipreheader_gep91_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %90 = inttoptr i32 %gep91 to i32**/
		main_AddRoundKeyexitipreheader_90 = main_AddRoundKeyexitipreheader_gep91;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %90 = inttoptr i32 %gep91 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_AddRoundKeyexitipreheader_90_reg <= main_AddRoundKeyexitipreheader_90;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %91 = load i32* %90, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_91 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %91 = load i32* %90, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_70)) begin
		main_AddRoundKeyexitipreheader_91_reg <= main_AddRoundKeyexitipreheader_91;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %92 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_92 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %92 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_AddRoundKeyexitipreheader_92_reg <= main_AddRoundKeyexitipreheader_92;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %93 = and i32 %92, 15*/
		main_AddRoundKeyexitipreheader_93 = (main_AddRoundKeyexitipreheader_92 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %93 = and i32 %92, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_AddRoundKeyexitipreheader_93_reg <= main_AddRoundKeyexitipreheader_93;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %94 = ashr i32 %92, 4*/
		main_AddRoundKeyexitipreheader_94 = ($signed(main_AddRoundKeyexitipreheader_92) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %94 = ashr i32 %92, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_AddRoundKeyexitipreheader_94_reg <= main_AddRoundKeyexitipreheader_94;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int92 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int92 = 0; end
		main_AddRoundKeyexitipreheader_gep_int92 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int92 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		main_AddRoundKeyexitipreheader_gep_int92_reg <= main_AddRoundKeyexitipreheader_gep_int92;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array93 = mul i32 %94, 64*/
		main_AddRoundKeyexitipreheader_gep_array93 = (main_AddRoundKeyexitipreheader_94 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array93 = mul i32 %94, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_AddRoundKeyexitipreheader_gep_array93_reg <= main_AddRoundKeyexitipreheader_gep_array93;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep94 = add i32 %gep_int92, %gep_array93*/
		main_AddRoundKeyexitipreheader_gep94 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep94 = add i32 %gep_int92, %gep_array93*/
	main_AddRoundKeyexitipreheader_gep94_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array95 = mul i32 %93, 4*/
		main_AddRoundKeyexitipreheader_gep_array95 = (main_AddRoundKeyexitipreheader_93 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array95 = mul i32 %93, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_AddRoundKeyexitipreheader_gep_array95_reg <= main_AddRoundKeyexitipreheader_gep_array95;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep96 = add i32 %gep94, %gep_array95*/
		main_AddRoundKeyexitipreheader_gep96 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep96 = add i32 %gep94, %gep_array95*/
	main_AddRoundKeyexitipreheader_gep96_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %95 = inttoptr i32 %gep96 to i32**/
		main_AddRoundKeyexitipreheader_95 = main_AddRoundKeyexitipreheader_gep96;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %95 = inttoptr i32 %gep96 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_AddRoundKeyexitipreheader_95_reg <= main_AddRoundKeyexitipreheader_95;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %96 = load i32* %95, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_96 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %96 = load i32* %95, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_73)) begin
		main_AddRoundKeyexitipreheader_96_reg <= main_AddRoundKeyexitipreheader_96;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %97 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_97 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %97 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_AddRoundKeyexitipreheader_97_reg <= main_AddRoundKeyexitipreheader_97;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %98 = and i32 %97, 15*/
		main_AddRoundKeyexitipreheader_98 = (main_AddRoundKeyexitipreheader_97 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %98 = and i32 %97, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_AddRoundKeyexitipreheader_98_reg <= main_AddRoundKeyexitipreheader_98;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %99 = ashr i32 %97, 4*/
		main_AddRoundKeyexitipreheader_99 = ($signed(main_AddRoundKeyexitipreheader_97) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %99 = ashr i32 %97, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_AddRoundKeyexitipreheader_99_reg <= main_AddRoundKeyexitipreheader_99;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int97 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int97 = 0; end
		main_AddRoundKeyexitipreheader_gep_int97 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int97 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		main_AddRoundKeyexitipreheader_gep_int97_reg <= main_AddRoundKeyexitipreheader_gep_int97;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array98 = mul i32 %99, 64*/
		main_AddRoundKeyexitipreheader_gep_array98 = (main_AddRoundKeyexitipreheader_99 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array98 = mul i32 %99, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_AddRoundKeyexitipreheader_gep_array98_reg <= main_AddRoundKeyexitipreheader_gep_array98;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep99 = add i32 %gep_int97, %gep_array98*/
		main_AddRoundKeyexitipreheader_gep99 = main_signed_add_32_2;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep99 = add i32 %gep_int97, %gep_array98*/
	main_AddRoundKeyexitipreheader_gep99_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array100 = mul i32 %98, 4*/
		main_AddRoundKeyexitipreheader_gep_array100 = (main_AddRoundKeyexitipreheader_98 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array100 = mul i32 %98, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_AddRoundKeyexitipreheader_gep_array100_reg <= main_AddRoundKeyexitipreheader_gep_array100;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep101 = add i32 %gep99, %gep_array100*/
		main_AddRoundKeyexitipreheader_gep101 = main_signed_add_32_3;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep101 = add i32 %gep99, %gep_array100*/
	main_AddRoundKeyexitipreheader_gep101_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %100 = inttoptr i32 %gep101 to i32**/
		main_AddRoundKeyexitipreheader_100 = main_AddRoundKeyexitipreheader_gep101;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %100 = inttoptr i32 %gep101 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_AddRoundKeyexitipreheader_100_reg <= main_AddRoundKeyexitipreheader_100;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %101 = load i32* %100, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_101 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %101 = load i32* %100, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_73)) begin
		main_AddRoundKeyexitipreheader_101_reg <= main_AddRoundKeyexitipreheader_101;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %102 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_102 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %102 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_AddRoundKeyexitipreheader_102_reg <= main_AddRoundKeyexitipreheader_102;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %103 = and i32 %102, 15*/
		main_AddRoundKeyexitipreheader_103 = (main_AddRoundKeyexitipreheader_102 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %103 = and i32 %102, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_AddRoundKeyexitipreheader_103_reg <= main_AddRoundKeyexitipreheader_103;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %104 = ashr i32 %102, 4*/
		main_AddRoundKeyexitipreheader_104 = ($signed(main_AddRoundKeyexitipreheader_102) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %104 = ashr i32 %102, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_AddRoundKeyexitipreheader_104_reg <= main_AddRoundKeyexitipreheader_104;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int102 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int102 = 0; end
		main_AddRoundKeyexitipreheader_gep_int102 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int102 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		main_AddRoundKeyexitipreheader_gep_int102_reg <= main_AddRoundKeyexitipreheader_gep_int102;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array103 = mul i32 %104, 64*/
		main_AddRoundKeyexitipreheader_gep_array103 = (main_AddRoundKeyexitipreheader_104 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array103 = mul i32 %104, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_AddRoundKeyexitipreheader_gep_array103_reg <= main_AddRoundKeyexitipreheader_gep_array103;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep104 = add i32 %gep_int102, %gep_array103*/
		main_AddRoundKeyexitipreheader_gep104 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep104 = add i32 %gep_int102, %gep_array103*/
	main_AddRoundKeyexitipreheader_gep104_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array105 = mul i32 %103, 4*/
		main_AddRoundKeyexitipreheader_gep_array105 = (main_AddRoundKeyexitipreheader_103 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array105 = mul i32 %103, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_AddRoundKeyexitipreheader_gep_array105_reg <= main_AddRoundKeyexitipreheader_gep_array105;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep106 = add i32 %gep104, %gep_array105*/
		main_AddRoundKeyexitipreheader_gep106 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep106 = add i32 %gep104, %gep_array105*/
	main_AddRoundKeyexitipreheader_gep106_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %105 = inttoptr i32 %gep106 to i32**/
		main_AddRoundKeyexitipreheader_105 = main_AddRoundKeyexitipreheader_gep106;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %105 = inttoptr i32 %gep106 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_AddRoundKeyexitipreheader_105_reg <= main_AddRoundKeyexitipreheader_105;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %106 = load i32* %105, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_106 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %106 = load i32* %105, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_76)) begin
		main_AddRoundKeyexitipreheader_106_reg <= main_AddRoundKeyexitipreheader_106;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %107 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_107 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %107 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_AddRoundKeyexitipreheader_107_reg <= main_AddRoundKeyexitipreheader_107;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %108 = and i32 %107, 15*/
		main_AddRoundKeyexitipreheader_108 = (main_AddRoundKeyexitipreheader_107 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %108 = and i32 %107, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_AddRoundKeyexitipreheader_108_reg <= main_AddRoundKeyexitipreheader_108;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %109 = ashr i32 %107, 4*/
		main_AddRoundKeyexitipreheader_109 = ($signed(main_AddRoundKeyexitipreheader_107) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %109 = ashr i32 %107, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_AddRoundKeyexitipreheader_109_reg <= main_AddRoundKeyexitipreheader_109;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int107 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int107 = 0; end
		main_AddRoundKeyexitipreheader_gep_int107 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int107 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		main_AddRoundKeyexitipreheader_gep_int107_reg <= main_AddRoundKeyexitipreheader_gep_int107;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array108 = mul i32 %109, 64*/
		main_AddRoundKeyexitipreheader_gep_array108 = (main_AddRoundKeyexitipreheader_109 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array108 = mul i32 %109, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_AddRoundKeyexitipreheader_gep_array108_reg <= main_AddRoundKeyexitipreheader_gep_array108;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep109 = add i32 %gep_int107, %gep_array108*/
		main_AddRoundKeyexitipreheader_gep109 = main_signed_add_32_2;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep109 = add i32 %gep_int107, %gep_array108*/
	main_AddRoundKeyexitipreheader_gep109_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array110 = mul i32 %108, 4*/
		main_AddRoundKeyexitipreheader_gep_array110 = (main_AddRoundKeyexitipreheader_108 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array110 = mul i32 %108, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_AddRoundKeyexitipreheader_gep_array110_reg <= main_AddRoundKeyexitipreheader_gep_array110;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep111 = add i32 %gep109, %gep_array110*/
		main_AddRoundKeyexitipreheader_gep111 = main_signed_add_32_3;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep111 = add i32 %gep109, %gep_array110*/
	main_AddRoundKeyexitipreheader_gep111_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %110 = inttoptr i32 %gep111 to i32**/
		main_AddRoundKeyexitipreheader_110 = main_AddRoundKeyexitipreheader_gep111;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %110 = inttoptr i32 %gep111 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_AddRoundKeyexitipreheader_110_reg <= main_AddRoundKeyexitipreheader_110;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %111 = load i32* %110, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_111 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %111 = load i32* %110, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_79)) begin
		main_AddRoundKeyexitipreheader_111_reg <= main_AddRoundKeyexitipreheader_111;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %112 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_112 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %112 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_AddRoundKeyexitipreheader_112_reg <= main_AddRoundKeyexitipreheader_112;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %113 = and i32 %112, 15*/
		main_AddRoundKeyexitipreheader_113 = (main_AddRoundKeyexitipreheader_112 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %113 = and i32 %112, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_AddRoundKeyexitipreheader_113_reg <= main_AddRoundKeyexitipreheader_113;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %114 = ashr i32 %112, 4*/
		main_AddRoundKeyexitipreheader_114 = ($signed(main_AddRoundKeyexitipreheader_112) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %114 = ashr i32 %112, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_AddRoundKeyexitipreheader_114_reg <= main_AddRoundKeyexitipreheader_114;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int112 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int112 = 0; end
		main_AddRoundKeyexitipreheader_gep_int112 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int112 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		main_AddRoundKeyexitipreheader_gep_int112_reg <= main_AddRoundKeyexitipreheader_gep_int112;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array113 = mul i32 %114, 64*/
		main_AddRoundKeyexitipreheader_gep_array113 = (main_AddRoundKeyexitipreheader_114 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array113 = mul i32 %114, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_AddRoundKeyexitipreheader_gep_array113_reg <= main_AddRoundKeyexitipreheader_gep_array113;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep114 = add i32 %gep_int112, %gep_array113*/
		main_AddRoundKeyexitipreheader_gep114 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep114 = add i32 %gep_int112, %gep_array113*/
	main_AddRoundKeyexitipreheader_gep114_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array115 = mul i32 %113, 4*/
		main_AddRoundKeyexitipreheader_gep_array115 = (main_AddRoundKeyexitipreheader_113 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array115 = mul i32 %113, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_AddRoundKeyexitipreheader_gep_array115_reg <= main_AddRoundKeyexitipreheader_gep_array115;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep116 = add i32 %gep114, %gep_array115*/
		main_AddRoundKeyexitipreheader_gep116 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep116 = add i32 %gep114, %gep_array115*/
	main_AddRoundKeyexitipreheader_gep116_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %115 = inttoptr i32 %gep116 to i32**/
		main_AddRoundKeyexitipreheader_115 = main_AddRoundKeyexitipreheader_gep116;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %115 = inttoptr i32 %gep116 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_AddRoundKeyexitipreheader_115_reg <= main_AddRoundKeyexitipreheader_115;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %116 = load i32* %115, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_116 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %116 = load i32* %115, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_82)) begin
		main_AddRoundKeyexitipreheader_116_reg <= main_AddRoundKeyexitipreheader_116;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %117 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_117 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %117 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_AddRoundKeyexitipreheader_117_reg <= main_AddRoundKeyexitipreheader_117;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %118 = and i32 %117, 15*/
		main_AddRoundKeyexitipreheader_118 = (main_AddRoundKeyexitipreheader_117 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %118 = and i32 %117, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_AddRoundKeyexitipreheader_118_reg <= main_AddRoundKeyexitipreheader_118;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %119 = ashr i32 %117, 4*/
		main_AddRoundKeyexitipreheader_119 = ($signed(main_AddRoundKeyexitipreheader_117) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %119 = ashr i32 %117, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_AddRoundKeyexitipreheader_119_reg <= main_AddRoundKeyexitipreheader_119;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int117 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int117 = 0; end
		main_AddRoundKeyexitipreheader_gep_int117 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int117 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		main_AddRoundKeyexitipreheader_gep_int117_reg <= main_AddRoundKeyexitipreheader_gep_int117;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array118 = mul i32 %119, 64*/
		main_AddRoundKeyexitipreheader_gep_array118 = (main_AddRoundKeyexitipreheader_119 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array118 = mul i32 %119, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_AddRoundKeyexitipreheader_gep_array118_reg <= main_AddRoundKeyexitipreheader_gep_array118;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep119 = add i32 %gep_int117, %gep_array118*/
		main_AddRoundKeyexitipreheader_gep119 = main_signed_add_32_2;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep119 = add i32 %gep_int117, %gep_array118*/
	main_AddRoundKeyexitipreheader_gep119_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array120 = mul i32 %118, 4*/
		main_AddRoundKeyexitipreheader_gep_array120 = (main_AddRoundKeyexitipreheader_118 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array120 = mul i32 %118, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_AddRoundKeyexitipreheader_gep_array120_reg <= main_AddRoundKeyexitipreheader_gep_array120;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep121 = add i32 %gep119, %gep_array120*/
		main_AddRoundKeyexitipreheader_gep121 = main_signed_add_32_3;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep121 = add i32 %gep119, %gep_array120*/
	main_AddRoundKeyexitipreheader_gep121_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %120 = inttoptr i32 %gep121 to i32**/
		main_AddRoundKeyexitipreheader_120 = main_AddRoundKeyexitipreheader_gep121;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %120 = inttoptr i32 %gep121 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_AddRoundKeyexitipreheader_120_reg <= main_AddRoundKeyexitipreheader_120;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %121 = load i32* %120, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_121 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %121 = load i32* %120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_85)) begin
		main_AddRoundKeyexitipreheader_121_reg <= main_AddRoundKeyexitipreheader_121;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %122 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_122 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %122 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_AddRoundKeyexitipreheader_122_reg <= main_AddRoundKeyexitipreheader_122;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %123 = and i32 %122, 15*/
		main_AddRoundKeyexitipreheader_123 = (main_AddRoundKeyexitipreheader_122 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %123 = and i32 %122, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_AddRoundKeyexitipreheader_123_reg <= main_AddRoundKeyexitipreheader_123;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %124 = ashr i32 %122, 4*/
		main_AddRoundKeyexitipreheader_124 = ($signed(main_AddRoundKeyexitipreheader_122) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %124 = ashr i32 %122, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_AddRoundKeyexitipreheader_124_reg <= main_AddRoundKeyexitipreheader_124;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int122 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int122 = 0; end
		main_AddRoundKeyexitipreheader_gep_int122 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int122 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		main_AddRoundKeyexitipreheader_gep_int122_reg <= main_AddRoundKeyexitipreheader_gep_int122;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array123 = mul i32 %124, 64*/
		main_AddRoundKeyexitipreheader_gep_array123 = (main_AddRoundKeyexitipreheader_124 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array123 = mul i32 %124, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_AddRoundKeyexitipreheader_gep_array123_reg <= main_AddRoundKeyexitipreheader_gep_array123;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep124 = add i32 %gep_int122, %gep_array123*/
		main_AddRoundKeyexitipreheader_gep124 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep124 = add i32 %gep_int122, %gep_array123*/
	main_AddRoundKeyexitipreheader_gep124_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array125 = mul i32 %123, 4*/
		main_AddRoundKeyexitipreheader_gep_array125 = (main_AddRoundKeyexitipreheader_123 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array125 = mul i32 %123, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_AddRoundKeyexitipreheader_gep_array125_reg <= main_AddRoundKeyexitipreheader_gep_array125;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep126 = add i32 %gep124, %gep_array125*/
		main_AddRoundKeyexitipreheader_gep126 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep126 = add i32 %gep124, %gep_array125*/
	main_AddRoundKeyexitipreheader_gep126_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %125 = inttoptr i32 %gep126 to i32**/
		main_AddRoundKeyexitipreheader_125 = main_AddRoundKeyexitipreheader_gep126;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %125 = inttoptr i32 %gep126 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		main_AddRoundKeyexitipreheader_125_reg <= main_AddRoundKeyexitipreheader_125;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %126 = load i32* %125, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_126 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %126 = load i32* %125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_88)) begin
		main_AddRoundKeyexitipreheader_126_reg <= main_AddRoundKeyexitipreheader_126;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %127 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_127 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %127 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_AddRoundKeyexitipreheader_127_reg <= main_AddRoundKeyexitipreheader_127;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %128 = and i32 %127, 15*/
		main_AddRoundKeyexitipreheader_128 = (main_AddRoundKeyexitipreheader_127 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %128 = and i32 %127, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_AddRoundKeyexitipreheader_128_reg <= main_AddRoundKeyexitipreheader_128;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %129 = ashr i32 %127, 4*/
		main_AddRoundKeyexitipreheader_129 = ($signed(main_AddRoundKeyexitipreheader_127) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %129 = ashr i32 %127, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_AddRoundKeyexitipreheader_129_reg <= main_AddRoundKeyexitipreheader_129;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int127 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int127 = 0; end
		main_AddRoundKeyexitipreheader_gep_int127 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int127 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		main_AddRoundKeyexitipreheader_gep_int127_reg <= main_AddRoundKeyexitipreheader_gep_int127;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array128 = mul i32 %129, 64*/
		main_AddRoundKeyexitipreheader_gep_array128 = (main_AddRoundKeyexitipreheader_129 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array128 = mul i32 %129, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_AddRoundKeyexitipreheader_gep_array128_reg <= main_AddRoundKeyexitipreheader_gep_array128;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep129 = add i32 %gep_int127, %gep_array128*/
		main_AddRoundKeyexitipreheader_gep129 = main_signed_add_32_2;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep129 = add i32 %gep_int127, %gep_array128*/
	main_AddRoundKeyexitipreheader_gep129_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array130 = mul i32 %128, 4*/
		main_AddRoundKeyexitipreheader_gep_array130 = (main_AddRoundKeyexitipreheader_128 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array130 = mul i32 %128, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_AddRoundKeyexitipreheader_gep_array130_reg <= main_AddRoundKeyexitipreheader_gep_array130;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep131 = add i32 %gep129, %gep_array130*/
		main_AddRoundKeyexitipreheader_gep131 = main_signed_add_32_3;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep131 = add i32 %gep129, %gep_array130*/
	main_AddRoundKeyexitipreheader_gep131_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %130 = inttoptr i32 %gep131 to i32**/
		main_AddRoundKeyexitipreheader_130 = main_AddRoundKeyexitipreheader_gep131;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %130 = inttoptr i32 %gep131 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		main_AddRoundKeyexitipreheader_130_reg <= main_AddRoundKeyexitipreheader_130;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %131 = load i32* %130, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_131 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %131 = load i32* %130, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_91)) begin
		main_AddRoundKeyexitipreheader_131_reg <= main_AddRoundKeyexitipreheader_131;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %i.010.i = phi i32 [ %133, %AddRoundKey.exit.i ], [ 1, %AddRoundKey.exit.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_AddRoundKeyexiti_i010i = 32'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %i.010.i = phi i32 [ %133, %AddRoundKey.exit.i ], [ 1, %AddRoundKey.exit.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_138) & (memory_controller_waitrequest == 1'd0)) & (main_AddRoundKeyexiti_exitcond38_reg == 1'd1))) */ begin
		main_AddRoundKeyexiti_i010i = main_AddRoundKeyexiti_133_reg;
	end
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %i.010.i = phi i32 [ %133, %AddRoundKey.exit.i ], [ 1, %AddRoundKey.exit.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_AddRoundKeyexiti_i010i_reg <= main_AddRoundKeyexiti_i010i;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_i010i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_i010i_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %i.010.i = phi i32 [ %133, %AddRoundKey.exit.i ], [ 1, %AddRoundKey.exit.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_138) & (memory_controller_waitrequest == 1'd0)) & (main_AddRoundKeyexiti_exitcond38_reg == 1'd1))) begin
		main_AddRoundKeyexiti_i010i_reg <= main_AddRoundKeyexiti_i010i;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_i010i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_i010i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %133 = add nsw i32 %i.010.i, 1*/
		main_AddRoundKeyexiti_133 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %133 = add nsw i32 %i.010.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_133_reg <= main_AddRoundKeyexiti_133;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %134 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_134 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %134 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		main_AddRoundKeyexiti_134_reg <= main_AddRoundKeyexiti_134;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_134_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %135 = and i32 %134, 15*/
		main_AddRoundKeyexiti_135 = (main_AddRoundKeyexiti_134 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %135 = and i32 %134, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		main_AddRoundKeyexiti_135_reg <= main_AddRoundKeyexiti_135;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %136 = ashr i32 %134, 4*/
		main_AddRoundKeyexiti_136 = ($signed(main_AddRoundKeyexiti_134) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %136 = ashr i32 %134, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		main_AddRoundKeyexiti_136_reg <= main_AddRoundKeyexiti_136;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int132 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int132 = 0; end
		main_AddRoundKeyexiti_gep_int132 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int132 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_gep_int132_reg <= main_AddRoundKeyexiti_gep_int132;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array133 = mul i32 %136, 64*/
		main_AddRoundKeyexiti_gep_array133 = (main_AddRoundKeyexiti_136 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array133 = mul i32 %136, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		main_AddRoundKeyexiti_gep_array133_reg <= main_AddRoundKeyexiti_gep_array133;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep134 = add i32 %gep_int132, %gep_array133*/
		main_AddRoundKeyexiti_gep134 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep134 = add i32 %gep_int132, %gep_array133*/
	main_AddRoundKeyexiti_gep134_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array135 = mul i32 %135, 4*/
		main_AddRoundKeyexiti_gep_array135 = (main_AddRoundKeyexiti_135 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array135 = mul i32 %135, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		main_AddRoundKeyexiti_gep_array135_reg <= main_AddRoundKeyexiti_gep_array135;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep136 = add i32 %gep134, %gep_array135*/
		main_AddRoundKeyexiti_gep136 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep136 = add i32 %gep134, %gep_array135*/
	main_AddRoundKeyexiti_gep136_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %137 = inttoptr i32 %gep136 to i32**/
		main_AddRoundKeyexiti_137 = main_AddRoundKeyexiti_gep136;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %137 = inttoptr i32 %gep136 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_AddRoundKeyexiti_137_reg <= main_AddRoundKeyexiti_137;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %138 = load i32* %137, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_138 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %138 = load i32* %137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_100)) begin
		main_AddRoundKeyexiti_138_reg <= main_AddRoundKeyexiti_138;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %139 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_139 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %139 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		main_AddRoundKeyexiti_139_reg <= main_AddRoundKeyexiti_139;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %140 = and i32 %139, 15*/
		main_AddRoundKeyexiti_140 = (main_AddRoundKeyexiti_139 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %140 = and i32 %139, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		main_AddRoundKeyexiti_140_reg <= main_AddRoundKeyexiti_140;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %141 = ashr i32 %139, 4*/
		main_AddRoundKeyexiti_141 = ($signed(main_AddRoundKeyexiti_139) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %141 = ashr i32 %139, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		main_AddRoundKeyexiti_141_reg <= main_AddRoundKeyexiti_141;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int137 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int137 = 0; end
		main_AddRoundKeyexiti_gep_int137 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int137 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_gep_int137_reg <= main_AddRoundKeyexiti_gep_int137;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array138 = mul i32 %141, 64*/
		main_AddRoundKeyexiti_gep_array138 = (main_AddRoundKeyexiti_141 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array138 = mul i32 %141, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		main_AddRoundKeyexiti_gep_array138_reg <= main_AddRoundKeyexiti_gep_array138;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep139 = add i32 %gep_int137, %gep_array138*/
		main_AddRoundKeyexiti_gep139 = main_signed_add_32_2;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep139 = add i32 %gep_int137, %gep_array138*/
	main_AddRoundKeyexiti_gep139_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array140 = mul i32 %140, 4*/
		main_AddRoundKeyexiti_gep_array140 = (main_AddRoundKeyexiti_140 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array140 = mul i32 %140, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		main_AddRoundKeyexiti_gep_array140_reg <= main_AddRoundKeyexiti_gep_array140;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep141 = add i32 %gep139, %gep_array140*/
		main_AddRoundKeyexiti_gep141 = main_signed_add_32_3;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep141 = add i32 %gep139, %gep_array140*/
	main_AddRoundKeyexiti_gep141_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %142 = inttoptr i32 %gep141 to i32**/
		main_AddRoundKeyexiti_142 = main_AddRoundKeyexiti_gep141;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %142 = inttoptr i32 %gep141 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_AddRoundKeyexiti_142_reg <= main_AddRoundKeyexiti_142;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %143 = load i32* %142, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_143 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %143 = load i32* %142, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_100)) begin
		main_AddRoundKeyexiti_143_reg <= main_AddRoundKeyexiti_143;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %144 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_144 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %144 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		main_AddRoundKeyexiti_144_reg <= main_AddRoundKeyexiti_144;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %145 = and i32 %144, 15*/
		main_AddRoundKeyexiti_145 = (main_AddRoundKeyexiti_144 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %145 = and i32 %144, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		main_AddRoundKeyexiti_145_reg <= main_AddRoundKeyexiti_145;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %146 = ashr i32 %144, 4*/
		main_AddRoundKeyexiti_146 = ($signed(main_AddRoundKeyexiti_144) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %146 = ashr i32 %144, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		main_AddRoundKeyexiti_146_reg <= main_AddRoundKeyexiti_146;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int142 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int142 = 0; end
		main_AddRoundKeyexiti_gep_int142 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int142 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_gep_int142_reg <= main_AddRoundKeyexiti_gep_int142;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array143 = mul i32 %146, 64*/
		main_AddRoundKeyexiti_gep_array143 = (main_AddRoundKeyexiti_146 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array143 = mul i32 %146, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		main_AddRoundKeyexiti_gep_array143_reg <= main_AddRoundKeyexiti_gep_array143;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep144 = add i32 %gep_int142, %gep_array143*/
		main_AddRoundKeyexiti_gep144 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep144 = add i32 %gep_int142, %gep_array143*/
	main_AddRoundKeyexiti_gep144_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array145 = mul i32 %145, 4*/
		main_AddRoundKeyexiti_gep_array145 = (main_AddRoundKeyexiti_145 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array145 = mul i32 %145, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		main_AddRoundKeyexiti_gep_array145_reg <= main_AddRoundKeyexiti_gep_array145;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep146 = add i32 %gep144, %gep_array145*/
		main_AddRoundKeyexiti_gep146 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep146 = add i32 %gep144, %gep_array145*/
	main_AddRoundKeyexiti_gep146_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %147 = inttoptr i32 %gep146 to i32**/
		main_AddRoundKeyexiti_147 = main_AddRoundKeyexiti_gep146;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %147 = inttoptr i32 %gep146 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		main_AddRoundKeyexiti_147_reg <= main_AddRoundKeyexiti_147;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %148 = load i32* %147, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_148 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %148 = load i32* %147, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_104)) begin
		main_AddRoundKeyexiti_148_reg <= main_AddRoundKeyexiti_148;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %149 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_149 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %149 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_103)) begin
		main_AddRoundKeyexiti_149_reg <= main_AddRoundKeyexiti_149;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %150 = and i32 %149, 15*/
		main_AddRoundKeyexiti_150 = (main_AddRoundKeyexiti_149 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %150 = and i32 %149, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_103)) begin
		main_AddRoundKeyexiti_150_reg <= main_AddRoundKeyexiti_150;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %151 = ashr i32 %149, 4*/
		main_AddRoundKeyexiti_151 = ($signed(main_AddRoundKeyexiti_149) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %151 = ashr i32 %149, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_103)) begin
		main_AddRoundKeyexiti_151_reg <= main_AddRoundKeyexiti_151;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int147 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int147 = 0; end
		main_AddRoundKeyexiti_gep_int147 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int147 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_gep_int147_reg <= main_AddRoundKeyexiti_gep_int147;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array148 = mul i32 %151, 64*/
		main_AddRoundKeyexiti_gep_array148 = (main_AddRoundKeyexiti_151 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array148 = mul i32 %151, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_103)) begin
		main_AddRoundKeyexiti_gep_array148_reg <= main_AddRoundKeyexiti_gep_array148;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep149 = add i32 %gep_int147, %gep_array148*/
		main_AddRoundKeyexiti_gep149 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep149 = add i32 %gep_int147, %gep_array148*/
	main_AddRoundKeyexiti_gep149_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array150 = mul i32 %150, 4*/
		main_AddRoundKeyexiti_gep_array150 = (main_AddRoundKeyexiti_150 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array150 = mul i32 %150, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_103)) begin
		main_AddRoundKeyexiti_gep_array150_reg <= main_AddRoundKeyexiti_gep_array150;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep151 = add i32 %gep149, %gep_array150*/
		main_AddRoundKeyexiti_gep151 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep151 = add i32 %gep149, %gep_array150*/
	main_AddRoundKeyexiti_gep151_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %152 = inttoptr i32 %gep151 to i32**/
		main_AddRoundKeyexiti_152 = main_AddRoundKeyexiti_gep151;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %152 = inttoptr i32 %gep151 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_104)) begin
		main_AddRoundKeyexiti_152_reg <= main_AddRoundKeyexiti_152;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %153 = load i32* %152, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_153 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %153 = load i32* %152, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_107)) begin
		main_AddRoundKeyexiti_153_reg <= main_AddRoundKeyexiti_153;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %154 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_154 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %154 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_107)) begin
		main_AddRoundKeyexiti_154_reg <= main_AddRoundKeyexiti_154;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %155 = and i32 %154, 15*/
		main_AddRoundKeyexiti_155 = (main_AddRoundKeyexiti_154 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %155 = and i32 %154, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_107)) begin
		main_AddRoundKeyexiti_155_reg <= main_AddRoundKeyexiti_155;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %156 = ashr i32 %154, 4*/
		main_AddRoundKeyexiti_156 = ($signed(main_AddRoundKeyexiti_154) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %156 = ashr i32 %154, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_107)) begin
		main_AddRoundKeyexiti_156_reg <= main_AddRoundKeyexiti_156;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int152 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int152 = 0; end
		main_AddRoundKeyexiti_gep_int152 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int152 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_gep_int152_reg <= main_AddRoundKeyexiti_gep_int152;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array153 = mul i32 %156, 64*/
		main_AddRoundKeyexiti_gep_array153 = (main_AddRoundKeyexiti_156 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array153 = mul i32 %156, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_107)) begin
		main_AddRoundKeyexiti_gep_array153_reg <= main_AddRoundKeyexiti_gep_array153;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep154 = add i32 %gep_int152, %gep_array153*/
		main_AddRoundKeyexiti_gep154 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep154 = add i32 %gep_int152, %gep_array153*/
	main_AddRoundKeyexiti_gep154_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array155 = mul i32 %155, 4*/
		main_AddRoundKeyexiti_gep_array155 = (main_AddRoundKeyexiti_155 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array155 = mul i32 %155, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_107)) begin
		main_AddRoundKeyexiti_gep_array155_reg <= main_AddRoundKeyexiti_gep_array155;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep156 = add i32 %gep154, %gep_array155*/
		main_AddRoundKeyexiti_gep156 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep156 = add i32 %gep154, %gep_array155*/
	main_AddRoundKeyexiti_gep156_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %157 = inttoptr i32 %gep156 to i32**/
		main_AddRoundKeyexiti_157 = main_AddRoundKeyexiti_gep156;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %157 = inttoptr i32 %gep156 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		main_AddRoundKeyexiti_157_reg <= main_AddRoundKeyexiti_157;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %158 = load i32* %157, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_158 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %158 = load i32* %157, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_110)) begin
		main_AddRoundKeyexiti_158_reg <= main_AddRoundKeyexiti_158;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %159 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_159 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %159 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		main_AddRoundKeyexiti_159_reg <= main_AddRoundKeyexiti_159;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %160 = and i32 %159, 15*/
		main_AddRoundKeyexiti_160 = (main_AddRoundKeyexiti_159 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %160 = and i32 %159, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		main_AddRoundKeyexiti_160_reg <= main_AddRoundKeyexiti_160;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %161 = ashr i32 %159, 4*/
		main_AddRoundKeyexiti_161 = ($signed(main_AddRoundKeyexiti_159) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %161 = ashr i32 %159, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		main_AddRoundKeyexiti_161_reg <= main_AddRoundKeyexiti_161;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int157 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int157 = 0; end
		main_AddRoundKeyexiti_gep_int157 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int157 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_gep_int157_reg <= main_AddRoundKeyexiti_gep_int157;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array158 = mul i32 %161, 64*/
		main_AddRoundKeyexiti_gep_array158 = (main_AddRoundKeyexiti_161 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array158 = mul i32 %161, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		main_AddRoundKeyexiti_gep_array158_reg <= main_AddRoundKeyexiti_gep_array158;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep159 = add i32 %gep_int157, %gep_array158*/
		main_AddRoundKeyexiti_gep159 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep159 = add i32 %gep_int157, %gep_array158*/
	main_AddRoundKeyexiti_gep159_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array160 = mul i32 %160, 4*/
		main_AddRoundKeyexiti_gep_array160 = (main_AddRoundKeyexiti_160 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array160 = mul i32 %160, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		main_AddRoundKeyexiti_gep_array160_reg <= main_AddRoundKeyexiti_gep_array160;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep161 = add i32 %gep159, %gep_array160*/
		main_AddRoundKeyexiti_gep161 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep161 = add i32 %gep159, %gep_array160*/
	main_AddRoundKeyexiti_gep161_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %162 = inttoptr i32 %gep161 to i32**/
		main_AddRoundKeyexiti_162 = main_AddRoundKeyexiti_gep161;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %162 = inttoptr i32 %gep161 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		main_AddRoundKeyexiti_162_reg <= main_AddRoundKeyexiti_162;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_162_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %163 = load i32* %162, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_163 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %163 = load i32* %162, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		main_AddRoundKeyexiti_163_reg <= main_AddRoundKeyexiti_163;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %164 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_164 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %164 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		main_AddRoundKeyexiti_164_reg <= main_AddRoundKeyexiti_164;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_164_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %165 = and i32 %164, 15*/
		main_AddRoundKeyexiti_165 = (main_AddRoundKeyexiti_164 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %165 = and i32 %164, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		main_AddRoundKeyexiti_165_reg <= main_AddRoundKeyexiti_165;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %166 = ashr i32 %164, 4*/
		main_AddRoundKeyexiti_166 = ($signed(main_AddRoundKeyexiti_164) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %166 = ashr i32 %164, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		main_AddRoundKeyexiti_166_reg <= main_AddRoundKeyexiti_166;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_166_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int162 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int162 = 0; end
		main_AddRoundKeyexiti_gep_int162 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int162 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_gep_int162_reg <= main_AddRoundKeyexiti_gep_int162;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int162_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array163 = mul i32 %166, 64*/
		main_AddRoundKeyexiti_gep_array163 = (main_AddRoundKeyexiti_166 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array163 = mul i32 %166, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		main_AddRoundKeyexiti_gep_array163_reg <= main_AddRoundKeyexiti_gep_array163;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep164 = add i32 %gep_int162, %gep_array163*/
		main_AddRoundKeyexiti_gep164 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep164 = add i32 %gep_int162, %gep_array163*/
	main_AddRoundKeyexiti_gep164_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array165 = mul i32 %165, 4*/
		main_AddRoundKeyexiti_gep_array165 = (main_AddRoundKeyexiti_165 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array165 = mul i32 %165, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		main_AddRoundKeyexiti_gep_array165_reg <= main_AddRoundKeyexiti_gep_array165;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep166 = add i32 %gep164, %gep_array165*/
		main_AddRoundKeyexiti_gep166 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep166 = add i32 %gep164, %gep_array165*/
	main_AddRoundKeyexiti_gep166_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %167 = inttoptr i32 %gep166 to i32**/
		main_AddRoundKeyexiti_167 = main_AddRoundKeyexiti_gep166;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %167 = inttoptr i32 %gep166 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		main_AddRoundKeyexiti_167_reg <= main_AddRoundKeyexiti_167;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_167_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %168 = load i32* %167, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_168 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %168 = load i32* %167, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_114)) begin
		main_AddRoundKeyexiti_168_reg <= main_AddRoundKeyexiti_168;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_168_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %169 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_169 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %169 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		main_AddRoundKeyexiti_169_reg <= main_AddRoundKeyexiti_169;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %170 = and i32 %169, 15*/
		main_AddRoundKeyexiti_170 = (main_AddRoundKeyexiti_169 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %170 = and i32 %169, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		main_AddRoundKeyexiti_170_reg <= main_AddRoundKeyexiti_170;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %171 = ashr i32 %169, 4*/
		main_AddRoundKeyexiti_171 = ($signed(main_AddRoundKeyexiti_169) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %171 = ashr i32 %169, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		main_AddRoundKeyexiti_171_reg <= main_AddRoundKeyexiti_171;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int167 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int167 = 0; end
		main_AddRoundKeyexiti_gep_int167 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int167 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_gep_int167_reg <= main_AddRoundKeyexiti_gep_int167;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int167_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array168 = mul i32 %171, 64*/
		main_AddRoundKeyexiti_gep_array168 = (main_AddRoundKeyexiti_171 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array168 = mul i32 %171, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		main_AddRoundKeyexiti_gep_array168_reg <= main_AddRoundKeyexiti_gep_array168;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array168_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep169 = add i32 %gep_int167, %gep_array168*/
		main_AddRoundKeyexiti_gep169 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep169 = add i32 %gep_int167, %gep_array168*/
	main_AddRoundKeyexiti_gep169_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array170 = mul i32 %170, 4*/
		main_AddRoundKeyexiti_gep_array170 = (main_AddRoundKeyexiti_170 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array170 = mul i32 %170, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		main_AddRoundKeyexiti_gep_array170_reg <= main_AddRoundKeyexiti_gep_array170;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep171 = add i32 %gep169, %gep_array170*/
		main_AddRoundKeyexiti_gep171 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep171 = add i32 %gep169, %gep_array170*/
	main_AddRoundKeyexiti_gep171_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %172 = inttoptr i32 %gep171 to i32**/
		main_AddRoundKeyexiti_172 = main_AddRoundKeyexiti_gep171;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %172 = inttoptr i32 %gep171 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_113)) begin
		main_AddRoundKeyexiti_172_reg <= main_AddRoundKeyexiti_172;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %173 = load i32* %172, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_173 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %173 = load i32* %172, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		main_AddRoundKeyexiti_173_reg <= main_AddRoundKeyexiti_173;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %174 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_174 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %174 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		main_AddRoundKeyexiti_174_reg <= main_AddRoundKeyexiti_174;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %175 = and i32 %174, 15*/
		main_AddRoundKeyexiti_175 = (main_AddRoundKeyexiti_174 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %175 = and i32 %174, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		main_AddRoundKeyexiti_175_reg <= main_AddRoundKeyexiti_175;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %176 = ashr i32 %174, 4*/
		main_AddRoundKeyexiti_176 = ($signed(main_AddRoundKeyexiti_174) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %176 = ashr i32 %174, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		main_AddRoundKeyexiti_176_reg <= main_AddRoundKeyexiti_176;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_176_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int172 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int172 = 0; end
		main_AddRoundKeyexiti_gep_int172 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int172 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_gep_int172_reg <= main_AddRoundKeyexiti_gep_int172;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array173 = mul i32 %176, 64*/
		main_AddRoundKeyexiti_gep_array173 = (main_AddRoundKeyexiti_176 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array173 = mul i32 %176, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		main_AddRoundKeyexiti_gep_array173_reg <= main_AddRoundKeyexiti_gep_array173;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep174 = add i32 %gep_int172, %gep_array173*/
		main_AddRoundKeyexiti_gep174 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep174 = add i32 %gep_int172, %gep_array173*/
	main_AddRoundKeyexiti_gep174_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array175 = mul i32 %175, 4*/
		main_AddRoundKeyexiti_gep_array175 = (main_AddRoundKeyexiti_175 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array175 = mul i32 %175, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		main_AddRoundKeyexiti_gep_array175_reg <= main_AddRoundKeyexiti_gep_array175;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep176 = add i32 %gep174, %gep_array175*/
		main_AddRoundKeyexiti_gep176 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep176 = add i32 %gep174, %gep_array175*/
	main_AddRoundKeyexiti_gep176_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %177 = inttoptr i32 %gep176 to i32**/
		main_AddRoundKeyexiti_177 = main_AddRoundKeyexiti_gep176;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %177 = inttoptr i32 %gep176 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_116)) begin
		main_AddRoundKeyexiti_177_reg <= main_AddRoundKeyexiti_177;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %178 = load i32* %177, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_178 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %178 = load i32* %177, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_118)) begin
		main_AddRoundKeyexiti_178_reg <= main_AddRoundKeyexiti_178;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %179 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_179 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %179 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_116)) begin
		main_AddRoundKeyexiti_179_reg <= main_AddRoundKeyexiti_179;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %180 = and i32 %179, 15*/
		main_AddRoundKeyexiti_180 = (main_AddRoundKeyexiti_179 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %180 = and i32 %179, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_116)) begin
		main_AddRoundKeyexiti_180_reg <= main_AddRoundKeyexiti_180;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %181 = ashr i32 %179, 4*/
		main_AddRoundKeyexiti_181 = ($signed(main_AddRoundKeyexiti_179) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %181 = ashr i32 %179, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_116)) begin
		main_AddRoundKeyexiti_181_reg <= main_AddRoundKeyexiti_181;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int177 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int177 = 0; end
		main_AddRoundKeyexiti_gep_int177 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int177 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_gep_int177_reg <= main_AddRoundKeyexiti_gep_int177;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array178 = mul i32 %181, 64*/
		main_AddRoundKeyexiti_gep_array178 = (main_AddRoundKeyexiti_181 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array178 = mul i32 %181, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_116)) begin
		main_AddRoundKeyexiti_gep_array178_reg <= main_AddRoundKeyexiti_gep_array178;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep179 = add i32 %gep_int177, %gep_array178*/
		main_AddRoundKeyexiti_gep179 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep179 = add i32 %gep_int177, %gep_array178*/
	main_AddRoundKeyexiti_gep179_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array180 = mul i32 %180, 4*/
		main_AddRoundKeyexiti_gep_array180 = (main_AddRoundKeyexiti_180 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array180 = mul i32 %180, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_116)) begin
		main_AddRoundKeyexiti_gep_array180_reg <= main_AddRoundKeyexiti_gep_array180;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep181 = add i32 %gep179, %gep_array180*/
		main_AddRoundKeyexiti_gep181 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep181 = add i32 %gep179, %gep_array180*/
	main_AddRoundKeyexiti_gep181_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %182 = inttoptr i32 %gep181 to i32**/
		main_AddRoundKeyexiti_182 = main_AddRoundKeyexiti_gep181;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %182 = inttoptr i32 %gep181 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		main_AddRoundKeyexiti_182_reg <= main_AddRoundKeyexiti_182;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %183 = load i32* %182, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_183 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %183 = load i32* %182, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_119)) begin
		main_AddRoundKeyexiti_183_reg <= main_AddRoundKeyexiti_183;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %184 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_184 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %184 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_119)) begin
		main_AddRoundKeyexiti_184_reg <= main_AddRoundKeyexiti_184;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_184_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %185 = and i32 %184, 15*/
		main_AddRoundKeyexiti_185 = (main_AddRoundKeyexiti_184 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %185 = and i32 %184, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_119)) begin
		main_AddRoundKeyexiti_185_reg <= main_AddRoundKeyexiti_185;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %186 = ashr i32 %184, 4*/
		main_AddRoundKeyexiti_186 = ($signed(main_AddRoundKeyexiti_184) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %186 = ashr i32 %184, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_119)) begin
		main_AddRoundKeyexiti_186_reg <= main_AddRoundKeyexiti_186;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int182 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int182 = 0; end
		main_AddRoundKeyexiti_gep_int182 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int182 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_gep_int182_reg <= main_AddRoundKeyexiti_gep_int182;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array183 = mul i32 %186, 64*/
		main_AddRoundKeyexiti_gep_array183 = (main_AddRoundKeyexiti_186 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array183 = mul i32 %186, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_119)) begin
		main_AddRoundKeyexiti_gep_array183_reg <= main_AddRoundKeyexiti_gep_array183;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep184 = add i32 %gep_int182, %gep_array183*/
		main_AddRoundKeyexiti_gep184 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep184 = add i32 %gep_int182, %gep_array183*/
	main_AddRoundKeyexiti_gep184_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array185 = mul i32 %185, 4*/
		main_AddRoundKeyexiti_gep_array185 = (main_AddRoundKeyexiti_185 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array185 = mul i32 %185, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_119)) begin
		main_AddRoundKeyexiti_gep_array185_reg <= main_AddRoundKeyexiti_gep_array185;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep186 = add i32 %gep184, %gep_array185*/
		main_AddRoundKeyexiti_gep186 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep186 = add i32 %gep184, %gep_array185*/
	main_AddRoundKeyexiti_gep186_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %187 = inttoptr i32 %gep186 to i32**/
		main_AddRoundKeyexiti_187 = main_AddRoundKeyexiti_gep186;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %187 = inttoptr i32 %gep186 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		main_AddRoundKeyexiti_187_reg <= main_AddRoundKeyexiti_187;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %188 = load i32* %187, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_188 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %188 = load i32* %187, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_122)) begin
		main_AddRoundKeyexiti_188_reg <= main_AddRoundKeyexiti_188;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %189 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_189 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %189 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_122)) begin
		main_AddRoundKeyexiti_189_reg <= main_AddRoundKeyexiti_189;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %190 = and i32 %189, 15*/
		main_AddRoundKeyexiti_190 = (main_AddRoundKeyexiti_189 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %190 = and i32 %189, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_122)) begin
		main_AddRoundKeyexiti_190_reg <= main_AddRoundKeyexiti_190;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %191 = ashr i32 %189, 4*/
		main_AddRoundKeyexiti_191 = ($signed(main_AddRoundKeyexiti_189) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %191 = ashr i32 %189, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_122)) begin
		main_AddRoundKeyexiti_191_reg <= main_AddRoundKeyexiti_191;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int187 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int187 = 0; end
		main_AddRoundKeyexiti_gep_int187 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int187 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_gep_int187_reg <= main_AddRoundKeyexiti_gep_int187;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array188 = mul i32 %191, 64*/
		main_AddRoundKeyexiti_gep_array188 = (main_AddRoundKeyexiti_191 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array188 = mul i32 %191, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_122)) begin
		main_AddRoundKeyexiti_gep_array188_reg <= main_AddRoundKeyexiti_gep_array188;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep189 = add i32 %gep_int187, %gep_array188*/
		main_AddRoundKeyexiti_gep189 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep189 = add i32 %gep_int187, %gep_array188*/
	main_AddRoundKeyexiti_gep189_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array190 = mul i32 %190, 4*/
		main_AddRoundKeyexiti_gep_array190 = (main_AddRoundKeyexiti_190 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array190 = mul i32 %190, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_122)) begin
		main_AddRoundKeyexiti_gep_array190_reg <= main_AddRoundKeyexiti_gep_array190;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep191 = add i32 %gep189, %gep_array190*/
		main_AddRoundKeyexiti_gep191 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep191 = add i32 %gep189, %gep_array190*/
	main_AddRoundKeyexiti_gep191_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %192 = inttoptr i32 %gep191 to i32**/
		main_AddRoundKeyexiti_192 = main_AddRoundKeyexiti_gep191;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %192 = inttoptr i32 %gep191 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_123)) begin
		main_AddRoundKeyexiti_192_reg <= main_AddRoundKeyexiti_192;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %193 = load i32* %192, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_193 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %193 = load i32* %192, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_125)) begin
		main_AddRoundKeyexiti_193_reg <= main_AddRoundKeyexiti_193;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %194 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_194 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %194 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_125)) begin
		main_AddRoundKeyexiti_194_reg <= main_AddRoundKeyexiti_194;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_194_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %195 = and i32 %194, 15*/
		main_AddRoundKeyexiti_195 = (main_AddRoundKeyexiti_194 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %195 = and i32 %194, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_125)) begin
		main_AddRoundKeyexiti_195_reg <= main_AddRoundKeyexiti_195;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %196 = ashr i32 %194, 4*/
		main_AddRoundKeyexiti_196 = ($signed(main_AddRoundKeyexiti_194) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %196 = ashr i32 %194, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_125)) begin
		main_AddRoundKeyexiti_196_reg <= main_AddRoundKeyexiti_196;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int192 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int192 = 0; end
		main_AddRoundKeyexiti_gep_int192 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int192 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_gep_int192_reg <= main_AddRoundKeyexiti_gep_int192;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array193 = mul i32 %196, 64*/
		main_AddRoundKeyexiti_gep_array193 = (main_AddRoundKeyexiti_196 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array193 = mul i32 %196, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_125)) begin
		main_AddRoundKeyexiti_gep_array193_reg <= main_AddRoundKeyexiti_gep_array193;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep194 = add i32 %gep_int192, %gep_array193*/
		main_AddRoundKeyexiti_gep194 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep194 = add i32 %gep_int192, %gep_array193*/
	main_AddRoundKeyexiti_gep194_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array195 = mul i32 %195, 4*/
		main_AddRoundKeyexiti_gep_array195 = (main_AddRoundKeyexiti_195 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array195 = mul i32 %195, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_125)) begin
		main_AddRoundKeyexiti_gep_array195_reg <= main_AddRoundKeyexiti_gep_array195;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep196 = add i32 %gep194, %gep_array195*/
		main_AddRoundKeyexiti_gep196 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep196 = add i32 %gep194, %gep_array195*/
	main_AddRoundKeyexiti_gep196_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %197 = inttoptr i32 %gep196 to i32**/
		main_AddRoundKeyexiti_197 = main_AddRoundKeyexiti_gep196;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %197 = inttoptr i32 %gep196 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_126)) begin
		main_AddRoundKeyexiti_197_reg <= main_AddRoundKeyexiti_197;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_197_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %198 = load i32* %197, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_198 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %198 = load i32* %197, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_128)) begin
		main_AddRoundKeyexiti_198_reg <= main_AddRoundKeyexiti_198;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_198_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %199 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_199 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %199 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_128)) begin
		main_AddRoundKeyexiti_199_reg <= main_AddRoundKeyexiti_199;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %200 = and i32 %199, 15*/
		main_AddRoundKeyexiti_200 = (main_AddRoundKeyexiti_199 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %200 = and i32 %199, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_128)) begin
		main_AddRoundKeyexiti_200_reg <= main_AddRoundKeyexiti_200;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %201 = ashr i32 %199, 4*/
		main_AddRoundKeyexiti_201 = ($signed(main_AddRoundKeyexiti_199) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %201 = ashr i32 %199, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_128)) begin
		main_AddRoundKeyexiti_201_reg <= main_AddRoundKeyexiti_201;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int197 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int197 = 0; end
		main_AddRoundKeyexiti_gep_int197 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int197 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_gep_int197_reg <= main_AddRoundKeyexiti_gep_int197;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int197_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array198 = mul i32 %201, 64*/
		main_AddRoundKeyexiti_gep_array198 = (main_AddRoundKeyexiti_201 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array198 = mul i32 %201, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_128)) begin
		main_AddRoundKeyexiti_gep_array198_reg <= main_AddRoundKeyexiti_gep_array198;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array198_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep199 = add i32 %gep_int197, %gep_array198*/
		main_AddRoundKeyexiti_gep199 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep199 = add i32 %gep_int197, %gep_array198*/
	main_AddRoundKeyexiti_gep199_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array200 = mul i32 %200, 4*/
		main_AddRoundKeyexiti_gep_array200 = (main_AddRoundKeyexiti_200 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array200 = mul i32 %200, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_128)) begin
		main_AddRoundKeyexiti_gep_array200_reg <= main_AddRoundKeyexiti_gep_array200;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep201 = add i32 %gep199, %gep_array200*/
		main_AddRoundKeyexiti_gep201 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep201 = add i32 %gep199, %gep_array200*/
	main_AddRoundKeyexiti_gep201_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %202 = inttoptr i32 %gep201 to i32**/
		main_AddRoundKeyexiti_202 = main_AddRoundKeyexiti_gep201;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %202 = inttoptr i32 %gep201 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_129)) begin
		main_AddRoundKeyexiti_202_reg <= main_AddRoundKeyexiti_202;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %203 = load i32* %202, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_203 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %203 = load i32* %202, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_131)) begin
		main_AddRoundKeyexiti_203_reg <= main_AddRoundKeyexiti_203;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %204 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_204 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %204 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_131)) begin
		main_AddRoundKeyexiti_204_reg <= main_AddRoundKeyexiti_204;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %205 = and i32 %204, 15*/
		main_AddRoundKeyexiti_205 = (main_AddRoundKeyexiti_204 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %205 = and i32 %204, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_131)) begin
		main_AddRoundKeyexiti_205_reg <= main_AddRoundKeyexiti_205;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %206 = ashr i32 %204, 4*/
		main_AddRoundKeyexiti_206 = ($signed(main_AddRoundKeyexiti_204) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %206 = ashr i32 %204, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_131)) begin
		main_AddRoundKeyexiti_206_reg <= main_AddRoundKeyexiti_206;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_206_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int202 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int202 = 0; end
		main_AddRoundKeyexiti_gep_int202 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int202 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_gep_int202_reg <= main_AddRoundKeyexiti_gep_int202;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array203 = mul i32 %206, 64*/
		main_AddRoundKeyexiti_gep_array203 = (main_AddRoundKeyexiti_206 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array203 = mul i32 %206, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_131)) begin
		main_AddRoundKeyexiti_gep_array203_reg <= main_AddRoundKeyexiti_gep_array203;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep204 = add i32 %gep_int202, %gep_array203*/
		main_AddRoundKeyexiti_gep204 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep204 = add i32 %gep_int202, %gep_array203*/
	main_AddRoundKeyexiti_gep204_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array205 = mul i32 %205, 4*/
		main_AddRoundKeyexiti_gep_array205 = (main_AddRoundKeyexiti_205 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array205 = mul i32 %205, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_131)) begin
		main_AddRoundKeyexiti_gep_array205_reg <= main_AddRoundKeyexiti_gep_array205;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep206 = add i32 %gep204, %gep_array205*/
		main_AddRoundKeyexiti_gep206 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep206 = add i32 %gep204, %gep_array205*/
	main_AddRoundKeyexiti_gep206_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %207 = inttoptr i32 %gep206 to i32**/
		main_AddRoundKeyexiti_207 = main_AddRoundKeyexiti_gep206;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %207 = inttoptr i32 %gep206 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_132)) begin
		main_AddRoundKeyexiti_207_reg <= main_AddRoundKeyexiti_207;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %208 = load i32* %207, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_208 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %208 = load i32* %207, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_134)) begin
		main_AddRoundKeyexiti_208_reg <= main_AddRoundKeyexiti_208;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %209 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_209 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %209 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_134)) begin
		main_AddRoundKeyexiti_209_reg <= main_AddRoundKeyexiti_209;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_209_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %210 = and i32 %209, 15*/
		main_AddRoundKeyexiti_210 = (main_AddRoundKeyexiti_209 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %210 = and i32 %209, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_134)) begin
		main_AddRoundKeyexiti_210_reg <= main_AddRoundKeyexiti_210;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %211 = ashr i32 %209, 4*/
		main_AddRoundKeyexiti_211 = ($signed(main_AddRoundKeyexiti_209) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %211 = ashr i32 %209, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_134)) begin
		main_AddRoundKeyexiti_211_reg <= main_AddRoundKeyexiti_211;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int207 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int207 = 0; end
		main_AddRoundKeyexiti_gep_int207 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int207 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_gep_int207_reg <= main_AddRoundKeyexiti_gep_int207;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array208 = mul i32 %211, 64*/
		main_AddRoundKeyexiti_gep_array208 = (main_AddRoundKeyexiti_211 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array208 = mul i32 %211, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_134)) begin
		main_AddRoundKeyexiti_gep_array208_reg <= main_AddRoundKeyexiti_gep_array208;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep209 = add i32 %gep_int207, %gep_array208*/
		main_AddRoundKeyexiti_gep209 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep209 = add i32 %gep_int207, %gep_array208*/
	main_AddRoundKeyexiti_gep209_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array210 = mul i32 %210, 4*/
		main_AddRoundKeyexiti_gep_array210 = (main_AddRoundKeyexiti_210 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array210 = mul i32 %210, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_134)) begin
		main_AddRoundKeyexiti_gep_array210_reg <= main_AddRoundKeyexiti_gep_array210;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep211 = add i32 %gep209, %gep_array210*/
		main_AddRoundKeyexiti_gep211 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep211 = add i32 %gep209, %gep_array210*/
	main_AddRoundKeyexiti_gep211_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %212 = inttoptr i32 %gep211 to i32**/
		main_AddRoundKeyexiti_212 = main_AddRoundKeyexiti_gep211;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %212 = inttoptr i32 %gep211 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_135)) begin
		main_AddRoundKeyexiti_212_reg <= main_AddRoundKeyexiti_212;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_212_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_213 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_137)) begin
		main_AddRoundKeyexiti_213_reg <= main_AddRoundKeyexiti_213;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_213_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %exitcond38 = icmp ne i32 %133, 10*/
		main_AddRoundKeyexiti_exitcond38 = (main_AddRoundKeyexiti_133 != 32'd10);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %exitcond38 = icmp ne i32 %133, 10*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_exitcond38_reg <= main_AddRoundKeyexiti_exitcond38;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_exitcond38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_exitcond38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %j.02.i2.i = phi i32 [ %239, %AddRoundKey.exit._crit_edge.i ], [ 0, %AddRoundKey.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_138) & (memory_controller_waitrequest == 1'd0)) & (main_AddRoundKeyexiti_exitcond38_reg == 1'd0))) begin
		main_AddRoundKeyexit_crit_edgei_j02i2i = 32'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %j.02.i2.i = phi i32 [ %239, %AddRoundKey.exit._crit_edge.i ], [ 0, %AddRoundKey.exit.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_153) & (memory_controller_waitrequest == 1'd0)) & (main_AddRoundKeyexit_crit_edgei_exitcond37_reg == 1'd1))) */ begin
		main_AddRoundKeyexit_crit_edgei_j02i2i = main_AddRoundKeyexit_crit_edgei_239_reg;
	end
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %j.02.i2.i = phi i32 [ %239, %AddRoundKey.exit._crit_edge.i ], [ 0, %AddRoundKey.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_138) & (memory_controller_waitrequest == 1'd0)) & (main_AddRoundKeyexiti_exitcond38_reg == 1'd0))) begin
		main_AddRoundKeyexit_crit_edgei_j02i2i_reg <= main_AddRoundKeyexit_crit_edgei_j02i2i;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_j02i2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_j02i2i_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %j.02.i2.i = phi i32 [ %239, %AddRoundKey.exit._crit_edge.i ], [ 0, %AddRoundKey.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_153) & (memory_controller_waitrequest == 1'd0)) & (main_AddRoundKeyexit_crit_edgei_exitcond37_reg == 1'd1))) begin
		main_AddRoundKeyexit_crit_edgei_j02i2i_reg <= main_AddRoundKeyexit_crit_edgei_j02i2i;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_j02i2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_j02i2i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %214 = add nsw i32 %j.02.i2.i, 40*/
		main_AddRoundKeyexit_crit_edgei_214 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %214 = add nsw i32 %j.02.i2.i, 40*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexit_crit_edgei_214;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep214 = add i32 %gep_int212, %gep_array213*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_141)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexit_crit_edgei_gep214;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep451 = add i32 %gep_int449, %gep_array450*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_264)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_lrph12i_gep451;
		if (start == 1'b0 && ^(main_lrph12i_gep451) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep461 = add i32 %gep_int459, %gep_array460*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_266)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_lrph12i_gep461;
		if (start == 1'b0 && ^(main_lrph12i_gep461) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep466 = add i32 %gep_int464, %gep_array465*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_267)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_lrph12i_gep466;
		if (start == 1'b0 && ^(main_lrph12i_gep466) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.preheader.i4.i*/
	/*   %240 = add nsw i32 %j.11.i3.i, 40*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_preheaderi4i_240;
		if (start == 1'b0 && ^(main_preheaderi4i_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.preheader.i4.i*/
	/*   %gep241 = add i32 %gep_int239, %gep_array240*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_preheaderi4i_gep241;
		if (start == 1'b0 && ^(main_preheaderi4i_gep241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %gep268 = add i32 %gep_int266, %gep_array267*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_171)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_lrphi_gep268;
		if (start == 1'b0 && ^(main_lrphi_gep268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %gep271 = add i32 %gep_int269, %gep_array270*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_179)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_preheaderi_gep271;
		if (start == 1'b0 && ^(main_preheaderi_gep271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %285*/
	/*   %286 = add nsw i32 %j.02.i.i1, 40*/
	if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_285_286;
		if (start == 1'b0 && ^(main_285_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %285*/
	/*   %gep277 = add i32 %gep_int275, %gep_array276*/
	if ((cur_state == LEGUP_F_main_BB__285_187)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_285_gep277;
		if (start == 1'b0 && ^(main_285_gep277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %2*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_2_gep;
		if (start == 1'b0 && ^(main_2_gep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.preheader.i.i*/
	/*   %gep27 = add i32 %gep_int25, %gep_array26*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_preheaderii_gep27;
		if (start == 1'b0 && ^(main_preheaderii_gep27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.preheader.i.i*/
	/*   %gep37 = add i32 %gep_int35, %gep_array36*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_36)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_preheaderii_gep37;
		if (start == 1'b0 && ^(main_preheaderii_gep37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep54 = add i32 %gep_int52, %gep_array53*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexitipreheader_gep54;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep64 = add i32 %gep_int62, %gep_array63*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexitipreheader_gep64;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep74 = add i32 %gep_int72, %gep_array73*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexitipreheader_gep74;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep84 = add i32 %gep_int82, %gep_array83*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexitipreheader_gep84;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep94 = add i32 %gep_int92, %gep_array93*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexitipreheader_gep94;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep104 = add i32 %gep_int102, %gep_array103*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexitipreheader_gep104;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep114 = add i32 %gep_int112, %gep_array113*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexitipreheader_gep114;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep124 = add i32 %gep_int122, %gep_array123*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexitipreheader_gep124;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep134 = add i32 %gep_int132, %gep_array133*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexiti_gep134;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep144 = add i32 %gep_int142, %gep_array143*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexiti_gep144;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep149 = add i32 %gep_int147, %gep_array148*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_104)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexiti_gep149;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep154 = add i32 %gep_int152, %gep_array153*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexiti_gep154;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep159 = add i32 %gep_int157, %gep_array158*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexiti_gep159;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep164 = add i32 %gep_int162, %gep_array163*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexiti_gep164;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep169 = add i32 %gep_int167, %gep_array168*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_113)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexiti_gep169;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep174 = add i32 %gep_int172, %gep_array173*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_116)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexiti_gep174;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep179 = add i32 %gep_int177, %gep_array178*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexiti_gep179;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep184 = add i32 %gep_int182, %gep_array183*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexiti_gep184;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep189 = add i32 %gep_int187, %gep_array188*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_123)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexiti_gep189;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep194 = add i32 %gep_int192, %gep_array193*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_126)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexiti_gep194;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep199 = add i32 %gep_int197, %gep_array198*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_129)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexiti_gep199;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep204 = add i32 %gep_int202, %gep_array203*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_132)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexiti_gep204;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep209 = add i32 %gep_int207, %gep_array208*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_135)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexiti_gep209;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %gep491 = add i32 %gep_int489, %gep_array490*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main__crit_edgei_gep491;
		if (start == 1'b0 && ^(main__crit_edgei_gep491) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep518 = add i32 %gep_int516, %gep_array517*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_preheaderi4i14_gep518;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep518) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep528 = add i32 %gep_int526, %gep_array527*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_296)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_preheaderi4i14_gep528;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep528) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.lr.ph.i20*/
	/*   %gep545 = add i32 %gep_int543, %gep_array544*/
	if ((cur_state == LEGUP_F_main_BB_lrphi20_310)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_lrphi20_gep545;
		if (start == 1'b0 && ^(main_lrphi20_gep545) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %gep548 = add i32 %gep_int546, %gep_array547*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_318)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_preheaderloopexiti17_gep548;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_gep548) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.preheader.i.i4*/
	/*   %312 = add nsw i32 %j.11.i.i3, 40*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_preheaderii4_312;
		if (start == 1'b0 && ^(main_preheaderii4_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.preheader.i.i4*/
	/*   %gep304 = add i32 %gep_int302, %gep_array303*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_preheaderii4_gep304;
		if (start == 1'b0 && ^(main_preheaderii4_gep304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep331 = add i32 %gep_int329, %gep_array330*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_lrph12ipreheader_gep331;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep341 = add i32 %gep_int339, %gep_array340*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_lrph12ipreheader_gep341;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep351 = add i32 %gep_int349, %gep_array350*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_lrph12ipreheader_gep351;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep361 = add i32 %gep_int359, %gep_array360*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_lrph12ipreheader_gep361;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep361) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep371 = add i32 %gep_int369, %gep_array370*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_lrph12ipreheader_gep371;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep381 = add i32 %gep_int379, %gep_array380*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_lrph12ipreheader_gep381;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep391 = add i32 %gep_int389, %gep_array390*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_lrph12ipreheader_gep391;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep391) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep401 = add i32 %gep_int399, %gep_array400*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_225)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_lrph12ipreheader_gep401;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep401) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep411 = add i32 %gep_int409, %gep_array410*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_lrph12i_gep411;
		if (start == 1'b0 && ^(main_lrph12i_gep411) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep421 = add i32 %gep_int419, %gep_array420*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_253)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_lrph12i_gep421;
		if (start == 1'b0 && ^(main_lrph12i_gep421) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep426 = add i32 %gep_int424, %gep_array425*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_254)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_lrph12i_gep426;
		if (start == 1'b0 && ^(main_lrph12i_gep426) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep431 = add i32 %gep_int429, %gep_array430*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_255)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_lrph12i_gep431;
		if (start == 1'b0 && ^(main_lrph12i_gep431) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep436 = add i32 %gep_int434, %gep_array435*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_259)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_lrph12i_gep436;
		if (start == 1'b0 && ^(main_lrph12i_gep436) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep441 = add i32 %gep_int439, %gep_array440*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_lrph12i_gep441;
		if (start == 1'b0 && ^(main_lrph12i_gep441) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep471 = add i32 %gep_int469, %gep_array470*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_268)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_lrph12i_gep471;
		if (start == 1'b0 && ^(main_lrph12i_gep471) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep476 = add i32 %gep_int474, %gep_array475*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_273)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_lrph12i_gep476;
		if (start == 1'b0 && ^(main_lrph12i_gep476) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep481 = add i32 %gep_int479, %gep_array480*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_274)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_lrph12i_gep481;
		if (start == 1'b0 && ^(main_lrph12i_gep481) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep486 = add i32 %gep_int484, %gep_array485*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_275)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_lrph12i_gep486;
		if (start == 1'b0 && ^(main_lrph12i_gep486) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int212 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_AddRoundKeyexit_crit_edgei_gep_int212 = 0; end
		main_AddRoundKeyexit_crit_edgei_gep_int212 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int212 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_AddRoundKeyexit_crit_edgei_gep_int212_reg <= main_AddRoundKeyexit_crit_edgei_gep_int212;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_int212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_int212_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array213 = mul i32 %214, 4*/
		main_AddRoundKeyexit_crit_edgei_gep_array213 = (main_AddRoundKeyexit_crit_edgei_214_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array213 = mul i32 %214, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		main_AddRoundKeyexit_crit_edgei_gep_array213_reg <= main_AddRoundKeyexit_crit_edgei_gep_array213;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_array213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_array213_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep214 = add i32 %gep_int212, %gep_array213*/
		main_AddRoundKeyexit_crit_edgei_gep214 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit._crit_edge.i*/
/*   %gep214 = add i32 %gep_int212, %gep_array213*/
	main_AddRoundKeyexit_crit_edgei_gep214_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %215 = inttoptr i32 %gep214 to i32**/
		main_AddRoundKeyexit_crit_edgei_215 = main_AddRoundKeyexit_crit_edgei_gep214;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %215 = inttoptr i32 %gep214 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_141)) begin
		main_AddRoundKeyexit_crit_edgei_215_reg <= main_AddRoundKeyexit_crit_edgei_215;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_215_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %216 = load i32* %215, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_216 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %216 = load i32* %215, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_143)) begin
		main_AddRoundKeyexit_crit_edgei_216_reg <= main_AddRoundKeyexit_crit_edgei_216;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %217 = shl nsw i32 %j.02.i2.i, 2*/
		main_AddRoundKeyexit_crit_edgei_217 = (main_AddRoundKeyexit_crit_edgei_j02i2i_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %217 = shl nsw i32 %j.02.i2.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_AddRoundKeyexit_crit_edgei_217_reg <= main_AddRoundKeyexit_crit_edgei_217;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_217_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int215 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_AddRoundKeyexit_crit_edgei_gep_int215 = 0; end
		main_AddRoundKeyexit_crit_edgei_gep_int215 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int215 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_AddRoundKeyexit_crit_edgei_gep_int215_reg <= main_AddRoundKeyexit_crit_edgei_gep_int215;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_int215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_int215_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array216 = mul i32 %217, 4*/
		main_AddRoundKeyexit_crit_edgei_gep_array216 = (main_AddRoundKeyexit_crit_edgei_217 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array216 = mul i32 %217, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_AddRoundKeyexit_crit_edgei_gep_array216_reg <= main_AddRoundKeyexit_crit_edgei_gep_array216;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_array216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_array216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep217 = add i32 %gep_int215, %gep_array216*/
		main_AddRoundKeyexit_crit_edgei_gep217 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep217 = add i32 %gep_int215, %gep_array216*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		main_AddRoundKeyexit_crit_edgei_gep217_reg <= main_AddRoundKeyexit_crit_edgei_gep217;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep217_reg"); $finish; end
	end
	/* main: %.preheader.i4.i*/
	/*   %gep244 = add i32 %gep_int242, %gep_array243*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_155)) begin
		main_AddRoundKeyexit_crit_edgei_gep217_reg <= main_preheaderi4i_gep244;
		if (start == 1'b0 && ^(main_preheaderi4i_gep244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep217_reg"); $finish; end
	end
	/* main: %285*/
	/*   %gep280 = add i32 %gep_int278, %gep_array279*/
	if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		main_AddRoundKeyexit_crit_edgei_gep217_reg <= main_285_gep280;
		if (start == 1'b0 && ^(main_285_gep280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep217_reg"); $finish; end
	end
	/* main: %2*/
	/*   %gep5 = add i32 %gep_int4, 480*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_AddRoundKeyexit_crit_edgei_gep217_reg <= main_2_gep5;
		if (start == 1'b0 && ^(main_2_gep5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep217_reg"); $finish; end
	end
	/* main: %.preheader.i.i*/
	/*   %gep32 = add i32 %gep_int31, 480*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_AddRoundKeyexit_crit_edgei_gep217_reg <= main_preheaderii_gep32;
		if (start == 1'b0 && ^(main_preheaderii_gep32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep217_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %gep496 = add i32 %gep_int495, 480*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main_AddRoundKeyexit_crit_edgei_gep217_reg <= main__crit_edgei_gep496;
		if (start == 1'b0 && ^(main__crit_edgei_gep496) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep217_reg"); $finish; end
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep523 = add i32 %gep_int522, 480*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_AddRoundKeyexit_crit_edgei_gep217_reg <= main_preheaderi4i14_gep523;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep523) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep217_reg"); $finish; end
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %565 = add nsw i32 %564, %558*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_320)) begin
		main_AddRoundKeyexit_crit_edgei_gep217_reg <= main_preheaderloopexiti17_565;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_565) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep217_reg"); $finish; end
	end
	/* main: %.preheader.i.i4*/
	/*   %gep307 = add i32 %gep_int305, %gep_array306*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_201)) begin
		main_AddRoundKeyexit_crit_edgei_gep217_reg <= main_preheaderii4_gep307;
		if (start == 1'b0 && ^(main_preheaderii4_gep307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep217_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %218 = inttoptr i32 %gep217 to i32**/
		main_AddRoundKeyexit_crit_edgei_218 = main_AddRoundKeyexit_crit_edgei_gep217;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %218 = inttoptr i32 %gep217 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		main_AddRoundKeyexit_crit_edgei_218_reg <= main_AddRoundKeyexit_crit_edgei_218;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_218_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %219 = load i32* %218, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_219 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %219 = load i32* %218, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_142)) begin
		main_AddRoundKeyexit_crit_edgei_219_reg <= main_AddRoundKeyexit_crit_edgei_219;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_219_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %220 = xor i32 %219, %216*/
		main_AddRoundKeyexit_crit_edgei_220 = (main_AddRoundKeyexit_crit_edgei_219_reg ^ main_AddRoundKeyexit_crit_edgei_216);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %220 = xor i32 %219, %216*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_143)) begin
		main_AddRoundKeyexit_crit_edgei_220_reg <= main_AddRoundKeyexit_crit_edgei_220;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_220_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int218 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_AddRoundKeyexit_crit_edgei_gep_int218 = 0; end
		main_AddRoundKeyexit_crit_edgei_gep_int218 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int218 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_AddRoundKeyexit_crit_edgei_gep_int218_reg <= main_AddRoundKeyexit_crit_edgei_gep_int218;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_int218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_int218_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep219 = add i32 %gep_int218, 480*/
		main_AddRoundKeyexit_crit_edgei_gep219 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit._crit_edge.i*/
/*   %gep219 = add i32 %gep_int218, 480*/
	main_AddRoundKeyexit_crit_edgei_gep219_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array220 = mul i32 %214, 4*/
		main_AddRoundKeyexit_crit_edgei_gep_array220 = (main_AddRoundKeyexit_crit_edgei_214_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array220 = mul i32 %214, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		main_AddRoundKeyexit_crit_edgei_gep_array220_reg <= main_AddRoundKeyexit_crit_edgei_gep_array220;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_array220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_array220_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep221 = add i32 %gep219, %gep_array220*/
		main_AddRoundKeyexit_crit_edgei_gep221 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep221 = add i32 %gep219, %gep_array220*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_141)) begin
		main_AddRoundKeyexit_crit_edgei_gep221_reg <= main_AddRoundKeyexit_crit_edgei_gep221;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep221_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep224 = add i32 %gep_int222, %gep_array223*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		main_AddRoundKeyexit_crit_edgei_gep221_reg <= main_AddRoundKeyexit_crit_edgei_gep224;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep221_reg"); $finish; end
	end
	/* main: %.preheader.i4.i*/
	/*   %gep248 = add i32 %gep246, %gep_array247*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_AddRoundKeyexit_crit_edgei_gep221_reg <= main_preheaderi4i_gep248;
		if (start == 1'b0 && ^(main_preheaderi4i_gep248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep221_reg"); $finish; end
	end
	/* main: %285*/
	/*   %gep284 = add i32 %gep282, %gep_array283*/
	if ((cur_state == LEGUP_F_main_BB__285_187)) begin
		main_AddRoundKeyexit_crit_edgei_gep221_reg <= main_285_gep284;
		if (start == 1'b0 && ^(main_285_gep284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep221_reg"); $finish; end
	end
	/* main: %285*/
	/*   %gep287 = add i32 %gep_int285, %gep_array286*/
	if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		main_AddRoundKeyexit_crit_edgei_gep221_reg <= main_285_gep287;
		if (start == 1'b0 && ^(main_285_gep287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep221_reg"); $finish; end
	end
	/* main: %2*/
	/*   %gep12 = add i32 %gep_int11, 960*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_AddRoundKeyexit_crit_edgei_gep221_reg <= main_2_gep12;
		if (start == 1'b0 && ^(main_2_gep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep221_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %gep503 = add i32 %gep_int502, 960*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main_AddRoundKeyexit_crit_edgei_gep221_reg <= main__crit_edgei_gep503;
		if (start == 1'b0 && ^(main__crit_edgei_gep503) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep221_reg"); $finish; end
	end
	/* main: %.preheader.i.i4*/
	/*   %gep311 = add i32 %gep309, %gep_array310*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_AddRoundKeyexit_crit_edgei_gep221_reg <= main_preheaderii4_gep311;
		if (start == 1'b0 && ^(main_preheaderii4_gep311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep221_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %221 = inttoptr i32 %gep221 to i32**/
		main_AddRoundKeyexit_crit_edgei_221 = main_AddRoundKeyexit_crit_edgei_gep221;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %221 = inttoptr i32 %gep221 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_141)) begin
		main_AddRoundKeyexit_crit_edgei_221_reg <= main_AddRoundKeyexit_crit_edgei_221;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_221_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %222 = load i32* %221, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_222 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %222 = load i32* %221, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_146)) begin
		main_AddRoundKeyexit_crit_edgei_222_reg <= main_AddRoundKeyexit_crit_edgei_222;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_222_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %223 = or i32 %217, 1*/
		main_AddRoundKeyexit_crit_edgei_223 = (main_AddRoundKeyexit_crit_edgei_217 | 32'd1);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %223 = or i32 %217, 1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_AddRoundKeyexit_crit_edgei_223_reg <= main_AddRoundKeyexit_crit_edgei_223;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int222 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_AddRoundKeyexit_crit_edgei_gep_int222 = 0; end
		main_AddRoundKeyexit_crit_edgei_gep_int222 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int222 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_AddRoundKeyexit_crit_edgei_gep_int222_reg <= main_AddRoundKeyexit_crit_edgei_gep_int222;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_int222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_int222_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array223 = mul i32 %223, 4*/
		main_AddRoundKeyexit_crit_edgei_gep_array223 = (main_AddRoundKeyexit_crit_edgei_223 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array223 = mul i32 %223, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_AddRoundKeyexit_crit_edgei_gep_array223_reg <= main_AddRoundKeyexit_crit_edgei_gep_array223;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_array223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_array223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep224 = add i32 %gep_int222, %gep_array223*/
		main_AddRoundKeyexit_crit_edgei_gep224 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit._crit_edge.i*/
/*   %gep224 = add i32 %gep_int222, %gep_array223*/
	main_AddRoundKeyexit_crit_edgei_gep224_reg = main_AddRoundKeyexit_crit_edgei_gep221_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %224 = inttoptr i32 %gep224 to i32**/
		main_AddRoundKeyexit_crit_edgei_224 = main_AddRoundKeyexit_crit_edgei_gep224;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %224 = inttoptr i32 %gep224 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		main_AddRoundKeyexit_crit_edgei_224_reg <= main_AddRoundKeyexit_crit_edgei_224;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_224_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %225 = load i32* %224, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_225 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %225 = load i32* %224, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_146)) begin
		main_AddRoundKeyexit_crit_edgei_225_reg <= main_AddRoundKeyexit_crit_edgei_225;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_225_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %226 = xor i32 %225, %222*/
		main_AddRoundKeyexit_crit_edgei_226 = (main_AddRoundKeyexit_crit_edgei_225 ^ main_AddRoundKeyexit_crit_edgei_222);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %226 = xor i32 %225, %222*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_146)) begin
		main_AddRoundKeyexit_crit_edgei_226_reg <= main_AddRoundKeyexit_crit_edgei_226;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_226_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int225 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_AddRoundKeyexit_crit_edgei_gep_int225 = 0; end
		main_AddRoundKeyexit_crit_edgei_gep_int225 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int225 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_AddRoundKeyexit_crit_edgei_gep_int225_reg <= main_AddRoundKeyexit_crit_edgei_gep_int225;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_int225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_int225_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep226 = add i32 %gep_int225, 960*/
		main_AddRoundKeyexit_crit_edgei_gep226 = main_signed_add_32_2;
end
always @(*) begin
/* main: %AddRoundKey.exit._crit_edge.i*/
/*   %gep226 = add i32 %gep_int225, 960*/
	main_AddRoundKeyexit_crit_edgei_gep226_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array227 = mul i32 %214, 4*/
		main_AddRoundKeyexit_crit_edgei_gep_array227 = (main_AddRoundKeyexit_crit_edgei_214_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array227 = mul i32 %214, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		main_AddRoundKeyexit_crit_edgei_gep_array227_reg <= main_AddRoundKeyexit_crit_edgei_gep_array227;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_array227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_array227_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep228 = add i32 %gep226, %gep_array227*/
		main_AddRoundKeyexit_crit_edgei_gep228 = main_signed_add_32_2;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep228 = add i32 %gep226, %gep_array227*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_141)) begin
		main_AddRoundKeyexit_crit_edgei_gep228_reg <= main_AddRoundKeyexit_crit_edgei_gep228;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep228_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep231 = add i32 %gep_int229, %gep_array230*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		main_AddRoundKeyexit_crit_edgei_gep228_reg <= main_AddRoundKeyexit_crit_edgei_gep231;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep228_reg"); $finish; end
	end
	/* main: %.preheader.i4.i*/
	/*   %gep253 = add i32 %gep_int252, 960*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_AddRoundKeyexit_crit_edgei_gep228_reg <= main_preheaderi4i_gep253;
		if (start == 1'b0 && ^(main_preheaderi4i_gep253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep228_reg"); $finish; end
	end
	/* main: %285*/
	/*   %gep291 = add i32 %gep289, %gep_array290*/
	if ((cur_state == LEGUP_F_main_BB__285_187)) begin
		main_AddRoundKeyexit_crit_edgei_gep228_reg <= main_285_gep291;
		if (start == 1'b0 && ^(main_285_gep291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep228_reg"); $finish; end
	end
	/* main: %2*/
	/*   %gep19 = add i32 %gep_int18, 1440*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_AddRoundKeyexit_crit_edgei_gep228_reg <= main_2_gep19;
		if (start == 1'b0 && ^(main_2_gep19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep228_reg"); $finish; end
	end
	/* main: %.preheader.i.i*/
	/*   %gep39 = add i32 %gep_int38, 960*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_AddRoundKeyexit_crit_edgei_gep228_reg <= main_preheaderii_gep39;
		if (start == 1'b0 && ^(main_preheaderii_gep39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep228_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %gep510 = add i32 %gep_int509, 1440*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main_AddRoundKeyexit_crit_edgei_gep228_reg <= main__crit_edgei_gep510;
		if (start == 1'b0 && ^(main__crit_edgei_gep510) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep228_reg"); $finish; end
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep530 = add i32 %gep_int529, 960*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_AddRoundKeyexit_crit_edgei_gep228_reg <= main_preheaderi4i14_gep530;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep530) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep228_reg"); $finish; end
	end
	/* main: %285*/
	/*   %gep294 = add i32 %gep_int292, %gep_array293*/
	if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		main_AddRoundKeyexit_crit_edgei_gep228_reg <= main_285_gep294;
		if (start == 1'b0 && ^(main_285_gep294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep228_reg"); $finish; end
	end
	/* main: %.preheader.i.i4*/
	/*   %gep316 = add i32 %gep_int315, 960*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_AddRoundKeyexit_crit_edgei_gep228_reg <= main_preheaderii4_gep316;
		if (start == 1'b0 && ^(main_preheaderii4_gep316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep228_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %227 = inttoptr i32 %gep228 to i32**/
		main_AddRoundKeyexit_crit_edgei_227 = main_AddRoundKeyexit_crit_edgei_gep228;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %227 = inttoptr i32 %gep228 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_141)) begin
		main_AddRoundKeyexit_crit_edgei_227_reg <= main_AddRoundKeyexit_crit_edgei_227;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_227_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %228 = load i32* %227, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_228 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %228 = load i32* %227, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_149)) begin
		main_AddRoundKeyexit_crit_edgei_228_reg <= main_AddRoundKeyexit_crit_edgei_228;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_228_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %229 = or i32 %217, 2*/
		main_AddRoundKeyexit_crit_edgei_229 = (main_AddRoundKeyexit_crit_edgei_217 | 32'd2);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %229 = or i32 %217, 2*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_AddRoundKeyexit_crit_edgei_229_reg <= main_AddRoundKeyexit_crit_edgei_229;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int229 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_AddRoundKeyexit_crit_edgei_gep_int229 = 0; end
		main_AddRoundKeyexit_crit_edgei_gep_int229 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int229 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_AddRoundKeyexit_crit_edgei_gep_int229_reg <= main_AddRoundKeyexit_crit_edgei_gep_int229;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_int229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_int229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array230 = mul i32 %229, 4*/
		main_AddRoundKeyexit_crit_edgei_gep_array230 = (main_AddRoundKeyexit_crit_edgei_229 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array230 = mul i32 %229, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_AddRoundKeyexit_crit_edgei_gep_array230_reg <= main_AddRoundKeyexit_crit_edgei_gep_array230;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_array230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_array230_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep231 = add i32 %gep_int229, %gep_array230*/
		main_AddRoundKeyexit_crit_edgei_gep231 = main_signed_add_32_2;
end
always @(*) begin
/* main: %AddRoundKey.exit._crit_edge.i*/
/*   %gep231 = add i32 %gep_int229, %gep_array230*/
	main_AddRoundKeyexit_crit_edgei_gep231_reg = main_AddRoundKeyexit_crit_edgei_gep228_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %230 = inttoptr i32 %gep231 to i32**/
		main_AddRoundKeyexit_crit_edgei_230 = main_AddRoundKeyexit_crit_edgei_gep231;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %230 = inttoptr i32 %gep231 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		main_AddRoundKeyexit_crit_edgei_230_reg <= main_AddRoundKeyexit_crit_edgei_230;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_230_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %231 = load i32* %230, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_231 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %231 = load i32* %230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_149)) begin
		main_AddRoundKeyexit_crit_edgei_231_reg <= main_AddRoundKeyexit_crit_edgei_231;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_231_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %232 = xor i32 %231, %228*/
		main_AddRoundKeyexit_crit_edgei_232 = (main_AddRoundKeyexit_crit_edgei_231 ^ main_AddRoundKeyexit_crit_edgei_228);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %232 = xor i32 %231, %228*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_149)) begin
		main_AddRoundKeyexit_crit_edgei_232_reg <= main_AddRoundKeyexit_crit_edgei_232;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_232_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int232 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_AddRoundKeyexit_crit_edgei_gep_int232 = 0; end
		main_AddRoundKeyexit_crit_edgei_gep_int232 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int232 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_AddRoundKeyexit_crit_edgei_gep_int232_reg <= main_AddRoundKeyexit_crit_edgei_gep_int232;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_int232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_int232_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep233 = add i32 %gep_int232, 1440*/
		main_AddRoundKeyexit_crit_edgei_gep233 = main_signed_add_32_3;
end
always @(*) begin
/* main: %AddRoundKey.exit._crit_edge.i*/
/*   %gep233 = add i32 %gep_int232, 1440*/
	main_AddRoundKeyexit_crit_edgei_gep233_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array234 = mul i32 %214, 4*/
		main_AddRoundKeyexit_crit_edgei_gep_array234 = (main_AddRoundKeyexit_crit_edgei_214_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array234 = mul i32 %214, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		main_AddRoundKeyexit_crit_edgei_gep_array234_reg <= main_AddRoundKeyexit_crit_edgei_gep_array234;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_array234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_array234_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep235 = add i32 %gep233, %gep_array234*/
		main_AddRoundKeyexit_crit_edgei_gep235 = main_signed_add_32_3;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep235 = add i32 %gep233, %gep_array234*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_141)) begin
		main_AddRoundKeyexit_crit_edgei_gep235_reg <= main_AddRoundKeyexit_crit_edgei_gep235;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep235_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep238 = add i32 %gep_int236, %gep_array237*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		main_AddRoundKeyexit_crit_edgei_gep235_reg <= main_AddRoundKeyexit_crit_edgei_gep238;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep235_reg"); $finish; end
	end
	/* main: %.preheader.i4.i*/
	/*   %gep260 = add i32 %gep_int259, 1440*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_AddRoundKeyexit_crit_edgei_gep235_reg <= main_preheaderi4i_gep260;
		if (start == 1'b0 && ^(main_preheaderi4i_gep260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep235_reg"); $finish; end
	end
	/* main: %2*/
	/*   %27 = add nsw i32 %j.02.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_AddRoundKeyexit_crit_edgei_gep235_reg <= main_2_27;
		if (start == 1'b0 && ^(main_2_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep235_reg"); $finish; end
	end
	/* main: %.preheader.i.i*/
	/*   %gep46 = add i32 %gep_int45, 1440*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_AddRoundKeyexit_crit_edgei_gep235_reg <= main_preheaderii_gep46;
		if (start == 1'b0 && ^(main_preheaderii_gep46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep235_reg"); $finish; end
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep537 = add i32 %gep_int536, 1440*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_AddRoundKeyexit_crit_edgei_gep235_reg <= main_preheaderi4i14_gep537;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep537) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep235_reg"); $finish; end
	end
	/* main: %285*/
	/*   %gep298 = add i32 %gep296, %gep_array297*/
	if ((cur_state == LEGUP_F_main_BB__285_187)) begin
		main_AddRoundKeyexit_crit_edgei_gep235_reg <= main_285_gep298;
		if (start == 1'b0 && ^(main_285_gep298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep235_reg"); $finish; end
	end
	/* main: %285*/
	/*   %gep301 = add i32 %gep_int299, %gep_array300*/
	if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		main_AddRoundKeyexit_crit_edgei_gep235_reg <= main_285_gep301;
		if (start == 1'b0 && ^(main_285_gep301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep235_reg"); $finish; end
	end
	/* main: %.preheader.i.i4*/
	/*   %gep323 = add i32 %gep_int322, 1440*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_AddRoundKeyexit_crit_edgei_gep235_reg <= main_preheaderii4_gep323;
		if (start == 1'b0 && ^(main_preheaderii4_gep323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep235_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %233 = inttoptr i32 %gep235 to i32**/
		main_AddRoundKeyexit_crit_edgei_233 = main_AddRoundKeyexit_crit_edgei_gep235;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %233 = inttoptr i32 %gep235 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_141)) begin
		main_AddRoundKeyexit_crit_edgei_233_reg <= main_AddRoundKeyexit_crit_edgei_233;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_233_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %234 = load i32* %233, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_234 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %234 = load i32* %233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_152)) begin
		main_AddRoundKeyexit_crit_edgei_234_reg <= main_AddRoundKeyexit_crit_edgei_234;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_234_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %235 = or i32 %217, 3*/
		main_AddRoundKeyexit_crit_edgei_235 = (main_AddRoundKeyexit_crit_edgei_217 | 32'd3);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %235 = or i32 %217, 3*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_AddRoundKeyexit_crit_edgei_235_reg <= main_AddRoundKeyexit_crit_edgei_235;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_235_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int236 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_AddRoundKeyexit_crit_edgei_gep_int236 = 0; end
		main_AddRoundKeyexit_crit_edgei_gep_int236 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int236 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_AddRoundKeyexit_crit_edgei_gep_int236_reg <= main_AddRoundKeyexit_crit_edgei_gep_int236;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_int236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_int236_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array237 = mul i32 %235, 4*/
		main_AddRoundKeyexit_crit_edgei_gep_array237 = (main_AddRoundKeyexit_crit_edgei_235 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array237 = mul i32 %235, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_AddRoundKeyexit_crit_edgei_gep_array237_reg <= main_AddRoundKeyexit_crit_edgei_gep_array237;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_array237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_array237_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep238 = add i32 %gep_int236, %gep_array237*/
		main_AddRoundKeyexit_crit_edgei_gep238 = main_signed_add_32_3;
end
always @(*) begin
/* main: %AddRoundKey.exit._crit_edge.i*/
/*   %gep238 = add i32 %gep_int236, %gep_array237*/
	main_AddRoundKeyexit_crit_edgei_gep238_reg = main_AddRoundKeyexit_crit_edgei_gep235_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %236 = inttoptr i32 %gep238 to i32**/
		main_AddRoundKeyexit_crit_edgei_236 = main_AddRoundKeyexit_crit_edgei_gep238;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %236 = inttoptr i32 %gep238 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		main_AddRoundKeyexit_crit_edgei_236_reg <= main_AddRoundKeyexit_crit_edgei_236;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_236_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %237 = load i32* %236, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_237 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %237 = load i32* %236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_152)) begin
		main_AddRoundKeyexit_crit_edgei_237_reg <= main_AddRoundKeyexit_crit_edgei_237;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_237_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %238 = xor i32 %237, %234*/
		main_AddRoundKeyexit_crit_edgei_238 = (main_AddRoundKeyexit_crit_edgei_237 ^ main_AddRoundKeyexit_crit_edgei_234);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %238 = xor i32 %237, %234*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_152)) begin
		main_AddRoundKeyexit_crit_edgei_238_reg <= main_AddRoundKeyexit_crit_edgei_238;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_238_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %239 = add nsw i32 %j.02.i2.i, 1*/
		main_AddRoundKeyexit_crit_edgei_239 = main_signed_add_32_4;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %239 = add nsw i32 %j.02.i2.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_AddRoundKeyexit_crit_edgei_239_reg <= main_AddRoundKeyexit_crit_edgei_239;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_239_reg"); $finish; end
	end
	/* main: %.preheader.i4.i*/
	/*   %gep258 = add i32 %gep_int256, %gep_array257*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_AddRoundKeyexit_crit_edgei_239_reg <= main_preheaderi4i_gep258;
		if (start == 1'b0 && ^(main_preheaderi4i_gep258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_239_reg"); $finish; end
	end
	/* main: %.preheader.i4.i*/
	/*   %261 = add nsw i32 %j.11.i3.i, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_AddRoundKeyexit_crit_edgei_239_reg <= main_preheaderi4i_261;
		if (start == 1'b0 && ^(main_preheaderi4i_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_239_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %gep505 = add i32 %gep503, %gep_array504*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main_AddRoundKeyexit_crit_edgei_239_reg <= main__crit_edgei_gep505;
		if (start == 1'b0 && ^(main__crit_edgei_gep505) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_239_reg"); $finish; end
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep539 = add i32 %gep537, %gep_array538*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		main_AddRoundKeyexit_crit_edgei_239_reg <= main_preheaderi4i14_gep539;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep539) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_239_reg"); $finish; end
	end
	/* main: %.preheader.i.i4*/
	/*   %gep321 = add i32 %gep_int319, %gep_array320*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_AddRoundKeyexit_crit_edgei_239_reg <= main_preheaderii4_gep321;
		if (start == 1'b0 && ^(main_preheaderii4_gep321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_239_reg"); $finish; end
	end
	/* main: %.preheader.i.i4*/
	/*   %333 = add nsw i32 %j.11.i.i3, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_AddRoundKeyexit_crit_edgei_239_reg <= main_preheaderii4_333;
		if (start == 1'b0 && ^(main_preheaderii4_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_239_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %exitcond37 = icmp ne i32 %239, 4*/
		main_AddRoundKeyexit_crit_edgei_exitcond37 = (main_AddRoundKeyexit_crit_edgei_239 != 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %exitcond37 = icmp ne i32 %239, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_AddRoundKeyexit_crit_edgei_exitcond37_reg <= main_AddRoundKeyexit_crit_edgei_exitcond37;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_exitcond37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_exitcond37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %j.11.i3.i = phi i32 [ %249, %.preheader.i4.i ], [ 0, %AddRoundKey.exit._crit_edge.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_153) & (memory_controller_waitrequest == 1'd0)) & (main_AddRoundKeyexit_crit_edgei_exitcond37_reg == 1'd0))) begin
		main_preheaderi4i_j11i3i = 32'd0;
	end
	/* main: %.preheader.i4.i*/
	/*   %j.11.i3.i = phi i32 [ %249, %.preheader.i4.i ], [ 0, %AddRoundKey.exit._crit_edge.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi4i_168) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi4i_exitcond36_reg == 1'd1))) */ begin
		main_preheaderi4i_j11i3i = main_preheaderi4i_249_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %j.11.i3.i = phi i32 [ %249, %.preheader.i4.i ], [ 0, %AddRoundKey.exit._crit_edge.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_153) & (memory_controller_waitrequest == 1'd0)) & (main_AddRoundKeyexit_crit_edgei_exitcond37_reg == 1'd0))) begin
		main_preheaderi4i_j11i3i_reg <= main_preheaderi4i_j11i3i;
		if (start == 1'b0 && ^(main_preheaderi4i_j11i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_j11i3i_reg"); $finish; end
	end
	/* main: %.preheader.i4.i*/
	/*   %j.11.i3.i = phi i32 [ %249, %.preheader.i4.i ], [ 0, %AddRoundKey.exit._crit_edge.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi4i_168) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi4i_exitcond36_reg == 1'd1))) begin
		main_preheaderi4i_j11i3i_reg <= main_preheaderi4i_j11i3i;
		if (start == 1'b0 && ^(main_preheaderi4i_j11i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_j11i3i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %240 = add nsw i32 %j.11.i3.i, 40*/
		main_preheaderi4i_240 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i4.i*/
/*   %240 = add nsw i32 %j.11.i3.i, 40*/
	main_preheaderi4i_240_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_int239 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_preheaderi4i_gep_int239 = 0; end
		main_preheaderi4i_gep_int239 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_int239 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_preheaderi4i_gep_int239_reg <= main_preheaderi4i_gep_int239;
		if (start == 1'b0 && ^(main_preheaderi4i_gep_int239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_gep_int239_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_array240 = mul i32 %240, 4*/
		main_preheaderi4i_gep_array240 = (main_preheaderi4i_240_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_array240 = mul i32 %240, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_155)) begin
		main_preheaderi4i_gep_array240_reg <= main_preheaderi4i_gep_array240;
		if (start == 1'b0 && ^(main_preheaderi4i_gep_array240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_gep_array240_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep241 = add i32 %gep_int239, %gep_array240*/
		main_preheaderi4i_gep241 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i4.i*/
/*   %gep241 = add i32 %gep_int239, %gep_array240*/
	main_preheaderi4i_gep241_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %241 = inttoptr i32 %gep241 to i32**/
		main_preheaderi4i_241 = main_preheaderi4i_gep241;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %241 = inttoptr i32 %gep241 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_preheaderi4i_241_reg <= main_preheaderi4i_241;
		if (start == 1'b0 && ^(main_preheaderi4i_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_241_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %242 = load i32* %241, align 4, !tbaa !1*/
		main_preheaderi4i_242 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %242 = load i32* %241, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_158)) begin
		main_preheaderi4i_242_reg <= main_preheaderi4i_242;
		if (start == 1'b0 && ^(main_preheaderi4i_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_242_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %243 = shl nsw i32 %j.11.i3.i, 2*/
		main_preheaderi4i_243 = (main_preheaderi4i_j11i3i_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %243 = shl nsw i32 %j.11.i3.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_preheaderi4i_243_reg <= main_preheaderi4i_243;
		if (start == 1'b0 && ^(main_preheaderi4i_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_243_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_int242 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_preheaderi4i_gep_int242 = 0; end
		main_preheaderi4i_gep_int242 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_int242 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_preheaderi4i_gep_int242_reg <= main_preheaderi4i_gep_int242;
		if (start == 1'b0 && ^(main_preheaderi4i_gep_int242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_gep_int242_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_array243 = mul i32 %243, 4*/
		main_preheaderi4i_gep_array243 = (main_preheaderi4i_243 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_array243 = mul i32 %243, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_preheaderi4i_gep_array243_reg <= main_preheaderi4i_gep_array243;
		if (start == 1'b0 && ^(main_preheaderi4i_gep_array243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_gep_array243_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep244 = add i32 %gep_int242, %gep_array243*/
		main_preheaderi4i_gep244 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i4.i*/
/*   %gep244 = add i32 %gep_int242, %gep_array243*/
	main_preheaderi4i_gep244_reg = main_AddRoundKeyexit_crit_edgei_gep217_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %244 = inttoptr i32 %gep244 to i32**/
		main_preheaderi4i_244 = main_preheaderi4i_gep244;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %244 = inttoptr i32 %gep244 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_155)) begin
		main_preheaderi4i_244_reg <= main_preheaderi4i_244;
		if (start == 1'b0 && ^(main_preheaderi4i_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_244_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %245 = load i32* %244, align 4, !tbaa !1*/
		main_preheaderi4i_245 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %245 = load i32* %244, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_157)) begin
		main_preheaderi4i_245_reg <= main_preheaderi4i_245;
		if (start == 1'b0 && ^(main_preheaderi4i_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_245_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %246 = xor i32 %245, %242*/
		main_preheaderi4i_246 = (main_preheaderi4i_245_reg ^ main_preheaderi4i_242);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %246 = xor i32 %245, %242*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_158)) begin
		main_preheaderi4i_246_reg <= main_preheaderi4i_246;
		if (start == 1'b0 && ^(main_preheaderi4i_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_246_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_int245 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_preheaderi4i_gep_int245 = 0; end
		main_preheaderi4i_gep_int245 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_int245 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_preheaderi4i_gep_int245_reg <= main_preheaderi4i_gep_int245;
		if (start == 1'b0 && ^(main_preheaderi4i_gep_int245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_gep_int245_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep246 = add i32 %gep_int245, 480*/
		main_preheaderi4i_gep246 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i4.i*/
/*   %gep246 = add i32 %gep_int245, 480*/
	main_preheaderi4i_gep246_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_array247 = mul i32 %240, 4*/
		main_preheaderi4i_gep_array247 = (main_preheaderi4i_240_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_array247 = mul i32 %240, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_155)) begin
		main_preheaderi4i_gep_array247_reg <= main_preheaderi4i_gep_array247;
		if (start == 1'b0 && ^(main_preheaderi4i_gep_array247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_gep_array247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep248 = add i32 %gep246, %gep_array247*/
		main_preheaderi4i_gep248 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i4.i*/
/*   %gep248 = add i32 %gep246, %gep_array247*/
	main_preheaderi4i_gep248_reg = main_AddRoundKeyexit_crit_edgei_gep221_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %247 = inttoptr i32 %gep248 to i32**/
		main_preheaderi4i_247 = main_preheaderi4i_gep248;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %247 = inttoptr i32 %gep248 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_preheaderi4i_247_reg <= main_preheaderi4i_247;
		if (start == 1'b0 && ^(main_preheaderi4i_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %248 = load i32* %247, align 4, !tbaa !1*/
		main_preheaderi4i_248 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %248 = load i32* %247, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_161)) begin
		main_preheaderi4i_248_reg <= main_preheaderi4i_248;
		if (start == 1'b0 && ^(main_preheaderi4i_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_248_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %249 = add nsw i32 %j.11.i3.i, 1*/
		main_preheaderi4i_249 = main_signed_add_32_7;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %249 = add nsw i32 %j.11.i3.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_preheaderi4i_249_reg <= main_preheaderi4i_249;
		if (start == 1'b0 && ^(main_preheaderi4i_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_249_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %gep515 = add i32 %gep_int513, %gep_array514*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main_preheaderi4i_249_reg <= main__crit_edgei_gep515;
		if (start == 1'b0 && ^(main__crit_edgei_gep515) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_249_reg"); $finish; end
	end
	/* main: %.preheader.i.i4*/
	/*   %gep328 = add i32 %gep_int326, %gep_array327*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_preheaderi4i_249_reg <= main_preheaderii4_gep328;
		if (start == 1'b0 && ^(main_preheaderii4_gep328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_249_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_int249 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_preheaderi4i_gep_int249 = 0; end
		main_preheaderi4i_gep_int249 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_int249 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_preheaderi4i_gep_int249_reg <= main_preheaderi4i_gep_int249;
		if (start == 1'b0 && ^(main_preheaderi4i_gep_int249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_gep_int249_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_array250 = mul i32 %249, 4*/
		main_preheaderi4i_gep_array250 = (main_preheaderi4i_249_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_array250 = mul i32 %249, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_155)) begin
		main_preheaderi4i_gep_array250_reg <= main_preheaderi4i_gep_array250;
		if (start == 1'b0 && ^(main_preheaderi4i_gep_array250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_gep_array250_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep251 = add i32 %gep_int249, %gep_array250*/
		main_preheaderi4i_gep251 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.preheader.i4.i*/
/*   %gep251 = add i32 %gep_int249, %gep_array250*/
	main_preheaderi4i_gep251_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %250 = inttoptr i32 %gep251 to i32**/
		main_preheaderi4i_250 = main_preheaderi4i_gep251;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %250 = inttoptr i32 %gep251 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_preheaderi4i_250_reg <= main_preheaderi4i_250;
		if (start == 1'b0 && ^(main_preheaderi4i_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_250_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %251 = load i32* %250, align 4, !tbaa !1*/
		main_preheaderi4i_251 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %251 = load i32* %250, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_161)) begin
		main_preheaderi4i_251_reg <= main_preheaderi4i_251;
		if (start == 1'b0 && ^(main_preheaderi4i_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_251_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %252 = xor i32 %251, %248*/
		main_preheaderi4i_252 = (main_preheaderi4i_251 ^ main_preheaderi4i_248);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %252 = xor i32 %251, %248*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_161)) begin
		main_preheaderi4i_252_reg <= main_preheaderi4i_252;
		if (start == 1'b0 && ^(main_preheaderi4i_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_252_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_int252 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_preheaderi4i_gep_int252 = 0; end
		main_preheaderi4i_gep_int252 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_int252 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_preheaderi4i_gep_int252_reg <= main_preheaderi4i_gep_int252;
		if (start == 1'b0 && ^(main_preheaderi4i_gep_int252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_gep_int252_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep253 = add i32 %gep_int252, 960*/
		main_preheaderi4i_gep253 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.preheader.i4.i*/
/*   %gep253 = add i32 %gep_int252, 960*/
	main_preheaderi4i_gep253_reg = main_AddRoundKeyexit_crit_edgei_gep228_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_array254 = mul i32 %240, 4*/
		main_preheaderi4i_gep_array254 = (main_preheaderi4i_240_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_array254 = mul i32 %240, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_155)) begin
		main_preheaderi4i_gep_array254_reg <= main_preheaderi4i_gep_array254;
		if (start == 1'b0 && ^(main_preheaderi4i_gep_array254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_gep_array254_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep255 = add i32 %gep253, %gep_array254*/
		main_preheaderi4i_gep255 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.preheader.i4.i*/
/*   %gep255 = add i32 %gep253, %gep_array254*/
	main_preheaderi4i_gep255_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %253 = inttoptr i32 %gep255 to i32**/
		main_preheaderi4i_253 = main_preheaderi4i_gep255;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %253 = inttoptr i32 %gep255 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_preheaderi4i_253_reg <= main_preheaderi4i_253;
		if (start == 1'b0 && ^(main_preheaderi4i_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_253_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %254 = load i32* %253, align 4, !tbaa !1*/
		main_preheaderi4i_254 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %254 = load i32* %253, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_164)) begin
		main_preheaderi4i_254_reg <= main_preheaderi4i_254;
		if (start == 1'b0 && ^(main_preheaderi4i_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_254_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %255 = add nsw i32 %j.11.i3.i, 2*/
		main_preheaderi4i_255 = main_signed_add_32_6;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %255 = add nsw i32 %j.11.i3.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_preheaderi4i_255_reg <= main_preheaderi4i_255;
		if (start == 1'b0 && ^(main_preheaderi4i_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_255_reg"); $finish; end
	end
	/* main: %.preheader.i4.i*/
	/*   %gep262 = add i32 %gep260, %gep_array261*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_preheaderi4i_255_reg <= main_preheaderi4i_gep262;
		if (start == 1'b0 && ^(main_preheaderi4i_gep262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_255_reg"); $finish; end
	end
	/* main: %2*/
	/*   %gep21 = add i32 %gep19, %gep_array20*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_preheaderi4i_255_reg <= main_2_gep21;
		if (start == 1'b0 && ^(main_2_gep21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_255_reg"); $finish; end
	end
	/* main: %.preheader.i.i*/
	/*   %42 = add nsw i32 %j.11.i.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_preheaderi4i_255_reg <= main_preheaderii_42;
		if (start == 1'b0 && ^(main_preheaderii_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_255_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %gep512 = add i32 %gep510, %gep_array511*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main_preheaderi4i_255_reg <= main__crit_edgei_gep512;
		if (start == 1'b0 && ^(main__crit_edgei_gep512) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_255_reg"); $finish; end
	end
	/* main: %.preheader.i4.i14*/
	/*   %538 = add nsw i32 %j.11.i3.i13, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_preheaderi4i_255_reg <= main_preheaderi4i14_538;
		if (start == 1'b0 && ^(main_preheaderi4i14_538) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_255_reg"); $finish; end
	end
	/* main: %.preheader.i.i4*/
	/*   %327 = add nsw i32 %j.11.i.i3, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_preheaderi4i_255_reg <= main_preheaderii4_327;
		if (start == 1'b0 && ^(main_preheaderii4_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_255_reg"); $finish; end
	end
	/* main: %.preheader.i.i4*/
	/*   %gep325 = add i32 %gep323, %gep_array324*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_preheaderi4i_255_reg <= main_preheaderii4_gep325;
		if (start == 1'b0 && ^(main_preheaderii4_gep325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_255_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_int256 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_preheaderi4i_gep_int256 = 0; end
		main_preheaderi4i_gep_int256 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_int256 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_preheaderi4i_gep_int256_reg <= main_preheaderi4i_gep_int256;
		if (start == 1'b0 && ^(main_preheaderi4i_gep_int256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_gep_int256_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_array257 = mul i32 %255, 4*/
		main_preheaderi4i_gep_array257 = (main_preheaderi4i_255_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_array257 = mul i32 %255, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_155)) begin
		main_preheaderi4i_gep_array257_reg <= main_preheaderi4i_gep_array257;
		if (start == 1'b0 && ^(main_preheaderi4i_gep_array257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_gep_array257_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep258 = add i32 %gep_int256, %gep_array257*/
		main_preheaderi4i_gep258 = main_signed_add_32_4;
end
always @(*) begin
/* main: %.preheader.i4.i*/
/*   %gep258 = add i32 %gep_int256, %gep_array257*/
	main_preheaderi4i_gep258_reg = main_AddRoundKeyexit_crit_edgei_239_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %256 = inttoptr i32 %gep258 to i32**/
		main_preheaderi4i_256 = main_preheaderi4i_gep258;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %256 = inttoptr i32 %gep258 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_preheaderi4i_256_reg <= main_preheaderi4i_256;
		if (start == 1'b0 && ^(main_preheaderi4i_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_256_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %257 = load i32* %256, align 4, !tbaa !1*/
		main_preheaderi4i_257 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %257 = load i32* %256, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_164)) begin
		main_preheaderi4i_257_reg <= main_preheaderi4i_257;
		if (start == 1'b0 && ^(main_preheaderi4i_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_257_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %258 = xor i32 %257, %254*/
		main_preheaderi4i_258 = (main_preheaderi4i_257 ^ main_preheaderi4i_254);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %258 = xor i32 %257, %254*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_164)) begin
		main_preheaderi4i_258_reg <= main_preheaderi4i_258;
		if (start == 1'b0 && ^(main_preheaderi4i_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_258_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_int259 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_preheaderi4i_gep_int259 = 0; end
		main_preheaderi4i_gep_int259 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_int259 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_preheaderi4i_gep_int259_reg <= main_preheaderi4i_gep_int259;
		if (start == 1'b0 && ^(main_preheaderi4i_gep_int259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_gep_int259_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep260 = add i32 %gep_int259, 1440*/
		main_preheaderi4i_gep260 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.preheader.i4.i*/
/*   %gep260 = add i32 %gep_int259, 1440*/
	main_preheaderi4i_gep260_reg = main_AddRoundKeyexit_crit_edgei_gep235_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_array261 = mul i32 %240, 4*/
		main_preheaderi4i_gep_array261 = (main_preheaderi4i_240_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_array261 = mul i32 %240, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_155)) begin
		main_preheaderi4i_gep_array261_reg <= main_preheaderi4i_gep_array261;
		if (start == 1'b0 && ^(main_preheaderi4i_gep_array261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_gep_array261_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep262 = add i32 %gep260, %gep_array261*/
		main_preheaderi4i_gep262 = main_signed_add_32_6;
end
always @(*) begin
/* main: %.preheader.i4.i*/
/*   %gep262 = add i32 %gep260, %gep_array261*/
	main_preheaderi4i_gep262_reg = main_preheaderi4i_255_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %259 = inttoptr i32 %gep262 to i32**/
		main_preheaderi4i_259 = main_preheaderi4i_gep262;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %259 = inttoptr i32 %gep262 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_preheaderi4i_259_reg <= main_preheaderi4i_259;
		if (start == 1'b0 && ^(main_preheaderi4i_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_259_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %260 = load i32* %259, align 4, !tbaa !1*/
		main_preheaderi4i_260 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %260 = load i32* %259, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_167)) begin
		main_preheaderi4i_260_reg <= main_preheaderi4i_260;
		if (start == 1'b0 && ^(main_preheaderi4i_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_260_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %261 = add nsw i32 %j.11.i3.i, 3*/
		main_preheaderi4i_261 = main_signed_add_32_4;
end
always @(*) begin
/* main: %.preheader.i4.i*/
/*   %261 = add nsw i32 %j.11.i3.i, 3*/
	main_preheaderi4i_261_reg = main_AddRoundKeyexit_crit_edgei_239_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_int263 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_preheaderi4i_gep_int263 = 0; end
		main_preheaderi4i_gep_int263 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_int263 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_preheaderi4i_gep_int263_reg <= main_preheaderi4i_gep_int263;
		if (start == 1'b0 && ^(main_preheaderi4i_gep_int263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_gep_int263_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_array264 = mul i32 %261, 4*/
		main_preheaderi4i_gep_array264 = (main_preheaderi4i_261_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %gep_array264 = mul i32 %261, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_155)) begin
		main_preheaderi4i_gep_array264_reg <= main_preheaderi4i_gep_array264;
		if (start == 1'b0 && ^(main_preheaderi4i_gep_array264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_gep_array264_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %gep265 = add i32 %gep_int263, %gep_array264*/
		main_preheaderi4i_gep265 = main_signed_add_32_7;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %gep265 = add i32 %gep_int263, %gep_array264*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_preheaderi4i_gep265_reg <= main_preheaderi4i_gep265;
		if (start == 1'b0 && ^(main_preheaderi4i_gep265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_gep265_reg"); $finish; end
	end
	/* main: %2*/
	/*   %gep24 = add i32 %gep_int22, %gep_array23*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_preheaderi4i_gep265_reg <= main_2_gep24;
		if (start == 1'b0 && ^(main_2_gep24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_gep265_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %262 = inttoptr i32 %gep265 to i32**/
		main_preheaderi4i_262 = main_preheaderi4i_gep265;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %262 = inttoptr i32 %gep265 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_preheaderi4i_262_reg <= main_preheaderi4i_262;
		if (start == 1'b0 && ^(main_preheaderi4i_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_262_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %263 = load i32* %262, align 4, !tbaa !1*/
		main_preheaderi4i_263 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %263 = load i32* %262, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_167)) begin
		main_preheaderi4i_263_reg <= main_preheaderi4i_263;
		if (start == 1'b0 && ^(main_preheaderi4i_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_263_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %264 = xor i32 %263, %260*/
		main_preheaderi4i_264 = (main_preheaderi4i_263 ^ main_preheaderi4i_260);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %264 = xor i32 %263, %260*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_167)) begin
		main_preheaderi4i_264_reg <= main_preheaderi4i_264;
		if (start == 1'b0 && ^(main_preheaderi4i_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_264_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %exitcond36 = icmp ne i32 %249, 4*/
		main_preheaderi4i_exitcond36 = (main_preheaderi4i_249 != 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %exitcond36 = icmp ne i32 %249, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_preheaderi4i_exitcond36_reg <= main_preheaderi4i_exitcond36;
		if (start == 1'b0 && ^(main_preheaderi4i_exitcond36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_exitcond36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %i.19.i = phi i32 [ %274, %271 ], [ 0, %.lr.ph.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_169) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_i19i = 32'd0;
	end
	/* main: %.lr.ph.i*/
	/*   %i.19.i = phi i32 [ %274, %271 ], [ 0, %.lr.ph.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__271_177) & (memory_controller_waitrequest == 1'd0)) & (main_271_exitcond35 == 1'd1))) */ begin
		main_lrphi_i19i = main_271_274;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %i.19.i = phi i32 [ %274, %271 ], [ 0, %.lr.ph.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_169) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_i19i_reg <= main_lrphi_i19i;
		if (start == 1'b0 && ^(main_lrphi_i19i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_i19i_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %i.19.i = phi i32 [ %274, %271 ], [ 0, %.lr.ph.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__271_177) & (memory_controller_waitrequest == 1'd0)) & (main_271_exitcond35 == 1'd1))) begin
		main_lrphi_i19i_reg <= main_lrphi_i19i;
		if (start == 1'b0 && ^(main_lrphi_i19i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_i19i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %gep_int266 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_lrphi_gep_int266 = 0; end
		main_lrphi_gep_int266 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %gep_int266 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_170)) begin
		main_lrphi_gep_int266_reg <= main_lrphi_gep_int266;
		if (start == 1'b0 && ^(main_lrphi_gep_int266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_gep_int266_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %gep_array267 = mul i32 %i.19.i, 4*/
		main_lrphi_gep_array267 = (main_lrphi_i19i_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %gep_array267 = mul i32 %i.19.i, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_170)) begin
		main_lrphi_gep_array267_reg <= main_lrphi_gep_array267;
		if (start == 1'b0 && ^(main_lrphi_gep_array267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_gep_array267_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %gep268 = add i32 %gep_int266, %gep_array267*/
		main_lrphi_gep268 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph.i*/
/*   %gep268 = add i32 %gep_int266, %gep_array267*/
	main_lrphi_gep268_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %266 = inttoptr i32 %gep268 to i32**/
		main_lrphi_266 = main_lrphi_gep268;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %266 = inttoptr i32 %gep268 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrphi_171)) begin
		main_lrphi_266_reg <= main_lrphi_266;
		if (start == 1'b0 && ^(main_lrphi_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_266_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %267 = load i32* %266, align 4, !tbaa !1*/
		main_lrphi_267 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %267 = load i32* %266, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_173)) begin
		main_lrphi_267_reg <= main_lrphi_267;
		if (start == 1'b0 && ^(main_lrphi_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_267_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %268 = icmp slt i32 %267, 16*/
		main_lrphi_268 = ($signed(main_lrphi_267) < $signed(32'd16));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %268 = icmp slt i32 %267, 16*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_173)) begin
		main_lrphi_268_reg <= main_lrphi_268;
		if (start == 1'b0 && ^(main_lrphi_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_268_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %269*/
	/*   %.pre.i = load i32* %266, align 4, !tbaa !1*/
		main_269_prei = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %269*/
	/*   %.pre.i = load i32* %266, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__269_176)) begin
		main_269_prei_reg <= main_269_prei;
		if (start == 1'b0 && ^(main_269_prei) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_269_prei_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %271*/
	/*   %272 = phi i32 [ %.pre.i, %269 ], [ %267, %.lr.ph.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi_173) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_268 == 1'd0))) begin
		main_271_272 = main_lrphi_267;
	end
	/* main: %271*/
	/*   %272 = phi i32 [ %.pre.i, %269 ], [ %267, %.lr.ph.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__269_176) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_271_272 = main_269_prei;
	end
end
always @(posedge clk) begin
	/* main: %271*/
	/*   %272 = phi i32 [ %.pre.i, %269 ], [ %267, %.lr.ph.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi_173) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_268 == 1'd0))) begin
		main_271_272_reg <= main_271_272;
		if (start == 1'b0 && ^(main_271_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_271_272_reg"); $finish; end
	end
	/* main: %271*/
	/*   %272 = phi i32 [ %.pre.i, %269 ], [ %267, %.lr.ph.i ]*/
	if (((cur_state == LEGUP_F_main_BB__269_176) & (memory_controller_waitrequest == 1'd0))) begin
		main_271_272_reg <= main_271_272;
		if (start == 1'b0 && ^(main_271_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_271_272_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %271*/
	/*   %274 = add nsw i32 %i.19.i, 1*/
		main_271_274 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %271*/
	/*   %274 = add nsw i32 %i.19.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__271_177)) begin
		main_271_274_reg <= main_271_274;
		if (start == 1'b0 && ^(main_271_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_271_274_reg"); $finish; end
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %566 = add nsw i32 %i.28.i21, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_317)) begin
		main_271_274_reg <= main_preheaderloopexiti17_566;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_566) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_271_274_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %271*/
	/*   %exitcond35 = icmp ne i32 %274, 16*/
		main_271_exitcond35 = (main_271_274 != 32'd16);
end
always @(posedge clk) begin
	/* main: %271*/
	/*   %exitcond35 = icmp ne i32 %274, 16*/
	if ((cur_state == LEGUP_F_main_BB__271_177)) begin
		main_271_exitcond35_reg <= main_271_exitcond35;
		if (start == 1'b0 && ^(main_271_exitcond35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_271_exitcond35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %275 = phi i32 [ %282, %.preheader.i ], [ 0, %271 ]*/
	if ((((cur_state == LEGUP_F_main_BB__271_177) & (memory_controller_waitrequest == 1'd0)) & (main_271_exitcond35 == 1'd0))) begin
		main_preheaderi_275 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %275 = phi i32 [ %282, %.preheader.i ], [ 0, %271 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_181) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcondi_reg == 1'd0))) */ begin
		main_preheaderi_275 = main_preheaderi_282;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %275 = phi i32 [ %282, %.preheader.i ], [ 0, %271 ]*/
	if ((((cur_state == LEGUP_F_main_BB__271_177) & (memory_controller_waitrequest == 1'd0)) & (main_271_exitcond35 == 1'd0))) begin
		main_preheaderi_275_reg <= main_preheaderi_275;
		if (start == 1'b0 && ^(main_preheaderi_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_275_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %275 = phi i32 [ %282, %.preheader.i ], [ 0, %271 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_181) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcondi_reg == 1'd0))) begin
		main_preheaderi_275_reg <= main_preheaderi_275;
		if (start == 1'b0 && ^(main_preheaderi_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_275_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %i.28.i = phi i32 [ %283, %.preheader.i ], [ 0, %271 ]*/
	if ((((cur_state == LEGUP_F_main_BB__271_177) & (memory_controller_waitrequest == 1'd0)) & (main_271_exitcond35 == 1'd0))) begin
		main_preheaderi_i28i = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %i.28.i = phi i32 [ %283, %.preheader.i ], [ 0, %271 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_181) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcondi_reg == 1'd0))) */ begin
		main_preheaderi_i28i = main_preheaderi_283_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %i.28.i = phi i32 [ %283, %.preheader.i ], [ 0, %271 ]*/
	if ((((cur_state == LEGUP_F_main_BB__271_177) & (memory_controller_waitrequest == 1'd0)) & (main_271_exitcond35 == 1'd0))) begin
		main_preheaderi_i28i_reg <= main_preheaderi_i28i;
		if (start == 1'b0 && ^(main_preheaderi_i28i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i28i_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %i.28.i = phi i32 [ %283, %.preheader.i ], [ 0, %271 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_181) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcondi_reg == 1'd0))) begin
		main_preheaderi_i28i_reg <= main_preheaderi_i28i;
		if (start == 1'b0 && ^(main_preheaderi_i28i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i28i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_int269 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_preheaderi_gep_int269 = 0; end
		main_preheaderi_gep_int269 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_int269 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_178)) begin
		main_preheaderi_gep_int269_reg <= main_preheaderi_gep_int269;
		if (start == 1'b0 && ^(main_preheaderi_gep_int269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_int269_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_array270 = mul i32 %i.28.i, 4*/
		main_preheaderi_gep_array270 = (main_preheaderi_i28i_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_array270 = mul i32 %i.28.i, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_178)) begin
		main_preheaderi_gep_array270_reg <= main_preheaderi_gep_array270;
		if (start == 1'b0 && ^(main_preheaderi_gep_array270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_array270_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep271 = add i32 %gep_int269, %gep_array270*/
		main_preheaderi_gep271 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %gep271 = add i32 %gep_int269, %gep_array270*/
	main_preheaderi_gep271_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %276 = inttoptr i32 %gep271 to i32**/
		main_preheaderi_276 = main_preheaderi_gep271;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %276 = inttoptr i32 %gep271 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_179)) begin
		main_preheaderi_276_reg <= main_preheaderi_276;
		if (start == 1'b0 && ^(main_preheaderi_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_276_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %277 = load i32* %276, align 4, !tbaa !1*/
		main_preheaderi_277 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %277 = load i32* %276, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_181)) begin
		main_preheaderi_277_reg <= main_preheaderi_277;
		if (start == 1'b0 && ^(main_preheaderi_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_277_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_int272 = ptrtoint [16 x i32]* @encrypt.out_enc_statemt to i32*/
if (reset) begin main_preheaderi_gep_int272 = 0; end
		main_preheaderi_gep_int272 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_int272 = ptrtoint [16 x i32]* @encrypt.out_enc_statemt to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_178)) begin
		main_preheaderi_gep_int272_reg <= main_preheaderi_gep_int272;
		if (start == 1'b0 && ^(main_preheaderi_gep_int272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_int272_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_array273 = mul i32 %i.28.i, 4*/
		main_preheaderi_gep_array273 = (main_preheaderi_i28i_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_array273 = mul i32 %i.28.i, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_178)) begin
		main_preheaderi_gep_array273_reg <= main_preheaderi_gep_array273;
		if (start == 1'b0 && ^(main_preheaderi_gep_array273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_array273_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep274 = add i32 %gep_int272, %gep_array273*/
		main_preheaderi_gep274 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %gep274 = add i32 %gep_int272, %gep_array273*/
	main_preheaderi_gep274_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %278 = inttoptr i32 %gep274 to i32**/
		main_preheaderi_278 = main_preheaderi_gep274;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %278 = inttoptr i32 %gep274 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_179)) begin
		main_preheaderi_278_reg <= main_preheaderi_278;
		if (start == 1'b0 && ^(main_preheaderi_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_278_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %279 = load i32* %278, align 4, !tbaa !1*/
		main_preheaderi_279 = encryptout_enc_statemt_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %279 = load i32* %278, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_180)) begin
		main_preheaderi_279_reg <= main_preheaderi_279;
		if (start == 1'b0 && ^(main_preheaderi_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_279_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %280 = icmp eq i32 %277, %279*/
		main_preheaderi_280 = (main_preheaderi_277 == main_preheaderi_279_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %280 = icmp eq i32 %277, %279*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_181)) begin
		main_preheaderi_280_reg <= main_preheaderi_280;
		if (start == 1'b0 && ^(main_preheaderi_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_280_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %281 = zext i1 %280 to i32*/
		main_preheaderi_281 = main_preheaderi_280;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %281 = zext i1 %280 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_181)) begin
		main_preheaderi_281_reg <= main_preheaderi_281;
		if (start == 1'b0 && ^(main_preheaderi_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_281_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %282 = add nsw i32 %281, %275*/
		main_preheaderi_282 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %282 = add nsw i32 %281, %275*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_181)) begin
		main_preheaderi_282_reg <= main_preheaderi_282;
		if (start == 1'b0 && ^(main_preheaderi_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_282_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %283 = add nsw i32 %i.28.i, 1*/
		main_preheaderi_283 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %283 = add nsw i32 %i.28.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_178)) begin
		main_preheaderi_283_reg <= main_preheaderi_283;
		if (start == 1'b0 && ^(main_preheaderi_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_283_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %exitcond.i = icmp eq i32 %283, 16*/
		main_preheaderi_exitcondi = (main_preheaderi_283 == 32'd16);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %exitcond.i = icmp eq i32 %283, 16*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_178)) begin
		main_preheaderi_exitcondi_reg <= main_preheaderi_exitcondi;
		if (start == 1'b0 && ^(main_preheaderi_exitcondi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_exitcondi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encrypt.exit*/
	/*   %.lcssa1 = phi i32 [ %282, %.preheader.i ]*/
		main_encryptexit_lcssa1 = main_preheaderi_282;
end
always @(posedge clk) begin
	/* main: %encrypt.exit*/
	/*   %.lcssa1 = phi i32 [ %282, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_181) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcondi_reg == 1'd1))) begin
		main_encryptexit_lcssa1_reg <= main_encryptexit_lcssa1;
		if (start == 1'b0 && ^(main_encryptexit_lcssa1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encryptexit_lcssa1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %j.02.i.i1 = phi i32 [ 0, %encrypt.exit ], [ %311, %285 ]*/
	if (((cur_state == LEGUP_F_main_BB_encryptexit_184) & (memory_controller_waitrequest == 1'd0))) begin
		main_285_j02ii1 = 32'd0;
	end
	/* main: %285*/
	/*   %j.02.i.i1 = phi i32 [ 0, %encrypt.exit ], [ %311, %285 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__285_199) & (memory_controller_waitrequest == 1'd0)) & (main_285_exitcond34_reg == 1'd1))) */ begin
		main_285_j02ii1 = main_285_311_reg;
	end
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %j.02.i.i1 = phi i32 [ 0, %encrypt.exit ], [ %311, %285 ]*/
	if (((cur_state == LEGUP_F_main_BB_encryptexit_184) & (memory_controller_waitrequest == 1'd0))) begin
		main_285_j02ii1_reg <= main_285_j02ii1;
		if (start == 1'b0 && ^(main_285_j02ii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_j02ii1_reg"); $finish; end
	end
	/* main: %285*/
	/*   %j.02.i.i1 = phi i32 [ 0, %encrypt.exit ], [ %311, %285 ]*/
	if ((((cur_state == LEGUP_F_main_BB__285_199) & (memory_controller_waitrequest == 1'd0)) & (main_285_exitcond34_reg == 1'd1))) begin
		main_285_j02ii1_reg <= main_285_j02ii1;
		if (start == 1'b0 && ^(main_285_j02ii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_j02ii1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %286 = add nsw i32 %j.02.i.i1, 40*/
		main_285_286 = main_signed_add_32_0;
end
always @(*) begin
/* main: %285*/
/*   %286 = add nsw i32 %j.02.i.i1, 40*/
	main_285_286_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %285*/
	/*   %gep_int275 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_285_gep_int275 = 0; end
		main_285_gep_int275 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %gep_int275 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_285_gep_int275_reg <= main_285_gep_int275;
		if (start == 1'b0 && ^(main_285_gep_int275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_gep_int275_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %gep_array276 = mul i32 %286, 4*/
		main_285_gep_array276 = (main_285_286_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %gep_array276 = mul i32 %286, 4*/
	if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		main_285_gep_array276_reg <= main_285_gep_array276;
		if (start == 1'b0 && ^(main_285_gep_array276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_gep_array276_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %gep277 = add i32 %gep_int275, %gep_array276*/
		main_285_gep277 = main_signed_add_32_0;
end
always @(*) begin
/* main: %285*/
/*   %gep277 = add i32 %gep_int275, %gep_array276*/
	main_285_gep277_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %285*/
	/*   %287 = inttoptr i32 %gep277 to i32**/
		main_285_287 = main_285_gep277;
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %287 = inttoptr i32 %gep277 to i32**/
	if ((cur_state == LEGUP_F_main_BB__285_187)) begin
		main_285_287_reg <= main_285_287;
		if (start == 1'b0 && ^(main_285_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_287_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %288 = load i32* %287, align 4, !tbaa !1*/
		main_285_288 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %288 = load i32* %287, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_189)) begin
		main_285_288_reg <= main_285_288;
		if (start == 1'b0 && ^(main_285_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_288_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %289 = shl nsw i32 %j.02.i.i1, 2*/
		main_285_289 = (main_285_j02ii1_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %289 = shl nsw i32 %j.02.i.i1, 2*/
	if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_285_289_reg <= main_285_289;
		if (start == 1'b0 && ^(main_285_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_289_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %gep_int278 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_285_gep_int278 = 0; end
		main_285_gep_int278 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %gep_int278 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_285_gep_int278_reg <= main_285_gep_int278;
		if (start == 1'b0 && ^(main_285_gep_int278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_gep_int278_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %gep_array279 = mul i32 %289, 4*/
		main_285_gep_array279 = (main_285_289 * 32'd4);
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %gep_array279 = mul i32 %289, 4*/
	if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_285_gep_array279_reg <= main_285_gep_array279;
		if (start == 1'b0 && ^(main_285_gep_array279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_gep_array279_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %gep280 = add i32 %gep_int278, %gep_array279*/
		main_285_gep280 = main_signed_add_32_0;
end
always @(*) begin
/* main: %285*/
/*   %gep280 = add i32 %gep_int278, %gep_array279*/
	main_285_gep280_reg = main_AddRoundKeyexit_crit_edgei_gep217_reg;
end
always @(*) begin
	/* main: %285*/
	/*   %290 = inttoptr i32 %gep280 to i32**/
		main_285_290 = main_285_gep280;
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %290 = inttoptr i32 %gep280 to i32**/
	if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		main_285_290_reg <= main_285_290;
		if (start == 1'b0 && ^(main_285_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_290_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %291 = load i32* %290, align 4, !tbaa !1*/
		main_285_291 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %291 = load i32* %290, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_188)) begin
		main_285_291_reg <= main_285_291;
		if (start == 1'b0 && ^(main_285_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_291_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %292 = xor i32 %291, %288*/
		main_285_292 = (main_285_291_reg ^ main_285_288);
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %292 = xor i32 %291, %288*/
	if ((cur_state == LEGUP_F_main_BB__285_189)) begin
		main_285_292_reg <= main_285_292;
		if (start == 1'b0 && ^(main_285_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_292_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %gep_int281 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_285_gep_int281 = 0; end
		main_285_gep_int281 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %gep_int281 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_285_gep_int281_reg <= main_285_gep_int281;
		if (start == 1'b0 && ^(main_285_gep_int281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_gep_int281_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %gep282 = add i32 %gep_int281, 480*/
		main_285_gep282 = main_signed_add_32_1;
end
always @(*) begin
/* main: %285*/
/*   %gep282 = add i32 %gep_int281, 480*/
	main_285_gep282_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %285*/
	/*   %gep_array283 = mul i32 %286, 4*/
		main_285_gep_array283 = (main_285_286_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %gep_array283 = mul i32 %286, 4*/
	if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		main_285_gep_array283_reg <= main_285_gep_array283;
		if (start == 1'b0 && ^(main_285_gep_array283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_gep_array283_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %gep284 = add i32 %gep282, %gep_array283*/
		main_285_gep284 = main_signed_add_32_1;
end
always @(*) begin
/* main: %285*/
/*   %gep284 = add i32 %gep282, %gep_array283*/
	main_285_gep284_reg = main_AddRoundKeyexit_crit_edgei_gep221_reg;
end
always @(*) begin
	/* main: %285*/
	/*   %293 = inttoptr i32 %gep284 to i32**/
		main_285_293 = main_285_gep284;
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %293 = inttoptr i32 %gep284 to i32**/
	if ((cur_state == LEGUP_F_main_BB__285_187)) begin
		main_285_293_reg <= main_285_293;
		if (start == 1'b0 && ^(main_285_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_293_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %294 = load i32* %293, align 4, !tbaa !1*/
		main_285_294 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %294 = load i32* %293, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_192)) begin
		main_285_294_reg <= main_285_294;
		if (start == 1'b0 && ^(main_285_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_294_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %295 = or i32 %289, 1*/
		main_285_295 = (main_285_289 | 32'd1);
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %295 = or i32 %289, 1*/
	if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_285_295_reg <= main_285_295;
		if (start == 1'b0 && ^(main_285_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_295_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %gep_int285 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_285_gep_int285 = 0; end
		main_285_gep_int285 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %gep_int285 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_285_gep_int285_reg <= main_285_gep_int285;
		if (start == 1'b0 && ^(main_285_gep_int285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_gep_int285_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %gep_array286 = mul i32 %295, 4*/
		main_285_gep_array286 = (main_285_295 * 32'd4);
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %gep_array286 = mul i32 %295, 4*/
	if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_285_gep_array286_reg <= main_285_gep_array286;
		if (start == 1'b0 && ^(main_285_gep_array286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_gep_array286_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %gep287 = add i32 %gep_int285, %gep_array286*/
		main_285_gep287 = main_signed_add_32_1;
end
always @(*) begin
/* main: %285*/
/*   %gep287 = add i32 %gep_int285, %gep_array286*/
	main_285_gep287_reg = main_AddRoundKeyexit_crit_edgei_gep221_reg;
end
always @(*) begin
	/* main: %285*/
	/*   %296 = inttoptr i32 %gep287 to i32**/
		main_285_296 = main_285_gep287;
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %296 = inttoptr i32 %gep287 to i32**/
	if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		main_285_296_reg <= main_285_296;
		if (start == 1'b0 && ^(main_285_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_296_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
		main_285_297 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_192)) begin
		main_285_297_reg <= main_285_297;
		if (start == 1'b0 && ^(main_285_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_297_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %298 = xor i32 %297, %294*/
		main_285_298 = (main_285_297 ^ main_285_294);
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %298 = xor i32 %297, %294*/
	if ((cur_state == LEGUP_F_main_BB__285_192)) begin
		main_285_298_reg <= main_285_298;
		if (start == 1'b0 && ^(main_285_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_298_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %gep_int288 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_285_gep_int288 = 0; end
		main_285_gep_int288 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %gep_int288 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_285_gep_int288_reg <= main_285_gep_int288;
		if (start == 1'b0 && ^(main_285_gep_int288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_gep_int288_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %gep289 = add i32 %gep_int288, 960*/
		main_285_gep289 = main_signed_add_32_2;
end
always @(*) begin
/* main: %285*/
/*   %gep289 = add i32 %gep_int288, 960*/
	main_285_gep289_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %285*/
	/*   %gep_array290 = mul i32 %286, 4*/
		main_285_gep_array290 = (main_285_286_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %gep_array290 = mul i32 %286, 4*/
	if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		main_285_gep_array290_reg <= main_285_gep_array290;
		if (start == 1'b0 && ^(main_285_gep_array290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_gep_array290_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %gep291 = add i32 %gep289, %gep_array290*/
		main_285_gep291 = main_signed_add_32_2;
end
always @(*) begin
/* main: %285*/
/*   %gep291 = add i32 %gep289, %gep_array290*/
	main_285_gep291_reg = main_AddRoundKeyexit_crit_edgei_gep228_reg;
end
always @(*) begin
	/* main: %285*/
	/*   %299 = inttoptr i32 %gep291 to i32**/
		main_285_299 = main_285_gep291;
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %299 = inttoptr i32 %gep291 to i32**/
	if ((cur_state == LEGUP_F_main_BB__285_187)) begin
		main_285_299_reg <= main_285_299;
		if (start == 1'b0 && ^(main_285_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_299_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %300 = load i32* %299, align 4, !tbaa !1*/
		main_285_300 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %300 = load i32* %299, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_195)) begin
		main_285_300_reg <= main_285_300;
		if (start == 1'b0 && ^(main_285_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_300_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %301 = or i32 %289, 2*/
		main_285_301 = (main_285_289 | 32'd2);
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %301 = or i32 %289, 2*/
	if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_285_301_reg <= main_285_301;
		if (start == 1'b0 && ^(main_285_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_301_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %gep_int292 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_285_gep_int292 = 0; end
		main_285_gep_int292 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %gep_int292 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_285_gep_int292_reg <= main_285_gep_int292;
		if (start == 1'b0 && ^(main_285_gep_int292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_gep_int292_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %gep_array293 = mul i32 %301, 4*/
		main_285_gep_array293 = (main_285_301 * 32'd4);
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %gep_array293 = mul i32 %301, 4*/
	if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_285_gep_array293_reg <= main_285_gep_array293;
		if (start == 1'b0 && ^(main_285_gep_array293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_gep_array293_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %gep294 = add i32 %gep_int292, %gep_array293*/
		main_285_gep294 = main_signed_add_32_2;
end
always @(*) begin
/* main: %285*/
/*   %gep294 = add i32 %gep_int292, %gep_array293*/
	main_285_gep294_reg = main_AddRoundKeyexit_crit_edgei_gep228_reg;
end
always @(*) begin
	/* main: %285*/
	/*   %302 = inttoptr i32 %gep294 to i32**/
		main_285_302 = main_285_gep294;
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %302 = inttoptr i32 %gep294 to i32**/
	if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		main_285_302_reg <= main_285_302;
		if (start == 1'b0 && ^(main_285_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_302_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %303 = load i32* %302, align 4, !tbaa !1*/
		main_285_303 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %303 = load i32* %302, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_195)) begin
		main_285_303_reg <= main_285_303;
		if (start == 1'b0 && ^(main_285_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_303_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %304 = xor i32 %303, %300*/
		main_285_304 = (main_285_303 ^ main_285_300);
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %304 = xor i32 %303, %300*/
	if ((cur_state == LEGUP_F_main_BB__285_195)) begin
		main_285_304_reg <= main_285_304;
		if (start == 1'b0 && ^(main_285_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_304_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %gep_int295 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_285_gep_int295 = 0; end
		main_285_gep_int295 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %gep_int295 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_285_gep_int295_reg <= main_285_gep_int295;
		if (start == 1'b0 && ^(main_285_gep_int295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_gep_int295_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %gep296 = add i32 %gep_int295, 1440*/
		main_285_gep296 = main_signed_add_32_3;
end
always @(*) begin
/* main: %285*/
/*   %gep296 = add i32 %gep_int295, 1440*/
	main_285_gep296_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %285*/
	/*   %gep_array297 = mul i32 %286, 4*/
		main_285_gep_array297 = (main_285_286_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %gep_array297 = mul i32 %286, 4*/
	if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		main_285_gep_array297_reg <= main_285_gep_array297;
		if (start == 1'b0 && ^(main_285_gep_array297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_gep_array297_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %gep298 = add i32 %gep296, %gep_array297*/
		main_285_gep298 = main_signed_add_32_3;
end
always @(*) begin
/* main: %285*/
/*   %gep298 = add i32 %gep296, %gep_array297*/
	main_285_gep298_reg = main_AddRoundKeyexit_crit_edgei_gep235_reg;
end
always @(*) begin
	/* main: %285*/
	/*   %305 = inttoptr i32 %gep298 to i32**/
		main_285_305 = main_285_gep298;
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %305 = inttoptr i32 %gep298 to i32**/
	if ((cur_state == LEGUP_F_main_BB__285_187)) begin
		main_285_305_reg <= main_285_305;
		if (start == 1'b0 && ^(main_285_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_305_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %306 = load i32* %305, align 4, !tbaa !1*/
		main_285_306 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %306 = load i32* %305, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_198)) begin
		main_285_306_reg <= main_285_306;
		if (start == 1'b0 && ^(main_285_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_306_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %307 = or i32 %289, 3*/
		main_285_307 = (main_285_289 | 32'd3);
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %307 = or i32 %289, 3*/
	if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_285_307_reg <= main_285_307;
		if (start == 1'b0 && ^(main_285_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_307_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %gep_int299 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_285_gep_int299 = 0; end
		main_285_gep_int299 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %gep_int299 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_285_gep_int299_reg <= main_285_gep_int299;
		if (start == 1'b0 && ^(main_285_gep_int299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_gep_int299_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %gep_array300 = mul i32 %307, 4*/
		main_285_gep_array300 = (main_285_307 * 32'd4);
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %gep_array300 = mul i32 %307, 4*/
	if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_285_gep_array300_reg <= main_285_gep_array300;
		if (start == 1'b0 && ^(main_285_gep_array300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_gep_array300_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %gep301 = add i32 %gep_int299, %gep_array300*/
		main_285_gep301 = main_signed_add_32_3;
end
always @(*) begin
/* main: %285*/
/*   %gep301 = add i32 %gep_int299, %gep_array300*/
	main_285_gep301_reg = main_AddRoundKeyexit_crit_edgei_gep235_reg;
end
always @(*) begin
	/* main: %285*/
	/*   %308 = inttoptr i32 %gep301 to i32**/
		main_285_308 = main_285_gep301;
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %308 = inttoptr i32 %gep301 to i32**/
	if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		main_285_308_reg <= main_285_308;
		if (start == 1'b0 && ^(main_285_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_308_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %309 = load i32* %308, align 4, !tbaa !1*/
		main_285_309 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %309 = load i32* %308, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_198)) begin
		main_285_309_reg <= main_285_309;
		if (start == 1'b0 && ^(main_285_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_309_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %310 = xor i32 %309, %306*/
		main_285_310 = (main_285_309 ^ main_285_306);
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %310 = xor i32 %309, %306*/
	if ((cur_state == LEGUP_F_main_BB__285_198)) begin
		main_285_310_reg <= main_285_310;
		if (start == 1'b0 && ^(main_285_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_310_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %311 = add nsw i32 %j.02.i.i1, 1*/
		main_285_311 = main_signed_add_32_4;
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %311 = add nsw i32 %j.02.i.i1, 1*/
	if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_285_311_reg <= main_285_311;
		if (start == 1'b0 && ^(main_285_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_311_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %285*/
	/*   %exitcond34 = icmp ne i32 %311, 4*/
		main_285_exitcond34 = (main_285_311 != 32'd4);
end
always @(posedge clk) begin
	/* main: %285*/
	/*   %exitcond34 = icmp ne i32 %311, 4*/
	if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_285_exitcond34_reg <= main_285_exitcond34;
		if (start == 1'b0 && ^(main_285_exitcond34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_285_exitcond34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %j.11.i.i3 = phi i32 [ %321, %.preheader.i.i4 ], [ 0, %285 ]*/
	if ((((cur_state == LEGUP_F_main_BB__285_199) & (memory_controller_waitrequest == 1'd0)) & (main_285_exitcond34_reg == 1'd0))) begin
		main_preheaderii4_j11ii3 = 32'd0;
	end
	/* main: %.preheader.i.i4*/
	/*   %j.11.i.i3 = phi i32 [ %321, %.preheader.i.i4 ], [ 0, %285 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderii4_214) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderii4_exitcond33_reg == 1'd1))) */ begin
		main_preheaderii4_j11ii3 = main_preheaderii4_321_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %j.11.i.i3 = phi i32 [ %321, %.preheader.i.i4 ], [ 0, %285 ]*/
	if ((((cur_state == LEGUP_F_main_BB__285_199) & (memory_controller_waitrequest == 1'd0)) & (main_285_exitcond34_reg == 1'd0))) begin
		main_preheaderii4_j11ii3_reg <= main_preheaderii4_j11ii3;
		if (start == 1'b0 && ^(main_preheaderii4_j11ii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_j11ii3_reg"); $finish; end
	end
	/* main: %.preheader.i.i4*/
	/*   %j.11.i.i3 = phi i32 [ %321, %.preheader.i.i4 ], [ 0, %285 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderii4_214) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderii4_exitcond33_reg == 1'd1))) begin
		main_preheaderii4_j11ii3_reg <= main_preheaderii4_j11ii3;
		if (start == 1'b0 && ^(main_preheaderii4_j11ii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_j11ii3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %312 = add nsw i32 %j.11.i.i3, 40*/
		main_preheaderii4_312 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i.i4*/
/*   %312 = add nsw i32 %j.11.i.i3, 40*/
	main_preheaderii4_312_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_int302 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_preheaderii4_gep_int302 = 0; end
		main_preheaderii4_gep_int302 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_int302 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_preheaderii4_gep_int302_reg <= main_preheaderii4_gep_int302;
		if (start == 1'b0 && ^(main_preheaderii4_gep_int302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_gep_int302_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_array303 = mul i32 %312, 4*/
		main_preheaderii4_gep_array303 = (main_preheaderii4_312_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_array303 = mul i32 %312, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_201)) begin
		main_preheaderii4_gep_array303_reg <= main_preheaderii4_gep_array303;
		if (start == 1'b0 && ^(main_preheaderii4_gep_array303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_gep_array303_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep304 = add i32 %gep_int302, %gep_array303*/
		main_preheaderii4_gep304 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i.i4*/
/*   %gep304 = add i32 %gep_int302, %gep_array303*/
	main_preheaderii4_gep304_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %313 = inttoptr i32 %gep304 to i32**/
		main_preheaderii4_313 = main_preheaderii4_gep304;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %313 = inttoptr i32 %gep304 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_preheaderii4_313_reg <= main_preheaderii4_313;
		if (start == 1'b0 && ^(main_preheaderii4_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_313_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %314 = load i32* %313, align 4, !tbaa !1*/
		main_preheaderii4_314 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %314 = load i32* %313, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_204)) begin
		main_preheaderii4_314_reg <= main_preheaderii4_314;
		if (start == 1'b0 && ^(main_preheaderii4_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_314_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %315 = shl nsw i32 %j.11.i.i3, 2*/
		main_preheaderii4_315 = (main_preheaderii4_j11ii3_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %315 = shl nsw i32 %j.11.i.i3, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_preheaderii4_315_reg <= main_preheaderii4_315;
		if (start == 1'b0 && ^(main_preheaderii4_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_315_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_int305 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_preheaderii4_gep_int305 = 0; end
		main_preheaderii4_gep_int305 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_int305 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_preheaderii4_gep_int305_reg <= main_preheaderii4_gep_int305;
		if (start == 1'b0 && ^(main_preheaderii4_gep_int305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_gep_int305_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_array306 = mul i32 %315, 4*/
		main_preheaderii4_gep_array306 = (main_preheaderii4_315 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_array306 = mul i32 %315, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_preheaderii4_gep_array306_reg <= main_preheaderii4_gep_array306;
		if (start == 1'b0 && ^(main_preheaderii4_gep_array306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_gep_array306_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep307 = add i32 %gep_int305, %gep_array306*/
		main_preheaderii4_gep307 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i.i4*/
/*   %gep307 = add i32 %gep_int305, %gep_array306*/
	main_preheaderii4_gep307_reg = main_AddRoundKeyexit_crit_edgei_gep217_reg;
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %316 = inttoptr i32 %gep307 to i32**/
		main_preheaderii4_316 = main_preheaderii4_gep307;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %316 = inttoptr i32 %gep307 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_201)) begin
		main_preheaderii4_316_reg <= main_preheaderii4_316;
		if (start == 1'b0 && ^(main_preheaderii4_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_316_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %317 = load i32* %316, align 4, !tbaa !1*/
		main_preheaderii4_317 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %317 = load i32* %316, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_203)) begin
		main_preheaderii4_317_reg <= main_preheaderii4_317;
		if (start == 1'b0 && ^(main_preheaderii4_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_317_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %318 = xor i32 %317, %314*/
		main_preheaderii4_318 = (main_preheaderii4_317_reg ^ main_preheaderii4_314);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %318 = xor i32 %317, %314*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_204)) begin
		main_preheaderii4_318_reg <= main_preheaderii4_318;
		if (start == 1'b0 && ^(main_preheaderii4_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_318_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_int308 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_preheaderii4_gep_int308 = 0; end
		main_preheaderii4_gep_int308 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_int308 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_preheaderii4_gep_int308_reg <= main_preheaderii4_gep_int308;
		if (start == 1'b0 && ^(main_preheaderii4_gep_int308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_gep_int308_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep309 = add i32 %gep_int308, 480*/
		main_preheaderii4_gep309 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i.i4*/
/*   %gep309 = add i32 %gep_int308, 480*/
	main_preheaderii4_gep309_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_array310 = mul i32 %312, 4*/
		main_preheaderii4_gep_array310 = (main_preheaderii4_312_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_array310 = mul i32 %312, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_201)) begin
		main_preheaderii4_gep_array310_reg <= main_preheaderii4_gep_array310;
		if (start == 1'b0 && ^(main_preheaderii4_gep_array310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_gep_array310_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep311 = add i32 %gep309, %gep_array310*/
		main_preheaderii4_gep311 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i.i4*/
/*   %gep311 = add i32 %gep309, %gep_array310*/
	main_preheaderii4_gep311_reg = main_AddRoundKeyexit_crit_edgei_gep221_reg;
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %319 = inttoptr i32 %gep311 to i32**/
		main_preheaderii4_319 = main_preheaderii4_gep311;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %319 = inttoptr i32 %gep311 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_preheaderii4_319_reg <= main_preheaderii4_319;
		if (start == 1'b0 && ^(main_preheaderii4_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_319_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %320 = load i32* %319, align 4, !tbaa !1*/
		main_preheaderii4_320 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %320 = load i32* %319, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_207)) begin
		main_preheaderii4_320_reg <= main_preheaderii4_320;
		if (start == 1'b0 && ^(main_preheaderii4_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_320_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %321 = add nsw i32 %j.11.i.i3, 1*/
		main_preheaderii4_321 = main_signed_add_32_7;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %321 = add nsw i32 %j.11.i.i3, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_preheaderii4_321_reg <= main_preheaderii4_321;
		if (start == 1'b0 && ^(main_preheaderii4_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_321_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_int312 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_preheaderii4_gep_int312 = 0; end
		main_preheaderii4_gep_int312 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_int312 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_preheaderii4_gep_int312_reg <= main_preheaderii4_gep_int312;
		if (start == 1'b0 && ^(main_preheaderii4_gep_int312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_gep_int312_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_array313 = mul i32 %321, 4*/
		main_preheaderii4_gep_array313 = (main_preheaderii4_321_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_array313 = mul i32 %321, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_201)) begin
		main_preheaderii4_gep_array313_reg <= main_preheaderii4_gep_array313;
		if (start == 1'b0 && ^(main_preheaderii4_gep_array313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_gep_array313_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep314 = add i32 %gep_int312, %gep_array313*/
		main_preheaderii4_gep314 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.preheader.i.i4*/
/*   %gep314 = add i32 %gep_int312, %gep_array313*/
	main_preheaderii4_gep314_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %322 = inttoptr i32 %gep314 to i32**/
		main_preheaderii4_322 = main_preheaderii4_gep314;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %322 = inttoptr i32 %gep314 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_preheaderii4_322_reg <= main_preheaderii4_322;
		if (start == 1'b0 && ^(main_preheaderii4_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_322_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %323 = load i32* %322, align 4, !tbaa !1*/
		main_preheaderii4_323 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %323 = load i32* %322, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_207)) begin
		main_preheaderii4_323_reg <= main_preheaderii4_323;
		if (start == 1'b0 && ^(main_preheaderii4_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_323_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %324 = xor i32 %323, %320*/
		main_preheaderii4_324 = (main_preheaderii4_323 ^ main_preheaderii4_320);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %324 = xor i32 %323, %320*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_207)) begin
		main_preheaderii4_324_reg <= main_preheaderii4_324;
		if (start == 1'b0 && ^(main_preheaderii4_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_324_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_int315 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_preheaderii4_gep_int315 = 0; end
		main_preheaderii4_gep_int315 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_int315 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_preheaderii4_gep_int315_reg <= main_preheaderii4_gep_int315;
		if (start == 1'b0 && ^(main_preheaderii4_gep_int315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_gep_int315_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep316 = add i32 %gep_int315, 960*/
		main_preheaderii4_gep316 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.preheader.i.i4*/
/*   %gep316 = add i32 %gep_int315, 960*/
	main_preheaderii4_gep316_reg = main_AddRoundKeyexit_crit_edgei_gep228_reg;
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_array317 = mul i32 %312, 4*/
		main_preheaderii4_gep_array317 = (main_preheaderii4_312_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_array317 = mul i32 %312, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_201)) begin
		main_preheaderii4_gep_array317_reg <= main_preheaderii4_gep_array317;
		if (start == 1'b0 && ^(main_preheaderii4_gep_array317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_gep_array317_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep318 = add i32 %gep316, %gep_array317*/
		main_preheaderii4_gep318 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.preheader.i.i4*/
/*   %gep318 = add i32 %gep316, %gep_array317*/
	main_preheaderii4_gep318_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %325 = inttoptr i32 %gep318 to i32**/
		main_preheaderii4_325 = main_preheaderii4_gep318;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %325 = inttoptr i32 %gep318 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_preheaderii4_325_reg <= main_preheaderii4_325;
		if (start == 1'b0 && ^(main_preheaderii4_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_325_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %326 = load i32* %325, align 4, !tbaa !1*/
		main_preheaderii4_326 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %326 = load i32* %325, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_210)) begin
		main_preheaderii4_326_reg <= main_preheaderii4_326;
		if (start == 1'b0 && ^(main_preheaderii4_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_326_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %327 = add nsw i32 %j.11.i.i3, 2*/
		main_preheaderii4_327 = main_signed_add_32_6;
end
always @(*) begin
/* main: %.preheader.i.i4*/
/*   %327 = add nsw i32 %j.11.i.i3, 2*/
	main_preheaderii4_327_reg = main_preheaderi4i_255_reg;
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_int319 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_preheaderii4_gep_int319 = 0; end
		main_preheaderii4_gep_int319 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_int319 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_preheaderii4_gep_int319_reg <= main_preheaderii4_gep_int319;
		if (start == 1'b0 && ^(main_preheaderii4_gep_int319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_gep_int319_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_array320 = mul i32 %327, 4*/
		main_preheaderii4_gep_array320 = (main_preheaderii4_327_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_array320 = mul i32 %327, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_201)) begin
		main_preheaderii4_gep_array320_reg <= main_preheaderii4_gep_array320;
		if (start == 1'b0 && ^(main_preheaderii4_gep_array320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_gep_array320_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep321 = add i32 %gep_int319, %gep_array320*/
		main_preheaderii4_gep321 = main_signed_add_32_4;
end
always @(*) begin
/* main: %.preheader.i.i4*/
/*   %gep321 = add i32 %gep_int319, %gep_array320*/
	main_preheaderii4_gep321_reg = main_AddRoundKeyexit_crit_edgei_239_reg;
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %328 = inttoptr i32 %gep321 to i32**/
		main_preheaderii4_328 = main_preheaderii4_gep321;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %328 = inttoptr i32 %gep321 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_preheaderii4_328_reg <= main_preheaderii4_328;
		if (start == 1'b0 && ^(main_preheaderii4_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_328_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %329 = load i32* %328, align 4, !tbaa !1*/
		main_preheaderii4_329 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %329 = load i32* %328, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_210)) begin
		main_preheaderii4_329_reg <= main_preheaderii4_329;
		if (start == 1'b0 && ^(main_preheaderii4_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_329_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %330 = xor i32 %329, %326*/
		main_preheaderii4_330 = (main_preheaderii4_329 ^ main_preheaderii4_326);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %330 = xor i32 %329, %326*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_210)) begin
		main_preheaderii4_330_reg <= main_preheaderii4_330;
		if (start == 1'b0 && ^(main_preheaderii4_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_330_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_int322 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_preheaderii4_gep_int322 = 0; end
		main_preheaderii4_gep_int322 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_int322 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_preheaderii4_gep_int322_reg <= main_preheaderii4_gep_int322;
		if (start == 1'b0 && ^(main_preheaderii4_gep_int322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_gep_int322_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep323 = add i32 %gep_int322, 1440*/
		main_preheaderii4_gep323 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.preheader.i.i4*/
/*   %gep323 = add i32 %gep_int322, 1440*/
	main_preheaderii4_gep323_reg = main_AddRoundKeyexit_crit_edgei_gep235_reg;
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_array324 = mul i32 %312, 4*/
		main_preheaderii4_gep_array324 = (main_preheaderii4_312_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_array324 = mul i32 %312, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_201)) begin
		main_preheaderii4_gep_array324_reg <= main_preheaderii4_gep_array324;
		if (start == 1'b0 && ^(main_preheaderii4_gep_array324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_gep_array324_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep325 = add i32 %gep323, %gep_array324*/
		main_preheaderii4_gep325 = main_signed_add_32_6;
end
always @(*) begin
/* main: %.preheader.i.i4*/
/*   %gep325 = add i32 %gep323, %gep_array324*/
	main_preheaderii4_gep325_reg = main_preheaderi4i_255_reg;
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %331 = inttoptr i32 %gep325 to i32**/
		main_preheaderii4_331 = main_preheaderii4_gep325;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %331 = inttoptr i32 %gep325 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_preheaderii4_331_reg <= main_preheaderii4_331;
		if (start == 1'b0 && ^(main_preheaderii4_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_331_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %332 = load i32* %331, align 4, !tbaa !1*/
		main_preheaderii4_332 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %332 = load i32* %331, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_213)) begin
		main_preheaderii4_332_reg <= main_preheaderii4_332;
		if (start == 1'b0 && ^(main_preheaderii4_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_332_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %333 = add nsw i32 %j.11.i.i3, 3*/
		main_preheaderii4_333 = main_signed_add_32_4;
end
always @(*) begin
/* main: %.preheader.i.i4*/
/*   %333 = add nsw i32 %j.11.i.i3, 3*/
	main_preheaderii4_333_reg = main_AddRoundKeyexit_crit_edgei_239_reg;
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_int326 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_preheaderii4_gep_int326 = 0; end
		main_preheaderii4_gep_int326 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_int326 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_preheaderii4_gep_int326_reg <= main_preheaderii4_gep_int326;
		if (start == 1'b0 && ^(main_preheaderii4_gep_int326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_gep_int326_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_array327 = mul i32 %333, 4*/
		main_preheaderii4_gep_array327 = (main_preheaderii4_333_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %gep_array327 = mul i32 %333, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_201)) begin
		main_preheaderii4_gep_array327_reg <= main_preheaderii4_gep_array327;
		if (start == 1'b0 && ^(main_preheaderii4_gep_array327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_gep_array327_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %gep328 = add i32 %gep_int326, %gep_array327*/
		main_preheaderii4_gep328 = main_signed_add_32_7;
end
always @(*) begin
/* main: %.preheader.i.i4*/
/*   %gep328 = add i32 %gep_int326, %gep_array327*/
	main_preheaderii4_gep328_reg = main_preheaderi4i_249_reg;
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %334 = inttoptr i32 %gep328 to i32**/
		main_preheaderii4_334 = main_preheaderii4_gep328;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %334 = inttoptr i32 %gep328 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_preheaderii4_334_reg <= main_preheaderii4_334;
		if (start == 1'b0 && ^(main_preheaderii4_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_334_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %335 = load i32* %334, align 4, !tbaa !1*/
		main_preheaderii4_335 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %335 = load i32* %334, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_213)) begin
		main_preheaderii4_335_reg <= main_preheaderii4_335;
		if (start == 1'b0 && ^(main_preheaderii4_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_335_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %336 = xor i32 %335, %332*/
		main_preheaderii4_336 = (main_preheaderii4_335 ^ main_preheaderii4_332);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %336 = xor i32 %335, %332*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_213)) begin
		main_preheaderii4_336_reg <= main_preheaderii4_336;
		if (start == 1'b0 && ^(main_preheaderii4_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_336_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %exitcond33 = icmp ne i32 %321, 4*/
		main_preheaderii4_exitcond33 = (main_preheaderii4_321 != 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %exitcond33 = icmp ne i32 %321, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_preheaderii4_exitcond33_reg <= main_preheaderii4_exitcond33;
		if (start == 1'b0 && ^(main_preheaderii4_exitcond33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_exitcond33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %337 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
		main_lrph12ipreheader_337 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %337 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_217)) begin
		main_lrph12ipreheader_337_reg <= main_lrph12ipreheader_337;
		if (start == 1'b0 && ^(main_lrph12ipreheader_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_337_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %338 = and i32 %337, 15*/
		main_lrph12ipreheader_338 = (main_lrph12ipreheader_337 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %338 = and i32 %337, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_217)) begin
		main_lrph12ipreheader_338_reg <= main_lrph12ipreheader_338;
		if (start == 1'b0 && ^(main_lrph12ipreheader_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_338_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %339 = ashr i32 %337, 4*/
		main_lrph12ipreheader_339 = ($signed(main_lrph12ipreheader_337) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %339 = ashr i32 %337, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_217)) begin
		main_lrph12ipreheader_339_reg <= main_lrph12ipreheader_339;
		if (start == 1'b0 && ^(main_lrph12ipreheader_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_339_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int329 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12ipreheader_gep_int329 = 0; end
		main_lrph12ipreheader_gep_int329 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int329 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		main_lrph12ipreheader_gep_int329_reg <= main_lrph12ipreheader_gep_int329;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_int329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_int329_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array330 = mul i32 %339, 64*/
		main_lrph12ipreheader_gep_array330 = (main_lrph12ipreheader_339 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array330 = mul i32 %339, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_217)) begin
		main_lrph12ipreheader_gep_array330_reg <= main_lrph12ipreheader_gep_array330;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array330_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep331 = add i32 %gep_int329, %gep_array330*/
		main_lrph12ipreheader_gep331 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep331 = add i32 %gep_int329, %gep_array330*/
	main_lrph12ipreheader_gep331_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array332 = mul i32 %338, 4*/
		main_lrph12ipreheader_gep_array332 = (main_lrph12ipreheader_338 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array332 = mul i32 %338, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_217)) begin
		main_lrph12ipreheader_gep_array332_reg <= main_lrph12ipreheader_gep_array332;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array332_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep333 = add i32 %gep331, %gep_array332*/
		main_lrph12ipreheader_gep333 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep333 = add i32 %gep331, %gep_array332*/
	main_lrph12ipreheader_gep333_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %340 = inttoptr i32 %gep333 to i32**/
		main_lrph12ipreheader_340 = main_lrph12ipreheader_gep333;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %340 = inttoptr i32 %gep333 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_lrph12ipreheader_340_reg <= main_lrph12ipreheader_340;
		if (start == 1'b0 && ^(main_lrph12ipreheader_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_340_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %341 = load i32* %340, align 4, !tbaa !1*/
		main_lrph12ipreheader_341 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %341 = load i32* %340, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_lrph12ipreheader_341_reg <= main_lrph12ipreheader_341;
		if (start == 1'b0 && ^(main_lrph12ipreheader_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_341_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %342 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
		main_lrph12ipreheader_342 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %342 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_217)) begin
		main_lrph12ipreheader_342_reg <= main_lrph12ipreheader_342;
		if (start == 1'b0 && ^(main_lrph12ipreheader_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_342_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %343 = and i32 %342, 15*/
		main_lrph12ipreheader_343 = (main_lrph12ipreheader_342 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %343 = and i32 %342, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_217)) begin
		main_lrph12ipreheader_343_reg <= main_lrph12ipreheader_343;
		if (start == 1'b0 && ^(main_lrph12ipreheader_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_343_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %344 = ashr i32 %342, 4*/
		main_lrph12ipreheader_344 = ($signed(main_lrph12ipreheader_342) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %344 = ashr i32 %342, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_217)) begin
		main_lrph12ipreheader_344_reg <= main_lrph12ipreheader_344;
		if (start == 1'b0 && ^(main_lrph12ipreheader_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_344_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int334 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12ipreheader_gep_int334 = 0; end
		main_lrph12ipreheader_gep_int334 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int334 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		main_lrph12ipreheader_gep_int334_reg <= main_lrph12ipreheader_gep_int334;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_int334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_int334_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array335 = mul i32 %344, 64*/
		main_lrph12ipreheader_gep_array335 = (main_lrph12ipreheader_344 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array335 = mul i32 %344, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_217)) begin
		main_lrph12ipreheader_gep_array335_reg <= main_lrph12ipreheader_gep_array335;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array335_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep336 = add i32 %gep_int334, %gep_array335*/
		main_lrph12ipreheader_gep336 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep336 = add i32 %gep_int334, %gep_array335*/
	main_lrph12ipreheader_gep336_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array337 = mul i32 %343, 4*/
		main_lrph12ipreheader_gep_array337 = (main_lrph12ipreheader_343 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array337 = mul i32 %343, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_217)) begin
		main_lrph12ipreheader_gep_array337_reg <= main_lrph12ipreheader_gep_array337;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array337_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep338 = add i32 %gep336, %gep_array337*/
		main_lrph12ipreheader_gep338 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep338 = add i32 %gep336, %gep_array337*/
	main_lrph12ipreheader_gep338_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %345 = inttoptr i32 %gep338 to i32**/
		main_lrph12ipreheader_345 = main_lrph12ipreheader_gep338;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %345 = inttoptr i32 %gep338 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_lrph12ipreheader_345_reg <= main_lrph12ipreheader_345;
		if (start == 1'b0 && ^(main_lrph12ipreheader_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_345_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %346 = load i32* %345, align 4, !tbaa !1*/
		main_lrph12ipreheader_346 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %346 = load i32* %345, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_lrph12ipreheader_346_reg <= main_lrph12ipreheader_346;
		if (start == 1'b0 && ^(main_lrph12ipreheader_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_346_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %347 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
		main_lrph12ipreheader_347 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %347 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_lrph12ipreheader_347_reg <= main_lrph12ipreheader_347;
		if (start == 1'b0 && ^(main_lrph12ipreheader_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_347_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %348 = and i32 %347, 15*/
		main_lrph12ipreheader_348 = (main_lrph12ipreheader_347 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %348 = and i32 %347, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_lrph12ipreheader_348_reg <= main_lrph12ipreheader_348;
		if (start == 1'b0 && ^(main_lrph12ipreheader_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_348_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %349 = ashr i32 %347, 4*/
		main_lrph12ipreheader_349 = ($signed(main_lrph12ipreheader_347) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %349 = ashr i32 %347, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_lrph12ipreheader_349_reg <= main_lrph12ipreheader_349;
		if (start == 1'b0 && ^(main_lrph12ipreheader_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_349_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int339 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12ipreheader_gep_int339 = 0; end
		main_lrph12ipreheader_gep_int339 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int339 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		main_lrph12ipreheader_gep_int339_reg <= main_lrph12ipreheader_gep_int339;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_int339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_int339_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array340 = mul i32 %349, 64*/
		main_lrph12ipreheader_gep_array340 = (main_lrph12ipreheader_349 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array340 = mul i32 %349, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_lrph12ipreheader_gep_array340_reg <= main_lrph12ipreheader_gep_array340;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array340_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep341 = add i32 %gep_int339, %gep_array340*/
		main_lrph12ipreheader_gep341 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep341 = add i32 %gep_int339, %gep_array340*/
	main_lrph12ipreheader_gep341_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array342 = mul i32 %348, 4*/
		main_lrph12ipreheader_gep_array342 = (main_lrph12ipreheader_348 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array342 = mul i32 %348, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_lrph12ipreheader_gep_array342_reg <= main_lrph12ipreheader_gep_array342;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array342_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep343 = add i32 %gep341, %gep_array342*/
		main_lrph12ipreheader_gep343 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep343 = add i32 %gep341, %gep_array342*/
	main_lrph12ipreheader_gep343_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %350 = inttoptr i32 %gep343 to i32**/
		main_lrph12ipreheader_350 = main_lrph12ipreheader_gep343;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %350 = inttoptr i32 %gep343 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_lrph12ipreheader_350_reg <= main_lrph12ipreheader_350;
		if (start == 1'b0 && ^(main_lrph12ipreheader_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_350_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %351 = load i32* %350, align 4, !tbaa !1*/
		main_lrph12ipreheader_351 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %351 = load i32* %350, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_225)) begin
		main_lrph12ipreheader_351_reg <= main_lrph12ipreheader_351;
		if (start == 1'b0 && ^(main_lrph12ipreheader_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_351_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %352 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
		main_lrph12ipreheader_352 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %352 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_lrph12ipreheader_352_reg <= main_lrph12ipreheader_352;
		if (start == 1'b0 && ^(main_lrph12ipreheader_352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_352_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %353 = and i32 %352, 15*/
		main_lrph12ipreheader_353 = (main_lrph12ipreheader_352 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %353 = and i32 %352, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_lrph12ipreheader_353_reg <= main_lrph12ipreheader_353;
		if (start == 1'b0 && ^(main_lrph12ipreheader_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_353_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %354 = ashr i32 %352, 4*/
		main_lrph12ipreheader_354 = ($signed(main_lrph12ipreheader_352) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %354 = ashr i32 %352, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_lrph12ipreheader_354_reg <= main_lrph12ipreheader_354;
		if (start == 1'b0 && ^(main_lrph12ipreheader_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_354_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int344 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12ipreheader_gep_int344 = 0; end
		main_lrph12ipreheader_gep_int344 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int344 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		main_lrph12ipreheader_gep_int344_reg <= main_lrph12ipreheader_gep_int344;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_int344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_int344_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array345 = mul i32 %354, 64*/
		main_lrph12ipreheader_gep_array345 = (main_lrph12ipreheader_354 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array345 = mul i32 %354, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_lrph12ipreheader_gep_array345_reg <= main_lrph12ipreheader_gep_array345;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array345_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep346 = add i32 %gep_int344, %gep_array345*/
		main_lrph12ipreheader_gep346 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep346 = add i32 %gep_int344, %gep_array345*/
	main_lrph12ipreheader_gep346_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array347 = mul i32 %353, 4*/
		main_lrph12ipreheader_gep_array347 = (main_lrph12ipreheader_353 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array347 = mul i32 %353, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_lrph12ipreheader_gep_array347_reg <= main_lrph12ipreheader_gep_array347;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array347_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep348 = add i32 %gep346, %gep_array347*/
		main_lrph12ipreheader_gep348 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep348 = add i32 %gep346, %gep_array347*/
	main_lrph12ipreheader_gep348_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %355 = inttoptr i32 %gep348 to i32**/
		main_lrph12ipreheader_355 = main_lrph12ipreheader_gep348;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %355 = inttoptr i32 %gep348 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_lrph12ipreheader_355_reg <= main_lrph12ipreheader_355;
		if (start == 1'b0 && ^(main_lrph12ipreheader_355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_355_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %356 = load i32* %355, align 4, !tbaa !1*/
		main_lrph12ipreheader_356 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %356 = load i32* %355, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_227)) begin
		main_lrph12ipreheader_356_reg <= main_lrph12ipreheader_356;
		if (start == 1'b0 && ^(main_lrph12ipreheader_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_356_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %357 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
		main_lrph12ipreheader_357 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %357 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_lrph12ipreheader_357_reg <= main_lrph12ipreheader_357;
		if (start == 1'b0 && ^(main_lrph12ipreheader_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_357_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %358 = and i32 %357, 15*/
		main_lrph12ipreheader_358 = (main_lrph12ipreheader_357 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %358 = and i32 %357, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_lrph12ipreheader_358_reg <= main_lrph12ipreheader_358;
		if (start == 1'b0 && ^(main_lrph12ipreheader_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_358_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %359 = ashr i32 %357, 4*/
		main_lrph12ipreheader_359 = ($signed(main_lrph12ipreheader_357) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %359 = ashr i32 %357, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_lrph12ipreheader_359_reg <= main_lrph12ipreheader_359;
		if (start == 1'b0 && ^(main_lrph12ipreheader_359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_359_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int349 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12ipreheader_gep_int349 = 0; end
		main_lrph12ipreheader_gep_int349 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int349 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		main_lrph12ipreheader_gep_int349_reg <= main_lrph12ipreheader_gep_int349;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_int349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_int349_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array350 = mul i32 %359, 64*/
		main_lrph12ipreheader_gep_array350 = (main_lrph12ipreheader_359 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array350 = mul i32 %359, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_lrph12ipreheader_gep_array350_reg <= main_lrph12ipreheader_gep_array350;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array350_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep351 = add i32 %gep_int349, %gep_array350*/
		main_lrph12ipreheader_gep351 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep351 = add i32 %gep_int349, %gep_array350*/
	main_lrph12ipreheader_gep351_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array352 = mul i32 %358, 4*/
		main_lrph12ipreheader_gep_array352 = (main_lrph12ipreheader_358 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array352 = mul i32 %358, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_lrph12ipreheader_gep_array352_reg <= main_lrph12ipreheader_gep_array352;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array352_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep353 = add i32 %gep351, %gep_array352*/
		main_lrph12ipreheader_gep353 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep353 = add i32 %gep351, %gep_array352*/
	main_lrph12ipreheader_gep353_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %360 = inttoptr i32 %gep353 to i32**/
		main_lrph12ipreheader_360 = main_lrph12ipreheader_gep353;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %360 = inttoptr i32 %gep353 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_lrph12ipreheader_360_reg <= main_lrph12ipreheader_360;
		if (start == 1'b0 && ^(main_lrph12ipreheader_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_360_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %361 = load i32* %360, align 4, !tbaa !1*/
		main_lrph12ipreheader_361 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %361 = load i32* %360, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_229)) begin
		main_lrph12ipreheader_361_reg <= main_lrph12ipreheader_361;
		if (start == 1'b0 && ^(main_lrph12ipreheader_361) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_361_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %362 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
		main_lrph12ipreheader_362 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %362 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_lrph12ipreheader_362_reg <= main_lrph12ipreheader_362;
		if (start == 1'b0 && ^(main_lrph12ipreheader_362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_362_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %363 = and i32 %362, 15*/
		main_lrph12ipreheader_363 = (main_lrph12ipreheader_362 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %363 = and i32 %362, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_lrph12ipreheader_363_reg <= main_lrph12ipreheader_363;
		if (start == 1'b0 && ^(main_lrph12ipreheader_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_363_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %364 = ashr i32 %362, 4*/
		main_lrph12ipreheader_364 = ($signed(main_lrph12ipreheader_362) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %364 = ashr i32 %362, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_lrph12ipreheader_364_reg <= main_lrph12ipreheader_364;
		if (start == 1'b0 && ^(main_lrph12ipreheader_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_364_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int354 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12ipreheader_gep_int354 = 0; end
		main_lrph12ipreheader_gep_int354 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int354 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		main_lrph12ipreheader_gep_int354_reg <= main_lrph12ipreheader_gep_int354;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_int354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_int354_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array355 = mul i32 %364, 64*/
		main_lrph12ipreheader_gep_array355 = (main_lrph12ipreheader_364 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array355 = mul i32 %364, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_lrph12ipreheader_gep_array355_reg <= main_lrph12ipreheader_gep_array355;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array355_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep356 = add i32 %gep_int354, %gep_array355*/
		main_lrph12ipreheader_gep356 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep356 = add i32 %gep_int354, %gep_array355*/
	main_lrph12ipreheader_gep356_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array357 = mul i32 %363, 4*/
		main_lrph12ipreheader_gep_array357 = (main_lrph12ipreheader_363 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array357 = mul i32 %363, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_lrph12ipreheader_gep_array357_reg <= main_lrph12ipreheader_gep_array357;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array357_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep358 = add i32 %gep356, %gep_array357*/
		main_lrph12ipreheader_gep358 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep358 = add i32 %gep356, %gep_array357*/
	main_lrph12ipreheader_gep358_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %365 = inttoptr i32 %gep358 to i32**/
		main_lrph12ipreheader_365 = main_lrph12ipreheader_gep358;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %365 = inttoptr i32 %gep358 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_lrph12ipreheader_365_reg <= main_lrph12ipreheader_365;
		if (start == 1'b0 && ^(main_lrph12ipreheader_365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_365_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %366 = load i32* %365, align 4, !tbaa !1*/
		main_lrph12ipreheader_366 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %366 = load i32* %365, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_229)) begin
		main_lrph12ipreheader_366_reg <= main_lrph12ipreheader_366;
		if (start == 1'b0 && ^(main_lrph12ipreheader_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_366_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %367 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
		main_lrph12ipreheader_367 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %367 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_lrph12ipreheader_367_reg <= main_lrph12ipreheader_367;
		if (start == 1'b0 && ^(main_lrph12ipreheader_367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_367_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %368 = and i32 %367, 15*/
		main_lrph12ipreheader_368 = (main_lrph12ipreheader_367 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %368 = and i32 %367, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_lrph12ipreheader_368_reg <= main_lrph12ipreheader_368;
		if (start == 1'b0 && ^(main_lrph12ipreheader_368) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_368_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %369 = ashr i32 %367, 4*/
		main_lrph12ipreheader_369 = ($signed(main_lrph12ipreheader_367) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %369 = ashr i32 %367, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_lrph12ipreheader_369_reg <= main_lrph12ipreheader_369;
		if (start == 1'b0 && ^(main_lrph12ipreheader_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_369_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int359 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12ipreheader_gep_int359 = 0; end
		main_lrph12ipreheader_gep_int359 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int359 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		main_lrph12ipreheader_gep_int359_reg <= main_lrph12ipreheader_gep_int359;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_int359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_int359_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array360 = mul i32 %369, 64*/
		main_lrph12ipreheader_gep_array360 = (main_lrph12ipreheader_369 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array360 = mul i32 %369, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_lrph12ipreheader_gep_array360_reg <= main_lrph12ipreheader_gep_array360;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array360_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep361 = add i32 %gep_int359, %gep_array360*/
		main_lrph12ipreheader_gep361 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep361 = add i32 %gep_int359, %gep_array360*/
	main_lrph12ipreheader_gep361_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array362 = mul i32 %368, 4*/
		main_lrph12ipreheader_gep_array362 = (main_lrph12ipreheader_368 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array362 = mul i32 %368, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_lrph12ipreheader_gep_array362_reg <= main_lrph12ipreheader_gep_array362;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array362_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep363 = add i32 %gep361, %gep_array362*/
		main_lrph12ipreheader_gep363 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep363 = add i32 %gep361, %gep_array362*/
	main_lrph12ipreheader_gep363_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %370 = inttoptr i32 %gep363 to i32**/
		main_lrph12ipreheader_370 = main_lrph12ipreheader_gep363;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %370 = inttoptr i32 %gep363 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_lrph12ipreheader_370_reg <= main_lrph12ipreheader_370;
		if (start == 1'b0 && ^(main_lrph12ipreheader_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_370_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %371 = load i32* %370, align 4, !tbaa !1*/
		main_lrph12ipreheader_371 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %371 = load i32* %370, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_231)) begin
		main_lrph12ipreheader_371_reg <= main_lrph12ipreheader_371;
		if (start == 1'b0 && ^(main_lrph12ipreheader_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_371_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %372 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
		main_lrph12ipreheader_372 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %372 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_lrph12ipreheader_372_reg <= main_lrph12ipreheader_372;
		if (start == 1'b0 && ^(main_lrph12ipreheader_372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_372_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %373 = and i32 %372, 15*/
		main_lrph12ipreheader_373 = (main_lrph12ipreheader_372 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %373 = and i32 %372, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_lrph12ipreheader_373_reg <= main_lrph12ipreheader_373;
		if (start == 1'b0 && ^(main_lrph12ipreheader_373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_373_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %374 = ashr i32 %372, 4*/
		main_lrph12ipreheader_374 = ($signed(main_lrph12ipreheader_372) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %374 = ashr i32 %372, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_lrph12ipreheader_374_reg <= main_lrph12ipreheader_374;
		if (start == 1'b0 && ^(main_lrph12ipreheader_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_374_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int364 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12ipreheader_gep_int364 = 0; end
		main_lrph12ipreheader_gep_int364 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int364 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		main_lrph12ipreheader_gep_int364_reg <= main_lrph12ipreheader_gep_int364;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_int364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_int364_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array365 = mul i32 %374, 64*/
		main_lrph12ipreheader_gep_array365 = (main_lrph12ipreheader_374 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array365 = mul i32 %374, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_lrph12ipreheader_gep_array365_reg <= main_lrph12ipreheader_gep_array365;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array365_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep366 = add i32 %gep_int364, %gep_array365*/
		main_lrph12ipreheader_gep366 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep366 = add i32 %gep_int364, %gep_array365*/
	main_lrph12ipreheader_gep366_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array367 = mul i32 %373, 4*/
		main_lrph12ipreheader_gep_array367 = (main_lrph12ipreheader_373 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array367 = mul i32 %373, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_lrph12ipreheader_gep_array367_reg <= main_lrph12ipreheader_gep_array367;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array367_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep368 = add i32 %gep366, %gep_array367*/
		main_lrph12ipreheader_gep368 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep368 = add i32 %gep366, %gep_array367*/
	main_lrph12ipreheader_gep368_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %375 = inttoptr i32 %gep368 to i32**/
		main_lrph12ipreheader_375 = main_lrph12ipreheader_gep368;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %375 = inttoptr i32 %gep368 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_lrph12ipreheader_375_reg <= main_lrph12ipreheader_375;
		if (start == 1'b0 && ^(main_lrph12ipreheader_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_375_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %376 = load i32* %375, align 4, !tbaa !1*/
		main_lrph12ipreheader_376 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %376 = load i32* %375, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_231)) begin
		main_lrph12ipreheader_376_reg <= main_lrph12ipreheader_376;
		if (start == 1'b0 && ^(main_lrph12ipreheader_376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_376_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %377 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
		main_lrph12ipreheader_377 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %377 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_lrph12ipreheader_377_reg <= main_lrph12ipreheader_377;
		if (start == 1'b0 && ^(main_lrph12ipreheader_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_377_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %378 = and i32 %377, 15*/
		main_lrph12ipreheader_378 = (main_lrph12ipreheader_377 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %378 = and i32 %377, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_lrph12ipreheader_378_reg <= main_lrph12ipreheader_378;
		if (start == 1'b0 && ^(main_lrph12ipreheader_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_378_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %379 = ashr i32 %377, 4*/
		main_lrph12ipreheader_379 = ($signed(main_lrph12ipreheader_377) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %379 = ashr i32 %377, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_lrph12ipreheader_379_reg <= main_lrph12ipreheader_379;
		if (start == 1'b0 && ^(main_lrph12ipreheader_379) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_379_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int369 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12ipreheader_gep_int369 = 0; end
		main_lrph12ipreheader_gep_int369 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int369 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		main_lrph12ipreheader_gep_int369_reg <= main_lrph12ipreheader_gep_int369;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_int369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_int369_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array370 = mul i32 %379, 64*/
		main_lrph12ipreheader_gep_array370 = (main_lrph12ipreheader_379 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array370 = mul i32 %379, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_lrph12ipreheader_gep_array370_reg <= main_lrph12ipreheader_gep_array370;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array370_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep371 = add i32 %gep_int369, %gep_array370*/
		main_lrph12ipreheader_gep371 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep371 = add i32 %gep_int369, %gep_array370*/
	main_lrph12ipreheader_gep371_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array372 = mul i32 %378, 4*/
		main_lrph12ipreheader_gep_array372 = (main_lrph12ipreheader_378 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array372 = mul i32 %378, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_lrph12ipreheader_gep_array372_reg <= main_lrph12ipreheader_gep_array372;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array372_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep373 = add i32 %gep371, %gep_array372*/
		main_lrph12ipreheader_gep373 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep373 = add i32 %gep371, %gep_array372*/
	main_lrph12ipreheader_gep373_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %380 = inttoptr i32 %gep373 to i32**/
		main_lrph12ipreheader_380 = main_lrph12ipreheader_gep373;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %380 = inttoptr i32 %gep373 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_lrph12ipreheader_380_reg <= main_lrph12ipreheader_380;
		if (start == 1'b0 && ^(main_lrph12ipreheader_380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_380_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %381 = load i32* %380, align 4, !tbaa !1*/
		main_lrph12ipreheader_381 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %381 = load i32* %380, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_233)) begin
		main_lrph12ipreheader_381_reg <= main_lrph12ipreheader_381;
		if (start == 1'b0 && ^(main_lrph12ipreheader_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_381_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %382 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
		main_lrph12ipreheader_382 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %382 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_lrph12ipreheader_382_reg <= main_lrph12ipreheader_382;
		if (start == 1'b0 && ^(main_lrph12ipreheader_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_382_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %383 = and i32 %382, 15*/
		main_lrph12ipreheader_383 = (main_lrph12ipreheader_382 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %383 = and i32 %382, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_lrph12ipreheader_383_reg <= main_lrph12ipreheader_383;
		if (start == 1'b0 && ^(main_lrph12ipreheader_383) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_383_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %384 = ashr i32 %382, 4*/
		main_lrph12ipreheader_384 = ($signed(main_lrph12ipreheader_382) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %384 = ashr i32 %382, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_lrph12ipreheader_384_reg <= main_lrph12ipreheader_384;
		if (start == 1'b0 && ^(main_lrph12ipreheader_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_384_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int374 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12ipreheader_gep_int374 = 0; end
		main_lrph12ipreheader_gep_int374 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int374 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		main_lrph12ipreheader_gep_int374_reg <= main_lrph12ipreheader_gep_int374;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_int374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_int374_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array375 = mul i32 %384, 64*/
		main_lrph12ipreheader_gep_array375 = (main_lrph12ipreheader_384 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array375 = mul i32 %384, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_lrph12ipreheader_gep_array375_reg <= main_lrph12ipreheader_gep_array375;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array375_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep376 = add i32 %gep_int374, %gep_array375*/
		main_lrph12ipreheader_gep376 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep376 = add i32 %gep_int374, %gep_array375*/
	main_lrph12ipreheader_gep376_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array377 = mul i32 %383, 4*/
		main_lrph12ipreheader_gep_array377 = (main_lrph12ipreheader_383 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array377 = mul i32 %383, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_lrph12ipreheader_gep_array377_reg <= main_lrph12ipreheader_gep_array377;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array377_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep378 = add i32 %gep376, %gep_array377*/
		main_lrph12ipreheader_gep378 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep378 = add i32 %gep376, %gep_array377*/
	main_lrph12ipreheader_gep378_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %385 = inttoptr i32 %gep378 to i32**/
		main_lrph12ipreheader_385 = main_lrph12ipreheader_gep378;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %385 = inttoptr i32 %gep378 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_lrph12ipreheader_385_reg <= main_lrph12ipreheader_385;
		if (start == 1'b0 && ^(main_lrph12ipreheader_385) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_385_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %386 = load i32* %385, align 4, !tbaa !1*/
		main_lrph12ipreheader_386 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %386 = load i32* %385, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_233)) begin
		main_lrph12ipreheader_386_reg <= main_lrph12ipreheader_386;
		if (start == 1'b0 && ^(main_lrph12ipreheader_386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_386_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %387 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
		main_lrph12ipreheader_387 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %387 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_lrph12ipreheader_387_reg <= main_lrph12ipreheader_387;
		if (start == 1'b0 && ^(main_lrph12ipreheader_387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_387_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %388 = and i32 %387, 15*/
		main_lrph12ipreheader_388 = (main_lrph12ipreheader_387 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %388 = and i32 %387, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_lrph12ipreheader_388_reg <= main_lrph12ipreheader_388;
		if (start == 1'b0 && ^(main_lrph12ipreheader_388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_388_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %389 = ashr i32 %387, 4*/
		main_lrph12ipreheader_389 = ($signed(main_lrph12ipreheader_387) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %389 = ashr i32 %387, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_lrph12ipreheader_389_reg <= main_lrph12ipreheader_389;
		if (start == 1'b0 && ^(main_lrph12ipreheader_389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_389_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int379 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12ipreheader_gep_int379 = 0; end
		main_lrph12ipreheader_gep_int379 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int379 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		main_lrph12ipreheader_gep_int379_reg <= main_lrph12ipreheader_gep_int379;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_int379) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_int379_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array380 = mul i32 %389, 64*/
		main_lrph12ipreheader_gep_array380 = (main_lrph12ipreheader_389 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array380 = mul i32 %389, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_lrph12ipreheader_gep_array380_reg <= main_lrph12ipreheader_gep_array380;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array380_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep381 = add i32 %gep_int379, %gep_array380*/
		main_lrph12ipreheader_gep381 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep381 = add i32 %gep_int379, %gep_array380*/
	main_lrph12ipreheader_gep381_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array382 = mul i32 %388, 4*/
		main_lrph12ipreheader_gep_array382 = (main_lrph12ipreheader_388 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array382 = mul i32 %388, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_lrph12ipreheader_gep_array382_reg <= main_lrph12ipreheader_gep_array382;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array382_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep383 = add i32 %gep381, %gep_array382*/
		main_lrph12ipreheader_gep383 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep383 = add i32 %gep381, %gep_array382*/
	main_lrph12ipreheader_gep383_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %390 = inttoptr i32 %gep383 to i32**/
		main_lrph12ipreheader_390 = main_lrph12ipreheader_gep383;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %390 = inttoptr i32 %gep383 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_lrph12ipreheader_390_reg <= main_lrph12ipreheader_390;
		if (start == 1'b0 && ^(main_lrph12ipreheader_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_390_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %391 = load i32* %390, align 4, !tbaa !1*/
		main_lrph12ipreheader_391 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %391 = load i32* %390, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_235)) begin
		main_lrph12ipreheader_391_reg <= main_lrph12ipreheader_391;
		if (start == 1'b0 && ^(main_lrph12ipreheader_391) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_391_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %392 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
		main_lrph12ipreheader_392 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %392 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_lrph12ipreheader_392_reg <= main_lrph12ipreheader_392;
		if (start == 1'b0 && ^(main_lrph12ipreheader_392) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_392_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %393 = and i32 %392, 15*/
		main_lrph12ipreheader_393 = (main_lrph12ipreheader_392 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %393 = and i32 %392, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_lrph12ipreheader_393_reg <= main_lrph12ipreheader_393;
		if (start == 1'b0 && ^(main_lrph12ipreheader_393) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_393_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %394 = ashr i32 %392, 4*/
		main_lrph12ipreheader_394 = ($signed(main_lrph12ipreheader_392) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %394 = ashr i32 %392, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_lrph12ipreheader_394_reg <= main_lrph12ipreheader_394;
		if (start == 1'b0 && ^(main_lrph12ipreheader_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_394_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int384 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12ipreheader_gep_int384 = 0; end
		main_lrph12ipreheader_gep_int384 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int384 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		main_lrph12ipreheader_gep_int384_reg <= main_lrph12ipreheader_gep_int384;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_int384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_int384_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array385 = mul i32 %394, 64*/
		main_lrph12ipreheader_gep_array385 = (main_lrph12ipreheader_394 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array385 = mul i32 %394, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_lrph12ipreheader_gep_array385_reg <= main_lrph12ipreheader_gep_array385;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array385) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array385_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep386 = add i32 %gep_int384, %gep_array385*/
		main_lrph12ipreheader_gep386 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep386 = add i32 %gep_int384, %gep_array385*/
	main_lrph12ipreheader_gep386_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array387 = mul i32 %393, 4*/
		main_lrph12ipreheader_gep_array387 = (main_lrph12ipreheader_393 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array387 = mul i32 %393, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_lrph12ipreheader_gep_array387_reg <= main_lrph12ipreheader_gep_array387;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array387_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep388 = add i32 %gep386, %gep_array387*/
		main_lrph12ipreheader_gep388 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep388 = add i32 %gep386, %gep_array387*/
	main_lrph12ipreheader_gep388_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %395 = inttoptr i32 %gep388 to i32**/
		main_lrph12ipreheader_395 = main_lrph12ipreheader_gep388;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %395 = inttoptr i32 %gep388 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_lrph12ipreheader_395_reg <= main_lrph12ipreheader_395;
		if (start == 1'b0 && ^(main_lrph12ipreheader_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_395_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %396 = load i32* %395, align 4, !tbaa !1*/
		main_lrph12ipreheader_396 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %396 = load i32* %395, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_237)) begin
		main_lrph12ipreheader_396_reg <= main_lrph12ipreheader_396;
		if (start == 1'b0 && ^(main_lrph12ipreheader_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_396_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %397 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
		main_lrph12ipreheader_397 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %397 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_lrph12ipreheader_397_reg <= main_lrph12ipreheader_397;
		if (start == 1'b0 && ^(main_lrph12ipreheader_397) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_397_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %398 = and i32 %397, 15*/
		main_lrph12ipreheader_398 = (main_lrph12ipreheader_397 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %398 = and i32 %397, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_lrph12ipreheader_398_reg <= main_lrph12ipreheader_398;
		if (start == 1'b0 && ^(main_lrph12ipreheader_398) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_398_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %399 = ashr i32 %397, 4*/
		main_lrph12ipreheader_399 = ($signed(main_lrph12ipreheader_397) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %399 = ashr i32 %397, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_lrph12ipreheader_399_reg <= main_lrph12ipreheader_399;
		if (start == 1'b0 && ^(main_lrph12ipreheader_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_399_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int389 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12ipreheader_gep_int389 = 0; end
		main_lrph12ipreheader_gep_int389 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int389 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		main_lrph12ipreheader_gep_int389_reg <= main_lrph12ipreheader_gep_int389;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_int389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_int389_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array390 = mul i32 %399, 64*/
		main_lrph12ipreheader_gep_array390 = (main_lrph12ipreheader_399 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array390 = mul i32 %399, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_lrph12ipreheader_gep_array390_reg <= main_lrph12ipreheader_gep_array390;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array390_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep391 = add i32 %gep_int389, %gep_array390*/
		main_lrph12ipreheader_gep391 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep391 = add i32 %gep_int389, %gep_array390*/
	main_lrph12ipreheader_gep391_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array392 = mul i32 %398, 4*/
		main_lrph12ipreheader_gep_array392 = (main_lrph12ipreheader_398 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array392 = mul i32 %398, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_lrph12ipreheader_gep_array392_reg <= main_lrph12ipreheader_gep_array392;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array392) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array392_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep393 = add i32 %gep391, %gep_array392*/
		main_lrph12ipreheader_gep393 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep393 = add i32 %gep391, %gep_array392*/
	main_lrph12ipreheader_gep393_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %400 = inttoptr i32 %gep393 to i32**/
		main_lrph12ipreheader_400 = main_lrph12ipreheader_gep393;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %400 = inttoptr i32 %gep393 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_lrph12ipreheader_400_reg <= main_lrph12ipreheader_400;
		if (start == 1'b0 && ^(main_lrph12ipreheader_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_400_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %401 = load i32* %400, align 4, !tbaa !1*/
		main_lrph12ipreheader_401 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %401 = load i32* %400, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_239)) begin
		main_lrph12ipreheader_401_reg <= main_lrph12ipreheader_401;
		if (start == 1'b0 && ^(main_lrph12ipreheader_401) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_401_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %402 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
		main_lrph12ipreheader_402 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %402 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_lrph12ipreheader_402_reg <= main_lrph12ipreheader_402;
		if (start == 1'b0 && ^(main_lrph12ipreheader_402) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_402_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %403 = and i32 %402, 15*/
		main_lrph12ipreheader_403 = (main_lrph12ipreheader_402 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %403 = and i32 %402, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_lrph12ipreheader_403_reg <= main_lrph12ipreheader_403;
		if (start == 1'b0 && ^(main_lrph12ipreheader_403) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_403_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %404 = ashr i32 %402, 4*/
		main_lrph12ipreheader_404 = ($signed(main_lrph12ipreheader_402) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %404 = ashr i32 %402, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_lrph12ipreheader_404_reg <= main_lrph12ipreheader_404;
		if (start == 1'b0 && ^(main_lrph12ipreheader_404) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_404_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int394 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12ipreheader_gep_int394 = 0; end
		main_lrph12ipreheader_gep_int394 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int394 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		main_lrph12ipreheader_gep_int394_reg <= main_lrph12ipreheader_gep_int394;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_int394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_int394_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array395 = mul i32 %404, 64*/
		main_lrph12ipreheader_gep_array395 = (main_lrph12ipreheader_404 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array395 = mul i32 %404, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_lrph12ipreheader_gep_array395_reg <= main_lrph12ipreheader_gep_array395;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array395_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep396 = add i32 %gep_int394, %gep_array395*/
		main_lrph12ipreheader_gep396 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep396 = add i32 %gep_int394, %gep_array395*/
	main_lrph12ipreheader_gep396_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array397 = mul i32 %403, 4*/
		main_lrph12ipreheader_gep_array397 = (main_lrph12ipreheader_403 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array397 = mul i32 %403, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_lrph12ipreheader_gep_array397_reg <= main_lrph12ipreheader_gep_array397;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array397) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array397_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep398 = add i32 %gep396, %gep_array397*/
		main_lrph12ipreheader_gep398 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep398 = add i32 %gep396, %gep_array397*/
	main_lrph12ipreheader_gep398_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %405 = inttoptr i32 %gep398 to i32**/
		main_lrph12ipreheader_405 = main_lrph12ipreheader_gep398;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %405 = inttoptr i32 %gep398 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_lrph12ipreheader_405_reg <= main_lrph12ipreheader_405;
		if (start == 1'b0 && ^(main_lrph12ipreheader_405) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_405_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %406 = load i32* %405, align 4, !tbaa !1*/
		main_lrph12ipreheader_406 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %406 = load i32* %405, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_241)) begin
		main_lrph12ipreheader_406_reg <= main_lrph12ipreheader_406;
		if (start == 1'b0 && ^(main_lrph12ipreheader_406) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_406_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %407 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
		main_lrph12ipreheader_407 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %407 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_lrph12ipreheader_407_reg <= main_lrph12ipreheader_407;
		if (start == 1'b0 && ^(main_lrph12ipreheader_407) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_407_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %408 = and i32 %407, 15*/
		main_lrph12ipreheader_408 = (main_lrph12ipreheader_407 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %408 = and i32 %407, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_lrph12ipreheader_408_reg <= main_lrph12ipreheader_408;
		if (start == 1'b0 && ^(main_lrph12ipreheader_408) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_408_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %409 = ashr i32 %407, 4*/
		main_lrph12ipreheader_409 = ($signed(main_lrph12ipreheader_407) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %409 = ashr i32 %407, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_lrph12ipreheader_409_reg <= main_lrph12ipreheader_409;
		if (start == 1'b0 && ^(main_lrph12ipreheader_409) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_409_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int399 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12ipreheader_gep_int399 = 0; end
		main_lrph12ipreheader_gep_int399 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int399 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		main_lrph12ipreheader_gep_int399_reg <= main_lrph12ipreheader_gep_int399;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_int399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_int399_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array400 = mul i32 %409, 64*/
		main_lrph12ipreheader_gep_array400 = (main_lrph12ipreheader_409 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array400 = mul i32 %409, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_lrph12ipreheader_gep_array400_reg <= main_lrph12ipreheader_gep_array400;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array400_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep401 = add i32 %gep_int399, %gep_array400*/
		main_lrph12ipreheader_gep401 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep401 = add i32 %gep_int399, %gep_array400*/
	main_lrph12ipreheader_gep401_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array402 = mul i32 %408, 4*/
		main_lrph12ipreheader_gep_array402 = (main_lrph12ipreheader_408 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array402 = mul i32 %408, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_lrph12ipreheader_gep_array402_reg <= main_lrph12ipreheader_gep_array402;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array402) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array402_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep403 = add i32 %gep401, %gep_array402*/
		main_lrph12ipreheader_gep403 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep403 = add i32 %gep401, %gep_array402*/
	main_lrph12ipreheader_gep403_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %410 = inttoptr i32 %gep403 to i32**/
		main_lrph12ipreheader_410 = main_lrph12ipreheader_gep403;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %410 = inttoptr i32 %gep403 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_225)) begin
		main_lrph12ipreheader_410_reg <= main_lrph12ipreheader_410;
		if (start == 1'b0 && ^(main_lrph12ipreheader_410) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_410_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %411 = load i32* %410, align 4, !tbaa !1*/
		main_lrph12ipreheader_411 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %411 = load i32* %410, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_243)) begin
		main_lrph12ipreheader_411_reg <= main_lrph12ipreheader_411;
		if (start == 1'b0 && ^(main_lrph12ipreheader_411) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_411_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %412 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
		main_lrph12ipreheader_412 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %412 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_lrph12ipreheader_412_reg <= main_lrph12ipreheader_412;
		if (start == 1'b0 && ^(main_lrph12ipreheader_412) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_412_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %413 = and i32 %412, 15*/
		main_lrph12ipreheader_413 = (main_lrph12ipreheader_412 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %413 = and i32 %412, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_lrph12ipreheader_413_reg <= main_lrph12ipreheader_413;
		if (start == 1'b0 && ^(main_lrph12ipreheader_413) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_413_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %414 = ashr i32 %412, 4*/
		main_lrph12ipreheader_414 = ($signed(main_lrph12ipreheader_412) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %414 = ashr i32 %412, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_lrph12ipreheader_414_reg <= main_lrph12ipreheader_414;
		if (start == 1'b0 && ^(main_lrph12ipreheader_414) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_414_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int404 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12ipreheader_gep_int404 = 0; end
		main_lrph12ipreheader_gep_int404 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_int404 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		main_lrph12ipreheader_gep_int404_reg <= main_lrph12ipreheader_gep_int404;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_int404) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_int404_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array405 = mul i32 %414, 64*/
		main_lrph12ipreheader_gep_array405 = (main_lrph12ipreheader_414 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array405 = mul i32 %414, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_lrph12ipreheader_gep_array405_reg <= main_lrph12ipreheader_gep_array405;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array405) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array405_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep406 = add i32 %gep_int404, %gep_array405*/
		main_lrph12ipreheader_gep406 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep406 = add i32 %gep_int404, %gep_array405*/
	main_lrph12ipreheader_gep406_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array407 = mul i32 %413, 4*/
		main_lrph12ipreheader_gep_array407 = (main_lrph12ipreheader_413 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep_array407 = mul i32 %413, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_lrph12ipreheader_gep_array407_reg <= main_lrph12ipreheader_gep_array407;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep_array407) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_gep_array407_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep408 = add i32 %gep406, %gep_array407*/
		main_lrph12ipreheader_gep408 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.lr.ph12.i.preheader*/
/*   %gep408 = add i32 %gep406, %gep_array407*/
	main_lrph12ipreheader_gep408_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %415 = inttoptr i32 %gep408 to i32**/
		main_lrph12ipreheader_415 = main_lrph12ipreheader_gep408;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %415 = inttoptr i32 %gep408 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_225)) begin
		main_lrph12ipreheader_415_reg <= main_lrph12ipreheader_415;
		if (start == 1'b0 && ^(main_lrph12ipreheader_415) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_415_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %416 = load i32* %415, align 4, !tbaa !1*/
		main_lrph12ipreheader_416 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %416 = load i32* %415, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_245)) begin
		main_lrph12ipreheader_416_reg <= main_lrph12ipreheader_416;
		if (start == 1'b0 && ^(main_lrph12ipreheader_416) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_416_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %i.011.i = phi i32 [ %i.0.i, %.lr.ph12.i ], [ 9, %.lr.ph12.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph12ipreheader_246) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph12i_i011i = 32'd9;
	end
	/* main: %.lr.ph12.i*/
	/*   %i.011.i = phi i32 [ %i.0.i, %.lr.ph12.i ], [ 9, %.lr.ph12.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrph12i_279) & (memory_controller_waitrequest == 1'd0)) & (main_lrph12i_498_reg == 1'd1))) */ begin
		main_lrph12i_i011i = main_lrph12i_i0i_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %i.011.i = phi i32 [ %i.0.i, %.lr.ph12.i ], [ 9, %.lr.ph12.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph12ipreheader_246) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph12i_i011i_reg <= main_lrph12i_i011i;
		if (start == 1'b0 && ^(main_lrph12i_i011i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_i011i_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %i.011.i = phi i32 [ %i.0.i, %.lr.ph12.i ], [ 9, %.lr.ph12.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrph12i_279) & (memory_controller_waitrequest == 1'd0)) & (main_lrph12i_498_reg == 1'd1))) begin
		main_lrph12i_i011i_reg <= main_lrph12i_i011i;
		if (start == 1'b0 && ^(main_lrph12i_i011i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_i011i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %418 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
		main_lrph12i_418 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %418 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_251)) begin
		main_lrph12i_418_reg <= main_lrph12i_418;
		if (start == 1'b0 && ^(main_lrph12i_418) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_418_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %419 = and i32 %418, 15*/
		main_lrph12i_419 = (main_lrph12i_418 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %419 = and i32 %418, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_251)) begin
		main_lrph12i_419_reg <= main_lrph12i_419;
		if (start == 1'b0 && ^(main_lrph12i_419) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_419_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %420 = ashr i32 %418, 4*/
		main_lrph12i_420 = ($signed(main_lrph12i_418) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %420 = ashr i32 %418, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_251)) begin
		main_lrph12i_420_reg <= main_lrph12i_420;
		if (start == 1'b0 && ^(main_lrph12i_420) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_420_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int409 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12i_gep_int409 = 0; end
		main_lrph12i_gep_int409 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int409 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		main_lrph12i_gep_int409_reg <= main_lrph12i_gep_int409;
		if (start == 1'b0 && ^(main_lrph12i_gep_int409) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_int409_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array410 = mul i32 %420, 64*/
		main_lrph12i_gep_array410 = (main_lrph12i_420 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array410 = mul i32 %420, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_251)) begin
		main_lrph12i_gep_array410_reg <= main_lrph12i_gep_array410;
		if (start == 1'b0 && ^(main_lrph12i_gep_array410) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array410_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep411 = add i32 %gep_int409, %gep_array410*/
		main_lrph12i_gep411 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep411 = add i32 %gep_int409, %gep_array410*/
	main_lrph12i_gep411_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array412 = mul i32 %419, 4*/
		main_lrph12i_gep_array412 = (main_lrph12i_419 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array412 = mul i32 %419, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_251)) begin
		main_lrph12i_gep_array412_reg <= main_lrph12i_gep_array412;
		if (start == 1'b0 && ^(main_lrph12i_gep_array412) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array412_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep413 = add i32 %gep411, %gep_array412*/
		main_lrph12i_gep413 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep413 = add i32 %gep411, %gep_array412*/
	main_lrph12i_gep413_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %421 = inttoptr i32 %gep413 to i32**/
		main_lrph12i_421 = main_lrph12i_gep413;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %421 = inttoptr i32 %gep413 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		main_lrph12i_421_reg <= main_lrph12i_421;
		if (start == 1'b0 && ^(main_lrph12i_421) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_421_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %422 = load i32* %421, align 4, !tbaa !1*/
		main_lrph12i_422 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %422 = load i32* %421, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_253)) begin
		main_lrph12i_422_reg <= main_lrph12i_422;
		if (start == 1'b0 && ^(main_lrph12i_422) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_422_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %423 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
		main_lrph12i_423 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %423 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_251)) begin
		main_lrph12i_423_reg <= main_lrph12i_423;
		if (start == 1'b0 && ^(main_lrph12i_423) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_423_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %424 = and i32 %423, 15*/
		main_lrph12i_424 = (main_lrph12i_423 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %424 = and i32 %423, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_251)) begin
		main_lrph12i_424_reg <= main_lrph12i_424;
		if (start == 1'b0 && ^(main_lrph12i_424) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_424_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %425 = ashr i32 %423, 4*/
		main_lrph12i_425 = ($signed(main_lrph12i_423) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %425 = ashr i32 %423, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_251)) begin
		main_lrph12i_425_reg <= main_lrph12i_425;
		if (start == 1'b0 && ^(main_lrph12i_425) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_425_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int414 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12i_gep_int414 = 0; end
		main_lrph12i_gep_int414 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int414 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		main_lrph12i_gep_int414_reg <= main_lrph12i_gep_int414;
		if (start == 1'b0 && ^(main_lrph12i_gep_int414) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_int414_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array415 = mul i32 %425, 64*/
		main_lrph12i_gep_array415 = (main_lrph12i_425 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array415 = mul i32 %425, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_251)) begin
		main_lrph12i_gep_array415_reg <= main_lrph12i_gep_array415;
		if (start == 1'b0 && ^(main_lrph12i_gep_array415) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array415_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep416 = add i32 %gep_int414, %gep_array415*/
		main_lrph12i_gep416 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep416 = add i32 %gep_int414, %gep_array415*/
	main_lrph12i_gep416_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array417 = mul i32 %424, 4*/
		main_lrph12i_gep_array417 = (main_lrph12i_424 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array417 = mul i32 %424, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_251)) begin
		main_lrph12i_gep_array417_reg <= main_lrph12i_gep_array417;
		if (start == 1'b0 && ^(main_lrph12i_gep_array417) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array417_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep418 = add i32 %gep416, %gep_array417*/
		main_lrph12i_gep418 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep418 = add i32 %gep416, %gep_array417*/
	main_lrph12i_gep418_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %426 = inttoptr i32 %gep418 to i32**/
		main_lrph12i_426 = main_lrph12i_gep418;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %426 = inttoptr i32 %gep418 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		main_lrph12i_426_reg <= main_lrph12i_426;
		if (start == 1'b0 && ^(main_lrph12i_426) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_426_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %427 = load i32* %426, align 4, !tbaa !1*/
		main_lrph12i_427 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %427 = load i32* %426, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_253)) begin
		main_lrph12i_427_reg <= main_lrph12i_427;
		if (start == 1'b0 && ^(main_lrph12i_427) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_427_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %428 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
		main_lrph12i_428 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %428 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		main_lrph12i_428_reg <= main_lrph12i_428;
		if (start == 1'b0 && ^(main_lrph12i_428) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_428_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %429 = and i32 %428, 15*/
		main_lrph12i_429 = (main_lrph12i_428 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %429 = and i32 %428, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		main_lrph12i_429_reg <= main_lrph12i_429;
		if (start == 1'b0 && ^(main_lrph12i_429) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_429_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %430 = ashr i32 %428, 4*/
		main_lrph12i_430 = ($signed(main_lrph12i_428) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %430 = ashr i32 %428, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		main_lrph12i_430_reg <= main_lrph12i_430;
		if (start == 1'b0 && ^(main_lrph12i_430) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_430_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int419 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12i_gep_int419 = 0; end
		main_lrph12i_gep_int419 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int419 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		main_lrph12i_gep_int419_reg <= main_lrph12i_gep_int419;
		if (start == 1'b0 && ^(main_lrph12i_gep_int419) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_int419_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array420 = mul i32 %430, 64*/
		main_lrph12i_gep_array420 = (main_lrph12i_430 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array420 = mul i32 %430, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		main_lrph12i_gep_array420_reg <= main_lrph12i_gep_array420;
		if (start == 1'b0 && ^(main_lrph12i_gep_array420) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array420_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep421 = add i32 %gep_int419, %gep_array420*/
		main_lrph12i_gep421 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep421 = add i32 %gep_int419, %gep_array420*/
	main_lrph12i_gep421_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array422 = mul i32 %429, 4*/
		main_lrph12i_gep_array422 = (main_lrph12i_429 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array422 = mul i32 %429, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		main_lrph12i_gep_array422_reg <= main_lrph12i_gep_array422;
		if (start == 1'b0 && ^(main_lrph12i_gep_array422) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array422_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep423 = add i32 %gep421, %gep_array422*/
		main_lrph12i_gep423 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep423 = add i32 %gep421, %gep_array422*/
	main_lrph12i_gep423_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %431 = inttoptr i32 %gep423 to i32**/
		main_lrph12i_431 = main_lrph12i_gep423;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %431 = inttoptr i32 %gep423 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_253)) begin
		main_lrph12i_431_reg <= main_lrph12i_431;
		if (start == 1'b0 && ^(main_lrph12i_431) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_431_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %432 = load i32* %431, align 4, !tbaa !1*/
		main_lrph12i_432 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %432 = load i32* %431, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_255)) begin
		main_lrph12i_432_reg <= main_lrph12i_432;
		if (start == 1'b0 && ^(main_lrph12i_432) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_432_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %433 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
		main_lrph12i_433 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %433 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_253)) begin
		main_lrph12i_433_reg <= main_lrph12i_433;
		if (start == 1'b0 && ^(main_lrph12i_433) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_433_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %434 = and i32 %433, 15*/
		main_lrph12i_434 = (main_lrph12i_433 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %434 = and i32 %433, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_253)) begin
		main_lrph12i_434_reg <= main_lrph12i_434;
		if (start == 1'b0 && ^(main_lrph12i_434) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_434_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %435 = ashr i32 %433, 4*/
		main_lrph12i_435 = ($signed(main_lrph12i_433) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %435 = ashr i32 %433, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_253)) begin
		main_lrph12i_435_reg <= main_lrph12i_435;
		if (start == 1'b0 && ^(main_lrph12i_435) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_435_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int424 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12i_gep_int424 = 0; end
		main_lrph12i_gep_int424 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int424 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		main_lrph12i_gep_int424_reg <= main_lrph12i_gep_int424;
		if (start == 1'b0 && ^(main_lrph12i_gep_int424) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_int424_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array425 = mul i32 %435, 64*/
		main_lrph12i_gep_array425 = (main_lrph12i_435 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array425 = mul i32 %435, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_253)) begin
		main_lrph12i_gep_array425_reg <= main_lrph12i_gep_array425;
		if (start == 1'b0 && ^(main_lrph12i_gep_array425) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array425_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep426 = add i32 %gep_int424, %gep_array425*/
		main_lrph12i_gep426 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep426 = add i32 %gep_int424, %gep_array425*/
	main_lrph12i_gep426_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array427 = mul i32 %434, 4*/
		main_lrph12i_gep_array427 = (main_lrph12i_434 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array427 = mul i32 %434, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_253)) begin
		main_lrph12i_gep_array427_reg <= main_lrph12i_gep_array427;
		if (start == 1'b0 && ^(main_lrph12i_gep_array427) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array427_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep428 = add i32 %gep426, %gep_array427*/
		main_lrph12i_gep428 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep428 = add i32 %gep426, %gep_array427*/
	main_lrph12i_gep428_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %436 = inttoptr i32 %gep428 to i32**/
		main_lrph12i_436 = main_lrph12i_gep428;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %436 = inttoptr i32 %gep428 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_254)) begin
		main_lrph12i_436_reg <= main_lrph12i_436;
		if (start == 1'b0 && ^(main_lrph12i_436) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_436_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %437 = load i32* %436, align 4, !tbaa !1*/
		main_lrph12i_437 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %437 = load i32* %436, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_257)) begin
		main_lrph12i_437_reg <= main_lrph12i_437;
		if (start == 1'b0 && ^(main_lrph12i_437) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_437_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %438 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
		main_lrph12i_438 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %438 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_254)) begin
		main_lrph12i_438_reg <= main_lrph12i_438;
		if (start == 1'b0 && ^(main_lrph12i_438) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_438_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %439 = and i32 %438, 15*/
		main_lrph12i_439 = (main_lrph12i_438 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %439 = and i32 %438, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_254)) begin
		main_lrph12i_439_reg <= main_lrph12i_439;
		if (start == 1'b0 && ^(main_lrph12i_439) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_439_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %440 = ashr i32 %438, 4*/
		main_lrph12i_440 = ($signed(main_lrph12i_438) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %440 = ashr i32 %438, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_254)) begin
		main_lrph12i_440_reg <= main_lrph12i_440;
		if (start == 1'b0 && ^(main_lrph12i_440) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_440_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int429 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12i_gep_int429 = 0; end
		main_lrph12i_gep_int429 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int429 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		main_lrph12i_gep_int429_reg <= main_lrph12i_gep_int429;
		if (start == 1'b0 && ^(main_lrph12i_gep_int429) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_int429_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array430 = mul i32 %440, 64*/
		main_lrph12i_gep_array430 = (main_lrph12i_440 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array430 = mul i32 %440, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_254)) begin
		main_lrph12i_gep_array430_reg <= main_lrph12i_gep_array430;
		if (start == 1'b0 && ^(main_lrph12i_gep_array430) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array430_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep431 = add i32 %gep_int429, %gep_array430*/
		main_lrph12i_gep431 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep431 = add i32 %gep_int429, %gep_array430*/
	main_lrph12i_gep431_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array432 = mul i32 %439, 4*/
		main_lrph12i_gep_array432 = (main_lrph12i_439 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array432 = mul i32 %439, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_254)) begin
		main_lrph12i_gep_array432_reg <= main_lrph12i_gep_array432;
		if (start == 1'b0 && ^(main_lrph12i_gep_array432) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array432_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep433 = add i32 %gep431, %gep_array432*/
		main_lrph12i_gep433 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep433 = add i32 %gep431, %gep_array432*/
	main_lrph12i_gep433_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %441 = inttoptr i32 %gep433 to i32**/
		main_lrph12i_441 = main_lrph12i_gep433;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %441 = inttoptr i32 %gep433 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_255)) begin
		main_lrph12i_441_reg <= main_lrph12i_441;
		if (start == 1'b0 && ^(main_lrph12i_441) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_441_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %442 = load i32* %441, align 4, !tbaa !1*/
		main_lrph12i_442 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %442 = load i32* %441, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_259)) begin
		main_lrph12i_442_reg <= main_lrph12i_442;
		if (start == 1'b0 && ^(main_lrph12i_442) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_442_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %443 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
		main_lrph12i_443 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %443 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_258)) begin
		main_lrph12i_443_reg <= main_lrph12i_443;
		if (start == 1'b0 && ^(main_lrph12i_443) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_443_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %444 = and i32 %443, 15*/
		main_lrph12i_444 = (main_lrph12i_443 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %444 = and i32 %443, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_258)) begin
		main_lrph12i_444_reg <= main_lrph12i_444;
		if (start == 1'b0 && ^(main_lrph12i_444) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_444_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %445 = ashr i32 %443, 4*/
		main_lrph12i_445 = ($signed(main_lrph12i_443) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %445 = ashr i32 %443, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_258)) begin
		main_lrph12i_445_reg <= main_lrph12i_445;
		if (start == 1'b0 && ^(main_lrph12i_445) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_445_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int434 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12i_gep_int434 = 0; end
		main_lrph12i_gep_int434 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int434 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		main_lrph12i_gep_int434_reg <= main_lrph12i_gep_int434;
		if (start == 1'b0 && ^(main_lrph12i_gep_int434) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_int434_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array435 = mul i32 %445, 64*/
		main_lrph12i_gep_array435 = (main_lrph12i_445 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array435 = mul i32 %445, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_258)) begin
		main_lrph12i_gep_array435_reg <= main_lrph12i_gep_array435;
		if (start == 1'b0 && ^(main_lrph12i_gep_array435) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array435_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep436 = add i32 %gep_int434, %gep_array435*/
		main_lrph12i_gep436 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep436 = add i32 %gep_int434, %gep_array435*/
	main_lrph12i_gep436_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array437 = mul i32 %444, 4*/
		main_lrph12i_gep_array437 = (main_lrph12i_444 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array437 = mul i32 %444, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_258)) begin
		main_lrph12i_gep_array437_reg <= main_lrph12i_gep_array437;
		if (start == 1'b0 && ^(main_lrph12i_gep_array437) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array437_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep438 = add i32 %gep436, %gep_array437*/
		main_lrph12i_gep438 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep438 = add i32 %gep436, %gep_array437*/
	main_lrph12i_gep438_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %446 = inttoptr i32 %gep438 to i32**/
		main_lrph12i_446 = main_lrph12i_gep438;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %446 = inttoptr i32 %gep438 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_259)) begin
		main_lrph12i_446_reg <= main_lrph12i_446;
		if (start == 1'b0 && ^(main_lrph12i_446) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_446_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %447 = load i32* %446, align 4, !tbaa !1*/
		main_lrph12i_447 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %447 = load i32* %446, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_260)) begin
		main_lrph12i_447_reg <= main_lrph12i_447;
		if (start == 1'b0 && ^(main_lrph12i_447) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_447_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %448 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
		main_lrph12i_448 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %448 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_260)) begin
		main_lrph12i_448_reg <= main_lrph12i_448;
		if (start == 1'b0 && ^(main_lrph12i_448) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_448_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %449 = and i32 %448, 15*/
		main_lrph12i_449 = (main_lrph12i_448 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %449 = and i32 %448, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_260)) begin
		main_lrph12i_449_reg <= main_lrph12i_449;
		if (start == 1'b0 && ^(main_lrph12i_449) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_449_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %450 = ashr i32 %448, 4*/
		main_lrph12i_450 = ($signed(main_lrph12i_448) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %450 = ashr i32 %448, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_260)) begin
		main_lrph12i_450_reg <= main_lrph12i_450;
		if (start == 1'b0 && ^(main_lrph12i_450) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_450_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int439 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12i_gep_int439 = 0; end
		main_lrph12i_gep_int439 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int439 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		main_lrph12i_gep_int439_reg <= main_lrph12i_gep_int439;
		if (start == 1'b0 && ^(main_lrph12i_gep_int439) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_int439_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array440 = mul i32 %450, 64*/
		main_lrph12i_gep_array440 = (main_lrph12i_450 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array440 = mul i32 %450, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_260)) begin
		main_lrph12i_gep_array440_reg <= main_lrph12i_gep_array440;
		if (start == 1'b0 && ^(main_lrph12i_gep_array440) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array440_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep441 = add i32 %gep_int439, %gep_array440*/
		main_lrph12i_gep441 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep441 = add i32 %gep_int439, %gep_array440*/
	main_lrph12i_gep441_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array442 = mul i32 %449, 4*/
		main_lrph12i_gep_array442 = (main_lrph12i_449 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array442 = mul i32 %449, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_260)) begin
		main_lrph12i_gep_array442_reg <= main_lrph12i_gep_array442;
		if (start == 1'b0 && ^(main_lrph12i_gep_array442) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array442_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep443 = add i32 %gep441, %gep_array442*/
		main_lrph12i_gep443 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep443 = add i32 %gep441, %gep_array442*/
	main_lrph12i_gep443_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %451 = inttoptr i32 %gep443 to i32**/
		main_lrph12i_451 = main_lrph12i_gep443;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %451 = inttoptr i32 %gep443 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		main_lrph12i_451_reg <= main_lrph12i_451;
		if (start == 1'b0 && ^(main_lrph12i_451) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_451_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %452 = load i32* %451, align 4, !tbaa !1*/
		main_lrph12i_452 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %452 = load i32* %451, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_262)) begin
		main_lrph12i_452_reg <= main_lrph12i_452;
		if (start == 1'b0 && ^(main_lrph12i_452) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_452_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %453 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
		main_lrph12i_453 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %453 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_260)) begin
		main_lrph12i_453_reg <= main_lrph12i_453;
		if (start == 1'b0 && ^(main_lrph12i_453) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_453_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %454 = and i32 %453, 15*/
		main_lrph12i_454 = (main_lrph12i_453 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %454 = and i32 %453, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_260)) begin
		main_lrph12i_454_reg <= main_lrph12i_454;
		if (start == 1'b0 && ^(main_lrph12i_454) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_454_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %455 = ashr i32 %453, 4*/
		main_lrph12i_455 = ($signed(main_lrph12i_453) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %455 = ashr i32 %453, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_260)) begin
		main_lrph12i_455_reg <= main_lrph12i_455;
		if (start == 1'b0 && ^(main_lrph12i_455) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_455_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int444 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12i_gep_int444 = 0; end
		main_lrph12i_gep_int444 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int444 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		main_lrph12i_gep_int444_reg <= main_lrph12i_gep_int444;
		if (start == 1'b0 && ^(main_lrph12i_gep_int444) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_int444_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array445 = mul i32 %455, 64*/
		main_lrph12i_gep_array445 = (main_lrph12i_455 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array445 = mul i32 %455, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_260)) begin
		main_lrph12i_gep_array445_reg <= main_lrph12i_gep_array445;
		if (start == 1'b0 && ^(main_lrph12i_gep_array445) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array445_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep446 = add i32 %gep_int444, %gep_array445*/
		main_lrph12i_gep446 = main_signed_add_32_2;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep446 = add i32 %gep_int444, %gep_array445*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		main_lrph12i_gep446_reg <= main_lrph12i_gep446;
		if (start == 1'b0 && ^(main_lrph12i_gep446) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep456 = add i32 %gep_int454, %gep_array455*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_264)) begin
		main_lrph12i_gep446_reg <= main_lrph12i_gep456;
		if (start == 1'b0 && ^(main_lrph12i_gep456) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep226 = add i32 %gep_int225, 960*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_lrph12i_gep446_reg <= main_AddRoundKeyexit_crit_edgei_gep226;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %.preheader.i4.i*/
	/*   %gep251 = add i32 %gep_int249, %gep_array250*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_lrph12i_gep446_reg <= main_preheaderi4i_gep251;
		if (start == 1'b0 && ^(main_preheaderi4i_gep251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %285*/
	/*   %gep289 = add i32 %gep_int288, 960*/
	if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_lrph12i_gep446_reg <= main_285_gep289;
		if (start == 1'b0 && ^(main_285_gep289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %2*/
	/*   %gep7 = add i32 %gep5, %gep_array6*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_lrph12i_gep446_reg <= main_2_gep7;
		if (start == 1'b0 && ^(main_2_gep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %.preheader.i.i*/
	/*   %gep34 = add i32 %gep32, %gep_array33*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_lrph12i_gep446_reg <= main_preheaderii_gep34;
		if (start == 1'b0 && ^(main_preheaderii_gep34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %.preheader.i.i*/
	/*   %gep51 = add i32 %gep_int49, %gep_array50*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_36)) begin
		main_lrph12i_gep446_reg <= main_preheaderii_gep51;
		if (start == 1'b0 && ^(main_preheaderii_gep51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep59 = add i32 %gep_int57, %gep_array58*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_lrph12i_gep446_reg <= main_AddRoundKeyexitipreheader_gep59;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep69 = add i32 %gep_int67, %gep_array68*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_lrph12i_gep446_reg <= main_AddRoundKeyexitipreheader_gep69;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep79 = add i32 %gep_int77, %gep_array78*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_lrph12i_gep446_reg <= main_AddRoundKeyexitipreheader_gep79;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep89 = add i32 %gep_int87, %gep_array88*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_lrph12i_gep446_reg <= main_AddRoundKeyexitipreheader_gep89;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep99 = add i32 %gep_int97, %gep_array98*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_lrph12i_gep446_reg <= main_AddRoundKeyexitipreheader_gep99;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep109 = add i32 %gep_int107, %gep_array108*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_lrph12i_gep446_reg <= main_AddRoundKeyexitipreheader_gep109;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep119 = add i32 %gep_int117, %gep_array118*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_lrph12i_gep446_reg <= main_AddRoundKeyexitipreheader_gep119;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep129 = add i32 %gep_int127, %gep_array128*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		main_lrph12i_gep446_reg <= main_AddRoundKeyexitipreheader_gep129;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep139 = add i32 %gep_int137, %gep_array138*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_lrph12i_gep446_reg <= main_AddRoundKeyexiti_gep139;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %gep498 = add i32 %gep496, %gep_array497*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main_lrph12i_gep446_reg <= main__crit_edgei_gep498;
		if (start == 1'b0 && ^(main__crit_edgei_gep498) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep525 = add i32 %gep523, %gep_array524*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		main_lrph12i_gep446_reg <= main_preheaderi4i14_gep525;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep525) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep542 = add i32 %gep_int540, %gep_array541*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_296)) begin
		main_lrph12i_gep446_reg <= main_preheaderi4i14_gep542;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep542) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %.preheader.i.i4*/
	/*   %gep314 = add i32 %gep_int312, %gep_array313*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_lrph12i_gep446_reg <= main_preheaderii4_gep314;
		if (start == 1'b0 && ^(main_preheaderii4_gep314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep336 = add i32 %gep_int334, %gep_array335*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_lrph12i_gep446_reg <= main_lrph12ipreheader_gep336;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep346 = add i32 %gep_int344, %gep_array345*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_lrph12i_gep446_reg <= main_lrph12ipreheader_gep346;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep356 = add i32 %gep_int354, %gep_array355*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_lrph12i_gep446_reg <= main_lrph12ipreheader_gep356;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep366 = add i32 %gep_int364, %gep_array365*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_lrph12i_gep446_reg <= main_lrph12ipreheader_gep366;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep376 = add i32 %gep_int374, %gep_array375*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_lrph12i_gep446_reg <= main_lrph12ipreheader_gep376;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep386 = add i32 %gep_int384, %gep_array385*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_lrph12i_gep446_reg <= main_lrph12ipreheader_gep386;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep396 = add i32 %gep_int394, %gep_array395*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_lrph12i_gep446_reg <= main_lrph12ipreheader_gep396;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep406 = add i32 %gep_int404, %gep_array405*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_225)) begin
		main_lrph12i_gep446_reg <= main_lrph12ipreheader_gep406;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep406) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep416 = add i32 %gep_int414, %gep_array415*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		main_lrph12i_gep446_reg <= main_lrph12i_gep416;
		if (start == 1'b0 && ^(main_lrph12i_gep416) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep446_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array447 = mul i32 %454, 4*/
		main_lrph12i_gep_array447 = (main_lrph12i_454 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array447 = mul i32 %454, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_260)) begin
		main_lrph12i_gep_array447_reg <= main_lrph12i_gep_array447;
		if (start == 1'b0 && ^(main_lrph12i_gep_array447) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array447_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep448 = add i32 %gep446, %gep_array447*/
		main_lrph12i_gep448 = main_signed_add_32_3;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep448 = add i32 %gep446, %gep_array447*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		main_lrph12i_gep448_reg <= main_lrph12i_gep448;
		if (start == 1'b0 && ^(main_lrph12i_gep448) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep458 = add i32 %gep456, %gep_array457*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_264)) begin
		main_lrph12i_gep448_reg <= main_lrph12i_gep458;
		if (start == 1'b0 && ^(main_lrph12i_gep458) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep233 = add i32 %gep_int232, 1440*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_lrph12i_gep448_reg <= main_AddRoundKeyexit_crit_edgei_gep233;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %.preheader.i4.i*/
	/*   %gep255 = add i32 %gep253, %gep_array254*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_lrph12i_gep448_reg <= main_preheaderi4i_gep255;
		if (start == 1'b0 && ^(main_preheaderi4i_gep255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %2*/
	/*   %gep10 = add i32 %gep_int8, %gep_array9*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_lrph12i_gep448_reg <= main_2_gep10;
		if (start == 1'b0 && ^(main_2_gep10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %.preheader.i.i*/
	/*   %gep41 = add i32 %gep39, %gep_array40*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_lrph12i_gep448_reg <= main_preheaderii_gep41;
		if (start == 1'b0 && ^(main_preheaderii_gep41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep61 = add i32 %gep59, %gep_array60*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_lrph12i_gep448_reg <= main_AddRoundKeyexitipreheader_gep61;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep71 = add i32 %gep69, %gep_array70*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_lrph12i_gep448_reg <= main_AddRoundKeyexitipreheader_gep71;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep81 = add i32 %gep79, %gep_array80*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_lrph12i_gep448_reg <= main_AddRoundKeyexitipreheader_gep81;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep91 = add i32 %gep89, %gep_array90*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_lrph12i_gep448_reg <= main_AddRoundKeyexitipreheader_gep91;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep101 = add i32 %gep99, %gep_array100*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_lrph12i_gep448_reg <= main_AddRoundKeyexitipreheader_gep101;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep111 = add i32 %gep109, %gep_array110*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_lrph12i_gep448_reg <= main_AddRoundKeyexitipreheader_gep111;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep121 = add i32 %gep119, %gep_array120*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_lrph12i_gep448_reg <= main_AddRoundKeyexitipreheader_gep121;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep131 = add i32 %gep129, %gep_array130*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		main_lrph12i_gep448_reg <= main_AddRoundKeyexitipreheader_gep131;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep141 = add i32 %gep139, %gep_array140*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_lrph12i_gep448_reg <= main_AddRoundKeyexiti_gep141;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %gep501 = add i32 %gep_int499, %gep_array500*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main_lrph12i_gep448_reg <= main__crit_edgei_gep501;
		if (start == 1'b0 && ^(main__crit_edgei_gep501) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep532 = add i32 %gep530, %gep_array531*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		main_lrph12i_gep448_reg <= main_preheaderi4i14_gep532;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep532) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %285*/
	/*   %gep296 = add i32 %gep_int295, 1440*/
	if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_lrph12i_gep448_reg <= main_285_gep296;
		if (start == 1'b0 && ^(main_285_gep296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %.preheader.i.i4*/
	/*   %gep318 = add i32 %gep316, %gep_array317*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_lrph12i_gep448_reg <= main_preheaderii4_gep318;
		if (start == 1'b0 && ^(main_preheaderii4_gep318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep338 = add i32 %gep336, %gep_array337*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_lrph12i_gep448_reg <= main_lrph12ipreheader_gep338;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep348 = add i32 %gep346, %gep_array347*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_lrph12i_gep448_reg <= main_lrph12ipreheader_gep348;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep358 = add i32 %gep356, %gep_array357*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_lrph12i_gep448_reg <= main_lrph12ipreheader_gep358;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep368 = add i32 %gep366, %gep_array367*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_lrph12i_gep448_reg <= main_lrph12ipreheader_gep368;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep368) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep378 = add i32 %gep376, %gep_array377*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_lrph12i_gep448_reg <= main_lrph12ipreheader_gep378;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep388 = add i32 %gep386, %gep_array387*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_lrph12i_gep448_reg <= main_lrph12ipreheader_gep388;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep398 = add i32 %gep396, %gep_array397*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_lrph12i_gep448_reg <= main_lrph12ipreheader_gep398;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep398) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep408 = add i32 %gep406, %gep_array407*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_225)) begin
		main_lrph12i_gep448_reg <= main_lrph12ipreheader_gep408;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep408) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep418 = add i32 %gep416, %gep_array417*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		main_lrph12i_gep448_reg <= main_lrph12i_gep418;
		if (start == 1'b0 && ^(main_lrph12i_gep418) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep448_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %456 = inttoptr i32 %gep448 to i32**/
		main_lrph12i_456 = main_lrph12i_gep448;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %456 = inttoptr i32 %gep448 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		main_lrph12i_456_reg <= main_lrph12i_456;
		if (start == 1'b0 && ^(main_lrph12i_456) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_456_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %457 = load i32* %456, align 4, !tbaa !1*/
		main_lrph12i_457 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %457 = load i32* %456, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_262)) begin
		main_lrph12i_457_reg <= main_lrph12i_457;
		if (start == 1'b0 && ^(main_lrph12i_457) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_457_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %458 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
		main_lrph12i_458 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %458 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_263)) begin
		main_lrph12i_458_reg <= main_lrph12i_458;
		if (start == 1'b0 && ^(main_lrph12i_458) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_458_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %459 = and i32 %458, 15*/
		main_lrph12i_459 = (main_lrph12i_458 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %459 = and i32 %458, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_263)) begin
		main_lrph12i_459_reg <= main_lrph12i_459;
		if (start == 1'b0 && ^(main_lrph12i_459) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_459_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %460 = ashr i32 %458, 4*/
		main_lrph12i_460 = ($signed(main_lrph12i_458) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %460 = ashr i32 %458, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_263)) begin
		main_lrph12i_460_reg <= main_lrph12i_460;
		if (start == 1'b0 && ^(main_lrph12i_460) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_460_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int449 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12i_gep_int449 = 0; end
		main_lrph12i_gep_int449 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int449 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		main_lrph12i_gep_int449_reg <= main_lrph12i_gep_int449;
		if (start == 1'b0 && ^(main_lrph12i_gep_int449) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_int449_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array450 = mul i32 %460, 64*/
		main_lrph12i_gep_array450 = (main_lrph12i_460 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array450 = mul i32 %460, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_263)) begin
		main_lrph12i_gep_array450_reg <= main_lrph12i_gep_array450;
		if (start == 1'b0 && ^(main_lrph12i_gep_array450) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array450_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep451 = add i32 %gep_int449, %gep_array450*/
		main_lrph12i_gep451 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep451 = add i32 %gep_int449, %gep_array450*/
	main_lrph12i_gep451_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array452 = mul i32 %459, 4*/
		main_lrph12i_gep_array452 = (main_lrph12i_459 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array452 = mul i32 %459, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_263)) begin
		main_lrph12i_gep_array452_reg <= main_lrph12i_gep_array452;
		if (start == 1'b0 && ^(main_lrph12i_gep_array452) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array452_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep453 = add i32 %gep451, %gep_array452*/
		main_lrph12i_gep453 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep453 = add i32 %gep451, %gep_array452*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_264)) begin
		main_lrph12i_gep453_reg <= main_lrph12i_gep453;
		if (start == 1'b0 && ^(main_lrph12i_gep453) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep463 = add i32 %gep461, %gep_array462*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_266)) begin
		main_lrph12i_gep453_reg <= main_lrph12i_gep463;
		if (start == 1'b0 && ^(main_lrph12i_gep463) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep468 = add i32 %gep466, %gep_array467*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_267)) begin
		main_lrph12i_gep453_reg <= main_lrph12i_gep468;
		if (start == 1'b0 && ^(main_lrph12i_gep468) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep219 = add i32 %gep_int218, 480*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexit_crit_edgei_gep219;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.preheader.i4.i*/
	/*   %gep246 = add i32 %gep_int245, 480*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_lrph12i_gep453_reg <= main_preheaderi4i_gep246;
		if (start == 1'b0 && ^(main_preheaderi4i_gep246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %gep274 = add i32 %gep_int272, %gep_array273*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_179)) begin
		main_lrph12i_gep453_reg <= main_preheaderi_gep274;
		if (start == 1'b0 && ^(main_preheaderi_gep274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %285*/
	/*   %gep282 = add i32 %gep_int281, 480*/
	if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_lrph12i_gep453_reg <= main_285_gep282;
		if (start == 1'b0 && ^(main_285_gep282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %2*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_lrph12i_gep453_reg <= main_2_gep3;
		if (start == 1'b0 && ^(main_2_gep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.preheader.i.i*/
	/*   %gep30 = add i32 %gep_int28, %gep_array29*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_lrph12i_gep453_reg <= main_preheaderii_gep30;
		if (start == 1'b0 && ^(main_preheaderii_gep30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.preheader.i.i*/
	/*   %gep44 = add i32 %gep_int42, %gep_array43*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_36)) begin
		main_lrph12i_gep453_reg <= main_preheaderii_gep44;
		if (start == 1'b0 && ^(main_preheaderii_gep44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep56 = add i32 %gep54, %gep_array55*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexitipreheader_gep56;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep66 = add i32 %gep64, %gep_array65*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexitipreheader_gep66;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep76 = add i32 %gep74, %gep_array75*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexitipreheader_gep76;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep86 = add i32 %gep84, %gep_array85*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexitipreheader_gep86;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep96 = add i32 %gep94, %gep_array95*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexitipreheader_gep96;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep106 = add i32 %gep104, %gep_array105*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexitipreheader_gep106;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep116 = add i32 %gep114, %gep_array115*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexitipreheader_gep116;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep126 = add i32 %gep124, %gep_array125*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexitipreheader_gep126;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep136 = add i32 %gep134, %gep_array135*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexiti_gep136;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep146 = add i32 %gep144, %gep_array145*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexiti_gep146;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep151 = add i32 %gep149, %gep_array150*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_104)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexiti_gep151;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep156 = add i32 %gep154, %gep_array155*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexiti_gep156;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep161 = add i32 %gep159, %gep_array160*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexiti_gep161;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep166 = add i32 %gep164, %gep_array165*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexiti_gep166;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep171 = add i32 %gep169, %gep_array170*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_113)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexiti_gep171;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep176 = add i32 %gep174, %gep_array175*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_116)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexiti_gep176;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep181 = add i32 %gep179, %gep_array180*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexiti_gep181;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep186 = add i32 %gep184, %gep_array185*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexiti_gep186;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep191 = add i32 %gep189, %gep_array190*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_123)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexiti_gep191;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep196 = add i32 %gep194, %gep_array195*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_126)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexiti_gep196;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep201 = add i32 %gep199, %gep_array200*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_129)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexiti_gep201;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep206 = add i32 %gep204, %gep_array205*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_132)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexiti_gep206;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep211 = add i32 %gep209, %gep_array210*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_135)) begin
		main_lrph12i_gep453_reg <= main_AddRoundKeyexiti_gep211;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %gep494 = add i32 %gep_int492, %gep_array493*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main_lrph12i_gep453_reg <= main__crit_edgei_gep494;
		if (start == 1'b0 && ^(main__crit_edgei_gep494) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep521 = add i32 %gep_int519, %gep_array520*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		main_lrph12i_gep453_reg <= main_preheaderi4i14_gep521;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep521) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep535 = add i32 %gep_int533, %gep_array534*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_296)) begin
		main_lrph12i_gep453_reg <= main_preheaderi4i14_gep535;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep535) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %gep551 = add i32 %gep_int549, %gep_array550*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_318)) begin
		main_lrph12i_gep453_reg <= main_preheaderloopexiti17_gep551;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_gep551) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.preheader.i.i4*/
	/*   %gep309 = add i32 %gep_int308, 480*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_lrph12i_gep453_reg <= main_preheaderii4_gep309;
		if (start == 1'b0 && ^(main_preheaderii4_gep309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep333 = add i32 %gep331, %gep_array332*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_lrph12i_gep453_reg <= main_lrph12ipreheader_gep333;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep343 = add i32 %gep341, %gep_array342*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_lrph12i_gep453_reg <= main_lrph12ipreheader_gep343;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep353 = add i32 %gep351, %gep_array352*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_lrph12i_gep453_reg <= main_lrph12ipreheader_gep353;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep363 = add i32 %gep361, %gep_array362*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_lrph12i_gep453_reg <= main_lrph12ipreheader_gep363;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep373 = add i32 %gep371, %gep_array372*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_lrph12i_gep453_reg <= main_lrph12ipreheader_gep373;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep383 = add i32 %gep381, %gep_array382*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_lrph12i_gep453_reg <= main_lrph12ipreheader_gep383;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep383) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep393 = add i32 %gep391, %gep_array392*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_lrph12i_gep453_reg <= main_lrph12ipreheader_gep393;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep393) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep403 = add i32 %gep401, %gep_array402*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_225)) begin
		main_lrph12i_gep453_reg <= main_lrph12ipreheader_gep403;
		if (start == 1'b0 && ^(main_lrph12ipreheader_gep403) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep413 = add i32 %gep411, %gep_array412*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		main_lrph12i_gep453_reg <= main_lrph12i_gep413;
		if (start == 1'b0 && ^(main_lrph12i_gep413) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep423 = add i32 %gep421, %gep_array422*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_253)) begin
		main_lrph12i_gep453_reg <= main_lrph12i_gep423;
		if (start == 1'b0 && ^(main_lrph12i_gep423) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep428 = add i32 %gep426, %gep_array427*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_254)) begin
		main_lrph12i_gep453_reg <= main_lrph12i_gep428;
		if (start == 1'b0 && ^(main_lrph12i_gep428) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep433 = add i32 %gep431, %gep_array432*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_255)) begin
		main_lrph12i_gep453_reg <= main_lrph12i_gep433;
		if (start == 1'b0 && ^(main_lrph12i_gep433) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep438 = add i32 %gep436, %gep_array437*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_259)) begin
		main_lrph12i_gep453_reg <= main_lrph12i_gep438;
		if (start == 1'b0 && ^(main_lrph12i_gep438) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep443 = add i32 %gep441, %gep_array442*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		main_lrph12i_gep453_reg <= main_lrph12i_gep443;
		if (start == 1'b0 && ^(main_lrph12i_gep443) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep473 = add i32 %gep471, %gep_array472*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_268)) begin
		main_lrph12i_gep453_reg <= main_lrph12i_gep473;
		if (start == 1'b0 && ^(main_lrph12i_gep473) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep478 = add i32 %gep476, %gep_array477*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_273)) begin
		main_lrph12i_gep453_reg <= main_lrph12i_gep478;
		if (start == 1'b0 && ^(main_lrph12i_gep478) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep483 = add i32 %gep481, %gep_array482*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_274)) begin
		main_lrph12i_gep453_reg <= main_lrph12i_gep483;
		if (start == 1'b0 && ^(main_lrph12i_gep483) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %gep488 = add i32 %gep486, %gep_array487*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_275)) begin
		main_lrph12i_gep453_reg <= main_lrph12i_gep488;
		if (start == 1'b0 && ^(main_lrph12i_gep488) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep453_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %461 = inttoptr i32 %gep453 to i32**/
		main_lrph12i_461 = main_lrph12i_gep453;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %461 = inttoptr i32 %gep453 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_264)) begin
		main_lrph12i_461_reg <= main_lrph12i_461;
		if (start == 1'b0 && ^(main_lrph12i_461) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_461_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %462 = load i32* %461, align 4, !tbaa !1*/
		main_lrph12i_462 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %462 = load i32* %461, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_265)) begin
		main_lrph12i_462_reg <= main_lrph12i_462;
		if (start == 1'b0 && ^(main_lrph12i_462) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_462_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %463 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
		main_lrph12i_463 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %463 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_263)) begin
		main_lrph12i_463_reg <= main_lrph12i_463;
		if (start == 1'b0 && ^(main_lrph12i_463) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_463_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %464 = and i32 %463, 15*/
		main_lrph12i_464 = (main_lrph12i_463 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %464 = and i32 %463, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_263)) begin
		main_lrph12i_464_reg <= main_lrph12i_464;
		if (start == 1'b0 && ^(main_lrph12i_464) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_464_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %465 = ashr i32 %463, 4*/
		main_lrph12i_465 = ($signed(main_lrph12i_463) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %465 = ashr i32 %463, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_263)) begin
		main_lrph12i_465_reg <= main_lrph12i_465;
		if (start == 1'b0 && ^(main_lrph12i_465) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_465_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int454 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12i_gep_int454 = 0; end
		main_lrph12i_gep_int454 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int454 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		main_lrph12i_gep_int454_reg <= main_lrph12i_gep_int454;
		if (start == 1'b0 && ^(main_lrph12i_gep_int454) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_int454_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array455 = mul i32 %465, 64*/
		main_lrph12i_gep_array455 = (main_lrph12i_465 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array455 = mul i32 %465, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_263)) begin
		main_lrph12i_gep_array455_reg <= main_lrph12i_gep_array455;
		if (start == 1'b0 && ^(main_lrph12i_gep_array455) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array455_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep456 = add i32 %gep_int454, %gep_array455*/
		main_lrph12i_gep456 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep456 = add i32 %gep_int454, %gep_array455*/
	main_lrph12i_gep456_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array457 = mul i32 %464, 4*/
		main_lrph12i_gep_array457 = (main_lrph12i_464 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array457 = mul i32 %464, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_263)) begin
		main_lrph12i_gep_array457_reg <= main_lrph12i_gep_array457;
		if (start == 1'b0 && ^(main_lrph12i_gep_array457) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array457_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep458 = add i32 %gep456, %gep_array457*/
		main_lrph12i_gep458 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep458 = add i32 %gep456, %gep_array457*/
	main_lrph12i_gep458_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %466 = inttoptr i32 %gep458 to i32**/
		main_lrph12i_466 = main_lrph12i_gep458;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %466 = inttoptr i32 %gep458 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_264)) begin
		main_lrph12i_466_reg <= main_lrph12i_466;
		if (start == 1'b0 && ^(main_lrph12i_466) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_466_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %467 = load i32* %466, align 4, !tbaa !1*/
		main_lrph12i_467 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %467 = load i32* %466, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_265)) begin
		main_lrph12i_467_reg <= main_lrph12i_467;
		if (start == 1'b0 && ^(main_lrph12i_467) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_467_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %468 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
		main_lrph12i_468 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %468 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_265)) begin
		main_lrph12i_468_reg <= main_lrph12i_468;
		if (start == 1'b0 && ^(main_lrph12i_468) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_468_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %469 = and i32 %468, 15*/
		main_lrph12i_469 = (main_lrph12i_468 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %469 = and i32 %468, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_265)) begin
		main_lrph12i_469_reg <= main_lrph12i_469;
		if (start == 1'b0 && ^(main_lrph12i_469) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_469_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %470 = ashr i32 %468, 4*/
		main_lrph12i_470 = ($signed(main_lrph12i_468) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %470 = ashr i32 %468, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_265)) begin
		main_lrph12i_470_reg <= main_lrph12i_470;
		if (start == 1'b0 && ^(main_lrph12i_470) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_470_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int459 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12i_gep_int459 = 0; end
		main_lrph12i_gep_int459 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int459 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		main_lrph12i_gep_int459_reg <= main_lrph12i_gep_int459;
		if (start == 1'b0 && ^(main_lrph12i_gep_int459) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_int459_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array460 = mul i32 %470, 64*/
		main_lrph12i_gep_array460 = (main_lrph12i_470 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array460 = mul i32 %470, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_265)) begin
		main_lrph12i_gep_array460_reg <= main_lrph12i_gep_array460;
		if (start == 1'b0 && ^(main_lrph12i_gep_array460) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array460_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep461 = add i32 %gep_int459, %gep_array460*/
		main_lrph12i_gep461 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep461 = add i32 %gep_int459, %gep_array460*/
	main_lrph12i_gep461_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array462 = mul i32 %469, 4*/
		main_lrph12i_gep_array462 = (main_lrph12i_469 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array462 = mul i32 %469, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_265)) begin
		main_lrph12i_gep_array462_reg <= main_lrph12i_gep_array462;
		if (start == 1'b0 && ^(main_lrph12i_gep_array462) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array462_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep463 = add i32 %gep461, %gep_array462*/
		main_lrph12i_gep463 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep463 = add i32 %gep461, %gep_array462*/
	main_lrph12i_gep463_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %471 = inttoptr i32 %gep463 to i32**/
		main_lrph12i_471 = main_lrph12i_gep463;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %471 = inttoptr i32 %gep463 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_266)) begin
		main_lrph12i_471_reg <= main_lrph12i_471;
		if (start == 1'b0 && ^(main_lrph12i_471) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_471_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %472 = load i32* %471, align 4, !tbaa !1*/
		main_lrph12i_472 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %472 = load i32* %471, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_267)) begin
		main_lrph12i_472_reg <= main_lrph12i_472;
		if (start == 1'b0 && ^(main_lrph12i_472) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_472_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %473 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
		main_lrph12i_473 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %473 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_266)) begin
		main_lrph12i_473_reg <= main_lrph12i_473;
		if (start == 1'b0 && ^(main_lrph12i_473) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_473_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %474 = and i32 %473, 15*/
		main_lrph12i_474 = (main_lrph12i_473 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %474 = and i32 %473, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_266)) begin
		main_lrph12i_474_reg <= main_lrph12i_474;
		if (start == 1'b0 && ^(main_lrph12i_474) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_474_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %475 = ashr i32 %473, 4*/
		main_lrph12i_475 = ($signed(main_lrph12i_473) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %475 = ashr i32 %473, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_266)) begin
		main_lrph12i_475_reg <= main_lrph12i_475;
		if (start == 1'b0 && ^(main_lrph12i_475) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_475_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int464 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12i_gep_int464 = 0; end
		main_lrph12i_gep_int464 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int464 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		main_lrph12i_gep_int464_reg <= main_lrph12i_gep_int464;
		if (start == 1'b0 && ^(main_lrph12i_gep_int464) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_int464_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array465 = mul i32 %475, 64*/
		main_lrph12i_gep_array465 = (main_lrph12i_475 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array465 = mul i32 %475, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_266)) begin
		main_lrph12i_gep_array465_reg <= main_lrph12i_gep_array465;
		if (start == 1'b0 && ^(main_lrph12i_gep_array465) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array465_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep466 = add i32 %gep_int464, %gep_array465*/
		main_lrph12i_gep466 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep466 = add i32 %gep_int464, %gep_array465*/
	main_lrph12i_gep466_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array467 = mul i32 %474, 4*/
		main_lrph12i_gep_array467 = (main_lrph12i_474 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array467 = mul i32 %474, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_266)) begin
		main_lrph12i_gep_array467_reg <= main_lrph12i_gep_array467;
		if (start == 1'b0 && ^(main_lrph12i_gep_array467) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array467_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep468 = add i32 %gep466, %gep_array467*/
		main_lrph12i_gep468 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep468 = add i32 %gep466, %gep_array467*/
	main_lrph12i_gep468_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %476 = inttoptr i32 %gep468 to i32**/
		main_lrph12i_476 = main_lrph12i_gep468;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %476 = inttoptr i32 %gep468 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_267)) begin
		main_lrph12i_476_reg <= main_lrph12i_476;
		if (start == 1'b0 && ^(main_lrph12i_476) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_476_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %477 = load i32* %476, align 4, !tbaa !1*/
		main_lrph12i_477 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %477 = load i32* %476, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_269)) begin
		main_lrph12i_477_reg <= main_lrph12i_477;
		if (start == 1'b0 && ^(main_lrph12i_477) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_477_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %478 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
		main_lrph12i_478 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %478 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_267)) begin
		main_lrph12i_478_reg <= main_lrph12i_478;
		if (start == 1'b0 && ^(main_lrph12i_478) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_478_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %479 = and i32 %478, 15*/
		main_lrph12i_479 = (main_lrph12i_478 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %479 = and i32 %478, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_267)) begin
		main_lrph12i_479_reg <= main_lrph12i_479;
		if (start == 1'b0 && ^(main_lrph12i_479) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_479_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %480 = ashr i32 %478, 4*/
		main_lrph12i_480 = ($signed(main_lrph12i_478) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %480 = ashr i32 %478, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_267)) begin
		main_lrph12i_480_reg <= main_lrph12i_480;
		if (start == 1'b0 && ^(main_lrph12i_480) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_480_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int469 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12i_gep_int469 = 0; end
		main_lrph12i_gep_int469 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int469 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		main_lrph12i_gep_int469_reg <= main_lrph12i_gep_int469;
		if (start == 1'b0 && ^(main_lrph12i_gep_int469) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_int469_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array470 = mul i32 %480, 64*/
		main_lrph12i_gep_array470 = (main_lrph12i_480 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array470 = mul i32 %480, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_267)) begin
		main_lrph12i_gep_array470_reg <= main_lrph12i_gep_array470;
		if (start == 1'b0 && ^(main_lrph12i_gep_array470) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array470_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep471 = add i32 %gep_int469, %gep_array470*/
		main_lrph12i_gep471 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep471 = add i32 %gep_int469, %gep_array470*/
	main_lrph12i_gep471_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array472 = mul i32 %479, 4*/
		main_lrph12i_gep_array472 = (main_lrph12i_479 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array472 = mul i32 %479, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_267)) begin
		main_lrph12i_gep_array472_reg <= main_lrph12i_gep_array472;
		if (start == 1'b0 && ^(main_lrph12i_gep_array472) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array472_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep473 = add i32 %gep471, %gep_array472*/
		main_lrph12i_gep473 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep473 = add i32 %gep471, %gep_array472*/
	main_lrph12i_gep473_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %481 = inttoptr i32 %gep473 to i32**/
		main_lrph12i_481 = main_lrph12i_gep473;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %481 = inttoptr i32 %gep473 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_268)) begin
		main_lrph12i_481_reg <= main_lrph12i_481;
		if (start == 1'b0 && ^(main_lrph12i_481) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_481_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %482 = load i32* %481, align 4, !tbaa !1*/
		main_lrph12i_482 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %482 = load i32* %481, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_271)) begin
		main_lrph12i_482_reg <= main_lrph12i_482;
		if (start == 1'b0 && ^(main_lrph12i_482) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_482_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %483 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
		main_lrph12i_483 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %483 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_272)) begin
		main_lrph12i_483_reg <= main_lrph12i_483;
		if (start == 1'b0 && ^(main_lrph12i_483) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_483_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %484 = and i32 %483, 15*/
		main_lrph12i_484 = (main_lrph12i_483 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %484 = and i32 %483, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_272)) begin
		main_lrph12i_484_reg <= main_lrph12i_484;
		if (start == 1'b0 && ^(main_lrph12i_484) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_484_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %485 = ashr i32 %483, 4*/
		main_lrph12i_485 = ($signed(main_lrph12i_483) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %485 = ashr i32 %483, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_272)) begin
		main_lrph12i_485_reg <= main_lrph12i_485;
		if (start == 1'b0 && ^(main_lrph12i_485) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_485_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int474 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12i_gep_int474 = 0; end
		main_lrph12i_gep_int474 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int474 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		main_lrph12i_gep_int474_reg <= main_lrph12i_gep_int474;
		if (start == 1'b0 && ^(main_lrph12i_gep_int474) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_int474_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array475 = mul i32 %485, 64*/
		main_lrph12i_gep_array475 = (main_lrph12i_485 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array475 = mul i32 %485, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_272)) begin
		main_lrph12i_gep_array475_reg <= main_lrph12i_gep_array475;
		if (start == 1'b0 && ^(main_lrph12i_gep_array475) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array475_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep476 = add i32 %gep_int474, %gep_array475*/
		main_lrph12i_gep476 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep476 = add i32 %gep_int474, %gep_array475*/
	main_lrph12i_gep476_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array477 = mul i32 %484, 4*/
		main_lrph12i_gep_array477 = (main_lrph12i_484 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array477 = mul i32 %484, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_272)) begin
		main_lrph12i_gep_array477_reg <= main_lrph12i_gep_array477;
		if (start == 1'b0 && ^(main_lrph12i_gep_array477) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array477_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep478 = add i32 %gep476, %gep_array477*/
		main_lrph12i_gep478 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep478 = add i32 %gep476, %gep_array477*/
	main_lrph12i_gep478_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %486 = inttoptr i32 %gep478 to i32**/
		main_lrph12i_486 = main_lrph12i_gep478;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %486 = inttoptr i32 %gep478 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_273)) begin
		main_lrph12i_486_reg <= main_lrph12i_486;
		if (start == 1'b0 && ^(main_lrph12i_486) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_486_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %487 = load i32* %486, align 4, !tbaa !1*/
		main_lrph12i_487 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %487 = load i32* %486, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_274)) begin
		main_lrph12i_487_reg <= main_lrph12i_487;
		if (start == 1'b0 && ^(main_lrph12i_487) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_487_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %488 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
		main_lrph12i_488 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %488 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_273)) begin
		main_lrph12i_488_reg <= main_lrph12i_488;
		if (start == 1'b0 && ^(main_lrph12i_488) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_488_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %489 = and i32 %488, 15*/
		main_lrph12i_489 = (main_lrph12i_488 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %489 = and i32 %488, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_273)) begin
		main_lrph12i_489_reg <= main_lrph12i_489;
		if (start == 1'b0 && ^(main_lrph12i_489) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_489_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %490 = ashr i32 %488, 4*/
		main_lrph12i_490 = ($signed(main_lrph12i_488) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %490 = ashr i32 %488, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_273)) begin
		main_lrph12i_490_reg <= main_lrph12i_490;
		if (start == 1'b0 && ^(main_lrph12i_490) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_490_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int479 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12i_gep_int479 = 0; end
		main_lrph12i_gep_int479 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int479 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		main_lrph12i_gep_int479_reg <= main_lrph12i_gep_int479;
		if (start == 1'b0 && ^(main_lrph12i_gep_int479) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_int479_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array480 = mul i32 %490, 64*/
		main_lrph12i_gep_array480 = (main_lrph12i_490 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array480 = mul i32 %490, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_273)) begin
		main_lrph12i_gep_array480_reg <= main_lrph12i_gep_array480;
		if (start == 1'b0 && ^(main_lrph12i_gep_array480) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array480_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep481 = add i32 %gep_int479, %gep_array480*/
		main_lrph12i_gep481 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep481 = add i32 %gep_int479, %gep_array480*/
	main_lrph12i_gep481_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array482 = mul i32 %489, 4*/
		main_lrph12i_gep_array482 = (main_lrph12i_489 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array482 = mul i32 %489, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_273)) begin
		main_lrph12i_gep_array482_reg <= main_lrph12i_gep_array482;
		if (start == 1'b0 && ^(main_lrph12i_gep_array482) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array482_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep483 = add i32 %gep481, %gep_array482*/
		main_lrph12i_gep483 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep483 = add i32 %gep481, %gep_array482*/
	main_lrph12i_gep483_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %491 = inttoptr i32 %gep483 to i32**/
		main_lrph12i_491 = main_lrph12i_gep483;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %491 = inttoptr i32 %gep483 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_274)) begin
		main_lrph12i_491_reg <= main_lrph12i_491;
		if (start == 1'b0 && ^(main_lrph12i_491) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_491_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %492 = load i32* %491, align 4, !tbaa !1*/
		main_lrph12i_492 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %492 = load i32* %491, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_276)) begin
		main_lrph12i_492_reg <= main_lrph12i_492;
		if (start == 1'b0 && ^(main_lrph12i_492) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_492_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %493 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
		main_lrph12i_493 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %493 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_274)) begin
		main_lrph12i_493_reg <= main_lrph12i_493;
		if (start == 1'b0 && ^(main_lrph12i_493) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_493_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %494 = and i32 %493, 15*/
		main_lrph12i_494 = (main_lrph12i_493 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %494 = and i32 %493, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_274)) begin
		main_lrph12i_494_reg <= main_lrph12i_494;
		if (start == 1'b0 && ^(main_lrph12i_494) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_494_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %495 = ashr i32 %493, 4*/
		main_lrph12i_495 = ($signed(main_lrph12i_493) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %495 = ashr i32 %493, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_274)) begin
		main_lrph12i_495_reg <= main_lrph12i_495;
		if (start == 1'b0 && ^(main_lrph12i_495) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_495_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int484 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph12i_gep_int484 = 0; end
		main_lrph12i_gep_int484 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_int484 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		main_lrph12i_gep_int484_reg <= main_lrph12i_gep_int484;
		if (start == 1'b0 && ^(main_lrph12i_gep_int484) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_int484_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array485 = mul i32 %495, 64*/
		main_lrph12i_gep_array485 = (main_lrph12i_495 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array485 = mul i32 %495, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_274)) begin
		main_lrph12i_gep_array485_reg <= main_lrph12i_gep_array485;
		if (start == 1'b0 && ^(main_lrph12i_gep_array485) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array485_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep486 = add i32 %gep_int484, %gep_array485*/
		main_lrph12i_gep486 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep486 = add i32 %gep_int484, %gep_array485*/
	main_lrph12i_gep486_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array487 = mul i32 %494, 4*/
		main_lrph12i_gep_array487 = (main_lrph12i_494 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %gep_array487 = mul i32 %494, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_274)) begin
		main_lrph12i_gep_array487_reg <= main_lrph12i_gep_array487;
		if (start == 1'b0 && ^(main_lrph12i_gep_array487) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_gep_array487_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %gep488 = add i32 %gep486, %gep_array487*/
		main_lrph12i_gep488 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph12.i*/
/*   %gep488 = add i32 %gep486, %gep_array487*/
	main_lrph12i_gep488_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %496 = inttoptr i32 %gep488 to i32**/
		main_lrph12i_496 = main_lrph12i_gep488;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %496 = inttoptr i32 %gep488 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_275)) begin
		main_lrph12i_496_reg <= main_lrph12i_496;
		if (start == 1'b0 && ^(main_lrph12i_496) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_496_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %497 = load i32* %496, align 4, !tbaa !1*/
		main_lrph12i_497 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %497 = load i32* %496, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_278)) begin
		main_lrph12i_497_reg <= main_lrph12i_497;
		if (start == 1'b0 && ^(main_lrph12i_497) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_497_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %i.0.i = add nsw i32 %i.011.i, -1*/
		main_lrph12i_i0i = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %i.0.i = add nsw i32 %i.011.i, -1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		main_lrph12i_i0i_reg <= main_lrph12i_i0i;
		if (start == 1'b0 && ^(main_lrph12i_i0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_i0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %498 = icmp sgt i32 %i.0.i, 0*/
		main_lrph12i_498 = ($signed(main_lrph12i_i0i) > $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %498 = icmp sgt i32 %i.0.i, 0*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		main_lrph12i_498_reg <= main_lrph12i_498;
		if (start == 1'b0 && ^(main_lrph12i_498) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_498_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %j.02.i2.i11 = phi i32 [ %523, %._crit_edge.i ], [ 0, %.lr.ph12.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrph12i_279) & (memory_controller_waitrequest == 1'd0)) & (main_lrph12i_498_reg == 1'd0))) begin
		main__crit_edgei_j02i2i11 = 32'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %j.02.i2.i11 = phi i32 [ %523, %._crit_edge.i ], [ 0, %.lr.ph12.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edgei_293) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei_exitcond32_reg == 1'd1))) */ begin
		main__crit_edgei_j02i2i11 = main__crit_edgei_523_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %j.02.i2.i11 = phi i32 [ %523, %._crit_edge.i ], [ 0, %.lr.ph12.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrph12i_279) & (memory_controller_waitrequest == 1'd0)) & (main_lrph12i_498_reg == 1'd0))) begin
		main__crit_edgei_j02i2i11_reg <= main__crit_edgei_j02i2i11;
		if (start == 1'b0 && ^(main__crit_edgei_j02i2i11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_j02i2i11_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %j.02.i2.i11 = phi i32 [ %523, %._crit_edge.i ], [ 0, %.lr.ph12.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgei_293) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei_exitcond32_reg == 1'd1))) begin
		main__crit_edgei_j02i2i11_reg <= main__crit_edgei_j02i2i11;
		if (start == 1'b0 && ^(main__crit_edgei_j02i2i11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_j02i2i11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int489 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main__crit_edgei_gep_int489 = 0; end
		main__crit_edgei_gep_int489 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int489 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main__crit_edgei_gep_int489_reg <= main__crit_edgei_gep_int489;
		if (start == 1'b0 && ^(main__crit_edgei_gep_int489) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_int489_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array490 = mul i32 %j.02.i2.i11, 4*/
		main__crit_edgei_gep_array490 = (main__crit_edgei_j02i2i11_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array490 = mul i32 %j.02.i2.i11, 4*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main__crit_edgei_gep_array490_reg <= main__crit_edgei_gep_array490;
		if (start == 1'b0 && ^(main__crit_edgei_gep_array490) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_array490_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep491 = add i32 %gep_int489, %gep_array490*/
		main__crit_edgei_gep491 = main_signed_add_32_0;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %gep491 = add i32 %gep_int489, %gep_array490*/
	main__crit_edgei_gep491_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %499 = inttoptr i32 %gep491 to i32**/
		main__crit_edgei_499 = main__crit_edgei_gep491;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %499 = inttoptr i32 %gep491 to i32**/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main__crit_edgei_499_reg <= main__crit_edgei_499;
		if (start == 1'b0 && ^(main__crit_edgei_499) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_499_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %500 = load i32* %499, align 4, !tbaa !1*/
		main__crit_edgei_500 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %500 = load i32* %499, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_283)) begin
		main__crit_edgei_500_reg <= main__crit_edgei_500;
		if (start == 1'b0 && ^(main__crit_edgei_500) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_500_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %501 = shl nsw i32 %j.02.i2.i11, 2*/
		main__crit_edgei_501 = (main__crit_edgei_j02i2i11_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %501 = shl nsw i32 %j.02.i2.i11, 2*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main__crit_edgei_501_reg <= main__crit_edgei_501;
		if (start == 1'b0 && ^(main__crit_edgei_501) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_501_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int492 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main__crit_edgei_gep_int492 = 0; end
		main__crit_edgei_gep_int492 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int492 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main__crit_edgei_gep_int492_reg <= main__crit_edgei_gep_int492;
		if (start == 1'b0 && ^(main__crit_edgei_gep_int492) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_int492_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array493 = mul i32 %501, 4*/
		main__crit_edgei_gep_array493 = (main__crit_edgei_501 * 32'd4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array493 = mul i32 %501, 4*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main__crit_edgei_gep_array493_reg <= main__crit_edgei_gep_array493;
		if (start == 1'b0 && ^(main__crit_edgei_gep_array493) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_array493_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep494 = add i32 %gep_int492, %gep_array493*/
		main__crit_edgei_gep494 = main_signed_add_32_1;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %gep494 = add i32 %gep_int492, %gep_array493*/
	main__crit_edgei_gep494_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %502 = inttoptr i32 %gep494 to i32**/
		main__crit_edgei_502 = main__crit_edgei_gep494;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %502 = inttoptr i32 %gep494 to i32**/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main__crit_edgei_502_reg <= main__crit_edgei_502;
		if (start == 1'b0 && ^(main__crit_edgei_502) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_502_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %503 = load i32* %502, align 4, !tbaa !1*/
		main__crit_edgei_503 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %503 = load i32* %502, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_283)) begin
		main__crit_edgei_503_reg <= main__crit_edgei_503;
		if (start == 1'b0 && ^(main__crit_edgei_503) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_503_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %504 = xor i32 %503, %500*/
		main__crit_edgei_504 = (main__crit_edgei_503 ^ main__crit_edgei_500);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %504 = xor i32 %503, %500*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_283)) begin
		main__crit_edgei_504_reg <= main__crit_edgei_504;
		if (start == 1'b0 && ^(main__crit_edgei_504) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_504_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int495 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main__crit_edgei_gep_int495 = 0; end
		main__crit_edgei_gep_int495 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int495 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main__crit_edgei_gep_int495_reg <= main__crit_edgei_gep_int495;
		if (start == 1'b0 && ^(main__crit_edgei_gep_int495) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_int495_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep496 = add i32 %gep_int495, 480*/
		main__crit_edgei_gep496 = main_signed_add_32_0;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %gep496 = add i32 %gep_int495, 480*/
	main__crit_edgei_gep496_reg = main_AddRoundKeyexit_crit_edgei_gep217_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array497 = mul i32 %j.02.i2.i11, 4*/
		main__crit_edgei_gep_array497 = (main__crit_edgei_j02i2i11_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array497 = mul i32 %j.02.i2.i11, 4*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main__crit_edgei_gep_array497_reg <= main__crit_edgei_gep_array497;
		if (start == 1'b0 && ^(main__crit_edgei_gep_array497) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_array497_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep498 = add i32 %gep496, %gep_array497*/
		main__crit_edgei_gep498 = main_signed_add_32_2;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %gep498 = add i32 %gep496, %gep_array497*/
	main__crit_edgei_gep498_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %505 = inttoptr i32 %gep498 to i32**/
		main__crit_edgei_505 = main__crit_edgei_gep498;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %505 = inttoptr i32 %gep498 to i32**/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main__crit_edgei_505_reg <= main__crit_edgei_505;
		if (start == 1'b0 && ^(main__crit_edgei_505) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_505_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %506 = load i32* %505, align 4, !tbaa !1*/
		main__crit_edgei_506 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %506 = load i32* %505, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_286)) begin
		main__crit_edgei_506_reg <= main__crit_edgei_506;
		if (start == 1'b0 && ^(main__crit_edgei_506) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_506_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %507 = or i32 %501, 1*/
		main__crit_edgei_507 = (main__crit_edgei_501 | 32'd1);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %507 = or i32 %501, 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main__crit_edgei_507_reg <= main__crit_edgei_507;
		if (start == 1'b0 && ^(main__crit_edgei_507) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_507_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int499 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main__crit_edgei_gep_int499 = 0; end
		main__crit_edgei_gep_int499 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int499 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main__crit_edgei_gep_int499_reg <= main__crit_edgei_gep_int499;
		if (start == 1'b0 && ^(main__crit_edgei_gep_int499) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_int499_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array500 = mul i32 %507, 4*/
		main__crit_edgei_gep_array500 = (main__crit_edgei_507 * 32'd4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array500 = mul i32 %507, 4*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main__crit_edgei_gep_array500_reg <= main__crit_edgei_gep_array500;
		if (start == 1'b0 && ^(main__crit_edgei_gep_array500) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_array500_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep501 = add i32 %gep_int499, %gep_array500*/
		main__crit_edgei_gep501 = main_signed_add_32_3;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %gep501 = add i32 %gep_int499, %gep_array500*/
	main__crit_edgei_gep501_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %508 = inttoptr i32 %gep501 to i32**/
		main__crit_edgei_508 = main__crit_edgei_gep501;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %508 = inttoptr i32 %gep501 to i32**/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main__crit_edgei_508_reg <= main__crit_edgei_508;
		if (start == 1'b0 && ^(main__crit_edgei_508) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_508_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %509 = load i32* %508, align 4, !tbaa !1*/
		main__crit_edgei_509 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %509 = load i32* %508, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_286)) begin
		main__crit_edgei_509_reg <= main__crit_edgei_509;
		if (start == 1'b0 && ^(main__crit_edgei_509) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_509_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %510 = xor i32 %509, %506*/
		main__crit_edgei_510 = (main__crit_edgei_509 ^ main__crit_edgei_506);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %510 = xor i32 %509, %506*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_286)) begin
		main__crit_edgei_510_reg <= main__crit_edgei_510;
		if (start == 1'b0 && ^(main__crit_edgei_510) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_510_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int502 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main__crit_edgei_gep_int502 = 0; end
		main__crit_edgei_gep_int502 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int502 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main__crit_edgei_gep_int502_reg <= main__crit_edgei_gep_int502;
		if (start == 1'b0 && ^(main__crit_edgei_gep_int502) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_int502_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep503 = add i32 %gep_int502, 960*/
		main__crit_edgei_gep503 = main_signed_add_32_1;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %gep503 = add i32 %gep_int502, 960*/
	main__crit_edgei_gep503_reg = main_AddRoundKeyexit_crit_edgei_gep221_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array504 = mul i32 %j.02.i2.i11, 4*/
		main__crit_edgei_gep_array504 = (main__crit_edgei_j02i2i11_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array504 = mul i32 %j.02.i2.i11, 4*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main__crit_edgei_gep_array504_reg <= main__crit_edgei_gep_array504;
		if (start == 1'b0 && ^(main__crit_edgei_gep_array504) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_array504_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep505 = add i32 %gep503, %gep_array504*/
		main__crit_edgei_gep505 = main_signed_add_32_4;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %gep505 = add i32 %gep503, %gep_array504*/
	main__crit_edgei_gep505_reg = main_AddRoundKeyexit_crit_edgei_239_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %511 = inttoptr i32 %gep505 to i32**/
		main__crit_edgei_511 = main__crit_edgei_gep505;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %511 = inttoptr i32 %gep505 to i32**/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main__crit_edgei_511_reg <= main__crit_edgei_511;
		if (start == 1'b0 && ^(main__crit_edgei_511) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_511_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %512 = load i32* %511, align 4, !tbaa !1*/
		main__crit_edgei_512 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %512 = load i32* %511, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_289)) begin
		main__crit_edgei_512_reg <= main__crit_edgei_512;
		if (start == 1'b0 && ^(main__crit_edgei_512) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_512_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %513 = or i32 %501, 2*/
		main__crit_edgei_513 = (main__crit_edgei_501 | 32'd2);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %513 = or i32 %501, 2*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main__crit_edgei_513_reg <= main__crit_edgei_513;
		if (start == 1'b0 && ^(main__crit_edgei_513) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_513_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int506 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main__crit_edgei_gep_int506 = 0; end
		main__crit_edgei_gep_int506 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int506 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main__crit_edgei_gep_int506_reg <= main__crit_edgei_gep_int506;
		if (start == 1'b0 && ^(main__crit_edgei_gep_int506) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_int506_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array507 = mul i32 %513, 4*/
		main__crit_edgei_gep_array507 = (main__crit_edgei_513 * 32'd4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array507 = mul i32 %513, 4*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main__crit_edgei_gep_array507_reg <= main__crit_edgei_gep_array507;
		if (start == 1'b0 && ^(main__crit_edgei_gep_array507) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_array507_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep508 = add i32 %gep_int506, %gep_array507*/
		main__crit_edgei_gep508 = main_signed_add_32_5;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %gep508 = add i32 %gep_int506, %gep_array507*/
	main__crit_edgei_gep508_reg = main_2_gep17_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %514 = inttoptr i32 %gep508 to i32**/
		main__crit_edgei_514 = main__crit_edgei_gep508;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %514 = inttoptr i32 %gep508 to i32**/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main__crit_edgei_514_reg <= main__crit_edgei_514;
		if (start == 1'b0 && ^(main__crit_edgei_514) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_514_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %515 = load i32* %514, align 4, !tbaa !1*/
		main__crit_edgei_515 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %515 = load i32* %514, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_289)) begin
		main__crit_edgei_515_reg <= main__crit_edgei_515;
		if (start == 1'b0 && ^(main__crit_edgei_515) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_515_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %516 = xor i32 %515, %512*/
		main__crit_edgei_516 = (main__crit_edgei_515 ^ main__crit_edgei_512);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %516 = xor i32 %515, %512*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_289)) begin
		main__crit_edgei_516_reg <= main__crit_edgei_516;
		if (start == 1'b0 && ^(main__crit_edgei_516) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_516_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int509 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main__crit_edgei_gep_int509 = 0; end
		main__crit_edgei_gep_int509 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int509 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main__crit_edgei_gep_int509_reg <= main__crit_edgei_gep_int509;
		if (start == 1'b0 && ^(main__crit_edgei_gep_int509) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_int509_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep510 = add i32 %gep_int509, 1440*/
		main__crit_edgei_gep510 = main_signed_add_32_2;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %gep510 = add i32 %gep_int509, 1440*/
	main__crit_edgei_gep510_reg = main_AddRoundKeyexit_crit_edgei_gep228_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array511 = mul i32 %j.02.i2.i11, 4*/
		main__crit_edgei_gep_array511 = (main__crit_edgei_j02i2i11_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array511 = mul i32 %j.02.i2.i11, 4*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main__crit_edgei_gep_array511_reg <= main__crit_edgei_gep_array511;
		if (start == 1'b0 && ^(main__crit_edgei_gep_array511) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_array511_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep512 = add i32 %gep510, %gep_array511*/
		main__crit_edgei_gep512 = main_signed_add_32_6;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %gep512 = add i32 %gep510, %gep_array511*/
	main__crit_edgei_gep512_reg = main_preheaderi4i_255_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %517 = inttoptr i32 %gep512 to i32**/
		main__crit_edgei_517 = main__crit_edgei_gep512;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %517 = inttoptr i32 %gep512 to i32**/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main__crit_edgei_517_reg <= main__crit_edgei_517;
		if (start == 1'b0 && ^(main__crit_edgei_517) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_517_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %518 = load i32* %517, align 4, !tbaa !1*/
		main__crit_edgei_518 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %518 = load i32* %517, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_292)) begin
		main__crit_edgei_518_reg <= main__crit_edgei_518;
		if (start == 1'b0 && ^(main__crit_edgei_518) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_518_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %519 = or i32 %501, 3*/
		main__crit_edgei_519 = (main__crit_edgei_501 | 32'd3);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %519 = or i32 %501, 3*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main__crit_edgei_519_reg <= main__crit_edgei_519;
		if (start == 1'b0 && ^(main__crit_edgei_519) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_519_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int513 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main__crit_edgei_gep_int513 = 0; end
		main__crit_edgei_gep_int513 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int513 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main__crit_edgei_gep_int513_reg <= main__crit_edgei_gep_int513;
		if (start == 1'b0 && ^(main__crit_edgei_gep_int513) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_int513_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array514 = mul i32 %519, 4*/
		main__crit_edgei_gep_array514 = (main__crit_edgei_519 * 32'd4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array514 = mul i32 %519, 4*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main__crit_edgei_gep_array514_reg <= main__crit_edgei_gep_array514;
		if (start == 1'b0 && ^(main__crit_edgei_gep_array514) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_array514_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep515 = add i32 %gep_int513, %gep_array514*/
		main__crit_edgei_gep515 = main_signed_add_32_7;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %gep515 = add i32 %gep_int513, %gep_array514*/
	main__crit_edgei_gep515_reg = main_preheaderi4i_249_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %520 = inttoptr i32 %gep515 to i32**/
		main__crit_edgei_520 = main__crit_edgei_gep515;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %520 = inttoptr i32 %gep515 to i32**/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main__crit_edgei_520_reg <= main__crit_edgei_520;
		if (start == 1'b0 && ^(main__crit_edgei_520) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_520_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %521 = load i32* %520, align 4, !tbaa !1*/
		main__crit_edgei_521 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %521 = load i32* %520, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_292)) begin
		main__crit_edgei_521_reg <= main__crit_edgei_521;
		if (start == 1'b0 && ^(main__crit_edgei_521) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_521_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %522 = xor i32 %521, %518*/
		main__crit_edgei_522 = (main__crit_edgei_521 ^ main__crit_edgei_518);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %522 = xor i32 %521, %518*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_292)) begin
		main__crit_edgei_522_reg <= main__crit_edgei_522;
		if (start == 1'b0 && ^(main__crit_edgei_522) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_522_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %523 = add nsw i32 %j.02.i2.i11, 1*/
		main__crit_edgei_523 = main_signed_add_32_3;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %523 = add nsw i32 %j.02.i2.i11, 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main__crit_edgei_523_reg <= main__crit_edgei_523;
		if (start == 1'b0 && ^(main__crit_edgei_523) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_523_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %exitcond32 = icmp ne i32 %523, 4*/
		main__crit_edgei_exitcond32 = (main__crit_edgei_523 != 32'd4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %exitcond32 = icmp ne i32 %523, 4*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main__crit_edgei_exitcond32_reg <= main__crit_edgei_exitcond32;
		if (start == 1'b0 && ^(main__crit_edgei_exitcond32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_exitcond32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %j.11.i3.i13 = phi i32 [ %532, %.preheader.i4.i14 ], [ 0, %._crit_edge.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgei_293) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei_exitcond32_reg == 1'd0))) begin
		main_preheaderi4i14_j11i3i13 = 32'd0;
	end
	/* main: %.preheader.i4.i14*/
	/*   %j.11.i3.i13 = phi i32 [ %532, %.preheader.i4.i14 ], [ 0, %._crit_edge.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi4i14_307) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi4i14_exitcond31_reg == 1'd1))) */ begin
		main_preheaderi4i14_j11i3i13 = main_preheaderi4i14_532_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %j.11.i3.i13 = phi i32 [ %532, %.preheader.i4.i14 ], [ 0, %._crit_edge.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgei_293) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei_exitcond32_reg == 1'd0))) begin
		main_preheaderi4i14_j11i3i13_reg <= main_preheaderi4i14_j11i3i13;
		if (start == 1'b0 && ^(main_preheaderi4i14_j11i3i13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_j11i3i13_reg"); $finish; end
	end
	/* main: %.preheader.i4.i14*/
	/*   %j.11.i3.i13 = phi i32 [ %532, %.preheader.i4.i14 ], [ 0, %._crit_edge.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi4i14_307) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi4i14_exitcond31_reg == 1'd1))) begin
		main_preheaderi4i14_j11i3i13_reg <= main_preheaderi4i14_j11i3i13;
		if (start == 1'b0 && ^(main_preheaderi4i14_j11i3i13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_j11i3i13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_int516 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_preheaderi4i14_gep_int516 = 0; end
		main_preheaderi4i14_gep_int516 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_int516 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_preheaderi4i14_gep_int516_reg <= main_preheaderi4i14_gep_int516;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep_int516) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_gep_int516_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_array517 = mul i32 %j.11.i3.i13, 4*/
		main_preheaderi4i14_gep_array517 = (main_preheaderi4i14_j11i3i13_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_array517 = mul i32 %j.11.i3.i13, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_preheaderi4i14_gep_array517_reg <= main_preheaderi4i14_gep_array517;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep_array517) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_gep_array517_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep518 = add i32 %gep_int516, %gep_array517*/
		main_preheaderi4i14_gep518 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i4.i14*/
/*   %gep518 = add i32 %gep_int516, %gep_array517*/
	main_preheaderi4i14_gep518_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %524 = inttoptr i32 %gep518 to i32**/
		main_preheaderi4i14_524 = main_preheaderi4i14_gep518;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %524 = inttoptr i32 %gep518 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		main_preheaderi4i14_524_reg <= main_preheaderi4i14_524;
		if (start == 1'b0 && ^(main_preheaderi4i14_524) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_524_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %525 = load i32* %524, align 4, !tbaa !1*/
		main_preheaderi4i14_525 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %525 = load i32* %524, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_297)) begin
		main_preheaderi4i14_525_reg <= main_preheaderi4i14_525;
		if (start == 1'b0 && ^(main_preheaderi4i14_525) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_525_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %526 = shl nsw i32 %j.11.i3.i13, 2*/
		main_preheaderi4i14_526 = (main_preheaderi4i14_j11i3i13_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %526 = shl nsw i32 %j.11.i3.i13, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_preheaderi4i14_526_reg <= main_preheaderi4i14_526;
		if (start == 1'b0 && ^(main_preheaderi4i14_526) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_526_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_int519 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_preheaderi4i14_gep_int519 = 0; end
		main_preheaderi4i14_gep_int519 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_int519 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_preheaderi4i14_gep_int519_reg <= main_preheaderi4i14_gep_int519;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep_int519) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_gep_int519_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_array520 = mul i32 %526, 4*/
		main_preheaderi4i14_gep_array520 = (main_preheaderi4i14_526 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_array520 = mul i32 %526, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_preheaderi4i14_gep_array520_reg <= main_preheaderi4i14_gep_array520;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep_array520) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_gep_array520_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep521 = add i32 %gep_int519, %gep_array520*/
		main_preheaderi4i14_gep521 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i4.i14*/
/*   %gep521 = add i32 %gep_int519, %gep_array520*/
	main_preheaderi4i14_gep521_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %527 = inttoptr i32 %gep521 to i32**/
		main_preheaderi4i14_527 = main_preheaderi4i14_gep521;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %527 = inttoptr i32 %gep521 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		main_preheaderi4i14_527_reg <= main_preheaderi4i14_527;
		if (start == 1'b0 && ^(main_preheaderi4i14_527) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_527_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %528 = load i32* %527, align 4, !tbaa !1*/
		main_preheaderi4i14_528 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %528 = load i32* %527, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_297)) begin
		main_preheaderi4i14_528_reg <= main_preheaderi4i14_528;
		if (start == 1'b0 && ^(main_preheaderi4i14_528) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_528_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %529 = xor i32 %528, %525*/
		main_preheaderi4i14_529 = (main_preheaderi4i14_528 ^ main_preheaderi4i14_525);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %529 = xor i32 %528, %525*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_297)) begin
		main_preheaderi4i14_529_reg <= main_preheaderi4i14_529;
		if (start == 1'b0 && ^(main_preheaderi4i14_529) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_529_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_int522 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_preheaderi4i14_gep_int522 = 0; end
		main_preheaderi4i14_gep_int522 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_int522 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_preheaderi4i14_gep_int522_reg <= main_preheaderi4i14_gep_int522;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep_int522) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_gep_int522_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep523 = add i32 %gep_int522, 480*/
		main_preheaderi4i14_gep523 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i4.i14*/
/*   %gep523 = add i32 %gep_int522, 480*/
	main_preheaderi4i14_gep523_reg = main_AddRoundKeyexit_crit_edgei_gep217_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_array524 = mul i32 %j.11.i3.i13, 4*/
		main_preheaderi4i14_gep_array524 = (main_preheaderi4i14_j11i3i13_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_array524 = mul i32 %j.11.i3.i13, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_preheaderi4i14_gep_array524_reg <= main_preheaderi4i14_gep_array524;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep_array524) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_gep_array524_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep525 = add i32 %gep523, %gep_array524*/
		main_preheaderi4i14_gep525 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.preheader.i4.i14*/
/*   %gep525 = add i32 %gep523, %gep_array524*/
	main_preheaderi4i14_gep525_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %530 = inttoptr i32 %gep525 to i32**/
		main_preheaderi4i14_530 = main_preheaderi4i14_gep525;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %530 = inttoptr i32 %gep525 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		main_preheaderi4i14_530_reg <= main_preheaderi4i14_530;
		if (start == 1'b0 && ^(main_preheaderi4i14_530) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_530_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %531 = load i32* %530, align 4, !tbaa !1*/
		main_preheaderi4i14_531 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %531 = load i32* %530, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_300)) begin
		main_preheaderi4i14_531_reg <= main_preheaderi4i14_531;
		if (start == 1'b0 && ^(main_preheaderi4i14_531) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_531_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %532 = add nsw i32 %j.11.i3.i13, 1*/
		main_preheaderi4i14_532 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %532 = add nsw i32 %j.11.i3.i13, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_preheaderi4i14_532_reg <= main_preheaderi4i14_532;
		if (start == 1'b0 && ^(main_preheaderi4i14_532) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_532_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_int526 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_preheaderi4i14_gep_int526 = 0; end
		main_preheaderi4i14_gep_int526 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_int526 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_preheaderi4i14_gep_int526_reg <= main_preheaderi4i14_gep_int526;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep_int526) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_gep_int526_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_array527 = mul i32 %532, 4*/
		main_preheaderi4i14_gep_array527 = (main_preheaderi4i14_532_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_array527 = mul i32 %532, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		main_preheaderi4i14_gep_array527_reg <= main_preheaderi4i14_gep_array527;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep_array527) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_gep_array527_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep528 = add i32 %gep_int526, %gep_array527*/
		main_preheaderi4i14_gep528 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i4.i14*/
/*   %gep528 = add i32 %gep_int526, %gep_array527*/
	main_preheaderi4i14_gep528_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %533 = inttoptr i32 %gep528 to i32**/
		main_preheaderi4i14_533 = main_preheaderi4i14_gep528;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %533 = inttoptr i32 %gep528 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_296)) begin
		main_preheaderi4i14_533_reg <= main_preheaderi4i14_533;
		if (start == 1'b0 && ^(main_preheaderi4i14_533) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_533_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %534 = load i32* %533, align 4, !tbaa !1*/
		main_preheaderi4i14_534 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %534 = load i32* %533, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_300)) begin
		main_preheaderi4i14_534_reg <= main_preheaderi4i14_534;
		if (start == 1'b0 && ^(main_preheaderi4i14_534) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_534_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %535 = xor i32 %534, %531*/
		main_preheaderi4i14_535 = (main_preheaderi4i14_534 ^ main_preheaderi4i14_531);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %535 = xor i32 %534, %531*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_300)) begin
		main_preheaderi4i14_535_reg <= main_preheaderi4i14_535;
		if (start == 1'b0 && ^(main_preheaderi4i14_535) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_535_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_int529 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_preheaderi4i14_gep_int529 = 0; end
		main_preheaderi4i14_gep_int529 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_int529 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_preheaderi4i14_gep_int529_reg <= main_preheaderi4i14_gep_int529;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep_int529) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_gep_int529_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep530 = add i32 %gep_int529, 960*/
		main_preheaderi4i14_gep530 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.preheader.i4.i14*/
/*   %gep530 = add i32 %gep_int529, 960*/
	main_preheaderi4i14_gep530_reg = main_AddRoundKeyexit_crit_edgei_gep228_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_array531 = mul i32 %j.11.i3.i13, 4*/
		main_preheaderi4i14_gep_array531 = (main_preheaderi4i14_j11i3i13_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_array531 = mul i32 %j.11.i3.i13, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_preheaderi4i14_gep_array531_reg <= main_preheaderi4i14_gep_array531;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep_array531) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_gep_array531_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep532 = add i32 %gep530, %gep_array531*/
		main_preheaderi4i14_gep532 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.preheader.i4.i14*/
/*   %gep532 = add i32 %gep530, %gep_array531*/
	main_preheaderi4i14_gep532_reg = main_lrph12i_gep448_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %536 = inttoptr i32 %gep532 to i32**/
		main_preheaderi4i14_536 = main_preheaderi4i14_gep532;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %536 = inttoptr i32 %gep532 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		main_preheaderi4i14_536_reg <= main_preheaderi4i14_536;
		if (start == 1'b0 && ^(main_preheaderi4i14_536) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_536_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %537 = load i32* %536, align 4, !tbaa !1*/
		main_preheaderi4i14_537 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %537 = load i32* %536, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_303)) begin
		main_preheaderi4i14_537_reg <= main_preheaderi4i14_537;
		if (start == 1'b0 && ^(main_preheaderi4i14_537) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_537_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %538 = add nsw i32 %j.11.i3.i13, 2*/
		main_preheaderi4i14_538 = main_signed_add_32_6;
end
always @(*) begin
/* main: %.preheader.i4.i14*/
/*   %538 = add nsw i32 %j.11.i3.i13, 2*/
	main_preheaderi4i14_538_reg = main_preheaderi4i_255_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_int533 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_preheaderi4i14_gep_int533 = 0; end
		main_preheaderi4i14_gep_int533 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_int533 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_preheaderi4i14_gep_int533_reg <= main_preheaderi4i14_gep_int533;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep_int533) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_gep_int533_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_array534 = mul i32 %538, 4*/
		main_preheaderi4i14_gep_array534 = (main_preheaderi4i14_538_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_array534 = mul i32 %538, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		main_preheaderi4i14_gep_array534_reg <= main_preheaderi4i14_gep_array534;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep_array534) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_gep_array534_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep535 = add i32 %gep_int533, %gep_array534*/
		main_preheaderi4i14_gep535 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i4.i14*/
/*   %gep535 = add i32 %gep_int533, %gep_array534*/
	main_preheaderi4i14_gep535_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %539 = inttoptr i32 %gep535 to i32**/
		main_preheaderi4i14_539 = main_preheaderi4i14_gep535;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %539 = inttoptr i32 %gep535 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_296)) begin
		main_preheaderi4i14_539_reg <= main_preheaderi4i14_539;
		if (start == 1'b0 && ^(main_preheaderi4i14_539) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_539_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %540 = load i32* %539, align 4, !tbaa !1*/
		main_preheaderi4i14_540 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %540 = load i32* %539, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_303)) begin
		main_preheaderi4i14_540_reg <= main_preheaderi4i14_540;
		if (start == 1'b0 && ^(main_preheaderi4i14_540) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_540_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %541 = xor i32 %540, %537*/
		main_preheaderi4i14_541 = (main_preheaderi4i14_540 ^ main_preheaderi4i14_537);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %541 = xor i32 %540, %537*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_303)) begin
		main_preheaderi4i14_541_reg <= main_preheaderi4i14_541;
		if (start == 1'b0 && ^(main_preheaderi4i14_541) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_541_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_int536 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_preheaderi4i14_gep_int536 = 0; end
		main_preheaderi4i14_gep_int536 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_int536 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_preheaderi4i14_gep_int536_reg <= main_preheaderi4i14_gep_int536;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep_int536) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_gep_int536_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep537 = add i32 %gep_int536, 1440*/
		main_preheaderi4i14_gep537 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.preheader.i4.i14*/
/*   %gep537 = add i32 %gep_int536, 1440*/
	main_preheaderi4i14_gep537_reg = main_AddRoundKeyexit_crit_edgei_gep235_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_array538 = mul i32 %j.11.i3.i13, 4*/
		main_preheaderi4i14_gep_array538 = (main_preheaderi4i14_j11i3i13_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_array538 = mul i32 %j.11.i3.i13, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_preheaderi4i14_gep_array538_reg <= main_preheaderi4i14_gep_array538;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep_array538) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_gep_array538_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep539 = add i32 %gep537, %gep_array538*/
		main_preheaderi4i14_gep539 = main_signed_add_32_4;
end
always @(*) begin
/* main: %.preheader.i4.i14*/
/*   %gep539 = add i32 %gep537, %gep_array538*/
	main_preheaderi4i14_gep539_reg = main_AddRoundKeyexit_crit_edgei_239_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %542 = inttoptr i32 %gep539 to i32**/
		main_preheaderi4i14_542 = main_preheaderi4i14_gep539;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %542 = inttoptr i32 %gep539 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		main_preheaderi4i14_542_reg <= main_preheaderi4i14_542;
		if (start == 1'b0 && ^(main_preheaderi4i14_542) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_542_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %543 = load i32* %542, align 4, !tbaa !1*/
		main_preheaderi4i14_543 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %543 = load i32* %542, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_306)) begin
		main_preheaderi4i14_543_reg <= main_preheaderi4i14_543;
		if (start == 1'b0 && ^(main_preheaderi4i14_543) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_543_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %544 = add nsw i32 %j.11.i3.i13, 3*/
		main_preheaderi4i14_544 = main_signed_add_32_4;
end
always @(*) begin
/* main: %.preheader.i4.i14*/
/*   %544 = add nsw i32 %j.11.i3.i13, 3*/
	main_preheaderi4i14_544_reg = main_2_gep14_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_int540 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_preheaderi4i14_gep_int540 = 0; end
		main_preheaderi4i14_gep_int540 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_int540 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_preheaderi4i14_gep_int540_reg <= main_preheaderi4i14_gep_int540;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep_int540) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_gep_int540_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_array541 = mul i32 %544, 4*/
		main_preheaderi4i14_gep_array541 = (main_preheaderi4i14_544_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep_array541 = mul i32 %544, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		main_preheaderi4i14_gep_array541_reg <= main_preheaderi4i14_gep_array541;
		if (start == 1'b0 && ^(main_preheaderi4i14_gep_array541) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_gep_array541_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %gep542 = add i32 %gep_int540, %gep_array541*/
		main_preheaderi4i14_gep542 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.preheader.i4.i14*/
/*   %gep542 = add i32 %gep_int540, %gep_array541*/
	main_preheaderi4i14_gep542_reg = main_lrph12i_gep446_reg;
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %545 = inttoptr i32 %gep542 to i32**/
		main_preheaderi4i14_545 = main_preheaderi4i14_gep542;
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %545 = inttoptr i32 %gep542 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_296)) begin
		main_preheaderi4i14_545_reg <= main_preheaderi4i14_545;
		if (start == 1'b0 && ^(main_preheaderi4i14_545) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_545_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %546 = load i32* %545, align 4, !tbaa !1*/
		main_preheaderi4i14_546 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %546 = load i32* %545, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_306)) begin
		main_preheaderi4i14_546_reg <= main_preheaderi4i14_546;
		if (start == 1'b0 && ^(main_preheaderi4i14_546) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_546_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %547 = xor i32 %546, %543*/
		main_preheaderi4i14_547 = (main_preheaderi4i14_546 ^ main_preheaderi4i14_543);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %547 = xor i32 %546, %543*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_306)) begin
		main_preheaderi4i14_547_reg <= main_preheaderi4i14_547;
		if (start == 1'b0 && ^(main_preheaderi4i14_547) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_547_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %exitcond31 = icmp ne i32 %532, 4*/
		main_preheaderi4i14_exitcond31 = (main_preheaderi4i14_532 != 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %exitcond31 = icmp ne i32 %532, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_preheaderi4i14_exitcond31_reg <= main_preheaderi4i14_exitcond31;
		if (start == 1'b0 && ^(main_preheaderi4i14_exitcond31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_exitcond31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i20*/
	/*   %i.19.i19 = phi i32 [ %557, %554 ], [ 0, %AddRoundKey.exit5.i15 ]*/
	if (((cur_state == LEGUP_F_main_BB_AddRoundKeyexit5i15_308) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi20_i19i19 = 32'd0;
	end
	/* main: %.lr.ph.i20*/
	/*   %i.19.i19 = phi i32 [ %557, %554 ], [ 0, %AddRoundKey.exit5.i15 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__554_316) & (memory_controller_waitrequest == 1'd0)) & (main_554_exitcond == 1'd1))) */ begin
		main_lrphi20_i19i19 = main_554_557;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i20*/
	/*   %i.19.i19 = phi i32 [ %557, %554 ], [ 0, %AddRoundKey.exit5.i15 ]*/
	if (((cur_state == LEGUP_F_main_BB_AddRoundKeyexit5i15_308) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi20_i19i19_reg <= main_lrphi20_i19i19;
		if (start == 1'b0 && ^(main_lrphi20_i19i19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi20_i19i19_reg"); $finish; end
	end
	/* main: %.lr.ph.i20*/
	/*   %i.19.i19 = phi i32 [ %557, %554 ], [ 0, %AddRoundKey.exit5.i15 ]*/
	if ((((cur_state == LEGUP_F_main_BB__554_316) & (memory_controller_waitrequest == 1'd0)) & (main_554_exitcond == 1'd1))) begin
		main_lrphi20_i19i19_reg <= main_lrphi20_i19i19;
		if (start == 1'b0 && ^(main_lrphi20_i19i19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi20_i19i19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i20*/
	/*   %gep_int543 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_lrphi20_gep_int543 = 0; end
		main_lrphi20_gep_int543 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i20*/
	/*   %gep_int543 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrphi20_309)) begin
		main_lrphi20_gep_int543_reg <= main_lrphi20_gep_int543;
		if (start == 1'b0 && ^(main_lrphi20_gep_int543) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi20_gep_int543_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i20*/
	/*   %gep_array544 = mul i32 %i.19.i19, 4*/
		main_lrphi20_gep_array544 = (main_lrphi20_i19i19_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i20*/
	/*   %gep_array544 = mul i32 %i.19.i19, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrphi20_309)) begin
		main_lrphi20_gep_array544_reg <= main_lrphi20_gep_array544;
		if (start == 1'b0 && ^(main_lrphi20_gep_array544) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi20_gep_array544_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i20*/
	/*   %gep545 = add i32 %gep_int543, %gep_array544*/
		main_lrphi20_gep545 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph.i20*/
/*   %gep545 = add i32 %gep_int543, %gep_array544*/
	main_lrphi20_gep545_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.lr.ph.i20*/
	/*   %549 = inttoptr i32 %gep545 to i32**/
		main_lrphi20_549 = main_lrphi20_gep545;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i20*/
	/*   %549 = inttoptr i32 %gep545 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrphi20_310)) begin
		main_lrphi20_549_reg <= main_lrphi20_549;
		if (start == 1'b0 && ^(main_lrphi20_549) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi20_549_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i20*/
	/*   %550 = load i32* %549, align 4, !tbaa !1*/
		main_lrphi20_550 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i20*/
	/*   %550 = load i32* %549, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi20_312)) begin
		main_lrphi20_550_reg <= main_lrphi20_550;
		if (start == 1'b0 && ^(main_lrphi20_550) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi20_550_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i20*/
	/*   %551 = icmp slt i32 %550, 16*/
		main_lrphi20_551 = ($signed(main_lrphi20_550) < $signed(32'd16));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i20*/
	/*   %551 = icmp slt i32 %550, 16*/
	if ((cur_state == LEGUP_F_main_BB_lrphi20_312)) begin
		main_lrphi20_551_reg <= main_lrphi20_551;
		if (start == 1'b0 && ^(main_lrphi20_551) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi20_551_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %552*/
	/*   %.pre14.i = load i32* %549, align 4, !tbaa !1*/
		main_552_pre14i = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %552*/
	/*   %.pre14.i = load i32* %549, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__552_315)) begin
		main_552_pre14i_reg <= main_552_pre14i;
		if (start == 1'b0 && ^(main_552_pre14i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_552_pre14i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %554*/
	/*   %555 = phi i32 [ %.pre14.i, %552 ], [ %550, %.lr.ph.i20 ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi20_312) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi20_551 == 1'd0))) begin
		main_554_555 = main_lrphi20_550;
	end
	/* main: %554*/
	/*   %555 = phi i32 [ %.pre14.i, %552 ], [ %550, %.lr.ph.i20 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__552_315) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_554_555 = main_552_pre14i;
	end
end
always @(posedge clk) begin
	/* main: %554*/
	/*   %555 = phi i32 [ %.pre14.i, %552 ], [ %550, %.lr.ph.i20 ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi20_312) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi20_551 == 1'd0))) begin
		main_554_555_reg <= main_554_555;
		if (start == 1'b0 && ^(main_554_555) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_554_555_reg"); $finish; end
	end
	/* main: %554*/
	/*   %555 = phi i32 [ %.pre14.i, %552 ], [ %550, %.lr.ph.i20 ]*/
	if (((cur_state == LEGUP_F_main_BB__552_315) & (memory_controller_waitrequest == 1'd0))) begin
		main_554_555_reg <= main_554_555;
		if (start == 1'b0 && ^(main_554_555) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_554_555_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %554*/
	/*   %557 = add nsw i32 %i.19.i19, 1*/
		main_554_557 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %554*/
	/*   %557 = add nsw i32 %i.19.i19, 1*/
	if ((cur_state == LEGUP_F_main_BB__554_316)) begin
		main_554_557_reg <= main_554_557;
		if (start == 1'b0 && ^(main_554_557) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_554_557_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %554*/
	/*   %exitcond = icmp ne i32 %557, 16*/
		main_554_exitcond = (main_554_557 != 32'd16);
end
always @(posedge clk) begin
	/* main: %554*/
	/*   %exitcond = icmp ne i32 %557, 16*/
	if ((cur_state == LEGUP_F_main_BB__554_316)) begin
		main_554_exitcond_reg <= main_554_exitcond;
		if (start == 1'b0 && ^(main_554_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_554_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %558 = phi i32 [ %565, %.preheader.loopexit.i17 ], [ %.lcssa1, %554 ]*/
	if ((((cur_state == LEGUP_F_main_BB__554_316) & (memory_controller_waitrequest == 1'd0)) & (main_554_exitcond == 1'd0))) begin
		main_preheaderloopexiti17_558 = main_encryptexit_lcssa1_reg;
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %558 = phi i32 [ %565, %.preheader.loopexit.i17 ], [ %.lcssa1, %554 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_320) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderloopexiti17_exitcondi22_reg == 1'd0))) */ begin
		main_preheaderloopexiti17_558 = main_preheaderloopexiti17_565;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %558 = phi i32 [ %565, %.preheader.loopexit.i17 ], [ %.lcssa1, %554 ]*/
	if ((((cur_state == LEGUP_F_main_BB__554_316) & (memory_controller_waitrequest == 1'd0)) & (main_554_exitcond == 1'd0))) begin
		main_preheaderloopexiti17_558_reg <= main_preheaderloopexiti17_558;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_558) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_558_reg"); $finish; end
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %558 = phi i32 [ %565, %.preheader.loopexit.i17 ], [ %.lcssa1, %554 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_320) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderloopexiti17_exitcondi22_reg == 1'd0))) begin
		main_preheaderloopexiti17_558_reg <= main_preheaderloopexiti17_558;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_558) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_558_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %i.28.i21 = phi i32 [ %566, %.preheader.loopexit.i17 ], [ 0, %554 ]*/
	if ((((cur_state == LEGUP_F_main_BB__554_316) & (memory_controller_waitrequest == 1'd0)) & (main_554_exitcond == 1'd0))) begin
		main_preheaderloopexiti17_i28i21 = 32'd0;
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %i.28.i21 = phi i32 [ %566, %.preheader.loopexit.i17 ], [ 0, %554 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_320) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderloopexiti17_exitcondi22_reg == 1'd0))) */ begin
		main_preheaderloopexiti17_i28i21 = main_preheaderloopexiti17_566_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %i.28.i21 = phi i32 [ %566, %.preheader.loopexit.i17 ], [ 0, %554 ]*/
	if ((((cur_state == LEGUP_F_main_BB__554_316) & (memory_controller_waitrequest == 1'd0)) & (main_554_exitcond == 1'd0))) begin
		main_preheaderloopexiti17_i28i21_reg <= main_preheaderloopexiti17_i28i21;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_i28i21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_i28i21_reg"); $finish; end
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %i.28.i21 = phi i32 [ %566, %.preheader.loopexit.i17 ], [ 0, %554 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_320) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderloopexiti17_exitcondi22_reg == 1'd0))) begin
		main_preheaderloopexiti17_i28i21_reg <= main_preheaderloopexiti17_i28i21;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_i28i21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_i28i21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %gep_int546 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_preheaderloopexiti17_gep_int546 = 0; end
		main_preheaderloopexiti17_gep_int546 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %gep_int546 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_317)) begin
		main_preheaderloopexiti17_gep_int546_reg <= main_preheaderloopexiti17_gep_int546;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_gep_int546) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_gep_int546_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %gep_array547 = mul i32 %i.28.i21, 4*/
		main_preheaderloopexiti17_gep_array547 = (main_preheaderloopexiti17_i28i21_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %gep_array547 = mul i32 %i.28.i21, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_317)) begin
		main_preheaderloopexiti17_gep_array547_reg <= main_preheaderloopexiti17_gep_array547;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_gep_array547) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_gep_array547_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %gep548 = add i32 %gep_int546, %gep_array547*/
		main_preheaderloopexiti17_gep548 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.loopexit.i17*/
/*   %gep548 = add i32 %gep_int546, %gep_array547*/
	main_preheaderloopexiti17_gep548_reg = main_AddRoundKeyexit_crit_edgei_214_reg;
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %559 = inttoptr i32 %gep548 to i32**/
		main_preheaderloopexiti17_559 = main_preheaderloopexiti17_gep548;
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %559 = inttoptr i32 %gep548 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_318)) begin
		main_preheaderloopexiti17_559_reg <= main_preheaderloopexiti17_559;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_559) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_559_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %560 = load i32* %559, align 4, !tbaa !1*/
		main_preheaderloopexiti17_560 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %560 = load i32* %559, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_320)) begin
		main_preheaderloopexiti17_560_reg <= main_preheaderloopexiti17_560;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_560) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_560_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %gep_int549 = ptrtoint [16 x i32]* @decrypt.out_dec_statemt to i32*/
if (reset) begin main_preheaderloopexiti17_gep_int549 = 0; end
		main_preheaderloopexiti17_gep_int549 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %gep_int549 = ptrtoint [16 x i32]* @decrypt.out_dec_statemt to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_317)) begin
		main_preheaderloopexiti17_gep_int549_reg <= main_preheaderloopexiti17_gep_int549;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_gep_int549) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_gep_int549_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %gep_array550 = mul i32 %i.28.i21, 4*/
		main_preheaderloopexiti17_gep_array550 = (main_preheaderloopexiti17_i28i21_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %gep_array550 = mul i32 %i.28.i21, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_317)) begin
		main_preheaderloopexiti17_gep_array550_reg <= main_preheaderloopexiti17_gep_array550;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_gep_array550) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_gep_array550_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %gep551 = add i32 %gep_int549, %gep_array550*/
		main_preheaderloopexiti17_gep551 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.loopexit.i17*/
/*   %gep551 = add i32 %gep_int549, %gep_array550*/
	main_preheaderloopexiti17_gep551_reg = main_lrph12i_gep453_reg;
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %561 = inttoptr i32 %gep551 to i32**/
		main_preheaderloopexiti17_561 = main_preheaderloopexiti17_gep551;
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %561 = inttoptr i32 %gep551 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_318)) begin
		main_preheaderloopexiti17_561_reg <= main_preheaderloopexiti17_561;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_561) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_561_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %562 = load i32* %561, align 4, !tbaa !1*/
		main_preheaderloopexiti17_562 = decryptout_dec_statemt_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %562 = load i32* %561, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_319)) begin
		main_preheaderloopexiti17_562_reg <= main_preheaderloopexiti17_562;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_562) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_562_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %563 = icmp eq i32 %560, %562*/
		main_preheaderloopexiti17_563 = (main_preheaderloopexiti17_560 == main_preheaderloopexiti17_562_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %563 = icmp eq i32 %560, %562*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_320)) begin
		main_preheaderloopexiti17_563_reg <= main_preheaderloopexiti17_563;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_563) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_563_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %564 = zext i1 %563 to i32*/
		main_preheaderloopexiti17_564 = main_preheaderloopexiti17_563;
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %564 = zext i1 %563 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_320)) begin
		main_preheaderloopexiti17_564_reg <= main_preheaderloopexiti17_564;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_564) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_564_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %565 = add nsw i32 %564, %558*/
		main_preheaderloopexiti17_565 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.loopexit.i17*/
/*   %565 = add nsw i32 %564, %558*/
	main_preheaderloopexiti17_565_reg = main_AddRoundKeyexit_crit_edgei_gep217_reg;
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %566 = add nsw i32 %i.28.i21, 1*/
		main_preheaderloopexiti17_566 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.loopexit.i17*/
/*   %566 = add nsw i32 %i.28.i21, 1*/
	main_preheaderloopexiti17_566_reg = main_271_274_reg;
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %exitcond.i22 = icmp eq i32 %566, 16*/
		main_preheaderloopexiti17_exitcondi22 = (main_preheaderloopexiti17_566 == 32'd16);
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %exitcond.i22 = icmp eq i32 %566, 16*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_317)) begin
		main_preheaderloopexiti17_exitcondi22_reg <= main_preheaderloopexiti17_exitcondi22;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_exitcondi22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_exitcondi22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decrypt.exit*/
	/*   %.lcssa = phi i32 [ %565, %.preheader.loopexit.i17 ]*/
		main_decryptexit_lcssa = main_preheaderloopexiti17_565;
end
always @(posedge clk) begin
	/* main: %decrypt.exit*/
	/*   %.lcssa = phi i32 [ %565, %.preheader.loopexit.i17 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_320) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderloopexiti17_exitcondi22_reg == 1'd1))) begin
		main_decryptexit_lcssa_reg <= main_decryptexit_lcssa;
		if (start == 1'b0 && ^(main_decryptexit_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decryptexit_lcssa_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decrypt.exit*/
	/*   %568 = icmp eq i32 %.lcssa, 32*/
		main_decryptexit_568 = (main_decryptexit_lcssa_reg == 32'd32);
end
always @(posedge clk) begin
	/* main: %decrypt.exit*/
	/*   %568 = icmp eq i32 %.lcssa, 32*/
	if ((cur_state == LEGUP_F_main_BB_decryptexit_321)) begin
		main_decryptexit_568_reg <= main_decryptexit_568;
		if (start == 1'b0 && ^(main_decryptexit_568) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decryptexit_568_reg"); $finish; end
	end
end
always @(*) begin
	encryptout_enc_statemt_address_a = 1'd0;
	/* main: %.preheader.i*/
	/*   %279 = load i32* %278, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_179)) begin
		encryptout_enc_statemt_address_a = (main_preheaderi_278 >>> 3'd2);
	end
end
always @(*) begin
	encryptout_enc_statemt_write_enable_a = 1'd0;
	/* main: %.preheader.i*/
	/*   %279 = load i32* %278, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_179)) begin
		encryptout_enc_statemt_write_enable_a = 1'd0;
	end
end
always @(*) begin
	decryptout_dec_statemt_address_a = 1'd0;
	/* main: %.preheader.loopexit.i17*/
	/*   %562 = load i32* %561, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_318)) begin
		decryptout_dec_statemt_address_a = (main_preheaderloopexiti17_561 >>> 3'd2);
	end
end
always @(*) begin
	decryptout_dec_statemt_write_enable_a = 1'd0;
	/* main: %.preheader.loopexit.i17*/
	/*   %562 = load i32* %561, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_318)) begin
		decryptout_dec_statemt_write_enable_a = 1'd0;
	end
end
always @(*) begin
	invSbox_address_a = 1'd0;
	/* main: %.lr.ph12.i.preheader*/
	/*   %341 = load i32* %340, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		invSbox_address_a = (main_lrph12ipreheader_340 >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %351 = load i32* %350, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		invSbox_address_a = (main_lrph12ipreheader_350_reg >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %356 = load i32* %355, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_226)) begin
		invSbox_address_a = (main_lrph12ipreheader_355_reg >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %361 = load i32* %360, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_228)) begin
		invSbox_address_a = (main_lrph12ipreheader_360_reg >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %371 = load i32* %370, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_230)) begin
		invSbox_address_a = (main_lrph12ipreheader_370_reg >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %381 = load i32* %380, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_232)) begin
		invSbox_address_a = (main_lrph12ipreheader_380_reg >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %391 = load i32* %390, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_234)) begin
		invSbox_address_a = (main_lrph12ipreheader_390_reg >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %396 = load i32* %395, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_236)) begin
		invSbox_address_a = (main_lrph12ipreheader_395_reg >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %401 = load i32* %400, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_238)) begin
		invSbox_address_a = (main_lrph12ipreheader_400_reg >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %406 = load i32* %405, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_240)) begin
		invSbox_address_a = (main_lrph12ipreheader_405_reg >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %411 = load i32* %410, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_242)) begin
		invSbox_address_a = (main_lrph12ipreheader_410_reg >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %416 = load i32* %415, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_244)) begin
		invSbox_address_a = (main_lrph12ipreheader_415_reg >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %422 = load i32* %421, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		invSbox_address_a = (main_lrph12i_421 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %432 = load i32* %431, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_254)) begin
		invSbox_address_a = (main_lrph12i_431_reg >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %437 = load i32* %436, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_256)) begin
		invSbox_address_a = (main_lrph12i_436_reg >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %442 = load i32* %441, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_258)) begin
		invSbox_address_a = (main_lrph12i_441_reg >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %447 = load i32* %446, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_259)) begin
		invSbox_address_a = (main_lrph12i_446 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %452 = load i32* %451, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		invSbox_address_a = (main_lrph12i_451 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %462 = load i32* %461, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_264)) begin
		invSbox_address_a = (main_lrph12i_461 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %472 = load i32* %471, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_266)) begin
		invSbox_address_a = (main_lrph12i_471 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %477 = load i32* %476, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_268)) begin
		invSbox_address_a = (main_lrph12i_476_reg >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %482 = load i32* %481, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_270)) begin
		invSbox_address_a = (main_lrph12i_481_reg >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %487 = load i32* %486, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_273)) begin
		invSbox_address_a = (main_lrph12i_486 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %492 = load i32* %491, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_275)) begin
		invSbox_address_a = (main_lrph12i_491_reg >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %497 = load i32* %496, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_277)) begin
		invSbox_address_a = (main_lrph12i_496_reg >>> 3'd2);
	end
end
always @(*) begin
	invSbox_write_enable_a = 1'd0;
	/* main: %.lr.ph12.i.preheader*/
	/*   %341 = load i32* %340, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %351 = load i32* %350, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %356 = load i32* %355, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_226)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %361 = load i32* %360, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_228)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %371 = load i32* %370, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_230)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %381 = load i32* %380, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_232)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %391 = load i32* %390, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_234)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %396 = load i32* %395, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_236)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %401 = load i32* %400, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_238)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %406 = load i32* %405, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_240)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %411 = load i32* %410, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_242)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %416 = load i32* %415, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_244)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %422 = load i32* %421, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %432 = load i32* %431, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_254)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %437 = load i32* %436, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_256)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %442 = load i32* %441, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_258)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %447 = load i32* %446, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_259)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %452 = load i32* %451, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %462 = load i32* %461, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_264)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %472 = load i32* %471, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_266)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %477 = load i32* %476, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_268)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %482 = load i32* %481, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_270)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %487 = load i32* %486, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_273)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %492 = load i32* %491, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_275)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %497 = load i32* %496, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_277)) begin
		invSbox_write_enable_a = 1'd0;
	end
end
always @(*) begin
	invSbox_address_b = 1'd0;
	/* main: %.lr.ph12.i.preheader*/
	/*   %346 = load i32* %345, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		invSbox_address_b = (main_lrph12ipreheader_345 >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %366 = load i32* %365, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_228)) begin
		invSbox_address_b = (main_lrph12ipreheader_365_reg >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %376 = load i32* %375, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_230)) begin
		invSbox_address_b = (main_lrph12ipreheader_375_reg >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %386 = load i32* %385, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_232)) begin
		invSbox_address_b = (main_lrph12ipreheader_385_reg >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %427 = load i32* %426, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		invSbox_address_b = (main_lrph12i_426 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %457 = load i32* %456, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		invSbox_address_b = (main_lrph12i_456 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %467 = load i32* %466, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_264)) begin
		invSbox_address_b = (main_lrph12i_466 >>> 3'd2);
	end
end
always @(*) begin
	invSbox_write_enable_b = 1'd0;
	/* main: %.lr.ph12.i.preheader*/
	/*   %346 = load i32* %345, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %366 = load i32* %365, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_228)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %376 = load i32* %375, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_230)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %386 = load i32* %385, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_232)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %427 = load i32* %426, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %457 = load i32* %456, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %467 = load i32* %466, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_264)) begin
		invSbox_write_enable_b = 1'd0;
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %1 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		KeySchedule_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_18)) begin
		KeySchedule_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_start"); $finish; end
	end
	/* main: %encrypt.exit*/
	/*   %284 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_encryptexit_182)) begin
		KeySchedule_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_183)) begin
		KeySchedule_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %1 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		KeySchedule_arg_type <= 32'd128128;
		if (start == 1'b0 && ^(32'd128128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_arg_type"); $finish; end
	end
	/* main: %encrypt.exit*/
	/*   %284 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_encryptexit_182)) begin
		KeySchedule_arg_type <= 32'd128128;
		if (start == 1'b0 && ^(32'd128128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_arg_type"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %1 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		KeySchedule_arg_key <= `TAG_g_key_a;
		if (start == 1'b0 && ^(`TAG_g_key_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_arg_key"); $finish; end
	end
	/* main: %encrypt.exit*/
	/*   %284 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_encryptexit_182)) begin
		KeySchedule_arg_key <= `TAG_g_key_a;
		if (start == 1'b0 && ^(`TAG_g_key_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_arg_key"); $finish; end
	end
end
always @(*) begin
	KeySchedule_finish_final = KeySchedule_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_17))) begin
		KeySchedule_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_finish_reg"); $finish; end
	end
	if (KeySchedule_finish) begin
		KeySchedule_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_encryptexit_182))) begin
		KeySchedule_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_finish_reg"); $finish; end
	end
	if (KeySchedule_finish) begin
		KeySchedule_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_17))) begin
		KeySchedule_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_return_val_reg"); $finish; end
	end
	if (KeySchedule_finish) begin
		KeySchedule_return_val_reg <= KeySchedule_return_val;
		if (start == 1'b0 && ^(KeySchedule_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_encryptexit_182))) begin
		KeySchedule_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_return_val_reg"); $finish; end
	end
	if (KeySchedule_finish) begin
		KeySchedule_return_val_reg <= KeySchedule_return_val;
		if (start == 1'b0 && ^(KeySchedule_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_return_val_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %1 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
		main_0_1 = KeySchedule_return_val_reg;
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %0*/
	/*   %1 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_18)) begin
		legup_function_call = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %132 = tail call i32 @MixColumn_AddRoundKey(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.010.i) #2*/
	if ((cur_state == LEGUP_function_call_94)) begin
		legup_function_call = 1'd1;
	end
	/* main: %encrypt.exit*/
	/*   %284 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_183)) begin
		legup_function_call = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %417 = tail call i32 @AddRoundKey_InversMixColumn(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.011.i) #2*/
	if ((cur_state == LEGUP_function_call_248)) begin
		legup_function_call = 1'd1;
	end
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %132 = tail call i32 @MixColumn_AddRoundKey(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.010.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		MixColumn_AddRoundKey_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_94)) begin
		MixColumn_AddRoundKey_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %132 = tail call i32 @MixColumn_AddRoundKey(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.010.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		MixColumn_AddRoundKey_arg_statemt <= `TAG_g_statemt_a;
		if (start == 1'b0 && ^(`TAG_g_statemt_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_arg_statemt"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %132 = tail call i32 @MixColumn_AddRoundKey(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.010.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		MixColumn_AddRoundKey_arg_nb <= 32'd4;
		if (start == 1'b0 && ^(32'd4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_arg_nb"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %132 = tail call i32 @MixColumn_AddRoundKey(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.010.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		MixColumn_AddRoundKey_arg_n <= main_AddRoundKeyexiti_i010i_reg;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_i010i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_arg_n"); $finish; end
	end
end
always @(*) begin
	MixColumn_AddRoundKey_finish_final = MixColumn_AddRoundKey_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93))) begin
		MixColumn_AddRoundKey_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_finish_reg"); $finish; end
	end
	if (MixColumn_AddRoundKey_finish) begin
		MixColumn_AddRoundKey_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93))) begin
		MixColumn_AddRoundKey_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_return_val_reg"); $finish; end
	end
	if (MixColumn_AddRoundKey_finish) begin
		MixColumn_AddRoundKey_return_val_reg <= MixColumn_AddRoundKey_return_val;
		if (start == 1'b0 && ^(MixColumn_AddRoundKey_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_return_val_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %132 = tail call i32 @MixColumn_AddRoundKey(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.010.i) #2*/
		main_AddRoundKeyexiti_132 = MixColumn_AddRoundKey_return_val_reg;
end
always @(*) begin
	/* main: %encrypt.exit*/
	/*   %284 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
		main_encryptexit_284 = KeySchedule_return_val_reg;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %417 = tail call i32 @AddRoundKey_InversMixColumn(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.011.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		AddRoundKey_InversMixColumn_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_248)) begin
		AddRoundKey_InversMixColumn_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %417 = tail call i32 @AddRoundKey_InversMixColumn(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.011.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		AddRoundKey_InversMixColumn_arg_statemt <= `TAG_g_statemt_a;
		if (start == 1'b0 && ^(`TAG_g_statemt_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_arg_statemt"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %417 = tail call i32 @AddRoundKey_InversMixColumn(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.011.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		AddRoundKey_InversMixColumn_arg_nb <= 32'd4;
		if (start == 1'b0 && ^(32'd4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_arg_nb"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %417 = tail call i32 @AddRoundKey_InversMixColumn(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.011.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		AddRoundKey_InversMixColumn_arg_n <= main_lrph12i_i011i_reg;
		if (start == 1'b0 && ^(main_lrph12i_i011i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_arg_n"); $finish; end
	end
end
always @(*) begin
	AddRoundKey_InversMixColumn_finish_final = AddRoundKey_InversMixColumn_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_lrph12i_247))) begin
		AddRoundKey_InversMixColumn_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_finish_reg"); $finish; end
	end
	if (AddRoundKey_InversMixColumn_finish) begin
		AddRoundKey_InversMixColumn_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_lrph12i_247))) begin
		AddRoundKey_InversMixColumn_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_return_val_reg"); $finish; end
	end
	if (AddRoundKey_InversMixColumn_finish) begin
		AddRoundKey_InversMixColumn_return_val_reg <= AddRoundKey_InversMixColumn_return_val;
		if (start == 1'b0 && ^(AddRoundKey_InversMixColumn_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_return_val_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %417 = tail call i32 @AddRoundKey_InversMixColumn(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.011.i) #2*/
		main_lrph12i_417 = AddRoundKey_InversMixColumn_return_val_reg;
end
always @(*) begin
	/* main: %2*/
	/*   %gep5 = add i32 %gep_int4, 480*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_signed_add_32_0_op0 = main_2_gep_int4;
	end
	/* main: %2*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	else if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_0_op0 = main_2_gep_int_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %gep32 = add i32 %gep_int31, 480*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_signed_add_32_0_op0 = main_preheaderii_gep_int31;
	end
	/* main: %.preheader.i.i*/
	/*   %gep27 = add i32 %gep_int25, %gep_array26*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_signed_add_32_0_op0 = main_preheaderii_gep_int25_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %gep37 = add i32 %gep_int35, %gep_array36*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_36)) begin
		main_signed_add_32_0_op0 = main_preheaderii_gep_int35_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep54 = add i32 %gep_int52, %gep_array53*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexitipreheader_gep_int52_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep64 = add i32 %gep_int62, %gep_array63*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexitipreheader_gep_int62_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep74 = add i32 %gep_int72, %gep_array73*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexitipreheader_gep_int72_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep84 = add i32 %gep_int82, %gep_array83*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexitipreheader_gep_int82_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep94 = add i32 %gep_int92, %gep_array93*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexitipreheader_gep_int92_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep104 = add i32 %gep_int102, %gep_array103*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexitipreheader_gep_int102_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep114 = add i32 %gep_int112, %gep_array113*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexitipreheader_gep_int112_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep124 = add i32 %gep_int122, %gep_array123*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexitipreheader_gep_int122_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %133 = add nsw i32 %i.010.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_i010i_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep134 = add i32 %gep_int132, %gep_array133*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int132_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep144 = add i32 %gep_int142, %gep_array143*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int142_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep149 = add i32 %gep_int147, %gep_array148*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_104)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int147_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep154 = add i32 %gep_int152, %gep_array153*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int152_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep159 = add i32 %gep_int157, %gep_array158*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int157_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep164 = add i32 %gep_int162, %gep_array163*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int162_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep169 = add i32 %gep_int167, %gep_array168*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_113)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int167_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep174 = add i32 %gep_int172, %gep_array173*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_116)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int172_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep179 = add i32 %gep_int177, %gep_array178*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int177_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep184 = add i32 %gep_int182, %gep_array183*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int182_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep189 = add i32 %gep_int187, %gep_array188*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_123)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int187_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep194 = add i32 %gep_int192, %gep_array193*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_126)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int192_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep199 = add i32 %gep_int197, %gep_array198*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_129)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int197_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep204 = add i32 %gep_int202, %gep_array203*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_132)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int202_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep209 = add i32 %gep_int207, %gep_array208*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_135)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int207_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %214 = add nsw i32 %j.02.i2.i, 40*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexit_crit_edgei_j02i2i_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep217 = add i32 %gep_int215, %gep_array216*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexit_crit_edgei_gep_int215_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep214 = add i32 %gep_int212, %gep_array213*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_141)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexit_crit_edgei_gep_int212_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %240 = add nsw i32 %j.11.i3.i, 40*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_signed_add_32_0_op0 = main_preheaderi4i_j11i3i_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %gep244 = add i32 %gep_int242, %gep_array243*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_155)) begin
		main_signed_add_32_0_op0 = main_preheaderi4i_gep_int242_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %gep241 = add i32 %gep_int239, %gep_array240*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_signed_add_32_0_op0 = main_preheaderi4i_gep_int239_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %gep268 = add i32 %gep_int266, %gep_array267*/
	else if ((cur_state == LEGUP_F_main_BB_lrphi_171)) begin
		main_signed_add_32_0_op0 = main_lrphi_gep_int266_reg;
	end
	/* main: %271*/
	/*   %274 = add nsw i32 %i.19.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB__271_177)) begin
		main_signed_add_32_0_op0 = main_lrphi_i19i_reg;
	end
	/* main: %.preheader.i*/
	/*   %283 = add nsw i32 %i.28.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_178)) begin
		main_signed_add_32_0_op0 = main_preheaderi_i28i_reg;
	end
	/* main: %.preheader.i*/
	/*   %gep271 = add i32 %gep_int269, %gep_array270*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_179)) begin
		main_signed_add_32_0_op0 = main_preheaderi_gep_int269_reg;
	end
	/* main: %.preheader.i*/
	/*   %282 = add nsw i32 %281, %275*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_181)) begin
		main_signed_add_32_0_op0 = main_preheaderi_281;
	end
	/* main: %285*/
	/*   %286 = add nsw i32 %j.02.i.i1, 40*/
	else if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_signed_add_32_0_op0 = main_285_j02ii1_reg;
	end
	/* main: %285*/
	/*   %gep280 = add i32 %gep_int278, %gep_array279*/
	else if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		main_signed_add_32_0_op0 = main_285_gep_int278_reg;
	end
	/* main: %285*/
	/*   %gep277 = add i32 %gep_int275, %gep_array276*/
	else if ((cur_state == LEGUP_F_main_BB__285_187)) begin
		main_signed_add_32_0_op0 = main_285_gep_int275_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %312 = add nsw i32 %j.11.i.i3, 40*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_signed_add_32_0_op0 = main_preheaderii4_j11ii3_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %gep307 = add i32 %gep_int305, %gep_array306*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_201)) begin
		main_signed_add_32_0_op0 = main_preheaderii4_gep_int305_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %gep304 = add i32 %gep_int302, %gep_array303*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_signed_add_32_0_op0 = main_preheaderii4_gep_int302_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep331 = add i32 %gep_int329, %gep_array330*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_signed_add_32_0_op0 = main_lrph12ipreheader_gep_int329_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep341 = add i32 %gep_int339, %gep_array340*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_signed_add_32_0_op0 = main_lrph12ipreheader_gep_int339_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep351 = add i32 %gep_int349, %gep_array350*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_signed_add_32_0_op0 = main_lrph12ipreheader_gep_int349_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep361 = add i32 %gep_int359, %gep_array360*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_signed_add_32_0_op0 = main_lrph12ipreheader_gep_int359_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep371 = add i32 %gep_int369, %gep_array370*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_signed_add_32_0_op0 = main_lrph12ipreheader_gep_int369_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep381 = add i32 %gep_int379, %gep_array380*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_signed_add_32_0_op0 = main_lrph12ipreheader_gep_int379_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep391 = add i32 %gep_int389, %gep_array390*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_signed_add_32_0_op0 = main_lrph12ipreheader_gep_int389_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep401 = add i32 %gep_int399, %gep_array400*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_225)) begin
		main_signed_add_32_0_op0 = main_lrph12ipreheader_gep_int399_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %i.0.i = add nsw i32 %i.011.i, -1*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		main_signed_add_32_0_op0 = main_lrph12i_i011i_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep411 = add i32 %gep_int409, %gep_array410*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		main_signed_add_32_0_op0 = main_lrph12i_gep_int409_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep421 = add i32 %gep_int419, %gep_array420*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_253)) begin
		main_signed_add_32_0_op0 = main_lrph12i_gep_int419_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep426 = add i32 %gep_int424, %gep_array425*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_254)) begin
		main_signed_add_32_0_op0 = main_lrph12i_gep_int424_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep431 = add i32 %gep_int429, %gep_array430*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_255)) begin
		main_signed_add_32_0_op0 = main_lrph12i_gep_int429_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep436 = add i32 %gep_int434, %gep_array435*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_259)) begin
		main_signed_add_32_0_op0 = main_lrph12i_gep_int434_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep441 = add i32 %gep_int439, %gep_array440*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		main_signed_add_32_0_op0 = main_lrph12i_gep_int439_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep451 = add i32 %gep_int449, %gep_array450*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_264)) begin
		main_signed_add_32_0_op0 = main_lrph12i_gep_int449_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep461 = add i32 %gep_int459, %gep_array460*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_266)) begin
		main_signed_add_32_0_op0 = main_lrph12i_gep_int459_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep466 = add i32 %gep_int464, %gep_array465*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_267)) begin
		main_signed_add_32_0_op0 = main_lrph12i_gep_int464_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep471 = add i32 %gep_int469, %gep_array470*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_268)) begin
		main_signed_add_32_0_op0 = main_lrph12i_gep_int469_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep476 = add i32 %gep_int474, %gep_array475*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_273)) begin
		main_signed_add_32_0_op0 = main_lrph12i_gep_int474_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep481 = add i32 %gep_int479, %gep_array480*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_274)) begin
		main_signed_add_32_0_op0 = main_lrph12i_gep_int479_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep486 = add i32 %gep_int484, %gep_array485*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_275)) begin
		main_signed_add_32_0_op0 = main_lrph12i_gep_int484_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep496 = add i32 %gep_int495, 480*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main_signed_add_32_0_op0 = main__crit_edgei_gep_int495;
	end
	/* main: %._crit_edge.i*/
	/*   %gep491 = add i32 %gep_int489, %gep_array490*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main_signed_add_32_0_op0 = main__crit_edgei_gep_int489_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep523 = add i32 %gep_int522, 480*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_signed_add_32_0_op0 = main_preheaderi4i14_gep_int522;
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep518 = add i32 %gep_int516, %gep_array517*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		main_signed_add_32_0_op0 = main_preheaderi4i14_gep_int516_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep528 = add i32 %gep_int526, %gep_array527*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_296)) begin
		main_signed_add_32_0_op0 = main_preheaderi4i14_gep_int526_reg;
	end
	/* main: %.lr.ph.i20*/
	/*   %gep545 = add i32 %gep_int543, %gep_array544*/
	else if ((cur_state == LEGUP_F_main_BB_lrphi20_310)) begin
		main_signed_add_32_0_op0 = main_lrphi20_gep_int543_reg;
	end
	/* main: %554*/
	/*   %557 = add nsw i32 %i.19.i19, 1*/
	else if ((cur_state == LEGUP_F_main_BB__554_316)) begin
		main_signed_add_32_0_op0 = main_lrphi20_i19i19_reg;
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %566 = add nsw i32 %i.28.i21, 1*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_317)) begin
		main_signed_add_32_0_op0 = main_preheaderloopexiti17_i28i21_reg;
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %gep548 = add i32 %gep_int546, %gep_array547*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_318)) begin
		main_signed_add_32_0_op0 = main_preheaderloopexiti17_gep_int546_reg;
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %565 = add nsw i32 %564, %558*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_320)) */ begin
		main_signed_add_32_0_op0 = main_preheaderloopexiti17_564;
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep5 = add i32 %gep_int4, 480*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_signed_add_32_0_op1 = 32'd480;
	end
	/* main: %2*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	else if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_0_op1 = main_2_gep_array_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %gep32 = add i32 %gep_int31, 480*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_signed_add_32_0_op1 = 32'd480;
	end
	/* main: %.preheader.i.i*/
	/*   %gep27 = add i32 %gep_int25, %gep_array26*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_signed_add_32_0_op1 = main_preheaderii_gep_array26_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %gep37 = add i32 %gep_int35, %gep_array36*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_36)) begin
		main_signed_add_32_0_op1 = main_preheaderii_gep_array36_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep54 = add i32 %gep_int52, %gep_array53*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexitipreheader_gep_array53_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep64 = add i32 %gep_int62, %gep_array63*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexitipreheader_gep_array63_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep74 = add i32 %gep_int72, %gep_array73*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexitipreheader_gep_array73_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep84 = add i32 %gep_int82, %gep_array83*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexitipreheader_gep_array83_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep94 = add i32 %gep_int92, %gep_array93*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexitipreheader_gep_array93_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep104 = add i32 %gep_int102, %gep_array103*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexitipreheader_gep_array103_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep114 = add i32 %gep_int112, %gep_array113*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexitipreheader_gep_array113_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep124 = add i32 %gep_int122, %gep_array123*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexitipreheader_gep_array123_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %133 = add nsw i32 %i.010.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep134 = add i32 %gep_int132, %gep_array133*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array133_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep144 = add i32 %gep_int142, %gep_array143*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array143_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep149 = add i32 %gep_int147, %gep_array148*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_104)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array148_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep154 = add i32 %gep_int152, %gep_array153*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array153_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep159 = add i32 %gep_int157, %gep_array158*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array158_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep164 = add i32 %gep_int162, %gep_array163*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array163_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep169 = add i32 %gep_int167, %gep_array168*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_113)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array168_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep174 = add i32 %gep_int172, %gep_array173*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_116)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array173_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep179 = add i32 %gep_int177, %gep_array178*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array178_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep184 = add i32 %gep_int182, %gep_array183*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array183_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep189 = add i32 %gep_int187, %gep_array188*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_123)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array188_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep194 = add i32 %gep_int192, %gep_array193*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_126)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array193_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep199 = add i32 %gep_int197, %gep_array198*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_129)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array198_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep204 = add i32 %gep_int202, %gep_array203*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_132)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array203_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep209 = add i32 %gep_int207, %gep_array208*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_135)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array208_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %214 = add nsw i32 %j.02.i2.i, 40*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_signed_add_32_0_op1 = 32'd40;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep217 = add i32 %gep_int215, %gep_array216*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexit_crit_edgei_gep_array216_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep214 = add i32 %gep_int212, %gep_array213*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_141)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexit_crit_edgei_gep_array213_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %240 = add nsw i32 %j.11.i3.i, 40*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_signed_add_32_0_op1 = 32'd40;
	end
	/* main: %.preheader.i4.i*/
	/*   %gep244 = add i32 %gep_int242, %gep_array243*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_155)) begin
		main_signed_add_32_0_op1 = main_preheaderi4i_gep_array243_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %gep241 = add i32 %gep_int239, %gep_array240*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_signed_add_32_0_op1 = main_preheaderi4i_gep_array240_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %gep268 = add i32 %gep_int266, %gep_array267*/
	else if ((cur_state == LEGUP_F_main_BB_lrphi_171)) begin
		main_signed_add_32_0_op1 = main_lrphi_gep_array267_reg;
	end
	/* main: %271*/
	/*   %274 = add nsw i32 %i.19.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB__271_177)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %.preheader.i*/
	/*   %283 = add nsw i32 %i.28.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_178)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %.preheader.i*/
	/*   %gep271 = add i32 %gep_int269, %gep_array270*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_179)) begin
		main_signed_add_32_0_op1 = main_preheaderi_gep_array270_reg;
	end
	/* main: %.preheader.i*/
	/*   %282 = add nsw i32 %281, %275*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_181)) begin
		main_signed_add_32_0_op1 = main_preheaderi_275_reg;
	end
	/* main: %285*/
	/*   %286 = add nsw i32 %j.02.i.i1, 40*/
	else if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_signed_add_32_0_op1 = 32'd40;
	end
	/* main: %285*/
	/*   %gep280 = add i32 %gep_int278, %gep_array279*/
	else if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		main_signed_add_32_0_op1 = main_285_gep_array279_reg;
	end
	/* main: %285*/
	/*   %gep277 = add i32 %gep_int275, %gep_array276*/
	else if ((cur_state == LEGUP_F_main_BB__285_187)) begin
		main_signed_add_32_0_op1 = main_285_gep_array276_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %312 = add nsw i32 %j.11.i.i3, 40*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_signed_add_32_0_op1 = 32'd40;
	end
	/* main: %.preheader.i.i4*/
	/*   %gep307 = add i32 %gep_int305, %gep_array306*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_201)) begin
		main_signed_add_32_0_op1 = main_preheaderii4_gep_array306_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %gep304 = add i32 %gep_int302, %gep_array303*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_signed_add_32_0_op1 = main_preheaderii4_gep_array303_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep331 = add i32 %gep_int329, %gep_array330*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_signed_add_32_0_op1 = main_lrph12ipreheader_gep_array330_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep341 = add i32 %gep_int339, %gep_array340*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_signed_add_32_0_op1 = main_lrph12ipreheader_gep_array340_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep351 = add i32 %gep_int349, %gep_array350*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_signed_add_32_0_op1 = main_lrph12ipreheader_gep_array350_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep361 = add i32 %gep_int359, %gep_array360*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_signed_add_32_0_op1 = main_lrph12ipreheader_gep_array360_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep371 = add i32 %gep_int369, %gep_array370*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_signed_add_32_0_op1 = main_lrph12ipreheader_gep_array370_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep381 = add i32 %gep_int379, %gep_array380*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_signed_add_32_0_op1 = main_lrph12ipreheader_gep_array380_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep391 = add i32 %gep_int389, %gep_array390*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_signed_add_32_0_op1 = main_lrph12ipreheader_gep_array390_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep401 = add i32 %gep_int399, %gep_array400*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_225)) begin
		main_signed_add_32_0_op1 = main_lrph12ipreheader_gep_array400_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %i.0.i = add nsw i32 %i.011.i, -1*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_247)) begin
		main_signed_add_32_0_op1 = -32'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep411 = add i32 %gep_int409, %gep_array410*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		main_signed_add_32_0_op1 = main_lrph12i_gep_array410_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep421 = add i32 %gep_int419, %gep_array420*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_253)) begin
		main_signed_add_32_0_op1 = main_lrph12i_gep_array420_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep426 = add i32 %gep_int424, %gep_array425*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_254)) begin
		main_signed_add_32_0_op1 = main_lrph12i_gep_array425_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep431 = add i32 %gep_int429, %gep_array430*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_255)) begin
		main_signed_add_32_0_op1 = main_lrph12i_gep_array430_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep436 = add i32 %gep_int434, %gep_array435*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_259)) begin
		main_signed_add_32_0_op1 = main_lrph12i_gep_array435_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep441 = add i32 %gep_int439, %gep_array440*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		main_signed_add_32_0_op1 = main_lrph12i_gep_array440_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep451 = add i32 %gep_int449, %gep_array450*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_264)) begin
		main_signed_add_32_0_op1 = main_lrph12i_gep_array450_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep461 = add i32 %gep_int459, %gep_array460*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_266)) begin
		main_signed_add_32_0_op1 = main_lrph12i_gep_array460_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep466 = add i32 %gep_int464, %gep_array465*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_267)) begin
		main_signed_add_32_0_op1 = main_lrph12i_gep_array465_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep471 = add i32 %gep_int469, %gep_array470*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_268)) begin
		main_signed_add_32_0_op1 = main_lrph12i_gep_array470_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep476 = add i32 %gep_int474, %gep_array475*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_273)) begin
		main_signed_add_32_0_op1 = main_lrph12i_gep_array475_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep481 = add i32 %gep_int479, %gep_array480*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_274)) begin
		main_signed_add_32_0_op1 = main_lrph12i_gep_array480_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep486 = add i32 %gep_int484, %gep_array485*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_275)) begin
		main_signed_add_32_0_op1 = main_lrph12i_gep_array485_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep496 = add i32 %gep_int495, 480*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main_signed_add_32_0_op1 = 32'd480;
	end
	/* main: %._crit_edge.i*/
	/*   %gep491 = add i32 %gep_int489, %gep_array490*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main_signed_add_32_0_op1 = main__crit_edgei_gep_array490_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep523 = add i32 %gep_int522, 480*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_signed_add_32_0_op1 = 32'd480;
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep518 = add i32 %gep_int516, %gep_array517*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		main_signed_add_32_0_op1 = main_preheaderi4i14_gep_array517_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep528 = add i32 %gep_int526, %gep_array527*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_296)) begin
		main_signed_add_32_0_op1 = main_preheaderi4i14_gep_array527_reg;
	end
	/* main: %.lr.ph.i20*/
	/*   %gep545 = add i32 %gep_int543, %gep_array544*/
	else if ((cur_state == LEGUP_F_main_BB_lrphi20_310)) begin
		main_signed_add_32_0_op1 = main_lrphi20_gep_array544_reg;
	end
	/* main: %554*/
	/*   %557 = add nsw i32 %i.19.i19, 1*/
	else if ((cur_state == LEGUP_F_main_BB__554_316)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %566 = add nsw i32 %i.28.i21, 1*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_317)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %gep548 = add i32 %gep_int546, %gep_array547*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_318)) begin
		main_signed_add_32_0_op1 = main_preheaderloopexiti17_gep_array547_reg;
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %565 = add nsw i32 %564, %558*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_320)) */ begin
		main_signed_add_32_0_op1 = main_preheaderloopexiti17_558_reg;
	end
end
always @(*) begin
	main_signed_add_32_0 = (main_signed_add_32_0_op0 + main_signed_add_32_0_op1);
end
always @(*) begin
	/* main: %2*/
	/*   %gep19 = add i32 %gep_int18, 1440*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_signed_add_32_2_op0 = main_2_gep_int18;
	end
	/* main: %2*/
	/*   %gep7 = add i32 %gep5, %gep_array6*/
	else if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_2_op0 = main_2_gep5_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %gep39 = add i32 %gep_int38, 960*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_signed_add_32_2_op0 = main_preheaderii_gep_int38;
	end
	/* main: %.preheader.i.i*/
	/*   %gep34 = add i32 %gep32, %gep_array33*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_signed_add_32_2_op0 = main_preheaderii_gep32_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %gep51 = add i32 %gep_int49, %gep_array50*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_36)) begin
		main_signed_add_32_2_op0 = main_preheaderii_gep_int49_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep59 = add i32 %gep_int57, %gep_array58*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexitipreheader_gep_int57_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep69 = add i32 %gep_int67, %gep_array68*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexitipreheader_gep_int67_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep79 = add i32 %gep_int77, %gep_array78*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexitipreheader_gep_int77_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep89 = add i32 %gep_int87, %gep_array88*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexitipreheader_gep_int87_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep99 = add i32 %gep_int97, %gep_array98*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexitipreheader_gep_int97_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep109 = add i32 %gep_int107, %gep_array108*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexitipreheader_gep_int107_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep119 = add i32 %gep_int117, %gep_array118*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexitipreheader_gep_int117_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep129 = add i32 %gep_int127, %gep_array128*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexitipreheader_gep_int127_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep139 = add i32 %gep_int137, %gep_array138*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexiti_gep_int137_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep226 = add i32 %gep_int225, 960*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexit_crit_edgei_gep_int225;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep231 = add i32 %gep_int229, %gep_array230*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexit_crit_edgei_gep_int229_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep228 = add i32 %gep226, %gep_array227*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_141)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexit_crit_edgei_gep226_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %gep253 = add i32 %gep_int252, 960*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_signed_add_32_2_op0 = main_preheaderi4i_gep_int252;
	end
	/* main: %.preheader.i4.i*/
	/*   %gep251 = add i32 %gep_int249, %gep_array250*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_signed_add_32_2_op0 = main_preheaderi4i_gep_int249_reg;
	end
	/* main: %285*/
	/*   %gep289 = add i32 %gep_int288, 960*/
	else if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_signed_add_32_2_op0 = main_285_gep_int288;
	end
	/* main: %285*/
	/*   %gep294 = add i32 %gep_int292, %gep_array293*/
	else if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		main_signed_add_32_2_op0 = main_285_gep_int292_reg;
	end
	/* main: %285*/
	/*   %gep291 = add i32 %gep289, %gep_array290*/
	else if ((cur_state == LEGUP_F_main_BB__285_187)) begin
		main_signed_add_32_2_op0 = main_285_gep289_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %gep316 = add i32 %gep_int315, 960*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_signed_add_32_2_op0 = main_preheaderii4_gep_int315;
	end
	/* main: %.preheader.i.i4*/
	/*   %gep314 = add i32 %gep_int312, %gep_array313*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_signed_add_32_2_op0 = main_preheaderii4_gep_int312_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep336 = add i32 %gep_int334, %gep_array335*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_signed_add_32_2_op0 = main_lrph12ipreheader_gep_int334_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep346 = add i32 %gep_int344, %gep_array345*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_signed_add_32_2_op0 = main_lrph12ipreheader_gep_int344_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep356 = add i32 %gep_int354, %gep_array355*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_signed_add_32_2_op0 = main_lrph12ipreheader_gep_int354_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep366 = add i32 %gep_int364, %gep_array365*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_signed_add_32_2_op0 = main_lrph12ipreheader_gep_int364_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep376 = add i32 %gep_int374, %gep_array375*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_signed_add_32_2_op0 = main_lrph12ipreheader_gep_int374_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep386 = add i32 %gep_int384, %gep_array385*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_signed_add_32_2_op0 = main_lrph12ipreheader_gep_int384_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep396 = add i32 %gep_int394, %gep_array395*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_signed_add_32_2_op0 = main_lrph12ipreheader_gep_int394_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep406 = add i32 %gep_int404, %gep_array405*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_225)) begin
		main_signed_add_32_2_op0 = main_lrph12ipreheader_gep_int404_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep416 = add i32 %gep_int414, %gep_array415*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		main_signed_add_32_2_op0 = main_lrph12i_gep_int414_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep446 = add i32 %gep_int444, %gep_array445*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		main_signed_add_32_2_op0 = main_lrph12i_gep_int444_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep456 = add i32 %gep_int454, %gep_array455*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_264)) begin
		main_signed_add_32_2_op0 = main_lrph12i_gep_int454_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep510 = add i32 %gep_int509, 1440*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main_signed_add_32_2_op0 = main__crit_edgei_gep_int509;
	end
	/* main: %._crit_edge.i*/
	/*   %gep498 = add i32 %gep496, %gep_array497*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main_signed_add_32_2_op0 = main__crit_edgei_gep496_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep530 = add i32 %gep_int529, 960*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_signed_add_32_2_op0 = main_preheaderi4i14_gep_int529;
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep525 = add i32 %gep523, %gep_array524*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		main_signed_add_32_2_op0 = main_preheaderi4i14_gep523_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep542 = add i32 %gep_int540, %gep_array541*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_296)) */ begin
		main_signed_add_32_2_op0 = main_preheaderi4i14_gep_int540_reg;
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep19 = add i32 %gep_int18, 1440*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_signed_add_32_2_op1 = 32'd1440;
	end
	/* main: %2*/
	/*   %gep7 = add i32 %gep5, %gep_array6*/
	else if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_2_op1 = main_2_gep_array6_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %gep39 = add i32 %gep_int38, 960*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_signed_add_32_2_op1 = 32'd960;
	end
	/* main: %.preheader.i.i*/
	/*   %gep34 = add i32 %gep32, %gep_array33*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_signed_add_32_2_op1 = main_preheaderii_gep_array33_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %gep51 = add i32 %gep_int49, %gep_array50*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_36)) begin
		main_signed_add_32_2_op1 = main_preheaderii_gep_array50_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep59 = add i32 %gep_int57, %gep_array58*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_signed_add_32_2_op1 = main_AddRoundKeyexitipreheader_gep_array58_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep69 = add i32 %gep_int67, %gep_array68*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_signed_add_32_2_op1 = main_AddRoundKeyexitipreheader_gep_array68_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep79 = add i32 %gep_int77, %gep_array78*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_signed_add_32_2_op1 = main_AddRoundKeyexitipreheader_gep_array78_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep89 = add i32 %gep_int87, %gep_array88*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_signed_add_32_2_op1 = main_AddRoundKeyexitipreheader_gep_array88_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep99 = add i32 %gep_int97, %gep_array98*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_signed_add_32_2_op1 = main_AddRoundKeyexitipreheader_gep_array98_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep109 = add i32 %gep_int107, %gep_array108*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_signed_add_32_2_op1 = main_AddRoundKeyexitipreheader_gep_array108_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep119 = add i32 %gep_int117, %gep_array118*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_signed_add_32_2_op1 = main_AddRoundKeyexitipreheader_gep_array118_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep129 = add i32 %gep_int127, %gep_array128*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		main_signed_add_32_2_op1 = main_AddRoundKeyexitipreheader_gep_array128_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep139 = add i32 %gep_int137, %gep_array138*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_signed_add_32_2_op1 = main_AddRoundKeyexiti_gep_array138_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep226 = add i32 %gep_int225, 960*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_signed_add_32_2_op1 = 32'd960;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep231 = add i32 %gep_int229, %gep_array230*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		main_signed_add_32_2_op1 = main_AddRoundKeyexit_crit_edgei_gep_array230_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep228 = add i32 %gep226, %gep_array227*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_141)) begin
		main_signed_add_32_2_op1 = main_AddRoundKeyexit_crit_edgei_gep_array227_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %gep253 = add i32 %gep_int252, 960*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_signed_add_32_2_op1 = 32'd960;
	end
	/* main: %.preheader.i4.i*/
	/*   %gep251 = add i32 %gep_int249, %gep_array250*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_signed_add_32_2_op1 = main_preheaderi4i_gep_array250_reg;
	end
	/* main: %285*/
	/*   %gep289 = add i32 %gep_int288, 960*/
	else if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_signed_add_32_2_op1 = 32'd960;
	end
	/* main: %285*/
	/*   %gep294 = add i32 %gep_int292, %gep_array293*/
	else if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		main_signed_add_32_2_op1 = main_285_gep_array293_reg;
	end
	/* main: %285*/
	/*   %gep291 = add i32 %gep289, %gep_array290*/
	else if ((cur_state == LEGUP_F_main_BB__285_187)) begin
		main_signed_add_32_2_op1 = main_285_gep_array290_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %gep316 = add i32 %gep_int315, 960*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_signed_add_32_2_op1 = 32'd960;
	end
	/* main: %.preheader.i.i4*/
	/*   %gep314 = add i32 %gep_int312, %gep_array313*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_signed_add_32_2_op1 = main_preheaderii4_gep_array313_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep336 = add i32 %gep_int334, %gep_array335*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_signed_add_32_2_op1 = main_lrph12ipreheader_gep_array335_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep346 = add i32 %gep_int344, %gep_array345*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_signed_add_32_2_op1 = main_lrph12ipreheader_gep_array345_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep356 = add i32 %gep_int354, %gep_array355*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_signed_add_32_2_op1 = main_lrph12ipreheader_gep_array355_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep366 = add i32 %gep_int364, %gep_array365*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_signed_add_32_2_op1 = main_lrph12ipreheader_gep_array365_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep376 = add i32 %gep_int374, %gep_array375*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_signed_add_32_2_op1 = main_lrph12ipreheader_gep_array375_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep386 = add i32 %gep_int384, %gep_array385*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_signed_add_32_2_op1 = main_lrph12ipreheader_gep_array385_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep396 = add i32 %gep_int394, %gep_array395*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_signed_add_32_2_op1 = main_lrph12ipreheader_gep_array395_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep406 = add i32 %gep_int404, %gep_array405*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_225)) begin
		main_signed_add_32_2_op1 = main_lrph12ipreheader_gep_array405_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep416 = add i32 %gep_int414, %gep_array415*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		main_signed_add_32_2_op1 = main_lrph12i_gep_array415_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep446 = add i32 %gep_int444, %gep_array445*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		main_signed_add_32_2_op1 = main_lrph12i_gep_array445_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep456 = add i32 %gep_int454, %gep_array455*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_264)) begin
		main_signed_add_32_2_op1 = main_lrph12i_gep_array455_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep510 = add i32 %gep_int509, 1440*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main_signed_add_32_2_op1 = 32'd1440;
	end
	/* main: %._crit_edge.i*/
	/*   %gep498 = add i32 %gep496, %gep_array497*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main_signed_add_32_2_op1 = main__crit_edgei_gep_array497_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep530 = add i32 %gep_int529, 960*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_signed_add_32_2_op1 = 32'd960;
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep525 = add i32 %gep523, %gep_array524*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		main_signed_add_32_2_op1 = main_preheaderi4i14_gep_array524_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep542 = add i32 %gep_int540, %gep_array541*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_296)) */ begin
		main_signed_add_32_2_op1 = main_preheaderi4i14_gep_array541_reg;
	end
end
always @(*) begin
	main_signed_add_32_2 = (main_signed_add_32_2_op0 + main_signed_add_32_2_op1);
end
always @(*) begin
	/* main: %2*/
	/*   %27 = add nsw i32 %j.02.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_signed_add_32_3_op0 = main_2_j02ii_reg;
	end
	/* main: %2*/
	/*   %gep10 = add i32 %gep_int8, %gep_array9*/
	else if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_3_op0 = main_2_gep_int8_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %gep46 = add i32 %gep_int45, 1440*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_signed_add_32_3_op0 = main_preheaderii_gep_int45;
	end
	/* main: %.preheader.i.i*/
	/*   %gep41 = add i32 %gep39, %gep_array40*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_signed_add_32_3_op0 = main_preheaderii_gep39_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep61 = add i32 %gep59, %gep_array60*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexitipreheader_gep59;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep71 = add i32 %gep69, %gep_array70*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexitipreheader_gep69;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep81 = add i32 %gep79, %gep_array80*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexitipreheader_gep79;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep91 = add i32 %gep89, %gep_array90*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexitipreheader_gep89;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep101 = add i32 %gep99, %gep_array100*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexitipreheader_gep99;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep111 = add i32 %gep109, %gep_array110*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexitipreheader_gep109;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep121 = add i32 %gep119, %gep_array120*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexitipreheader_gep119;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep131 = add i32 %gep129, %gep_array130*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexitipreheader_gep129;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep141 = add i32 %gep139, %gep_array140*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexiti_gep139;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep233 = add i32 %gep_int232, 1440*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexit_crit_edgei_gep_int232;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep238 = add i32 %gep_int236, %gep_array237*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexit_crit_edgei_gep_int236_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep235 = add i32 %gep233, %gep_array234*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_141)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexit_crit_edgei_gep233_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %gep260 = add i32 %gep_int259, 1440*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_signed_add_32_3_op0 = main_preheaderi4i_gep_int259;
	end
	/* main: %.preheader.i4.i*/
	/*   %gep255 = add i32 %gep253, %gep_array254*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_signed_add_32_3_op0 = main_preheaderi4i_gep253_reg;
	end
	/* main: %285*/
	/*   %gep296 = add i32 %gep_int295, 1440*/
	else if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_signed_add_32_3_op0 = main_285_gep_int295;
	end
	/* main: %285*/
	/*   %gep301 = add i32 %gep_int299, %gep_array300*/
	else if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		main_signed_add_32_3_op0 = main_285_gep_int299_reg;
	end
	/* main: %285*/
	/*   %gep298 = add i32 %gep296, %gep_array297*/
	else if ((cur_state == LEGUP_F_main_BB__285_187)) begin
		main_signed_add_32_3_op0 = main_285_gep296_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %gep323 = add i32 %gep_int322, 1440*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_signed_add_32_3_op0 = main_preheaderii4_gep_int322;
	end
	/* main: %.preheader.i.i4*/
	/*   %gep318 = add i32 %gep316, %gep_array317*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_signed_add_32_3_op0 = main_preheaderii4_gep316_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep338 = add i32 %gep336, %gep_array337*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_signed_add_32_3_op0 = main_lrph12ipreheader_gep336;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep348 = add i32 %gep346, %gep_array347*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_signed_add_32_3_op0 = main_lrph12ipreheader_gep346;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep358 = add i32 %gep356, %gep_array357*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_signed_add_32_3_op0 = main_lrph12ipreheader_gep356;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep368 = add i32 %gep366, %gep_array367*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_signed_add_32_3_op0 = main_lrph12ipreheader_gep366;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep378 = add i32 %gep376, %gep_array377*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_signed_add_32_3_op0 = main_lrph12ipreheader_gep376;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep388 = add i32 %gep386, %gep_array387*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_signed_add_32_3_op0 = main_lrph12ipreheader_gep386;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep398 = add i32 %gep396, %gep_array397*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_signed_add_32_3_op0 = main_lrph12ipreheader_gep396;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep408 = add i32 %gep406, %gep_array407*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_225)) begin
		main_signed_add_32_3_op0 = main_lrph12ipreheader_gep406;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep418 = add i32 %gep416, %gep_array417*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		main_signed_add_32_3_op0 = main_lrph12i_gep416;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep448 = add i32 %gep446, %gep_array447*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		main_signed_add_32_3_op0 = main_lrph12i_gep446;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep458 = add i32 %gep456, %gep_array457*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_264)) begin
		main_signed_add_32_3_op0 = main_lrph12i_gep456;
	end
	/* main: %._crit_edge.i*/
	/*   %523 = add nsw i32 %j.02.i2.i11, 1*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main_signed_add_32_3_op0 = main__crit_edgei_j02i2i11_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep501 = add i32 %gep_int499, %gep_array500*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main_signed_add_32_3_op0 = main__crit_edgei_gep_int499_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep537 = add i32 %gep_int536, 1440*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_signed_add_32_3_op0 = main_preheaderi4i14_gep_int536;
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep532 = add i32 %gep530, %gep_array531*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) */ begin
		main_signed_add_32_3_op0 = main_preheaderi4i14_gep530_reg;
	end
end
always @(*) begin
	/* main: %2*/
	/*   %27 = add nsw i32 %j.02.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_signed_add_32_3_op1 = 32'd1;
	end
	/* main: %2*/
	/*   %gep10 = add i32 %gep_int8, %gep_array9*/
	else if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_3_op1 = main_2_gep_array9_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %gep46 = add i32 %gep_int45, 1440*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_signed_add_32_3_op1 = 32'd1440;
	end
	/* main: %.preheader.i.i*/
	/*   %gep41 = add i32 %gep39, %gep_array40*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_signed_add_32_3_op1 = main_preheaderii_gep_array40_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep61 = add i32 %gep59, %gep_array60*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_signed_add_32_3_op1 = main_AddRoundKeyexitipreheader_gep_array60_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep71 = add i32 %gep69, %gep_array70*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_signed_add_32_3_op1 = main_AddRoundKeyexitipreheader_gep_array70_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep81 = add i32 %gep79, %gep_array80*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_signed_add_32_3_op1 = main_AddRoundKeyexitipreheader_gep_array80_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep91 = add i32 %gep89, %gep_array90*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_signed_add_32_3_op1 = main_AddRoundKeyexitipreheader_gep_array90_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep101 = add i32 %gep99, %gep_array100*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_signed_add_32_3_op1 = main_AddRoundKeyexitipreheader_gep_array100_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep111 = add i32 %gep109, %gep_array110*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_signed_add_32_3_op1 = main_AddRoundKeyexitipreheader_gep_array110_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep121 = add i32 %gep119, %gep_array120*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_signed_add_32_3_op1 = main_AddRoundKeyexitipreheader_gep_array120_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep131 = add i32 %gep129, %gep_array130*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		main_signed_add_32_3_op1 = main_AddRoundKeyexitipreheader_gep_array130_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep141 = add i32 %gep139, %gep_array140*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_signed_add_32_3_op1 = main_AddRoundKeyexiti_gep_array140_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep233 = add i32 %gep_int232, 1440*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_signed_add_32_3_op1 = 32'd1440;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep238 = add i32 %gep_int236, %gep_array237*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		main_signed_add_32_3_op1 = main_AddRoundKeyexit_crit_edgei_gep_array237_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep235 = add i32 %gep233, %gep_array234*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_141)) begin
		main_signed_add_32_3_op1 = main_AddRoundKeyexit_crit_edgei_gep_array234_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %gep260 = add i32 %gep_int259, 1440*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_signed_add_32_3_op1 = 32'd1440;
	end
	/* main: %.preheader.i4.i*/
	/*   %gep255 = add i32 %gep253, %gep_array254*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_signed_add_32_3_op1 = main_preheaderi4i_gep_array254_reg;
	end
	/* main: %285*/
	/*   %gep296 = add i32 %gep_int295, 1440*/
	else if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_signed_add_32_3_op1 = 32'd1440;
	end
	/* main: %285*/
	/*   %gep301 = add i32 %gep_int299, %gep_array300*/
	else if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		main_signed_add_32_3_op1 = main_285_gep_array300_reg;
	end
	/* main: %285*/
	/*   %gep298 = add i32 %gep296, %gep_array297*/
	else if ((cur_state == LEGUP_F_main_BB__285_187)) begin
		main_signed_add_32_3_op1 = main_285_gep_array297_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %gep323 = add i32 %gep_int322, 1440*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_signed_add_32_3_op1 = 32'd1440;
	end
	/* main: %.preheader.i.i4*/
	/*   %gep318 = add i32 %gep316, %gep_array317*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_signed_add_32_3_op1 = main_preheaderii4_gep_array317_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep338 = add i32 %gep336, %gep_array337*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_signed_add_32_3_op1 = main_lrph12ipreheader_gep_array337_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep348 = add i32 %gep346, %gep_array347*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_signed_add_32_3_op1 = main_lrph12ipreheader_gep_array347_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep358 = add i32 %gep356, %gep_array357*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_signed_add_32_3_op1 = main_lrph12ipreheader_gep_array357_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep368 = add i32 %gep366, %gep_array367*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_signed_add_32_3_op1 = main_lrph12ipreheader_gep_array367_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep378 = add i32 %gep376, %gep_array377*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_signed_add_32_3_op1 = main_lrph12ipreheader_gep_array377_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep388 = add i32 %gep386, %gep_array387*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_signed_add_32_3_op1 = main_lrph12ipreheader_gep_array387_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep398 = add i32 %gep396, %gep_array397*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_signed_add_32_3_op1 = main_lrph12ipreheader_gep_array397_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep408 = add i32 %gep406, %gep_array407*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_225)) begin
		main_signed_add_32_3_op1 = main_lrph12ipreheader_gep_array407_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep418 = add i32 %gep416, %gep_array417*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		main_signed_add_32_3_op1 = main_lrph12i_gep_array417_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep448 = add i32 %gep446, %gep_array447*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		main_signed_add_32_3_op1 = main_lrph12i_gep_array447_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep458 = add i32 %gep456, %gep_array457*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_264)) begin
		main_signed_add_32_3_op1 = main_lrph12i_gep_array457_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %523 = add nsw i32 %j.02.i2.i11, 1*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main_signed_add_32_3_op1 = 32'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %gep501 = add i32 %gep_int499, %gep_array500*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main_signed_add_32_3_op1 = main__crit_edgei_gep_array500_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep537 = add i32 %gep_int536, 1440*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_signed_add_32_3_op1 = 32'd1440;
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep532 = add i32 %gep530, %gep_array531*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) */ begin
		main_signed_add_32_3_op1 = main_preheaderi4i14_gep_array531_reg;
	end
end
always @(*) begin
	main_signed_add_32_3 = (main_signed_add_32_3_op0 + main_signed_add_32_3_op1);
end
always @(*) begin
	/* main: %2*/
	/*   %gep12 = add i32 %gep_int11, 960*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_signed_add_32_1_op0 = main_2_gep_int11;
	end
	/* main: %2*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
	else if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_1_op0 = main_2_gep_int1_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %36 = add nsw i32 %j.11.i.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_signed_add_32_1_op0 = main_preheaderii_j11ii_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %gep30 = add i32 %gep_int28, %gep_array29*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_signed_add_32_1_op0 = main_preheaderii_gep_int28_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %gep44 = add i32 %gep_int42, %gep_array43*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_36)) begin
		main_signed_add_32_1_op0 = main_preheaderii_gep_int42_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep56 = add i32 %gep54, %gep_array55*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexitipreheader_gep54;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep66 = add i32 %gep64, %gep_array65*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexitipreheader_gep64;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep76 = add i32 %gep74, %gep_array75*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexitipreheader_gep74;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep86 = add i32 %gep84, %gep_array85*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexitipreheader_gep84;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep96 = add i32 %gep94, %gep_array95*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexitipreheader_gep94;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep106 = add i32 %gep104, %gep_array105*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexitipreheader_gep104;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep116 = add i32 %gep114, %gep_array115*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexitipreheader_gep114;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep126 = add i32 %gep124, %gep_array125*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexitipreheader_gep124;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep136 = add i32 %gep134, %gep_array135*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep134;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep146 = add i32 %gep144, %gep_array145*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep144;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep151 = add i32 %gep149, %gep_array150*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_104)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep149;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep156 = add i32 %gep154, %gep_array155*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep154;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep161 = add i32 %gep159, %gep_array160*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep159;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep166 = add i32 %gep164, %gep_array165*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep164;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep171 = add i32 %gep169, %gep_array170*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_113)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep169;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep176 = add i32 %gep174, %gep_array175*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_116)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep174;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep181 = add i32 %gep179, %gep_array180*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep179;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep186 = add i32 %gep184, %gep_array185*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep184;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep191 = add i32 %gep189, %gep_array190*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_123)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep189;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep196 = add i32 %gep194, %gep_array195*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_126)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep194;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep201 = add i32 %gep199, %gep_array200*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_129)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep199;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep206 = add i32 %gep204, %gep_array205*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_132)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep204;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep211 = add i32 %gep209, %gep_array210*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_135)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep209;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep219 = add i32 %gep_int218, 480*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexit_crit_edgei_gep_int218;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep224 = add i32 %gep_int222, %gep_array223*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexit_crit_edgei_gep_int222_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep221 = add i32 %gep219, %gep_array220*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_141)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexit_crit_edgei_gep219_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %gep246 = add i32 %gep_int245, 480*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_signed_add_32_1_op0 = main_preheaderi4i_gep_int245;
	end
	/* main: %.preheader.i4.i*/
	/*   %gep248 = add i32 %gep246, %gep_array247*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_signed_add_32_1_op0 = main_preheaderi4i_gep246_reg;
	end
	/* main: %.preheader.i*/
	/*   %gep274 = add i32 %gep_int272, %gep_array273*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_179)) begin
		main_signed_add_32_1_op0 = main_preheaderi_gep_int272_reg;
	end
	/* main: %285*/
	/*   %gep282 = add i32 %gep_int281, 480*/
	else if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_signed_add_32_1_op0 = main_285_gep_int281;
	end
	/* main: %285*/
	/*   %gep287 = add i32 %gep_int285, %gep_array286*/
	else if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		main_signed_add_32_1_op0 = main_285_gep_int285_reg;
	end
	/* main: %285*/
	/*   %gep284 = add i32 %gep282, %gep_array283*/
	else if ((cur_state == LEGUP_F_main_BB__285_187)) begin
		main_signed_add_32_1_op0 = main_285_gep282_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %gep309 = add i32 %gep_int308, 480*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_signed_add_32_1_op0 = main_preheaderii4_gep_int308;
	end
	/* main: %.preheader.i.i4*/
	/*   %gep311 = add i32 %gep309, %gep_array310*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_signed_add_32_1_op0 = main_preheaderii4_gep309_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep333 = add i32 %gep331, %gep_array332*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_signed_add_32_1_op0 = main_lrph12ipreheader_gep331;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep343 = add i32 %gep341, %gep_array342*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_signed_add_32_1_op0 = main_lrph12ipreheader_gep341;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep353 = add i32 %gep351, %gep_array352*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_signed_add_32_1_op0 = main_lrph12ipreheader_gep351;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep363 = add i32 %gep361, %gep_array362*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_signed_add_32_1_op0 = main_lrph12ipreheader_gep361;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep373 = add i32 %gep371, %gep_array372*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_signed_add_32_1_op0 = main_lrph12ipreheader_gep371;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep383 = add i32 %gep381, %gep_array382*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_signed_add_32_1_op0 = main_lrph12ipreheader_gep381;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep393 = add i32 %gep391, %gep_array392*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_signed_add_32_1_op0 = main_lrph12ipreheader_gep391;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep403 = add i32 %gep401, %gep_array402*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_225)) begin
		main_signed_add_32_1_op0 = main_lrph12ipreheader_gep401;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep413 = add i32 %gep411, %gep_array412*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		main_signed_add_32_1_op0 = main_lrph12i_gep411;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep423 = add i32 %gep421, %gep_array422*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_253)) begin
		main_signed_add_32_1_op0 = main_lrph12i_gep421;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep428 = add i32 %gep426, %gep_array427*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_254)) begin
		main_signed_add_32_1_op0 = main_lrph12i_gep426;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep433 = add i32 %gep431, %gep_array432*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_255)) begin
		main_signed_add_32_1_op0 = main_lrph12i_gep431;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep438 = add i32 %gep436, %gep_array437*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_259)) begin
		main_signed_add_32_1_op0 = main_lrph12i_gep436;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep443 = add i32 %gep441, %gep_array442*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		main_signed_add_32_1_op0 = main_lrph12i_gep441;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep453 = add i32 %gep451, %gep_array452*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_264)) begin
		main_signed_add_32_1_op0 = main_lrph12i_gep451;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep463 = add i32 %gep461, %gep_array462*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_266)) begin
		main_signed_add_32_1_op0 = main_lrph12i_gep461;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep468 = add i32 %gep466, %gep_array467*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_267)) begin
		main_signed_add_32_1_op0 = main_lrph12i_gep466;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep473 = add i32 %gep471, %gep_array472*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_268)) begin
		main_signed_add_32_1_op0 = main_lrph12i_gep471;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep478 = add i32 %gep476, %gep_array477*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_273)) begin
		main_signed_add_32_1_op0 = main_lrph12i_gep476;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep483 = add i32 %gep481, %gep_array482*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_274)) begin
		main_signed_add_32_1_op0 = main_lrph12i_gep481;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep488 = add i32 %gep486, %gep_array487*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_275)) begin
		main_signed_add_32_1_op0 = main_lrph12i_gep486;
	end
	/* main: %._crit_edge.i*/
	/*   %gep503 = add i32 %gep_int502, 960*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main_signed_add_32_1_op0 = main__crit_edgei_gep_int502;
	end
	/* main: %._crit_edge.i*/
	/*   %gep494 = add i32 %gep_int492, %gep_array493*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main_signed_add_32_1_op0 = main__crit_edgei_gep_int492_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %532 = add nsw i32 %j.11.i3.i13, 1*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_signed_add_32_1_op0 = main_preheaderi4i14_j11i3i13_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep521 = add i32 %gep_int519, %gep_array520*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		main_signed_add_32_1_op0 = main_preheaderi4i14_gep_int519_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep535 = add i32 %gep_int533, %gep_array534*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_296)) begin
		main_signed_add_32_1_op0 = main_preheaderi4i14_gep_int533_reg;
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %gep551 = add i32 %gep_int549, %gep_array550*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_318)) */ begin
		main_signed_add_32_1_op0 = main_preheaderloopexiti17_gep_int549_reg;
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep12 = add i32 %gep_int11, 960*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_signed_add_32_1_op1 = 32'd960;
	end
	/* main: %2*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
	else if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_1_op1 = main_2_gep_array2_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %36 = add nsw i32 %j.11.i.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_signed_add_32_1_op1 = 32'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %gep30 = add i32 %gep_int28, %gep_array29*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_signed_add_32_1_op1 = main_preheaderii_gep_array29_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %gep44 = add i32 %gep_int42, %gep_array43*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_36)) begin
		main_signed_add_32_1_op1 = main_preheaderii_gep_array43_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep56 = add i32 %gep54, %gep_array55*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexitipreheader_gep_array55_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep66 = add i32 %gep64, %gep_array65*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexitipreheader_gep_array65_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep76 = add i32 %gep74, %gep_array75*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexitipreheader_gep_array75_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep86 = add i32 %gep84, %gep_array85*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexitipreheader_gep_array85_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep96 = add i32 %gep94, %gep_array95*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexitipreheader_gep_array95_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep106 = add i32 %gep104, %gep_array105*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexitipreheader_gep_array105_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep116 = add i32 %gep114, %gep_array115*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexitipreheader_gep_array115_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep126 = add i32 %gep124, %gep_array125*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexitipreheader_gep_array125_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep136 = add i32 %gep134, %gep_array135*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array135_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep146 = add i32 %gep144, %gep_array145*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array145_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep151 = add i32 %gep149, %gep_array150*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_104)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array150_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep156 = add i32 %gep154, %gep_array155*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array155_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep161 = add i32 %gep159, %gep_array160*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array160_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep166 = add i32 %gep164, %gep_array165*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array165_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep171 = add i32 %gep169, %gep_array170*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_113)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array170_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep176 = add i32 %gep174, %gep_array175*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_116)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array175_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep181 = add i32 %gep179, %gep_array180*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array180_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep186 = add i32 %gep184, %gep_array185*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array185_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep191 = add i32 %gep189, %gep_array190*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_123)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array190_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep196 = add i32 %gep194, %gep_array195*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_126)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array195_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep201 = add i32 %gep199, %gep_array200*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_129)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array200_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep206 = add i32 %gep204, %gep_array205*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_132)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array205_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep211 = add i32 %gep209, %gep_array210*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_135)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array210_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep219 = add i32 %gep_int218, 480*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_signed_add_32_1_op1 = 32'd480;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep224 = add i32 %gep_int222, %gep_array223*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexit_crit_edgei_gep_array223_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep221 = add i32 %gep219, %gep_array220*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_141)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexit_crit_edgei_gep_array220_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %gep246 = add i32 %gep_int245, 480*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_signed_add_32_1_op1 = 32'd480;
	end
	/* main: %.preheader.i4.i*/
	/*   %gep248 = add i32 %gep246, %gep_array247*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_signed_add_32_1_op1 = main_preheaderi4i_gep_array247_reg;
	end
	/* main: %.preheader.i*/
	/*   %gep274 = add i32 %gep_int272, %gep_array273*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_179)) begin
		main_signed_add_32_1_op1 = main_preheaderi_gep_array273_reg;
	end
	/* main: %285*/
	/*   %gep282 = add i32 %gep_int281, 480*/
	else if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_signed_add_32_1_op1 = 32'd480;
	end
	/* main: %285*/
	/*   %gep287 = add i32 %gep_int285, %gep_array286*/
	else if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		main_signed_add_32_1_op1 = main_285_gep_array286_reg;
	end
	/* main: %285*/
	/*   %gep284 = add i32 %gep282, %gep_array283*/
	else if ((cur_state == LEGUP_F_main_BB__285_187)) begin
		main_signed_add_32_1_op1 = main_285_gep_array283_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %gep309 = add i32 %gep_int308, 480*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_signed_add_32_1_op1 = 32'd480;
	end
	/* main: %.preheader.i.i4*/
	/*   %gep311 = add i32 %gep309, %gep_array310*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_signed_add_32_1_op1 = main_preheaderii4_gep_array310_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep333 = add i32 %gep331, %gep_array332*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		main_signed_add_32_1_op1 = main_lrph12ipreheader_gep_array332_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep343 = add i32 %gep341, %gep_array342*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		main_signed_add_32_1_op1 = main_lrph12ipreheader_gep_array342_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep353 = add i32 %gep351, %gep_array352*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		main_signed_add_32_1_op1 = main_lrph12ipreheader_gep_array352_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep363 = add i32 %gep361, %gep_array362*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		main_signed_add_32_1_op1 = main_lrph12ipreheader_gep_array362_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep373 = add i32 %gep371, %gep_array372*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		main_signed_add_32_1_op1 = main_lrph12ipreheader_gep_array372_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep383 = add i32 %gep381, %gep_array382*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		main_signed_add_32_1_op1 = main_lrph12ipreheader_gep_array382_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep393 = add i32 %gep391, %gep_array392*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_224)) begin
		main_signed_add_32_1_op1 = main_lrph12ipreheader_gep_array392_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %gep403 = add i32 %gep401, %gep_array402*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_225)) begin
		main_signed_add_32_1_op1 = main_lrph12ipreheader_gep_array402_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep413 = add i32 %gep411, %gep_array412*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		main_signed_add_32_1_op1 = main_lrph12i_gep_array412_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep423 = add i32 %gep421, %gep_array422*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_253)) begin
		main_signed_add_32_1_op1 = main_lrph12i_gep_array422_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep428 = add i32 %gep426, %gep_array427*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_254)) begin
		main_signed_add_32_1_op1 = main_lrph12i_gep_array427_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep433 = add i32 %gep431, %gep_array432*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_255)) begin
		main_signed_add_32_1_op1 = main_lrph12i_gep_array432_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep438 = add i32 %gep436, %gep_array437*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_259)) begin
		main_signed_add_32_1_op1 = main_lrph12i_gep_array437_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep443 = add i32 %gep441, %gep_array442*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		main_signed_add_32_1_op1 = main_lrph12i_gep_array442_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep453 = add i32 %gep451, %gep_array452*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_264)) begin
		main_signed_add_32_1_op1 = main_lrph12i_gep_array452_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep463 = add i32 %gep461, %gep_array462*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_266)) begin
		main_signed_add_32_1_op1 = main_lrph12i_gep_array462_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep468 = add i32 %gep466, %gep_array467*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_267)) begin
		main_signed_add_32_1_op1 = main_lrph12i_gep_array467_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep473 = add i32 %gep471, %gep_array472*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_268)) begin
		main_signed_add_32_1_op1 = main_lrph12i_gep_array472_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep478 = add i32 %gep476, %gep_array477*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_273)) begin
		main_signed_add_32_1_op1 = main_lrph12i_gep_array477_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep483 = add i32 %gep481, %gep_array482*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_274)) begin
		main_signed_add_32_1_op1 = main_lrph12i_gep_array482_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   %gep488 = add i32 %gep486, %gep_array487*/
	else if ((cur_state == LEGUP_F_main_BB_lrph12i_275)) begin
		main_signed_add_32_1_op1 = main_lrph12i_gep_array487_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep503 = add i32 %gep_int502, 960*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_280)) begin
		main_signed_add_32_1_op1 = 32'd960;
	end
	/* main: %._crit_edge.i*/
	/*   %gep494 = add i32 %gep_int492, %gep_array493*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main_signed_add_32_1_op1 = main__crit_edgei_gep_array493_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %532 = add nsw i32 %j.11.i3.i13, 1*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_signed_add_32_1_op1 = 32'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep521 = add i32 %gep_int519, %gep_array520*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		main_signed_add_32_1_op1 = main_preheaderi4i14_gep_array520_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep535 = add i32 %gep_int533, %gep_array534*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_296)) begin
		main_signed_add_32_1_op1 = main_preheaderi4i14_gep_array534_reg;
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %gep551 = add i32 %gep_int549, %gep_array550*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_318)) */ begin
		main_signed_add_32_1_op1 = main_preheaderloopexiti17_gep_array550_reg;
	end
end
always @(*) begin
	main_signed_add_32_1 = (main_signed_add_32_1_op0 + main_signed_add_32_1_op1);
end
always @(*) begin
	/* main: %2*/
	/*   %gep14 = add i32 %gep12, %gep_array13*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_4_op0 = main_2_gep12_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %48 = add nsw i32 %j.11.i.i, 3*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_signed_add_32_4_op0 = main_preheaderii_j11ii_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %gep48 = add i32 %gep46, %gep_array47*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_signed_add_32_4_op0 = main_preheaderii_gep46_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %239 = add nsw i32 %j.02.i2.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_signed_add_32_4_op0 = main_AddRoundKeyexit_crit_edgei_j02i2i_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %261 = add nsw i32 %j.11.i3.i, 3*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_signed_add_32_4_op0 = main_preheaderi4i_j11i3i_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %gep258 = add i32 %gep_int256, %gep_array257*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_signed_add_32_4_op0 = main_preheaderi4i_gep_int256_reg;
	end
	/* main: %285*/
	/*   %311 = add nsw i32 %j.02.i.i1, 1*/
	else if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_signed_add_32_4_op0 = main_285_j02ii1_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %333 = add nsw i32 %j.11.i.i3, 3*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_signed_add_32_4_op0 = main_preheaderii4_j11ii3_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %gep321 = add i32 %gep_int319, %gep_array320*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_signed_add_32_4_op0 = main_preheaderii4_gep_int319_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep505 = add i32 %gep503, %gep_array504*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main_signed_add_32_4_op0 = main__crit_edgei_gep503_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %544 = add nsw i32 %j.11.i3.i13, 3*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_signed_add_32_4_op0 = main_preheaderi4i14_j11i3i13_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep539 = add i32 %gep537, %gep_array538*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) */ begin
		main_signed_add_32_4_op0 = main_preheaderi4i14_gep537_reg;
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep14 = add i32 %gep12, %gep_array13*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_4_op1 = main_2_gep_array13_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %48 = add nsw i32 %j.11.i.i, 3*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_signed_add_32_4_op1 = 32'd3;
	end
	/* main: %.preheader.i.i*/
	/*   %gep48 = add i32 %gep46, %gep_array47*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_signed_add_32_4_op1 = main_preheaderii_gep_array47_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %239 = add nsw i32 %j.02.i2.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139)) begin
		main_signed_add_32_4_op1 = 32'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %261 = add nsw i32 %j.11.i3.i, 3*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_signed_add_32_4_op1 = 32'd3;
	end
	/* main: %.preheader.i4.i*/
	/*   %gep258 = add i32 %gep_int256, %gep_array257*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_signed_add_32_4_op1 = main_preheaderi4i_gep_array257_reg;
	end
	/* main: %285*/
	/*   %311 = add nsw i32 %j.02.i.i1, 1*/
	else if ((cur_state == LEGUP_F_main_BB__285_185)) begin
		main_signed_add_32_4_op1 = 32'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %333 = add nsw i32 %j.11.i.i3, 3*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_signed_add_32_4_op1 = 32'd3;
	end
	/* main: %.preheader.i.i4*/
	/*   %gep321 = add i32 %gep_int319, %gep_array320*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_signed_add_32_4_op1 = main_preheaderii4_gep_array320_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep505 = add i32 %gep503, %gep_array504*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main_signed_add_32_4_op1 = main__crit_edgei_gep_array504_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %544 = add nsw i32 %j.11.i3.i13, 3*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) begin
		main_signed_add_32_4_op1 = 32'd3;
	end
	/* main: %.preheader.i4.i14*/
	/*   %gep539 = add i32 %gep537, %gep_array538*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) */ begin
		main_signed_add_32_4_op1 = main_preheaderi4i14_gep_array538_reg;
	end
end
always @(*) begin
	main_signed_add_32_4 = (main_signed_add_32_4_op0 + main_signed_add_32_4_op1);
end
always @(*) begin
	/* main: %2*/
	/*   %gep24 = add i32 %gep_int22, %gep_array23*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_7_op0 = main_2_gep_int22_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %249 = add nsw i32 %j.11.i3.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_signed_add_32_7_op0 = main_preheaderi4i_j11i3i_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %gep265 = add i32 %gep_int263, %gep_array264*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_signed_add_32_7_op0 = main_preheaderi4i_gep_int263_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %321 = add nsw i32 %j.11.i.i3, 1*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_signed_add_32_7_op0 = main_preheaderii4_j11ii3_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %gep328 = add i32 %gep_int326, %gep_array327*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_signed_add_32_7_op0 = main_preheaderii4_gep_int326_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep515 = add i32 %gep_int513, %gep_array514*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) */ begin
		main_signed_add_32_7_op0 = main__crit_edgei_gep_int513_reg;
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep24 = add i32 %gep_int22, %gep_array23*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_7_op1 = main_2_gep_array23_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %249 = add nsw i32 %j.11.i3.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_signed_add_32_7_op1 = 32'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %gep265 = add i32 %gep_int263, %gep_array264*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_signed_add_32_7_op1 = main_preheaderi4i_gep_array264_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %321 = add nsw i32 %j.11.i.i3, 1*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_signed_add_32_7_op1 = 32'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %gep328 = add i32 %gep_int326, %gep_array327*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_signed_add_32_7_op1 = main_preheaderii4_gep_array327_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep515 = add i32 %gep_int513, %gep_array514*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) */ begin
		main_signed_add_32_7_op1 = main__crit_edgei_gep_array514_reg;
	end
end
always @(*) begin
	main_signed_add_32_7 = (main_signed_add_32_7_op0 + main_signed_add_32_7_op1);
end
always @(*) begin
	/* main: %2*/
	/*   %gep21 = add i32 %gep19, %gep_array20*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_6_op0 = main_2_gep19_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %42 = add nsw i32 %j.11.i.i, 2*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_signed_add_32_6_op0 = main_preheaderii_j11ii_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %255 = add nsw i32 %j.11.i3.i, 2*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_signed_add_32_6_op0 = main_preheaderi4i_j11i3i_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %gep262 = add i32 %gep260, %gep_array261*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_signed_add_32_6_op0 = main_preheaderi4i_gep260_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %327 = add nsw i32 %j.11.i.i3, 2*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_signed_add_32_6_op0 = main_preheaderii4_j11ii3_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %gep325 = add i32 %gep323, %gep_array324*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_signed_add_32_6_op0 = main_preheaderii4_gep323_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep512 = add i32 %gep510, %gep_array511*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main_signed_add_32_6_op0 = main__crit_edgei_gep510_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %538 = add nsw i32 %j.11.i3.i13, 2*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) */ begin
		main_signed_add_32_6_op0 = main_preheaderi4i14_j11i3i13_reg;
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep21 = add i32 %gep19, %gep_array20*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_6_op1 = main_2_gep_array20_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %42 = add nsw i32 %j.11.i.i, 2*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_signed_add_32_6_op1 = 32'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   %255 = add nsw i32 %j.11.i3.i, 2*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_154)) begin
		main_signed_add_32_6_op1 = 32'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   %gep262 = add i32 %gep260, %gep_array261*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		main_signed_add_32_6_op1 = main_preheaderi4i_gep_array261_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %327 = add nsw i32 %j.11.i.i3, 2*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_200)) begin
		main_signed_add_32_6_op1 = 32'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   %gep325 = add i32 %gep323, %gep_array324*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		main_signed_add_32_6_op1 = main_preheaderii4_gep_array324_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep512 = add i32 %gep510, %gep_array511*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		main_signed_add_32_6_op1 = main__crit_edgei_gep_array511_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %538 = add nsw i32 %j.11.i3.i13, 2*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_294)) */ begin
		main_signed_add_32_6_op1 = 32'd2;
	end
end
always @(*) begin
	main_signed_add_32_6 = (main_signed_add_32_6_op0 + main_signed_add_32_6_op1);
end
always @(*) begin
	/* main: %2*/
	/*   %gep17 = add i32 %gep_int15, %gep_array16*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_5_op0 = main_2_gep_int15_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep508 = add i32 %gep_int506, %gep_array507*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) */ begin
		main_signed_add_32_5_op0 = main__crit_edgei_gep_int506_reg;
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep17 = add i32 %gep_int15, %gep_array16*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_5_op1 = main_2_gep_array16_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep508 = add i32 %gep_int506, %gep_array507*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) */ begin
		main_signed_add_32_5_op1 = main__crit_edgei_gep_array507_reg;
	end
end
always @(*) begin
	main_signed_add_32_5 = (main_signed_add_32_5_op0 + main_signed_add_32_5_op1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %573*/
	/*   ret i32 %.lcssa*/
	if ((cur_state == LEGUP_F_main_BB__573_324)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %0*/
	/*   store i32 50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 246, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 48, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 224, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 7, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 43, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 40, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 210, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 171, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 9, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 79, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   %7 = load i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   %13 = load i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   %16 = load i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_27)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   %22 = load i32* %21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_38)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %41 = load i32* %40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_41)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %47 = load i32* %46, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_44)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %52 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %62 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_49)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %72 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %82 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %92 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %102 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %112 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %122 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %71, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_64)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %76 = load i32* %75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_65)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %81, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_67)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_68)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %91, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_70)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %96 = load i32* %95, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_71)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %111, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_79)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %134 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_95)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %143 = load i32* %142, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %153 = load i32* %152, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_105)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %153, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_107)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %163 = load i32* %162, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %163, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %173 = load i32* %172, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_113)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %173, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %183 = load i32* %182, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %188 = load i32* %187, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %193 = load i32* %192, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_123)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %193, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_125)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %198 = load i32* %197, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_126)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %203 = load i32* %202, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_129)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %208 = load i32* %207, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_132)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %222 = load i32* %221, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_144)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %228 = load i32* %227, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_147)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %234 = load i32* %233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_150)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %248 = load i32* %247, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_159)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %254 = load i32* %253, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_162)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %260 = load i32* %259, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_165)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %285*/
	/*   %294 = load i32* %293, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_190)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %285*/
	/*   %300 = load i32* %299, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_193)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %285*/
	/*   %306 = load i32* %305, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_196)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %320 = load i32* %319, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_205)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %326 = load i32* %325, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_208)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %332 = load i32* %331, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_211)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %337 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %347 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_216)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %357 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_217)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %367 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %377 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %387 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %397 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %407 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %356, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_227)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %366, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_229)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %376, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_231)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %396, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_237)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %418 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_249)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %437, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_257)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %448 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_258)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %447, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_260)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %458 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %457, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_262)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %467, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_265)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %477, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_269)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %482, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_271)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %500 = load i32* %499, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %506 = load i32* %505, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_284)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %512 = load i32* %511, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_287)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %518 = load i32* %517, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_290)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %525 = load i32* %524, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %531 = load i32* %530, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_298)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %537 = load i32* %536, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_301)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %543 = load i32* %542, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_304)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %0*/
	/*   store i32 50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* main: %0*/
	/*   store i32 246, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 48, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %0*/
	/*   store i32 152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %0*/
	/*   store i32 224, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %0*/
	/*   store i32 7, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %0*/
	/*   store i32 43, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_address_a = `TAG_g_key_a;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 40, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 210, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd6));
	end
	/* main: %0*/
	/*   store i32 171, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd8));
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd10));
	end
	/* main: %0*/
	/*   store i32 9, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd12));
	end
	/* main: %0*/
	/*   store i32 79, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd14));
	end
	/* main: %2*/
	/*   %7 = load i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_address_a = main_2_6;
	end
	/* main: %2*/
	/*   %13 = load i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_address_a = main_2_12_reg;
	end
	/* main: %2*/
	/*   %16 = load i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_27)) begin
		memory_controller_address_a = main_2_15_reg;
	end
	/* main: %2*/
	/*   %22 = load i32* %21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_30)) begin
		memory_controller_address_a = main_2_21_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		memory_controller_address_a = main_preheaderii_28;
	end
	/* main: %.preheader.i.i*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_38)) begin
		memory_controller_address_a = main_preheaderii_34_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %41 = load i32* %40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_41)) begin
		memory_controller_address_a = main_preheaderii_40_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %47 = load i32* %46, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_44)) begin
		memory_controller_address_a = main_preheaderii_46_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %52 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %62 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_49)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %72 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %82 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %92 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %102 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %112 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %122 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_55_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %71, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_64)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %76 = load i32* %75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_65)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_75_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %81, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_67)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_68)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_85_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %91, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_70)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %96 = load i32* %95, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_71)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_95_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %111, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_79)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %134 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_95)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %143 = load i32* %142, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_142;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %153 = load i32* %152, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_105)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_152_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %153, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_107)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %163 = load i32* %162, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_162;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %163, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %173 = load i32* %172, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_113)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_172;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %173, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %183 = load i32* %182, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_182;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %188 = load i32* %187, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_187;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %193 = load i32* %192, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_123)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_192;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %193, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_125)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %198 = load i32* %197, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_126)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_197;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %203 = load i32* %202, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_129)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_202;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %208 = load i32* %207, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_132)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_207;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %222 = load i32* %221, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_144)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_221_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %228 = load i32* %227, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_147)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_227_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %234 = load i32* %233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_150)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_233_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %248 = load i32* %247, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_159)) begin
		memory_controller_address_a = main_preheaderi4i_247_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %254 = load i32* %253, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_162)) begin
		memory_controller_address_a = main_preheaderi4i_253_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %260 = load i32* %259, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_165)) begin
		memory_controller_address_a = main_preheaderi4i_259_reg;
	end
	/* main: %285*/
	/*   %294 = load i32* %293, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_190)) begin
		memory_controller_address_a = main_285_293_reg;
	end
	/* main: %285*/
	/*   %300 = load i32* %299, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_193)) begin
		memory_controller_address_a = main_285_299_reg;
	end
	/* main: %285*/
	/*   %306 = load i32* %305, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_196)) begin
		memory_controller_address_a = main_285_305_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %320 = load i32* %319, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_205)) begin
		memory_controller_address_a = main_preheaderii4_319_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %326 = load i32* %325, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_208)) begin
		memory_controller_address_a = main_preheaderii4_325_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %332 = load i32* %331, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_211)) begin
		memory_controller_address_a = main_preheaderii4_331_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %337 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %347 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_216)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %357 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_217)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %367 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %377 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %387 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %397 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %407 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %356, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_227)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %366, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_229)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %376, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_231)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %396, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_237)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %.lr.ph12.i*/
	/*   %418 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_249)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %437, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_257)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %.lr.ph12.i*/
	/*   %448 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_258)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %447, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_260)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %.lr.ph12.i*/
	/*   %458 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %457, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_262)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %467, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_265)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %477, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_269)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %482, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_271)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* main: %._crit_edge.i*/
	/*   %500 = load i32* %499, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		memory_controller_address_a = main__crit_edgei_499;
	end
	/* main: %._crit_edge.i*/
	/*   %506 = load i32* %505, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_284)) begin
		memory_controller_address_a = main__crit_edgei_505_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %512 = load i32* %511, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_287)) begin
		memory_controller_address_a = main__crit_edgei_511_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %518 = load i32* %517, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_290)) begin
		memory_controller_address_a = main__crit_edgei_517_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %525 = load i32* %524, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		memory_controller_address_a = main_preheaderi4i14_524;
	end
	/* main: %.preheader.i4.i14*/
	/*   %531 = load i32* %530, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_298)) begin
		memory_controller_address_a = main_preheaderi4i14_530_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %537 = load i32* %536, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_301)) begin
		memory_controller_address_a = main_preheaderi4i14_536_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %543 = load i32* %542, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_304)) begin
		memory_controller_address_a = main_preheaderi4i14_542_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %0*/
	/*   store i32 50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 246, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 48, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 224, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 7, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 43, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 40, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 210, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 171, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 9, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 79, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   %7 = load i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %2*/
	/*   %13 = load i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %2*/
	/*   %16 = load i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_27)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %2*/
	/*   %22 = load i32* %21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_30)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i.i*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i.i*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_38)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i.i*/
	/*   %41 = load i32* %40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_41)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i.i*/
	/*   %47 = load i32* %46, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_44)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %52 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %62 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_49)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %72 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %82 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %92 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %102 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %112 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %122 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %71, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_64)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %76 = load i32* %75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_65)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %81, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_67)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_68)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %91, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_70)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %96 = load i32* %95, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_71)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %111, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_79)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %134 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_95)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %143 = load i32* %142, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %153 = load i32* %152, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_105)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %153, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_107)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %163 = load i32* %162, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %163, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %173 = load i32* %172, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_113)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %173, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %183 = load i32* %182, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %188 = load i32* %187, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %193 = load i32* %192, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_123)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %193, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_125)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %198 = load i32* %197, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_126)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %203 = load i32* %202, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_129)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %208 = load i32* %207, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_132)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %222 = load i32* %221, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_144)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %228 = load i32* %227, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_147)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %234 = load i32* %233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_150)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i4.i*/
	/*   %248 = load i32* %247, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_159)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i4.i*/
	/*   %254 = load i32* %253, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_162)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i4.i*/
	/*   %260 = load i32* %259, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_165)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %285*/
	/*   %294 = load i32* %293, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_190)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %285*/
	/*   %300 = load i32* %299, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_193)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %285*/
	/*   %306 = load i32* %305, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_196)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i.i4*/
	/*   %320 = load i32* %319, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_205)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i.i4*/
	/*   %326 = load i32* %325, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_208)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i.i4*/
	/*   %332 = load i32* %331, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_211)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %337 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %347 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_216)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %357 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_217)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %367 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %377 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %387 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %397 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %407 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %356, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_227)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %366, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_229)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %376, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_231)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %396, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_237)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %418 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_249)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %437, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_257)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %448 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_258)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %447, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_260)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %458 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %457, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_262)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %467, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_265)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %477, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_269)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %482, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_271)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %500 = load i32* %499, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %506 = load i32* %505, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_284)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %512 = load i32* %511, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_287)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %518 = load i32* %517, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_290)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i4.i14*/
	/*   %525 = load i32* %524, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i4.i14*/
	/*   %531 = load i32* %530, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_298)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i4.i14*/
	/*   %537 = load i32* %536, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_301)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i4.i14*/
	/*   %543 = load i32* %542, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_304)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %0*/
	/*   store i32 50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_a = 32'd50;
	end
	/* main: %0*/
	/*   store i32 246, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_a = 32'd246;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_in_a = 32'd136;
	end
	/* main: %0*/
	/*   store i32 48, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_in_a = 32'd48;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_in_a = 32'd49;
	end
	/* main: %0*/
	/*   store i32 152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_in_a = 32'd152;
	end
	/* main: %0*/
	/*   store i32 224, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_in_a = 32'd224;
	end
	/* main: %0*/
	/*   store i32 7, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_in_a = 32'd7;
	end
	/* main: %0*/
	/*   store i32 43, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_in_a = 32'd43;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_in_a = 32'd21;
	end
	/* main: %0*/
	/*   store i32 40, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_in_a = 32'd40;
	end
	/* main: %0*/
	/*   store i32 210, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_in_a = 32'd210;
	end
	/* main: %0*/
	/*   store i32 171, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_in_a = 32'd171;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_in_a = 32'd21;
	end
	/* main: %0*/
	/*   store i32 9, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_in_a = 32'd9;
	end
	/* main: %0*/
	/*   store i32 79, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_in_a = 32'd79;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %71, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_64)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_71;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %81, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_67)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_81;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %91, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_70)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_91;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %111, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_79)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_111;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %153, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_107)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_153;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %163, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_163;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %173, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_173;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %193, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_125)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_193;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %356, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_227)) begin
		memory_controller_in_a = main_lrph12ipreheader_356;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %366, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_229)) begin
		memory_controller_in_a = main_lrph12ipreheader_366;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %376, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_231)) begin
		memory_controller_in_a = main_lrph12ipreheader_376;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %396, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_237)) begin
		memory_controller_in_a = main_lrph12ipreheader_396;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %437, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_257)) begin
		memory_controller_in_a = main_lrph12i_437;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %447, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_260)) begin
		memory_controller_in_a = main_lrph12i_447;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %457, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_262)) begin
		memory_controller_in_a = main_lrph12i_457;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %467, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_265)) begin
		memory_controller_in_a = main_lrph12i_467;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %477, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_269)) begin
		memory_controller_in_a = main_lrph12i_477;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %482, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_271)) begin
		memory_controller_in_a = main_lrph12i_482;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %0*/
	/*   store i32 50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 246, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 48, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 224, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 7, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 43, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 40, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 210, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 171, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 9, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 79, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %2*/
	/*   %7 = load i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %2*/
	/*   %13 = load i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %2*/
	/*   %16 = load i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_27)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %2*/
	/*   %22 = load i32* %21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_30)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_38)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   %41 = load i32* %40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_41)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   %47 = load i32* %46, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_44)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %52 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %62 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_49)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %72 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %82 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %92 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %102 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %112 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %122 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %71, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_64)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %76 = load i32* %75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_65)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %81, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_67)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_68)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %91, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_70)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %96 = load i32* %95, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_71)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %111, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_79)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %134 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_95)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %143 = load i32* %142, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %153 = load i32* %152, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_105)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %153, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_107)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %163 = load i32* %162, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %163, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %173 = load i32* %172, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_113)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %173, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %183 = load i32* %182, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %188 = load i32* %187, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %193 = load i32* %192, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_123)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %193, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_125)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %198 = load i32* %197, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_126)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %203 = load i32* %202, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_129)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %208 = load i32* %207, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_132)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %222 = load i32* %221, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_144)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %228 = load i32* %227, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_147)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %234 = load i32* %233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_150)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   %248 = load i32* %247, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_159)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   %254 = load i32* %253, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_162)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   %260 = load i32* %259, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_165)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %285*/
	/*   %294 = load i32* %293, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_190)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %285*/
	/*   %300 = load i32* %299, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_193)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %285*/
	/*   %306 = load i32* %305, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_196)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   %320 = load i32* %319, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_205)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   %326 = load i32* %325, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_208)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   %332 = load i32* %331, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_211)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %337 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %347 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_216)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %357 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_217)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %367 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %377 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %387 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %397 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %407 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %356, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_227)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %366, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_229)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %376, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_231)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %396, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_237)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %418 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_249)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %437, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_257)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %448 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_258)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %447, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_260)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %458 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %457, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_262)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %467, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_265)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %477, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_269)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %482, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_271)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %500 = load i32* %499, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %506 = load i32* %505, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_284)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %512 = load i32* %511, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_287)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %518 = load i32* %517, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_290)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   %525 = load i32* %524, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   %531 = load i32* %530, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_298)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   %537 = load i32* %536, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_301)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   %543 = load i32* %542, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_304)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 90, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 141, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 126, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 22, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 174, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 166, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 247, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 207, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 60, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   %4 = load i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   store i32 %8, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   store i32 %14, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_26)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   %19 = load i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_27)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   store i32 %20, i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_29)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   %25 = load i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_30)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   store i32 %26, i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_32)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %32 = load i32* %31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %33, i32* %31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_37)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %38 = load i32* %37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_38)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %39, i32* %37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_40)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_41)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %45, i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_43)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %50 = load i32* %49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_44)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %51, i32* %49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_46)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %57 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %67 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_49)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %77 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %87 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %97 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %107 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %117 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %127 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %61 = load i32* %60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %61, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %66 = load i32* %65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_59)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %66, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_61)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %71 = load i32* %70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_62)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %56, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_64)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %81 = load i32* %80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_65)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %76, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_67)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %91 = load i32* %90, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_68)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %86, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_70)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %101 = load i32* %100, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_71)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %101, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_73)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %106 = load i32* %105, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_74)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %106, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_76)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %111 = load i32* %110, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_77)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %96, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_79)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %116 = load i32* %115, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_80)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %116, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_82)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %121 = load i32* %120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_83)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %121, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_85)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %126 = load i32* %125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_86)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %126, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_88)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %131 = load i32* %130, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_89)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %131, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_91)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %139 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_95)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %138 = load i32* %137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %144 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_99)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %143, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_100)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %149 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %148 = load i32* %147, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %148, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_104)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %154 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_105)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %159 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_106)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %138, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_107)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %158 = load i32* %157, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %164 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %169 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_110)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %158, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %168 = load i32* %167, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %174 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_113)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %179 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_114)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %178 = load i32* %177, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_116)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %184 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %183, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_119)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %189 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %188, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_122)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %194 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_123)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %178, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_125)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %199 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_126)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %198, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_128)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %204 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_129)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %203, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_131)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %209 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_132)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %208, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_134)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_135)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %213, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_137)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %219 = load i32* %218, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %216 = load i32* %215, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_141)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %220, i32* %218, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_143)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %225 = load i32* %224, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_144)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %226, i32* %224, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_146)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %231 = load i32* %230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_147)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %232, i32* %230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_149)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %237 = load i32* %236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_150)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %238, i32* %236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_152)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %245 = load i32* %244, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_155)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %242 = load i32* %241, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %246, i32* %244, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_158)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %251 = load i32* %250, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_159)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %252, i32* %250, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_161)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %257 = load i32* %256, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_162)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %258, i32* %256, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_164)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %263 = load i32* %262, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_165)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %264, i32* %262, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_167)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %267 = load i32* %266, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_171)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %269*/
	/*   %.pre.i = load i32* %266, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__269_174)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %277 = load i32* %276, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_179)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %285*/
	/*   %291 = load i32* %290, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %285*/
	/*   %288 = load i32* %287, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_187)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %285*/
	/*   store i32 %292, i32* %290, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_189)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %285*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_190)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %285*/
	/*   store i32 %298, i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_192)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %285*/
	/*   %303 = load i32* %302, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_193)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %285*/
	/*   store i32 %304, i32* %302, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_195)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %285*/
	/*   %309 = load i32* %308, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_196)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %285*/
	/*   store i32 %310, i32* %308, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_198)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %317 = load i32* %316, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_201)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %314 = load i32* %313, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %318, i32* %316, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_204)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %323 = load i32* %322, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_205)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %324, i32* %322, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_207)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %329 = load i32* %328, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_208)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %330, i32* %328, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_210)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %335 = load i32* %334, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_211)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %336, i32* %334, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_213)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %342 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %352 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_216)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %362 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_217)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %372 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %382 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %392 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %402 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %412 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %346, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %351, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_225)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %341, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_227)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %361, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_229)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %371, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_231)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %386, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_233)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %391, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_235)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %381, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_237)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %401, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_239)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %406, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_241)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %411, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_243)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %416, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_245)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %423 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_249)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %428 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_250)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %433 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_251)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %438 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %427, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_253)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %432, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_255)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %443 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_256)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %422, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_257)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %453 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_258)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %442, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_260)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %463 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %452, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_262)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %468 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_263)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %473 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_264)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %478 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_265)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %472, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_267)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %462, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_269)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %483 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_270)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %488 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_271)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %493 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_272)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %487, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_274)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %492, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_276)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %497, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_278)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %503 = load i32* %502, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %504, i32* %502, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_283)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %509 = load i32* %508, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_284)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %510, i32* %508, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_286)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %515 = load i32* %514, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_287)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %516, i32* %514, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_289)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %521 = load i32* %520, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_290)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %522, i32* %520, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_292)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %528 = load i32* %527, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %529, i32* %527, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_297)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %534 = load i32* %533, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_298)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %535, i32* %533, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_300)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %540 = load i32* %539, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_301)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %541, i32* %539, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_303)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %546 = load i32* %545, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_304)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %547, i32* %545, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_306)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i20*/
	/*   %550 = load i32* %549, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi20_310)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %552*/
	/*   %.pre14.i = load i32* %549, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__552_313)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %560 = load i32* %559, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_318)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 90, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 141, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %0*/
	/*   store i32 162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %0*/
	/*   store i32 55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %0*/
	/*   store i32 52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %0*/
	/*   store i32 126, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 22, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 174, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 166, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd7));
	end
	/* main: %0*/
	/*   store i32 247, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd9));
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd11));
	end
	/* main: %0*/
	/*   store i32 207, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd13));
	end
	/* main: %0*/
	/*   store i32 60, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd15));
	end
	/* main: %2*/
	/*   %4 = load i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_address_b = main_2_3;
	end
	/* main: %2*/
	/*   store i32 %8, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		memory_controller_address_b = main_2_6_reg;
	end
	/* main: %2*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_address_b = main_2_9_reg;
	end
	/* main: %2*/
	/*   store i32 %14, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_26)) begin
		memory_controller_address_b = main_2_12_reg;
	end
	/* main: %2*/
	/*   %19 = load i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_27)) begin
		memory_controller_address_b = main_2_18_reg;
	end
	/* main: %2*/
	/*   store i32 %20, i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_29)) begin
		memory_controller_address_b = main_2_18_reg;
	end
	/* main: %2*/
	/*   %25 = load i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_30)) begin
		memory_controller_address_b = main_2_24_reg;
	end
	/* main: %2*/
	/*   store i32 %26, i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_32)) begin
		memory_controller_address_b = main_2_24_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %32 = load i32* %31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		memory_controller_address_b = main_preheaderii_31;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %33, i32* %31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_37)) begin
		memory_controller_address_b = main_preheaderii_31_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %38 = load i32* %37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_38)) begin
		memory_controller_address_b = main_preheaderii_37_reg;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %39, i32* %37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_40)) begin
		memory_controller_address_b = main_preheaderii_37_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_41)) begin
		memory_controller_address_b = main_preheaderii_43_reg;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %45, i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_43)) begin
		memory_controller_address_b = main_preheaderii_43_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %50 = load i32* %49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_44)) begin
		memory_controller_address_b = main_preheaderii_49_reg;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %51, i32* %49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_46)) begin
		memory_controller_address_b = main_preheaderii_49_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %57 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %67 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_49)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %77 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %87 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %97 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %107 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %117 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %127 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %61 = load i32* %60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_60_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %61, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %66 = load i32* %65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_59)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_65_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %66, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_61)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %71 = load i32* %70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_62)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_70_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %56, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_64)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %81 = load i32* %80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_65)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_80_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %76, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_67)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %91 = load i32* %90, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_68)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_90_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %86, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_70)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %101 = load i32* %100, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_71)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_100_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %101, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_73)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %106 = load i32* %105, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_74)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_105_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %106, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_76)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %111 = load i32* %110, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_77)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_110_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %96, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_79)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %116 = load i32* %115, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_80)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_115_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %116, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_82)) begin
		memory_controller_address_b = `TAG_g_statemt_a;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %121 = load i32* %120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_83)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_120_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %121, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_85)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %126 = load i32* %125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_86)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_125_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %126, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_88)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %131 = load i32* %130, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_89)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_130_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %131, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_91)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %139 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_95)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %138 = load i32* %137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		memory_controller_address_b = main_AddRoundKeyexiti_137;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %144 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_99)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %143, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_100)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %149 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %148 = load i32* %147, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		memory_controller_address_b = main_AddRoundKeyexiti_147;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %148, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_104)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %154 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_105)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %159 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_106)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %138, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_107)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %158 = load i32* %157, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		memory_controller_address_b = main_AddRoundKeyexiti_157;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %164 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %169 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_110)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %158, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %168 = load i32* %167, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		memory_controller_address_b = main_AddRoundKeyexiti_167;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %174 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_113)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %179 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_114)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %178 = load i32* %177, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_116)) begin
		memory_controller_address_b = main_AddRoundKeyexiti_177;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %184 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %183, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_119)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %189 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %188, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_122)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %194 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_123)) begin
		memory_controller_address_b = `TAG_g_statemt_a;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %178, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_125)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %199 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_126)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %198, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_128)) begin
		memory_controller_address_b = `TAG_g_statemt_a;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %204 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_129)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %203, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_131)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %209 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_132)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %208, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_134)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_135)) begin
		memory_controller_address_b = main_AddRoundKeyexiti_212;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %213, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_137)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %219 = load i32* %218, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_218;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %216 = load i32* %215, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_141)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_215;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %220, i32* %218, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_143)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_218_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %225 = load i32* %224, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_144)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_224_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %226, i32* %224, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_146)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_224_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %231 = load i32* %230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_147)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_230_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %232, i32* %230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_149)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_230_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %237 = load i32* %236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_150)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_236_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %238, i32* %236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_152)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_236_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %245 = load i32* %244, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_155)) begin
		memory_controller_address_b = main_preheaderi4i_244;
	end
	/* main: %.preheader.i4.i*/
	/*   %242 = load i32* %241, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		memory_controller_address_b = main_preheaderi4i_241;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %246, i32* %244, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_158)) begin
		memory_controller_address_b = main_preheaderi4i_244_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %251 = load i32* %250, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_159)) begin
		memory_controller_address_b = main_preheaderi4i_250_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %252, i32* %250, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_161)) begin
		memory_controller_address_b = main_preheaderi4i_250_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %257 = load i32* %256, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_162)) begin
		memory_controller_address_b = main_preheaderi4i_256_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %258, i32* %256, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_164)) begin
		memory_controller_address_b = main_preheaderi4i_256_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %263 = load i32* %262, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_165)) begin
		memory_controller_address_b = main_preheaderi4i_262_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %264, i32* %262, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_167)) begin
		memory_controller_address_b = main_preheaderi4i_262_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %267 = load i32* %266, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_171)) begin
		memory_controller_address_b = main_lrphi_266;
	end
	/* main: %269*/
	/*   %.pre.i = load i32* %266, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__269_174)) begin
		memory_controller_address_b = main_lrphi_266_reg;
	end
	/* main: %.preheader.i*/
	/*   %277 = load i32* %276, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_179)) begin
		memory_controller_address_b = main_preheaderi_276;
	end
	/* main: %285*/
	/*   %291 = load i32* %290, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		memory_controller_address_b = main_285_290;
	end
	/* main: %285*/
	/*   %288 = load i32* %287, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_187)) begin
		memory_controller_address_b = main_285_287;
	end
	/* main: %285*/
	/*   store i32 %292, i32* %290, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_189)) begin
		memory_controller_address_b = main_285_290_reg;
	end
	/* main: %285*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_190)) begin
		memory_controller_address_b = main_285_296_reg;
	end
	/* main: %285*/
	/*   store i32 %298, i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_192)) begin
		memory_controller_address_b = main_285_296_reg;
	end
	/* main: %285*/
	/*   %303 = load i32* %302, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_193)) begin
		memory_controller_address_b = main_285_302_reg;
	end
	/* main: %285*/
	/*   store i32 %304, i32* %302, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_195)) begin
		memory_controller_address_b = main_285_302_reg;
	end
	/* main: %285*/
	/*   %309 = load i32* %308, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_196)) begin
		memory_controller_address_b = main_285_308_reg;
	end
	/* main: %285*/
	/*   store i32 %310, i32* %308, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_198)) begin
		memory_controller_address_b = main_285_308_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %317 = load i32* %316, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_201)) begin
		memory_controller_address_b = main_preheaderii4_316;
	end
	/* main: %.preheader.i.i4*/
	/*   %314 = load i32* %313, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		memory_controller_address_b = main_preheaderii4_313;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %318, i32* %316, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_204)) begin
		memory_controller_address_b = main_preheaderii4_316_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %323 = load i32* %322, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_205)) begin
		memory_controller_address_b = main_preheaderii4_322_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %324, i32* %322, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_207)) begin
		memory_controller_address_b = main_preheaderii4_322_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %329 = load i32* %328, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_208)) begin
		memory_controller_address_b = main_preheaderii4_328_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %330, i32* %328, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_210)) begin
		memory_controller_address_b = main_preheaderii4_328_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %335 = load i32* %334, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_211)) begin
		memory_controller_address_b = main_preheaderii4_334_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %336, i32* %334, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_213)) begin
		memory_controller_address_b = main_preheaderii4_334_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %342 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %352 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_216)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %362 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_217)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %372 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %382 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %392 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %402 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %412 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %346, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %351, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_225)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %341, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_227)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %361, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_229)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %371, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_231)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %386, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_233)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %391, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_235)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %381, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_237)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %401, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_239)) begin
		memory_controller_address_b = `TAG_g_statemt_a;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %406, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_241)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %411, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_243)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %416, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_245)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %.lr.ph12.i*/
	/*   %423 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_249)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %.lr.ph12.i*/
	/*   %428 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_250)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %.lr.ph12.i*/
	/*   %433 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_251)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %.lr.ph12.i*/
	/*   %438 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %427, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_253)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %432, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_255)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %.lr.ph12.i*/
	/*   %443 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_256)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %422, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_257)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %.lr.ph12.i*/
	/*   %453 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_258)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %442, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_260)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %.lr.ph12.i*/
	/*   %463 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %452, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_262)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %.lr.ph12.i*/
	/*   %468 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_263)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %.lr.ph12.i*/
	/*   %473 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_264)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %.lr.ph12.i*/
	/*   %478 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_265)) begin
		memory_controller_address_b = `TAG_g_statemt_a;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %472, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_267)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %462, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_269)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %.lr.ph12.i*/
	/*   %483 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_270)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %.lr.ph12.i*/
	/*   %488 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_271)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %.lr.ph12.i*/
	/*   %493 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_272)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %487, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_274)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %492, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_276)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %497, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_278)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %._crit_edge.i*/
	/*   %503 = load i32* %502, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		memory_controller_address_b = main__crit_edgei_502;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %504, i32* %502, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_283)) begin
		memory_controller_address_b = main__crit_edgei_502_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %509 = load i32* %508, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_284)) begin
		memory_controller_address_b = main__crit_edgei_508_reg;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %510, i32* %508, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_286)) begin
		memory_controller_address_b = main__crit_edgei_508_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %515 = load i32* %514, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_287)) begin
		memory_controller_address_b = main__crit_edgei_514_reg;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %516, i32* %514, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_289)) begin
		memory_controller_address_b = main__crit_edgei_514_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %521 = load i32* %520, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_290)) begin
		memory_controller_address_b = main__crit_edgei_520_reg;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %522, i32* %520, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_292)) begin
		memory_controller_address_b = main__crit_edgei_520_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %528 = load i32* %527, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		memory_controller_address_b = main_preheaderi4i14_527;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %529, i32* %527, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_297)) begin
		memory_controller_address_b = main_preheaderi4i14_527_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %534 = load i32* %533, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_298)) begin
		memory_controller_address_b = main_preheaderi4i14_533_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %535, i32* %533, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_300)) begin
		memory_controller_address_b = main_preheaderi4i14_533_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %540 = load i32* %539, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_301)) begin
		memory_controller_address_b = main_preheaderi4i14_539_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %541, i32* %539, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_303)) begin
		memory_controller_address_b = main_preheaderi4i14_539_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %546 = load i32* %545, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_304)) begin
		memory_controller_address_b = main_preheaderi4i14_545_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %547, i32* %545, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_306)) begin
		memory_controller_address_b = main_preheaderi4i14_545_reg;
	end
	/* main: %.lr.ph.i20*/
	/*   %550 = load i32* %549, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi20_310)) begin
		memory_controller_address_b = main_lrphi20_549;
	end
	/* main: %552*/
	/*   %.pre14.i = load i32* %549, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__552_313)) begin
		memory_controller_address_b = main_lrphi20_549_reg;
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %560 = load i32* %559, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_318)) begin
		memory_controller_address_b = main_preheaderloopexiti17_559;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 90, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 141, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 126, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 22, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 174, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 166, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 247, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 207, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 60, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   %4 = load i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %2*/
	/*   store i32 %8, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %2*/
	/*   store i32 %14, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_26)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   %19 = load i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_27)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %2*/
	/*   store i32 %20, i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_29)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   %25 = load i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_30)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %2*/
	/*   store i32 %26, i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_32)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %32 = load i32* %31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %33, i32* %31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_37)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %38 = load i32* %37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_38)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %39, i32* %37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_40)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_41)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %45, i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_43)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %50 = load i32* %49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_44)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %51, i32* %49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_46)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %57 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %67 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_49)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %77 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %87 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %97 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %107 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %117 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %127 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %61 = load i32* %60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %61, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %66 = load i32* %65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_59)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %66, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_61)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %71 = load i32* %70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_62)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %56, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_64)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %81 = load i32* %80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_65)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %76, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_67)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %91 = load i32* %90, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_68)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %86, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_70)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %101 = load i32* %100, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_71)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %101, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_73)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %106 = load i32* %105, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_74)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %106, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_76)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %111 = load i32* %110, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_77)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %96, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_79)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %116 = load i32* %115, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_80)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %116, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_82)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %121 = load i32* %120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_83)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %121, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_85)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %126 = load i32* %125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_86)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %126, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_88)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %131 = load i32* %130, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_89)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %131, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_91)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %139 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_95)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %138 = load i32* %137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %144 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_99)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %143, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_100)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %149 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %148 = load i32* %147, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %148, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_104)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %154 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_105)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %159 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_106)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %138, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_107)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %158 = load i32* %157, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %164 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %169 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_110)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %158, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %168 = load i32* %167, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %174 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_113)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %179 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_114)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %178 = load i32* %177, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_116)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %184 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %183, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_119)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %189 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %188, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_122)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %194 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_123)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %178, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_125)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %199 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_126)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %198, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_128)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %204 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_129)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %203, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_131)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %209 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_132)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %208, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_134)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_135)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %213, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_137)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %219 = load i32* %218, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %216 = load i32* %215, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_141)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %220, i32* %218, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_143)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %225 = load i32* %224, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_144)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %226, i32* %224, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_146)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %231 = load i32* %230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_147)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %232, i32* %230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_149)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %237 = load i32* %236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_150)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %238, i32* %236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_152)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %245 = load i32* %244, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_155)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i4.i*/
	/*   %242 = load i32* %241, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %246, i32* %244, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_158)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %251 = load i32* %250, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_159)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %252, i32* %250, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_161)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %257 = load i32* %256, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_162)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %258, i32* %256, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_164)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %263 = load i32* %262, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_165)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %264, i32* %262, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_167)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %267 = load i32* %266, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_171)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %269*/
	/*   %.pre.i = load i32* %266, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__269_174)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %277 = load i32* %276, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_179)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %285*/
	/*   %291 = load i32* %290, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %285*/
	/*   %288 = load i32* %287, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_187)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %285*/
	/*   store i32 %292, i32* %290, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_189)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %285*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_190)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %285*/
	/*   store i32 %298, i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_192)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %285*/
	/*   %303 = load i32* %302, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_193)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %285*/
	/*   store i32 %304, i32* %302, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_195)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %285*/
	/*   %309 = load i32* %308, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_196)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %285*/
	/*   store i32 %310, i32* %308, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_198)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %317 = load i32* %316, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_201)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i.i4*/
	/*   %314 = load i32* %313, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %318, i32* %316, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_204)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %323 = load i32* %322, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_205)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %324, i32* %322, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_207)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %329 = load i32* %328, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_208)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %330, i32* %328, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_210)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %335 = load i32* %334, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_211)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %336, i32* %334, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_213)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %342 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %352 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_216)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %362 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_217)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %372 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %382 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %392 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %402 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %412 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %346, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %351, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_225)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %341, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_227)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %361, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_229)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %371, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_231)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %386, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_233)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %391, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_235)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %381, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_237)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %401, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_239)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %406, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_241)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %411, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_243)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %416, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_245)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %423 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_249)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %428 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_250)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %433 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_251)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %438 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %427, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_253)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %432, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_255)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %443 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_256)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %422, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_257)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %453 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_258)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %442, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_260)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %463 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %452, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_262)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %468 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_263)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %473 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_264)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %478 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_265)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %472, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_267)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %462, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_269)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %483 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_270)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %488 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_271)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %493 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_272)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %487, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_274)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %492, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_276)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %497, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_278)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %503 = load i32* %502, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %504, i32* %502, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_283)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %509 = load i32* %508, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_284)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %510, i32* %508, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_286)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %515 = load i32* %514, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_287)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %516, i32* %514, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_289)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %521 = load i32* %520, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_290)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %522, i32* %520, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_292)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %528 = load i32* %527, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %529, i32* %527, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_297)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %534 = load i32* %533, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_298)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %535, i32* %533, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_300)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %540 = load i32* %539, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_301)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %541, i32* %539, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_303)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %546 = load i32* %545, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_304)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %547, i32* %545, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_306)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i20*/
	/*   %550 = load i32* %549, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi20_310)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %552*/
	/*   %.pre14.i = load i32* %549, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__552_313)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %560 = load i32* %559, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_318)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_b = 32'd67;
	end
	/* main: %0*/
	/*   store i32 168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_b = 32'd168;
	end
	/* main: %0*/
	/*   store i32 90, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_in_b = 32'd90;
	end
	/* main: %0*/
	/*   store i32 141, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_in_b = 32'd141;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_in_b = 32'd49;
	end
	/* main: %0*/
	/*   store i32 162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_in_b = 32'd162;
	end
	/* main: %0*/
	/*   store i32 55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_in_b = 32'd55;
	end
	/* main: %0*/
	/*   store i32 52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_in_b = 32'd52;
	end
	/* main: %0*/
	/*   store i32 126, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_in_b = 32'd126;
	end
	/* main: %0*/
	/*   store i32 22, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_in_b = 32'd22;
	end
	/* main: %0*/
	/*   store i32 174, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_in_b = 32'd174;
	end
	/* main: %0*/
	/*   store i32 166, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_in_b = 32'd166;
	end
	/* main: %0*/
	/*   store i32 247, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_in_b = 32'd247;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_in_b = 32'd136;
	end
	/* main: %0*/
	/*   store i32 207, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_in_b = 32'd207;
	end
	/* main: %0*/
	/*   store i32 60, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_in_b = 32'd60;
	end
	/* main: %2*/
	/*   store i32 %8, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		memory_controller_in_b = main_2_8;
	end
	/* main: %2*/
	/*   store i32 %14, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_26)) begin
		memory_controller_in_b = main_2_14;
	end
	/* main: %2*/
	/*   store i32 %20, i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_29)) begin
		memory_controller_in_b = main_2_20;
	end
	/* main: %2*/
	/*   store i32 %26, i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_32)) begin
		memory_controller_in_b = main_2_26;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %33, i32* %31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_37)) begin
		memory_controller_in_b = main_preheaderii_33;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %39, i32* %37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_40)) begin
		memory_controller_in_b = main_preheaderii_39;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %45, i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_43)) begin
		memory_controller_in_b = main_preheaderii_45;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %51, i32* %49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_46)) begin
		memory_controller_in_b = main_preheaderii_51;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %61, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_61;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %66, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_61)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_66;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %56, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_64)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_56_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %76, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_67)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_76;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %86, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_70)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_86;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %101, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_73)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_101;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %106, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_76)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_106;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %96, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_79)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_96_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %116, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_82)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_116;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %121, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_85)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_121;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %126, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_88)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_126;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %131, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_91)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_131;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %143, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_100)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_143;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %148, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_104)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_148;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %138, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_107)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_138_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %158, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_158_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_168_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %183, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_119)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_183;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %188, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_122)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_188;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %178, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_125)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_178_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %198, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_128)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_198;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %203, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_131)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_203;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %208, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_134)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_208;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %213, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_137)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_213;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %220, i32* %218, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_143)) begin
		memory_controller_in_b = main_AddRoundKeyexit_crit_edgei_220;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %226, i32* %224, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_146)) begin
		memory_controller_in_b = main_AddRoundKeyexit_crit_edgei_226;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %232, i32* %230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_149)) begin
		memory_controller_in_b = main_AddRoundKeyexit_crit_edgei_232;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %238, i32* %236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_152)) begin
		memory_controller_in_b = main_AddRoundKeyexit_crit_edgei_238;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %246, i32* %244, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_158)) begin
		memory_controller_in_b = main_preheaderi4i_246;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %252, i32* %250, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_161)) begin
		memory_controller_in_b = main_preheaderi4i_252;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %258, i32* %256, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_164)) begin
		memory_controller_in_b = main_preheaderi4i_258;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %264, i32* %262, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_167)) begin
		memory_controller_in_b = main_preheaderi4i_264;
	end
	/* main: %285*/
	/*   store i32 %292, i32* %290, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_189)) begin
		memory_controller_in_b = main_285_292;
	end
	/* main: %285*/
	/*   store i32 %298, i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_192)) begin
		memory_controller_in_b = main_285_298;
	end
	/* main: %285*/
	/*   store i32 %304, i32* %302, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_195)) begin
		memory_controller_in_b = main_285_304;
	end
	/* main: %285*/
	/*   store i32 %310, i32* %308, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_198)) begin
		memory_controller_in_b = main_285_310;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %318, i32* %316, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_204)) begin
		memory_controller_in_b = main_preheaderii4_318;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %324, i32* %322, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_207)) begin
		memory_controller_in_b = main_preheaderii4_324;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %330, i32* %328, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_210)) begin
		memory_controller_in_b = main_preheaderii4_330;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %336, i32* %334, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_213)) begin
		memory_controller_in_b = main_preheaderii4_336;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %346, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		memory_controller_in_b = main_lrph12ipreheader_346_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %351, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_225)) begin
		memory_controller_in_b = main_lrph12ipreheader_351;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %341, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_227)) begin
		memory_controller_in_b = main_lrph12ipreheader_341_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %361, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_229)) begin
		memory_controller_in_b = main_lrph12ipreheader_361;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %371, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_231)) begin
		memory_controller_in_b = main_lrph12ipreheader_371;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %386, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_233)) begin
		memory_controller_in_b = main_lrph12ipreheader_386;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %391, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_235)) begin
		memory_controller_in_b = main_lrph12ipreheader_391;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %381, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_237)) begin
		memory_controller_in_b = main_lrph12ipreheader_381_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %401, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_239)) begin
		memory_controller_in_b = main_lrph12ipreheader_401;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %406, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_241)) begin
		memory_controller_in_b = main_lrph12ipreheader_406;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %411, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_243)) begin
		memory_controller_in_b = main_lrph12ipreheader_411;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %416, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_245)) begin
		memory_controller_in_b = main_lrph12ipreheader_416;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %427, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_253)) begin
		memory_controller_in_b = main_lrph12i_427;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %432, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_255)) begin
		memory_controller_in_b = main_lrph12i_432;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %422, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_257)) begin
		memory_controller_in_b = main_lrph12i_422_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %442, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_260)) begin
		memory_controller_in_b = main_lrph12i_442_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %452, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_262)) begin
		memory_controller_in_b = main_lrph12i_452;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %472, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_267)) begin
		memory_controller_in_b = main_lrph12i_472;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %462, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_269)) begin
		memory_controller_in_b = main_lrph12i_462_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %487, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_274)) begin
		memory_controller_in_b = main_lrph12i_487;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %492, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_276)) begin
		memory_controller_in_b = main_lrph12i_492;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %497, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_278)) begin
		memory_controller_in_b = main_lrph12i_497;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %504, i32* %502, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_283)) begin
		memory_controller_in_b = main__crit_edgei_504;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %510, i32* %508, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_286)) begin
		memory_controller_in_b = main__crit_edgei_510;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %516, i32* %514, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_289)) begin
		memory_controller_in_b = main__crit_edgei_516;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %522, i32* %520, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_292)) begin
		memory_controller_in_b = main__crit_edgei_522;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %529, i32* %527, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_297)) begin
		memory_controller_in_b = main_preheaderi4i14_529;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %535, i32* %533, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_300)) begin
		memory_controller_in_b = main_preheaderi4i14_535;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %541, i32* %539, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_303)) begin
		memory_controller_in_b = main_preheaderi4i14_541;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %547, i32* %545, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_306)) begin
		memory_controller_in_b = main_preheaderi4i14_547;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 90, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 141, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 126, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 22, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 174, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 166, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 247, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 207, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 60, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %2*/
	/*   %4 = load i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %2*/
	/*   store i32 %8, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %2*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %2*/
	/*   store i32 %14, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_26)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %2*/
	/*   %19 = load i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_27)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %2*/
	/*   store i32 %20, i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_29)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %2*/
	/*   %25 = load i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_30)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %2*/
	/*   store i32 %26, i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_32)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   %32 = load i32* %31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %33, i32* %31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_37)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   %38 = load i32* %37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_38)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %39, i32* %37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_40)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_41)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %45, i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_43)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   %50 = load i32* %49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_44)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %51, i32* %49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_46)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %57 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %67 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_49)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %77 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %87 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %97 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %107 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %117 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %127 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %61 = load i32* %60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %61, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %66 = load i32* %65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_59)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %66, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_61)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %71 = load i32* %70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_62)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %56, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_64)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %81 = load i32* %80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_65)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %76, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_67)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %91 = load i32* %90, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_68)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %86, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_70)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %101 = load i32* %100, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_71)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %101, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_73)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %106 = load i32* %105, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_74)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %106, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_76)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %111 = load i32* %110, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_77)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %96, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_79)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %116 = load i32* %115, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_80)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %116, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_82)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %121 = load i32* %120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_83)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %121, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_85)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %126 = load i32* %125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_86)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %126, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_88)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %131 = load i32* %130, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_89)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %131, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_91)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %139 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_95)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %138 = load i32* %137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %144 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_99)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %143, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_100)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %149 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %148 = load i32* %147, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %148, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_104)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %154 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_105)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %159 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_106)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %138, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_107)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %158 = load i32* %157, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %164 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %169 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_110)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %158, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %168 = load i32* %167, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %174 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_113)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %179 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_114)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %178 = load i32* %177, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_116)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %184 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %183, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_119)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %189 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %188, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_122)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %194 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_123)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %178, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_125)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %199 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_126)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %198, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_128)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %204 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_129)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %203, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_131)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %209 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_132)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %208, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_134)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_135)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %213, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_137)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %219 = load i32* %218, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_140)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %216 = load i32* %215, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_141)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %220, i32* %218, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_143)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %225 = load i32* %224, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_144)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %226, i32* %224, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_146)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %231 = load i32* %230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_147)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %232, i32* %230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_149)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %237 = load i32* %236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_150)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %238, i32* %236, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_152)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   %245 = load i32* %244, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_155)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   %242 = load i32* %241, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_156)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %246, i32* %244, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_158)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   %251 = load i32* %250, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_159)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %252, i32* %250, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_161)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   %257 = load i32* %256, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_162)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %258, i32* %256, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_164)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   %263 = load i32* %262, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_165)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %264, i32* %262, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_167)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph.i*/
	/*   %267 = load i32* %266, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_171)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %269*/
	/*   %.pre.i = load i32* %266, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__269_174)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %277 = load i32* %276, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_179)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %285*/
	/*   %291 = load i32* %290, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_186)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %285*/
	/*   %288 = load i32* %287, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_187)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %285*/
	/*   store i32 %292, i32* %290, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_189)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %285*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_190)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %285*/
	/*   store i32 %298, i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_192)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %285*/
	/*   %303 = load i32* %302, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_193)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %285*/
	/*   store i32 %304, i32* %302, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_195)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %285*/
	/*   %309 = load i32* %308, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_196)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %285*/
	/*   store i32 %310, i32* %308, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__285_198)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   %317 = load i32* %316, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_201)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   %314 = load i32* %313, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_202)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %318, i32* %316, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_204)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   %323 = load i32* %322, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_205)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %324, i32* %322, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_207)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   %329 = load i32* %328, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_208)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %330, i32* %328, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_210)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   %335 = load i32* %334, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_211)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %336, i32* %334, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_213)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %342 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_215)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %352 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_216)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %362 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_217)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %372 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_218)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %382 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_219)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %392 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_220)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %402 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_221)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %412 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_222)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %346, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_223)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %351, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_225)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %341, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_227)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %361, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_229)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %371, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_231)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %386, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_233)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %391, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_235)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %381, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_237)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %401, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_239)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %406, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_241)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %411, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_243)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %416, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_245)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %423 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_249)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %428 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_250)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %433 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_251)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %438 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_252)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %427, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_253)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %432, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_255)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %443 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_256)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %422, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_257)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %453 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_258)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %442, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_260)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %463 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_261)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %452, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_262)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %468 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_263)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %473 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_264)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %478 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_265)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %472, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_267)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %462, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_269)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %483 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_270)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %488 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_271)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %493 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_272)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %487, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_274)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %492, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_276)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %497, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_278)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %503 = load i32* %502, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_281)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %504, i32* %502, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_283)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %509 = load i32* %508, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_284)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %510, i32* %508, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_286)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %515 = load i32* %514, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_287)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %516, i32* %514, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_289)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %521 = load i32* %520, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_290)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %522, i32* %520, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_292)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   %528 = load i32* %527, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_295)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %529, i32* %527, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_297)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   %534 = load i32* %533, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_298)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %535, i32* %533, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_300)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   %540 = load i32* %539, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_301)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %541, i32* %539, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_303)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   %546 = load i32* %545, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_304)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %547, i32* %545, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_306)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph.i20*/
	/*   %550 = load i32* %549, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi20_310)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %552*/
	/*   %.pre14.i = load i32* %549, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__552_313)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %560 = load i32* %559, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_318)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %573*/
	/*   ret i32 %.lcssa*/
	if ((cur_state == LEGUP_F_main_BB__573_324)) begin
		return_val <= main_decryptexit_lcssa_reg;
		if (start == 1'b0 && ^(main_decryptexit_lcssa_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 

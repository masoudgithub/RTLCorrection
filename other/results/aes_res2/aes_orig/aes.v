//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Tue Jun 18 03:11:52 2019
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sun Jun 23 13:25:26 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 10
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @Sbox = internal unnamed_addr constant [16 x [16 x i32]] [[16 x i32] [i32 99, i32 124, i32 119, i32 123, i32 242, i32 107, i32 111, i32 197, i32 48, i32 1, i32 103, i32 43, i32 254, i32 215, i32 171, ...
`define TAG_g_Sbox `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_Sbox_a {`TAG_g_Sbox, 23'd0}
// @key = internal global [32 x i32] zeroinitializer, align 4
`define TAG_g_key `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_key_a {`TAG_g_key, 23'd2048}
// @statemt = internal global [32 x i32] zeroinitializer, align 4
`define TAG_g_statemt `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_statemt_a {`TAG_g_statemt, 23'd1920}
// @word = internal unnamed_addr global [4 x [120 x i32]] zeroinitializer, align 4
`define TAG_g_word `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_word_a {`TAG_g_word, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [7:0] rom_32_address_a;
reg [7:0] rom_32_address_b;
reg rom_32_write_enable_a;
reg rom_32_write_enable_b;
reg [31:0] rom_32_in_a;
reg [31:0] rom_32_in_b;
wire [31:0] rom_32_out_a;
wire [31:0] rom_32_out_b;

// @Sbox = internal unnamed_addr constant [16 x [16 x i32]] [[16 x i32] [i32 99, i32 124, i32 119, i32 123, i32 242, i32 107, i32 111, i32 197, i32 48, i32 1, i32 103, i32 43, i32 254, i32 215, i32 171, ...
rom_dual_port rom_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( rom_32_address_a ),
	.address_b( rom_32_address_b ),
	.q_a( rom_32_out_a ),
	.q_b( rom_32_out_b)
);
defparam rom_32.width_a = 32;
defparam rom_32.width_b = 32;
defparam rom_32.widthad_a = 8;
defparam rom_32.widthad_b = 8;
defparam rom_32.numwords_a = 256;
defparam rom_32.numwords_b = 256;
defparam rom_32.latency = ram_latency;
defparam rom_32.init_file = "rom_32.mif";

reg [9:0] ram_32_address_a;
reg [9:0] ram_32_address_b;
reg ram_32_write_enable_a;
reg ram_32_write_enable_b;
reg [31:0] ram_32_in_a;
reg [31:0] ram_32_in_b;
wire [31:0] ram_32_out_a;
wire [31:0] ram_32_out_b;

// @statemt = internal global [32 x i32] zeroinitializer, align 4
ram_dual_port ram_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_32_address_a ),
	.address_b( ram_32_address_b ),
	.wren_a( ram_32_write_enable_a ),
	.wren_b( ram_32_write_enable_b ),
	.data_a( ram_32_in_a ),
	.data_b( ram_32_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_32_out_a ),
	.q_b( ram_32_out_b)
);
defparam ram_32.width_a = 32;
defparam ram_32.width_b = 32;
defparam ram_32.widthad_a = 10;
defparam ram_32.widthad_b = 10;
defparam ram_32.width_be_a = 1;
defparam ram_32.width_be_b = 1;
defparam ram_32.numwords_a = 544;
defparam ram_32.numwords_b = 544;
defparam ram_32.latency = ram_latency;
defparam ram_32.init_file = "ram_32.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_rom_32_a;
assign select_rom_32_a = (tag_a == 2);
reg [ram_latency:0] select_rom_32_reg_a;
wire [31:0] memory_controller_rom_32_out_a;
assign memory_controller_rom_32_out_a = {32{ select_rom_32_reg_a[ram_latency]}} & rom_32_out_a;

wire select_ram_32_a;
assign select_ram_32_a = (tag_a == 3);
reg [ram_latency:0] select_ram_32_reg_a;
wire [31:0] memory_controller_ram_32_out_a;
assign memory_controller_ram_32_out_a = {32{ select_ram_32_reg_a[ram_latency]}} & ram_32_out_a;

always @(*)
begin
	rom_32_address_a = memory_controller_address_a [8-1+2:2] & {8{select_rom_32_a}};
	rom_32_write_enable_a = memory_controller_write_enable_a & select_rom_32_a;
	rom_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	ram_32_address_a = memory_controller_address_a [10-1+2:2] & {10{select_ram_32_a}};
	ram_32_write_enable_a = memory_controller_write_enable_a & select_ram_32_a;
	ram_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_rom_32_reg_a[ram_latency]}} | {2{select_ram_32_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_rom_32_out_a | memory_controller_ram_32_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
end
always @(*)
begin
select_rom_32_reg_a[0] <= select_rom_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
end

reg [2:0] select_not_struct_b;

wire select_rom_32_b;
assign select_rom_32_b = (tag_b == 2);
reg [ram_latency:0] select_rom_32_reg_b;
wire [31:0] memory_controller_rom_32_out_b;
assign memory_controller_rom_32_out_b = {32{ select_rom_32_reg_b[ram_latency]}} & rom_32_out_b;

wire select_ram_32_b;
assign select_ram_32_b = (tag_b == 3);
reg [ram_latency:0] select_ram_32_reg_b;
wire [31:0] memory_controller_ram_32_out_b;
assign memory_controller_ram_32_out_b = {32{ select_ram_32_reg_b[ram_latency]}} & ram_32_out_b;

always @(*)
begin
	rom_32_address_b = memory_controller_address_b [8-1+2:2] & {8{select_rom_32_b}};
	rom_32_write_enable_b = memory_controller_write_enable_b & select_rom_32_b;
	rom_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	ram_32_address_b = memory_controller_address_b [10-1+2:2] & {10{select_ram_32_b}};
	ram_32_write_enable_b = memory_controller_write_enable_b & select_ram_32_b;
	ram_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_rom_32_reg_b[ram_latency]}} | {2{select_ram_32_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_rom_32_out_b | memory_controller_ram_32_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
end
always @(*)
begin
select_rom_32_reg_b[0] <= select_rom_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [8:0] LEGUP_0 = 9'd0;
parameter [8:0] LEGUP_F_main_BB__0_1 = 9'd1;
parameter [8:0] LEGUP_F_main_BB__0_2 = 9'd2;
parameter [8:0] LEGUP_F_main_BB__0_3 = 9'd3;
parameter [8:0] LEGUP_F_main_BB__0_4 = 9'd4;
parameter [8:0] LEGUP_F_main_BB__0_5 = 9'd5;
parameter [8:0] LEGUP_F_main_BB__0_6 = 9'd6;
parameter [8:0] LEGUP_F_main_BB__0_7 = 9'd7;
parameter [8:0] LEGUP_F_main_BB__0_8 = 9'd8;
parameter [8:0] LEGUP_F_main_BB__0_9 = 9'd9;
parameter [8:0] LEGUP_F_main_BB__0_10 = 9'd10;
parameter [8:0] LEGUP_F_main_BB__0_11 = 9'd11;
parameter [8:0] LEGUP_F_main_BB__0_12 = 9'd12;
parameter [8:0] LEGUP_F_main_BB__0_13 = 9'd13;
parameter [8:0] LEGUP_F_main_BB__0_14 = 9'd14;
parameter [8:0] LEGUP_F_main_BB__0_15 = 9'd15;
parameter [8:0] LEGUP_F_main_BB__0_16 = 9'd16;
parameter [8:0] LEGUP_F_main_BB__0_17 = 9'd17;
parameter [8:0] LEGUP_F_main_BB__0_19 = 9'd19;
parameter [8:0] LEGUP_F_main_BB__2_20 = 9'd20;
parameter [8:0] LEGUP_F_main_BB__2_21 = 9'd21;
parameter [8:0] LEGUP_F_main_BB__2_22 = 9'd22;
parameter [8:0] LEGUP_F_main_BB__2_23 = 9'd23;
parameter [8:0] LEGUP_F_main_BB__2_24 = 9'd24;
parameter [8:0] LEGUP_F_main_BB__2_25 = 9'd25;
parameter [8:0] LEGUP_F_main_BB__2_26 = 9'd26;
parameter [8:0] LEGUP_F_main_BB__2_27 = 9'd27;
parameter [8:0] LEGUP_F_main_BB__2_28 = 9'd28;
parameter [8:0] LEGUP_F_main_BB__2_29 = 9'd29;
parameter [8:0] LEGUP_F_main_BB__2_30 = 9'd30;
parameter [8:0] LEGUP_F_main_BB__2_31 = 9'd31;
parameter [8:0] LEGUP_F_main_BB__2_32 = 9'd32;
parameter [8:0] LEGUP_F_main_BB__2_33 = 9'd33;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_34 = 9'd34;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_35 = 9'd35;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_36 = 9'd36;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_37 = 9'd37;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_38 = 9'd38;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_39 = 9'd39;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_40 = 9'd40;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_41 = 9'd41;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_42 = 9'd42;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_43 = 9'd43;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_44 = 9'd44;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_45 = 9'd45;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_46 = 9'd46;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_47 = 9'd47;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_48 = 9'd48;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_49 = 9'd49;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_50 = 9'd50;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_51 = 9'd51;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_52 = 9'd52;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_53 = 9'd53;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_54 = 9'd54;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_55 = 9'd55;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_56 = 9'd56;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_57 = 9'd57;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_58 = 9'd58;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_59 = 9'd59;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_60 = 9'd60;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_61 = 9'd61;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_62 = 9'd62;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_63 = 9'd63;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_64 = 9'd64;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_65 = 9'd65;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_66 = 9'd66;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_67 = 9'd67;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_68 = 9'd68;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_69 = 9'd69;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_70 = 9'd70;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_71 = 9'd71;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_72 = 9'd72;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_73 = 9'd73;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_74 = 9'd74;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_75 = 9'd75;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_76 = 9'd76;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_77 = 9'd77;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_78 = 9'd78;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_79 = 9'd79;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_81 = 9'd81;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_82 = 9'd82;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_83 = 9'd83;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_84 = 9'd84;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_85 = 9'd85;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_86 = 9'd86;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_87 = 9'd87;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_88 = 9'd88;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_89 = 9'd89;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_90 = 9'd90;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_91 = 9'd91;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_92 = 9'd92;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_93 = 9'd93;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_94 = 9'd94;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_95 = 9'd95;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_96 = 9'd96;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_97 = 9'd97;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_98 = 9'd98;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_99 = 9'd99;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_100 = 9'd100;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_101 = 9'd101;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_102 = 9'd102;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_103 = 9'd103;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_104 = 9'd104;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_105 = 9'd105;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_106 = 9'd106;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_107 = 9'd107;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_108 = 9'd108;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_109 = 9'd109;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_110 = 9'd110;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_111 = 9'd111;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_112 = 9'd112;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_113 = 9'd113;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_114 = 9'd114;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_115 = 9'd115;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_116 = 9'd116;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_117 = 9'd117;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_118 = 9'd118;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_119 = 9'd119;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_120 = 9'd120;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_121 = 9'd121;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_122 = 9'd122;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_123 = 9'd123;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexiti_124 = 9'd124;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125 = 9'd125;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126 = 9'd126;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_127 = 9'd127;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_128 = 9'd128;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_129 = 9'd129;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_130 = 9'd130;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_131 = 9'd131;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_132 = 9'd132;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_133 = 9'd133;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_134 = 9'd134;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_135 = 9'd135;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_136 = 9'd136;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_137 = 9'd137;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_138 = 9'd138;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139 = 9'd139;
parameter [8:0] LEGUP_F_main_BB_lrphipreheader_140 = 9'd140;
parameter [8:0] LEGUP_F_main_BB_lrphi_141 = 9'd141;
parameter [8:0] LEGUP_F_main_BB_lrphi_142 = 9'd142;
parameter [8:0] LEGUP_F_main_BB_lrphi_143 = 9'd143;
parameter [8:0] LEGUP_F_main_BB_lrphi_144 = 9'd144;
parameter [8:0] LEGUP_F_main_BB__220_145 = 9'd145;
parameter [8:0] LEGUP_F_main_BB__220_146 = 9'd146;
parameter [8:0] LEGUP_F_main_BB__220_147 = 9'd147;
parameter [8:0] LEGUP_F_main_BB__222_148 = 9'd148;
parameter [8:0] LEGUP_F_main_BB_preheaderi_149 = 9'd149;
parameter [8:0] LEGUP_F_main_BB_preheaderi_150 = 9'd150;
parameter [8:0] LEGUP_F_main_BB_preheaderi_151 = 9'd151;
parameter [8:0] LEGUP_F_main_BB_preheaderi_152 = 9'd152;
parameter [8:0] LEGUP_F_main_BB_encryptexit_153 = 9'd153;
parameter [8:0] LEGUP_F_main_BB_encryptexit_155 = 9'd155;
parameter [8:0] LEGUP_F_main_BB__236_156 = 9'd156;
parameter [8:0] LEGUP_F_main_BB__236_157 = 9'd157;
parameter [8:0] LEGUP_F_main_BB__236_158 = 9'd158;
parameter [8:0] LEGUP_F_main_BB__236_159 = 9'd159;
parameter [8:0] LEGUP_F_main_BB__236_160 = 9'd160;
parameter [8:0] LEGUP_F_main_BB__236_161 = 9'd161;
parameter [8:0] LEGUP_F_main_BB__236_162 = 9'd162;
parameter [8:0] LEGUP_F_main_BB__236_163 = 9'd163;
parameter [8:0] LEGUP_F_main_BB__236_164 = 9'd164;
parameter [8:0] LEGUP_F_main_BB__236_165 = 9'd165;
parameter [8:0] LEGUP_F_main_BB__236_166 = 9'd166;
parameter [8:0] LEGUP_F_main_BB__236_167 = 9'd167;
parameter [8:0] LEGUP_F_main_BB__236_168 = 9'd168;
parameter [8:0] LEGUP_F_main_BB__236_169 = 9'd169;
parameter [8:0] LEGUP_F_main_BB__236_170 = 9'd170;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_171 = 9'd171;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_172 = 9'd172;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_173 = 9'd173;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_174 = 9'd174;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_175 = 9'd175;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_176 = 9'd176;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_177 = 9'd177;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_178 = 9'd178;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_179 = 9'd179;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_180 = 9'd180;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_181 = 9'd181;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_182 = 9'd182;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_183 = 9'd183;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_184 = 9'd184;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_185 = 9'd185;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_186 = 9'd186;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_187 = 9'd187;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_188 = 9'd188;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_189 = 9'd189;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_190 = 9'd190;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_191 = 9'd191;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_192 = 9'd192;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_193 = 9'd193;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_194 = 9'd194;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_195 = 9'd195;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_196 = 9'd196;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_197 = 9'd197;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_198 = 9'd198;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_199 = 9'd199;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_200 = 9'd200;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_201 = 9'd201;
parameter [8:0] LEGUP_F_main_BB_lrph10ipreheader_202 = 9'd202;
parameter [8:0] LEGUP_F_main_BB_lrph10i_203 = 9'd203;
parameter [8:0] LEGUP_F_main_BB_lrph10i_205 = 9'd205;
parameter [8:0] LEGUP_F_main_BB_lrph10i_206 = 9'd206;
parameter [8:0] LEGUP_F_main_BB_lrph10i_207 = 9'd207;
parameter [8:0] LEGUP_F_main_BB_lrph10i_208 = 9'd208;
parameter [8:0] LEGUP_F_main_BB_lrph10i_209 = 9'd209;
parameter [8:0] LEGUP_F_main_BB_lrph10i_210 = 9'd210;
parameter [8:0] LEGUP_F_main_BB_lrph10i_211 = 9'd211;
parameter [8:0] LEGUP_F_main_BB_lrph10i_212 = 9'd212;
parameter [8:0] LEGUP_F_main_BB_lrph10i_213 = 9'd213;
parameter [8:0] LEGUP_F_main_BB_lrph10i_214 = 9'd214;
parameter [8:0] LEGUP_F_main_BB_lrph10i_215 = 9'd215;
parameter [8:0] LEGUP_F_main_BB_lrph10i_216 = 9'd216;
parameter [8:0] LEGUP_F_main_BB_lrph10i_217 = 9'd217;
parameter [8:0] LEGUP_F_main_BB_lrph10i_218 = 9'd218;
parameter [8:0] LEGUP_F_main_BB_lrph10i_219 = 9'd219;
parameter [8:0] LEGUP_F_main_BB_lrph10i_220 = 9'd220;
parameter [8:0] LEGUP_F_main_BB_lrph10i_221 = 9'd221;
parameter [8:0] LEGUP_F_main_BB_lrph10i_222 = 9'd222;
parameter [8:0] LEGUP_F_main_BB_lrph10i_223 = 9'd223;
parameter [8:0] LEGUP_F_main_BB_lrph10i_224 = 9'd224;
parameter [8:0] LEGUP_F_main_BB_lrph10i_225 = 9'd225;
parameter [8:0] LEGUP_F_main_BB_lrph10i_226 = 9'd226;
parameter [8:0] LEGUP_F_main_BB_lrph10i_227 = 9'd227;
parameter [8:0] LEGUP_F_main_BB_lrph10i_228 = 9'd228;
parameter [8:0] LEGUP_F_main_BB_lrph10i_229 = 9'd229;
parameter [8:0] LEGUP_F_main_BB_lrph10i_230 = 9'd230;
parameter [8:0] LEGUP_F_main_BB_lrph10i_231 = 9'd231;
parameter [8:0] LEGUP_F_main_BB_lrph10i_232 = 9'd232;
parameter [8:0] LEGUP_F_main_BB_lrph10i_233 = 9'd233;
parameter [8:0] LEGUP_F_main_BB_lrph10i_234 = 9'd234;
parameter [8:0] LEGUP_F_main_BB_lrph10i_235 = 9'd235;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_236 = 9'd236;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_237 = 9'd237;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_238 = 9'd238;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_239 = 9'd239;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_240 = 9'd240;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_241 = 9'd241;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_242 = 9'd242;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_243 = 9'd243;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_244 = 9'd244;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_245 = 9'd245;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_246 = 9'd246;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_247 = 9'd247;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_248 = 9'd248;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_249 = 9'd249;
parameter [8:0] LEGUP_F_main_BB_AddRoundKeyexit3i9_250 = 9'd250;
parameter [8:0] LEGUP_F_main_BB_lrphi14_251 = 9'd251;
parameter [8:0] LEGUP_F_main_BB_lrphi14_252 = 9'd252;
parameter [8:0] LEGUP_F_main_BB_lrphi14_253 = 9'd253;
parameter [8:0] LEGUP_F_main_BB_lrphi14_254 = 9'd254;
parameter [8:0] LEGUP_F_main_BB__454_255 = 9'd255;
parameter [8:0] LEGUP_F_main_BB__454_256 = 9'd256;
parameter [8:0] LEGUP_F_main_BB__454_257 = 9'd257;
parameter [8:0] LEGUP_F_main_BB__456_258 = 9'd258;
parameter [8:0] LEGUP_F_main_BB_preheaderloopexiti11_259 = 9'd259;
parameter [8:0] LEGUP_F_main_BB_preheaderloopexiti11_260 = 9'd260;
parameter [8:0] LEGUP_F_main_BB_preheaderloopexiti11_261 = 9'd261;
parameter [8:0] LEGUP_F_main_BB_preheaderloopexiti11_262 = 9'd262;
parameter [8:0] LEGUP_F_main_BB_decryptexit_263 = 9'd263;
parameter [8:0] LEGUP_F_main_BB__471_264 = 9'd264;
parameter [8:0] LEGUP_F_main_BB__473_265 = 9'd265;
parameter [8:0] LEGUP_F_main_BB__475_266 = 9'd266;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [8:0] LEGUP_function_call_18 = 9'd18;
parameter [8:0] LEGUP_function_call_80 = 9'd80;
parameter [8:0] LEGUP_function_call_154 = 9'd154;
parameter [8:0] LEGUP_function_call_204 = 9'd204;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [8:0] cur_state;
reg [8:0] next_state;
reg [31:0] main_2_j01ii;
reg [31:0] main_2_j01ii_reg;
reg [31:0] main_2_gep_int;
reg [31:0] main_2_gep_int_reg;
reg [31:0] main_2_gep_array;
reg [31:0] main_2_gep_array_reg;
reg [31:0] main_2_gep;
reg [31:0] main_2_gep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_3_reg;
reg [31:0] main_2_4;
reg [31:0] main_2_4_reg;
reg [31:0] main_2_5;
reg [31:0] main_2_5_reg;
reg [31:0] main_2_gep_int1;
reg [31:0] main_2_gep_int1_reg;
reg [31:0] main_2_gep_array2;
reg [31:0] main_2_gep_array2_reg;
reg [31:0] main_2_gep3;
reg [31:0] main_2_gep3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_6_reg;
reg [31:0] main_2_7;
reg [31:0] main_2_7_reg;
reg [31:0] main_2_8;
reg [31:0] main_2_8_reg;
reg [31:0] main_2_gep_int4;
reg [31:0] main_2_gep_int4_reg;
reg [31:0] main_2_gep5;
reg [31:0] main_2_gep5_reg;
reg [31:0] main_2_gep_array6;
reg [31:0] main_2_gep_array6_reg;
reg [31:0] main_2_gep7;
reg [31:0] main_2_gep7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_9_reg;
reg [31:0] main_2_10;
reg [31:0] main_2_10_reg;
reg [31:0] main_2_11;
reg [31:0] main_2_11_reg;
reg [31:0] main_2_gep_int8;
reg [31:0] main_2_gep_int8_reg;
reg [31:0] main_2_gep_array9;
reg [31:0] main_2_gep_array9_reg;
reg [31:0] main_2_gep10;
reg [31:0] main_2_gep10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_12_reg;
reg [31:0] main_2_13;
reg [31:0] main_2_13_reg;
reg [31:0] main_2_14;
reg [31:0] main_2_14_reg;
reg [31:0] main_2_gep_int11;
reg [31:0] main_2_gep_int11_reg;
reg [31:0] main_2_gep12;
reg [31:0] main_2_gep12_reg;
reg [31:0] main_2_gep_array13;
reg [31:0] main_2_gep_array13_reg;
reg [31:0] main_2_gep14;
reg [31:0] main_2_gep14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_15_reg;
reg [31:0] main_2_16;
reg [31:0] main_2_16_reg;
reg [31:0] main_2_17;
reg [31:0] main_2_17_reg;
reg [31:0] main_2_gep_int15;
reg [31:0] main_2_gep_int15_reg;
reg [31:0] main_2_gep_array16;
reg [31:0] main_2_gep_array16_reg;
reg [31:0] main_2_gep17;
reg [31:0] main_2_gep17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_18_reg;
reg [31:0] main_2_19;
reg [31:0] main_2_19_reg;
reg [31:0] main_2_20;
reg [31:0] main_2_20_reg;
reg [31:0] main_2_gep_int18;
reg [31:0] main_2_gep_int18_reg;
reg [31:0] main_2_gep19;
reg [31:0] main_2_gep19_reg;
reg [31:0] main_2_gep_array20;
reg [31:0] main_2_gep_array20_reg;
reg [31:0] main_2_gep21;
reg [31:0] main_2_gep21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_21_reg;
reg [31:0] main_2_22;
reg [31:0] main_2_22_reg;
reg [31:0] main_2_23;
reg [31:0] main_2_23_reg;
reg [31:0] main_2_gep_int22;
reg [31:0] main_2_gep_int22_reg;
reg [31:0] main_2_gep_array23;
reg [31:0] main_2_gep_array23_reg;
reg [31:0] main_2_gep24;
reg [31:0] main_2_gep24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_24_reg;
reg [31:0] main_2_25;
reg [31:0] main_2_25_reg;
reg [31:0] main_2_26;
reg [31:0] main_2_26_reg;
reg [31:0] main_2_27;
reg [31:0] main_2_27_reg;
reg  main_2_exitcond30;
reg  main_2_exitcond30_reg;
reg [31:0] main_AddRoundKeyexitipreheader_28;
reg [31:0] main_AddRoundKeyexitipreheader_28_reg;
reg [31:0] main_AddRoundKeyexitipreheader_29;
reg [31:0] main_AddRoundKeyexitipreheader_29_reg;
reg [31:0] main_AddRoundKeyexitipreheader_30;
reg [31:0] main_AddRoundKeyexitipreheader_30_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int25;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int25_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array26;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array26_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep27;
reg [31:0] main_AddRoundKeyexitipreheader_gep27_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array28;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array28_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep29;
reg [31:0] main_AddRoundKeyexitipreheader_gep29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_31_reg;
reg [31:0] main_AddRoundKeyexitipreheader_32;
reg [31:0] main_AddRoundKeyexitipreheader_32_reg;
reg [31:0] main_AddRoundKeyexitipreheader_33;
reg [31:0] main_AddRoundKeyexitipreheader_33_reg;
reg [31:0] main_AddRoundKeyexitipreheader_34;
reg [31:0] main_AddRoundKeyexitipreheader_34_reg;
reg [31:0] main_AddRoundKeyexitipreheader_35;
reg [31:0] main_AddRoundKeyexitipreheader_35_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int30;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int30_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array31;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array31_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep32;
reg [31:0] main_AddRoundKeyexitipreheader_gep32_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array33;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array33_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep34;
reg [31:0] main_AddRoundKeyexitipreheader_gep34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_36_reg;
reg [31:0] main_AddRoundKeyexitipreheader_37;
reg [31:0] main_AddRoundKeyexitipreheader_37_reg;
reg [31:0] main_AddRoundKeyexitipreheader_38;
reg [31:0] main_AddRoundKeyexitipreheader_38_reg;
reg [31:0] main_AddRoundKeyexitipreheader_39;
reg [31:0] main_AddRoundKeyexitipreheader_39_reg;
reg [31:0] main_AddRoundKeyexitipreheader_40;
reg [31:0] main_AddRoundKeyexitipreheader_40_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int35;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int35_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array36;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array36_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep37;
reg [31:0] main_AddRoundKeyexitipreheader_gep37_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array38;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array38_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep39;
reg [31:0] main_AddRoundKeyexitipreheader_gep39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_41_reg;
reg [31:0] main_AddRoundKeyexitipreheader_42;
reg [31:0] main_AddRoundKeyexitipreheader_42_reg;
reg [31:0] main_AddRoundKeyexitipreheader_43;
reg [31:0] main_AddRoundKeyexitipreheader_43_reg;
reg [31:0] main_AddRoundKeyexitipreheader_44;
reg [31:0] main_AddRoundKeyexitipreheader_44_reg;
reg [31:0] main_AddRoundKeyexitipreheader_45;
reg [31:0] main_AddRoundKeyexitipreheader_45_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int40;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int40_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array41;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array41_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep42;
reg [31:0] main_AddRoundKeyexitipreheader_gep42_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array43;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array43_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep44;
reg [31:0] main_AddRoundKeyexitipreheader_gep44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_46_reg;
reg [31:0] main_AddRoundKeyexitipreheader_47;
reg [31:0] main_AddRoundKeyexitipreheader_47_reg;
reg [31:0] main_AddRoundKeyexitipreheader_48;
reg [31:0] main_AddRoundKeyexitipreheader_48_reg;
reg [31:0] main_AddRoundKeyexitipreheader_49;
reg [31:0] main_AddRoundKeyexitipreheader_49_reg;
reg [31:0] main_AddRoundKeyexitipreheader_50;
reg [31:0] main_AddRoundKeyexitipreheader_50_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int45;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int45_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array46;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array46_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep47;
reg [31:0] main_AddRoundKeyexitipreheader_gep47_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array48;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array48_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep49;
reg [31:0] main_AddRoundKeyexitipreheader_gep49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_51_reg;
reg [31:0] main_AddRoundKeyexitipreheader_52;
reg [31:0] main_AddRoundKeyexitipreheader_52_reg;
reg [31:0] main_AddRoundKeyexitipreheader_53;
reg [31:0] main_AddRoundKeyexitipreheader_53_reg;
reg [31:0] main_AddRoundKeyexitipreheader_54;
reg [31:0] main_AddRoundKeyexitipreheader_54_reg;
reg [31:0] main_AddRoundKeyexitipreheader_55;
reg [31:0] main_AddRoundKeyexitipreheader_55_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int50;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int50_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array51;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array51_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep52;
reg [31:0] main_AddRoundKeyexitipreheader_gep52_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array53;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array53_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep54;
reg [31:0] main_AddRoundKeyexitipreheader_gep54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_56_reg;
reg [31:0] main_AddRoundKeyexitipreheader_57;
reg [31:0] main_AddRoundKeyexitipreheader_57_reg;
reg [31:0] main_AddRoundKeyexitipreheader_58;
reg [31:0] main_AddRoundKeyexitipreheader_58_reg;
reg [31:0] main_AddRoundKeyexitipreheader_59;
reg [31:0] main_AddRoundKeyexitipreheader_59_reg;
reg [31:0] main_AddRoundKeyexitipreheader_60;
reg [31:0] main_AddRoundKeyexitipreheader_60_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int55;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int55_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array56;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array56_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep57;
reg [31:0] main_AddRoundKeyexitipreheader_gep57_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array58;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array58_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep59;
reg [31:0] main_AddRoundKeyexitipreheader_gep59_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_61_reg;
reg [31:0] main_AddRoundKeyexitipreheader_62;
reg [31:0] main_AddRoundKeyexitipreheader_62_reg;
reg [31:0] main_AddRoundKeyexitipreheader_63;
reg [31:0] main_AddRoundKeyexitipreheader_63_reg;
reg [31:0] main_AddRoundKeyexitipreheader_64;
reg [31:0] main_AddRoundKeyexitipreheader_64_reg;
reg [31:0] main_AddRoundKeyexitipreheader_65;
reg [31:0] main_AddRoundKeyexitipreheader_65_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int60;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int60_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array61;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array61_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep62;
reg [31:0] main_AddRoundKeyexitipreheader_gep62_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array63;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array63_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep64;
reg [31:0] main_AddRoundKeyexitipreheader_gep64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_66_reg;
reg [31:0] main_AddRoundKeyexitipreheader_67;
reg [31:0] main_AddRoundKeyexitipreheader_67_reg;
reg [31:0] main_AddRoundKeyexitipreheader_68;
reg [31:0] main_AddRoundKeyexitipreheader_68_reg;
reg [31:0] main_AddRoundKeyexitipreheader_69;
reg [31:0] main_AddRoundKeyexitipreheader_69_reg;
reg [31:0] main_AddRoundKeyexitipreheader_70;
reg [31:0] main_AddRoundKeyexitipreheader_70_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int65;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int65_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array66;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array66_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep67;
reg [31:0] main_AddRoundKeyexitipreheader_gep67_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array68;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array68_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep69;
reg [31:0] main_AddRoundKeyexitipreheader_gep69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_71_reg;
reg [31:0] main_AddRoundKeyexitipreheader_72;
reg [31:0] main_AddRoundKeyexitipreheader_72_reg;
reg [31:0] main_AddRoundKeyexitipreheader_73;
reg [31:0] main_AddRoundKeyexitipreheader_73_reg;
reg [31:0] main_AddRoundKeyexitipreheader_74;
reg [31:0] main_AddRoundKeyexitipreheader_74_reg;
reg [31:0] main_AddRoundKeyexitipreheader_75;
reg [31:0] main_AddRoundKeyexitipreheader_75_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int70;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int70_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array71;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array71_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep72;
reg [31:0] main_AddRoundKeyexitipreheader_gep72_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array73;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array73_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep74;
reg [31:0] main_AddRoundKeyexitipreheader_gep74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_76_reg;
reg [31:0] main_AddRoundKeyexitipreheader_77;
reg [31:0] main_AddRoundKeyexitipreheader_77_reg;
reg [31:0] main_AddRoundKeyexitipreheader_78;
reg [31:0] main_AddRoundKeyexitipreheader_78_reg;
reg [31:0] main_AddRoundKeyexitipreheader_79;
reg [31:0] main_AddRoundKeyexitipreheader_79_reg;
reg [31:0] main_AddRoundKeyexitipreheader_80;
reg [31:0] main_AddRoundKeyexitipreheader_80_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int75;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int75_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array76;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array76_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep77;
reg [31:0] main_AddRoundKeyexitipreheader_gep77_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array78;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array78_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep79;
reg [31:0] main_AddRoundKeyexitipreheader_gep79_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_81_reg;
reg [31:0] main_AddRoundKeyexitipreheader_82;
reg [31:0] main_AddRoundKeyexitipreheader_82_reg;
reg [31:0] main_AddRoundKeyexitipreheader_83;
reg [31:0] main_AddRoundKeyexitipreheader_83_reg;
reg [31:0] main_AddRoundKeyexitipreheader_84;
reg [31:0] main_AddRoundKeyexitipreheader_84_reg;
reg [31:0] main_AddRoundKeyexitipreheader_85;
reg [31:0] main_AddRoundKeyexitipreheader_85_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int80;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int80_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array81;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array81_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep82;
reg [31:0] main_AddRoundKeyexitipreheader_gep82_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array83;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array83_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep84;
reg [31:0] main_AddRoundKeyexitipreheader_gep84_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_86_reg;
reg [31:0] main_AddRoundKeyexitipreheader_87;
reg [31:0] main_AddRoundKeyexitipreheader_87_reg;
reg [31:0] main_AddRoundKeyexitipreheader_88;
reg [31:0] main_AddRoundKeyexitipreheader_88_reg;
reg [31:0] main_AddRoundKeyexitipreheader_89;
reg [31:0] main_AddRoundKeyexitipreheader_89_reg;
reg [31:0] main_AddRoundKeyexitipreheader_90;
reg [31:0] main_AddRoundKeyexitipreheader_90_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int85;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int85_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array86;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array86_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep87;
reg [31:0] main_AddRoundKeyexitipreheader_gep87_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array88;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array88_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep89;
reg [31:0] main_AddRoundKeyexitipreheader_gep89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_91_reg;
reg [31:0] main_AddRoundKeyexitipreheader_92;
reg [31:0] main_AddRoundKeyexitipreheader_92_reg;
reg [31:0] main_AddRoundKeyexitipreheader_93;
reg [31:0] main_AddRoundKeyexitipreheader_93_reg;
reg [31:0] main_AddRoundKeyexitipreheader_94;
reg [31:0] main_AddRoundKeyexitipreheader_94_reg;
reg [31:0] main_AddRoundKeyexitipreheader_95;
reg [31:0] main_AddRoundKeyexitipreheader_95_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int90;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int90_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array91;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array91_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep92;
reg [31:0] main_AddRoundKeyexitipreheader_gep92_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array93;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array93_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep94;
reg [31:0] main_AddRoundKeyexitipreheader_gep94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_96;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_96_reg;
reg [31:0] main_AddRoundKeyexitipreheader_97;
reg [31:0] main_AddRoundKeyexitipreheader_97_reg;
reg [31:0] main_AddRoundKeyexitipreheader_98;
reg [31:0] main_AddRoundKeyexitipreheader_98_reg;
reg [31:0] main_AddRoundKeyexitipreheader_99;
reg [31:0] main_AddRoundKeyexitipreheader_99_reg;
reg [31:0] main_AddRoundKeyexitipreheader_100;
reg [31:0] main_AddRoundKeyexitipreheader_100_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int95;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int95_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array96;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array96_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep97;
reg [31:0] main_AddRoundKeyexitipreheader_gep97_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array98;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array98_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep99;
reg [31:0] main_AddRoundKeyexitipreheader_gep99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_101_reg;
reg [31:0] main_AddRoundKeyexitipreheader_102;
reg [31:0] main_AddRoundKeyexitipreheader_102_reg;
reg [31:0] main_AddRoundKeyexitipreheader_103;
reg [31:0] main_AddRoundKeyexitipreheader_103_reg;
reg [31:0] main_AddRoundKeyexitipreheader_104;
reg [31:0] main_AddRoundKeyexitipreheader_104_reg;
reg [31:0] main_AddRoundKeyexitipreheader_105;
reg [31:0] main_AddRoundKeyexitipreheader_105_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int100;
reg [31:0] main_AddRoundKeyexitipreheader_gep_int100_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array101;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array101_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep102;
reg [31:0] main_AddRoundKeyexitipreheader_gep102_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array103;
reg [31:0] main_AddRoundKeyexitipreheader_gep_array103_reg;
reg [31:0] main_AddRoundKeyexitipreheader_gep104;
reg [31:0] main_AddRoundKeyexitipreheader_gep104_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_106;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_106_reg;
reg [31:0] main_AddRoundKeyexitipreheader_107;
reg [31:0] main_AddRoundKeyexitipreheader_107_reg;
reg [31:0] main_AddRoundKeyexiti_i08i;
reg [31:0] main_AddRoundKeyexiti_i08i_reg;
reg [31:0] main_AddRoundKeyexiti_109;
reg [31:0] main_AddRoundKeyexiti_109_reg;
reg [31:0] main_AddRoundKeyexiti_110;
reg [31:0] main_AddRoundKeyexiti_110_reg;
reg [31:0] main_AddRoundKeyexiti_111;
reg [31:0] main_AddRoundKeyexiti_111_reg;
reg [31:0] main_AddRoundKeyexiti_112;
reg [31:0] main_AddRoundKeyexiti_112_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int105;
reg [31:0] main_AddRoundKeyexiti_gep_int105_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array106;
reg [31:0] main_AddRoundKeyexiti_gep_array106_reg;
reg [31:0] main_AddRoundKeyexiti_gep107;
reg [31:0] main_AddRoundKeyexiti_gep107_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array108;
reg [31:0] main_AddRoundKeyexiti_gep_array108_reg;
reg [31:0] main_AddRoundKeyexiti_gep109;
reg [31:0] main_AddRoundKeyexiti_gep109_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_113;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_113_reg;
reg [31:0] main_AddRoundKeyexiti_114;
reg [31:0] main_AddRoundKeyexiti_114_reg;
reg [31:0] main_AddRoundKeyexiti_115;
reg [31:0] main_AddRoundKeyexiti_115_reg;
reg [31:0] main_AddRoundKeyexiti_116;
reg [31:0] main_AddRoundKeyexiti_116_reg;
reg [31:0] main_AddRoundKeyexiti_117;
reg [31:0] main_AddRoundKeyexiti_117_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int110;
reg [31:0] main_AddRoundKeyexiti_gep_int110_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array111;
reg [31:0] main_AddRoundKeyexiti_gep_array111_reg;
reg [31:0] main_AddRoundKeyexiti_gep112;
reg [31:0] main_AddRoundKeyexiti_gep112_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array113;
reg [31:0] main_AddRoundKeyexiti_gep_array113_reg;
reg [31:0] main_AddRoundKeyexiti_gep114;
reg [31:0] main_AddRoundKeyexiti_gep114_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_118;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_118_reg;
reg [31:0] main_AddRoundKeyexiti_119;
reg [31:0] main_AddRoundKeyexiti_119_reg;
reg [31:0] main_AddRoundKeyexiti_120;
reg [31:0] main_AddRoundKeyexiti_120_reg;
reg [31:0] main_AddRoundKeyexiti_121;
reg [31:0] main_AddRoundKeyexiti_121_reg;
reg [31:0] main_AddRoundKeyexiti_122;
reg [31:0] main_AddRoundKeyexiti_122_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int115;
reg [31:0] main_AddRoundKeyexiti_gep_int115_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array116;
reg [31:0] main_AddRoundKeyexiti_gep_array116_reg;
reg [31:0] main_AddRoundKeyexiti_gep117;
reg [31:0] main_AddRoundKeyexiti_gep117_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array118;
reg [31:0] main_AddRoundKeyexiti_gep_array118_reg;
reg [31:0] main_AddRoundKeyexiti_gep119;
reg [31:0] main_AddRoundKeyexiti_gep119_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_123;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_123_reg;
reg [31:0] main_AddRoundKeyexiti_124;
reg [31:0] main_AddRoundKeyexiti_124_reg;
reg [31:0] main_AddRoundKeyexiti_125;
reg [31:0] main_AddRoundKeyexiti_125_reg;
reg [31:0] main_AddRoundKeyexiti_126;
reg [31:0] main_AddRoundKeyexiti_126_reg;
reg [31:0] main_AddRoundKeyexiti_127;
reg [31:0] main_AddRoundKeyexiti_127_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int120;
reg [31:0] main_AddRoundKeyexiti_gep_int120_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array121;
reg [31:0] main_AddRoundKeyexiti_gep_array121_reg;
reg [31:0] main_AddRoundKeyexiti_gep122;
reg [31:0] main_AddRoundKeyexiti_gep122_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array123;
reg [31:0] main_AddRoundKeyexiti_gep_array123_reg;
reg [31:0] main_AddRoundKeyexiti_gep124;
reg [31:0] main_AddRoundKeyexiti_gep124_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_128;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_128_reg;
reg [31:0] main_AddRoundKeyexiti_129;
reg [31:0] main_AddRoundKeyexiti_129_reg;
reg [31:0] main_AddRoundKeyexiti_130;
reg [31:0] main_AddRoundKeyexiti_130_reg;
reg [31:0] main_AddRoundKeyexiti_131;
reg [31:0] main_AddRoundKeyexiti_131_reg;
reg [31:0] main_AddRoundKeyexiti_132;
reg [31:0] main_AddRoundKeyexiti_132_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int125;
reg [31:0] main_AddRoundKeyexiti_gep_int125_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array126;
reg [31:0] main_AddRoundKeyexiti_gep_array126_reg;
reg [31:0] main_AddRoundKeyexiti_gep127;
reg [31:0] main_AddRoundKeyexiti_gep127_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array128;
reg [31:0] main_AddRoundKeyexiti_gep_array128_reg;
reg [31:0] main_AddRoundKeyexiti_gep129;
reg [31:0] main_AddRoundKeyexiti_gep129_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_133;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_133_reg;
reg [31:0] main_AddRoundKeyexiti_134;
reg [31:0] main_AddRoundKeyexiti_134_reg;
reg [31:0] main_AddRoundKeyexiti_135;
reg [31:0] main_AddRoundKeyexiti_135_reg;
reg [31:0] main_AddRoundKeyexiti_136;
reg [31:0] main_AddRoundKeyexiti_136_reg;
reg [31:0] main_AddRoundKeyexiti_137;
reg [31:0] main_AddRoundKeyexiti_137_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int130;
reg [31:0] main_AddRoundKeyexiti_gep_int130_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array131;
reg [31:0] main_AddRoundKeyexiti_gep_array131_reg;
reg [31:0] main_AddRoundKeyexiti_gep132;
reg [31:0] main_AddRoundKeyexiti_gep132_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array133;
reg [31:0] main_AddRoundKeyexiti_gep_array133_reg;
reg [31:0] main_AddRoundKeyexiti_gep134;
reg [31:0] main_AddRoundKeyexiti_gep134_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_138;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_138_reg;
reg [31:0] main_AddRoundKeyexiti_139;
reg [31:0] main_AddRoundKeyexiti_139_reg;
reg [31:0] main_AddRoundKeyexiti_140;
reg [31:0] main_AddRoundKeyexiti_140_reg;
reg [31:0] main_AddRoundKeyexiti_141;
reg [31:0] main_AddRoundKeyexiti_141_reg;
reg [31:0] main_AddRoundKeyexiti_142;
reg [31:0] main_AddRoundKeyexiti_142_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int135;
reg [31:0] main_AddRoundKeyexiti_gep_int135_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array136;
reg [31:0] main_AddRoundKeyexiti_gep_array136_reg;
reg [31:0] main_AddRoundKeyexiti_gep137;
reg [31:0] main_AddRoundKeyexiti_gep137_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array138;
reg [31:0] main_AddRoundKeyexiti_gep_array138_reg;
reg [31:0] main_AddRoundKeyexiti_gep139;
reg [31:0] main_AddRoundKeyexiti_gep139_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_143;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_143_reg;
reg [31:0] main_AddRoundKeyexiti_144;
reg [31:0] main_AddRoundKeyexiti_144_reg;
reg [31:0] main_AddRoundKeyexiti_145;
reg [31:0] main_AddRoundKeyexiti_145_reg;
reg [31:0] main_AddRoundKeyexiti_146;
reg [31:0] main_AddRoundKeyexiti_146_reg;
reg [31:0] main_AddRoundKeyexiti_147;
reg [31:0] main_AddRoundKeyexiti_147_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int140;
reg [31:0] main_AddRoundKeyexiti_gep_int140_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array141;
reg [31:0] main_AddRoundKeyexiti_gep_array141_reg;
reg [31:0] main_AddRoundKeyexiti_gep142;
reg [31:0] main_AddRoundKeyexiti_gep142_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array143;
reg [31:0] main_AddRoundKeyexiti_gep_array143_reg;
reg [31:0] main_AddRoundKeyexiti_gep144;
reg [31:0] main_AddRoundKeyexiti_gep144_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_148;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_148_reg;
reg [31:0] main_AddRoundKeyexiti_149;
reg [31:0] main_AddRoundKeyexiti_149_reg;
reg [31:0] main_AddRoundKeyexiti_150;
reg [31:0] main_AddRoundKeyexiti_150_reg;
reg [31:0] main_AddRoundKeyexiti_151;
reg [31:0] main_AddRoundKeyexiti_151_reg;
reg [31:0] main_AddRoundKeyexiti_152;
reg [31:0] main_AddRoundKeyexiti_152_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int145;
reg [31:0] main_AddRoundKeyexiti_gep_int145_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array146;
reg [31:0] main_AddRoundKeyexiti_gep_array146_reg;
reg [31:0] main_AddRoundKeyexiti_gep147;
reg [31:0] main_AddRoundKeyexiti_gep147_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array148;
reg [31:0] main_AddRoundKeyexiti_gep_array148_reg;
reg [31:0] main_AddRoundKeyexiti_gep149;
reg [31:0] main_AddRoundKeyexiti_gep149_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_153;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_153_reg;
reg [31:0] main_AddRoundKeyexiti_154;
reg [31:0] main_AddRoundKeyexiti_154_reg;
reg [31:0] main_AddRoundKeyexiti_155;
reg [31:0] main_AddRoundKeyexiti_155_reg;
reg [31:0] main_AddRoundKeyexiti_156;
reg [31:0] main_AddRoundKeyexiti_156_reg;
reg [31:0] main_AddRoundKeyexiti_157;
reg [31:0] main_AddRoundKeyexiti_157_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int150;
reg [31:0] main_AddRoundKeyexiti_gep_int150_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array151;
reg [31:0] main_AddRoundKeyexiti_gep_array151_reg;
reg [31:0] main_AddRoundKeyexiti_gep152;
reg [31:0] main_AddRoundKeyexiti_gep152_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array153;
reg [31:0] main_AddRoundKeyexiti_gep_array153_reg;
reg [31:0] main_AddRoundKeyexiti_gep154;
reg [31:0] main_AddRoundKeyexiti_gep154_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_158;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_158_reg;
reg [31:0] main_AddRoundKeyexiti_159;
reg [31:0] main_AddRoundKeyexiti_159_reg;
reg [31:0] main_AddRoundKeyexiti_160;
reg [31:0] main_AddRoundKeyexiti_160_reg;
reg [31:0] main_AddRoundKeyexiti_161;
reg [31:0] main_AddRoundKeyexiti_161_reg;
reg [31:0] main_AddRoundKeyexiti_162;
reg [31:0] main_AddRoundKeyexiti_162_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int155;
reg [31:0] main_AddRoundKeyexiti_gep_int155_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array156;
reg [31:0] main_AddRoundKeyexiti_gep_array156_reg;
reg [31:0] main_AddRoundKeyexiti_gep157;
reg [31:0] main_AddRoundKeyexiti_gep157_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array158;
reg [31:0] main_AddRoundKeyexiti_gep_array158_reg;
reg [31:0] main_AddRoundKeyexiti_gep159;
reg [31:0] main_AddRoundKeyexiti_gep159_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_163;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_163_reg;
reg [31:0] main_AddRoundKeyexiti_164;
reg [31:0] main_AddRoundKeyexiti_164_reg;
reg [31:0] main_AddRoundKeyexiti_165;
reg [31:0] main_AddRoundKeyexiti_165_reg;
reg [31:0] main_AddRoundKeyexiti_166;
reg [31:0] main_AddRoundKeyexiti_166_reg;
reg [31:0] main_AddRoundKeyexiti_167;
reg [31:0] main_AddRoundKeyexiti_167_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int160;
reg [31:0] main_AddRoundKeyexiti_gep_int160_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array161;
reg [31:0] main_AddRoundKeyexiti_gep_array161_reg;
reg [31:0] main_AddRoundKeyexiti_gep162;
reg [31:0] main_AddRoundKeyexiti_gep162_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array163;
reg [31:0] main_AddRoundKeyexiti_gep_array163_reg;
reg [31:0] main_AddRoundKeyexiti_gep164;
reg [31:0] main_AddRoundKeyexiti_gep164_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_168;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_168_reg;
reg [31:0] main_AddRoundKeyexiti_169;
reg [31:0] main_AddRoundKeyexiti_169_reg;
reg [31:0] main_AddRoundKeyexiti_170;
reg [31:0] main_AddRoundKeyexiti_170_reg;
reg [31:0] main_AddRoundKeyexiti_171;
reg [31:0] main_AddRoundKeyexiti_171_reg;
reg [31:0] main_AddRoundKeyexiti_172;
reg [31:0] main_AddRoundKeyexiti_172_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int165;
reg [31:0] main_AddRoundKeyexiti_gep_int165_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array166;
reg [31:0] main_AddRoundKeyexiti_gep_array166_reg;
reg [31:0] main_AddRoundKeyexiti_gep167;
reg [31:0] main_AddRoundKeyexiti_gep167_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array168;
reg [31:0] main_AddRoundKeyexiti_gep_array168_reg;
reg [31:0] main_AddRoundKeyexiti_gep169;
reg [31:0] main_AddRoundKeyexiti_gep169_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_173;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_173_reg;
reg [31:0] main_AddRoundKeyexiti_174;
reg [31:0] main_AddRoundKeyexiti_174_reg;
reg [31:0] main_AddRoundKeyexiti_175;
reg [31:0] main_AddRoundKeyexiti_175_reg;
reg [31:0] main_AddRoundKeyexiti_176;
reg [31:0] main_AddRoundKeyexiti_176_reg;
reg [31:0] main_AddRoundKeyexiti_177;
reg [31:0] main_AddRoundKeyexiti_177_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int170;
reg [31:0] main_AddRoundKeyexiti_gep_int170_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array171;
reg [31:0] main_AddRoundKeyexiti_gep_array171_reg;
reg [31:0] main_AddRoundKeyexiti_gep172;
reg [31:0] main_AddRoundKeyexiti_gep172_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array173;
reg [31:0] main_AddRoundKeyexiti_gep_array173_reg;
reg [31:0] main_AddRoundKeyexiti_gep174;
reg [31:0] main_AddRoundKeyexiti_gep174_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_178;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_178_reg;
reg [31:0] main_AddRoundKeyexiti_179;
reg [31:0] main_AddRoundKeyexiti_179_reg;
reg [31:0] main_AddRoundKeyexiti_180;
reg [31:0] main_AddRoundKeyexiti_180_reg;
reg [31:0] main_AddRoundKeyexiti_181;
reg [31:0] main_AddRoundKeyexiti_181_reg;
reg [31:0] main_AddRoundKeyexiti_182;
reg [31:0] main_AddRoundKeyexiti_182_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int175;
reg [31:0] main_AddRoundKeyexiti_gep_int175_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array176;
reg [31:0] main_AddRoundKeyexiti_gep_array176_reg;
reg [31:0] main_AddRoundKeyexiti_gep177;
reg [31:0] main_AddRoundKeyexiti_gep177_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array178;
reg [31:0] main_AddRoundKeyexiti_gep_array178_reg;
reg [31:0] main_AddRoundKeyexiti_gep179;
reg [31:0] main_AddRoundKeyexiti_gep179_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_183;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_183_reg;
reg [31:0] main_AddRoundKeyexiti_184;
reg [31:0] main_AddRoundKeyexiti_184_reg;
reg [31:0] main_AddRoundKeyexiti_185;
reg [31:0] main_AddRoundKeyexiti_185_reg;
reg [31:0] main_AddRoundKeyexiti_186;
reg [31:0] main_AddRoundKeyexiti_186_reg;
reg [31:0] main_AddRoundKeyexiti_187;
reg [31:0] main_AddRoundKeyexiti_187_reg;
reg [31:0] main_AddRoundKeyexiti_gep_int180;
reg [31:0] main_AddRoundKeyexiti_gep_int180_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array181;
reg [31:0] main_AddRoundKeyexiti_gep_array181_reg;
reg [31:0] main_AddRoundKeyexiti_gep182;
reg [31:0] main_AddRoundKeyexiti_gep182_reg;
reg [31:0] main_AddRoundKeyexiti_gep_array183;
reg [31:0] main_AddRoundKeyexiti_gep_array183_reg;
reg [31:0] main_AddRoundKeyexiti_gep184;
reg [31:0] main_AddRoundKeyexiti_gep184_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_188;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_188_reg;
reg [31:0] main_AddRoundKeyexiti_189;
reg [31:0] main_AddRoundKeyexiti_189_reg;
reg  main_AddRoundKeyexiti_exitcond29;
reg  main_AddRoundKeyexiti_exitcond29_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_j01i2i;
reg [31:0] main_AddRoundKeyexit_crit_edgei_j01i2i_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_190;
reg [31:0] main_AddRoundKeyexit_crit_edgei_190_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int185;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int185_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array186;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array186_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep187;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep187_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_191;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_191_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_192;
reg [31:0] main_AddRoundKeyexit_crit_edgei_192_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_193;
reg [31:0] main_AddRoundKeyexit_crit_edgei_193_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int188;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int188_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array189;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array189_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep190;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep190_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_194;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_194_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_195;
reg [31:0] main_AddRoundKeyexit_crit_edgei_195_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_196;
reg [31:0] main_AddRoundKeyexit_crit_edgei_196_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int191;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int191_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep192;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep192_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array193;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array193_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep194;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep194_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_197;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_197_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_198;
reg [31:0] main_AddRoundKeyexit_crit_edgei_198_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_199;
reg [31:0] main_AddRoundKeyexit_crit_edgei_199_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int195;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int195_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array196;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array196_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep197;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep197_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_200;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_200_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_201;
reg [31:0] main_AddRoundKeyexit_crit_edgei_201_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_202;
reg [31:0] main_AddRoundKeyexit_crit_edgei_202_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int198;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int198_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep199;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep199_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array200;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array200_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep201;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep201_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_203;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_203_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_204;
reg [31:0] main_AddRoundKeyexit_crit_edgei_204_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_205;
reg [31:0] main_AddRoundKeyexit_crit_edgei_205_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int202;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int202_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array203;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array203_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep204;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep204_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_206;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_206_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_207;
reg [31:0] main_AddRoundKeyexit_crit_edgei_207_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_208;
reg [31:0] main_AddRoundKeyexit_crit_edgei_208_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int205;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int205_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep206;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep206_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array207;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array207_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep208;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep208_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_209;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_209_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_210;
reg [31:0] main_AddRoundKeyexit_crit_edgei_210_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_211;
reg [31:0] main_AddRoundKeyexit_crit_edgei_211_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int209;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_int209_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array210;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep_array210_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep211;
reg [31:0] main_AddRoundKeyexit_crit_edgei_gep211_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_212;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_212_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_213;
reg [31:0] main_AddRoundKeyexit_crit_edgei_213_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_214;
reg [31:0] main_AddRoundKeyexit_crit_edgei_214_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_215;
reg [31:0] main_AddRoundKeyexit_crit_edgei_215_reg;
reg  main_AddRoundKeyexit_crit_edgei_exitcond28;
reg  main_AddRoundKeyexit_crit_edgei_exitcond28_reg;
reg [31:0] main_lrphi_i17i;
reg [31:0] main_lrphi_i17i_reg;
reg [31:0] main_lrphi_gep_int212;
reg [31:0] main_lrphi_gep_int212_reg;
reg [31:0] main_lrphi_gep_array213;
reg [31:0] main_lrphi_gep_array213_reg;
reg [31:0] main_lrphi_gep214;
reg [31:0] main_lrphi_gep214_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_217;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_217_reg;
reg [31:0] main_lrphi_218;
reg [31:0] main_lrphi_218_reg;
reg  main_lrphi_219;
reg  main_lrphi_219_reg;
reg [31:0] main_220_prei;
reg [31:0] main_220_prei_reg;
reg [31:0] main_222_223;
reg [31:0] main_222_223_reg;
reg [31:0] main_222_225;
reg [31:0] main_222_225_reg;
reg  main_222_exitcond27;
reg  main_222_exitcond27_reg;
reg [31:0] main_preheaderi_226;
reg [31:0] main_preheaderi_226_reg;
reg [31:0] main_preheaderi_i26i;
reg [31:0] main_preheaderi_i26i_reg;
reg [31:0] main_preheaderi_gep_int215;
reg [31:0] main_preheaderi_gep_int215_reg;
reg [31:0] main_preheaderi_gep_array216;
reg [31:0] main_preheaderi_gep_array216_reg;
reg [31:0] main_preheaderi_gep217;
reg [31:0] main_preheaderi_gep217_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_227;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_227_reg;
reg [31:0] main_preheaderi_228;
reg [31:0] main_preheaderi_228_reg;
reg [31:0] main_preheaderi_gep_int218;
reg [31:0] main_preheaderi_gep_int218_reg;
reg [31:0] main_preheaderi_gep_array219;
reg [31:0] main_preheaderi_gep_array219_reg;
reg [31:0] main_preheaderi_gep220;
reg [31:0] main_preheaderi_gep220_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_229;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_229_reg;
reg [31:0] main_preheaderi_230;
reg [31:0] main_preheaderi_230_reg;
reg  main_preheaderi_231;
reg  main_preheaderi_231_reg;
reg [31:0] main_preheaderi_232;
reg [31:0] main_preheaderi_232_reg;
reg [31:0] main_preheaderi_233;
reg [31:0] main_preheaderi_233_reg;
reg [31:0] main_preheaderi_234;
reg [31:0] main_preheaderi_234_reg;
reg  main_preheaderi_exitcondi;
reg  main_preheaderi_exitcondi_reg;
reg [31:0] main_encryptexit_lcssa1;
reg [31:0] main_encryptexit_lcssa1_reg;
reg [31:0] main_236_j01ii1;
reg [31:0] main_236_j01ii1_reg;
reg [31:0] main_236_237;
reg [31:0] main_236_237_reg;
reg [31:0] main_236_gep_int221;
reg [31:0] main_236_gep_int221_reg;
reg [31:0] main_236_gep_array222;
reg [31:0] main_236_gep_array222_reg;
reg [31:0] main_236_gep223;
reg [31:0] main_236_gep223_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_236_238;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_236_238_reg;
reg [31:0] main_236_239;
reg [31:0] main_236_239_reg;
reg [31:0] main_236_240;
reg [31:0] main_236_240_reg;
reg [31:0] main_236_gep_int224;
reg [31:0] main_236_gep_int224_reg;
reg [31:0] main_236_gep_array225;
reg [31:0] main_236_gep_array225_reg;
reg [31:0] main_236_gep226;
reg [31:0] main_236_gep226_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_236_241;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_236_241_reg;
reg [31:0] main_236_242;
reg [31:0] main_236_242_reg;
reg [31:0] main_236_243;
reg [31:0] main_236_243_reg;
reg [31:0] main_236_gep_int227;
reg [31:0] main_236_gep_int227_reg;
reg [31:0] main_236_gep228;
reg [31:0] main_236_gep228_reg;
reg [31:0] main_236_gep_array229;
reg [31:0] main_236_gep_array229_reg;
reg [31:0] main_236_gep230;
reg [31:0] main_236_gep230_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_236_244;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_236_244_reg;
reg [31:0] main_236_245;
reg [31:0] main_236_245_reg;
reg [31:0] main_236_246;
reg [31:0] main_236_246_reg;
reg [31:0] main_236_gep_int231;
reg [31:0] main_236_gep_int231_reg;
reg [31:0] main_236_gep_array232;
reg [31:0] main_236_gep_array232_reg;
reg [31:0] main_236_gep233;
reg [31:0] main_236_gep233_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_236_247;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_236_247_reg;
reg [31:0] main_236_248;
reg [31:0] main_236_248_reg;
reg [31:0] main_236_249;
reg [31:0] main_236_249_reg;
reg [31:0] main_236_gep_int234;
reg [31:0] main_236_gep_int234_reg;
reg [31:0] main_236_gep235;
reg [31:0] main_236_gep235_reg;
reg [31:0] main_236_gep_array236;
reg [31:0] main_236_gep_array236_reg;
reg [31:0] main_236_gep237;
reg [31:0] main_236_gep237_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_236_250;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_236_250_reg;
reg [31:0] main_236_251;
reg [31:0] main_236_251_reg;
reg [31:0] main_236_252;
reg [31:0] main_236_252_reg;
reg [31:0] main_236_gep_int238;
reg [31:0] main_236_gep_int238_reg;
reg [31:0] main_236_gep_array239;
reg [31:0] main_236_gep_array239_reg;
reg [31:0] main_236_gep240;
reg [31:0] main_236_gep240_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_236_253;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_236_253_reg;
reg [31:0] main_236_254;
reg [31:0] main_236_254_reg;
reg [31:0] main_236_255;
reg [31:0] main_236_255_reg;
reg [31:0] main_236_gep_int241;
reg [31:0] main_236_gep_int241_reg;
reg [31:0] main_236_gep242;
reg [31:0] main_236_gep242_reg;
reg [31:0] main_236_gep_array243;
reg [31:0] main_236_gep_array243_reg;
reg [31:0] main_236_gep244;
reg [31:0] main_236_gep244_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_236_256;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_236_256_reg;
reg [31:0] main_236_257;
reg [31:0] main_236_257_reg;
reg [31:0] main_236_258;
reg [31:0] main_236_258_reg;
reg [31:0] main_236_gep_int245;
reg [31:0] main_236_gep_int245_reg;
reg [31:0] main_236_gep_array246;
reg [31:0] main_236_gep_array246_reg;
reg [31:0] main_236_gep247;
reg [31:0] main_236_gep247_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_236_259;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_236_259_reg;
reg [31:0] main_236_260;
reg [31:0] main_236_260_reg;
reg [31:0] main_236_261;
reg [31:0] main_236_261_reg;
reg [31:0] main_236_262;
reg [31:0] main_236_262_reg;
reg  main_236_exitcond26;
reg  main_236_exitcond26_reg;
reg [31:0] main_lrph10ipreheader_263;
reg [31:0] main_lrph10ipreheader_263_reg;
reg [31:0] main_lrph10ipreheader_264;
reg [31:0] main_lrph10ipreheader_264_reg;
reg [31:0] main_lrph10ipreheader_265;
reg [31:0] main_lrph10ipreheader_265_reg;
reg [31:0] main_lrph10ipreheader_gep_int248;
reg [31:0] main_lrph10ipreheader_gep_int248_reg;
reg [31:0] main_lrph10ipreheader_gep_array249;
reg [31:0] main_lrph10ipreheader_gep_array249_reg;
reg [31:0] main_lrph10ipreheader_gep250;
reg [31:0] main_lrph10ipreheader_gep250_reg;
reg [31:0] main_lrph10ipreheader_gep_array251;
reg [31:0] main_lrph10ipreheader_gep_array251_reg;
reg [31:0] main_lrph10ipreheader_gep252;
reg [31:0] main_lrph10ipreheader_gep252_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_266;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_266_reg;
reg [31:0] main_lrph10ipreheader_267;
reg [31:0] main_lrph10ipreheader_267_reg;
reg [31:0] main_lrph10ipreheader_268;
reg [31:0] main_lrph10ipreheader_268_reg;
reg [31:0] main_lrph10ipreheader_269;
reg [31:0] main_lrph10ipreheader_269_reg;
reg [31:0] main_lrph10ipreheader_270;
reg [31:0] main_lrph10ipreheader_270_reg;
reg [31:0] main_lrph10ipreheader_gep_int253;
reg [31:0] main_lrph10ipreheader_gep_int253_reg;
reg [31:0] main_lrph10ipreheader_gep_array254;
reg [31:0] main_lrph10ipreheader_gep_array254_reg;
reg [31:0] main_lrph10ipreheader_gep255;
reg [31:0] main_lrph10ipreheader_gep255_reg;
reg [31:0] main_lrph10ipreheader_gep_array256;
reg [31:0] main_lrph10ipreheader_gep_array256_reg;
reg [31:0] main_lrph10ipreheader_gep257;
reg [31:0] main_lrph10ipreheader_gep257_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_271;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_271_reg;
reg [31:0] main_lrph10ipreheader_272;
reg [31:0] main_lrph10ipreheader_272_reg;
reg [31:0] main_lrph10ipreheader_273;
reg [31:0] main_lrph10ipreheader_273_reg;
reg [31:0] main_lrph10ipreheader_274;
reg [31:0] main_lrph10ipreheader_274_reg;
reg [31:0] main_lrph10ipreheader_275;
reg [31:0] main_lrph10ipreheader_275_reg;
reg [31:0] main_lrph10ipreheader_gep_int258;
reg [31:0] main_lrph10ipreheader_gep_int258_reg;
reg [31:0] main_lrph10ipreheader_gep_array259;
reg [31:0] main_lrph10ipreheader_gep_array259_reg;
reg [31:0] main_lrph10ipreheader_gep260;
reg [31:0] main_lrph10ipreheader_gep260_reg;
reg [31:0] main_lrph10ipreheader_gep_array261;
reg [31:0] main_lrph10ipreheader_gep_array261_reg;
reg [31:0] main_lrph10ipreheader_gep262;
reg [31:0] main_lrph10ipreheader_gep262_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_276;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_276_reg;
reg [31:0] main_lrph10ipreheader_277;
reg [31:0] main_lrph10ipreheader_277_reg;
reg [31:0] main_lrph10ipreheader_278;
reg [31:0] main_lrph10ipreheader_278_reg;
reg [31:0] main_lrph10ipreheader_279;
reg [31:0] main_lrph10ipreheader_279_reg;
reg [31:0] main_lrph10ipreheader_280;
reg [31:0] main_lrph10ipreheader_280_reg;
reg [31:0] main_lrph10ipreheader_gep_int263;
reg [31:0] main_lrph10ipreheader_gep_int263_reg;
reg [31:0] main_lrph10ipreheader_gep_array264;
reg [31:0] main_lrph10ipreheader_gep_array264_reg;
reg [31:0] main_lrph10ipreheader_gep265;
reg [31:0] main_lrph10ipreheader_gep265_reg;
reg [31:0] main_lrph10ipreheader_gep_array266;
reg [31:0] main_lrph10ipreheader_gep_array266_reg;
reg [31:0] main_lrph10ipreheader_gep267;
reg [31:0] main_lrph10ipreheader_gep267_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_281;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_281_reg;
reg [31:0] main_lrph10ipreheader_282;
reg [31:0] main_lrph10ipreheader_282_reg;
reg [31:0] main_lrph10ipreheader_283;
reg [31:0] main_lrph10ipreheader_283_reg;
reg [31:0] main_lrph10ipreheader_284;
reg [31:0] main_lrph10ipreheader_284_reg;
reg [31:0] main_lrph10ipreheader_285;
reg [31:0] main_lrph10ipreheader_285_reg;
reg [31:0] main_lrph10ipreheader_gep_int268;
reg [31:0] main_lrph10ipreheader_gep_int268_reg;
reg [31:0] main_lrph10ipreheader_gep_array269;
reg [31:0] main_lrph10ipreheader_gep_array269_reg;
reg [31:0] main_lrph10ipreheader_gep270;
reg [31:0] main_lrph10ipreheader_gep270_reg;
reg [31:0] main_lrph10ipreheader_gep_array271;
reg [31:0] main_lrph10ipreheader_gep_array271_reg;
reg [31:0] main_lrph10ipreheader_gep272;
reg [31:0] main_lrph10ipreheader_gep272_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_286;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_286_reg;
reg [31:0] main_lrph10ipreheader_287;
reg [31:0] main_lrph10ipreheader_287_reg;
reg [31:0] main_lrph10ipreheader_288;
reg [31:0] main_lrph10ipreheader_288_reg;
reg [31:0] main_lrph10ipreheader_289;
reg [31:0] main_lrph10ipreheader_289_reg;
reg [31:0] main_lrph10ipreheader_290;
reg [31:0] main_lrph10ipreheader_290_reg;
reg [31:0] main_lrph10ipreheader_gep_int273;
reg [31:0] main_lrph10ipreheader_gep_int273_reg;
reg [31:0] main_lrph10ipreheader_gep_array274;
reg [31:0] main_lrph10ipreheader_gep_array274_reg;
reg [31:0] main_lrph10ipreheader_gep275;
reg [31:0] main_lrph10ipreheader_gep275_reg;
reg [31:0] main_lrph10ipreheader_gep_array276;
reg [31:0] main_lrph10ipreheader_gep_array276_reg;
reg [31:0] main_lrph10ipreheader_gep277;
reg [31:0] main_lrph10ipreheader_gep277_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_291;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_291_reg;
reg [31:0] main_lrph10ipreheader_292;
reg [31:0] main_lrph10ipreheader_292_reg;
reg [31:0] main_lrph10ipreheader_293;
reg [31:0] main_lrph10ipreheader_293_reg;
reg [31:0] main_lrph10ipreheader_294;
reg [31:0] main_lrph10ipreheader_294_reg;
reg [31:0] main_lrph10ipreheader_295;
reg [31:0] main_lrph10ipreheader_295_reg;
reg [31:0] main_lrph10ipreheader_gep_int278;
reg [31:0] main_lrph10ipreheader_gep_int278_reg;
reg [31:0] main_lrph10ipreheader_gep_array279;
reg [31:0] main_lrph10ipreheader_gep_array279_reg;
reg [31:0] main_lrph10ipreheader_gep280;
reg [31:0] main_lrph10ipreheader_gep280_reg;
reg [31:0] main_lrph10ipreheader_gep_array281;
reg [31:0] main_lrph10ipreheader_gep_array281_reg;
reg [31:0] main_lrph10ipreheader_gep282;
reg [31:0] main_lrph10ipreheader_gep282_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_296;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_296_reg;
reg [31:0] main_lrph10ipreheader_297;
reg [31:0] main_lrph10ipreheader_297_reg;
reg [31:0] main_lrph10ipreheader_298;
reg [31:0] main_lrph10ipreheader_298_reg;
reg [31:0] main_lrph10ipreheader_299;
reg [31:0] main_lrph10ipreheader_299_reg;
reg [31:0] main_lrph10ipreheader_300;
reg [31:0] main_lrph10ipreheader_300_reg;
reg [31:0] main_lrph10ipreheader_gep_int283;
reg [31:0] main_lrph10ipreheader_gep_int283_reg;
reg [31:0] main_lrph10ipreheader_gep_array284;
reg [31:0] main_lrph10ipreheader_gep_array284_reg;
reg [31:0] main_lrph10ipreheader_gep285;
reg [31:0] main_lrph10ipreheader_gep285_reg;
reg [31:0] main_lrph10ipreheader_gep_array286;
reg [31:0] main_lrph10ipreheader_gep_array286_reg;
reg [31:0] main_lrph10ipreheader_gep287;
reg [31:0] main_lrph10ipreheader_gep287_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_301;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_301_reg;
reg [31:0] main_lrph10ipreheader_302;
reg [31:0] main_lrph10ipreheader_302_reg;
reg [31:0] main_lrph10ipreheader_303;
reg [31:0] main_lrph10ipreheader_303_reg;
reg [31:0] main_lrph10ipreheader_304;
reg [31:0] main_lrph10ipreheader_304_reg;
reg [31:0] main_lrph10ipreheader_305;
reg [31:0] main_lrph10ipreheader_305_reg;
reg [31:0] main_lrph10ipreheader_gep_int288;
reg [31:0] main_lrph10ipreheader_gep_int288_reg;
reg [31:0] main_lrph10ipreheader_gep_array289;
reg [31:0] main_lrph10ipreheader_gep_array289_reg;
reg [31:0] main_lrph10ipreheader_gep290;
reg [31:0] main_lrph10ipreheader_gep290_reg;
reg [31:0] main_lrph10ipreheader_gep_array291;
reg [31:0] main_lrph10ipreheader_gep_array291_reg;
reg [31:0] main_lrph10ipreheader_gep292;
reg [31:0] main_lrph10ipreheader_gep292_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_306;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_306_reg;
reg [31:0] main_lrph10ipreheader_307;
reg [31:0] main_lrph10ipreheader_307_reg;
reg [31:0] main_lrph10ipreheader_308;
reg [31:0] main_lrph10ipreheader_308_reg;
reg [31:0] main_lrph10ipreheader_309;
reg [31:0] main_lrph10ipreheader_309_reg;
reg [31:0] main_lrph10ipreheader_310;
reg [31:0] main_lrph10ipreheader_310_reg;
reg [31:0] main_lrph10ipreheader_gep_int293;
reg [31:0] main_lrph10ipreheader_gep_int293_reg;
reg [31:0] main_lrph10ipreheader_gep_array294;
reg [31:0] main_lrph10ipreheader_gep_array294_reg;
reg [31:0] main_lrph10ipreheader_gep295;
reg [31:0] main_lrph10ipreheader_gep295_reg;
reg [31:0] main_lrph10ipreheader_gep_array296;
reg [31:0] main_lrph10ipreheader_gep_array296_reg;
reg [31:0] main_lrph10ipreheader_gep297;
reg [31:0] main_lrph10ipreheader_gep297_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_311;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_311_reg;
reg [31:0] main_lrph10ipreheader_312;
reg [31:0] main_lrph10ipreheader_312_reg;
reg [31:0] main_lrph10ipreheader_313;
reg [31:0] main_lrph10ipreheader_313_reg;
reg [31:0] main_lrph10ipreheader_314;
reg [31:0] main_lrph10ipreheader_314_reg;
reg [31:0] main_lrph10ipreheader_315;
reg [31:0] main_lrph10ipreheader_315_reg;
reg [31:0] main_lrph10ipreheader_gep_int298;
reg [31:0] main_lrph10ipreheader_gep_int298_reg;
reg [31:0] main_lrph10ipreheader_gep_array299;
reg [31:0] main_lrph10ipreheader_gep_array299_reg;
reg [31:0] main_lrph10ipreheader_gep300;
reg [31:0] main_lrph10ipreheader_gep300_reg;
reg [31:0] main_lrph10ipreheader_gep_array301;
reg [31:0] main_lrph10ipreheader_gep_array301_reg;
reg [31:0] main_lrph10ipreheader_gep302;
reg [31:0] main_lrph10ipreheader_gep302_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_316;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_316_reg;
reg [31:0] main_lrph10ipreheader_317;
reg [31:0] main_lrph10ipreheader_317_reg;
reg [31:0] main_lrph10ipreheader_318;
reg [31:0] main_lrph10ipreheader_318_reg;
reg [31:0] main_lrph10ipreheader_319;
reg [31:0] main_lrph10ipreheader_319_reg;
reg [31:0] main_lrph10ipreheader_320;
reg [31:0] main_lrph10ipreheader_320_reg;
reg [31:0] main_lrph10ipreheader_gep_int303;
reg [31:0] main_lrph10ipreheader_gep_int303_reg;
reg [31:0] main_lrph10ipreheader_gep_array304;
reg [31:0] main_lrph10ipreheader_gep_array304_reg;
reg [31:0] main_lrph10ipreheader_gep305;
reg [31:0] main_lrph10ipreheader_gep305_reg;
reg [31:0] main_lrph10ipreheader_gep_array306;
reg [31:0] main_lrph10ipreheader_gep_array306_reg;
reg [31:0] main_lrph10ipreheader_gep307;
reg [31:0] main_lrph10ipreheader_gep307_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_321;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_321_reg;
reg [31:0] main_lrph10ipreheader_322;
reg [31:0] main_lrph10ipreheader_322_reg;
reg [31:0] main_lrph10ipreheader_323;
reg [31:0] main_lrph10ipreheader_323_reg;
reg [31:0] main_lrph10ipreheader_324;
reg [31:0] main_lrph10ipreheader_324_reg;
reg [31:0] main_lrph10ipreheader_325;
reg [31:0] main_lrph10ipreheader_325_reg;
reg [31:0] main_lrph10ipreheader_gep_int308;
reg [31:0] main_lrph10ipreheader_gep_int308_reg;
reg [31:0] main_lrph10ipreheader_gep_array309;
reg [31:0] main_lrph10ipreheader_gep_array309_reg;
reg [31:0] main_lrph10ipreheader_gep310;
reg [31:0] main_lrph10ipreheader_gep310_reg;
reg [31:0] main_lrph10ipreheader_gep_array311;
reg [31:0] main_lrph10ipreheader_gep_array311_reg;
reg [31:0] main_lrph10ipreheader_gep312;
reg [31:0] main_lrph10ipreheader_gep312_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_326;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_326_reg;
reg [31:0] main_lrph10ipreheader_327;
reg [31:0] main_lrph10ipreheader_327_reg;
reg [31:0] main_lrph10ipreheader_328;
reg [31:0] main_lrph10ipreheader_328_reg;
reg [31:0] main_lrph10ipreheader_329;
reg [31:0] main_lrph10ipreheader_329_reg;
reg [31:0] main_lrph10ipreheader_330;
reg [31:0] main_lrph10ipreheader_330_reg;
reg [31:0] main_lrph10ipreheader_gep_int313;
reg [31:0] main_lrph10ipreheader_gep_int313_reg;
reg [31:0] main_lrph10ipreheader_gep_array314;
reg [31:0] main_lrph10ipreheader_gep_array314_reg;
reg [31:0] main_lrph10ipreheader_gep315;
reg [31:0] main_lrph10ipreheader_gep315_reg;
reg [31:0] main_lrph10ipreheader_gep_array316;
reg [31:0] main_lrph10ipreheader_gep_array316_reg;
reg [31:0] main_lrph10ipreheader_gep317;
reg [31:0] main_lrph10ipreheader_gep317_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_331;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_331_reg;
reg [31:0] main_lrph10ipreheader_332;
reg [31:0] main_lrph10ipreheader_332_reg;
reg [31:0] main_lrph10ipreheader_333;
reg [31:0] main_lrph10ipreheader_333_reg;
reg [31:0] main_lrph10ipreheader_334;
reg [31:0] main_lrph10ipreheader_334_reg;
reg [31:0] main_lrph10ipreheader_335;
reg [31:0] main_lrph10ipreheader_335_reg;
reg [31:0] main_lrph10ipreheader_gep_int318;
reg [31:0] main_lrph10ipreheader_gep_int318_reg;
reg [31:0] main_lrph10ipreheader_gep_array319;
reg [31:0] main_lrph10ipreheader_gep_array319_reg;
reg [31:0] main_lrph10ipreheader_gep320;
reg [31:0] main_lrph10ipreheader_gep320_reg;
reg [31:0] main_lrph10ipreheader_gep_array321;
reg [31:0] main_lrph10ipreheader_gep_array321_reg;
reg [31:0] main_lrph10ipreheader_gep322;
reg [31:0] main_lrph10ipreheader_gep322_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_336;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_336_reg;
reg [31:0] main_lrph10ipreheader_337;
reg [31:0] main_lrph10ipreheader_337_reg;
reg [31:0] main_lrph10ipreheader_338;
reg [31:0] main_lrph10ipreheader_338_reg;
reg [31:0] main_lrph10ipreheader_339;
reg [31:0] main_lrph10ipreheader_339_reg;
reg [31:0] main_lrph10ipreheader_340;
reg [31:0] main_lrph10ipreheader_340_reg;
reg [31:0] main_lrph10ipreheader_gep_int323;
reg [31:0] main_lrph10ipreheader_gep_int323_reg;
reg [31:0] main_lrph10ipreheader_gep_array324;
reg [31:0] main_lrph10ipreheader_gep_array324_reg;
reg [31:0] main_lrph10ipreheader_gep325;
reg [31:0] main_lrph10ipreheader_gep325_reg;
reg [31:0] main_lrph10ipreheader_gep_array326;
reg [31:0] main_lrph10ipreheader_gep_array326_reg;
reg [31:0] main_lrph10ipreheader_gep327;
reg [31:0] main_lrph10ipreheader_gep327_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_341;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10ipreheader_341_reg;
reg [31:0] main_lrph10ipreheader_342;
reg [31:0] main_lrph10ipreheader_342_reg;
reg [31:0] main_lrph10i_i09i;
reg [31:0] main_lrph10i_i09i_reg;
reg [31:0] main_lrph10i_344;
reg [31:0] main_lrph10i_344_reg;
reg [31:0] main_lrph10i_345;
reg [31:0] main_lrph10i_345_reg;
reg [31:0] main_lrph10i_346;
reg [31:0] main_lrph10i_346_reg;
reg [31:0] main_lrph10i_gep_int328;
reg [31:0] main_lrph10i_gep_int328_reg;
reg [31:0] main_lrph10i_gep_array329;
reg [31:0] main_lrph10i_gep_array329_reg;
reg [31:0] main_lrph10i_gep330;
reg [31:0] main_lrph10i_gep330_reg;
reg [31:0] main_lrph10i_gep_array331;
reg [31:0] main_lrph10i_gep_array331_reg;
reg [31:0] main_lrph10i_gep332;
reg [31:0] main_lrph10i_gep332_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_347;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_347_reg;
reg [31:0] main_lrph10i_348;
reg [31:0] main_lrph10i_348_reg;
reg [31:0] main_lrph10i_349;
reg [31:0] main_lrph10i_349_reg;
reg [31:0] main_lrph10i_350;
reg [31:0] main_lrph10i_350_reg;
reg [31:0] main_lrph10i_351;
reg [31:0] main_lrph10i_351_reg;
reg [31:0] main_lrph10i_gep_int333;
reg [31:0] main_lrph10i_gep_int333_reg;
reg [31:0] main_lrph10i_gep_array334;
reg [31:0] main_lrph10i_gep_array334_reg;
reg [31:0] main_lrph10i_gep335;
reg [31:0] main_lrph10i_gep335_reg;
reg [31:0] main_lrph10i_gep_array336;
reg [31:0] main_lrph10i_gep_array336_reg;
reg [31:0] main_lrph10i_gep337;
reg [31:0] main_lrph10i_gep337_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_352;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_352_reg;
reg [31:0] main_lrph10i_353;
reg [31:0] main_lrph10i_353_reg;
reg [31:0] main_lrph10i_354;
reg [31:0] main_lrph10i_354_reg;
reg [31:0] main_lrph10i_355;
reg [31:0] main_lrph10i_355_reg;
reg [31:0] main_lrph10i_356;
reg [31:0] main_lrph10i_356_reg;
reg [31:0] main_lrph10i_gep_int338;
reg [31:0] main_lrph10i_gep_int338_reg;
reg [31:0] main_lrph10i_gep_array339;
reg [31:0] main_lrph10i_gep_array339_reg;
reg [31:0] main_lrph10i_gep340;
reg [31:0] main_lrph10i_gep340_reg;
reg [31:0] main_lrph10i_gep_array341;
reg [31:0] main_lrph10i_gep_array341_reg;
reg [31:0] main_lrph10i_gep342;
reg [31:0] main_lrph10i_gep342_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_357;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_357_reg;
reg [31:0] main_lrph10i_358;
reg [31:0] main_lrph10i_358_reg;
reg [31:0] main_lrph10i_359;
reg [31:0] main_lrph10i_359_reg;
reg [31:0] main_lrph10i_360;
reg [31:0] main_lrph10i_360_reg;
reg [31:0] main_lrph10i_361;
reg [31:0] main_lrph10i_361_reg;
reg [31:0] main_lrph10i_gep_int343;
reg [31:0] main_lrph10i_gep_int343_reg;
reg [31:0] main_lrph10i_gep_array344;
reg [31:0] main_lrph10i_gep_array344_reg;
reg [31:0] main_lrph10i_gep345;
reg [31:0] main_lrph10i_gep345_reg;
reg [31:0] main_lrph10i_gep_array346;
reg [31:0] main_lrph10i_gep_array346_reg;
reg [31:0] main_lrph10i_gep347;
reg [31:0] main_lrph10i_gep347_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_362;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_362_reg;
reg [31:0] main_lrph10i_363;
reg [31:0] main_lrph10i_363_reg;
reg [31:0] main_lrph10i_364;
reg [31:0] main_lrph10i_364_reg;
reg [31:0] main_lrph10i_365;
reg [31:0] main_lrph10i_365_reg;
reg [31:0] main_lrph10i_366;
reg [31:0] main_lrph10i_366_reg;
reg [31:0] main_lrph10i_gep_int348;
reg [31:0] main_lrph10i_gep_int348_reg;
reg [31:0] main_lrph10i_gep_array349;
reg [31:0] main_lrph10i_gep_array349_reg;
reg [31:0] main_lrph10i_gep350;
reg [31:0] main_lrph10i_gep350_reg;
reg [31:0] main_lrph10i_gep_array351;
reg [31:0] main_lrph10i_gep_array351_reg;
reg [31:0] main_lrph10i_gep352;
reg [31:0] main_lrph10i_gep352_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_367;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_367_reg;
reg [31:0] main_lrph10i_368;
reg [31:0] main_lrph10i_368_reg;
reg [31:0] main_lrph10i_369;
reg [31:0] main_lrph10i_369_reg;
reg [31:0] main_lrph10i_370;
reg [31:0] main_lrph10i_370_reg;
reg [31:0] main_lrph10i_371;
reg [31:0] main_lrph10i_371_reg;
reg [31:0] main_lrph10i_gep_int353;
reg [31:0] main_lrph10i_gep_int353_reg;
reg [31:0] main_lrph10i_gep_array354;
reg [31:0] main_lrph10i_gep_array354_reg;
reg [31:0] main_lrph10i_gep355;
reg [31:0] main_lrph10i_gep355_reg;
reg [31:0] main_lrph10i_gep_array356;
reg [31:0] main_lrph10i_gep_array356_reg;
reg [31:0] main_lrph10i_gep357;
reg [31:0] main_lrph10i_gep357_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_372;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_372_reg;
reg [31:0] main_lrph10i_373;
reg [31:0] main_lrph10i_373_reg;
reg [31:0] main_lrph10i_374;
reg [31:0] main_lrph10i_374_reg;
reg [31:0] main_lrph10i_375;
reg [31:0] main_lrph10i_375_reg;
reg [31:0] main_lrph10i_376;
reg [31:0] main_lrph10i_376_reg;
reg [31:0] main_lrph10i_gep_int358;
reg [31:0] main_lrph10i_gep_int358_reg;
reg [31:0] main_lrph10i_gep_array359;
reg [31:0] main_lrph10i_gep_array359_reg;
reg [31:0] main_lrph10i_gep360;
reg [31:0] main_lrph10i_gep360_reg;
reg [31:0] main_lrph10i_gep_array361;
reg [31:0] main_lrph10i_gep_array361_reg;
reg [31:0] main_lrph10i_gep362;
reg [31:0] main_lrph10i_gep362_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_377;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_377_reg;
reg [31:0] main_lrph10i_378;
reg [31:0] main_lrph10i_378_reg;
reg [31:0] main_lrph10i_379;
reg [31:0] main_lrph10i_379_reg;
reg [31:0] main_lrph10i_380;
reg [31:0] main_lrph10i_380_reg;
reg [31:0] main_lrph10i_381;
reg [31:0] main_lrph10i_381_reg;
reg [31:0] main_lrph10i_gep_int363;
reg [31:0] main_lrph10i_gep_int363_reg;
reg [31:0] main_lrph10i_gep_array364;
reg [31:0] main_lrph10i_gep_array364_reg;
reg [31:0] main_lrph10i_gep365;
reg [31:0] main_lrph10i_gep365_reg;
reg [31:0] main_lrph10i_gep_array366;
reg [31:0] main_lrph10i_gep_array366_reg;
reg [31:0] main_lrph10i_gep367;
reg [31:0] main_lrph10i_gep367_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_382;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_382_reg;
reg [31:0] main_lrph10i_383;
reg [31:0] main_lrph10i_383_reg;
reg [31:0] main_lrph10i_384;
reg [31:0] main_lrph10i_384_reg;
reg [31:0] main_lrph10i_385;
reg [31:0] main_lrph10i_385_reg;
reg [31:0] main_lrph10i_386;
reg [31:0] main_lrph10i_386_reg;
reg [31:0] main_lrph10i_gep_int368;
reg [31:0] main_lrph10i_gep_int368_reg;
reg [31:0] main_lrph10i_gep_array369;
reg [31:0] main_lrph10i_gep_array369_reg;
reg [31:0] main_lrph10i_gep370;
reg [31:0] main_lrph10i_gep370_reg;
reg [31:0] main_lrph10i_gep_array371;
reg [31:0] main_lrph10i_gep_array371_reg;
reg [31:0] main_lrph10i_gep372;
reg [31:0] main_lrph10i_gep372_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_387;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_387_reg;
reg [31:0] main_lrph10i_388;
reg [31:0] main_lrph10i_388_reg;
reg [31:0] main_lrph10i_389;
reg [31:0] main_lrph10i_389_reg;
reg [31:0] main_lrph10i_390;
reg [31:0] main_lrph10i_390_reg;
reg [31:0] main_lrph10i_391;
reg [31:0] main_lrph10i_391_reg;
reg [31:0] main_lrph10i_gep_int373;
reg [31:0] main_lrph10i_gep_int373_reg;
reg [31:0] main_lrph10i_gep_array374;
reg [31:0] main_lrph10i_gep_array374_reg;
reg [31:0] main_lrph10i_gep375;
reg [31:0] main_lrph10i_gep375_reg;
reg [31:0] main_lrph10i_gep_array376;
reg [31:0] main_lrph10i_gep_array376_reg;
reg [31:0] main_lrph10i_gep377;
reg [31:0] main_lrph10i_gep377_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_392;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_392_reg;
reg [31:0] main_lrph10i_393;
reg [31:0] main_lrph10i_393_reg;
reg [31:0] main_lrph10i_394;
reg [31:0] main_lrph10i_394_reg;
reg [31:0] main_lrph10i_395;
reg [31:0] main_lrph10i_395_reg;
reg [31:0] main_lrph10i_396;
reg [31:0] main_lrph10i_396_reg;
reg [31:0] main_lrph10i_gep_int378;
reg [31:0] main_lrph10i_gep_int378_reg;
reg [31:0] main_lrph10i_gep_array379;
reg [31:0] main_lrph10i_gep_array379_reg;
reg [31:0] main_lrph10i_gep380;
reg [31:0] main_lrph10i_gep380_reg;
reg [31:0] main_lrph10i_gep_array381;
reg [31:0] main_lrph10i_gep_array381_reg;
reg [31:0] main_lrph10i_gep382;
reg [31:0] main_lrph10i_gep382_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_397;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_397_reg;
reg [31:0] main_lrph10i_398;
reg [31:0] main_lrph10i_398_reg;
reg [31:0] main_lrph10i_399;
reg [31:0] main_lrph10i_399_reg;
reg [31:0] main_lrph10i_400;
reg [31:0] main_lrph10i_400_reg;
reg [31:0] main_lrph10i_401;
reg [31:0] main_lrph10i_401_reg;
reg [31:0] main_lrph10i_gep_int383;
reg [31:0] main_lrph10i_gep_int383_reg;
reg [31:0] main_lrph10i_gep_array384;
reg [31:0] main_lrph10i_gep_array384_reg;
reg [31:0] main_lrph10i_gep385;
reg [31:0] main_lrph10i_gep385_reg;
reg [31:0] main_lrph10i_gep_array386;
reg [31:0] main_lrph10i_gep_array386_reg;
reg [31:0] main_lrph10i_gep387;
reg [31:0] main_lrph10i_gep387_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_402;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_402_reg;
reg [31:0] main_lrph10i_403;
reg [31:0] main_lrph10i_403_reg;
reg [31:0] main_lrph10i_404;
reg [31:0] main_lrph10i_404_reg;
reg [31:0] main_lrph10i_405;
reg [31:0] main_lrph10i_405_reg;
reg [31:0] main_lrph10i_406;
reg [31:0] main_lrph10i_406_reg;
reg [31:0] main_lrph10i_gep_int388;
reg [31:0] main_lrph10i_gep_int388_reg;
reg [31:0] main_lrph10i_gep_array389;
reg [31:0] main_lrph10i_gep_array389_reg;
reg [31:0] main_lrph10i_gep390;
reg [31:0] main_lrph10i_gep390_reg;
reg [31:0] main_lrph10i_gep_array391;
reg [31:0] main_lrph10i_gep_array391_reg;
reg [31:0] main_lrph10i_gep392;
reg [31:0] main_lrph10i_gep392_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_407;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_407_reg;
reg [31:0] main_lrph10i_408;
reg [31:0] main_lrph10i_408_reg;
reg [31:0] main_lrph10i_409;
reg [31:0] main_lrph10i_409_reg;
reg [31:0] main_lrph10i_410;
reg [31:0] main_lrph10i_410_reg;
reg [31:0] main_lrph10i_411;
reg [31:0] main_lrph10i_411_reg;
reg [31:0] main_lrph10i_gep_int393;
reg [31:0] main_lrph10i_gep_int393_reg;
reg [31:0] main_lrph10i_gep_array394;
reg [31:0] main_lrph10i_gep_array394_reg;
reg [31:0] main_lrph10i_gep395;
reg [31:0] main_lrph10i_gep395_reg;
reg [31:0] main_lrph10i_gep_array396;
reg [31:0] main_lrph10i_gep_array396_reg;
reg [31:0] main_lrph10i_gep397;
reg [31:0] main_lrph10i_gep397_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_412;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_412_reg;
reg [31:0] main_lrph10i_413;
reg [31:0] main_lrph10i_413_reg;
reg [31:0] main_lrph10i_414;
reg [31:0] main_lrph10i_414_reg;
reg [31:0] main_lrph10i_415;
reg [31:0] main_lrph10i_415_reg;
reg [31:0] main_lrph10i_416;
reg [31:0] main_lrph10i_416_reg;
reg [31:0] main_lrph10i_gep_int398;
reg [31:0] main_lrph10i_gep_int398_reg;
reg [31:0] main_lrph10i_gep_array399;
reg [31:0] main_lrph10i_gep_array399_reg;
reg [31:0] main_lrph10i_gep400;
reg [31:0] main_lrph10i_gep400_reg;
reg [31:0] main_lrph10i_gep_array401;
reg [31:0] main_lrph10i_gep_array401_reg;
reg [31:0] main_lrph10i_gep402;
reg [31:0] main_lrph10i_gep402_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_417;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_417_reg;
reg [31:0] main_lrph10i_418;
reg [31:0] main_lrph10i_418_reg;
reg [31:0] main_lrph10i_419;
reg [31:0] main_lrph10i_419_reg;
reg [31:0] main_lrph10i_420;
reg [31:0] main_lrph10i_420_reg;
reg [31:0] main_lrph10i_421;
reg [31:0] main_lrph10i_421_reg;
reg [31:0] main_lrph10i_gep_int403;
reg [31:0] main_lrph10i_gep_int403_reg;
reg [31:0] main_lrph10i_gep_array404;
reg [31:0] main_lrph10i_gep_array404_reg;
reg [31:0] main_lrph10i_gep405;
reg [31:0] main_lrph10i_gep405_reg;
reg [31:0] main_lrph10i_gep_array406;
reg [31:0] main_lrph10i_gep_array406_reg;
reg [31:0] main_lrph10i_gep407;
reg [31:0] main_lrph10i_gep407_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_422;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10i_422_reg;
reg [31:0] main_lrph10i_423;
reg [31:0] main_lrph10i_423_reg;
reg [31:0] main_lrph10i_i0i;
reg [31:0] main_lrph10i_i0i_reg;
reg  main_lrph10i_424;
reg  main_lrph10i_424_reg;
reg [31:0] main__crit_edgei_j01i2i8;
reg [31:0] main__crit_edgei_j01i2i8_reg;
reg [31:0] main__crit_edgei_gep_int408;
reg [31:0] main__crit_edgei_gep_int408_reg;
reg [31:0] main__crit_edgei_gep_array409;
reg [31:0] main__crit_edgei_gep_array409_reg;
reg [31:0] main__crit_edgei_gep410;
reg [31:0] main__crit_edgei_gep410_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_425;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_425_reg;
reg [31:0] main__crit_edgei_426;
reg [31:0] main__crit_edgei_426_reg;
reg [31:0] main__crit_edgei_427;
reg [31:0] main__crit_edgei_427_reg;
reg [31:0] main__crit_edgei_gep_int411;
reg [31:0] main__crit_edgei_gep_int411_reg;
reg [31:0] main__crit_edgei_gep_array412;
reg [31:0] main__crit_edgei_gep_array412_reg;
reg [31:0] main__crit_edgei_gep413;
reg [31:0] main__crit_edgei_gep413_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_428;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_428_reg;
reg [31:0] main__crit_edgei_429;
reg [31:0] main__crit_edgei_429_reg;
reg [31:0] main__crit_edgei_430;
reg [31:0] main__crit_edgei_430_reg;
reg [31:0] main__crit_edgei_gep_int414;
reg [31:0] main__crit_edgei_gep_int414_reg;
reg [31:0] main__crit_edgei_gep415;
reg [31:0] main__crit_edgei_gep415_reg;
reg [31:0] main__crit_edgei_gep_array416;
reg [31:0] main__crit_edgei_gep_array416_reg;
reg [31:0] main__crit_edgei_gep417;
reg [31:0] main__crit_edgei_gep417_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_431;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_431_reg;
reg [31:0] main__crit_edgei_432;
reg [31:0] main__crit_edgei_432_reg;
reg [31:0] main__crit_edgei_433;
reg [31:0] main__crit_edgei_433_reg;
reg [31:0] main__crit_edgei_gep_int418;
reg [31:0] main__crit_edgei_gep_int418_reg;
reg [31:0] main__crit_edgei_gep_array419;
reg [31:0] main__crit_edgei_gep_array419_reg;
reg [31:0] main__crit_edgei_gep420;
reg [31:0] main__crit_edgei_gep420_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_434;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_434_reg;
reg [31:0] main__crit_edgei_435;
reg [31:0] main__crit_edgei_435_reg;
reg [31:0] main__crit_edgei_436;
reg [31:0] main__crit_edgei_436_reg;
reg [31:0] main__crit_edgei_gep_int421;
reg [31:0] main__crit_edgei_gep_int421_reg;
reg [31:0] main__crit_edgei_gep422;
reg [31:0] main__crit_edgei_gep422_reg;
reg [31:0] main__crit_edgei_gep_array423;
reg [31:0] main__crit_edgei_gep_array423_reg;
reg [31:0] main__crit_edgei_gep424;
reg [31:0] main__crit_edgei_gep424_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_437;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_437_reg;
reg [31:0] main__crit_edgei_438;
reg [31:0] main__crit_edgei_438_reg;
reg [31:0] main__crit_edgei_439;
reg [31:0] main__crit_edgei_439_reg;
reg [31:0] main__crit_edgei_gep_int425;
reg [31:0] main__crit_edgei_gep_int425_reg;
reg [31:0] main__crit_edgei_gep_array426;
reg [31:0] main__crit_edgei_gep_array426_reg;
reg [31:0] main__crit_edgei_gep427;
reg [31:0] main__crit_edgei_gep427_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_440;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_440_reg;
reg [31:0] main__crit_edgei_441;
reg [31:0] main__crit_edgei_441_reg;
reg [31:0] main__crit_edgei_442;
reg [31:0] main__crit_edgei_442_reg;
reg [31:0] main__crit_edgei_gep_int428;
reg [31:0] main__crit_edgei_gep_int428_reg;
reg [31:0] main__crit_edgei_gep429;
reg [31:0] main__crit_edgei_gep429_reg;
reg [31:0] main__crit_edgei_gep_array430;
reg [31:0] main__crit_edgei_gep_array430_reg;
reg [31:0] main__crit_edgei_gep431;
reg [31:0] main__crit_edgei_gep431_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_443;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_443_reg;
reg [31:0] main__crit_edgei_444;
reg [31:0] main__crit_edgei_444_reg;
reg [31:0] main__crit_edgei_445;
reg [31:0] main__crit_edgei_445_reg;
reg [31:0] main__crit_edgei_gep_int432;
reg [31:0] main__crit_edgei_gep_int432_reg;
reg [31:0] main__crit_edgei_gep_array433;
reg [31:0] main__crit_edgei_gep_array433_reg;
reg [31:0] main__crit_edgei_gep434;
reg [31:0] main__crit_edgei_gep434_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_446;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_446_reg;
reg [31:0] main__crit_edgei_447;
reg [31:0] main__crit_edgei_447_reg;
reg [31:0] main__crit_edgei_448;
reg [31:0] main__crit_edgei_448_reg;
reg [31:0] main__crit_edgei_449;
reg [31:0] main__crit_edgei_449_reg;
reg  main__crit_edgei_exitcond25;
reg  main__crit_edgei_exitcond25_reg;
reg [31:0] main_lrphi14_i17i13;
reg [31:0] main_lrphi14_i17i13_reg;
reg [31:0] main_lrphi14_gep_int435;
reg [31:0] main_lrphi14_gep_int435_reg;
reg [31:0] main_lrphi14_gep_array436;
reg [31:0] main_lrphi14_gep_array436_reg;
reg [31:0] main_lrphi14_gep437;
reg [31:0] main_lrphi14_gep437_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi14_451;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi14_451_reg;
reg [31:0] main_lrphi14_452;
reg [31:0] main_lrphi14_452_reg;
reg  main_lrphi14_453;
reg  main_lrphi14_453_reg;
reg [31:0] main_454_pre12i;
reg [31:0] main_454_pre12i_reg;
reg [31:0] main_456_457;
reg [31:0] main_456_457_reg;
reg [31:0] main_456_459;
reg [31:0] main_456_459_reg;
reg  main_456_exitcond;
reg  main_456_exitcond_reg;
reg [31:0] main_preheaderloopexiti11_460;
reg [31:0] main_preheaderloopexiti11_460_reg;
reg [31:0] main_preheaderloopexiti11_i26i15;
reg [31:0] main_preheaderloopexiti11_i26i15_reg;
reg [31:0] main_preheaderloopexiti11_gep_int438;
reg [31:0] main_preheaderloopexiti11_gep_int438_reg;
reg [31:0] main_preheaderloopexiti11_gep_array439;
reg [31:0] main_preheaderloopexiti11_gep_array439_reg;
reg [31:0] main_preheaderloopexiti11_gep440;
reg [31:0] main_preheaderloopexiti11_gep440_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderloopexiti11_461;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderloopexiti11_461_reg;
reg [31:0] main_preheaderloopexiti11_462;
reg [31:0] main_preheaderloopexiti11_462_reg;
reg [31:0] main_preheaderloopexiti11_gep_int441;
reg [31:0] main_preheaderloopexiti11_gep_int441_reg;
reg [31:0] main_preheaderloopexiti11_gep_array442;
reg [31:0] main_preheaderloopexiti11_gep_array442_reg;
reg [31:0] main_preheaderloopexiti11_gep443;
reg [31:0] main_preheaderloopexiti11_gep443_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderloopexiti11_463;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderloopexiti11_463_reg;
reg [31:0] main_preheaderloopexiti11_464;
reg [31:0] main_preheaderloopexiti11_464_reg;
reg  main_preheaderloopexiti11_465;
reg  main_preheaderloopexiti11_465_reg;
reg [31:0] main_preheaderloopexiti11_466;
reg [31:0] main_preheaderloopexiti11_466_reg;
reg [31:0] main_preheaderloopexiti11_467;
reg [31:0] main_preheaderloopexiti11_467_reg;
reg [31:0] main_preheaderloopexiti11_468;
reg [31:0] main_preheaderloopexiti11_468_reg;
reg  main_preheaderloopexiti11_exitcondi16;
reg  main_preheaderloopexiti11_exitcondi16_reg;
reg [31:0] main_decryptexit_lcssa;
reg [31:0] main_decryptexit_lcssa_reg;
reg  main_decryptexit_470;
reg  main_decryptexit_470_reg;
reg [3:0] encryptout_enc_statemt_address_a;
reg  encryptout_enc_statemt_write_enable_a;
wire [31:0] encryptout_enc_statemt_in_a;
wire [31:0] encryptout_enc_statemt_out_a;
wire [3:0] encryptout_enc_statemt_address_b;
wire  encryptout_enc_statemt_write_enable_b;
wire [31:0] encryptout_enc_statemt_in_b;
wire [31:0] encryptout_enc_statemt_out_b;
reg [3:0] decryptout_dec_statemt_address_a;
reg  decryptout_dec_statemt_write_enable_a;
wire [31:0] decryptout_dec_statemt_in_a;
wire [31:0] decryptout_dec_statemt_out_a;
wire [3:0] decryptout_dec_statemt_address_b;
wire  decryptout_dec_statemt_write_enable_b;
wire [31:0] decryptout_dec_statemt_in_b;
wire [31:0] decryptout_dec_statemt_out_b;
wire [4:0] Rcon0_address_a;
wire  Rcon0_write_enable_a;
wire [31:0] Rcon0_in_a;
wire [31:0] Rcon0_out_a;
wire [4:0] Rcon0_address_b;
wire  Rcon0_write_enable_b;
wire [31:0] Rcon0_in_b;
wire [31:0] Rcon0_out_b;
wire [7:0] rom_32_address_a;
wire  rom_32_write_enable_a;
wire [31:0] rom_32_in_a;
wire [31:0] rom_32_out_a;
wire [7:0] rom_32_address_b;
wire  rom_32_write_enable_b;
wire [31:0] rom_32_in_b;
wire [31:0] rom_32_out_b;
reg [7:0] invSbox_address_a;
reg  invSbox_write_enable_a;
wire [31:0] invSbox_in_a;
wire [31:0] invSbox_out_a;
reg [7:0] invSbox_address_b;
reg  invSbox_write_enable_b;
wire [31:0] invSbox_in_b;
wire [31:0] invSbox_out_b;
wire [8:0] ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire [8:0] ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire [4:0] MixColumn_AddRoundKey_0_ret_address_a;
wire  MixColumn_AddRoundKey_0_ret_write_enable_a;
wire [31:0] MixColumn_AddRoundKey_0_ret_in_a;
wire [31:0] MixColumn_AddRoundKey_0_ret_out_a;
wire [4:0] MixColumn_AddRoundKey_0_ret_address_b;
wire  MixColumn_AddRoundKey_0_ret_write_enable_b;
wire [31:0] MixColumn_AddRoundKey_0_ret_in_b;
wire [31:0] MixColumn_AddRoundKey_0_ret_out_b;
wire [4:0] AddRoundKey_InversMixColumn_0_ret_address_a;
wire  AddRoundKey_InversMixColumn_0_ret_write_enable_a;
wire [31:0] AddRoundKey_InversMixColumn_0_ret_in_a;
wire [31:0] AddRoundKey_InversMixColumn_0_ret_out_a;
wire [4:0] AddRoundKey_InversMixColumn_0_ret_address_b;
wire  AddRoundKey_InversMixColumn_0_ret_write_enable_b;
wire [31:0] AddRoundKey_InversMixColumn_0_ret_in_b;
wire [31:0] AddRoundKey_InversMixColumn_0_ret_out_b;
reg  KeySchedule_start;
reg [31:0] KeySchedule_arg_type;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_arg_key;
reg  KeySchedule_finish_final;
reg  KeySchedule_finish_reg;
wire  KeySchedule_finish;
wire [31:0] KeySchedule_return_val;
reg [31:0] KeySchedule_return_val_reg;
reg [31:0] main_0_1;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;
reg  MixColumn_AddRoundKey_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] MixColumn_AddRoundKey_arg_statemt;
reg [31:0] MixColumn_AddRoundKey_arg_nb;
reg [31:0] MixColumn_AddRoundKey_arg_n;
reg  MixColumn_AddRoundKey_finish_final;
reg  MixColumn_AddRoundKey_finish_reg;
wire  MixColumn_AddRoundKey_finish;
wire [31:0] MixColumn_AddRoundKey_return_val;
reg [31:0] MixColumn_AddRoundKey_return_val_reg;
reg [31:0] main_AddRoundKeyexiti_108;
reg [31:0] main_encryptexit_235;
reg  AddRoundKey_InversMixColumn_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] AddRoundKey_InversMixColumn_arg_statemt;
reg [31:0] AddRoundKey_InversMixColumn_arg_nb;
reg [31:0] AddRoundKey_InversMixColumn_arg_n;
reg  AddRoundKey_InversMixColumn_finish_final;
reg  AddRoundKey_InversMixColumn_finish_reg;
wire  AddRoundKey_InversMixColumn_finish;
wire [31:0] AddRoundKey_InversMixColumn_return_val;
reg [31:0] AddRoundKey_InversMixColumn_return_val_reg;
reg [31:0] main_lrph10i_343;
reg [31:0] main_signed_add_32_0_op0;
reg [31:0] main_signed_add_32_0_op1;
reg [31:0] main_signed_add_32_0;
reg [31:0] main_signed_add_32_1_op0;
reg [31:0] main_signed_add_32_1_op1;
reg [31:0] main_signed_add_32_1;
reg [31:0] main_signed_add_32_2_op0;
reg [31:0] main_signed_add_32_2_op1;
reg [31:0] main_signed_add_32_2;
reg [31:0] main_signed_add_32_3_op0;
reg [31:0] main_signed_add_32_3_op1;
reg [31:0] main_signed_add_32_3;
reg [31:0] main_signed_add_32_7_op0;
reg [31:0] main_signed_add_32_7_op1;
reg [31:0] main_signed_add_32_7;
reg [31:0] main_signed_add_32_4_op0;
reg [31:0] main_signed_add_32_4_op1;
reg [31:0] main_signed_add_32_4;
reg [31:0] main_signed_add_32_5_op0;
reg [31:0] main_signed_add_32_5_op1;
reg [31:0] main_signed_add_32_5;
reg [31:0] main_signed_add_32_6_op0;
reg [31:0] main_signed_add_32_6_op1;
reg [31:0] main_signed_add_32_6;


KeySchedule KeySchedule (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (KeySchedule_start),
	.finish (KeySchedule_finish),
	.return_val (KeySchedule_return_val),
	.arg_type (KeySchedule_arg_type),
	.arg_key (KeySchedule_arg_key)
);

defparam
	KeySchedule.tag_offset = tag_offset;


MixColumn_AddRoundKey MixColumn_AddRoundKey (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (MixColumn_AddRoundKey_start),
	.finish (MixColumn_AddRoundKey_finish),
	.return_val (MixColumn_AddRoundKey_return_val),
	.arg_statemt (MixColumn_AddRoundKey_arg_statemt),
	.arg_nb (MixColumn_AddRoundKey_arg_nb),
	.arg_n (MixColumn_AddRoundKey_arg_n)
);

defparam
	MixColumn_AddRoundKey.tag_offset = tag_offset;


AddRoundKey_InversMixColumn AddRoundKey_InversMixColumn (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (AddRoundKey_InversMixColumn_start),
	.finish (AddRoundKey_InversMixColumn_finish),
	.return_val (AddRoundKey_InversMixColumn_return_val),
	.arg_statemt (AddRoundKey_InversMixColumn_arg_statemt),
	.arg_nb (AddRoundKey_InversMixColumn_arg_nb),
	.arg_n (AddRoundKey_InversMixColumn_arg_n)
);

defparam
	AddRoundKey_InversMixColumn.tag_offset = tag_offset;

// Local Rams


// @encrypt.out_enc_statemt = internal unnamed_addr constant [16 x i32] [i32 57, i32 37, i32 132, i32 29, i32 2, i32 220, i32 9, i32 251, i32 220, i32 17, i32 133, i32 151, i32 25, i32 106, i32 11, i32 5...
rom_dual_port encryptout_enc_statemt (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( encryptout_enc_statemt_address_a ),
	.address_b( encryptout_enc_statemt_address_b ),
	.q_a( encryptout_enc_statemt_out_a ),
	.q_b( encryptout_enc_statemt_out_b)
);
defparam encryptout_enc_statemt.width_a = 32;
defparam encryptout_enc_statemt.width_b = 32;
defparam encryptout_enc_statemt.widthad_a = 4;
defparam encryptout_enc_statemt.widthad_b = 4;
defparam encryptout_enc_statemt.numwords_a = 16;
defparam encryptout_enc_statemt.numwords_b = 16;
defparam encryptout_enc_statemt.latency = 1;
defparam encryptout_enc_statemt.init_file = "encryptout_enc_statemt.mif";


// @decrypt.out_dec_statemt = internal unnamed_addr constant [16 x i32] [i32 50, i32 67, i32 246, i32 168, i32 136, i32 90, i32 48, i32 141, i32 49, i32 49, i32 152, i32 162, i32 224, i32 55, i32 7, i32 ...
rom_dual_port decryptout_dec_statemt (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( decryptout_dec_statemt_address_a ),
	.address_b( decryptout_dec_statemt_address_b ),
	.q_a( decryptout_dec_statemt_out_a ),
	.q_b( decryptout_dec_statemt_out_b)
);
defparam decryptout_dec_statemt.width_a = 32;
defparam decryptout_dec_statemt.width_b = 32;
defparam decryptout_dec_statemt.widthad_a = 4;
defparam decryptout_dec_statemt.widthad_b = 4;
defparam decryptout_dec_statemt.numwords_a = 16;
defparam decryptout_dec_statemt.numwords_b = 16;
defparam decryptout_dec_statemt.latency = 1;
defparam decryptout_dec_statemt.init_file = "decryptout_dec_statemt.mif";


// @invSbox = internal unnamed_addr constant [16 x [16 x i32]] [[16 x i32] [i32 82, i32 9, i32 106, i32 213, i32 48, i32 54, i32 165, i32 56, i32 191, i32 64, i32 163, i32 158, i32 129, i32 243, i32 215,...
rom_dual_port invSbox (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( invSbox_address_a ),
	.address_b( invSbox_address_b ),
	.q_a( invSbox_out_a ),
	.q_b( invSbox_out_b)
);
defparam invSbox.width_a = 32;
defparam invSbox.width_b = 32;
defparam invSbox.widthad_a = 8;
defparam invSbox.widthad_b = 8;
defparam invSbox.numwords_a = 256;
defparam invSbox.numwords_b = 256;
defparam invSbox.latency = 1;
defparam invSbox.init_file = "invSbox.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %216 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([20 x i8]* @.str, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_140)) begin
		$write("encrypted message 	");
	end
	/* main: %220*/
	/*   %221 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str1, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__220_145)) begin
		$write("0");
	end
	/* main: %222*/
	/*   %224 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str2, i32 0, i32 0), i32 %223) #2*/
	if ((cur_state == LEGUP_F_main_BB__222_148)) begin
		$write("%0x", $signed(main_222_223_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_222_223_reg) === 1'bX) finish <= 0;
	end
	/* main: %AddRoundKey.exit3.i9*/
	/*   %450 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([19 x i8]* @.str3, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit3i9_250)) begin
		$write("\ndecrypto message	");
	end
	/* main: %454*/
	/*   %455 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str1, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__454_255)) begin
		$write("0");
	end
	/* main: %456*/
	/*   %458 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str2, i32 0, i32 0), i32 %457) #2*/
	if ((cur_state == LEGUP_F_main_BB__456_258)) begin
		$write("%0x", $signed(main_456_457_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_456_457_reg) === 1'bX) finish <= 0;
	end
	/* main: %decrypt.exit*/
	/*   %469 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str4, i32 0, i32 0), i32 %.lcssa) #2*/
	if ((cur_state == LEGUP_F_main_BB_decryptexit_263)) begin
		$write("\nResult: %d\n", $signed(main_decryptexit_lcssa_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_decryptexit_lcssa_reg) === 1'bX) finish <= 0;
	end
	/* main: %471*/
	/*   %472 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str5, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__471_264)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %473*/
	/*   %474 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str6, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__473_265)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB_AddRoundKeyexit3i9_250:
		next_state = LEGUP_F_main_BB_lrphi14_251;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_127;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_127:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_128;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_128:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_129;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_129:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_130;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_130:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_131;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_131:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_132;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_132:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_133;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_133:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_134;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_134:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_135;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_135:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_136;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_136:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_137;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_137:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_138;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_138:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139:
	if ((main_AddRoundKeyexit_crit_edgei_exitcond28_reg == 1'd1))
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125;
	else if ((main_AddRoundKeyexit_crit_edgei_exitcond28_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrphipreheader_140;
LEGUP_F_main_BB_AddRoundKeyexiti_100:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_101;
LEGUP_F_main_BB_AddRoundKeyexiti_101:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_102;
LEGUP_F_main_BB_AddRoundKeyexiti_102:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_103;
LEGUP_F_main_BB_AddRoundKeyexiti_103:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_104;
LEGUP_F_main_BB_AddRoundKeyexiti_104:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_105;
LEGUP_F_main_BB_AddRoundKeyexiti_105:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_106;
LEGUP_F_main_BB_AddRoundKeyexiti_106:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_107;
LEGUP_F_main_BB_AddRoundKeyexiti_107:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_108;
LEGUP_F_main_BB_AddRoundKeyexiti_108:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_109;
LEGUP_F_main_BB_AddRoundKeyexiti_109:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_110;
LEGUP_F_main_BB_AddRoundKeyexiti_110:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_111;
LEGUP_F_main_BB_AddRoundKeyexiti_111:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_112;
LEGUP_F_main_BB_AddRoundKeyexiti_112:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_113;
LEGUP_F_main_BB_AddRoundKeyexiti_113:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_114;
LEGUP_F_main_BB_AddRoundKeyexiti_114:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_115;
LEGUP_F_main_BB_AddRoundKeyexiti_115:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_116;
LEGUP_F_main_BB_AddRoundKeyexiti_116:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_117;
LEGUP_F_main_BB_AddRoundKeyexiti_117:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_118;
LEGUP_F_main_BB_AddRoundKeyexiti_118:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_119;
LEGUP_F_main_BB_AddRoundKeyexiti_119:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_120;
LEGUP_F_main_BB_AddRoundKeyexiti_120:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_121;
LEGUP_F_main_BB_AddRoundKeyexiti_121:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_122;
LEGUP_F_main_BB_AddRoundKeyexiti_122:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_123;
LEGUP_F_main_BB_AddRoundKeyexiti_123:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_124;
LEGUP_F_main_BB_AddRoundKeyexiti_124:
	if ((main_AddRoundKeyexiti_exitcond29_reg == 1'd1))
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_79;
	else if ((main_AddRoundKeyexiti_exitcond29_reg == 1'd0))
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125;
LEGUP_F_main_BB_AddRoundKeyexiti_79:
		next_state = LEGUP_function_call_80;
LEGUP_F_main_BB_AddRoundKeyexiti_81:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_82;
LEGUP_F_main_BB_AddRoundKeyexiti_82:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_83;
LEGUP_F_main_BB_AddRoundKeyexiti_83:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_84;
LEGUP_F_main_BB_AddRoundKeyexiti_84:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_85;
LEGUP_F_main_BB_AddRoundKeyexiti_85:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_86;
LEGUP_F_main_BB_AddRoundKeyexiti_86:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_87;
LEGUP_F_main_BB_AddRoundKeyexiti_87:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_88;
LEGUP_F_main_BB_AddRoundKeyexiti_88:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_89;
LEGUP_F_main_BB_AddRoundKeyexiti_89:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_90;
LEGUP_F_main_BB_AddRoundKeyexiti_90:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_91;
LEGUP_F_main_BB_AddRoundKeyexiti_91:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_92;
LEGUP_F_main_BB_AddRoundKeyexiti_92:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_93;
LEGUP_F_main_BB_AddRoundKeyexiti_93:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_94;
LEGUP_F_main_BB_AddRoundKeyexiti_94:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_95;
LEGUP_F_main_BB_AddRoundKeyexiti_95:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_96;
LEGUP_F_main_BB_AddRoundKeyexiti_96:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_97;
LEGUP_F_main_BB_AddRoundKeyexiti_97:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_98;
LEGUP_F_main_BB_AddRoundKeyexiti_98:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_99;
LEGUP_F_main_BB_AddRoundKeyexiti_99:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_100;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_34:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_35;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_35:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_36;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_36:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_37;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_37:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_38;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_38:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_39;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_39:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_40;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_40:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_41;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_41:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_42;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_42:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_43;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_43:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_44;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_44:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_45;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_45:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_46;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_46:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_47;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_47:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_48;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_48:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_49;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_49:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_50;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_50:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_51;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_51:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_52;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_52:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_53;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_53:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_54;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_54:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_55;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_55:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_56;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_56:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_57;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_57:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_58;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_58:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_59;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_59:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_60;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_60:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_61;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_61:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_62;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_62:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_63;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_63:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_64;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_64:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_65;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_65:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_66;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_66:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_67;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_67:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_68;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_68:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_69;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_69:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_70;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_70:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_71;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_71:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_72;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_72:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_73;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_73:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_74;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_74:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_75;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_75:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_76;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_76:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_77;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_77:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_78;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_78:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_79;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__0_2;
LEGUP_F_main_BB__0_10:
		next_state = LEGUP_F_main_BB__0_11;
LEGUP_F_main_BB__0_11:
		next_state = LEGUP_F_main_BB__0_12;
LEGUP_F_main_BB__0_12:
		next_state = LEGUP_F_main_BB__0_13;
LEGUP_F_main_BB__0_13:
		next_state = LEGUP_F_main_BB__0_14;
LEGUP_F_main_BB__0_14:
		next_state = LEGUP_F_main_BB__0_15;
LEGUP_F_main_BB__0_15:
		next_state = LEGUP_F_main_BB__0_16;
LEGUP_F_main_BB__0_16:
		next_state = LEGUP_F_main_BB__0_17;
LEGUP_F_main_BB__0_17:
		next_state = LEGUP_function_call_18;
LEGUP_F_main_BB__0_19:
		next_state = LEGUP_F_main_BB__2_20;
LEGUP_F_main_BB__0_2:
		next_state = LEGUP_F_main_BB__0_3;
LEGUP_F_main_BB__0_3:
		next_state = LEGUP_F_main_BB__0_4;
LEGUP_F_main_BB__0_4:
		next_state = LEGUP_F_main_BB__0_5;
LEGUP_F_main_BB__0_5:
		next_state = LEGUP_F_main_BB__0_6;
LEGUP_F_main_BB__0_6:
		next_state = LEGUP_F_main_BB__0_7;
LEGUP_F_main_BB__0_7:
		next_state = LEGUP_F_main_BB__0_8;
LEGUP_F_main_BB__0_8:
		next_state = LEGUP_F_main_BB__0_9;
LEGUP_F_main_BB__0_9:
		next_state = LEGUP_F_main_BB__0_10;
LEGUP_F_main_BB__220_145:
		next_state = LEGUP_F_main_BB__220_146;
LEGUP_F_main_BB__220_146:
		next_state = LEGUP_F_main_BB__220_147;
LEGUP_F_main_BB__220_147:
		next_state = LEGUP_F_main_BB__222_148;
LEGUP_F_main_BB__222_148:
	if ((main_222_exitcond27 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphi_141;
	else if ((main_222_exitcond27 == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderi_149;
LEGUP_F_main_BB__236_156:
		next_state = LEGUP_F_main_BB__236_157;
LEGUP_F_main_BB__236_157:
		next_state = LEGUP_F_main_BB__236_158;
LEGUP_F_main_BB__236_158:
		next_state = LEGUP_F_main_BB__236_159;
LEGUP_F_main_BB__236_159:
		next_state = LEGUP_F_main_BB__236_160;
LEGUP_F_main_BB__236_160:
		next_state = LEGUP_F_main_BB__236_161;
LEGUP_F_main_BB__236_161:
		next_state = LEGUP_F_main_BB__236_162;
LEGUP_F_main_BB__236_162:
		next_state = LEGUP_F_main_BB__236_163;
LEGUP_F_main_BB__236_163:
		next_state = LEGUP_F_main_BB__236_164;
LEGUP_F_main_BB__236_164:
		next_state = LEGUP_F_main_BB__236_165;
LEGUP_F_main_BB__236_165:
		next_state = LEGUP_F_main_BB__236_166;
LEGUP_F_main_BB__236_166:
		next_state = LEGUP_F_main_BB__236_167;
LEGUP_F_main_BB__236_167:
		next_state = LEGUP_F_main_BB__236_168;
LEGUP_F_main_BB__236_168:
		next_state = LEGUP_F_main_BB__236_169;
LEGUP_F_main_BB__236_169:
		next_state = LEGUP_F_main_BB__236_170;
LEGUP_F_main_BB__236_170:
	if ((main_236_exitcond26_reg == 1'd1))
		next_state = LEGUP_F_main_BB__236_156;
	else if ((main_236_exitcond26_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrph10ipreheader_171;
LEGUP_F_main_BB__2_20:
		next_state = LEGUP_F_main_BB__2_21;
LEGUP_F_main_BB__2_21:
		next_state = LEGUP_F_main_BB__2_22;
LEGUP_F_main_BB__2_22:
		next_state = LEGUP_F_main_BB__2_23;
LEGUP_F_main_BB__2_23:
		next_state = LEGUP_F_main_BB__2_24;
LEGUP_F_main_BB__2_24:
		next_state = LEGUP_F_main_BB__2_25;
LEGUP_F_main_BB__2_25:
		next_state = LEGUP_F_main_BB__2_26;
LEGUP_F_main_BB__2_26:
		next_state = LEGUP_F_main_BB__2_27;
LEGUP_F_main_BB__2_27:
		next_state = LEGUP_F_main_BB__2_28;
LEGUP_F_main_BB__2_28:
		next_state = LEGUP_F_main_BB__2_29;
LEGUP_F_main_BB__2_29:
		next_state = LEGUP_F_main_BB__2_30;
LEGUP_F_main_BB__2_30:
		next_state = LEGUP_F_main_BB__2_31;
LEGUP_F_main_BB__2_31:
		next_state = LEGUP_F_main_BB__2_32;
LEGUP_F_main_BB__2_32:
		next_state = LEGUP_F_main_BB__2_33;
LEGUP_F_main_BB__2_33:
	if ((main_2_exitcond30_reg == 1'd1))
		next_state = LEGUP_F_main_BB__2_20;
	else if ((main_2_exitcond30_reg == 1'd0))
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_34;
LEGUP_F_main_BB__454_255:
		next_state = LEGUP_F_main_BB__454_256;
LEGUP_F_main_BB__454_256:
		next_state = LEGUP_F_main_BB__454_257;
LEGUP_F_main_BB__454_257:
		next_state = LEGUP_F_main_BB__456_258;
LEGUP_F_main_BB__456_258:
	if ((main_456_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB_lrphi14_251;
	else if ((main_456_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderloopexiti11_259;
LEGUP_F_main_BB__471_264:
		next_state = LEGUP_F_main_BB__475_266;
LEGUP_F_main_BB__473_265:
		next_state = LEGUP_F_main_BB__475_266;
LEGUP_F_main_BB__475_266:
		next_state = LEGUP_0;
LEGUP_F_main_BB__crit_edgei_236:
		next_state = LEGUP_F_main_BB__crit_edgei_237;
LEGUP_F_main_BB__crit_edgei_237:
		next_state = LEGUP_F_main_BB__crit_edgei_238;
LEGUP_F_main_BB__crit_edgei_238:
		next_state = LEGUP_F_main_BB__crit_edgei_239;
LEGUP_F_main_BB__crit_edgei_239:
		next_state = LEGUP_F_main_BB__crit_edgei_240;
LEGUP_F_main_BB__crit_edgei_240:
		next_state = LEGUP_F_main_BB__crit_edgei_241;
LEGUP_F_main_BB__crit_edgei_241:
		next_state = LEGUP_F_main_BB__crit_edgei_242;
LEGUP_F_main_BB__crit_edgei_242:
		next_state = LEGUP_F_main_BB__crit_edgei_243;
LEGUP_F_main_BB__crit_edgei_243:
		next_state = LEGUP_F_main_BB__crit_edgei_244;
LEGUP_F_main_BB__crit_edgei_244:
		next_state = LEGUP_F_main_BB__crit_edgei_245;
LEGUP_F_main_BB__crit_edgei_245:
		next_state = LEGUP_F_main_BB__crit_edgei_246;
LEGUP_F_main_BB__crit_edgei_246:
		next_state = LEGUP_F_main_BB__crit_edgei_247;
LEGUP_F_main_BB__crit_edgei_247:
		next_state = LEGUP_F_main_BB__crit_edgei_248;
LEGUP_F_main_BB__crit_edgei_248:
		next_state = LEGUP_F_main_BB__crit_edgei_249;
LEGUP_F_main_BB__crit_edgei_249:
	if ((main__crit_edgei_exitcond25_reg == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edgei_236;
	else if ((main__crit_edgei_exitcond25_reg == 1'd0))
		next_state = LEGUP_F_main_BB_AddRoundKeyexit3i9_250;
LEGUP_F_main_BB_decryptexit_263:
	if ((main_decryptexit_470 == 1'd1))
		next_state = LEGUP_F_main_BB__471_264;
	else if ((main_decryptexit_470 == 1'd0))
		next_state = LEGUP_F_main_BB__473_265;
LEGUP_F_main_BB_encryptexit_153:
		next_state = LEGUP_function_call_154;
LEGUP_F_main_BB_encryptexit_155:
		next_state = LEGUP_F_main_BB__236_156;
LEGUP_F_main_BB_lrph10i_203:
		next_state = LEGUP_function_call_204;
LEGUP_F_main_BB_lrph10i_205:
		next_state = LEGUP_F_main_BB_lrph10i_206;
LEGUP_F_main_BB_lrph10i_206:
		next_state = LEGUP_F_main_BB_lrph10i_207;
LEGUP_F_main_BB_lrph10i_207:
		next_state = LEGUP_F_main_BB_lrph10i_208;
LEGUP_F_main_BB_lrph10i_208:
		next_state = LEGUP_F_main_BB_lrph10i_209;
LEGUP_F_main_BB_lrph10i_209:
		next_state = LEGUP_F_main_BB_lrph10i_210;
LEGUP_F_main_BB_lrph10i_210:
		next_state = LEGUP_F_main_BB_lrph10i_211;
LEGUP_F_main_BB_lrph10i_211:
		next_state = LEGUP_F_main_BB_lrph10i_212;
LEGUP_F_main_BB_lrph10i_212:
		next_state = LEGUP_F_main_BB_lrph10i_213;
LEGUP_F_main_BB_lrph10i_213:
		next_state = LEGUP_F_main_BB_lrph10i_214;
LEGUP_F_main_BB_lrph10i_214:
		next_state = LEGUP_F_main_BB_lrph10i_215;
LEGUP_F_main_BB_lrph10i_215:
		next_state = LEGUP_F_main_BB_lrph10i_216;
LEGUP_F_main_BB_lrph10i_216:
		next_state = LEGUP_F_main_BB_lrph10i_217;
LEGUP_F_main_BB_lrph10i_217:
		next_state = LEGUP_F_main_BB_lrph10i_218;
LEGUP_F_main_BB_lrph10i_218:
		next_state = LEGUP_F_main_BB_lrph10i_219;
LEGUP_F_main_BB_lrph10i_219:
		next_state = LEGUP_F_main_BB_lrph10i_220;
LEGUP_F_main_BB_lrph10i_220:
		next_state = LEGUP_F_main_BB_lrph10i_221;
LEGUP_F_main_BB_lrph10i_221:
		next_state = LEGUP_F_main_BB_lrph10i_222;
LEGUP_F_main_BB_lrph10i_222:
		next_state = LEGUP_F_main_BB_lrph10i_223;
LEGUP_F_main_BB_lrph10i_223:
		next_state = LEGUP_F_main_BB_lrph10i_224;
LEGUP_F_main_BB_lrph10i_224:
		next_state = LEGUP_F_main_BB_lrph10i_225;
LEGUP_F_main_BB_lrph10i_225:
		next_state = LEGUP_F_main_BB_lrph10i_226;
LEGUP_F_main_BB_lrph10i_226:
		next_state = LEGUP_F_main_BB_lrph10i_227;
LEGUP_F_main_BB_lrph10i_227:
		next_state = LEGUP_F_main_BB_lrph10i_228;
LEGUP_F_main_BB_lrph10i_228:
		next_state = LEGUP_F_main_BB_lrph10i_229;
LEGUP_F_main_BB_lrph10i_229:
		next_state = LEGUP_F_main_BB_lrph10i_230;
LEGUP_F_main_BB_lrph10i_230:
		next_state = LEGUP_F_main_BB_lrph10i_231;
LEGUP_F_main_BB_lrph10i_231:
		next_state = LEGUP_F_main_BB_lrph10i_232;
LEGUP_F_main_BB_lrph10i_232:
		next_state = LEGUP_F_main_BB_lrph10i_233;
LEGUP_F_main_BB_lrph10i_233:
		next_state = LEGUP_F_main_BB_lrph10i_234;
LEGUP_F_main_BB_lrph10i_234:
		next_state = LEGUP_F_main_BB_lrph10i_235;
LEGUP_F_main_BB_lrph10i_235:
	if ((main_lrph10i_424_reg == 1'd1))
		next_state = LEGUP_F_main_BB_lrph10i_203;
	else if ((main_lrph10i_424_reg == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgei_236;
LEGUP_F_main_BB_lrph10ipreheader_171:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_172;
LEGUP_F_main_BB_lrph10ipreheader_172:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_173;
LEGUP_F_main_BB_lrph10ipreheader_173:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_174;
LEGUP_F_main_BB_lrph10ipreheader_174:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_175;
LEGUP_F_main_BB_lrph10ipreheader_175:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_176;
LEGUP_F_main_BB_lrph10ipreheader_176:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_177;
LEGUP_F_main_BB_lrph10ipreheader_177:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_178;
LEGUP_F_main_BB_lrph10ipreheader_178:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_179;
LEGUP_F_main_BB_lrph10ipreheader_179:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_180;
LEGUP_F_main_BB_lrph10ipreheader_180:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_181;
LEGUP_F_main_BB_lrph10ipreheader_181:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_182;
LEGUP_F_main_BB_lrph10ipreheader_182:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_183;
LEGUP_F_main_BB_lrph10ipreheader_183:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_184;
LEGUP_F_main_BB_lrph10ipreheader_184:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_185;
LEGUP_F_main_BB_lrph10ipreheader_185:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_186;
LEGUP_F_main_BB_lrph10ipreheader_186:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_187;
LEGUP_F_main_BB_lrph10ipreheader_187:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_188;
LEGUP_F_main_BB_lrph10ipreheader_188:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_189;
LEGUP_F_main_BB_lrph10ipreheader_189:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_190;
LEGUP_F_main_BB_lrph10ipreheader_190:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_191;
LEGUP_F_main_BB_lrph10ipreheader_191:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_192;
LEGUP_F_main_BB_lrph10ipreheader_192:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_193;
LEGUP_F_main_BB_lrph10ipreheader_193:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_194;
LEGUP_F_main_BB_lrph10ipreheader_194:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_195;
LEGUP_F_main_BB_lrph10ipreheader_195:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_196;
LEGUP_F_main_BB_lrph10ipreheader_196:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_197;
LEGUP_F_main_BB_lrph10ipreheader_197:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_198;
LEGUP_F_main_BB_lrph10ipreheader_198:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_199;
LEGUP_F_main_BB_lrph10ipreheader_199:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_200;
LEGUP_F_main_BB_lrph10ipreheader_200:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_201;
LEGUP_F_main_BB_lrph10ipreheader_201:
		next_state = LEGUP_F_main_BB_lrph10ipreheader_202;
LEGUP_F_main_BB_lrph10ipreheader_202:
		next_state = LEGUP_F_main_BB_lrph10i_203;
LEGUP_F_main_BB_lrphi14_251:
		next_state = LEGUP_F_main_BB_lrphi14_252;
LEGUP_F_main_BB_lrphi14_252:
		next_state = LEGUP_F_main_BB_lrphi14_253;
LEGUP_F_main_BB_lrphi14_253:
		next_state = LEGUP_F_main_BB_lrphi14_254;
LEGUP_F_main_BB_lrphi14_254:
	if ((main_lrphi14_453 == 1'd1))
		next_state = LEGUP_F_main_BB__454_255;
	else if ((main_lrphi14_453 == 1'd0))
		next_state = LEGUP_F_main_BB__456_258;
LEGUP_F_main_BB_lrphi_141:
		next_state = LEGUP_F_main_BB_lrphi_142;
LEGUP_F_main_BB_lrphi_142:
		next_state = LEGUP_F_main_BB_lrphi_143;
LEGUP_F_main_BB_lrphi_143:
		next_state = LEGUP_F_main_BB_lrphi_144;
LEGUP_F_main_BB_lrphi_144:
	if ((main_lrphi_219 == 1'd1))
		next_state = LEGUP_F_main_BB__220_145;
	else if ((main_lrphi_219 == 1'd0))
		next_state = LEGUP_F_main_BB__222_148;
LEGUP_F_main_BB_lrphipreheader_140:
		next_state = LEGUP_F_main_BB_lrphi_141;
LEGUP_F_main_BB_preheaderi_149:
		next_state = LEGUP_F_main_BB_preheaderi_150;
LEGUP_F_main_BB_preheaderi_150:
		next_state = LEGUP_F_main_BB_preheaderi_151;
LEGUP_F_main_BB_preheaderi_151:
		next_state = LEGUP_F_main_BB_preheaderi_152;
LEGUP_F_main_BB_preheaderi_152:
	if ((main_preheaderi_exitcondi_reg == 1'd1))
		next_state = LEGUP_F_main_BB_encryptexit_153;
	else if ((main_preheaderi_exitcondi_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderi_149;
LEGUP_F_main_BB_preheaderloopexiti11_259:
		next_state = LEGUP_F_main_BB_preheaderloopexiti11_260;
LEGUP_F_main_BB_preheaderloopexiti11_260:
		next_state = LEGUP_F_main_BB_preheaderloopexiti11_261;
LEGUP_F_main_BB_preheaderloopexiti11_261:
		next_state = LEGUP_F_main_BB_preheaderloopexiti11_262;
LEGUP_F_main_BB_preheaderloopexiti11_262:
	if ((main_preheaderloopexiti11_exitcondi16_reg == 1'd1))
		next_state = LEGUP_F_main_BB_decryptexit_263;
	else if ((main_preheaderloopexiti11_exitcondi16_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderloopexiti11_259;
LEGUP_function_call_154:
	if ((KeySchedule_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_encryptexit_155;
LEGUP_function_call_18:
	if ((KeySchedule_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_19;
LEGUP_function_call_204:
	if ((AddRoundKey_InversMixColumn_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_lrph10i_205;
LEGUP_function_call_80:
	if ((MixColumn_AddRoundKey_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_81;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %2*/
	/*   %j.01.i.i = phi i32 [ 0, %0 ], [ %27, %2 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_2_j01ii = 32'd0;
	end
	/* main: %2*/
	/*   %j.01.i.i = phi i32 [ 0, %0 ], [ %27, %2 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__2_33) & (memory_controller_waitrequest == 1'd0)) & (main_2_exitcond30_reg == 1'd1))) */ begin
		main_2_j01ii = main_2_27_reg;
	end
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %j.01.i.i = phi i32 [ 0, %0 ], [ %27, %2 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_2_j01ii_reg <= main_2_j01ii;
		if (start == 1'b0 && ^(main_2_j01ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_j01ii_reg"); $finish; end
	end
	/* main: %2*/
	/*   %j.01.i.i = phi i32 [ 0, %0 ], [ %27, %2 ]*/
	if ((((cur_state == LEGUP_F_main_BB__2_33) & (memory_controller_waitrequest == 1'd0)) & (main_2_exitcond30_reg == 1'd1))) begin
		main_2_j01ii_reg <= main_2_j01ii;
		if (start == 1'b0 && ^(main_2_j01ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_j01ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_int = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_2_gep_int = 0; end
		main_2_gep_int = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_int = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_int_reg <= main_2_gep_int;
		if (start == 1'b0 && ^(main_2_gep_int) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_int_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_array = mul i32 %j.01.i.i, 4*/
		main_2_gep_array = (main_2_j01ii_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_array = mul i32 %j.01.i.i, 4*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_array_reg <= main_2_gep_array;
		if (start == 1'b0 && ^(main_2_gep_array) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_array_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep = add i32 %gep_int, %gep_array*/
		main_2_gep = main_signed_add_32_0;
end
always @(*) begin
/* main: %2*/
/*   %gep = add i32 %gep_int, %gep_array*/
	main_2_gep_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %2*/
	/*   %3 = inttoptr i32 %gep to i32**/
		main_2_3 = main_2_gep;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %3 = inttoptr i32 %gep to i32**/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_2_3_reg <= main_2_3;
		if (start == 1'b0 && ^(main_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %4 = load i32* %3, align 4, !tbaa !1*/
		main_2_4 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %4 = load i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		main_2_4_reg <= main_2_4;
		if (start == 1'b0 && ^(main_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %5 = shl nsw i32 %j.01.i.i, 2*/
		main_2_5 = (main_2_j01ii_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %5 = shl nsw i32 %j.01.i.i, 2*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_5_reg <= main_2_5;
		if (start == 1'b0 && ^(main_2_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_int1 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_2_gep_int1 = 0; end
		main_2_gep_int1 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_int1 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_int1_reg <= main_2_gep_int1;
		if (start == 1'b0 && ^(main_2_gep_int1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_int1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_array2 = mul i32 %5, 4*/
		main_2_gep_array2 = (main_2_5 * 32'd4);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_array2 = mul i32 %5, 4*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_array2_reg <= main_2_gep_array2;
		if (start == 1'b0 && ^(main_2_gep_array2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_array2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
		main_2_gep3 = main_signed_add_32_1;
end
always @(*) begin
/* main: %2*/
/*   %gep3 = add i32 %gep_int1, %gep_array2*/
	main_2_gep3_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %2*/
	/*   %6 = inttoptr i32 %gep3 to i32**/
		main_2_6 = main_2_gep3;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %6 = inttoptr i32 %gep3 to i32**/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_2_6_reg <= main_2_6;
		if (start == 1'b0 && ^(main_2_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %7 = load i32* %6, align 4, !tbaa !1*/
		main_2_7 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %7 = load i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		main_2_7_reg <= main_2_7;
		if (start == 1'b0 && ^(main_2_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %8 = xor i32 %7, %4*/
		main_2_8 = (main_2_7 ^ main_2_4);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %8 = xor i32 %7, %4*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		main_2_8_reg <= main_2_8;
		if (start == 1'b0 && ^(main_2_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_int4 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_2_gep_int4 = 0; end
		main_2_gep_int4 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_int4 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_int4_reg <= main_2_gep_int4;
		if (start == 1'b0 && ^(main_2_gep_int4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_int4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep5 = add i32 %gep_int4, 480*/
		main_2_gep5 = main_signed_add_32_0;
end
always @(*) begin
/* main: %2*/
/*   %gep5 = add i32 %gep_int4, 480*/
	main_2_gep5_reg = main_AddRoundKeyexit_crit_edgei_gep190_reg;
end
always @(*) begin
	/* main: %2*/
	/*   %gep_array6 = mul i32 %j.01.i.i, 4*/
		main_2_gep_array6 = (main_2_j01ii_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_array6 = mul i32 %j.01.i.i, 4*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_array6_reg <= main_2_gep_array6;
		if (start == 1'b0 && ^(main_2_gep_array6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_array6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep7 = add i32 %gep5, %gep_array6*/
		main_2_gep7 = main_signed_add_32_2;
end
always @(*) begin
/* main: %2*/
/*   %gep7 = add i32 %gep5, %gep_array6*/
	main_2_gep7_reg = main_AddRoundKeyexit_crit_edgei_gep199_reg;
end
always @(*) begin
	/* main: %2*/
	/*   %9 = inttoptr i32 %gep7 to i32**/
		main_2_9 = main_2_gep7;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %9 = inttoptr i32 %gep7 to i32**/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_2_9_reg <= main_2_9;
		if (start == 1'b0 && ^(main_2_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
		main_2_10 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_26)) begin
		main_2_10_reg <= main_2_10;
		if (start == 1'b0 && ^(main_2_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %11 = or i32 %5, 1*/
		main_2_11 = (main_2_5 | 32'd1);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %11 = or i32 %5, 1*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_11_reg <= main_2_11;
		if (start == 1'b0 && ^(main_2_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_int8 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_2_gep_int8 = 0; end
		main_2_gep_int8 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_int8 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_int8_reg <= main_2_gep_int8;
		if (start == 1'b0 && ^(main_2_gep_int8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_int8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_array9 = mul i32 %11, 4*/
		main_2_gep_array9 = (main_2_11 * 32'd4);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_array9 = mul i32 %11, 4*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_array9_reg <= main_2_gep_array9;
		if (start == 1'b0 && ^(main_2_gep_array9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_array9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep10 = add i32 %gep_int8, %gep_array9*/
		main_2_gep10 = main_signed_add_32_3;
end
always @(*) begin
/* main: %2*/
/*   %gep10 = add i32 %gep_int8, %gep_array9*/
	main_2_gep10_reg = main_AddRoundKeyexit_crit_edgei_gep206_reg;
end
always @(*) begin
	/* main: %2*/
	/*   %12 = inttoptr i32 %gep10 to i32**/
		main_2_12 = main_2_gep10;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %12 = inttoptr i32 %gep10 to i32**/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_2_12_reg <= main_2_12;
		if (start == 1'b0 && ^(main_2_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %13 = load i32* %12, align 4, !tbaa !1*/
		main_2_13 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %13 = load i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_26)) begin
		main_2_13_reg <= main_2_13;
		if (start == 1'b0 && ^(main_2_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %14 = xor i32 %13, %10*/
		main_2_14 = (main_2_13 ^ main_2_10);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %14 = xor i32 %13, %10*/
	if ((cur_state == LEGUP_F_main_BB__2_26)) begin
		main_2_14_reg <= main_2_14;
		if (start == 1'b0 && ^(main_2_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_int11 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_2_gep_int11 = 0; end
		main_2_gep_int11 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_int11 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_int11_reg <= main_2_gep_int11;
		if (start == 1'b0 && ^(main_2_gep_int11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_int11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep12 = add i32 %gep_int11, 960*/
		main_2_gep12 = main_signed_add_32_1;
end
always @(*) begin
/* main: %2*/
/*   %gep12 = add i32 %gep_int11, 960*/
	main_2_gep12_reg = main_AddRoundKeyexit_crit_edgei_gep194_reg;
end
always @(*) begin
	/* main: %2*/
	/*   %gep_array13 = mul i32 %j.01.i.i, 4*/
		main_2_gep_array13 = (main_2_j01ii_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_array13 = mul i32 %j.01.i.i, 4*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_array13_reg <= main_2_gep_array13;
		if (start == 1'b0 && ^(main_2_gep_array13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_array13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep14 = add i32 %gep12, %gep_array13*/
		main_2_gep14 = main_signed_add_32_4;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep14 = add i32 %gep12, %gep_array13*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_2_gep14_reg <= main_2_gep14;
		if (start == 1'b0 && ^(main_2_gep14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep14_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %gep424 = add i32 %gep422, %gep_array423*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		main_2_gep14_reg <= main__crit_edgei_gep424;
		if (start == 1'b0 && ^(main__crit_edgei_gep424) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %15 = inttoptr i32 %gep14 to i32**/
		main_2_15 = main_2_gep14;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %15 = inttoptr i32 %gep14 to i32**/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_2_15_reg <= main_2_15;
		if (start == 1'b0 && ^(main_2_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %16 = load i32* %15, align 4, !tbaa !1*/
		main_2_16 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %16 = load i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_29)) begin
		main_2_16_reg <= main_2_16;
		if (start == 1'b0 && ^(main_2_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %17 = or i32 %5, 2*/
		main_2_17 = (main_2_5 | 32'd2);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %17 = or i32 %5, 2*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_17_reg <= main_2_17;
		if (start == 1'b0 && ^(main_2_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_int15 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_2_gep_int15 = 0; end
		main_2_gep_int15 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_int15 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_int15_reg <= main_2_gep_int15;
		if (start == 1'b0 && ^(main_2_gep_int15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_int15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_array16 = mul i32 %17, 4*/
		main_2_gep_array16 = (main_2_17 * 32'd4);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_array16 = mul i32 %17, 4*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_array16_reg <= main_2_gep_array16;
		if (start == 1'b0 && ^(main_2_gep_array16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_array16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep17 = add i32 %gep_int15, %gep_array16*/
		main_2_gep17 = main_signed_add_32_5;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep17 = add i32 %gep_int15, %gep_array16*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_2_gep17_reg <= main_2_gep17;
		if (start == 1'b0 && ^(main_2_gep17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep17_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %gep427 = add i32 %gep_int425, %gep_array426*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		main_2_gep17_reg <= main__crit_edgei_gep427;
		if (start == 1'b0 && ^(main__crit_edgei_gep427) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %18 = inttoptr i32 %gep17 to i32**/
		main_2_18 = main_2_gep17;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %18 = inttoptr i32 %gep17 to i32**/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_2_18_reg <= main_2_18;
		if (start == 1'b0 && ^(main_2_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %19 = load i32* %18, align 4, !tbaa !1*/
		main_2_19 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %19 = load i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_29)) begin
		main_2_19_reg <= main_2_19;
		if (start == 1'b0 && ^(main_2_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %20 = xor i32 %19, %16*/
		main_2_20 = (main_2_19 ^ main_2_16);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %20 = xor i32 %19, %16*/
	if ((cur_state == LEGUP_F_main_BB__2_29)) begin
		main_2_20_reg <= main_2_20;
		if (start == 1'b0 && ^(main_2_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_int18 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_2_gep_int18 = 0; end
		main_2_gep_int18 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_int18 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_int18_reg <= main_2_gep_int18;
		if (start == 1'b0 && ^(main_2_gep_int18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_int18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep19 = add i32 %gep_int18, 1440*/
		main_2_gep19 = main_signed_add_32_2;
end
always @(*) begin
/* main: %2*/
/*   %gep19 = add i32 %gep_int18, 1440*/
	main_2_gep19_reg = main_AddRoundKeyexit_crit_edgei_gep201_reg;
end
always @(*) begin
	/* main: %2*/
	/*   %gep_array20 = mul i32 %j.01.i.i, 4*/
		main_2_gep_array20 = (main_2_j01ii_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_array20 = mul i32 %j.01.i.i, 4*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_array20_reg <= main_2_gep_array20;
		if (start == 1'b0 && ^(main_2_gep_array20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_array20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep21 = add i32 %gep19, %gep_array20*/
		main_2_gep21 = main_signed_add_32_6;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep21 = add i32 %gep19, %gep_array20*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_2_gep21_reg <= main_2_gep21;
		if (start == 1'b0 && ^(main_2_gep21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep21_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %gep431 = add i32 %gep429, %gep_array430*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		main_2_gep21_reg <= main__crit_edgei_gep431;
		if (start == 1'b0 && ^(main__crit_edgei_gep431) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %21 = inttoptr i32 %gep21 to i32**/
		main_2_21 = main_2_gep21;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %21 = inttoptr i32 %gep21 to i32**/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_2_21_reg <= main_2_21;
		if (start == 1'b0 && ^(main_2_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %22 = load i32* %21, align 4, !tbaa !1*/
		main_2_22 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %22 = load i32* %21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_32)) begin
		main_2_22_reg <= main_2_22;
		if (start == 1'b0 && ^(main_2_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %23 = or i32 %5, 3*/
		main_2_23 = (main_2_5 | 32'd3);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %23 = or i32 %5, 3*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_23_reg <= main_2_23;
		if (start == 1'b0 && ^(main_2_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_int22 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_2_gep_int22 = 0; end
		main_2_gep_int22 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_int22 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_int22_reg <= main_2_gep_int22;
		if (start == 1'b0 && ^(main_2_gep_int22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_int22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep_array23 = mul i32 %23, 4*/
		main_2_gep_array23 = (main_2_23 * 32'd4);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep_array23 = mul i32 %23, 4*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_gep_array23_reg <= main_2_gep_array23;
		if (start == 1'b0 && ^(main_2_gep_array23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep_array23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep24 = add i32 %gep_int22, %gep_array23*/
		main_2_gep24 = main_signed_add_32_7;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %gep24 = add i32 %gep_int22, %gep_array23*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_2_gep24_reg <= main_2_gep24;
		if (start == 1'b0 && ^(main_2_gep24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_gep24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %24 = inttoptr i32 %gep24 to i32**/
		main_2_24 = main_2_gep24;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %24 = inttoptr i32 %gep24 to i32**/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_2_24_reg <= main_2_24;
		if (start == 1'b0 && ^(main_2_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %25 = load i32* %24, align 4, !tbaa !1*/
		main_2_25 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %25 = load i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_32)) begin
		main_2_25_reg <= main_2_25;
		if (start == 1'b0 && ^(main_2_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %26 = xor i32 %25, %22*/
		main_2_26 = (main_2_25 ^ main_2_22);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %26 = xor i32 %25, %22*/
	if ((cur_state == LEGUP_F_main_BB__2_32)) begin
		main_2_26_reg <= main_2_26;
		if (start == 1'b0 && ^(main_2_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %27 = add nsw i32 %j.01.i.i, 1*/
		main_2_27 = main_signed_add_32_3;
end
always @(*) begin
/* main: %2*/
/*   %27 = add nsw i32 %j.01.i.i, 1*/
	main_2_27_reg = main_AddRoundKeyexit_crit_edgei_gep208_reg;
end
always @(*) begin
	/* main: %2*/
	/*   %exitcond30 = icmp ne i32 %27, 4*/
		main_2_exitcond30 = (main_2_27 != 32'd4);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %exitcond30 = icmp ne i32 %27, 4*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_exitcond30_reg <= main_2_exitcond30;
		if (start == 1'b0 && ^(main_2_exitcond30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_exitcond30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %28 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_28 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %28 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_36)) begin
		main_AddRoundKeyexitipreheader_28_reg <= main_AddRoundKeyexitipreheader_28;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %29 = and i32 %28, 15*/
		main_AddRoundKeyexitipreheader_29 = (main_AddRoundKeyexitipreheader_28 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %29 = and i32 %28, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_36)) begin
		main_AddRoundKeyexitipreheader_29_reg <= main_AddRoundKeyexitipreheader_29;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %30 = ashr i32 %28, 4*/
		main_AddRoundKeyexitipreheader_30 = ($signed(main_AddRoundKeyexitipreheader_28) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %30 = ashr i32 %28, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_36)) begin
		main_AddRoundKeyexitipreheader_30_reg <= main_AddRoundKeyexitipreheader_30;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int25 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int25 = 0; end
		main_AddRoundKeyexitipreheader_gep_int25 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int25 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		main_AddRoundKeyexitipreheader_gep_int25_reg <= main_AddRoundKeyexitipreheader_gep_int25;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array26 = mul i32 %30, 64*/
		main_AddRoundKeyexitipreheader_gep_array26 = (main_AddRoundKeyexitipreheader_30 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array26 = mul i32 %30, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_36)) begin
		main_AddRoundKeyexitipreheader_gep_array26_reg <= main_AddRoundKeyexitipreheader_gep_array26;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep27 = add i32 %gep_int25, %gep_array26*/
		main_AddRoundKeyexitipreheader_gep27 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep27 = add i32 %gep_int25, %gep_array26*/
	main_AddRoundKeyexitipreheader_gep27_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array28 = mul i32 %29, 4*/
		main_AddRoundKeyexitipreheader_gep_array28 = (main_AddRoundKeyexitipreheader_29 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array28 = mul i32 %29, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_36)) begin
		main_AddRoundKeyexitipreheader_gep_array28_reg <= main_AddRoundKeyexitipreheader_gep_array28;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep29 = add i32 %gep27, %gep_array28*/
		main_AddRoundKeyexitipreheader_gep29 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep29 = add i32 %gep27, %gep_array28*/
	main_AddRoundKeyexitipreheader_gep29_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %31 = inttoptr i32 %gep29 to i32**/
		main_AddRoundKeyexitipreheader_31 = main_AddRoundKeyexitipreheader_gep29;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %31 = inttoptr i32 %gep29 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_AddRoundKeyexitipreheader_31_reg <= main_AddRoundKeyexitipreheader_31;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %32 = load i32* %31, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_32 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %32 = load i32* %31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_AddRoundKeyexitipreheader_32_reg <= main_AddRoundKeyexitipreheader_32;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %33 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_33 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %33 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_36)) begin
		main_AddRoundKeyexitipreheader_33_reg <= main_AddRoundKeyexitipreheader_33;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %34 = and i32 %33, 15*/
		main_AddRoundKeyexitipreheader_34 = (main_AddRoundKeyexitipreheader_33 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %34 = and i32 %33, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_36)) begin
		main_AddRoundKeyexitipreheader_34_reg <= main_AddRoundKeyexitipreheader_34;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %35 = ashr i32 %33, 4*/
		main_AddRoundKeyexitipreheader_35 = ($signed(main_AddRoundKeyexitipreheader_33) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %35 = ashr i32 %33, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_36)) begin
		main_AddRoundKeyexitipreheader_35_reg <= main_AddRoundKeyexitipreheader_35;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int30 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int30 = 0; end
		main_AddRoundKeyexitipreheader_gep_int30 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int30 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		main_AddRoundKeyexitipreheader_gep_int30_reg <= main_AddRoundKeyexitipreheader_gep_int30;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array31 = mul i32 %35, 64*/
		main_AddRoundKeyexitipreheader_gep_array31 = (main_AddRoundKeyexitipreheader_35 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array31 = mul i32 %35, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_36)) begin
		main_AddRoundKeyexitipreheader_gep_array31_reg <= main_AddRoundKeyexitipreheader_gep_array31;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep32 = add i32 %gep_int30, %gep_array31*/
		main_AddRoundKeyexitipreheader_gep32 = main_signed_add_32_2;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep32 = add i32 %gep_int30, %gep_array31*/
	main_AddRoundKeyexitipreheader_gep32_reg = main_AddRoundKeyexit_crit_edgei_gep199_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array33 = mul i32 %34, 4*/
		main_AddRoundKeyexitipreheader_gep_array33 = (main_AddRoundKeyexitipreheader_34 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array33 = mul i32 %34, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_36)) begin
		main_AddRoundKeyexitipreheader_gep_array33_reg <= main_AddRoundKeyexitipreheader_gep_array33;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep34 = add i32 %gep32, %gep_array33*/
		main_AddRoundKeyexitipreheader_gep34 = main_signed_add_32_3;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep34 = add i32 %gep32, %gep_array33*/
	main_AddRoundKeyexitipreheader_gep34_reg = main_AddRoundKeyexit_crit_edgei_gep206_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %36 = inttoptr i32 %gep34 to i32**/
		main_AddRoundKeyexitipreheader_36 = main_AddRoundKeyexitipreheader_gep34;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %36 = inttoptr i32 %gep34 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_AddRoundKeyexitipreheader_36_reg <= main_AddRoundKeyexitipreheader_36;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_37 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_AddRoundKeyexitipreheader_37_reg <= main_AddRoundKeyexitipreheader_37;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %38 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_38 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %38 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_AddRoundKeyexitipreheader_38_reg <= main_AddRoundKeyexitipreheader_38;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %39 = and i32 %38, 15*/
		main_AddRoundKeyexitipreheader_39 = (main_AddRoundKeyexitipreheader_38 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %39 = and i32 %38, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_AddRoundKeyexitipreheader_39_reg <= main_AddRoundKeyexitipreheader_39;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %40 = ashr i32 %38, 4*/
		main_AddRoundKeyexitipreheader_40 = ($signed(main_AddRoundKeyexitipreheader_38) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %40 = ashr i32 %38, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_AddRoundKeyexitipreheader_40_reg <= main_AddRoundKeyexitipreheader_40;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int35 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int35 = 0; end
		main_AddRoundKeyexitipreheader_gep_int35 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int35 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		main_AddRoundKeyexitipreheader_gep_int35_reg <= main_AddRoundKeyexitipreheader_gep_int35;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array36 = mul i32 %40, 64*/
		main_AddRoundKeyexitipreheader_gep_array36 = (main_AddRoundKeyexitipreheader_40 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array36 = mul i32 %40, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_AddRoundKeyexitipreheader_gep_array36_reg <= main_AddRoundKeyexitipreheader_gep_array36;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep37 = add i32 %gep_int35, %gep_array36*/
		main_AddRoundKeyexitipreheader_gep37 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep37 = add i32 %gep_int35, %gep_array36*/
	main_AddRoundKeyexitipreheader_gep37_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array38 = mul i32 %39, 4*/
		main_AddRoundKeyexitipreheader_gep_array38 = (main_AddRoundKeyexitipreheader_39 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array38 = mul i32 %39, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_AddRoundKeyexitipreheader_gep_array38_reg <= main_AddRoundKeyexitipreheader_gep_array38;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep39 = add i32 %gep37, %gep_array38*/
		main_AddRoundKeyexitipreheader_gep39 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep39 = add i32 %gep37, %gep_array38*/
	main_AddRoundKeyexitipreheader_gep39_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %41 = inttoptr i32 %gep39 to i32**/
		main_AddRoundKeyexitipreheader_41 = main_AddRoundKeyexitipreheader_gep39;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %41 = inttoptr i32 %gep39 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_AddRoundKeyexitipreheader_41_reg <= main_AddRoundKeyexitipreheader_41;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %42 = load i32* %41, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_42 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %42 = load i32* %41, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_47)) begin
		main_AddRoundKeyexitipreheader_42_reg <= main_AddRoundKeyexitipreheader_42;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %43 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_43 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %43 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_AddRoundKeyexitipreheader_43_reg <= main_AddRoundKeyexitipreheader_43;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %44 = and i32 %43, 15*/
		main_AddRoundKeyexitipreheader_44 = (main_AddRoundKeyexitipreheader_43 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %44 = and i32 %43, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_AddRoundKeyexitipreheader_44_reg <= main_AddRoundKeyexitipreheader_44;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %45 = ashr i32 %43, 4*/
		main_AddRoundKeyexitipreheader_45 = ($signed(main_AddRoundKeyexitipreheader_43) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %45 = ashr i32 %43, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_AddRoundKeyexitipreheader_45_reg <= main_AddRoundKeyexitipreheader_45;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int40 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int40 = 0; end
		main_AddRoundKeyexitipreheader_gep_int40 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int40 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		main_AddRoundKeyexitipreheader_gep_int40_reg <= main_AddRoundKeyexitipreheader_gep_int40;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array41 = mul i32 %45, 64*/
		main_AddRoundKeyexitipreheader_gep_array41 = (main_AddRoundKeyexitipreheader_45 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array41 = mul i32 %45, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_AddRoundKeyexitipreheader_gep_array41_reg <= main_AddRoundKeyexitipreheader_gep_array41;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep42 = add i32 %gep_int40, %gep_array41*/
		main_AddRoundKeyexitipreheader_gep42 = main_signed_add_32_2;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep42 = add i32 %gep_int40, %gep_array41*/
	main_AddRoundKeyexitipreheader_gep42_reg = main_AddRoundKeyexit_crit_edgei_gep199_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array43 = mul i32 %44, 4*/
		main_AddRoundKeyexitipreheader_gep_array43 = (main_AddRoundKeyexitipreheader_44 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array43 = mul i32 %44, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_AddRoundKeyexitipreheader_gep_array43_reg <= main_AddRoundKeyexitipreheader_gep_array43;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep44 = add i32 %gep42, %gep_array43*/
		main_AddRoundKeyexitipreheader_gep44 = main_signed_add_32_3;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep44 = add i32 %gep42, %gep_array43*/
	main_AddRoundKeyexitipreheader_gep44_reg = main_AddRoundKeyexit_crit_edgei_gep206_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %46 = inttoptr i32 %gep44 to i32**/
		main_AddRoundKeyexitipreheader_46 = main_AddRoundKeyexitipreheader_gep44;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %46 = inttoptr i32 %gep44 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_AddRoundKeyexitipreheader_46_reg <= main_AddRoundKeyexitipreheader_46;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %47 = load i32* %46, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_47 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %47 = load i32* %46, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		main_AddRoundKeyexitipreheader_47_reg <= main_AddRoundKeyexitipreheader_47;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %48 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_48 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %48 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_AddRoundKeyexitipreheader_48_reg <= main_AddRoundKeyexitipreheader_48;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %49 = and i32 %48, 15*/
		main_AddRoundKeyexitipreheader_49 = (main_AddRoundKeyexitipreheader_48 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %49 = and i32 %48, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_AddRoundKeyexitipreheader_49_reg <= main_AddRoundKeyexitipreheader_49;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %50 = ashr i32 %48, 4*/
		main_AddRoundKeyexitipreheader_50 = ($signed(main_AddRoundKeyexitipreheader_48) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %50 = ashr i32 %48, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_AddRoundKeyexitipreheader_50_reg <= main_AddRoundKeyexitipreheader_50;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int45 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int45 = 0; end
		main_AddRoundKeyexitipreheader_gep_int45 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int45 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		main_AddRoundKeyexitipreheader_gep_int45_reg <= main_AddRoundKeyexitipreheader_gep_int45;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array46 = mul i32 %50, 64*/
		main_AddRoundKeyexitipreheader_gep_array46 = (main_AddRoundKeyexitipreheader_50 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array46 = mul i32 %50, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_AddRoundKeyexitipreheader_gep_array46_reg <= main_AddRoundKeyexitipreheader_gep_array46;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep47 = add i32 %gep_int45, %gep_array46*/
		main_AddRoundKeyexitipreheader_gep47 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep47 = add i32 %gep_int45, %gep_array46*/
	main_AddRoundKeyexitipreheader_gep47_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array48 = mul i32 %49, 4*/
		main_AddRoundKeyexitipreheader_gep_array48 = (main_AddRoundKeyexitipreheader_49 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array48 = mul i32 %49, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_AddRoundKeyexitipreheader_gep_array48_reg <= main_AddRoundKeyexitipreheader_gep_array48;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep49 = add i32 %gep47, %gep_array48*/
		main_AddRoundKeyexitipreheader_gep49 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep49 = add i32 %gep47, %gep_array48*/
	main_AddRoundKeyexitipreheader_gep49_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %51 = inttoptr i32 %gep49 to i32**/
		main_AddRoundKeyexitipreheader_51 = main_AddRoundKeyexitipreheader_gep49;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %51 = inttoptr i32 %gep49 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexitipreheader_51_reg <= main_AddRoundKeyexitipreheader_51;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %52 = load i32* %51, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_52 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %52 = load i32* %51, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_AddRoundKeyexitipreheader_52_reg <= main_AddRoundKeyexitipreheader_52;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %53 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_53 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %53 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_AddRoundKeyexitipreheader_53_reg <= main_AddRoundKeyexitipreheader_53;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %54 = and i32 %53, 15*/
		main_AddRoundKeyexitipreheader_54 = (main_AddRoundKeyexitipreheader_53 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %54 = and i32 %53, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_AddRoundKeyexitipreheader_54_reg <= main_AddRoundKeyexitipreheader_54;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %55 = ashr i32 %53, 4*/
		main_AddRoundKeyexitipreheader_55 = ($signed(main_AddRoundKeyexitipreheader_53) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %55 = ashr i32 %53, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_AddRoundKeyexitipreheader_55_reg <= main_AddRoundKeyexitipreheader_55;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int50 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int50 = 0; end
		main_AddRoundKeyexitipreheader_gep_int50 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int50 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		main_AddRoundKeyexitipreheader_gep_int50_reg <= main_AddRoundKeyexitipreheader_gep_int50;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array51 = mul i32 %55, 64*/
		main_AddRoundKeyexitipreheader_gep_array51 = (main_AddRoundKeyexitipreheader_55 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array51 = mul i32 %55, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_AddRoundKeyexitipreheader_gep_array51_reg <= main_AddRoundKeyexitipreheader_gep_array51;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep52 = add i32 %gep_int50, %gep_array51*/
		main_AddRoundKeyexitipreheader_gep52 = main_signed_add_32_2;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep52 = add i32 %gep_int50, %gep_array51*/
	main_AddRoundKeyexitipreheader_gep52_reg = main_AddRoundKeyexit_crit_edgei_gep199_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array53 = mul i32 %54, 4*/
		main_AddRoundKeyexitipreheader_gep_array53 = (main_AddRoundKeyexitipreheader_54 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array53 = mul i32 %54, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_AddRoundKeyexitipreheader_gep_array53_reg <= main_AddRoundKeyexitipreheader_gep_array53;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep54 = add i32 %gep52, %gep_array53*/
		main_AddRoundKeyexitipreheader_gep54 = main_signed_add_32_3;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep54 = add i32 %gep52, %gep_array53*/
	main_AddRoundKeyexitipreheader_gep54_reg = main_AddRoundKeyexit_crit_edgei_gep206_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %56 = inttoptr i32 %gep54 to i32**/
		main_AddRoundKeyexitipreheader_56 = main_AddRoundKeyexitipreheader_gep54;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %56 = inttoptr i32 %gep54 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexitipreheader_56_reg <= main_AddRoundKeyexitipreheader_56;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %57 = load i32* %56, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_57 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %57 = load i32* %56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_AddRoundKeyexitipreheader_57_reg <= main_AddRoundKeyexitipreheader_57;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %58 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_58 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %58 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexitipreheader_58_reg <= main_AddRoundKeyexitipreheader_58;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %59 = and i32 %58, 15*/
		main_AddRoundKeyexitipreheader_59 = (main_AddRoundKeyexitipreheader_58 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %59 = and i32 %58, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexitipreheader_59_reg <= main_AddRoundKeyexitipreheader_59;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %60 = ashr i32 %58, 4*/
		main_AddRoundKeyexitipreheader_60 = ($signed(main_AddRoundKeyexitipreheader_58) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %60 = ashr i32 %58, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexitipreheader_60_reg <= main_AddRoundKeyexitipreheader_60;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int55 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int55 = 0; end
		main_AddRoundKeyexitipreheader_gep_int55 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int55 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		main_AddRoundKeyexitipreheader_gep_int55_reg <= main_AddRoundKeyexitipreheader_gep_int55;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array56 = mul i32 %60, 64*/
		main_AddRoundKeyexitipreheader_gep_array56 = (main_AddRoundKeyexitipreheader_60 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array56 = mul i32 %60, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexitipreheader_gep_array56_reg <= main_AddRoundKeyexitipreheader_gep_array56;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep57 = add i32 %gep_int55, %gep_array56*/
		main_AddRoundKeyexitipreheader_gep57 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep57 = add i32 %gep_int55, %gep_array56*/
	main_AddRoundKeyexitipreheader_gep57_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array58 = mul i32 %59, 4*/
		main_AddRoundKeyexitipreheader_gep_array58 = (main_AddRoundKeyexitipreheader_59 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array58 = mul i32 %59, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexitipreheader_gep_array58_reg <= main_AddRoundKeyexitipreheader_gep_array58;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep59 = add i32 %gep57, %gep_array58*/
		main_AddRoundKeyexitipreheader_gep59 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep59 = add i32 %gep57, %gep_array58*/
	main_AddRoundKeyexitipreheader_gep59_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %61 = inttoptr i32 %gep59 to i32**/
		main_AddRoundKeyexitipreheader_61 = main_AddRoundKeyexitipreheader_gep59;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %61 = inttoptr i32 %gep59 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexitipreheader_61_reg <= main_AddRoundKeyexitipreheader_61;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_62 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_AddRoundKeyexitipreheader_62_reg <= main_AddRoundKeyexitipreheader_62;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %63 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_63 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %63 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexitipreheader_63_reg <= main_AddRoundKeyexitipreheader_63;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %64 = and i32 %63, 15*/
		main_AddRoundKeyexitipreheader_64 = (main_AddRoundKeyexitipreheader_63 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %64 = and i32 %63, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexitipreheader_64_reg <= main_AddRoundKeyexitipreheader_64;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %65 = ashr i32 %63, 4*/
		main_AddRoundKeyexitipreheader_65 = ($signed(main_AddRoundKeyexitipreheader_63) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %65 = ashr i32 %63, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexitipreheader_65_reg <= main_AddRoundKeyexitipreheader_65;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int60 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int60 = 0; end
		main_AddRoundKeyexitipreheader_gep_int60 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int60 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		main_AddRoundKeyexitipreheader_gep_int60_reg <= main_AddRoundKeyexitipreheader_gep_int60;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array61 = mul i32 %65, 64*/
		main_AddRoundKeyexitipreheader_gep_array61 = (main_AddRoundKeyexitipreheader_65 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array61 = mul i32 %65, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexitipreheader_gep_array61_reg <= main_AddRoundKeyexitipreheader_gep_array61;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep62 = add i32 %gep_int60, %gep_array61*/
		main_AddRoundKeyexitipreheader_gep62 = main_signed_add_32_2;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep62 = add i32 %gep_int60, %gep_array61*/
	main_AddRoundKeyexitipreheader_gep62_reg = main_AddRoundKeyexit_crit_edgei_gep199_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array63 = mul i32 %64, 4*/
		main_AddRoundKeyexitipreheader_gep_array63 = (main_AddRoundKeyexitipreheader_64 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array63 = mul i32 %64, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexitipreheader_gep_array63_reg <= main_AddRoundKeyexitipreheader_gep_array63;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep64 = add i32 %gep62, %gep_array63*/
		main_AddRoundKeyexitipreheader_gep64 = main_signed_add_32_3;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep64 = add i32 %gep62, %gep_array63*/
	main_AddRoundKeyexitipreheader_gep64_reg = main_AddRoundKeyexit_crit_edgei_gep206_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %66 = inttoptr i32 %gep64 to i32**/
		main_AddRoundKeyexitipreheader_66 = main_AddRoundKeyexitipreheader_gep64;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %66 = inttoptr i32 %gep64 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexitipreheader_66_reg <= main_AddRoundKeyexitipreheader_66;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %67 = load i32* %66, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_67 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %67 = load i32* %66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		main_AddRoundKeyexitipreheader_67_reg <= main_AddRoundKeyexitipreheader_67;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %68 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_68 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %68 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexitipreheader_68_reg <= main_AddRoundKeyexitipreheader_68;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %69 = and i32 %68, 15*/
		main_AddRoundKeyexitipreheader_69 = (main_AddRoundKeyexitipreheader_68 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %69 = and i32 %68, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexitipreheader_69_reg <= main_AddRoundKeyexitipreheader_69;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %70 = ashr i32 %68, 4*/
		main_AddRoundKeyexitipreheader_70 = ($signed(main_AddRoundKeyexitipreheader_68) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %70 = ashr i32 %68, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexitipreheader_70_reg <= main_AddRoundKeyexitipreheader_70;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int65 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int65 = 0; end
		main_AddRoundKeyexitipreheader_gep_int65 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int65 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		main_AddRoundKeyexitipreheader_gep_int65_reg <= main_AddRoundKeyexitipreheader_gep_int65;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array66 = mul i32 %70, 64*/
		main_AddRoundKeyexitipreheader_gep_array66 = (main_AddRoundKeyexitipreheader_70 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array66 = mul i32 %70, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexitipreheader_gep_array66_reg <= main_AddRoundKeyexitipreheader_gep_array66;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep67 = add i32 %gep_int65, %gep_array66*/
		main_AddRoundKeyexitipreheader_gep67 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep67 = add i32 %gep_int65, %gep_array66*/
	main_AddRoundKeyexitipreheader_gep67_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array68 = mul i32 %69, 4*/
		main_AddRoundKeyexitipreheader_gep_array68 = (main_AddRoundKeyexitipreheader_69 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array68 = mul i32 %69, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexitipreheader_gep_array68_reg <= main_AddRoundKeyexitipreheader_gep_array68;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep69 = add i32 %gep67, %gep_array68*/
		main_AddRoundKeyexitipreheader_gep69 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep69 = add i32 %gep67, %gep_array68*/
	main_AddRoundKeyexitipreheader_gep69_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %71 = inttoptr i32 %gep69 to i32**/
		main_AddRoundKeyexitipreheader_71 = main_AddRoundKeyexitipreheader_gep69;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %71 = inttoptr i32 %gep69 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexitipreheader_71_reg <= main_AddRoundKeyexitipreheader_71;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %72 = load i32* %71, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_72 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %72 = load i32* %71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_59)) begin
		main_AddRoundKeyexitipreheader_72_reg <= main_AddRoundKeyexitipreheader_72;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %73 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_73 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %73 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexitipreheader_73_reg <= main_AddRoundKeyexitipreheader_73;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %74 = and i32 %73, 15*/
		main_AddRoundKeyexitipreheader_74 = (main_AddRoundKeyexitipreheader_73 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %74 = and i32 %73, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexitipreheader_74_reg <= main_AddRoundKeyexitipreheader_74;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %75 = ashr i32 %73, 4*/
		main_AddRoundKeyexitipreheader_75 = ($signed(main_AddRoundKeyexitipreheader_73) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %75 = ashr i32 %73, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexitipreheader_75_reg <= main_AddRoundKeyexitipreheader_75;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int70 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int70 = 0; end
		main_AddRoundKeyexitipreheader_gep_int70 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int70 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		main_AddRoundKeyexitipreheader_gep_int70_reg <= main_AddRoundKeyexitipreheader_gep_int70;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array71 = mul i32 %75, 64*/
		main_AddRoundKeyexitipreheader_gep_array71 = (main_AddRoundKeyexitipreheader_75 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array71 = mul i32 %75, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexitipreheader_gep_array71_reg <= main_AddRoundKeyexitipreheader_gep_array71;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep72 = add i32 %gep_int70, %gep_array71*/
		main_AddRoundKeyexitipreheader_gep72 = main_signed_add_32_2;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep72 = add i32 %gep_int70, %gep_array71*/
	main_AddRoundKeyexitipreheader_gep72_reg = main_AddRoundKeyexit_crit_edgei_gep199_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array73 = mul i32 %74, 4*/
		main_AddRoundKeyexitipreheader_gep_array73 = (main_AddRoundKeyexitipreheader_74 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array73 = mul i32 %74, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexitipreheader_gep_array73_reg <= main_AddRoundKeyexitipreheader_gep_array73;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep74 = add i32 %gep72, %gep_array73*/
		main_AddRoundKeyexitipreheader_gep74 = main_signed_add_32_3;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep74 = add i32 %gep72, %gep_array73*/
	main_AddRoundKeyexitipreheader_gep74_reg = main_AddRoundKeyexit_crit_edgei_gep206_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %76 = inttoptr i32 %gep74 to i32**/
		main_AddRoundKeyexitipreheader_76 = main_AddRoundKeyexitipreheader_gep74;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %76 = inttoptr i32 %gep74 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexitipreheader_76_reg <= main_AddRoundKeyexitipreheader_76;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %77 = load i32* %76, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_77 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %77 = load i32* %76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_59)) begin
		main_AddRoundKeyexitipreheader_77_reg <= main_AddRoundKeyexitipreheader_77;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %78 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_78 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %78 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexitipreheader_78_reg <= main_AddRoundKeyexitipreheader_78;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %79 = and i32 %78, 15*/
		main_AddRoundKeyexitipreheader_79 = (main_AddRoundKeyexitipreheader_78 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %79 = and i32 %78, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexitipreheader_79_reg <= main_AddRoundKeyexitipreheader_79;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %80 = ashr i32 %78, 4*/
		main_AddRoundKeyexitipreheader_80 = ($signed(main_AddRoundKeyexitipreheader_78) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %80 = ashr i32 %78, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexitipreheader_80_reg <= main_AddRoundKeyexitipreheader_80;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int75 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int75 = 0; end
		main_AddRoundKeyexitipreheader_gep_int75 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int75 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		main_AddRoundKeyexitipreheader_gep_int75_reg <= main_AddRoundKeyexitipreheader_gep_int75;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array76 = mul i32 %80, 64*/
		main_AddRoundKeyexitipreheader_gep_array76 = (main_AddRoundKeyexitipreheader_80 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array76 = mul i32 %80, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexitipreheader_gep_array76_reg <= main_AddRoundKeyexitipreheader_gep_array76;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep77 = add i32 %gep_int75, %gep_array76*/
		main_AddRoundKeyexitipreheader_gep77 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep77 = add i32 %gep_int75, %gep_array76*/
	main_AddRoundKeyexitipreheader_gep77_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array78 = mul i32 %79, 4*/
		main_AddRoundKeyexitipreheader_gep_array78 = (main_AddRoundKeyexitipreheader_79 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array78 = mul i32 %79, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexitipreheader_gep_array78_reg <= main_AddRoundKeyexitipreheader_gep_array78;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep79 = add i32 %gep77, %gep_array78*/
		main_AddRoundKeyexitipreheader_gep79 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep79 = add i32 %gep77, %gep_array78*/
	main_AddRoundKeyexitipreheader_gep79_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %81 = inttoptr i32 %gep79 to i32**/
		main_AddRoundKeyexitipreheader_81 = main_AddRoundKeyexitipreheader_gep79;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %81 = inttoptr i32 %gep79 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexitipreheader_81_reg <= main_AddRoundKeyexitipreheader_81;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_82 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_62)) begin
		main_AddRoundKeyexitipreheader_82_reg <= main_AddRoundKeyexitipreheader_82;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %83 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_83 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %83 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexitipreheader_83_reg <= main_AddRoundKeyexitipreheader_83;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %84 = and i32 %83, 15*/
		main_AddRoundKeyexitipreheader_84 = (main_AddRoundKeyexitipreheader_83 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %84 = and i32 %83, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexitipreheader_84_reg <= main_AddRoundKeyexitipreheader_84;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %85 = ashr i32 %83, 4*/
		main_AddRoundKeyexitipreheader_85 = ($signed(main_AddRoundKeyexitipreheader_83) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %85 = ashr i32 %83, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexitipreheader_85_reg <= main_AddRoundKeyexitipreheader_85;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int80 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int80 = 0; end
		main_AddRoundKeyexitipreheader_gep_int80 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int80 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		main_AddRoundKeyexitipreheader_gep_int80_reg <= main_AddRoundKeyexitipreheader_gep_int80;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array81 = mul i32 %85, 64*/
		main_AddRoundKeyexitipreheader_gep_array81 = (main_AddRoundKeyexitipreheader_85 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array81 = mul i32 %85, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexitipreheader_gep_array81_reg <= main_AddRoundKeyexitipreheader_gep_array81;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep82 = add i32 %gep_int80, %gep_array81*/
		main_AddRoundKeyexitipreheader_gep82 = main_signed_add_32_2;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep82 = add i32 %gep_int80, %gep_array81*/
	main_AddRoundKeyexitipreheader_gep82_reg = main_AddRoundKeyexit_crit_edgei_gep199_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array83 = mul i32 %84, 4*/
		main_AddRoundKeyexitipreheader_gep_array83 = (main_AddRoundKeyexitipreheader_84 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array83 = mul i32 %84, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexitipreheader_gep_array83_reg <= main_AddRoundKeyexitipreheader_gep_array83;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep84 = add i32 %gep82, %gep_array83*/
		main_AddRoundKeyexitipreheader_gep84 = main_signed_add_32_3;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep84 = add i32 %gep82, %gep_array83*/
	main_AddRoundKeyexitipreheader_gep84_reg = main_AddRoundKeyexit_crit_edgei_gep206_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %86 = inttoptr i32 %gep84 to i32**/
		main_AddRoundKeyexitipreheader_86 = main_AddRoundKeyexitipreheader_gep84;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %86 = inttoptr i32 %gep84 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexitipreheader_86_reg <= main_AddRoundKeyexitipreheader_86;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %87 = load i32* %86, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_87 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %87 = load i32* %86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_65)) begin
		main_AddRoundKeyexitipreheader_87_reg <= main_AddRoundKeyexitipreheader_87;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %88 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_88 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %88 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexitipreheader_88_reg <= main_AddRoundKeyexitipreheader_88;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %89 = and i32 %88, 15*/
		main_AddRoundKeyexitipreheader_89 = (main_AddRoundKeyexitipreheader_88 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %89 = and i32 %88, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexitipreheader_89_reg <= main_AddRoundKeyexitipreheader_89;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %90 = ashr i32 %88, 4*/
		main_AddRoundKeyexitipreheader_90 = ($signed(main_AddRoundKeyexitipreheader_88) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %90 = ashr i32 %88, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexitipreheader_90_reg <= main_AddRoundKeyexitipreheader_90;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int85 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int85 = 0; end
		main_AddRoundKeyexitipreheader_gep_int85 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int85 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		main_AddRoundKeyexitipreheader_gep_int85_reg <= main_AddRoundKeyexitipreheader_gep_int85;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array86 = mul i32 %90, 64*/
		main_AddRoundKeyexitipreheader_gep_array86 = (main_AddRoundKeyexitipreheader_90 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array86 = mul i32 %90, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexitipreheader_gep_array86_reg <= main_AddRoundKeyexitipreheader_gep_array86;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep87 = add i32 %gep_int85, %gep_array86*/
		main_AddRoundKeyexitipreheader_gep87 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep87 = add i32 %gep_int85, %gep_array86*/
	main_AddRoundKeyexitipreheader_gep87_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array88 = mul i32 %89, 4*/
		main_AddRoundKeyexitipreheader_gep_array88 = (main_AddRoundKeyexitipreheader_89 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array88 = mul i32 %89, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexitipreheader_gep_array88_reg <= main_AddRoundKeyexitipreheader_gep_array88;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep89 = add i32 %gep87, %gep_array88*/
		main_AddRoundKeyexitipreheader_gep89 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep89 = add i32 %gep87, %gep_array88*/
	main_AddRoundKeyexitipreheader_gep89_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %91 = inttoptr i32 %gep89 to i32**/
		main_AddRoundKeyexitipreheader_91 = main_AddRoundKeyexitipreheader_gep89;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %91 = inttoptr i32 %gep89 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexitipreheader_91_reg <= main_AddRoundKeyexitipreheader_91;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %92 = load i32* %91, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_92 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %92 = load i32* %91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_68)) begin
		main_AddRoundKeyexitipreheader_92_reg <= main_AddRoundKeyexitipreheader_92;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %93 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_93 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %93 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexitipreheader_93_reg <= main_AddRoundKeyexitipreheader_93;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %94 = and i32 %93, 15*/
		main_AddRoundKeyexitipreheader_94 = (main_AddRoundKeyexitipreheader_93 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %94 = and i32 %93, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexitipreheader_94_reg <= main_AddRoundKeyexitipreheader_94;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %95 = ashr i32 %93, 4*/
		main_AddRoundKeyexitipreheader_95 = ($signed(main_AddRoundKeyexitipreheader_93) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %95 = ashr i32 %93, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexitipreheader_95_reg <= main_AddRoundKeyexitipreheader_95;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int90 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int90 = 0; end
		main_AddRoundKeyexitipreheader_gep_int90 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int90 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		main_AddRoundKeyexitipreheader_gep_int90_reg <= main_AddRoundKeyexitipreheader_gep_int90;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array91 = mul i32 %95, 64*/
		main_AddRoundKeyexitipreheader_gep_array91 = (main_AddRoundKeyexitipreheader_95 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array91 = mul i32 %95, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexitipreheader_gep_array91_reg <= main_AddRoundKeyexitipreheader_gep_array91;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep92 = add i32 %gep_int90, %gep_array91*/
		main_AddRoundKeyexitipreheader_gep92 = main_signed_add_32_2;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep92 = add i32 %gep_int90, %gep_array91*/
	main_AddRoundKeyexitipreheader_gep92_reg = main_AddRoundKeyexit_crit_edgei_gep199_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array93 = mul i32 %94, 4*/
		main_AddRoundKeyexitipreheader_gep_array93 = (main_AddRoundKeyexitipreheader_94 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array93 = mul i32 %94, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexitipreheader_gep_array93_reg <= main_AddRoundKeyexitipreheader_gep_array93;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep94 = add i32 %gep92, %gep_array93*/
		main_AddRoundKeyexitipreheader_gep94 = main_signed_add_32_3;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep94 = add i32 %gep92, %gep_array93*/
	main_AddRoundKeyexitipreheader_gep94_reg = main_AddRoundKeyexit_crit_edgei_gep206_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %96 = inttoptr i32 %gep94 to i32**/
		main_AddRoundKeyexitipreheader_96 = main_AddRoundKeyexitipreheader_gep94;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %96 = inttoptr i32 %gep94 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexitipreheader_96_reg <= main_AddRoundKeyexitipreheader_96;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %97 = load i32* %96, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_97 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %97 = load i32* %96, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_71)) begin
		main_AddRoundKeyexitipreheader_97_reg <= main_AddRoundKeyexitipreheader_97;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %98 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_98 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %98 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexitipreheader_98_reg <= main_AddRoundKeyexitipreheader_98;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %99 = and i32 %98, 15*/
		main_AddRoundKeyexitipreheader_99 = (main_AddRoundKeyexitipreheader_98 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %99 = and i32 %98, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexitipreheader_99_reg <= main_AddRoundKeyexitipreheader_99;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %100 = ashr i32 %98, 4*/
		main_AddRoundKeyexitipreheader_100 = ($signed(main_AddRoundKeyexitipreheader_98) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %100 = ashr i32 %98, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexitipreheader_100_reg <= main_AddRoundKeyexitipreheader_100;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int95 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int95 = 0; end
		main_AddRoundKeyexitipreheader_gep_int95 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int95 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		main_AddRoundKeyexitipreheader_gep_int95_reg <= main_AddRoundKeyexitipreheader_gep_int95;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array96 = mul i32 %100, 64*/
		main_AddRoundKeyexitipreheader_gep_array96 = (main_AddRoundKeyexitipreheader_100 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array96 = mul i32 %100, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexitipreheader_gep_array96_reg <= main_AddRoundKeyexitipreheader_gep_array96;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep97 = add i32 %gep_int95, %gep_array96*/
		main_AddRoundKeyexitipreheader_gep97 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep97 = add i32 %gep_int95, %gep_array96*/
	main_AddRoundKeyexitipreheader_gep97_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array98 = mul i32 %99, 4*/
		main_AddRoundKeyexitipreheader_gep_array98 = (main_AddRoundKeyexitipreheader_99 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array98 = mul i32 %99, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexitipreheader_gep_array98_reg <= main_AddRoundKeyexitipreheader_gep_array98;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep99 = add i32 %gep97, %gep_array98*/
		main_AddRoundKeyexitipreheader_gep99 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep99 = add i32 %gep97, %gep_array98*/
	main_AddRoundKeyexitipreheader_gep99_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %101 = inttoptr i32 %gep99 to i32**/
		main_AddRoundKeyexitipreheader_101 = main_AddRoundKeyexitipreheader_gep99;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %101 = inttoptr i32 %gep99 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_AddRoundKeyexitipreheader_101_reg <= main_AddRoundKeyexitipreheader_101;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %102 = load i32* %101, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_102 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %102 = load i32* %101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_74)) begin
		main_AddRoundKeyexitipreheader_102_reg <= main_AddRoundKeyexitipreheader_102;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %103 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_103 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %103 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexitipreheader_103_reg <= main_AddRoundKeyexitipreheader_103;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %104 = and i32 %103, 15*/
		main_AddRoundKeyexitipreheader_104 = (main_AddRoundKeyexitipreheader_103 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %104 = and i32 %103, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexitipreheader_104_reg <= main_AddRoundKeyexitipreheader_104;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %105 = ashr i32 %103, 4*/
		main_AddRoundKeyexitipreheader_105 = ($signed(main_AddRoundKeyexitipreheader_103) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %105 = ashr i32 %103, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexitipreheader_105_reg <= main_AddRoundKeyexitipreheader_105;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int100 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexitipreheader_gep_int100 = 0; end
		main_AddRoundKeyexitipreheader_gep_int100 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_int100 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		main_AddRoundKeyexitipreheader_gep_int100_reg <= main_AddRoundKeyexitipreheader_gep_int100;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_int100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_int100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array101 = mul i32 %105, 64*/
		main_AddRoundKeyexitipreheader_gep_array101 = (main_AddRoundKeyexitipreheader_105 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array101 = mul i32 %105, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexitipreheader_gep_array101_reg <= main_AddRoundKeyexitipreheader_gep_array101;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep102 = add i32 %gep_int100, %gep_array101*/
		main_AddRoundKeyexitipreheader_gep102 = main_signed_add_32_2;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep102 = add i32 %gep_int100, %gep_array101*/
	main_AddRoundKeyexitipreheader_gep102_reg = main_AddRoundKeyexit_crit_edgei_gep199_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array103 = mul i32 %104, 4*/
		main_AddRoundKeyexitipreheader_gep_array103 = (main_AddRoundKeyexitipreheader_104 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep_array103 = mul i32 %104, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexitipreheader_gep_array103_reg <= main_AddRoundKeyexitipreheader_gep_array103;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep_array103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_gep_array103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep104 = add i32 %gep102, %gep_array103*/
		main_AddRoundKeyexitipreheader_gep104 = main_signed_add_32_3;
end
always @(*) begin
/* main: %AddRoundKey.exit.i.preheader*/
/*   %gep104 = add i32 %gep102, %gep_array103*/
	main_AddRoundKeyexitipreheader_gep104_reg = main_AddRoundKeyexit_crit_edgei_gep206_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %106 = inttoptr i32 %gep104 to i32**/
		main_AddRoundKeyexitipreheader_106 = main_AddRoundKeyexitipreheader_gep104;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %106 = inttoptr i32 %gep104 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_AddRoundKeyexitipreheader_106_reg <= main_AddRoundKeyexitipreheader_106;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_107 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_77)) begin
		main_AddRoundKeyexitipreheader_107_reg <= main_AddRoundKeyexitipreheader_107;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %i.08.i = phi i32 [ %109, %AddRoundKey.exit.i ], [ 1, %AddRoundKey.exit.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_78) & (memory_controller_waitrequest == 1'd0))) begin
		main_AddRoundKeyexiti_i08i = 32'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %i.08.i = phi i32 [ %109, %AddRoundKey.exit.i ], [ 1, %AddRoundKey.exit.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_124) & (memory_controller_waitrequest == 1'd0)) & (main_AddRoundKeyexiti_exitcond29_reg == 1'd1))) */ begin
		main_AddRoundKeyexiti_i08i = main_AddRoundKeyexiti_109_reg;
	end
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %i.08.i = phi i32 [ %109, %AddRoundKey.exit.i ], [ 1, %AddRoundKey.exit.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_78) & (memory_controller_waitrequest == 1'd0))) begin
		main_AddRoundKeyexiti_i08i_reg <= main_AddRoundKeyexiti_i08i;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_i08i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_i08i_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %i.08.i = phi i32 [ %109, %AddRoundKey.exit.i ], [ 1, %AddRoundKey.exit.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_124) & (memory_controller_waitrequest == 1'd0)) & (main_AddRoundKeyexiti_exitcond29_reg == 1'd1))) begin
		main_AddRoundKeyexiti_i08i_reg <= main_AddRoundKeyexiti_i08i;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_i08i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_i08i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %109 = add nsw i32 %i.08.i, 1*/
		main_AddRoundKeyexiti_109 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %109 = add nsw i32 %i.08.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		main_AddRoundKeyexiti_109_reg <= main_AddRoundKeyexiti_109;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %110 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_110 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %110 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_83)) begin
		main_AddRoundKeyexiti_110_reg <= main_AddRoundKeyexiti_110;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %111 = and i32 %110, 15*/
		main_AddRoundKeyexiti_111 = (main_AddRoundKeyexiti_110 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %111 = and i32 %110, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_83)) begin
		main_AddRoundKeyexiti_111_reg <= main_AddRoundKeyexiti_111;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %112 = ashr i32 %110, 4*/
		main_AddRoundKeyexiti_112 = ($signed(main_AddRoundKeyexiti_110) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %112 = ashr i32 %110, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_83)) begin
		main_AddRoundKeyexiti_112_reg <= main_AddRoundKeyexiti_112;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int105 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int105 = 0; end
		main_AddRoundKeyexiti_gep_int105 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int105 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		main_AddRoundKeyexiti_gep_int105_reg <= main_AddRoundKeyexiti_gep_int105;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array106 = mul i32 %112, 64*/
		main_AddRoundKeyexiti_gep_array106 = (main_AddRoundKeyexiti_112 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array106 = mul i32 %112, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_83)) begin
		main_AddRoundKeyexiti_gep_array106_reg <= main_AddRoundKeyexiti_gep_array106;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep107 = add i32 %gep_int105, %gep_array106*/
		main_AddRoundKeyexiti_gep107 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep107 = add i32 %gep_int105, %gep_array106*/
	main_AddRoundKeyexiti_gep107_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array108 = mul i32 %111, 4*/
		main_AddRoundKeyexiti_gep_array108 = (main_AddRoundKeyexiti_111 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array108 = mul i32 %111, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_83)) begin
		main_AddRoundKeyexiti_gep_array108_reg <= main_AddRoundKeyexiti_gep_array108;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep109 = add i32 %gep107, %gep_array108*/
		main_AddRoundKeyexiti_gep109 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep109 = add i32 %gep107, %gep_array108*/
	main_AddRoundKeyexiti_gep109_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %113 = inttoptr i32 %gep109 to i32**/
		main_AddRoundKeyexiti_113 = main_AddRoundKeyexiti_gep109;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %113 = inttoptr i32 %gep109 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		main_AddRoundKeyexiti_113_reg <= main_AddRoundKeyexiti_113;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %114 = load i32* %113, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_114 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %114 = load i32* %113, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_86)) begin
		main_AddRoundKeyexiti_114_reg <= main_AddRoundKeyexiti_114;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %115 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_115 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %115 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_83)) begin
		main_AddRoundKeyexiti_115_reg <= main_AddRoundKeyexiti_115;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %116 = and i32 %115, 15*/
		main_AddRoundKeyexiti_116 = (main_AddRoundKeyexiti_115 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %116 = and i32 %115, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_83)) begin
		main_AddRoundKeyexiti_116_reg <= main_AddRoundKeyexiti_116;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %117 = ashr i32 %115, 4*/
		main_AddRoundKeyexiti_117 = ($signed(main_AddRoundKeyexiti_115) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %117 = ashr i32 %115, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_83)) begin
		main_AddRoundKeyexiti_117_reg <= main_AddRoundKeyexiti_117;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int110 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int110 = 0; end
		main_AddRoundKeyexiti_gep_int110 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int110 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		main_AddRoundKeyexiti_gep_int110_reg <= main_AddRoundKeyexiti_gep_int110;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array111 = mul i32 %117, 64*/
		main_AddRoundKeyexiti_gep_array111 = (main_AddRoundKeyexiti_117 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array111 = mul i32 %117, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_83)) begin
		main_AddRoundKeyexiti_gep_array111_reg <= main_AddRoundKeyexiti_gep_array111;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep112 = add i32 %gep_int110, %gep_array111*/
		main_AddRoundKeyexiti_gep112 = main_signed_add_32_2;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep112 = add i32 %gep_int110, %gep_array111*/
	main_AddRoundKeyexiti_gep112_reg = main_AddRoundKeyexit_crit_edgei_gep199_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array113 = mul i32 %116, 4*/
		main_AddRoundKeyexiti_gep_array113 = (main_AddRoundKeyexiti_116 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array113 = mul i32 %116, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_83)) begin
		main_AddRoundKeyexiti_gep_array113_reg <= main_AddRoundKeyexiti_gep_array113;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep114 = add i32 %gep112, %gep_array113*/
		main_AddRoundKeyexiti_gep114 = main_signed_add_32_3;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep114 = add i32 %gep112, %gep_array113*/
	main_AddRoundKeyexiti_gep114_reg = main_AddRoundKeyexit_crit_edgei_gep206_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %118 = inttoptr i32 %gep114 to i32**/
		main_AddRoundKeyexiti_118 = main_AddRoundKeyexiti_gep114;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %118 = inttoptr i32 %gep114 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		main_AddRoundKeyexiti_118_reg <= main_AddRoundKeyexiti_118;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %119 = load i32* %118, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_119 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %119 = load i32* %118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_86)) begin
		main_AddRoundKeyexiti_119_reg <= main_AddRoundKeyexiti_119;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %120 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_120 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %120 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_87)) begin
		main_AddRoundKeyexiti_120_reg <= main_AddRoundKeyexiti_120;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %121 = and i32 %120, 15*/
		main_AddRoundKeyexiti_121 = (main_AddRoundKeyexiti_120 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %121 = and i32 %120, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_87)) begin
		main_AddRoundKeyexiti_121_reg <= main_AddRoundKeyexiti_121;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %122 = ashr i32 %120, 4*/
		main_AddRoundKeyexiti_122 = ($signed(main_AddRoundKeyexiti_120) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %122 = ashr i32 %120, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_87)) begin
		main_AddRoundKeyexiti_122_reg <= main_AddRoundKeyexiti_122;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int115 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int115 = 0; end
		main_AddRoundKeyexiti_gep_int115 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int115 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		main_AddRoundKeyexiti_gep_int115_reg <= main_AddRoundKeyexiti_gep_int115;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array116 = mul i32 %122, 64*/
		main_AddRoundKeyexiti_gep_array116 = (main_AddRoundKeyexiti_122 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array116 = mul i32 %122, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_87)) begin
		main_AddRoundKeyexiti_gep_array116_reg <= main_AddRoundKeyexiti_gep_array116;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep117 = add i32 %gep_int115, %gep_array116*/
		main_AddRoundKeyexiti_gep117 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep117 = add i32 %gep_int115, %gep_array116*/
	main_AddRoundKeyexiti_gep117_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array118 = mul i32 %121, 4*/
		main_AddRoundKeyexiti_gep_array118 = (main_AddRoundKeyexiti_121 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array118 = mul i32 %121, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_87)) begin
		main_AddRoundKeyexiti_gep_array118_reg <= main_AddRoundKeyexiti_gep_array118;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep119 = add i32 %gep117, %gep_array118*/
		main_AddRoundKeyexiti_gep119 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep119 = add i32 %gep117, %gep_array118*/
	main_AddRoundKeyexiti_gep119_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %123 = inttoptr i32 %gep119 to i32**/
		main_AddRoundKeyexiti_123 = main_AddRoundKeyexiti_gep119;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %123 = inttoptr i32 %gep119 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_88)) begin
		main_AddRoundKeyexiti_123_reg <= main_AddRoundKeyexiti_123;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %124 = load i32* %123, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_124 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %124 = load i32* %123, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_90)) begin
		main_AddRoundKeyexiti_124_reg <= main_AddRoundKeyexiti_124;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %125 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_125 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %125 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_89)) begin
		main_AddRoundKeyexiti_125_reg <= main_AddRoundKeyexiti_125;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %126 = and i32 %125, 15*/
		main_AddRoundKeyexiti_126 = (main_AddRoundKeyexiti_125 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %126 = and i32 %125, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_89)) begin
		main_AddRoundKeyexiti_126_reg <= main_AddRoundKeyexiti_126;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %127 = ashr i32 %125, 4*/
		main_AddRoundKeyexiti_127 = ($signed(main_AddRoundKeyexiti_125) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %127 = ashr i32 %125, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_89)) begin
		main_AddRoundKeyexiti_127_reg <= main_AddRoundKeyexiti_127;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int120 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int120 = 0; end
		main_AddRoundKeyexiti_gep_int120 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int120 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		main_AddRoundKeyexiti_gep_int120_reg <= main_AddRoundKeyexiti_gep_int120;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array121 = mul i32 %127, 64*/
		main_AddRoundKeyexiti_gep_array121 = (main_AddRoundKeyexiti_127 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array121 = mul i32 %127, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_89)) begin
		main_AddRoundKeyexiti_gep_array121_reg <= main_AddRoundKeyexiti_gep_array121;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep122 = add i32 %gep_int120, %gep_array121*/
		main_AddRoundKeyexiti_gep122 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep122 = add i32 %gep_int120, %gep_array121*/
	main_AddRoundKeyexiti_gep122_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array123 = mul i32 %126, 4*/
		main_AddRoundKeyexiti_gep_array123 = (main_AddRoundKeyexiti_126 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array123 = mul i32 %126, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_89)) begin
		main_AddRoundKeyexiti_gep_array123_reg <= main_AddRoundKeyexiti_gep_array123;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep124 = add i32 %gep122, %gep_array123*/
		main_AddRoundKeyexiti_gep124 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep124 = add i32 %gep122, %gep_array123*/
	main_AddRoundKeyexiti_gep124_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %128 = inttoptr i32 %gep124 to i32**/
		main_AddRoundKeyexiti_128 = main_AddRoundKeyexiti_gep124;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %128 = inttoptr i32 %gep124 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_90)) begin
		main_AddRoundKeyexiti_128_reg <= main_AddRoundKeyexiti_128;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %129 = load i32* %128, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_129 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %129 = load i32* %128, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_129_reg <= main_AddRoundKeyexiti_129;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %130 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_130 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %130 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_130_reg <= main_AddRoundKeyexiti_130;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %131 = and i32 %130, 15*/
		main_AddRoundKeyexiti_131 = (main_AddRoundKeyexiti_130 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %131 = and i32 %130, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_131_reg <= main_AddRoundKeyexiti_131;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %132 = ashr i32 %130, 4*/
		main_AddRoundKeyexiti_132 = ($signed(main_AddRoundKeyexiti_130) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %132 = ashr i32 %130, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_132_reg <= main_AddRoundKeyexiti_132;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int125 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int125 = 0; end
		main_AddRoundKeyexiti_gep_int125 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int125 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		main_AddRoundKeyexiti_gep_int125_reg <= main_AddRoundKeyexiti_gep_int125;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array126 = mul i32 %132, 64*/
		main_AddRoundKeyexiti_gep_array126 = (main_AddRoundKeyexiti_132 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array126 = mul i32 %132, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_gep_array126_reg <= main_AddRoundKeyexiti_gep_array126;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep127 = add i32 %gep_int125, %gep_array126*/
		main_AddRoundKeyexiti_gep127 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep127 = add i32 %gep_int125, %gep_array126*/
	main_AddRoundKeyexiti_gep127_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array128 = mul i32 %131, 4*/
		main_AddRoundKeyexiti_gep_array128 = (main_AddRoundKeyexiti_131 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array128 = mul i32 %131, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		main_AddRoundKeyexiti_gep_array128_reg <= main_AddRoundKeyexiti_gep_array128;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep129 = add i32 %gep127, %gep_array128*/
		main_AddRoundKeyexiti_gep129 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep129 = add i32 %gep127, %gep_array128*/
	main_AddRoundKeyexiti_gep129_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %133 = inttoptr i32 %gep129 to i32**/
		main_AddRoundKeyexiti_133 = main_AddRoundKeyexiti_gep129;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %133 = inttoptr i32 %gep129 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_94)) begin
		main_AddRoundKeyexiti_133_reg <= main_AddRoundKeyexiti_133;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %134 = load i32* %133, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_134 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %134 = load i32* %133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_96)) begin
		main_AddRoundKeyexiti_134_reg <= main_AddRoundKeyexiti_134;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_134_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %135 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_135 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %135 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_94)) begin
		main_AddRoundKeyexiti_135_reg <= main_AddRoundKeyexiti_135;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %136 = and i32 %135, 15*/
		main_AddRoundKeyexiti_136 = (main_AddRoundKeyexiti_135 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %136 = and i32 %135, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_94)) begin
		main_AddRoundKeyexiti_136_reg <= main_AddRoundKeyexiti_136;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %137 = ashr i32 %135, 4*/
		main_AddRoundKeyexiti_137 = ($signed(main_AddRoundKeyexiti_135) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %137 = ashr i32 %135, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_94)) begin
		main_AddRoundKeyexiti_137_reg <= main_AddRoundKeyexiti_137;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int130 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int130 = 0; end
		main_AddRoundKeyexiti_gep_int130 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int130 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		main_AddRoundKeyexiti_gep_int130_reg <= main_AddRoundKeyexiti_gep_int130;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array131 = mul i32 %137, 64*/
		main_AddRoundKeyexiti_gep_array131 = (main_AddRoundKeyexiti_137 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array131 = mul i32 %137, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_94)) begin
		main_AddRoundKeyexiti_gep_array131_reg <= main_AddRoundKeyexiti_gep_array131;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep132 = add i32 %gep_int130, %gep_array131*/
		main_AddRoundKeyexiti_gep132 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep132 = add i32 %gep_int130, %gep_array131*/
	main_AddRoundKeyexiti_gep132_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array133 = mul i32 %136, 4*/
		main_AddRoundKeyexiti_gep_array133 = (main_AddRoundKeyexiti_136 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array133 = mul i32 %136, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_94)) begin
		main_AddRoundKeyexiti_gep_array133_reg <= main_AddRoundKeyexiti_gep_array133;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep134 = add i32 %gep132, %gep_array133*/
		main_AddRoundKeyexiti_gep134 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep134 = add i32 %gep132, %gep_array133*/
	main_AddRoundKeyexiti_gep134_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %138 = inttoptr i32 %gep134 to i32**/
		main_AddRoundKeyexiti_138 = main_AddRoundKeyexiti_gep134;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %138 = inttoptr i32 %gep134 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_95)) begin
		main_AddRoundKeyexiti_138_reg <= main_AddRoundKeyexiti_138;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %139 = load i32* %138, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_139 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %139 = load i32* %138, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		main_AddRoundKeyexiti_139_reg <= main_AddRoundKeyexiti_139;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %140 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_140 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %140 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		main_AddRoundKeyexiti_140_reg <= main_AddRoundKeyexiti_140;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %141 = and i32 %140, 15*/
		main_AddRoundKeyexiti_141 = (main_AddRoundKeyexiti_140 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %141 = and i32 %140, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		main_AddRoundKeyexiti_141_reg <= main_AddRoundKeyexiti_141;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %142 = ashr i32 %140, 4*/
		main_AddRoundKeyexiti_142 = ($signed(main_AddRoundKeyexiti_140) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %142 = ashr i32 %140, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		main_AddRoundKeyexiti_142_reg <= main_AddRoundKeyexiti_142;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int135 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int135 = 0; end
		main_AddRoundKeyexiti_gep_int135 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int135 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		main_AddRoundKeyexiti_gep_int135_reg <= main_AddRoundKeyexiti_gep_int135;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array136 = mul i32 %142, 64*/
		main_AddRoundKeyexiti_gep_array136 = (main_AddRoundKeyexiti_142 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array136 = mul i32 %142, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		main_AddRoundKeyexiti_gep_array136_reg <= main_AddRoundKeyexiti_gep_array136;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep137 = add i32 %gep_int135, %gep_array136*/
		main_AddRoundKeyexiti_gep137 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep137 = add i32 %gep_int135, %gep_array136*/
	main_AddRoundKeyexiti_gep137_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array138 = mul i32 %141, 4*/
		main_AddRoundKeyexiti_gep_array138 = (main_AddRoundKeyexiti_141 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array138 = mul i32 %141, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		main_AddRoundKeyexiti_gep_array138_reg <= main_AddRoundKeyexiti_gep_array138;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep139 = add i32 %gep137, %gep_array138*/
		main_AddRoundKeyexiti_gep139 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep139 = add i32 %gep137, %gep_array138*/
	main_AddRoundKeyexiti_gep139_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %143 = inttoptr i32 %gep139 to i32**/
		main_AddRoundKeyexiti_143 = main_AddRoundKeyexiti_gep139;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %143 = inttoptr i32 %gep139 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_AddRoundKeyexiti_143_reg <= main_AddRoundKeyexiti_143;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %144 = load i32* %143, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_144 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %144 = load i32* %143, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_100)) begin
		main_AddRoundKeyexiti_144_reg <= main_AddRoundKeyexiti_144;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %145 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_145 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %145 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_AddRoundKeyexiti_145_reg <= main_AddRoundKeyexiti_145;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %146 = and i32 %145, 15*/
		main_AddRoundKeyexiti_146 = (main_AddRoundKeyexiti_145 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %146 = and i32 %145, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_AddRoundKeyexiti_146_reg <= main_AddRoundKeyexiti_146;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %147 = ashr i32 %145, 4*/
		main_AddRoundKeyexiti_147 = ($signed(main_AddRoundKeyexiti_145) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %147 = ashr i32 %145, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_AddRoundKeyexiti_147_reg <= main_AddRoundKeyexiti_147;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int140 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int140 = 0; end
		main_AddRoundKeyexiti_gep_int140 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int140 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		main_AddRoundKeyexiti_gep_int140_reg <= main_AddRoundKeyexiti_gep_int140;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array141 = mul i32 %147, 64*/
		main_AddRoundKeyexiti_gep_array141 = (main_AddRoundKeyexiti_147 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array141 = mul i32 %147, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_AddRoundKeyexiti_gep_array141_reg <= main_AddRoundKeyexiti_gep_array141;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep142 = add i32 %gep_int140, %gep_array141*/
		main_AddRoundKeyexiti_gep142 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep142 = add i32 %gep_int140, %gep_array141*/
	main_AddRoundKeyexiti_gep142_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array143 = mul i32 %146, 4*/
		main_AddRoundKeyexiti_gep_array143 = (main_AddRoundKeyexiti_146 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array143 = mul i32 %146, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_AddRoundKeyexiti_gep_array143_reg <= main_AddRoundKeyexiti_gep_array143;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep144 = add i32 %gep142, %gep_array143*/
		main_AddRoundKeyexiti_gep144 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep144 = add i32 %gep142, %gep_array143*/
	main_AddRoundKeyexiti_gep144_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %148 = inttoptr i32 %gep144 to i32**/
		main_AddRoundKeyexiti_148 = main_AddRoundKeyexiti_gep144;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %148 = inttoptr i32 %gep144 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_99)) begin
		main_AddRoundKeyexiti_148_reg <= main_AddRoundKeyexiti_148;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %149 = load i32* %148, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_149 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %149 = load i32* %148, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		main_AddRoundKeyexiti_149_reg <= main_AddRoundKeyexiti_149;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %150 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_150 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %150 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		main_AddRoundKeyexiti_150_reg <= main_AddRoundKeyexiti_150;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %151 = and i32 %150, 15*/
		main_AddRoundKeyexiti_151 = (main_AddRoundKeyexiti_150 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %151 = and i32 %150, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		main_AddRoundKeyexiti_151_reg <= main_AddRoundKeyexiti_151;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %152 = ashr i32 %150, 4*/
		main_AddRoundKeyexiti_152 = ($signed(main_AddRoundKeyexiti_150) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %152 = ashr i32 %150, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		main_AddRoundKeyexiti_152_reg <= main_AddRoundKeyexiti_152;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int145 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int145 = 0; end
		main_AddRoundKeyexiti_gep_int145 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int145 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		main_AddRoundKeyexiti_gep_int145_reg <= main_AddRoundKeyexiti_gep_int145;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array146 = mul i32 %152, 64*/
		main_AddRoundKeyexiti_gep_array146 = (main_AddRoundKeyexiti_152 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array146 = mul i32 %152, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		main_AddRoundKeyexiti_gep_array146_reg <= main_AddRoundKeyexiti_gep_array146;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep147 = add i32 %gep_int145, %gep_array146*/
		main_AddRoundKeyexiti_gep147 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep147 = add i32 %gep_int145, %gep_array146*/
	main_AddRoundKeyexiti_gep147_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array148 = mul i32 %151, 4*/
		main_AddRoundKeyexiti_gep_array148 = (main_AddRoundKeyexiti_151 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array148 = mul i32 %151, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		main_AddRoundKeyexiti_gep_array148_reg <= main_AddRoundKeyexiti_gep_array148;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep149 = add i32 %gep147, %gep_array148*/
		main_AddRoundKeyexiti_gep149 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep149 = add i32 %gep147, %gep_array148*/
	main_AddRoundKeyexiti_gep149_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %153 = inttoptr i32 %gep149 to i32**/
		main_AddRoundKeyexiti_153 = main_AddRoundKeyexiti_gep149;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %153 = inttoptr i32 %gep149 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		main_AddRoundKeyexiti_153_reg <= main_AddRoundKeyexiti_153;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %154 = load i32* %153, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_154 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %154 = load i32* %153, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_104)) begin
		main_AddRoundKeyexiti_154_reg <= main_AddRoundKeyexiti_154;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %155 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_155 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %155 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		main_AddRoundKeyexiti_155_reg <= main_AddRoundKeyexiti_155;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %156 = and i32 %155, 15*/
		main_AddRoundKeyexiti_156 = (main_AddRoundKeyexiti_155 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %156 = and i32 %155, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		main_AddRoundKeyexiti_156_reg <= main_AddRoundKeyexiti_156;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %157 = ashr i32 %155, 4*/
		main_AddRoundKeyexiti_157 = ($signed(main_AddRoundKeyexiti_155) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %157 = ashr i32 %155, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		main_AddRoundKeyexiti_157_reg <= main_AddRoundKeyexiti_157;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int150 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int150 = 0; end
		main_AddRoundKeyexiti_gep_int150 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int150 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		main_AddRoundKeyexiti_gep_int150_reg <= main_AddRoundKeyexiti_gep_int150;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array151 = mul i32 %157, 64*/
		main_AddRoundKeyexiti_gep_array151 = (main_AddRoundKeyexiti_157 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array151 = mul i32 %157, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		main_AddRoundKeyexiti_gep_array151_reg <= main_AddRoundKeyexiti_gep_array151;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep152 = add i32 %gep_int150, %gep_array151*/
		main_AddRoundKeyexiti_gep152 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep152 = add i32 %gep_int150, %gep_array151*/
	main_AddRoundKeyexiti_gep152_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array153 = mul i32 %156, 4*/
		main_AddRoundKeyexiti_gep_array153 = (main_AddRoundKeyexiti_156 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array153 = mul i32 %156, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		main_AddRoundKeyexiti_gep_array153_reg <= main_AddRoundKeyexiti_gep_array153;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep154 = add i32 %gep152, %gep_array153*/
		main_AddRoundKeyexiti_gep154 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep154 = add i32 %gep152, %gep_array153*/
	main_AddRoundKeyexiti_gep154_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %158 = inttoptr i32 %gep154 to i32**/
		main_AddRoundKeyexiti_158 = main_AddRoundKeyexiti_gep154;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %158 = inttoptr i32 %gep154 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_103)) begin
		main_AddRoundKeyexiti_158_reg <= main_AddRoundKeyexiti_158;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %159 = load i32* %158, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_159 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %159 = load i32* %158, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_105)) begin
		main_AddRoundKeyexiti_159_reg <= main_AddRoundKeyexiti_159;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %160 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_160 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %160 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_105)) begin
		main_AddRoundKeyexiti_160_reg <= main_AddRoundKeyexiti_160;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %161 = and i32 %160, 15*/
		main_AddRoundKeyexiti_161 = (main_AddRoundKeyexiti_160 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %161 = and i32 %160, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_105)) begin
		main_AddRoundKeyexiti_161_reg <= main_AddRoundKeyexiti_161;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %162 = ashr i32 %160, 4*/
		main_AddRoundKeyexiti_162 = ($signed(main_AddRoundKeyexiti_160) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %162 = ashr i32 %160, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_105)) begin
		main_AddRoundKeyexiti_162_reg <= main_AddRoundKeyexiti_162;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_162_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int155 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int155 = 0; end
		main_AddRoundKeyexiti_gep_int155 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int155 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		main_AddRoundKeyexiti_gep_int155_reg <= main_AddRoundKeyexiti_gep_int155;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array156 = mul i32 %162, 64*/
		main_AddRoundKeyexiti_gep_array156 = (main_AddRoundKeyexiti_162 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array156 = mul i32 %162, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_105)) begin
		main_AddRoundKeyexiti_gep_array156_reg <= main_AddRoundKeyexiti_gep_array156;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep157 = add i32 %gep_int155, %gep_array156*/
		main_AddRoundKeyexiti_gep157 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep157 = add i32 %gep_int155, %gep_array156*/
	main_AddRoundKeyexiti_gep157_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array158 = mul i32 %161, 4*/
		main_AddRoundKeyexiti_gep_array158 = (main_AddRoundKeyexiti_161 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array158 = mul i32 %161, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_105)) begin
		main_AddRoundKeyexiti_gep_array158_reg <= main_AddRoundKeyexiti_gep_array158;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep159 = add i32 %gep157, %gep_array158*/
		main_AddRoundKeyexiti_gep159 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep159 = add i32 %gep157, %gep_array158*/
	main_AddRoundKeyexiti_gep159_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %163 = inttoptr i32 %gep159 to i32**/
		main_AddRoundKeyexiti_163 = main_AddRoundKeyexiti_gep159;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %163 = inttoptr i32 %gep159 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_106)) begin
		main_AddRoundKeyexiti_163_reg <= main_AddRoundKeyexiti_163;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_164 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		main_AddRoundKeyexiti_164_reg <= main_AddRoundKeyexiti_164;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_164_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %165 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_165 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %165 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		main_AddRoundKeyexiti_165_reg <= main_AddRoundKeyexiti_165;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %166 = and i32 %165, 15*/
		main_AddRoundKeyexiti_166 = (main_AddRoundKeyexiti_165 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %166 = and i32 %165, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		main_AddRoundKeyexiti_166_reg <= main_AddRoundKeyexiti_166;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_166_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %167 = ashr i32 %165, 4*/
		main_AddRoundKeyexiti_167 = ($signed(main_AddRoundKeyexiti_165) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %167 = ashr i32 %165, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		main_AddRoundKeyexiti_167_reg <= main_AddRoundKeyexiti_167;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_167_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int160 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int160 = 0; end
		main_AddRoundKeyexiti_gep_int160 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int160 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		main_AddRoundKeyexiti_gep_int160_reg <= main_AddRoundKeyexiti_gep_int160;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array161 = mul i32 %167, 64*/
		main_AddRoundKeyexiti_gep_array161 = (main_AddRoundKeyexiti_167 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array161 = mul i32 %167, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		main_AddRoundKeyexiti_gep_array161_reg <= main_AddRoundKeyexiti_gep_array161;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep162 = add i32 %gep_int160, %gep_array161*/
		main_AddRoundKeyexiti_gep162 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep162 = add i32 %gep_int160, %gep_array161*/
	main_AddRoundKeyexiti_gep162_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array163 = mul i32 %166, 4*/
		main_AddRoundKeyexiti_gep_array163 = (main_AddRoundKeyexiti_166 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array163 = mul i32 %166, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		main_AddRoundKeyexiti_gep_array163_reg <= main_AddRoundKeyexiti_gep_array163;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep164 = add i32 %gep162, %gep_array163*/
		main_AddRoundKeyexiti_gep164 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep164 = add i32 %gep162, %gep_array163*/
	main_AddRoundKeyexiti_gep164_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %168 = inttoptr i32 %gep164 to i32**/
		main_AddRoundKeyexiti_168 = main_AddRoundKeyexiti_gep164;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %168 = inttoptr i32 %gep164 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		main_AddRoundKeyexiti_168_reg <= main_AddRoundKeyexiti_168;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_168_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %169 = load i32* %168, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_169 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %169 = load i32* %168, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		main_AddRoundKeyexiti_169_reg <= main_AddRoundKeyexiti_169;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %170 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_170 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %170 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		main_AddRoundKeyexiti_170_reg <= main_AddRoundKeyexiti_170;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %171 = and i32 %170, 15*/
		main_AddRoundKeyexiti_171 = (main_AddRoundKeyexiti_170 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %171 = and i32 %170, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		main_AddRoundKeyexiti_171_reg <= main_AddRoundKeyexiti_171;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %172 = ashr i32 %170, 4*/
		main_AddRoundKeyexiti_172 = ($signed(main_AddRoundKeyexiti_170) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %172 = ashr i32 %170, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		main_AddRoundKeyexiti_172_reg <= main_AddRoundKeyexiti_172;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int165 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int165 = 0; end
		main_AddRoundKeyexiti_gep_int165 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int165 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		main_AddRoundKeyexiti_gep_int165_reg <= main_AddRoundKeyexiti_gep_int165;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array166 = mul i32 %172, 64*/
		main_AddRoundKeyexiti_gep_array166 = (main_AddRoundKeyexiti_172 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array166 = mul i32 %172, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		main_AddRoundKeyexiti_gep_array166_reg <= main_AddRoundKeyexiti_gep_array166;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array166_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep167 = add i32 %gep_int165, %gep_array166*/
		main_AddRoundKeyexiti_gep167 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep167 = add i32 %gep_int165, %gep_array166*/
	main_AddRoundKeyexiti_gep167_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array168 = mul i32 %171, 4*/
		main_AddRoundKeyexiti_gep_array168 = (main_AddRoundKeyexiti_171 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array168 = mul i32 %171, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		main_AddRoundKeyexiti_gep_array168_reg <= main_AddRoundKeyexiti_gep_array168;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array168_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep169 = add i32 %gep167, %gep_array168*/
		main_AddRoundKeyexiti_gep169 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep169 = add i32 %gep167, %gep_array168*/
	main_AddRoundKeyexiti_gep169_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %173 = inttoptr i32 %gep169 to i32**/
		main_AddRoundKeyexiti_173 = main_AddRoundKeyexiti_gep169;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %173 = inttoptr i32 %gep169 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		main_AddRoundKeyexiti_173_reg <= main_AddRoundKeyexiti_173;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %174 = load i32* %173, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_174 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %174 = load i32* %173, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_114)) begin
		main_AddRoundKeyexiti_174_reg <= main_AddRoundKeyexiti_174;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %175 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_175 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %175 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_114)) begin
		main_AddRoundKeyexiti_175_reg <= main_AddRoundKeyexiti_175;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %176 = and i32 %175, 15*/
		main_AddRoundKeyexiti_176 = (main_AddRoundKeyexiti_175 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %176 = and i32 %175, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_114)) begin
		main_AddRoundKeyexiti_176_reg <= main_AddRoundKeyexiti_176;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_176_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %177 = ashr i32 %175, 4*/
		main_AddRoundKeyexiti_177 = ($signed(main_AddRoundKeyexiti_175) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %177 = ashr i32 %175, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_114)) begin
		main_AddRoundKeyexiti_177_reg <= main_AddRoundKeyexiti_177;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int170 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int170 = 0; end
		main_AddRoundKeyexiti_gep_int170 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int170 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		main_AddRoundKeyexiti_gep_int170_reg <= main_AddRoundKeyexiti_gep_int170;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array171 = mul i32 %177, 64*/
		main_AddRoundKeyexiti_gep_array171 = (main_AddRoundKeyexiti_177 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array171 = mul i32 %177, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_114)) begin
		main_AddRoundKeyexiti_gep_array171_reg <= main_AddRoundKeyexiti_gep_array171;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep172 = add i32 %gep_int170, %gep_array171*/
		main_AddRoundKeyexiti_gep172 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep172 = add i32 %gep_int170, %gep_array171*/
	main_AddRoundKeyexiti_gep172_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array173 = mul i32 %176, 4*/
		main_AddRoundKeyexiti_gep_array173 = (main_AddRoundKeyexiti_176 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array173 = mul i32 %176, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_114)) begin
		main_AddRoundKeyexiti_gep_array173_reg <= main_AddRoundKeyexiti_gep_array173;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep174 = add i32 %gep172, %gep_array173*/
		main_AddRoundKeyexiti_gep174 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep174 = add i32 %gep172, %gep_array173*/
	main_AddRoundKeyexiti_gep174_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %178 = inttoptr i32 %gep174 to i32**/
		main_AddRoundKeyexiti_178 = main_AddRoundKeyexiti_gep174;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %178 = inttoptr i32 %gep174 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		main_AddRoundKeyexiti_178_reg <= main_AddRoundKeyexiti_178;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %179 = load i32* %178, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_179 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %179 = load i32* %178, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		main_AddRoundKeyexiti_179_reg <= main_AddRoundKeyexiti_179;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_180 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		main_AddRoundKeyexiti_180_reg <= main_AddRoundKeyexiti_180;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %181 = and i32 %180, 15*/
		main_AddRoundKeyexiti_181 = (main_AddRoundKeyexiti_180 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %181 = and i32 %180, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		main_AddRoundKeyexiti_181_reg <= main_AddRoundKeyexiti_181;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %182 = ashr i32 %180, 4*/
		main_AddRoundKeyexiti_182 = ($signed(main_AddRoundKeyexiti_180) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %182 = ashr i32 %180, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		main_AddRoundKeyexiti_182_reg <= main_AddRoundKeyexiti_182;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int175 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int175 = 0; end
		main_AddRoundKeyexiti_gep_int175 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int175 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		main_AddRoundKeyexiti_gep_int175_reg <= main_AddRoundKeyexiti_gep_int175;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array176 = mul i32 %182, 64*/
		main_AddRoundKeyexiti_gep_array176 = (main_AddRoundKeyexiti_182 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array176 = mul i32 %182, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		main_AddRoundKeyexiti_gep_array176_reg <= main_AddRoundKeyexiti_gep_array176;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array176_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep177 = add i32 %gep_int175, %gep_array176*/
		main_AddRoundKeyexiti_gep177 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep177 = add i32 %gep_int175, %gep_array176*/
	main_AddRoundKeyexiti_gep177_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array178 = mul i32 %181, 4*/
		main_AddRoundKeyexiti_gep_array178 = (main_AddRoundKeyexiti_181 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array178 = mul i32 %181, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		main_AddRoundKeyexiti_gep_array178_reg <= main_AddRoundKeyexiti_gep_array178;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep179 = add i32 %gep177, %gep_array178*/
		main_AddRoundKeyexiti_gep179 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep179 = add i32 %gep177, %gep_array178*/
	main_AddRoundKeyexiti_gep179_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %183 = inttoptr i32 %gep179 to i32**/
		main_AddRoundKeyexiti_183 = main_AddRoundKeyexiti_gep179;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %183 = inttoptr i32 %gep179 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_118)) begin
		main_AddRoundKeyexiti_183_reg <= main_AddRoundKeyexiti_183;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %184 = load i32* %183, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_184 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %184 = load i32* %183, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		main_AddRoundKeyexiti_184_reg <= main_AddRoundKeyexiti_184;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_184_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %185 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_185 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %185 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		main_AddRoundKeyexiti_185_reg <= main_AddRoundKeyexiti_185;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %186 = and i32 %185, 15*/
		main_AddRoundKeyexiti_186 = (main_AddRoundKeyexiti_185 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %186 = and i32 %185, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		main_AddRoundKeyexiti_186_reg <= main_AddRoundKeyexiti_186;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %187 = ashr i32 %185, 4*/
		main_AddRoundKeyexiti_187 = ($signed(main_AddRoundKeyexiti_185) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %187 = ashr i32 %185, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		main_AddRoundKeyexiti_187_reg <= main_AddRoundKeyexiti_187;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int180 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
if (reset) begin main_AddRoundKeyexiti_gep_int180 = 0; end
		main_AddRoundKeyexiti_gep_int180 = `TAG_g_Sbox_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_int180 = ptrtoint [16 x [16 x i32]]* @Sbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		main_AddRoundKeyexiti_gep_int180_reg <= main_AddRoundKeyexiti_gep_int180;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_int180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_int180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array181 = mul i32 %187, 64*/
		main_AddRoundKeyexiti_gep_array181 = (main_AddRoundKeyexiti_187 * 32'd64);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array181 = mul i32 %187, 64*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		main_AddRoundKeyexiti_gep_array181_reg <= main_AddRoundKeyexiti_gep_array181;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep182 = add i32 %gep_int180, %gep_array181*/
		main_AddRoundKeyexiti_gep182 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep182 = add i32 %gep_int180, %gep_array181*/
	main_AddRoundKeyexiti_gep182_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array183 = mul i32 %186, 4*/
		main_AddRoundKeyexiti_gep_array183 = (main_AddRoundKeyexiti_186 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep_array183 = mul i32 %186, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		main_AddRoundKeyexiti_gep_array183_reg <= main_AddRoundKeyexiti_gep_array183;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep_array183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_gep_array183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %gep184 = add i32 %gep182, %gep_array183*/
		main_AddRoundKeyexiti_gep184 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit.i*/
/*   %gep184 = add i32 %gep182, %gep_array183*/
	main_AddRoundKeyexiti_gep184_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %188 = inttoptr i32 %gep184 to i32**/
		main_AddRoundKeyexiti_188 = main_AddRoundKeyexiti_gep184;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %188 = inttoptr i32 %gep184 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_121)) begin
		main_AddRoundKeyexiti_188_reg <= main_AddRoundKeyexiti_188;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %189 = load i32* %188, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_189 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %189 = load i32* %188, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_123)) begin
		main_AddRoundKeyexiti_189_reg <= main_AddRoundKeyexiti_189;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %exitcond29 = icmp ne i32 %109, 10*/
		main_AddRoundKeyexiti_exitcond29 = (main_AddRoundKeyexiti_109 != 32'd10);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %exitcond29 = icmp ne i32 %109, 10*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		main_AddRoundKeyexiti_exitcond29_reg <= main_AddRoundKeyexiti_exitcond29;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_exitcond29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_exitcond29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %j.01.i2.i = phi i32 [ %215, %AddRoundKey.exit._crit_edge.i ], [ 0, %AddRoundKey.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_124) & (memory_controller_waitrequest == 1'd0)) & (main_AddRoundKeyexiti_exitcond29_reg == 1'd0))) begin
		main_AddRoundKeyexit_crit_edgei_j01i2i = 32'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %j.01.i2.i = phi i32 [ %215, %AddRoundKey.exit._crit_edge.i ], [ 0, %AddRoundKey.exit.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139) & (memory_controller_waitrequest == 1'd0)) & (main_AddRoundKeyexit_crit_edgei_exitcond28_reg == 1'd1))) */ begin
		main_AddRoundKeyexit_crit_edgei_j01i2i = main_AddRoundKeyexit_crit_edgei_215_reg;
	end
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %j.01.i2.i = phi i32 [ %215, %AddRoundKey.exit._crit_edge.i ], [ 0, %AddRoundKey.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_124) & (memory_controller_waitrequest == 1'd0)) & (main_AddRoundKeyexiti_exitcond29_reg == 1'd0))) begin
		main_AddRoundKeyexit_crit_edgei_j01i2i_reg <= main_AddRoundKeyexit_crit_edgei_j01i2i;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_j01i2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_j01i2i_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %j.01.i2.i = phi i32 [ %215, %AddRoundKey.exit._crit_edge.i ], [ 0, %AddRoundKey.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_139) & (memory_controller_waitrequest == 1'd0)) & (main_AddRoundKeyexit_crit_edgei_exitcond28_reg == 1'd1))) begin
		main_AddRoundKeyexit_crit_edgei_j01i2i_reg <= main_AddRoundKeyexit_crit_edgei_j01i2i;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_j01i2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_j01i2i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %190 = add nsw i32 %j.01.i2.i, 40*/
		main_AddRoundKeyexit_crit_edgei_190 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %190 = add nsw i32 %j.01.i2.i, 40*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexit_crit_edgei_190;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep187 = add i32 %gep_int185, %gep_array186*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_127)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexit_crit_edgei_gep187;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %gep214 = add i32 %gep_int212, %gep_array213*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_142)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_lrphi_gep214;
		if (start == 1'b0 && ^(main_lrphi_gep214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %236*/
	/*   %237 = add nsw i32 %j.01.i.i1, 40*/
	if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_236_237;
		if (start == 1'b0 && ^(main_236_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %236*/
	/*   %gep223 = add i32 %gep_int221, %gep_array222*/
	if ((cur_state == LEGUP_F_main_BB__236_158)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_236_gep223;
		if (start == 1'b0 && ^(main_236_gep223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %gep217 = add i32 %gep_int215, %gep_array216*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_preheaderi_gep217;
		if (start == 1'b0 && ^(main_preheaderi_gep217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep250 = add i32 %gep_int248, %gep_array249*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_lrph10ipreheader_gep250;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep260 = add i32 %gep_int258, %gep_array259*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_lrph10ipreheader_gep260;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep270 = add i32 %gep_int268, %gep_array269*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_lrph10ipreheader_gep270;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep280 = add i32 %gep_int278, %gep_array279*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_lrph10ipreheader_gep280;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep290 = add i32 %gep_int288, %gep_array289*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_lrph10ipreheader_gep290;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %2*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_2_gep;
		if (start == 1'b0 && ^(main_2_gep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep27 = add i32 %gep_int25, %gep_array26*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexitipreheader_gep27;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep37 = add i32 %gep_int35, %gep_array36*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexitipreheader_gep37;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep47 = add i32 %gep_int45, %gep_array46*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexitipreheader_gep47;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep57 = add i32 %gep_int55, %gep_array56*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexitipreheader_gep57;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep67 = add i32 %gep_int65, %gep_array66*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexitipreheader_gep67;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep77 = add i32 %gep_int75, %gep_array76*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexitipreheader_gep77;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep87 = add i32 %gep_int85, %gep_array86*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexitipreheader_gep87;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep97 = add i32 %gep_int95, %gep_array96*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexitipreheader_gep97;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep107 = add i32 %gep_int105, %gep_array106*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexiti_gep107;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep117 = add i32 %gep_int115, %gep_array116*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_88)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexiti_gep117;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep122 = add i32 %gep_int120, %gep_array121*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_90)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexiti_gep122;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep127 = add i32 %gep_int125, %gep_array126*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_94)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexiti_gep127;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep132 = add i32 %gep_int130, %gep_array131*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_95)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexiti_gep132;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep137 = add i32 %gep_int135, %gep_array136*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexiti_gep137;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep142 = add i32 %gep_int140, %gep_array141*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_99)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexiti_gep142;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep147 = add i32 %gep_int145, %gep_array146*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexiti_gep147;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep152 = add i32 %gep_int150, %gep_array151*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_103)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexiti_gep152;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep157 = add i32 %gep_int155, %gep_array156*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_106)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexiti_gep157;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep162 = add i32 %gep_int160, %gep_array161*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexiti_gep162;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep167 = add i32 %gep_int165, %gep_array166*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexiti_gep167;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep172 = add i32 %gep_int170, %gep_array171*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexiti_gep172;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep177 = add i32 %gep_int175, %gep_array176*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_118)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexiti_gep177;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep182 = add i32 %gep_int180, %gep_array181*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_121)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_AddRoundKeyexiti_gep182;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.preheader.loopexit.i11*/
	/*   %gep440 = add i32 %gep_int438, %gep_array439*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_260)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_preheaderloopexiti11_gep440;
		if (start == 1'b0 && ^(main_preheaderloopexiti11_gep440) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep300 = add i32 %gep_int298, %gep_array299*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_lrph10ipreheader_gep300;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep310 = add i32 %gep_int308, %gep_array309*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_lrph10ipreheader_gep310;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep320 = add i32 %gep_int318, %gep_array319*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_181)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_lrph10ipreheader_gep320;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep330 = add i32 %gep_int328, %gep_array329*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_lrph10i_gep330;
		if (start == 1'b0 && ^(main_lrph10i_gep330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep340 = add i32 %gep_int338, %gep_array339*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_209)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_lrph10i_gep340;
		if (start == 1'b0 && ^(main_lrph10i_gep340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep345 = add i32 %gep_int343, %gep_array344*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_210)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_lrph10i_gep345;
		if (start == 1'b0 && ^(main_lrph10i_gep345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep350 = add i32 %gep_int348, %gep_array349*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_211)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_lrph10i_gep350;
		if (start == 1'b0 && ^(main_lrph10i_gep350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep355 = add i32 %gep_int353, %gep_array354*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_215)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_lrph10i_gep355;
		if (start == 1'b0 && ^(main_lrph10i_gep355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep360 = add i32 %gep_int358, %gep_array359*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_lrph10i_gep360;
		if (start == 1'b0 && ^(main_lrph10i_gep360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep370 = add i32 %gep_int368, %gep_array369*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_220)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_lrph10i_gep370;
		if (start == 1'b0 && ^(main_lrph10i_gep370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep380 = add i32 %gep_int378, %gep_array379*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_222)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_lrph10i_gep380;
		if (start == 1'b0 && ^(main_lrph10i_gep380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep385 = add i32 %gep_int383, %gep_array384*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_223)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_lrph10i_gep385;
		if (start == 1'b0 && ^(main_lrph10i_gep385) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep390 = add i32 %gep_int388, %gep_array389*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_224)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_lrph10i_gep390;
		if (start == 1'b0 && ^(main_lrph10i_gep390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep395 = add i32 %gep_int393, %gep_array394*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_229)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_lrph10i_gep395;
		if (start == 1'b0 && ^(main_lrph10i_gep395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep400 = add i32 %gep_int398, %gep_array399*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_230)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_lrph10i_gep400;
		if (start == 1'b0 && ^(main_lrph10i_gep400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep405 = add i32 %gep_int403, %gep_array404*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_231)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_lrph10i_gep405;
		if (start == 1'b0 && ^(main_lrph10i_gep405) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %gep410 = add i32 %gep_int408, %gep_array409*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main__crit_edgei_gep410;
		if (start == 1'b0 && ^(main__crit_edgei_gep410) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
	/* main: %.lr.ph.i14*/
	/*   %gep437 = add i32 %gep_int435, %gep_array436*/
	if ((cur_state == LEGUP_F_main_BB_lrphi14_252)) begin
		main_AddRoundKeyexit_crit_edgei_190_reg <= main_lrphi14_gep437;
		if (start == 1'b0 && ^(main_lrphi14_gep437) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int185 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_AddRoundKeyexit_crit_edgei_gep_int185 = 0; end
		main_AddRoundKeyexit_crit_edgei_gep_int185 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int185 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_AddRoundKeyexit_crit_edgei_gep_int185_reg <= main_AddRoundKeyexit_crit_edgei_gep_int185;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_int185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_int185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array186 = mul i32 %190, 4*/
		main_AddRoundKeyexit_crit_edgei_gep_array186 = (main_AddRoundKeyexit_crit_edgei_190_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array186 = mul i32 %190, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		main_AddRoundKeyexit_crit_edgei_gep_array186_reg <= main_AddRoundKeyexit_crit_edgei_gep_array186;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_array186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_array186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep187 = add i32 %gep_int185, %gep_array186*/
		main_AddRoundKeyexit_crit_edgei_gep187 = main_signed_add_32_0;
end
always @(*) begin
/* main: %AddRoundKey.exit._crit_edge.i*/
/*   %gep187 = add i32 %gep_int185, %gep_array186*/
	main_AddRoundKeyexit_crit_edgei_gep187_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %191 = inttoptr i32 %gep187 to i32**/
		main_AddRoundKeyexit_crit_edgei_191 = main_AddRoundKeyexit_crit_edgei_gep187;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %191 = inttoptr i32 %gep187 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_127)) begin
		main_AddRoundKeyexit_crit_edgei_191_reg <= main_AddRoundKeyexit_crit_edgei_191;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %192 = load i32* %191, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_192 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %192 = load i32* %191, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_129)) begin
		main_AddRoundKeyexit_crit_edgei_192_reg <= main_AddRoundKeyexit_crit_edgei_192;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %193 = shl nsw i32 %j.01.i2.i, 2*/
		main_AddRoundKeyexit_crit_edgei_193 = (main_AddRoundKeyexit_crit_edgei_j01i2i_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %193 = shl nsw i32 %j.01.i2.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_AddRoundKeyexit_crit_edgei_193_reg <= main_AddRoundKeyexit_crit_edgei_193;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int188 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_AddRoundKeyexit_crit_edgei_gep_int188 = 0; end
		main_AddRoundKeyexit_crit_edgei_gep_int188 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int188 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_AddRoundKeyexit_crit_edgei_gep_int188_reg <= main_AddRoundKeyexit_crit_edgei_gep_int188;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_int188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_int188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array189 = mul i32 %193, 4*/
		main_AddRoundKeyexit_crit_edgei_gep_array189 = (main_AddRoundKeyexit_crit_edgei_193 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array189 = mul i32 %193, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_AddRoundKeyexit_crit_edgei_gep_array189_reg <= main_AddRoundKeyexit_crit_edgei_gep_array189;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_array189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_array189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep190 = add i32 %gep_int188, %gep_array189*/
		main_AddRoundKeyexit_crit_edgei_gep190 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep190 = add i32 %gep_int188, %gep_array189*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		main_AddRoundKeyexit_crit_edgei_gep190_reg <= main_AddRoundKeyexit_crit_edgei_gep190;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep190_reg"); $finish; end
	end
	/* main: %236*/
	/*   %gep226 = add i32 %gep_int224, %gep_array225*/
	if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		main_AddRoundKeyexit_crit_edgei_gep190_reg <= main_236_gep226;
		if (start == 1'b0 && ^(main_236_gep226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep190_reg"); $finish; end
	end
	/* main: %2*/
	/*   %gep5 = add i32 %gep_int4, 480*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_AddRoundKeyexit_crit_edgei_gep190_reg <= main_2_gep5;
		if (start == 1'b0 && ^(main_2_gep5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep190_reg"); $finish; end
	end
	/* main: %.preheader.loopexit.i11*/
	/*   %467 = add nsw i32 %466, %460*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_262)) begin
		main_AddRoundKeyexit_crit_edgei_gep190_reg <= main_preheaderloopexiti11_467;
		if (start == 1'b0 && ^(main_preheaderloopexiti11_467) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep190_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %gep415 = add i32 %gep_int414, 480*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main_AddRoundKeyexit_crit_edgei_gep190_reg <= main__crit_edgei_gep415;
		if (start == 1'b0 && ^(main__crit_edgei_gep415) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %194 = inttoptr i32 %gep190 to i32**/
		main_AddRoundKeyexit_crit_edgei_194 = main_AddRoundKeyexit_crit_edgei_gep190;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %194 = inttoptr i32 %gep190 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		main_AddRoundKeyexit_crit_edgei_194_reg <= main_AddRoundKeyexit_crit_edgei_194;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_194_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %195 = load i32* %194, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_195 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %195 = load i32* %194, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_128)) begin
		main_AddRoundKeyexit_crit_edgei_195_reg <= main_AddRoundKeyexit_crit_edgei_195;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %196 = xor i32 %195, %192*/
		main_AddRoundKeyexit_crit_edgei_196 = (main_AddRoundKeyexit_crit_edgei_195_reg ^ main_AddRoundKeyexit_crit_edgei_192);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %196 = xor i32 %195, %192*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_129)) begin
		main_AddRoundKeyexit_crit_edgei_196_reg <= main_AddRoundKeyexit_crit_edgei_196;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int191 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_AddRoundKeyexit_crit_edgei_gep_int191 = 0; end
		main_AddRoundKeyexit_crit_edgei_gep_int191 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int191 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_AddRoundKeyexit_crit_edgei_gep_int191_reg <= main_AddRoundKeyexit_crit_edgei_gep_int191;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_int191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_int191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep192 = add i32 %gep_int191, 480*/
		main_AddRoundKeyexit_crit_edgei_gep192 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep192 = add i32 %gep_int191, 480*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexit_crit_edgei_gep192;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %236*/
	/*   %gep228 = add i32 %gep_int227, 480*/
	if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_236_gep228;
		if (start == 1'b0 && ^(main_236_gep228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %gep220 = add i32 %gep_int218, %gep_array219*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_preheaderi_gep220;
		if (start == 1'b0 && ^(main_preheaderi_gep220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep252 = add i32 %gep250, %gep_array251*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_lrph10ipreheader_gep252;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep262 = add i32 %gep260, %gep_array261*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_lrph10ipreheader_gep262;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep272 = add i32 %gep270, %gep_array271*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_lrph10ipreheader_gep272;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep282 = add i32 %gep280, %gep_array281*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_lrph10ipreheader_gep282;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep292 = add i32 %gep290, %gep_array291*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_lrph10ipreheader_gep292;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %2*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_2_gep3;
		if (start == 1'b0 && ^(main_2_gep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep29 = add i32 %gep27, %gep_array28*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexitipreheader_gep29;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep39 = add i32 %gep37, %gep_array38*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexitipreheader_gep39;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep49 = add i32 %gep47, %gep_array48*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexitipreheader_gep49;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep59 = add i32 %gep57, %gep_array58*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexitipreheader_gep59;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep69 = add i32 %gep67, %gep_array68*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexitipreheader_gep69;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep79 = add i32 %gep77, %gep_array78*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexitipreheader_gep79;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep89 = add i32 %gep87, %gep_array88*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexitipreheader_gep89;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep99 = add i32 %gep97, %gep_array98*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexitipreheader_gep99;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep109 = add i32 %gep107, %gep_array108*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexiti_gep109;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep119 = add i32 %gep117, %gep_array118*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_88)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexiti_gep119;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep124 = add i32 %gep122, %gep_array123*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_90)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexiti_gep124;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep129 = add i32 %gep127, %gep_array128*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_94)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexiti_gep129;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep134 = add i32 %gep132, %gep_array133*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_95)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexiti_gep134;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep139 = add i32 %gep137, %gep_array138*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexiti_gep139;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep144 = add i32 %gep142, %gep_array143*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_99)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexiti_gep144;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep149 = add i32 %gep147, %gep_array148*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexiti_gep149;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep154 = add i32 %gep152, %gep_array153*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_103)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexiti_gep154;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep159 = add i32 %gep157, %gep_array158*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_106)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexiti_gep159;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep164 = add i32 %gep162, %gep_array163*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexiti_gep164;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep169 = add i32 %gep167, %gep_array168*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexiti_gep169;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep174 = add i32 %gep172, %gep_array173*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexiti_gep174;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep179 = add i32 %gep177, %gep_array178*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_118)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexiti_gep179;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep184 = add i32 %gep182, %gep_array183*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_121)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_AddRoundKeyexiti_gep184;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %.preheader.loopexit.i11*/
	/*   %gep443 = add i32 %gep_int441, %gep_array442*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_260)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_preheaderloopexiti11_gep443;
		if (start == 1'b0 && ^(main_preheaderloopexiti11_gep443) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep302 = add i32 %gep300, %gep_array301*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_lrph10ipreheader_gep302;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep312 = add i32 %gep310, %gep_array311*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_lrph10ipreheader_gep312;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep322 = add i32 %gep320, %gep_array321*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_181)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_lrph10ipreheader_gep322;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep332 = add i32 %gep330, %gep_array331*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_lrph10i_gep332;
		if (start == 1'b0 && ^(main_lrph10i_gep332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep342 = add i32 %gep340, %gep_array341*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_209)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_lrph10i_gep342;
		if (start == 1'b0 && ^(main_lrph10i_gep342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep347 = add i32 %gep345, %gep_array346*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_210)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_lrph10i_gep347;
		if (start == 1'b0 && ^(main_lrph10i_gep347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep352 = add i32 %gep350, %gep_array351*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_211)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_lrph10i_gep352;
		if (start == 1'b0 && ^(main_lrph10i_gep352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep357 = add i32 %gep355, %gep_array356*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_215)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_lrph10i_gep357;
		if (start == 1'b0 && ^(main_lrph10i_gep357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep362 = add i32 %gep360, %gep_array361*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_lrph10i_gep362;
		if (start == 1'b0 && ^(main_lrph10i_gep362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep372 = add i32 %gep370, %gep_array371*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_220)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_lrph10i_gep372;
		if (start == 1'b0 && ^(main_lrph10i_gep372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep382 = add i32 %gep380, %gep_array381*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_222)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_lrph10i_gep382;
		if (start == 1'b0 && ^(main_lrph10i_gep382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep387 = add i32 %gep385, %gep_array386*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_223)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_lrph10i_gep387;
		if (start == 1'b0 && ^(main_lrph10i_gep387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep392 = add i32 %gep390, %gep_array391*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_224)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_lrph10i_gep392;
		if (start == 1'b0 && ^(main_lrph10i_gep392) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep397 = add i32 %gep395, %gep_array396*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_229)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_lrph10i_gep397;
		if (start == 1'b0 && ^(main_lrph10i_gep397) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep402 = add i32 %gep400, %gep_array401*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_230)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_lrph10i_gep402;
		if (start == 1'b0 && ^(main_lrph10i_gep402) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep407 = add i32 %gep405, %gep_array406*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_231)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main_lrph10i_gep407;
		if (start == 1'b0 && ^(main_lrph10i_gep407) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %gep413 = add i32 %gep_int411, %gep_array412*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		main_AddRoundKeyexit_crit_edgei_gep192_reg <= main__crit_edgei_gep413;
		if (start == 1'b0 && ^(main__crit_edgei_gep413) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array193 = mul i32 %190, 4*/
		main_AddRoundKeyexit_crit_edgei_gep_array193 = (main_AddRoundKeyexit_crit_edgei_190_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array193 = mul i32 %190, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		main_AddRoundKeyexit_crit_edgei_gep_array193_reg <= main_AddRoundKeyexit_crit_edgei_gep_array193;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_array193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_array193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep194 = add i32 %gep192, %gep_array193*/
		main_AddRoundKeyexit_crit_edgei_gep194 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep194 = add i32 %gep192, %gep_array193*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_127)) begin
		main_AddRoundKeyexit_crit_edgei_gep194_reg <= main_AddRoundKeyexit_crit_edgei_gep194;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep194_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep197 = add i32 %gep_int195, %gep_array196*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		main_AddRoundKeyexit_crit_edgei_gep194_reg <= main_AddRoundKeyexit_crit_edgei_gep197;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep194_reg"); $finish; end
	end
	/* main: %236*/
	/*   %gep230 = add i32 %gep228, %gep_array229*/
	if ((cur_state == LEGUP_F_main_BB__236_158)) begin
		main_AddRoundKeyexit_crit_edgei_gep194_reg <= main_236_gep230;
		if (start == 1'b0 && ^(main_236_gep230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep194_reg"); $finish; end
	end
	/* main: %236*/
	/*   %gep233 = add i32 %gep_int231, %gep_array232*/
	if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		main_AddRoundKeyexit_crit_edgei_gep194_reg <= main_236_gep233;
		if (start == 1'b0 && ^(main_236_gep233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep194_reg"); $finish; end
	end
	/* main: %2*/
	/*   %gep12 = add i32 %gep_int11, 960*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_AddRoundKeyexit_crit_edgei_gep194_reg <= main_2_gep12;
		if (start == 1'b0 && ^(main_2_gep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep194_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %gep422 = add i32 %gep_int421, 960*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main_AddRoundKeyexit_crit_edgei_gep194_reg <= main__crit_edgei_gep422;
		if (start == 1'b0 && ^(main__crit_edgei_gep422) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep194_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %197 = inttoptr i32 %gep194 to i32**/
		main_AddRoundKeyexit_crit_edgei_197 = main_AddRoundKeyexit_crit_edgei_gep194;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %197 = inttoptr i32 %gep194 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_127)) begin
		main_AddRoundKeyexit_crit_edgei_197_reg <= main_AddRoundKeyexit_crit_edgei_197;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_197_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %198 = load i32* %197, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_198 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %198 = load i32* %197, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_132)) begin
		main_AddRoundKeyexit_crit_edgei_198_reg <= main_AddRoundKeyexit_crit_edgei_198;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_198_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %199 = or i32 %193, 1*/
		main_AddRoundKeyexit_crit_edgei_199 = (main_AddRoundKeyexit_crit_edgei_193 | 32'd1);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %199 = or i32 %193, 1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_AddRoundKeyexit_crit_edgei_199_reg <= main_AddRoundKeyexit_crit_edgei_199;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int195 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_AddRoundKeyexit_crit_edgei_gep_int195 = 0; end
		main_AddRoundKeyexit_crit_edgei_gep_int195 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int195 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_AddRoundKeyexit_crit_edgei_gep_int195_reg <= main_AddRoundKeyexit_crit_edgei_gep_int195;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_int195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_int195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array196 = mul i32 %199, 4*/
		main_AddRoundKeyexit_crit_edgei_gep_array196 = (main_AddRoundKeyexit_crit_edgei_199 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array196 = mul i32 %199, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_AddRoundKeyexit_crit_edgei_gep_array196_reg <= main_AddRoundKeyexit_crit_edgei_gep_array196;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_array196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_array196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep197 = add i32 %gep_int195, %gep_array196*/
		main_AddRoundKeyexit_crit_edgei_gep197 = main_signed_add_32_1;
end
always @(*) begin
/* main: %AddRoundKey.exit._crit_edge.i*/
/*   %gep197 = add i32 %gep_int195, %gep_array196*/
	main_AddRoundKeyexit_crit_edgei_gep197_reg = main_AddRoundKeyexit_crit_edgei_gep194_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %200 = inttoptr i32 %gep197 to i32**/
		main_AddRoundKeyexit_crit_edgei_200 = main_AddRoundKeyexit_crit_edgei_gep197;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %200 = inttoptr i32 %gep197 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		main_AddRoundKeyexit_crit_edgei_200_reg <= main_AddRoundKeyexit_crit_edgei_200;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %201 = load i32* %200, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_201 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %201 = load i32* %200, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_132)) begin
		main_AddRoundKeyexit_crit_edgei_201_reg <= main_AddRoundKeyexit_crit_edgei_201;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %202 = xor i32 %201, %198*/
		main_AddRoundKeyexit_crit_edgei_202 = (main_AddRoundKeyexit_crit_edgei_201 ^ main_AddRoundKeyexit_crit_edgei_198);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %202 = xor i32 %201, %198*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_132)) begin
		main_AddRoundKeyexit_crit_edgei_202_reg <= main_AddRoundKeyexit_crit_edgei_202;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int198 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_AddRoundKeyexit_crit_edgei_gep_int198 = 0; end
		main_AddRoundKeyexit_crit_edgei_gep_int198 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int198 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_AddRoundKeyexit_crit_edgei_gep_int198_reg <= main_AddRoundKeyexit_crit_edgei_gep_int198;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_int198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_int198_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep199 = add i32 %gep_int198, 960*/
		main_AddRoundKeyexit_crit_edgei_gep199 = main_signed_add_32_2;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep199 = add i32 %gep_int198, 960*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main_AddRoundKeyexit_crit_edgei_gep199;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
	/* main: %236*/
	/*   %gep235 = add i32 %gep_int234, 960*/
	if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main_236_gep235;
		if (start == 1'b0 && ^(main_236_gep235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep255 = add i32 %gep_int253, %gep_array254*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main_lrph10ipreheader_gep255;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep265 = add i32 %gep_int263, %gep_array264*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main_lrph10ipreheader_gep265;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep275 = add i32 %gep_int273, %gep_array274*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main_lrph10ipreheader_gep275;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep285 = add i32 %gep_int283, %gep_array284*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main_lrph10ipreheader_gep285;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
	/* main: %2*/
	/*   %gep7 = add i32 %gep5, %gep_array6*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main_2_gep7;
		if (start == 1'b0 && ^(main_2_gep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep32 = add i32 %gep_int30, %gep_array31*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main_AddRoundKeyexitipreheader_gep32;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep42 = add i32 %gep_int40, %gep_array41*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main_AddRoundKeyexitipreheader_gep42;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep52 = add i32 %gep_int50, %gep_array51*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main_AddRoundKeyexitipreheader_gep52;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep62 = add i32 %gep_int60, %gep_array61*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main_AddRoundKeyexitipreheader_gep62;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep72 = add i32 %gep_int70, %gep_array71*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main_AddRoundKeyexitipreheader_gep72;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep82 = add i32 %gep_int80, %gep_array81*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main_AddRoundKeyexitipreheader_gep82;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep92 = add i32 %gep_int90, %gep_array91*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main_AddRoundKeyexitipreheader_gep92;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep102 = add i32 %gep_int100, %gep_array101*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main_AddRoundKeyexitipreheader_gep102;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep112 = add i32 %gep_int110, %gep_array111*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main_AddRoundKeyexiti_gep112;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep295 = add i32 %gep_int293, %gep_array294*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main_lrph10ipreheader_gep295;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep305 = add i32 %gep_int303, %gep_array304*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main_lrph10ipreheader_gep305;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep315 = add i32 %gep_int313, %gep_array314*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main_lrph10ipreheader_gep315;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep325 = add i32 %gep_int323, %gep_array324*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_181)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main_lrph10ipreheader_gep325;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep335 = add i32 %gep_int333, %gep_array334*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main_lrph10i_gep335;
		if (start == 1'b0 && ^(main_lrph10i_gep335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep365 = add i32 %gep_int363, %gep_array364*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main_lrph10i_gep365;
		if (start == 1'b0 && ^(main_lrph10i_gep365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep375 = add i32 %gep_int373, %gep_array374*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_220)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main_lrph10i_gep375;
		if (start == 1'b0 && ^(main_lrph10i_gep375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %gep417 = add i32 %gep415, %gep_array416*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		main_AddRoundKeyexit_crit_edgei_gep199_reg <= main__crit_edgei_gep417;
		if (start == 1'b0 && ^(main__crit_edgei_gep417) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array200 = mul i32 %190, 4*/
		main_AddRoundKeyexit_crit_edgei_gep_array200 = (main_AddRoundKeyexit_crit_edgei_190_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array200 = mul i32 %190, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		main_AddRoundKeyexit_crit_edgei_gep_array200_reg <= main_AddRoundKeyexit_crit_edgei_gep_array200;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_array200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_array200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep201 = add i32 %gep199, %gep_array200*/
		main_AddRoundKeyexit_crit_edgei_gep201 = main_signed_add_32_2;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep201 = add i32 %gep199, %gep_array200*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_127)) begin
		main_AddRoundKeyexit_crit_edgei_gep201_reg <= main_AddRoundKeyexit_crit_edgei_gep201;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep201_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep204 = add i32 %gep_int202, %gep_array203*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		main_AddRoundKeyexit_crit_edgei_gep201_reg <= main_AddRoundKeyexit_crit_edgei_gep204;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep201_reg"); $finish; end
	end
	/* main: %236*/
	/*   %gep237 = add i32 %gep235, %gep_array236*/
	if ((cur_state == LEGUP_F_main_BB__236_158)) begin
		main_AddRoundKeyexit_crit_edgei_gep201_reg <= main_236_gep237;
		if (start == 1'b0 && ^(main_236_gep237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep201_reg"); $finish; end
	end
	/* main: %2*/
	/*   %gep19 = add i32 %gep_int18, 1440*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_AddRoundKeyexit_crit_edgei_gep201_reg <= main_2_gep19;
		if (start == 1'b0 && ^(main_2_gep19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep201_reg"); $finish; end
	end
	/* main: %236*/
	/*   %gep240 = add i32 %gep_int238, %gep_array239*/
	if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		main_AddRoundKeyexit_crit_edgei_gep201_reg <= main_236_gep240;
		if (start == 1'b0 && ^(main_236_gep240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep201_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %gep429 = add i32 %gep_int428, 1440*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main_AddRoundKeyexit_crit_edgei_gep201_reg <= main__crit_edgei_gep429;
		if (start == 1'b0 && ^(main__crit_edgei_gep429) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %203 = inttoptr i32 %gep201 to i32**/
		main_AddRoundKeyexit_crit_edgei_203 = main_AddRoundKeyexit_crit_edgei_gep201;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %203 = inttoptr i32 %gep201 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_127)) begin
		main_AddRoundKeyexit_crit_edgei_203_reg <= main_AddRoundKeyexit_crit_edgei_203;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %204 = load i32* %203, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_204 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %204 = load i32* %203, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_135)) begin
		main_AddRoundKeyexit_crit_edgei_204_reg <= main_AddRoundKeyexit_crit_edgei_204;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %205 = or i32 %193, 2*/
		main_AddRoundKeyexit_crit_edgei_205 = (main_AddRoundKeyexit_crit_edgei_193 | 32'd2);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %205 = or i32 %193, 2*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_AddRoundKeyexit_crit_edgei_205_reg <= main_AddRoundKeyexit_crit_edgei_205;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int202 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_AddRoundKeyexit_crit_edgei_gep_int202 = 0; end
		main_AddRoundKeyexit_crit_edgei_gep_int202 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int202 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_AddRoundKeyexit_crit_edgei_gep_int202_reg <= main_AddRoundKeyexit_crit_edgei_gep_int202;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_int202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_int202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array203 = mul i32 %205, 4*/
		main_AddRoundKeyexit_crit_edgei_gep_array203 = (main_AddRoundKeyexit_crit_edgei_205 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array203 = mul i32 %205, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_AddRoundKeyexit_crit_edgei_gep_array203_reg <= main_AddRoundKeyexit_crit_edgei_gep_array203;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_array203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_array203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep204 = add i32 %gep_int202, %gep_array203*/
		main_AddRoundKeyexit_crit_edgei_gep204 = main_signed_add_32_2;
end
always @(*) begin
/* main: %AddRoundKey.exit._crit_edge.i*/
/*   %gep204 = add i32 %gep_int202, %gep_array203*/
	main_AddRoundKeyexit_crit_edgei_gep204_reg = main_AddRoundKeyexit_crit_edgei_gep201_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %206 = inttoptr i32 %gep204 to i32**/
		main_AddRoundKeyexit_crit_edgei_206 = main_AddRoundKeyexit_crit_edgei_gep204;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %206 = inttoptr i32 %gep204 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		main_AddRoundKeyexit_crit_edgei_206_reg <= main_AddRoundKeyexit_crit_edgei_206;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_206_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %207 = load i32* %206, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_207 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %207 = load i32* %206, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_135)) begin
		main_AddRoundKeyexit_crit_edgei_207_reg <= main_AddRoundKeyexit_crit_edgei_207;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %208 = xor i32 %207, %204*/
		main_AddRoundKeyexit_crit_edgei_208 = (main_AddRoundKeyexit_crit_edgei_207 ^ main_AddRoundKeyexit_crit_edgei_204);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %208 = xor i32 %207, %204*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_135)) begin
		main_AddRoundKeyexit_crit_edgei_208_reg <= main_AddRoundKeyexit_crit_edgei_208;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int205 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_AddRoundKeyexit_crit_edgei_gep_int205 = 0; end
		main_AddRoundKeyexit_crit_edgei_gep_int205 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int205 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_AddRoundKeyexit_crit_edgei_gep_int205_reg <= main_AddRoundKeyexit_crit_edgei_gep_int205;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_int205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_int205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep206 = add i32 %gep_int205, 1440*/
		main_AddRoundKeyexit_crit_edgei_gep206 = main_signed_add_32_3;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep206 = add i32 %gep_int205, 1440*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main_AddRoundKeyexit_crit_edgei_gep206;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
	/* main: %236*/
	/*   %gep242 = add i32 %gep_int241, 1440*/
	if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main_236_gep242;
		if (start == 1'b0 && ^(main_236_gep242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep257 = add i32 %gep255, %gep_array256*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main_lrph10ipreheader_gep257;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep267 = add i32 %gep265, %gep_array266*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main_lrph10ipreheader_gep267;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep277 = add i32 %gep275, %gep_array276*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main_lrph10ipreheader_gep277;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep287 = add i32 %gep285, %gep_array286*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main_lrph10ipreheader_gep287;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
	/* main: %2*/
	/*   %gep10 = add i32 %gep_int8, %gep_array9*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main_2_gep10;
		if (start == 1'b0 && ^(main_2_gep10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep34 = add i32 %gep32, %gep_array33*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main_AddRoundKeyexitipreheader_gep34;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep44 = add i32 %gep42, %gep_array43*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main_AddRoundKeyexitipreheader_gep44;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep54 = add i32 %gep52, %gep_array53*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main_AddRoundKeyexitipreheader_gep54;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep64 = add i32 %gep62, %gep_array63*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main_AddRoundKeyexitipreheader_gep64;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep74 = add i32 %gep72, %gep_array73*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main_AddRoundKeyexitipreheader_gep74;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep84 = add i32 %gep82, %gep_array83*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main_AddRoundKeyexitipreheader_gep84;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep94 = add i32 %gep92, %gep_array93*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main_AddRoundKeyexitipreheader_gep94;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep104 = add i32 %gep102, %gep_array103*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main_AddRoundKeyexitipreheader_gep104;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_gep104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep114 = add i32 %gep112, %gep_array113*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main_AddRoundKeyexiti_gep114;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_gep114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep297 = add i32 %gep295, %gep_array296*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main_lrph10ipreheader_gep297;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep307 = add i32 %gep305, %gep_array306*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main_lrph10ipreheader_gep307;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep317 = add i32 %gep315, %gep_array316*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main_lrph10ipreheader_gep317;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep327 = add i32 %gep325, %gep_array326*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_181)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main_lrph10ipreheader_gep327;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep337 = add i32 %gep335, %gep_array336*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main_lrph10i_gep337;
		if (start == 1'b0 && ^(main_lrph10i_gep337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep367 = add i32 %gep365, %gep_array366*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main_lrph10i_gep367;
		if (start == 1'b0 && ^(main_lrph10i_gep367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %gep377 = add i32 %gep375, %gep_array376*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_220)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main_lrph10i_gep377;
		if (start == 1'b0 && ^(main_lrph10i_gep377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %gep420 = add i32 %gep_int418, %gep_array419*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		main_AddRoundKeyexit_crit_edgei_gep206_reg <= main__crit_edgei_gep420;
		if (start == 1'b0 && ^(main__crit_edgei_gep420) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep206_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array207 = mul i32 %190, 4*/
		main_AddRoundKeyexit_crit_edgei_gep_array207 = (main_AddRoundKeyexit_crit_edgei_190_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array207 = mul i32 %190, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		main_AddRoundKeyexit_crit_edgei_gep_array207_reg <= main_AddRoundKeyexit_crit_edgei_gep_array207;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_array207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_array207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep208 = add i32 %gep206, %gep_array207*/
		main_AddRoundKeyexit_crit_edgei_gep208 = main_signed_add_32_3;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep208 = add i32 %gep206, %gep_array207*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_127)) begin
		main_AddRoundKeyexit_crit_edgei_gep208_reg <= main_AddRoundKeyexit_crit_edgei_gep208;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep208_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep211 = add i32 %gep_int209, %gep_array210*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		main_AddRoundKeyexit_crit_edgei_gep208_reg <= main_AddRoundKeyexit_crit_edgei_gep211;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep208_reg"); $finish; end
	end
	/* main: %236*/
	/*   %gep244 = add i32 %gep242, %gep_array243*/
	if ((cur_state == LEGUP_F_main_BB__236_158)) begin
		main_AddRoundKeyexit_crit_edgei_gep208_reg <= main_236_gep244;
		if (start == 1'b0 && ^(main_236_gep244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep208_reg"); $finish; end
	end
	/* main: %236*/
	/*   %gep247 = add i32 %gep_int245, %gep_array246*/
	if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		main_AddRoundKeyexit_crit_edgei_gep208_reg <= main_236_gep247;
		if (start == 1'b0 && ^(main_236_gep247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep208_reg"); $finish; end
	end
	/* main: %2*/
	/*   %27 = add nsw i32 %j.01.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_AddRoundKeyexit_crit_edgei_gep208_reg <= main_2_27;
		if (start == 1'b0 && ^(main_2_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %209 = inttoptr i32 %gep208 to i32**/
		main_AddRoundKeyexit_crit_edgei_209 = main_AddRoundKeyexit_crit_edgei_gep208;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %209 = inttoptr i32 %gep208 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_127)) begin
		main_AddRoundKeyexit_crit_edgei_209_reg <= main_AddRoundKeyexit_crit_edgei_209;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_209_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %210 = load i32* %209, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_210 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %210 = load i32* %209, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_138)) begin
		main_AddRoundKeyexit_crit_edgei_210_reg <= main_AddRoundKeyexit_crit_edgei_210;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %211 = or i32 %193, 3*/
		main_AddRoundKeyexit_crit_edgei_211 = (main_AddRoundKeyexit_crit_edgei_193 | 32'd3);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %211 = or i32 %193, 3*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_AddRoundKeyexit_crit_edgei_211_reg <= main_AddRoundKeyexit_crit_edgei_211;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int209 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_AddRoundKeyexit_crit_edgei_gep_int209 = 0; end
		main_AddRoundKeyexit_crit_edgei_gep_int209 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_int209 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_AddRoundKeyexit_crit_edgei_gep_int209_reg <= main_AddRoundKeyexit_crit_edgei_gep_int209;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_int209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_int209_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array210 = mul i32 %211, 4*/
		main_AddRoundKeyexit_crit_edgei_gep_array210 = (main_AddRoundKeyexit_crit_edgei_211 * 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep_array210 = mul i32 %211, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_AddRoundKeyexit_crit_edgei_gep_array210_reg <= main_AddRoundKeyexit_crit_edgei_gep_array210;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_gep_array210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_gep_array210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep211 = add i32 %gep_int209, %gep_array210*/
		main_AddRoundKeyexit_crit_edgei_gep211 = main_signed_add_32_3;
end
always @(*) begin
/* main: %AddRoundKey.exit._crit_edge.i*/
/*   %gep211 = add i32 %gep_int209, %gep_array210*/
	main_AddRoundKeyexit_crit_edgei_gep211_reg = main_AddRoundKeyexit_crit_edgei_gep208_reg;
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %212 = inttoptr i32 %gep211 to i32**/
		main_AddRoundKeyexit_crit_edgei_212 = main_AddRoundKeyexit_crit_edgei_gep211;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %212 = inttoptr i32 %gep211 to i32**/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		main_AddRoundKeyexit_crit_edgei_212_reg <= main_AddRoundKeyexit_crit_edgei_212;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_212_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_213 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_138)) begin
		main_AddRoundKeyexit_crit_edgei_213_reg <= main_AddRoundKeyexit_crit_edgei_213;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_213_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %214 = xor i32 %213, %210*/
		main_AddRoundKeyexit_crit_edgei_214 = (main_AddRoundKeyexit_crit_edgei_213 ^ main_AddRoundKeyexit_crit_edgei_210);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %214 = xor i32 %213, %210*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_138)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexit_crit_edgei_214;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %215 = add nsw i32 %j.01.i2.i, 1*/
		main_AddRoundKeyexit_crit_edgei_215 = main_signed_add_32_7;
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %215 = add nsw i32 %j.01.i2.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_AddRoundKeyexit_crit_edgei_215_reg <= main_AddRoundKeyexit_crit_edgei_215;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_215_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %gep434 = add i32 %gep_int432, %gep_array433*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		main_AddRoundKeyexit_crit_edgei_215_reg <= main__crit_edgei_gep434;
		if (start == 1'b0 && ^(main__crit_edgei_gep434) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_215_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %exitcond28 = icmp ne i32 %215, 4*/
		main_AddRoundKeyexit_crit_edgei_exitcond28 = (main_AddRoundKeyexit_crit_edgei_215 != 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %exitcond28 = icmp ne i32 %215, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_AddRoundKeyexit_crit_edgei_exitcond28_reg <= main_AddRoundKeyexit_crit_edgei_exitcond28;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_exitcond28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_exitcond28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %i.17.i = phi i32 [ %225, %222 ], [ 0, %.lr.ph.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_140) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_i17i = 32'd0;
	end
	/* main: %.lr.ph.i*/
	/*   %i.17.i = phi i32 [ %225, %222 ], [ 0, %.lr.ph.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__222_148) & (memory_controller_waitrequest == 1'd0)) & (main_222_exitcond27 == 1'd1))) */ begin
		main_lrphi_i17i = main_222_225;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %i.17.i = phi i32 [ %225, %222 ], [ 0, %.lr.ph.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_140) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_i17i_reg <= main_lrphi_i17i;
		if (start == 1'b0 && ^(main_lrphi_i17i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_i17i_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %i.17.i = phi i32 [ %225, %222 ], [ 0, %.lr.ph.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__222_148) & (memory_controller_waitrequest == 1'd0)) & (main_222_exitcond27 == 1'd1))) begin
		main_lrphi_i17i_reg <= main_lrphi_i17i;
		if (start == 1'b0 && ^(main_lrphi_i17i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_i17i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %gep_int212 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_lrphi_gep_int212 = 0; end
		main_lrphi_gep_int212 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %gep_int212 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_141)) begin
		main_lrphi_gep_int212_reg <= main_lrphi_gep_int212;
		if (start == 1'b0 && ^(main_lrphi_gep_int212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_gep_int212_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %gep_array213 = mul i32 %i.17.i, 4*/
		main_lrphi_gep_array213 = (main_lrphi_i17i_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %gep_array213 = mul i32 %i.17.i, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_141)) begin
		main_lrphi_gep_array213_reg <= main_lrphi_gep_array213;
		if (start == 1'b0 && ^(main_lrphi_gep_array213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_gep_array213_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %gep214 = add i32 %gep_int212, %gep_array213*/
		main_lrphi_gep214 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph.i*/
/*   %gep214 = add i32 %gep_int212, %gep_array213*/
	main_lrphi_gep214_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %217 = inttoptr i32 %gep214 to i32**/
		main_lrphi_217 = main_lrphi_gep214;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %217 = inttoptr i32 %gep214 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrphi_142)) begin
		main_lrphi_217_reg <= main_lrphi_217;
		if (start == 1'b0 && ^(main_lrphi_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_217_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %218 = load i32* %217, align 4, !tbaa !1*/
		main_lrphi_218 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %218 = load i32* %217, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_144)) begin
		main_lrphi_218_reg <= main_lrphi_218;
		if (start == 1'b0 && ^(main_lrphi_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_218_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %219 = icmp slt i32 %218, 16*/
		main_lrphi_219 = ($signed(main_lrphi_218) < $signed(32'd16));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %219 = icmp slt i32 %218, 16*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_144)) begin
		main_lrphi_219_reg <= main_lrphi_219;
		if (start == 1'b0 && ^(main_lrphi_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_219_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %220*/
	/*   %.pre.i = load i32* %217, align 4, !tbaa !1*/
		main_220_prei = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %220*/
	/*   %.pre.i = load i32* %217, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__220_147)) begin
		main_220_prei_reg <= main_220_prei;
		if (start == 1'b0 && ^(main_220_prei) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_220_prei_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %222*/
	/*   %223 = phi i32 [ %.pre.i, %220 ], [ %218, %.lr.ph.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi_144) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_219 == 1'd0))) begin
		main_222_223 = main_lrphi_218;
	end
	/* main: %222*/
	/*   %223 = phi i32 [ %.pre.i, %220 ], [ %218, %.lr.ph.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__220_147) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_222_223 = main_220_prei;
	end
end
always @(posedge clk) begin
	/* main: %222*/
	/*   %223 = phi i32 [ %.pre.i, %220 ], [ %218, %.lr.ph.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi_144) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_219 == 1'd0))) begin
		main_222_223_reg <= main_222_223;
		if (start == 1'b0 && ^(main_222_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_222_223_reg"); $finish; end
	end
	/* main: %222*/
	/*   %223 = phi i32 [ %.pre.i, %220 ], [ %218, %.lr.ph.i ]*/
	if (((cur_state == LEGUP_F_main_BB__220_147) & (memory_controller_waitrequest == 1'd0))) begin
		main_222_223_reg <= main_222_223;
		if (start == 1'b0 && ^(main_222_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_222_223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %222*/
	/*   %225 = add nsw i32 %i.17.i, 1*/
		main_222_225 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %222*/
	/*   %225 = add nsw i32 %i.17.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__222_148)) begin
		main_222_225_reg <= main_222_225;
		if (start == 1'b0 && ^(main_222_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_222_225_reg"); $finish; end
	end
	/* main: %.preheader.loopexit.i11*/
	/*   %468 = add nsw i32 %i.26.i15, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_259)) begin
		main_222_225_reg <= main_preheaderloopexiti11_468;
		if (start == 1'b0 && ^(main_preheaderloopexiti11_468) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_222_225_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %222*/
	/*   %exitcond27 = icmp ne i32 %225, 16*/
		main_222_exitcond27 = (main_222_225 != 32'd16);
end
always @(posedge clk) begin
	/* main: %222*/
	/*   %exitcond27 = icmp ne i32 %225, 16*/
	if ((cur_state == LEGUP_F_main_BB__222_148)) begin
		main_222_exitcond27_reg <= main_222_exitcond27;
		if (start == 1'b0 && ^(main_222_exitcond27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_222_exitcond27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %226 = phi i32 [ %233, %.preheader.i ], [ 0, %222 ]*/
	if ((((cur_state == LEGUP_F_main_BB__222_148) & (memory_controller_waitrequest == 1'd0)) & (main_222_exitcond27 == 1'd0))) begin
		main_preheaderi_226 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %226 = phi i32 [ %233, %.preheader.i ], [ 0, %222 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_152) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcondi_reg == 1'd0))) */ begin
		main_preheaderi_226 = main_preheaderi_233;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %226 = phi i32 [ %233, %.preheader.i ], [ 0, %222 ]*/
	if ((((cur_state == LEGUP_F_main_BB__222_148) & (memory_controller_waitrequest == 1'd0)) & (main_222_exitcond27 == 1'd0))) begin
		main_preheaderi_226_reg <= main_preheaderi_226;
		if (start == 1'b0 && ^(main_preheaderi_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_226_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %226 = phi i32 [ %233, %.preheader.i ], [ 0, %222 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_152) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcondi_reg == 1'd0))) begin
		main_preheaderi_226_reg <= main_preheaderi_226;
		if (start == 1'b0 && ^(main_preheaderi_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_226_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %i.26.i = phi i32 [ %234, %.preheader.i ], [ 0, %222 ]*/
	if ((((cur_state == LEGUP_F_main_BB__222_148) & (memory_controller_waitrequest == 1'd0)) & (main_222_exitcond27 == 1'd0))) begin
		main_preheaderi_i26i = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %i.26.i = phi i32 [ %234, %.preheader.i ], [ 0, %222 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_152) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcondi_reg == 1'd0))) */ begin
		main_preheaderi_i26i = main_preheaderi_234_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %i.26.i = phi i32 [ %234, %.preheader.i ], [ 0, %222 ]*/
	if ((((cur_state == LEGUP_F_main_BB__222_148) & (memory_controller_waitrequest == 1'd0)) & (main_222_exitcond27 == 1'd0))) begin
		main_preheaderi_i26i_reg <= main_preheaderi_i26i;
		if (start == 1'b0 && ^(main_preheaderi_i26i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i26i_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %i.26.i = phi i32 [ %234, %.preheader.i ], [ 0, %222 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_152) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcondi_reg == 1'd0))) begin
		main_preheaderi_i26i_reg <= main_preheaderi_i26i;
		if (start == 1'b0 && ^(main_preheaderi_i26i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i26i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_int215 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_preheaderi_gep_int215 = 0; end
		main_preheaderi_gep_int215 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_int215 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_gep_int215_reg <= main_preheaderi_gep_int215;
		if (start == 1'b0 && ^(main_preheaderi_gep_int215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_int215_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_array216 = mul i32 %i.26.i, 4*/
		main_preheaderi_gep_array216 = (main_preheaderi_i26i_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_array216 = mul i32 %i.26.i, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_gep_array216_reg <= main_preheaderi_gep_array216;
		if (start == 1'b0 && ^(main_preheaderi_gep_array216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_array216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep217 = add i32 %gep_int215, %gep_array216*/
		main_preheaderi_gep217 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %gep217 = add i32 %gep_int215, %gep_array216*/
	main_preheaderi_gep217_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %227 = inttoptr i32 %gep217 to i32**/
		main_preheaderi_227 = main_preheaderi_gep217;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %227 = inttoptr i32 %gep217 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_preheaderi_227_reg <= main_preheaderi_227;
		if (start == 1'b0 && ^(main_preheaderi_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_227_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %228 = load i32* %227, align 4, !tbaa !1*/
		main_preheaderi_228 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %228 = load i32* %227, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_228_reg <= main_preheaderi_228;
		if (start == 1'b0 && ^(main_preheaderi_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_228_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_int218 = ptrtoint [16 x i32]* @encrypt.out_enc_statemt to i32*/
if (reset) begin main_preheaderi_gep_int218 = 0; end
		main_preheaderi_gep_int218 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_int218 = ptrtoint [16 x i32]* @encrypt.out_enc_statemt to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_gep_int218_reg <= main_preheaderi_gep_int218;
		if (start == 1'b0 && ^(main_preheaderi_gep_int218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_int218_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_array219 = mul i32 %i.26.i, 4*/
		main_preheaderi_gep_array219 = (main_preheaderi_i26i_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_array219 = mul i32 %i.26.i, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_gep_array219_reg <= main_preheaderi_gep_array219;
		if (start == 1'b0 && ^(main_preheaderi_gep_array219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_array219_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep220 = add i32 %gep_int218, %gep_array219*/
		main_preheaderi_gep220 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %gep220 = add i32 %gep_int218, %gep_array219*/
	main_preheaderi_gep220_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %229 = inttoptr i32 %gep220 to i32**/
		main_preheaderi_229 = main_preheaderi_gep220;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %229 = inttoptr i32 %gep220 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_preheaderi_229_reg <= main_preheaderi_229;
		if (start == 1'b0 && ^(main_preheaderi_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %230 = load i32* %229, align 4, !tbaa !1*/
		main_preheaderi_230 = encryptout_enc_statemt_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %230 = load i32* %229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_230_reg <= main_preheaderi_230;
		if (start == 1'b0 && ^(main_preheaderi_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_230_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %231 = icmp eq i32 %228, %230*/
		main_preheaderi_231 = (main_preheaderi_228 == main_preheaderi_230_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %231 = icmp eq i32 %228, %230*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_231_reg <= main_preheaderi_231;
		if (start == 1'b0 && ^(main_preheaderi_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_231_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %232 = zext i1 %231 to i32*/
		main_preheaderi_232 = main_preheaderi_231;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %232 = zext i1 %231 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_232_reg <= main_preheaderi_232;
		if (start == 1'b0 && ^(main_preheaderi_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_232_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %233 = add nsw i32 %232, %226*/
		main_preheaderi_233 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %233 = add nsw i32 %232, %226*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_233_reg <= main_preheaderi_233;
		if (start == 1'b0 && ^(main_preheaderi_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_233_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %234 = add nsw i32 %i.26.i, 1*/
		main_preheaderi_234 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %234 = add nsw i32 %i.26.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_234_reg <= main_preheaderi_234;
		if (start == 1'b0 && ^(main_preheaderi_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_234_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %exitcond.i = icmp eq i32 %234, 16*/
		main_preheaderi_exitcondi = (main_preheaderi_234 == 32'd16);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %exitcond.i = icmp eq i32 %234, 16*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_exitcondi_reg <= main_preheaderi_exitcondi;
		if (start == 1'b0 && ^(main_preheaderi_exitcondi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_exitcondi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encrypt.exit*/
	/*   %.lcssa1 = phi i32 [ %233, %.preheader.i ]*/
		main_encryptexit_lcssa1 = main_preheaderi_233;
end
always @(posedge clk) begin
	/* main: %encrypt.exit*/
	/*   %.lcssa1 = phi i32 [ %233, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_152) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcondi_reg == 1'd1))) begin
		main_encryptexit_lcssa1_reg <= main_encryptexit_lcssa1;
		if (start == 1'b0 && ^(main_encryptexit_lcssa1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encryptexit_lcssa1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %j.01.i.i1 = phi i32 [ 0, %encrypt.exit ], [ %262, %236 ]*/
	if (((cur_state == LEGUP_F_main_BB_encryptexit_155) & (memory_controller_waitrequest == 1'd0))) begin
		main_236_j01ii1 = 32'd0;
	end
	/* main: %236*/
	/*   %j.01.i.i1 = phi i32 [ 0, %encrypt.exit ], [ %262, %236 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__236_170) & (memory_controller_waitrequest == 1'd0)) & (main_236_exitcond26_reg == 1'd1))) */ begin
		main_236_j01ii1 = main_236_262_reg;
	end
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %j.01.i.i1 = phi i32 [ 0, %encrypt.exit ], [ %262, %236 ]*/
	if (((cur_state == LEGUP_F_main_BB_encryptexit_155) & (memory_controller_waitrequest == 1'd0))) begin
		main_236_j01ii1_reg <= main_236_j01ii1;
		if (start == 1'b0 && ^(main_236_j01ii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_j01ii1_reg"); $finish; end
	end
	/* main: %236*/
	/*   %j.01.i.i1 = phi i32 [ 0, %encrypt.exit ], [ %262, %236 ]*/
	if ((((cur_state == LEGUP_F_main_BB__236_170) & (memory_controller_waitrequest == 1'd0)) & (main_236_exitcond26_reg == 1'd1))) begin
		main_236_j01ii1_reg <= main_236_j01ii1;
		if (start == 1'b0 && ^(main_236_j01ii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_j01ii1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %237 = add nsw i32 %j.01.i.i1, 40*/
		main_236_237 = main_signed_add_32_0;
end
always @(*) begin
/* main: %236*/
/*   %237 = add nsw i32 %j.01.i.i1, 40*/
	main_236_237_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %236*/
	/*   %gep_int221 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_236_gep_int221 = 0; end
		main_236_gep_int221 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %gep_int221 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_236_gep_int221_reg <= main_236_gep_int221;
		if (start == 1'b0 && ^(main_236_gep_int221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_gep_int221_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %gep_array222 = mul i32 %237, 4*/
		main_236_gep_array222 = (main_236_237_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %gep_array222 = mul i32 %237, 4*/
	if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		main_236_gep_array222_reg <= main_236_gep_array222;
		if (start == 1'b0 && ^(main_236_gep_array222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_gep_array222_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %gep223 = add i32 %gep_int221, %gep_array222*/
		main_236_gep223 = main_signed_add_32_0;
end
always @(*) begin
/* main: %236*/
/*   %gep223 = add i32 %gep_int221, %gep_array222*/
	main_236_gep223_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %236*/
	/*   %238 = inttoptr i32 %gep223 to i32**/
		main_236_238 = main_236_gep223;
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %238 = inttoptr i32 %gep223 to i32**/
	if ((cur_state == LEGUP_F_main_BB__236_158)) begin
		main_236_238_reg <= main_236_238;
		if (start == 1'b0 && ^(main_236_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_238_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %239 = load i32* %238, align 4, !tbaa !1*/
		main_236_239 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %239 = load i32* %238, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_160)) begin
		main_236_239_reg <= main_236_239;
		if (start == 1'b0 && ^(main_236_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_239_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %240 = shl nsw i32 %j.01.i.i1, 2*/
		main_236_240 = (main_236_j01ii1_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %240 = shl nsw i32 %j.01.i.i1, 2*/
	if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_236_240_reg <= main_236_240;
		if (start == 1'b0 && ^(main_236_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_240_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %gep_int224 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_236_gep_int224 = 0; end
		main_236_gep_int224 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %gep_int224 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_236_gep_int224_reg <= main_236_gep_int224;
		if (start == 1'b0 && ^(main_236_gep_int224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_gep_int224_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %gep_array225 = mul i32 %240, 4*/
		main_236_gep_array225 = (main_236_240 * 32'd4);
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %gep_array225 = mul i32 %240, 4*/
	if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_236_gep_array225_reg <= main_236_gep_array225;
		if (start == 1'b0 && ^(main_236_gep_array225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_gep_array225_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %gep226 = add i32 %gep_int224, %gep_array225*/
		main_236_gep226 = main_signed_add_32_0;
end
always @(*) begin
/* main: %236*/
/*   %gep226 = add i32 %gep_int224, %gep_array225*/
	main_236_gep226_reg = main_AddRoundKeyexit_crit_edgei_gep190_reg;
end
always @(*) begin
	/* main: %236*/
	/*   %241 = inttoptr i32 %gep226 to i32**/
		main_236_241 = main_236_gep226;
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %241 = inttoptr i32 %gep226 to i32**/
	if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		main_236_241_reg <= main_236_241;
		if (start == 1'b0 && ^(main_236_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_241_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %242 = load i32* %241, align 4, !tbaa !1*/
		main_236_242 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %242 = load i32* %241, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_159)) begin
		main_236_242_reg <= main_236_242;
		if (start == 1'b0 && ^(main_236_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_242_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %243 = xor i32 %242, %239*/
		main_236_243 = (main_236_242_reg ^ main_236_239);
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %243 = xor i32 %242, %239*/
	if ((cur_state == LEGUP_F_main_BB__236_160)) begin
		main_236_243_reg <= main_236_243;
		if (start == 1'b0 && ^(main_236_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_243_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %gep_int227 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_236_gep_int227 = 0; end
		main_236_gep_int227 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %gep_int227 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_236_gep_int227_reg <= main_236_gep_int227;
		if (start == 1'b0 && ^(main_236_gep_int227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_gep_int227_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %gep228 = add i32 %gep_int227, 480*/
		main_236_gep228 = main_signed_add_32_1;
end
always @(*) begin
/* main: %236*/
/*   %gep228 = add i32 %gep_int227, 480*/
	main_236_gep228_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %236*/
	/*   %gep_array229 = mul i32 %237, 4*/
		main_236_gep_array229 = (main_236_237_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %gep_array229 = mul i32 %237, 4*/
	if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		main_236_gep_array229_reg <= main_236_gep_array229;
		if (start == 1'b0 && ^(main_236_gep_array229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_gep_array229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %gep230 = add i32 %gep228, %gep_array229*/
		main_236_gep230 = main_signed_add_32_1;
end
always @(*) begin
/* main: %236*/
/*   %gep230 = add i32 %gep228, %gep_array229*/
	main_236_gep230_reg = main_AddRoundKeyexit_crit_edgei_gep194_reg;
end
always @(*) begin
	/* main: %236*/
	/*   %244 = inttoptr i32 %gep230 to i32**/
		main_236_244 = main_236_gep230;
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %244 = inttoptr i32 %gep230 to i32**/
	if ((cur_state == LEGUP_F_main_BB__236_158)) begin
		main_236_244_reg <= main_236_244;
		if (start == 1'b0 && ^(main_236_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_244_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %245 = load i32* %244, align 4, !tbaa !1*/
		main_236_245 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %245 = load i32* %244, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_163)) begin
		main_236_245_reg <= main_236_245;
		if (start == 1'b0 && ^(main_236_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_245_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %246 = or i32 %240, 1*/
		main_236_246 = (main_236_240 | 32'd1);
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %246 = or i32 %240, 1*/
	if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_236_246_reg <= main_236_246;
		if (start == 1'b0 && ^(main_236_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_246_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %gep_int231 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_236_gep_int231 = 0; end
		main_236_gep_int231 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %gep_int231 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_236_gep_int231_reg <= main_236_gep_int231;
		if (start == 1'b0 && ^(main_236_gep_int231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_gep_int231_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %gep_array232 = mul i32 %246, 4*/
		main_236_gep_array232 = (main_236_246 * 32'd4);
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %gep_array232 = mul i32 %246, 4*/
	if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_236_gep_array232_reg <= main_236_gep_array232;
		if (start == 1'b0 && ^(main_236_gep_array232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_gep_array232_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %gep233 = add i32 %gep_int231, %gep_array232*/
		main_236_gep233 = main_signed_add_32_1;
end
always @(*) begin
/* main: %236*/
/*   %gep233 = add i32 %gep_int231, %gep_array232*/
	main_236_gep233_reg = main_AddRoundKeyexit_crit_edgei_gep194_reg;
end
always @(*) begin
	/* main: %236*/
	/*   %247 = inttoptr i32 %gep233 to i32**/
		main_236_247 = main_236_gep233;
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %247 = inttoptr i32 %gep233 to i32**/
	if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		main_236_247_reg <= main_236_247;
		if (start == 1'b0 && ^(main_236_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %248 = load i32* %247, align 4, !tbaa !1*/
		main_236_248 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %248 = load i32* %247, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_163)) begin
		main_236_248_reg <= main_236_248;
		if (start == 1'b0 && ^(main_236_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_248_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %249 = xor i32 %248, %245*/
		main_236_249 = (main_236_248 ^ main_236_245);
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %249 = xor i32 %248, %245*/
	if ((cur_state == LEGUP_F_main_BB__236_163)) begin
		main_236_249_reg <= main_236_249;
		if (start == 1'b0 && ^(main_236_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_249_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %gep_int234 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_236_gep_int234 = 0; end
		main_236_gep_int234 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %gep_int234 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_236_gep_int234_reg <= main_236_gep_int234;
		if (start == 1'b0 && ^(main_236_gep_int234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_gep_int234_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %gep235 = add i32 %gep_int234, 960*/
		main_236_gep235 = main_signed_add_32_2;
end
always @(*) begin
/* main: %236*/
/*   %gep235 = add i32 %gep_int234, 960*/
	main_236_gep235_reg = main_AddRoundKeyexit_crit_edgei_gep199_reg;
end
always @(*) begin
	/* main: %236*/
	/*   %gep_array236 = mul i32 %237, 4*/
		main_236_gep_array236 = (main_236_237_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %gep_array236 = mul i32 %237, 4*/
	if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		main_236_gep_array236_reg <= main_236_gep_array236;
		if (start == 1'b0 && ^(main_236_gep_array236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_gep_array236_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %gep237 = add i32 %gep235, %gep_array236*/
		main_236_gep237 = main_signed_add_32_2;
end
always @(*) begin
/* main: %236*/
/*   %gep237 = add i32 %gep235, %gep_array236*/
	main_236_gep237_reg = main_AddRoundKeyexit_crit_edgei_gep201_reg;
end
always @(*) begin
	/* main: %236*/
	/*   %250 = inttoptr i32 %gep237 to i32**/
		main_236_250 = main_236_gep237;
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %250 = inttoptr i32 %gep237 to i32**/
	if ((cur_state == LEGUP_F_main_BB__236_158)) begin
		main_236_250_reg <= main_236_250;
		if (start == 1'b0 && ^(main_236_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_250_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %251 = load i32* %250, align 4, !tbaa !1*/
		main_236_251 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %251 = load i32* %250, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_166)) begin
		main_236_251_reg <= main_236_251;
		if (start == 1'b0 && ^(main_236_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_251_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %252 = or i32 %240, 2*/
		main_236_252 = (main_236_240 | 32'd2);
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %252 = or i32 %240, 2*/
	if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_236_252_reg <= main_236_252;
		if (start == 1'b0 && ^(main_236_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_252_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %gep_int238 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_236_gep_int238 = 0; end
		main_236_gep_int238 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %gep_int238 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_236_gep_int238_reg <= main_236_gep_int238;
		if (start == 1'b0 && ^(main_236_gep_int238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_gep_int238_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %gep_array239 = mul i32 %252, 4*/
		main_236_gep_array239 = (main_236_252 * 32'd4);
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %gep_array239 = mul i32 %252, 4*/
	if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_236_gep_array239_reg <= main_236_gep_array239;
		if (start == 1'b0 && ^(main_236_gep_array239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_gep_array239_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %gep240 = add i32 %gep_int238, %gep_array239*/
		main_236_gep240 = main_signed_add_32_2;
end
always @(*) begin
/* main: %236*/
/*   %gep240 = add i32 %gep_int238, %gep_array239*/
	main_236_gep240_reg = main_AddRoundKeyexit_crit_edgei_gep201_reg;
end
always @(*) begin
	/* main: %236*/
	/*   %253 = inttoptr i32 %gep240 to i32**/
		main_236_253 = main_236_gep240;
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %253 = inttoptr i32 %gep240 to i32**/
	if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		main_236_253_reg <= main_236_253;
		if (start == 1'b0 && ^(main_236_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_253_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %254 = load i32* %253, align 4, !tbaa !1*/
		main_236_254 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %254 = load i32* %253, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_166)) begin
		main_236_254_reg <= main_236_254;
		if (start == 1'b0 && ^(main_236_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_254_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %255 = xor i32 %254, %251*/
		main_236_255 = (main_236_254 ^ main_236_251);
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %255 = xor i32 %254, %251*/
	if ((cur_state == LEGUP_F_main_BB__236_166)) begin
		main_236_255_reg <= main_236_255;
		if (start == 1'b0 && ^(main_236_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_255_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %gep_int241 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main_236_gep_int241 = 0; end
		main_236_gep_int241 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %gep_int241 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_236_gep_int241_reg <= main_236_gep_int241;
		if (start == 1'b0 && ^(main_236_gep_int241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_gep_int241_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %gep242 = add i32 %gep_int241, 1440*/
		main_236_gep242 = main_signed_add_32_3;
end
always @(*) begin
/* main: %236*/
/*   %gep242 = add i32 %gep_int241, 1440*/
	main_236_gep242_reg = main_AddRoundKeyexit_crit_edgei_gep206_reg;
end
always @(*) begin
	/* main: %236*/
	/*   %gep_array243 = mul i32 %237, 4*/
		main_236_gep_array243 = (main_236_237_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %gep_array243 = mul i32 %237, 4*/
	if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		main_236_gep_array243_reg <= main_236_gep_array243;
		if (start == 1'b0 && ^(main_236_gep_array243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_gep_array243_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %gep244 = add i32 %gep242, %gep_array243*/
		main_236_gep244 = main_signed_add_32_3;
end
always @(*) begin
/* main: %236*/
/*   %gep244 = add i32 %gep242, %gep_array243*/
	main_236_gep244_reg = main_AddRoundKeyexit_crit_edgei_gep208_reg;
end
always @(*) begin
	/* main: %236*/
	/*   %256 = inttoptr i32 %gep244 to i32**/
		main_236_256 = main_236_gep244;
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %256 = inttoptr i32 %gep244 to i32**/
	if ((cur_state == LEGUP_F_main_BB__236_158)) begin
		main_236_256_reg <= main_236_256;
		if (start == 1'b0 && ^(main_236_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_256_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %257 = load i32* %256, align 4, !tbaa !1*/
		main_236_257 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %257 = load i32* %256, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_169)) begin
		main_236_257_reg <= main_236_257;
		if (start == 1'b0 && ^(main_236_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_257_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %258 = or i32 %240, 3*/
		main_236_258 = (main_236_240 | 32'd3);
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %258 = or i32 %240, 3*/
	if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_236_258_reg <= main_236_258;
		if (start == 1'b0 && ^(main_236_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_258_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %gep_int245 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_236_gep_int245 = 0; end
		main_236_gep_int245 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %gep_int245 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_236_gep_int245_reg <= main_236_gep_int245;
		if (start == 1'b0 && ^(main_236_gep_int245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_gep_int245_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %gep_array246 = mul i32 %258, 4*/
		main_236_gep_array246 = (main_236_258 * 32'd4);
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %gep_array246 = mul i32 %258, 4*/
	if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_236_gep_array246_reg <= main_236_gep_array246;
		if (start == 1'b0 && ^(main_236_gep_array246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_gep_array246_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %gep247 = add i32 %gep_int245, %gep_array246*/
		main_236_gep247 = main_signed_add_32_3;
end
always @(*) begin
/* main: %236*/
/*   %gep247 = add i32 %gep_int245, %gep_array246*/
	main_236_gep247_reg = main_AddRoundKeyexit_crit_edgei_gep208_reg;
end
always @(*) begin
	/* main: %236*/
	/*   %259 = inttoptr i32 %gep247 to i32**/
		main_236_259 = main_236_gep247;
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %259 = inttoptr i32 %gep247 to i32**/
	if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		main_236_259_reg <= main_236_259;
		if (start == 1'b0 && ^(main_236_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_259_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %260 = load i32* %259, align 4, !tbaa !1*/
		main_236_260 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %260 = load i32* %259, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_169)) begin
		main_236_260_reg <= main_236_260;
		if (start == 1'b0 && ^(main_236_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_260_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %261 = xor i32 %260, %257*/
		main_236_261 = (main_236_260 ^ main_236_257);
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %261 = xor i32 %260, %257*/
	if ((cur_state == LEGUP_F_main_BB__236_169)) begin
		main_236_261_reg <= main_236_261;
		if (start == 1'b0 && ^(main_236_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_261_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %262 = add nsw i32 %j.01.i.i1, 1*/
		main_236_262 = main_signed_add_32_7;
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %262 = add nsw i32 %j.01.i.i1, 1*/
	if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_236_262_reg <= main_236_262;
		if (start == 1'b0 && ^(main_236_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_262_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %exitcond26 = icmp ne i32 %262, 4*/
		main_236_exitcond26 = (main_236_262 != 32'd4);
end
always @(posedge clk) begin
	/* main: %236*/
	/*   %exitcond26 = icmp ne i32 %262, 4*/
	if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_236_exitcond26_reg <= main_236_exitcond26;
		if (start == 1'b0 && ^(main_236_exitcond26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_exitcond26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %263 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
		main_lrph10ipreheader_263 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %263 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_173)) begin
		main_lrph10ipreheader_263_reg <= main_lrph10ipreheader_263;
		if (start == 1'b0 && ^(main_lrph10ipreheader_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_263_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %264 = and i32 %263, 15*/
		main_lrph10ipreheader_264 = (main_lrph10ipreheader_263 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %264 = and i32 %263, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_173)) begin
		main_lrph10ipreheader_264_reg <= main_lrph10ipreheader_264;
		if (start == 1'b0 && ^(main_lrph10ipreheader_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_264_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %265 = ashr i32 %263, 4*/
		main_lrph10ipreheader_265 = ($signed(main_lrph10ipreheader_263) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %265 = ashr i32 %263, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_173)) begin
		main_lrph10ipreheader_265_reg <= main_lrph10ipreheader_265;
		if (start == 1'b0 && ^(main_lrph10ipreheader_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_265_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int248 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10ipreheader_gep_int248 = 0; end
		main_lrph10ipreheader_gep_int248 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int248 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		main_lrph10ipreheader_gep_int248_reg <= main_lrph10ipreheader_gep_int248;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_int248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_int248_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array249 = mul i32 %265, 64*/
		main_lrph10ipreheader_gep_array249 = (main_lrph10ipreheader_265 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array249 = mul i32 %265, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_173)) begin
		main_lrph10ipreheader_gep_array249_reg <= main_lrph10ipreheader_gep_array249;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array249_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep250 = add i32 %gep_int248, %gep_array249*/
		main_lrph10ipreheader_gep250 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep250 = add i32 %gep_int248, %gep_array249*/
	main_lrph10ipreheader_gep250_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array251 = mul i32 %264, 4*/
		main_lrph10ipreheader_gep_array251 = (main_lrph10ipreheader_264 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array251 = mul i32 %264, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_173)) begin
		main_lrph10ipreheader_gep_array251_reg <= main_lrph10ipreheader_gep_array251;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array251_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep252 = add i32 %gep250, %gep_array251*/
		main_lrph10ipreheader_gep252 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep252 = add i32 %gep250, %gep_array251*/
	main_lrph10ipreheader_gep252_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %266 = inttoptr i32 %gep252 to i32**/
		main_lrph10ipreheader_266 = main_lrph10ipreheader_gep252;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %266 = inttoptr i32 %gep252 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_lrph10ipreheader_266_reg <= main_lrph10ipreheader_266;
		if (start == 1'b0 && ^(main_lrph10ipreheader_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_266_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %267 = load i32* %266, align 4, !tbaa !1*/
		main_lrph10ipreheader_267 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %267 = load i32* %266, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_lrph10ipreheader_267_reg <= main_lrph10ipreheader_267;
		if (start == 1'b0 && ^(main_lrph10ipreheader_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_267_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %268 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
		main_lrph10ipreheader_268 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %268 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_173)) begin
		main_lrph10ipreheader_268_reg <= main_lrph10ipreheader_268;
		if (start == 1'b0 && ^(main_lrph10ipreheader_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_268_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %269 = and i32 %268, 15*/
		main_lrph10ipreheader_269 = (main_lrph10ipreheader_268 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %269 = and i32 %268, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_173)) begin
		main_lrph10ipreheader_269_reg <= main_lrph10ipreheader_269;
		if (start == 1'b0 && ^(main_lrph10ipreheader_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_269_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %270 = ashr i32 %268, 4*/
		main_lrph10ipreheader_270 = ($signed(main_lrph10ipreheader_268) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %270 = ashr i32 %268, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_173)) begin
		main_lrph10ipreheader_270_reg <= main_lrph10ipreheader_270;
		if (start == 1'b0 && ^(main_lrph10ipreheader_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_270_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int253 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10ipreheader_gep_int253 = 0; end
		main_lrph10ipreheader_gep_int253 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int253 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		main_lrph10ipreheader_gep_int253_reg <= main_lrph10ipreheader_gep_int253;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_int253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_int253_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array254 = mul i32 %270, 64*/
		main_lrph10ipreheader_gep_array254 = (main_lrph10ipreheader_270 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array254 = mul i32 %270, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_173)) begin
		main_lrph10ipreheader_gep_array254_reg <= main_lrph10ipreheader_gep_array254;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array254_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep255 = add i32 %gep_int253, %gep_array254*/
		main_lrph10ipreheader_gep255 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep255 = add i32 %gep_int253, %gep_array254*/
	main_lrph10ipreheader_gep255_reg = main_AddRoundKeyexit_crit_edgei_gep199_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array256 = mul i32 %269, 4*/
		main_lrph10ipreheader_gep_array256 = (main_lrph10ipreheader_269 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array256 = mul i32 %269, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_173)) begin
		main_lrph10ipreheader_gep_array256_reg <= main_lrph10ipreheader_gep_array256;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array256_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep257 = add i32 %gep255, %gep_array256*/
		main_lrph10ipreheader_gep257 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep257 = add i32 %gep255, %gep_array256*/
	main_lrph10ipreheader_gep257_reg = main_AddRoundKeyexit_crit_edgei_gep206_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %271 = inttoptr i32 %gep257 to i32**/
		main_lrph10ipreheader_271 = main_lrph10ipreheader_gep257;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %271 = inttoptr i32 %gep257 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_lrph10ipreheader_271_reg <= main_lrph10ipreheader_271;
		if (start == 1'b0 && ^(main_lrph10ipreheader_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_271_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %272 = load i32* %271, align 4, !tbaa !1*/
		main_lrph10ipreheader_272 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %272 = load i32* %271, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_lrph10ipreheader_272_reg <= main_lrph10ipreheader_272;
		if (start == 1'b0 && ^(main_lrph10ipreheader_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_272_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %273 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
		main_lrph10ipreheader_273 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %273 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_lrph10ipreheader_273_reg <= main_lrph10ipreheader_273;
		if (start == 1'b0 && ^(main_lrph10ipreheader_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_273_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %274 = and i32 %273, 15*/
		main_lrph10ipreheader_274 = (main_lrph10ipreheader_273 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %274 = and i32 %273, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_lrph10ipreheader_274_reg <= main_lrph10ipreheader_274;
		if (start == 1'b0 && ^(main_lrph10ipreheader_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_274_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %275 = ashr i32 %273, 4*/
		main_lrph10ipreheader_275 = ($signed(main_lrph10ipreheader_273) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %275 = ashr i32 %273, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_lrph10ipreheader_275_reg <= main_lrph10ipreheader_275;
		if (start == 1'b0 && ^(main_lrph10ipreheader_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_275_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int258 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10ipreheader_gep_int258 = 0; end
		main_lrph10ipreheader_gep_int258 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int258 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		main_lrph10ipreheader_gep_int258_reg <= main_lrph10ipreheader_gep_int258;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_int258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_int258_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array259 = mul i32 %275, 64*/
		main_lrph10ipreheader_gep_array259 = (main_lrph10ipreheader_275 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array259 = mul i32 %275, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_lrph10ipreheader_gep_array259_reg <= main_lrph10ipreheader_gep_array259;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array259_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep260 = add i32 %gep_int258, %gep_array259*/
		main_lrph10ipreheader_gep260 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep260 = add i32 %gep_int258, %gep_array259*/
	main_lrph10ipreheader_gep260_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array261 = mul i32 %274, 4*/
		main_lrph10ipreheader_gep_array261 = (main_lrph10ipreheader_274 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array261 = mul i32 %274, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_lrph10ipreheader_gep_array261_reg <= main_lrph10ipreheader_gep_array261;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array261_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep262 = add i32 %gep260, %gep_array261*/
		main_lrph10ipreheader_gep262 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep262 = add i32 %gep260, %gep_array261*/
	main_lrph10ipreheader_gep262_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %276 = inttoptr i32 %gep262 to i32**/
		main_lrph10ipreheader_276 = main_lrph10ipreheader_gep262;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %276 = inttoptr i32 %gep262 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_lrph10ipreheader_276_reg <= main_lrph10ipreheader_276;
		if (start == 1'b0 && ^(main_lrph10ipreheader_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_276_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %277 = load i32* %276, align 4, !tbaa !1*/
		main_lrph10ipreheader_277 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %277 = load i32* %276, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_181)) begin
		main_lrph10ipreheader_277_reg <= main_lrph10ipreheader_277;
		if (start == 1'b0 && ^(main_lrph10ipreheader_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_277_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %278 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
		main_lrph10ipreheader_278 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %278 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_lrph10ipreheader_278_reg <= main_lrph10ipreheader_278;
		if (start == 1'b0 && ^(main_lrph10ipreheader_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_278_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %279 = and i32 %278, 15*/
		main_lrph10ipreheader_279 = (main_lrph10ipreheader_278 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %279 = and i32 %278, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_lrph10ipreheader_279_reg <= main_lrph10ipreheader_279;
		if (start == 1'b0 && ^(main_lrph10ipreheader_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_279_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %280 = ashr i32 %278, 4*/
		main_lrph10ipreheader_280 = ($signed(main_lrph10ipreheader_278) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %280 = ashr i32 %278, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_lrph10ipreheader_280_reg <= main_lrph10ipreheader_280;
		if (start == 1'b0 && ^(main_lrph10ipreheader_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_280_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int263 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10ipreheader_gep_int263 = 0; end
		main_lrph10ipreheader_gep_int263 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int263 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		main_lrph10ipreheader_gep_int263_reg <= main_lrph10ipreheader_gep_int263;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_int263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_int263_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array264 = mul i32 %280, 64*/
		main_lrph10ipreheader_gep_array264 = (main_lrph10ipreheader_280 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array264 = mul i32 %280, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_lrph10ipreheader_gep_array264_reg <= main_lrph10ipreheader_gep_array264;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array264_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep265 = add i32 %gep_int263, %gep_array264*/
		main_lrph10ipreheader_gep265 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep265 = add i32 %gep_int263, %gep_array264*/
	main_lrph10ipreheader_gep265_reg = main_AddRoundKeyexit_crit_edgei_gep199_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array266 = mul i32 %279, 4*/
		main_lrph10ipreheader_gep_array266 = (main_lrph10ipreheader_279 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array266 = mul i32 %279, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_lrph10ipreheader_gep_array266_reg <= main_lrph10ipreheader_gep_array266;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array266_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep267 = add i32 %gep265, %gep_array266*/
		main_lrph10ipreheader_gep267 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep267 = add i32 %gep265, %gep_array266*/
	main_lrph10ipreheader_gep267_reg = main_AddRoundKeyexit_crit_edgei_gep206_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %281 = inttoptr i32 %gep267 to i32**/
		main_lrph10ipreheader_281 = main_lrph10ipreheader_gep267;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %281 = inttoptr i32 %gep267 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_lrph10ipreheader_281_reg <= main_lrph10ipreheader_281;
		if (start == 1'b0 && ^(main_lrph10ipreheader_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_281_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %282 = load i32* %281, align 4, !tbaa !1*/
		main_lrph10ipreheader_282 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %282 = load i32* %281, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_183)) begin
		main_lrph10ipreheader_282_reg <= main_lrph10ipreheader_282;
		if (start == 1'b0 && ^(main_lrph10ipreheader_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_282_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %283 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
		main_lrph10ipreheader_283 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %283 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_lrph10ipreheader_283_reg <= main_lrph10ipreheader_283;
		if (start == 1'b0 && ^(main_lrph10ipreheader_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_283_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %284 = and i32 %283, 15*/
		main_lrph10ipreheader_284 = (main_lrph10ipreheader_283 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %284 = and i32 %283, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_lrph10ipreheader_284_reg <= main_lrph10ipreheader_284;
		if (start == 1'b0 && ^(main_lrph10ipreheader_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_284_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %285 = ashr i32 %283, 4*/
		main_lrph10ipreheader_285 = ($signed(main_lrph10ipreheader_283) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %285 = ashr i32 %283, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_lrph10ipreheader_285_reg <= main_lrph10ipreheader_285;
		if (start == 1'b0 && ^(main_lrph10ipreheader_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_285_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int268 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10ipreheader_gep_int268 = 0; end
		main_lrph10ipreheader_gep_int268 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int268 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		main_lrph10ipreheader_gep_int268_reg <= main_lrph10ipreheader_gep_int268;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_int268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_int268_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array269 = mul i32 %285, 64*/
		main_lrph10ipreheader_gep_array269 = (main_lrph10ipreheader_285 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array269 = mul i32 %285, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_lrph10ipreheader_gep_array269_reg <= main_lrph10ipreheader_gep_array269;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array269_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep270 = add i32 %gep_int268, %gep_array269*/
		main_lrph10ipreheader_gep270 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep270 = add i32 %gep_int268, %gep_array269*/
	main_lrph10ipreheader_gep270_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array271 = mul i32 %284, 4*/
		main_lrph10ipreheader_gep_array271 = (main_lrph10ipreheader_284 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array271 = mul i32 %284, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_lrph10ipreheader_gep_array271_reg <= main_lrph10ipreheader_gep_array271;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array271_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep272 = add i32 %gep270, %gep_array271*/
		main_lrph10ipreheader_gep272 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep272 = add i32 %gep270, %gep_array271*/
	main_lrph10ipreheader_gep272_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %286 = inttoptr i32 %gep272 to i32**/
		main_lrph10ipreheader_286 = main_lrph10ipreheader_gep272;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %286 = inttoptr i32 %gep272 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_lrph10ipreheader_286_reg <= main_lrph10ipreheader_286;
		if (start == 1'b0 && ^(main_lrph10ipreheader_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_286_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %287 = load i32* %286, align 4, !tbaa !1*/
		main_lrph10ipreheader_287 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %287 = load i32* %286, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_185)) begin
		main_lrph10ipreheader_287_reg <= main_lrph10ipreheader_287;
		if (start == 1'b0 && ^(main_lrph10ipreheader_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_287_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %288 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
		main_lrph10ipreheader_288 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %288 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_lrph10ipreheader_288_reg <= main_lrph10ipreheader_288;
		if (start == 1'b0 && ^(main_lrph10ipreheader_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_288_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %289 = and i32 %288, 15*/
		main_lrph10ipreheader_289 = (main_lrph10ipreheader_288 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %289 = and i32 %288, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_lrph10ipreheader_289_reg <= main_lrph10ipreheader_289;
		if (start == 1'b0 && ^(main_lrph10ipreheader_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_289_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %290 = ashr i32 %288, 4*/
		main_lrph10ipreheader_290 = ($signed(main_lrph10ipreheader_288) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %290 = ashr i32 %288, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_lrph10ipreheader_290_reg <= main_lrph10ipreheader_290;
		if (start == 1'b0 && ^(main_lrph10ipreheader_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_290_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int273 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10ipreheader_gep_int273 = 0; end
		main_lrph10ipreheader_gep_int273 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int273 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		main_lrph10ipreheader_gep_int273_reg <= main_lrph10ipreheader_gep_int273;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_int273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_int273_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array274 = mul i32 %290, 64*/
		main_lrph10ipreheader_gep_array274 = (main_lrph10ipreheader_290 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array274 = mul i32 %290, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_lrph10ipreheader_gep_array274_reg <= main_lrph10ipreheader_gep_array274;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array274_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep275 = add i32 %gep_int273, %gep_array274*/
		main_lrph10ipreheader_gep275 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep275 = add i32 %gep_int273, %gep_array274*/
	main_lrph10ipreheader_gep275_reg = main_AddRoundKeyexit_crit_edgei_gep199_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array276 = mul i32 %289, 4*/
		main_lrph10ipreheader_gep_array276 = (main_lrph10ipreheader_289 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array276 = mul i32 %289, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_lrph10ipreheader_gep_array276_reg <= main_lrph10ipreheader_gep_array276;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array276_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep277 = add i32 %gep275, %gep_array276*/
		main_lrph10ipreheader_gep277 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep277 = add i32 %gep275, %gep_array276*/
	main_lrph10ipreheader_gep277_reg = main_AddRoundKeyexit_crit_edgei_gep206_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %291 = inttoptr i32 %gep277 to i32**/
		main_lrph10ipreheader_291 = main_lrph10ipreheader_gep277;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %291 = inttoptr i32 %gep277 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_lrph10ipreheader_291_reg <= main_lrph10ipreheader_291;
		if (start == 1'b0 && ^(main_lrph10ipreheader_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_291_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %292 = load i32* %291, align 4, !tbaa !1*/
		main_lrph10ipreheader_292 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %292 = load i32* %291, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_185)) begin
		main_lrph10ipreheader_292_reg <= main_lrph10ipreheader_292;
		if (start == 1'b0 && ^(main_lrph10ipreheader_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_292_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %293 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
		main_lrph10ipreheader_293 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %293 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_lrph10ipreheader_293_reg <= main_lrph10ipreheader_293;
		if (start == 1'b0 && ^(main_lrph10ipreheader_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_293_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %294 = and i32 %293, 15*/
		main_lrph10ipreheader_294 = (main_lrph10ipreheader_293 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %294 = and i32 %293, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_lrph10ipreheader_294_reg <= main_lrph10ipreheader_294;
		if (start == 1'b0 && ^(main_lrph10ipreheader_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_294_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %295 = ashr i32 %293, 4*/
		main_lrph10ipreheader_295 = ($signed(main_lrph10ipreheader_293) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %295 = ashr i32 %293, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_lrph10ipreheader_295_reg <= main_lrph10ipreheader_295;
		if (start == 1'b0 && ^(main_lrph10ipreheader_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_295_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int278 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10ipreheader_gep_int278 = 0; end
		main_lrph10ipreheader_gep_int278 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int278 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		main_lrph10ipreheader_gep_int278_reg <= main_lrph10ipreheader_gep_int278;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_int278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_int278_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array279 = mul i32 %295, 64*/
		main_lrph10ipreheader_gep_array279 = (main_lrph10ipreheader_295 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array279 = mul i32 %295, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_lrph10ipreheader_gep_array279_reg <= main_lrph10ipreheader_gep_array279;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array279_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep280 = add i32 %gep_int278, %gep_array279*/
		main_lrph10ipreheader_gep280 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep280 = add i32 %gep_int278, %gep_array279*/
	main_lrph10ipreheader_gep280_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array281 = mul i32 %294, 4*/
		main_lrph10ipreheader_gep_array281 = (main_lrph10ipreheader_294 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array281 = mul i32 %294, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_lrph10ipreheader_gep_array281_reg <= main_lrph10ipreheader_gep_array281;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array281_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep282 = add i32 %gep280, %gep_array281*/
		main_lrph10ipreheader_gep282 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep282 = add i32 %gep280, %gep_array281*/
	main_lrph10ipreheader_gep282_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %296 = inttoptr i32 %gep282 to i32**/
		main_lrph10ipreheader_296 = main_lrph10ipreheader_gep282;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %296 = inttoptr i32 %gep282 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_lrph10ipreheader_296_reg <= main_lrph10ipreheader_296;
		if (start == 1'b0 && ^(main_lrph10ipreheader_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_296_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
		main_lrph10ipreheader_297 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_187)) begin
		main_lrph10ipreheader_297_reg <= main_lrph10ipreheader_297;
		if (start == 1'b0 && ^(main_lrph10ipreheader_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_297_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %298 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
		main_lrph10ipreheader_298 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %298 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_lrph10ipreheader_298_reg <= main_lrph10ipreheader_298;
		if (start == 1'b0 && ^(main_lrph10ipreheader_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_298_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %299 = and i32 %298, 15*/
		main_lrph10ipreheader_299 = (main_lrph10ipreheader_298 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %299 = and i32 %298, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_lrph10ipreheader_299_reg <= main_lrph10ipreheader_299;
		if (start == 1'b0 && ^(main_lrph10ipreheader_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_299_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %300 = ashr i32 %298, 4*/
		main_lrph10ipreheader_300 = ($signed(main_lrph10ipreheader_298) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %300 = ashr i32 %298, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_lrph10ipreheader_300_reg <= main_lrph10ipreheader_300;
		if (start == 1'b0 && ^(main_lrph10ipreheader_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_300_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int283 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10ipreheader_gep_int283 = 0; end
		main_lrph10ipreheader_gep_int283 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int283 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		main_lrph10ipreheader_gep_int283_reg <= main_lrph10ipreheader_gep_int283;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_int283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_int283_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array284 = mul i32 %300, 64*/
		main_lrph10ipreheader_gep_array284 = (main_lrph10ipreheader_300 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array284 = mul i32 %300, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_lrph10ipreheader_gep_array284_reg <= main_lrph10ipreheader_gep_array284;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array284_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep285 = add i32 %gep_int283, %gep_array284*/
		main_lrph10ipreheader_gep285 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep285 = add i32 %gep_int283, %gep_array284*/
	main_lrph10ipreheader_gep285_reg = main_AddRoundKeyexit_crit_edgei_gep199_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array286 = mul i32 %299, 4*/
		main_lrph10ipreheader_gep_array286 = (main_lrph10ipreheader_299 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array286 = mul i32 %299, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_lrph10ipreheader_gep_array286_reg <= main_lrph10ipreheader_gep_array286;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array286_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep287 = add i32 %gep285, %gep_array286*/
		main_lrph10ipreheader_gep287 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep287 = add i32 %gep285, %gep_array286*/
	main_lrph10ipreheader_gep287_reg = main_AddRoundKeyexit_crit_edgei_gep206_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %301 = inttoptr i32 %gep287 to i32**/
		main_lrph10ipreheader_301 = main_lrph10ipreheader_gep287;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %301 = inttoptr i32 %gep287 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_lrph10ipreheader_301_reg <= main_lrph10ipreheader_301;
		if (start == 1'b0 && ^(main_lrph10ipreheader_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_301_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %302 = load i32* %301, align 4, !tbaa !1*/
		main_lrph10ipreheader_302 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %302 = load i32* %301, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_187)) begin
		main_lrph10ipreheader_302_reg <= main_lrph10ipreheader_302;
		if (start == 1'b0 && ^(main_lrph10ipreheader_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_302_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %303 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
		main_lrph10ipreheader_303 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %303 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_lrph10ipreheader_303_reg <= main_lrph10ipreheader_303;
		if (start == 1'b0 && ^(main_lrph10ipreheader_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_303_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %304 = and i32 %303, 15*/
		main_lrph10ipreheader_304 = (main_lrph10ipreheader_303 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %304 = and i32 %303, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_lrph10ipreheader_304_reg <= main_lrph10ipreheader_304;
		if (start == 1'b0 && ^(main_lrph10ipreheader_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_304_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %305 = ashr i32 %303, 4*/
		main_lrph10ipreheader_305 = ($signed(main_lrph10ipreheader_303) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %305 = ashr i32 %303, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_lrph10ipreheader_305_reg <= main_lrph10ipreheader_305;
		if (start == 1'b0 && ^(main_lrph10ipreheader_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_305_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int288 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10ipreheader_gep_int288 = 0; end
		main_lrph10ipreheader_gep_int288 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int288 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		main_lrph10ipreheader_gep_int288_reg <= main_lrph10ipreheader_gep_int288;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_int288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_int288_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array289 = mul i32 %305, 64*/
		main_lrph10ipreheader_gep_array289 = (main_lrph10ipreheader_305 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array289 = mul i32 %305, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_lrph10ipreheader_gep_array289_reg <= main_lrph10ipreheader_gep_array289;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array289_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep290 = add i32 %gep_int288, %gep_array289*/
		main_lrph10ipreheader_gep290 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep290 = add i32 %gep_int288, %gep_array289*/
	main_lrph10ipreheader_gep290_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array291 = mul i32 %304, 4*/
		main_lrph10ipreheader_gep_array291 = (main_lrph10ipreheader_304 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array291 = mul i32 %304, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_lrph10ipreheader_gep_array291_reg <= main_lrph10ipreheader_gep_array291;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array291_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep292 = add i32 %gep290, %gep_array291*/
		main_lrph10ipreheader_gep292 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep292 = add i32 %gep290, %gep_array291*/
	main_lrph10ipreheader_gep292_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %306 = inttoptr i32 %gep292 to i32**/
		main_lrph10ipreheader_306 = main_lrph10ipreheader_gep292;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %306 = inttoptr i32 %gep292 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_lrph10ipreheader_306_reg <= main_lrph10ipreheader_306;
		if (start == 1'b0 && ^(main_lrph10ipreheader_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_306_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %307 = load i32* %306, align 4, !tbaa !1*/
		main_lrph10ipreheader_307 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %307 = load i32* %306, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_189)) begin
		main_lrph10ipreheader_307_reg <= main_lrph10ipreheader_307;
		if (start == 1'b0 && ^(main_lrph10ipreheader_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_307_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %308 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
		main_lrph10ipreheader_308 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %308 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_lrph10ipreheader_308_reg <= main_lrph10ipreheader_308;
		if (start == 1'b0 && ^(main_lrph10ipreheader_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_308_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %309 = and i32 %308, 15*/
		main_lrph10ipreheader_309 = (main_lrph10ipreheader_308 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %309 = and i32 %308, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_lrph10ipreheader_309_reg <= main_lrph10ipreheader_309;
		if (start == 1'b0 && ^(main_lrph10ipreheader_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_309_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %310 = ashr i32 %308, 4*/
		main_lrph10ipreheader_310 = ($signed(main_lrph10ipreheader_308) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %310 = ashr i32 %308, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_lrph10ipreheader_310_reg <= main_lrph10ipreheader_310;
		if (start == 1'b0 && ^(main_lrph10ipreheader_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_310_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int293 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10ipreheader_gep_int293 = 0; end
		main_lrph10ipreheader_gep_int293 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int293 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		main_lrph10ipreheader_gep_int293_reg <= main_lrph10ipreheader_gep_int293;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_int293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_int293_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array294 = mul i32 %310, 64*/
		main_lrph10ipreheader_gep_array294 = (main_lrph10ipreheader_310 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array294 = mul i32 %310, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_lrph10ipreheader_gep_array294_reg <= main_lrph10ipreheader_gep_array294;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array294_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep295 = add i32 %gep_int293, %gep_array294*/
		main_lrph10ipreheader_gep295 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep295 = add i32 %gep_int293, %gep_array294*/
	main_lrph10ipreheader_gep295_reg = main_AddRoundKeyexit_crit_edgei_gep199_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array296 = mul i32 %309, 4*/
		main_lrph10ipreheader_gep_array296 = (main_lrph10ipreheader_309 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array296 = mul i32 %309, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_lrph10ipreheader_gep_array296_reg <= main_lrph10ipreheader_gep_array296;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array296_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep297 = add i32 %gep295, %gep_array296*/
		main_lrph10ipreheader_gep297 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep297 = add i32 %gep295, %gep_array296*/
	main_lrph10ipreheader_gep297_reg = main_AddRoundKeyexit_crit_edgei_gep206_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %311 = inttoptr i32 %gep297 to i32**/
		main_lrph10ipreheader_311 = main_lrph10ipreheader_gep297;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %311 = inttoptr i32 %gep297 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_lrph10ipreheader_311_reg <= main_lrph10ipreheader_311;
		if (start == 1'b0 && ^(main_lrph10ipreheader_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_311_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %312 = load i32* %311, align 4, !tbaa !1*/
		main_lrph10ipreheader_312 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %312 = load i32* %311, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_189)) begin
		main_lrph10ipreheader_312_reg <= main_lrph10ipreheader_312;
		if (start == 1'b0 && ^(main_lrph10ipreheader_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_312_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %313 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
		main_lrph10ipreheader_313 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %313 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_lrph10ipreheader_313_reg <= main_lrph10ipreheader_313;
		if (start == 1'b0 && ^(main_lrph10ipreheader_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_313_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %314 = and i32 %313, 15*/
		main_lrph10ipreheader_314 = (main_lrph10ipreheader_313 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %314 = and i32 %313, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_lrph10ipreheader_314_reg <= main_lrph10ipreheader_314;
		if (start == 1'b0 && ^(main_lrph10ipreheader_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_314_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %315 = ashr i32 %313, 4*/
		main_lrph10ipreheader_315 = ($signed(main_lrph10ipreheader_313) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %315 = ashr i32 %313, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_lrph10ipreheader_315_reg <= main_lrph10ipreheader_315;
		if (start == 1'b0 && ^(main_lrph10ipreheader_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_315_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int298 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10ipreheader_gep_int298 = 0; end
		main_lrph10ipreheader_gep_int298 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int298 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		main_lrph10ipreheader_gep_int298_reg <= main_lrph10ipreheader_gep_int298;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_int298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_int298_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array299 = mul i32 %315, 64*/
		main_lrph10ipreheader_gep_array299 = (main_lrph10ipreheader_315 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array299 = mul i32 %315, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_lrph10ipreheader_gep_array299_reg <= main_lrph10ipreheader_gep_array299;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array299_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep300 = add i32 %gep_int298, %gep_array299*/
		main_lrph10ipreheader_gep300 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep300 = add i32 %gep_int298, %gep_array299*/
	main_lrph10ipreheader_gep300_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array301 = mul i32 %314, 4*/
		main_lrph10ipreheader_gep_array301 = (main_lrph10ipreheader_314 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array301 = mul i32 %314, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_lrph10ipreheader_gep_array301_reg <= main_lrph10ipreheader_gep_array301;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array301_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep302 = add i32 %gep300, %gep_array301*/
		main_lrph10ipreheader_gep302 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep302 = add i32 %gep300, %gep_array301*/
	main_lrph10ipreheader_gep302_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %316 = inttoptr i32 %gep302 to i32**/
		main_lrph10ipreheader_316 = main_lrph10ipreheader_gep302;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %316 = inttoptr i32 %gep302 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_lrph10ipreheader_316_reg <= main_lrph10ipreheader_316;
		if (start == 1'b0 && ^(main_lrph10ipreheader_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_316_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %317 = load i32* %316, align 4, !tbaa !1*/
		main_lrph10ipreheader_317 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %317 = load i32* %316, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_191)) begin
		main_lrph10ipreheader_317_reg <= main_lrph10ipreheader_317;
		if (start == 1'b0 && ^(main_lrph10ipreheader_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_317_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %318 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
		main_lrph10ipreheader_318 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %318 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_lrph10ipreheader_318_reg <= main_lrph10ipreheader_318;
		if (start == 1'b0 && ^(main_lrph10ipreheader_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_318_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %319 = and i32 %318, 15*/
		main_lrph10ipreheader_319 = (main_lrph10ipreheader_318 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %319 = and i32 %318, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_lrph10ipreheader_319_reg <= main_lrph10ipreheader_319;
		if (start == 1'b0 && ^(main_lrph10ipreheader_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_319_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %320 = ashr i32 %318, 4*/
		main_lrph10ipreheader_320 = ($signed(main_lrph10ipreheader_318) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %320 = ashr i32 %318, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_lrph10ipreheader_320_reg <= main_lrph10ipreheader_320;
		if (start == 1'b0 && ^(main_lrph10ipreheader_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_320_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int303 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10ipreheader_gep_int303 = 0; end
		main_lrph10ipreheader_gep_int303 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int303 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		main_lrph10ipreheader_gep_int303_reg <= main_lrph10ipreheader_gep_int303;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_int303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_int303_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array304 = mul i32 %320, 64*/
		main_lrph10ipreheader_gep_array304 = (main_lrph10ipreheader_320 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array304 = mul i32 %320, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_lrph10ipreheader_gep_array304_reg <= main_lrph10ipreheader_gep_array304;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array304_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep305 = add i32 %gep_int303, %gep_array304*/
		main_lrph10ipreheader_gep305 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep305 = add i32 %gep_int303, %gep_array304*/
	main_lrph10ipreheader_gep305_reg = main_AddRoundKeyexit_crit_edgei_gep199_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array306 = mul i32 %319, 4*/
		main_lrph10ipreheader_gep_array306 = (main_lrph10ipreheader_319 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array306 = mul i32 %319, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_lrph10ipreheader_gep_array306_reg <= main_lrph10ipreheader_gep_array306;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array306_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep307 = add i32 %gep305, %gep_array306*/
		main_lrph10ipreheader_gep307 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep307 = add i32 %gep305, %gep_array306*/
	main_lrph10ipreheader_gep307_reg = main_AddRoundKeyexit_crit_edgei_gep206_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %321 = inttoptr i32 %gep307 to i32**/
		main_lrph10ipreheader_321 = main_lrph10ipreheader_gep307;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %321 = inttoptr i32 %gep307 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_lrph10ipreheader_321_reg <= main_lrph10ipreheader_321;
		if (start == 1'b0 && ^(main_lrph10ipreheader_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_321_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %322 = load i32* %321, align 4, !tbaa !1*/
		main_lrph10ipreheader_322 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %322 = load i32* %321, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_193)) begin
		main_lrph10ipreheader_322_reg <= main_lrph10ipreheader_322;
		if (start == 1'b0 && ^(main_lrph10ipreheader_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_322_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %323 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
		main_lrph10ipreheader_323 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %323 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_lrph10ipreheader_323_reg <= main_lrph10ipreheader_323;
		if (start == 1'b0 && ^(main_lrph10ipreheader_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_323_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %324 = and i32 %323, 15*/
		main_lrph10ipreheader_324 = (main_lrph10ipreheader_323 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %324 = and i32 %323, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_lrph10ipreheader_324_reg <= main_lrph10ipreheader_324;
		if (start == 1'b0 && ^(main_lrph10ipreheader_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_324_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %325 = ashr i32 %323, 4*/
		main_lrph10ipreheader_325 = ($signed(main_lrph10ipreheader_323) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %325 = ashr i32 %323, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_lrph10ipreheader_325_reg <= main_lrph10ipreheader_325;
		if (start == 1'b0 && ^(main_lrph10ipreheader_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_325_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int308 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10ipreheader_gep_int308 = 0; end
		main_lrph10ipreheader_gep_int308 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int308 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		main_lrph10ipreheader_gep_int308_reg <= main_lrph10ipreheader_gep_int308;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_int308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_int308_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array309 = mul i32 %325, 64*/
		main_lrph10ipreheader_gep_array309 = (main_lrph10ipreheader_325 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array309 = mul i32 %325, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_lrph10ipreheader_gep_array309_reg <= main_lrph10ipreheader_gep_array309;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array309_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep310 = add i32 %gep_int308, %gep_array309*/
		main_lrph10ipreheader_gep310 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep310 = add i32 %gep_int308, %gep_array309*/
	main_lrph10ipreheader_gep310_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array311 = mul i32 %324, 4*/
		main_lrph10ipreheader_gep_array311 = (main_lrph10ipreheader_324 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array311 = mul i32 %324, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_lrph10ipreheader_gep_array311_reg <= main_lrph10ipreheader_gep_array311;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array311_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep312 = add i32 %gep310, %gep_array311*/
		main_lrph10ipreheader_gep312 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep312 = add i32 %gep310, %gep_array311*/
	main_lrph10ipreheader_gep312_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %326 = inttoptr i32 %gep312 to i32**/
		main_lrph10ipreheader_326 = main_lrph10ipreheader_gep312;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %326 = inttoptr i32 %gep312 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_lrph10ipreheader_326_reg <= main_lrph10ipreheader_326;
		if (start == 1'b0 && ^(main_lrph10ipreheader_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_326_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %327 = load i32* %326, align 4, !tbaa !1*/
		main_lrph10ipreheader_327 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %327 = load i32* %326, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_195)) begin
		main_lrph10ipreheader_327_reg <= main_lrph10ipreheader_327;
		if (start == 1'b0 && ^(main_lrph10ipreheader_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_327_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %328 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
		main_lrph10ipreheader_328 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %328 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_lrph10ipreheader_328_reg <= main_lrph10ipreheader_328;
		if (start == 1'b0 && ^(main_lrph10ipreheader_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_328_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %329 = and i32 %328, 15*/
		main_lrph10ipreheader_329 = (main_lrph10ipreheader_328 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %329 = and i32 %328, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_lrph10ipreheader_329_reg <= main_lrph10ipreheader_329;
		if (start == 1'b0 && ^(main_lrph10ipreheader_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_329_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %330 = ashr i32 %328, 4*/
		main_lrph10ipreheader_330 = ($signed(main_lrph10ipreheader_328) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %330 = ashr i32 %328, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_lrph10ipreheader_330_reg <= main_lrph10ipreheader_330;
		if (start == 1'b0 && ^(main_lrph10ipreheader_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_330_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int313 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10ipreheader_gep_int313 = 0; end
		main_lrph10ipreheader_gep_int313 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int313 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		main_lrph10ipreheader_gep_int313_reg <= main_lrph10ipreheader_gep_int313;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_int313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_int313_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array314 = mul i32 %330, 64*/
		main_lrph10ipreheader_gep_array314 = (main_lrph10ipreheader_330 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array314 = mul i32 %330, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_lrph10ipreheader_gep_array314_reg <= main_lrph10ipreheader_gep_array314;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array314_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep315 = add i32 %gep_int313, %gep_array314*/
		main_lrph10ipreheader_gep315 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep315 = add i32 %gep_int313, %gep_array314*/
	main_lrph10ipreheader_gep315_reg = main_AddRoundKeyexit_crit_edgei_gep199_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array316 = mul i32 %329, 4*/
		main_lrph10ipreheader_gep_array316 = (main_lrph10ipreheader_329 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array316 = mul i32 %329, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_lrph10ipreheader_gep_array316_reg <= main_lrph10ipreheader_gep_array316;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array316_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep317 = add i32 %gep315, %gep_array316*/
		main_lrph10ipreheader_gep317 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep317 = add i32 %gep315, %gep_array316*/
	main_lrph10ipreheader_gep317_reg = main_AddRoundKeyexit_crit_edgei_gep206_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %331 = inttoptr i32 %gep317 to i32**/
		main_lrph10ipreheader_331 = main_lrph10ipreheader_gep317;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %331 = inttoptr i32 %gep317 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_lrph10ipreheader_331_reg <= main_lrph10ipreheader_331;
		if (start == 1'b0 && ^(main_lrph10ipreheader_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_331_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %332 = load i32* %331, align 4, !tbaa !1*/
		main_lrph10ipreheader_332 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %332 = load i32* %331, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_197)) begin
		main_lrph10ipreheader_332_reg <= main_lrph10ipreheader_332;
		if (start == 1'b0 && ^(main_lrph10ipreheader_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_332_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %333 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
		main_lrph10ipreheader_333 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %333 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_lrph10ipreheader_333_reg <= main_lrph10ipreheader_333;
		if (start == 1'b0 && ^(main_lrph10ipreheader_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_333_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %334 = and i32 %333, 15*/
		main_lrph10ipreheader_334 = (main_lrph10ipreheader_333 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %334 = and i32 %333, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_lrph10ipreheader_334_reg <= main_lrph10ipreheader_334;
		if (start == 1'b0 && ^(main_lrph10ipreheader_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_334_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %335 = ashr i32 %333, 4*/
		main_lrph10ipreheader_335 = ($signed(main_lrph10ipreheader_333) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %335 = ashr i32 %333, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_lrph10ipreheader_335_reg <= main_lrph10ipreheader_335;
		if (start == 1'b0 && ^(main_lrph10ipreheader_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_335_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int318 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10ipreheader_gep_int318 = 0; end
		main_lrph10ipreheader_gep_int318 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int318 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		main_lrph10ipreheader_gep_int318_reg <= main_lrph10ipreheader_gep_int318;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_int318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_int318_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array319 = mul i32 %335, 64*/
		main_lrph10ipreheader_gep_array319 = (main_lrph10ipreheader_335 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array319 = mul i32 %335, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_lrph10ipreheader_gep_array319_reg <= main_lrph10ipreheader_gep_array319;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array319_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep320 = add i32 %gep_int318, %gep_array319*/
		main_lrph10ipreheader_gep320 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep320 = add i32 %gep_int318, %gep_array319*/
	main_lrph10ipreheader_gep320_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array321 = mul i32 %334, 4*/
		main_lrph10ipreheader_gep_array321 = (main_lrph10ipreheader_334 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array321 = mul i32 %334, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_lrph10ipreheader_gep_array321_reg <= main_lrph10ipreheader_gep_array321;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array321_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep322 = add i32 %gep320, %gep_array321*/
		main_lrph10ipreheader_gep322 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep322 = add i32 %gep320, %gep_array321*/
	main_lrph10ipreheader_gep322_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %336 = inttoptr i32 %gep322 to i32**/
		main_lrph10ipreheader_336 = main_lrph10ipreheader_gep322;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %336 = inttoptr i32 %gep322 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_181)) begin
		main_lrph10ipreheader_336_reg <= main_lrph10ipreheader_336;
		if (start == 1'b0 && ^(main_lrph10ipreheader_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_336_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %337 = load i32* %336, align 4, !tbaa !1*/
		main_lrph10ipreheader_337 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %337 = load i32* %336, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_199)) begin
		main_lrph10ipreheader_337_reg <= main_lrph10ipreheader_337;
		if (start == 1'b0 && ^(main_lrph10ipreheader_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_337_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %338 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
		main_lrph10ipreheader_338 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %338 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_lrph10ipreheader_338_reg <= main_lrph10ipreheader_338;
		if (start == 1'b0 && ^(main_lrph10ipreheader_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_338_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %339 = and i32 %338, 15*/
		main_lrph10ipreheader_339 = (main_lrph10ipreheader_338 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %339 = and i32 %338, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_lrph10ipreheader_339_reg <= main_lrph10ipreheader_339;
		if (start == 1'b0 && ^(main_lrph10ipreheader_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_339_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %340 = ashr i32 %338, 4*/
		main_lrph10ipreheader_340 = ($signed(main_lrph10ipreheader_338) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %340 = ashr i32 %338, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_lrph10ipreheader_340_reg <= main_lrph10ipreheader_340;
		if (start == 1'b0 && ^(main_lrph10ipreheader_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_340_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int323 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10ipreheader_gep_int323 = 0; end
		main_lrph10ipreheader_gep_int323 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_int323 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		main_lrph10ipreheader_gep_int323_reg <= main_lrph10ipreheader_gep_int323;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_int323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_int323_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array324 = mul i32 %340, 64*/
		main_lrph10ipreheader_gep_array324 = (main_lrph10ipreheader_340 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array324 = mul i32 %340, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_lrph10ipreheader_gep_array324_reg <= main_lrph10ipreheader_gep_array324;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array324_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep325 = add i32 %gep_int323, %gep_array324*/
		main_lrph10ipreheader_gep325 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep325 = add i32 %gep_int323, %gep_array324*/
	main_lrph10ipreheader_gep325_reg = main_AddRoundKeyexit_crit_edgei_gep199_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array326 = mul i32 %339, 4*/
		main_lrph10ipreheader_gep_array326 = (main_lrph10ipreheader_339 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep_array326 = mul i32 %339, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_lrph10ipreheader_gep_array326_reg <= main_lrph10ipreheader_gep_array326;
		if (start == 1'b0 && ^(main_lrph10ipreheader_gep_array326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_gep_array326_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep327 = add i32 %gep325, %gep_array326*/
		main_lrph10ipreheader_gep327 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.lr.ph10.i.preheader*/
/*   %gep327 = add i32 %gep325, %gep_array326*/
	main_lrph10ipreheader_gep327_reg = main_AddRoundKeyexit_crit_edgei_gep206_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %341 = inttoptr i32 %gep327 to i32**/
		main_lrph10ipreheader_341 = main_lrph10ipreheader_gep327;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %341 = inttoptr i32 %gep327 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_181)) begin
		main_lrph10ipreheader_341_reg <= main_lrph10ipreheader_341;
		if (start == 1'b0 && ^(main_lrph10ipreheader_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_341_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %342 = load i32* %341, align 4, !tbaa !1*/
		main_lrph10ipreheader_342 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   %342 = load i32* %341, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_201)) begin
		main_lrph10ipreheader_342_reg <= main_lrph10ipreheader_342;
		if (start == 1'b0 && ^(main_lrph10ipreheader_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10ipreheader_342_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %i.09.i = phi i32 [ %i.0.i, %.lr.ph10.i ], [ 9, %.lr.ph10.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph10ipreheader_202) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph10i_i09i = 32'd9;
	end
	/* main: %.lr.ph10.i*/
	/*   %i.09.i = phi i32 [ %i.0.i, %.lr.ph10.i ], [ 9, %.lr.ph10.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrph10i_235) & (memory_controller_waitrequest == 1'd0)) & (main_lrph10i_424_reg == 1'd1))) */ begin
		main_lrph10i_i09i = main_lrph10i_i0i_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %i.09.i = phi i32 [ %i.0.i, %.lr.ph10.i ], [ 9, %.lr.ph10.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph10ipreheader_202) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph10i_i09i_reg <= main_lrph10i_i09i;
		if (start == 1'b0 && ^(main_lrph10i_i09i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_i09i_reg"); $finish; end
	end
	/* main: %.lr.ph10.i*/
	/*   %i.09.i = phi i32 [ %i.0.i, %.lr.ph10.i ], [ 9, %.lr.ph10.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrph10i_235) & (memory_controller_waitrequest == 1'd0)) & (main_lrph10i_424_reg == 1'd1))) begin
		main_lrph10i_i09i_reg <= main_lrph10i_i09i;
		if (start == 1'b0 && ^(main_lrph10i_i09i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_i09i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %344 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
		main_lrph10i_344 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %344 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_207)) begin
		main_lrph10i_344_reg <= main_lrph10i_344;
		if (start == 1'b0 && ^(main_lrph10i_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_344_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %345 = and i32 %344, 15*/
		main_lrph10i_345 = (main_lrph10i_344 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %345 = and i32 %344, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_207)) begin
		main_lrph10i_345_reg <= main_lrph10i_345;
		if (start == 1'b0 && ^(main_lrph10i_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_345_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %346 = ashr i32 %344, 4*/
		main_lrph10i_346 = ($signed(main_lrph10i_344) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %346 = ashr i32 %344, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_207)) begin
		main_lrph10i_346_reg <= main_lrph10i_346;
		if (start == 1'b0 && ^(main_lrph10i_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_346_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int328 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10i_gep_int328 = 0; end
		main_lrph10i_gep_int328 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int328 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		main_lrph10i_gep_int328_reg <= main_lrph10i_gep_int328;
		if (start == 1'b0 && ^(main_lrph10i_gep_int328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_int328_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array329 = mul i32 %346, 64*/
		main_lrph10i_gep_array329 = (main_lrph10i_346 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array329 = mul i32 %346, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_207)) begin
		main_lrph10i_gep_array329_reg <= main_lrph10i_gep_array329;
		if (start == 1'b0 && ^(main_lrph10i_gep_array329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array329_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep330 = add i32 %gep_int328, %gep_array329*/
		main_lrph10i_gep330 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep330 = add i32 %gep_int328, %gep_array329*/
	main_lrph10i_gep330_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array331 = mul i32 %345, 4*/
		main_lrph10i_gep_array331 = (main_lrph10i_345 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array331 = mul i32 %345, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_207)) begin
		main_lrph10i_gep_array331_reg <= main_lrph10i_gep_array331;
		if (start == 1'b0 && ^(main_lrph10i_gep_array331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array331_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep332 = add i32 %gep330, %gep_array331*/
		main_lrph10i_gep332 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep332 = add i32 %gep330, %gep_array331*/
	main_lrph10i_gep332_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %347 = inttoptr i32 %gep332 to i32**/
		main_lrph10i_347 = main_lrph10i_gep332;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %347 = inttoptr i32 %gep332 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		main_lrph10i_347_reg <= main_lrph10i_347;
		if (start == 1'b0 && ^(main_lrph10i_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_347_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %348 = load i32* %347, align 4, !tbaa !1*/
		main_lrph10i_348 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %348 = load i32* %347, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_209)) begin
		main_lrph10i_348_reg <= main_lrph10i_348;
		if (start == 1'b0 && ^(main_lrph10i_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_348_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %349 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
		main_lrph10i_349 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %349 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_207)) begin
		main_lrph10i_349_reg <= main_lrph10i_349;
		if (start == 1'b0 && ^(main_lrph10i_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_349_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %350 = and i32 %349, 15*/
		main_lrph10i_350 = (main_lrph10i_349 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %350 = and i32 %349, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_207)) begin
		main_lrph10i_350_reg <= main_lrph10i_350;
		if (start == 1'b0 && ^(main_lrph10i_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_350_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %351 = ashr i32 %349, 4*/
		main_lrph10i_351 = ($signed(main_lrph10i_349) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %351 = ashr i32 %349, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_207)) begin
		main_lrph10i_351_reg <= main_lrph10i_351;
		if (start == 1'b0 && ^(main_lrph10i_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_351_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int333 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10i_gep_int333 = 0; end
		main_lrph10i_gep_int333 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int333 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		main_lrph10i_gep_int333_reg <= main_lrph10i_gep_int333;
		if (start == 1'b0 && ^(main_lrph10i_gep_int333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_int333_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array334 = mul i32 %351, 64*/
		main_lrph10i_gep_array334 = (main_lrph10i_351 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array334 = mul i32 %351, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_207)) begin
		main_lrph10i_gep_array334_reg <= main_lrph10i_gep_array334;
		if (start == 1'b0 && ^(main_lrph10i_gep_array334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array334_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep335 = add i32 %gep_int333, %gep_array334*/
		main_lrph10i_gep335 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep335 = add i32 %gep_int333, %gep_array334*/
	main_lrph10i_gep335_reg = main_AddRoundKeyexit_crit_edgei_gep199_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array336 = mul i32 %350, 4*/
		main_lrph10i_gep_array336 = (main_lrph10i_350 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array336 = mul i32 %350, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_207)) begin
		main_lrph10i_gep_array336_reg <= main_lrph10i_gep_array336;
		if (start == 1'b0 && ^(main_lrph10i_gep_array336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array336_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep337 = add i32 %gep335, %gep_array336*/
		main_lrph10i_gep337 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep337 = add i32 %gep335, %gep_array336*/
	main_lrph10i_gep337_reg = main_AddRoundKeyexit_crit_edgei_gep206_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %352 = inttoptr i32 %gep337 to i32**/
		main_lrph10i_352 = main_lrph10i_gep337;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %352 = inttoptr i32 %gep337 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		main_lrph10i_352_reg <= main_lrph10i_352;
		if (start == 1'b0 && ^(main_lrph10i_352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_352_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %353 = load i32* %352, align 4, !tbaa !1*/
		main_lrph10i_353 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %353 = load i32* %352, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_209)) begin
		main_lrph10i_353_reg <= main_lrph10i_353;
		if (start == 1'b0 && ^(main_lrph10i_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_353_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %354 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
		main_lrph10i_354 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %354 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		main_lrph10i_354_reg <= main_lrph10i_354;
		if (start == 1'b0 && ^(main_lrph10i_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_354_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %355 = and i32 %354, 15*/
		main_lrph10i_355 = (main_lrph10i_354 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %355 = and i32 %354, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		main_lrph10i_355_reg <= main_lrph10i_355;
		if (start == 1'b0 && ^(main_lrph10i_355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_355_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %356 = ashr i32 %354, 4*/
		main_lrph10i_356 = ($signed(main_lrph10i_354) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %356 = ashr i32 %354, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		main_lrph10i_356_reg <= main_lrph10i_356;
		if (start == 1'b0 && ^(main_lrph10i_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_356_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int338 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10i_gep_int338 = 0; end
		main_lrph10i_gep_int338 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int338 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		main_lrph10i_gep_int338_reg <= main_lrph10i_gep_int338;
		if (start == 1'b0 && ^(main_lrph10i_gep_int338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_int338_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array339 = mul i32 %356, 64*/
		main_lrph10i_gep_array339 = (main_lrph10i_356 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array339 = mul i32 %356, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		main_lrph10i_gep_array339_reg <= main_lrph10i_gep_array339;
		if (start == 1'b0 && ^(main_lrph10i_gep_array339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array339_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep340 = add i32 %gep_int338, %gep_array339*/
		main_lrph10i_gep340 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep340 = add i32 %gep_int338, %gep_array339*/
	main_lrph10i_gep340_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array341 = mul i32 %355, 4*/
		main_lrph10i_gep_array341 = (main_lrph10i_355 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array341 = mul i32 %355, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		main_lrph10i_gep_array341_reg <= main_lrph10i_gep_array341;
		if (start == 1'b0 && ^(main_lrph10i_gep_array341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array341_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep342 = add i32 %gep340, %gep_array341*/
		main_lrph10i_gep342 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep342 = add i32 %gep340, %gep_array341*/
	main_lrph10i_gep342_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %357 = inttoptr i32 %gep342 to i32**/
		main_lrph10i_357 = main_lrph10i_gep342;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %357 = inttoptr i32 %gep342 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_209)) begin
		main_lrph10i_357_reg <= main_lrph10i_357;
		if (start == 1'b0 && ^(main_lrph10i_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_357_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %358 = load i32* %357, align 4, !tbaa !1*/
		main_lrph10i_358 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %358 = load i32* %357, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_211)) begin
		main_lrph10i_358_reg <= main_lrph10i_358;
		if (start == 1'b0 && ^(main_lrph10i_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_358_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %359 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
		main_lrph10i_359 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %359 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_209)) begin
		main_lrph10i_359_reg <= main_lrph10i_359;
		if (start == 1'b0 && ^(main_lrph10i_359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_359_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %360 = and i32 %359, 15*/
		main_lrph10i_360 = (main_lrph10i_359 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %360 = and i32 %359, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_209)) begin
		main_lrph10i_360_reg <= main_lrph10i_360;
		if (start == 1'b0 && ^(main_lrph10i_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_360_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %361 = ashr i32 %359, 4*/
		main_lrph10i_361 = ($signed(main_lrph10i_359) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %361 = ashr i32 %359, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_209)) begin
		main_lrph10i_361_reg <= main_lrph10i_361;
		if (start == 1'b0 && ^(main_lrph10i_361) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_361_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int343 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10i_gep_int343 = 0; end
		main_lrph10i_gep_int343 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int343 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		main_lrph10i_gep_int343_reg <= main_lrph10i_gep_int343;
		if (start == 1'b0 && ^(main_lrph10i_gep_int343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_int343_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array344 = mul i32 %361, 64*/
		main_lrph10i_gep_array344 = (main_lrph10i_361 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array344 = mul i32 %361, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_209)) begin
		main_lrph10i_gep_array344_reg <= main_lrph10i_gep_array344;
		if (start == 1'b0 && ^(main_lrph10i_gep_array344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array344_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep345 = add i32 %gep_int343, %gep_array344*/
		main_lrph10i_gep345 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep345 = add i32 %gep_int343, %gep_array344*/
	main_lrph10i_gep345_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array346 = mul i32 %360, 4*/
		main_lrph10i_gep_array346 = (main_lrph10i_360 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array346 = mul i32 %360, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_209)) begin
		main_lrph10i_gep_array346_reg <= main_lrph10i_gep_array346;
		if (start == 1'b0 && ^(main_lrph10i_gep_array346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array346_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep347 = add i32 %gep345, %gep_array346*/
		main_lrph10i_gep347 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep347 = add i32 %gep345, %gep_array346*/
	main_lrph10i_gep347_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %362 = inttoptr i32 %gep347 to i32**/
		main_lrph10i_362 = main_lrph10i_gep347;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %362 = inttoptr i32 %gep347 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_210)) begin
		main_lrph10i_362_reg <= main_lrph10i_362;
		if (start == 1'b0 && ^(main_lrph10i_362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_362_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %363 = load i32* %362, align 4, !tbaa !1*/
		main_lrph10i_363 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %363 = load i32* %362, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_213)) begin
		main_lrph10i_363_reg <= main_lrph10i_363;
		if (start == 1'b0 && ^(main_lrph10i_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_363_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %364 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
		main_lrph10i_364 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %364 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_210)) begin
		main_lrph10i_364_reg <= main_lrph10i_364;
		if (start == 1'b0 && ^(main_lrph10i_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_364_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %365 = and i32 %364, 15*/
		main_lrph10i_365 = (main_lrph10i_364 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %365 = and i32 %364, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_210)) begin
		main_lrph10i_365_reg <= main_lrph10i_365;
		if (start == 1'b0 && ^(main_lrph10i_365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_365_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %366 = ashr i32 %364, 4*/
		main_lrph10i_366 = ($signed(main_lrph10i_364) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %366 = ashr i32 %364, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_210)) begin
		main_lrph10i_366_reg <= main_lrph10i_366;
		if (start == 1'b0 && ^(main_lrph10i_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_366_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int348 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10i_gep_int348 = 0; end
		main_lrph10i_gep_int348 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int348 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		main_lrph10i_gep_int348_reg <= main_lrph10i_gep_int348;
		if (start == 1'b0 && ^(main_lrph10i_gep_int348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_int348_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array349 = mul i32 %366, 64*/
		main_lrph10i_gep_array349 = (main_lrph10i_366 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array349 = mul i32 %366, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_210)) begin
		main_lrph10i_gep_array349_reg <= main_lrph10i_gep_array349;
		if (start == 1'b0 && ^(main_lrph10i_gep_array349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array349_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep350 = add i32 %gep_int348, %gep_array349*/
		main_lrph10i_gep350 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep350 = add i32 %gep_int348, %gep_array349*/
	main_lrph10i_gep350_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array351 = mul i32 %365, 4*/
		main_lrph10i_gep_array351 = (main_lrph10i_365 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array351 = mul i32 %365, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_210)) begin
		main_lrph10i_gep_array351_reg <= main_lrph10i_gep_array351;
		if (start == 1'b0 && ^(main_lrph10i_gep_array351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array351_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep352 = add i32 %gep350, %gep_array351*/
		main_lrph10i_gep352 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep352 = add i32 %gep350, %gep_array351*/
	main_lrph10i_gep352_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %367 = inttoptr i32 %gep352 to i32**/
		main_lrph10i_367 = main_lrph10i_gep352;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %367 = inttoptr i32 %gep352 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_211)) begin
		main_lrph10i_367_reg <= main_lrph10i_367;
		if (start == 1'b0 && ^(main_lrph10i_367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_367_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %368 = load i32* %367, align 4, !tbaa !1*/
		main_lrph10i_368 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %368 = load i32* %367, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_215)) begin
		main_lrph10i_368_reg <= main_lrph10i_368;
		if (start == 1'b0 && ^(main_lrph10i_368) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_368_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %369 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
		main_lrph10i_369 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %369 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_214)) begin
		main_lrph10i_369_reg <= main_lrph10i_369;
		if (start == 1'b0 && ^(main_lrph10i_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_369_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %370 = and i32 %369, 15*/
		main_lrph10i_370 = (main_lrph10i_369 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %370 = and i32 %369, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_214)) begin
		main_lrph10i_370_reg <= main_lrph10i_370;
		if (start == 1'b0 && ^(main_lrph10i_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_370_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %371 = ashr i32 %369, 4*/
		main_lrph10i_371 = ($signed(main_lrph10i_369) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %371 = ashr i32 %369, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_214)) begin
		main_lrph10i_371_reg <= main_lrph10i_371;
		if (start == 1'b0 && ^(main_lrph10i_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_371_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int353 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10i_gep_int353 = 0; end
		main_lrph10i_gep_int353 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int353 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		main_lrph10i_gep_int353_reg <= main_lrph10i_gep_int353;
		if (start == 1'b0 && ^(main_lrph10i_gep_int353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_int353_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array354 = mul i32 %371, 64*/
		main_lrph10i_gep_array354 = (main_lrph10i_371 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array354 = mul i32 %371, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_214)) begin
		main_lrph10i_gep_array354_reg <= main_lrph10i_gep_array354;
		if (start == 1'b0 && ^(main_lrph10i_gep_array354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array354_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep355 = add i32 %gep_int353, %gep_array354*/
		main_lrph10i_gep355 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep355 = add i32 %gep_int353, %gep_array354*/
	main_lrph10i_gep355_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array356 = mul i32 %370, 4*/
		main_lrph10i_gep_array356 = (main_lrph10i_370 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array356 = mul i32 %370, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_214)) begin
		main_lrph10i_gep_array356_reg <= main_lrph10i_gep_array356;
		if (start == 1'b0 && ^(main_lrph10i_gep_array356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array356_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep357 = add i32 %gep355, %gep_array356*/
		main_lrph10i_gep357 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep357 = add i32 %gep355, %gep_array356*/
	main_lrph10i_gep357_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %372 = inttoptr i32 %gep357 to i32**/
		main_lrph10i_372 = main_lrph10i_gep357;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %372 = inttoptr i32 %gep357 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_215)) begin
		main_lrph10i_372_reg <= main_lrph10i_372;
		if (start == 1'b0 && ^(main_lrph10i_372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_372_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %373 = load i32* %372, align 4, !tbaa !1*/
		main_lrph10i_373 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %373 = load i32* %372, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_216)) begin
		main_lrph10i_373_reg <= main_lrph10i_373;
		if (start == 1'b0 && ^(main_lrph10i_373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_373_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %374 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
		main_lrph10i_374 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %374 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_216)) begin
		main_lrph10i_374_reg <= main_lrph10i_374;
		if (start == 1'b0 && ^(main_lrph10i_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_374_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %375 = and i32 %374, 15*/
		main_lrph10i_375 = (main_lrph10i_374 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %375 = and i32 %374, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_216)) begin
		main_lrph10i_375_reg <= main_lrph10i_375;
		if (start == 1'b0 && ^(main_lrph10i_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_375_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %376 = ashr i32 %374, 4*/
		main_lrph10i_376 = ($signed(main_lrph10i_374) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %376 = ashr i32 %374, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_216)) begin
		main_lrph10i_376_reg <= main_lrph10i_376;
		if (start == 1'b0 && ^(main_lrph10i_376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_376_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int358 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10i_gep_int358 = 0; end
		main_lrph10i_gep_int358 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int358 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		main_lrph10i_gep_int358_reg <= main_lrph10i_gep_int358;
		if (start == 1'b0 && ^(main_lrph10i_gep_int358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_int358_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array359 = mul i32 %376, 64*/
		main_lrph10i_gep_array359 = (main_lrph10i_376 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array359 = mul i32 %376, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_216)) begin
		main_lrph10i_gep_array359_reg <= main_lrph10i_gep_array359;
		if (start == 1'b0 && ^(main_lrph10i_gep_array359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array359_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep360 = add i32 %gep_int358, %gep_array359*/
		main_lrph10i_gep360 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep360 = add i32 %gep_int358, %gep_array359*/
	main_lrph10i_gep360_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array361 = mul i32 %375, 4*/
		main_lrph10i_gep_array361 = (main_lrph10i_375 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array361 = mul i32 %375, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_216)) begin
		main_lrph10i_gep_array361_reg <= main_lrph10i_gep_array361;
		if (start == 1'b0 && ^(main_lrph10i_gep_array361) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array361_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep362 = add i32 %gep360, %gep_array361*/
		main_lrph10i_gep362 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep362 = add i32 %gep360, %gep_array361*/
	main_lrph10i_gep362_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %377 = inttoptr i32 %gep362 to i32**/
		main_lrph10i_377 = main_lrph10i_gep362;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %377 = inttoptr i32 %gep362 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		main_lrph10i_377_reg <= main_lrph10i_377;
		if (start == 1'b0 && ^(main_lrph10i_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_377_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %378 = load i32* %377, align 4, !tbaa !1*/
		main_lrph10i_378 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %378 = load i32* %377, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_218)) begin
		main_lrph10i_378_reg <= main_lrph10i_378;
		if (start == 1'b0 && ^(main_lrph10i_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_378_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %379 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
		main_lrph10i_379 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %379 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_216)) begin
		main_lrph10i_379_reg <= main_lrph10i_379;
		if (start == 1'b0 && ^(main_lrph10i_379) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_379_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %380 = and i32 %379, 15*/
		main_lrph10i_380 = (main_lrph10i_379 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %380 = and i32 %379, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_216)) begin
		main_lrph10i_380_reg <= main_lrph10i_380;
		if (start == 1'b0 && ^(main_lrph10i_380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_380_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %381 = ashr i32 %379, 4*/
		main_lrph10i_381 = ($signed(main_lrph10i_379) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %381 = ashr i32 %379, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_216)) begin
		main_lrph10i_381_reg <= main_lrph10i_381;
		if (start == 1'b0 && ^(main_lrph10i_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_381_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int363 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10i_gep_int363 = 0; end
		main_lrph10i_gep_int363 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int363 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		main_lrph10i_gep_int363_reg <= main_lrph10i_gep_int363;
		if (start == 1'b0 && ^(main_lrph10i_gep_int363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_int363_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array364 = mul i32 %381, 64*/
		main_lrph10i_gep_array364 = (main_lrph10i_381 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array364 = mul i32 %381, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_216)) begin
		main_lrph10i_gep_array364_reg <= main_lrph10i_gep_array364;
		if (start == 1'b0 && ^(main_lrph10i_gep_array364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array364_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep365 = add i32 %gep_int363, %gep_array364*/
		main_lrph10i_gep365 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep365 = add i32 %gep_int363, %gep_array364*/
	main_lrph10i_gep365_reg = main_AddRoundKeyexit_crit_edgei_gep199_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array366 = mul i32 %380, 4*/
		main_lrph10i_gep_array366 = (main_lrph10i_380 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array366 = mul i32 %380, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_216)) begin
		main_lrph10i_gep_array366_reg <= main_lrph10i_gep_array366;
		if (start == 1'b0 && ^(main_lrph10i_gep_array366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array366_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep367 = add i32 %gep365, %gep_array366*/
		main_lrph10i_gep367 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep367 = add i32 %gep365, %gep_array366*/
	main_lrph10i_gep367_reg = main_AddRoundKeyexit_crit_edgei_gep206_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %382 = inttoptr i32 %gep367 to i32**/
		main_lrph10i_382 = main_lrph10i_gep367;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %382 = inttoptr i32 %gep367 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		main_lrph10i_382_reg <= main_lrph10i_382;
		if (start == 1'b0 && ^(main_lrph10i_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_382_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %383 = load i32* %382, align 4, !tbaa !1*/
		main_lrph10i_383 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %383 = load i32* %382, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_218)) begin
		main_lrph10i_383_reg <= main_lrph10i_383;
		if (start == 1'b0 && ^(main_lrph10i_383) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_383_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %384 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
		main_lrph10i_384 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %384 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_219)) begin
		main_lrph10i_384_reg <= main_lrph10i_384;
		if (start == 1'b0 && ^(main_lrph10i_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_384_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %385 = and i32 %384, 15*/
		main_lrph10i_385 = (main_lrph10i_384 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %385 = and i32 %384, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_219)) begin
		main_lrph10i_385_reg <= main_lrph10i_385;
		if (start == 1'b0 && ^(main_lrph10i_385) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_385_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %386 = ashr i32 %384, 4*/
		main_lrph10i_386 = ($signed(main_lrph10i_384) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %386 = ashr i32 %384, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_219)) begin
		main_lrph10i_386_reg <= main_lrph10i_386;
		if (start == 1'b0 && ^(main_lrph10i_386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_386_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int368 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10i_gep_int368 = 0; end
		main_lrph10i_gep_int368 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int368 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		main_lrph10i_gep_int368_reg <= main_lrph10i_gep_int368;
		if (start == 1'b0 && ^(main_lrph10i_gep_int368) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_int368_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array369 = mul i32 %386, 64*/
		main_lrph10i_gep_array369 = (main_lrph10i_386 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array369 = mul i32 %386, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_219)) begin
		main_lrph10i_gep_array369_reg <= main_lrph10i_gep_array369;
		if (start == 1'b0 && ^(main_lrph10i_gep_array369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array369_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep370 = add i32 %gep_int368, %gep_array369*/
		main_lrph10i_gep370 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep370 = add i32 %gep_int368, %gep_array369*/
	main_lrph10i_gep370_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array371 = mul i32 %385, 4*/
		main_lrph10i_gep_array371 = (main_lrph10i_385 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array371 = mul i32 %385, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_219)) begin
		main_lrph10i_gep_array371_reg <= main_lrph10i_gep_array371;
		if (start == 1'b0 && ^(main_lrph10i_gep_array371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array371_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep372 = add i32 %gep370, %gep_array371*/
		main_lrph10i_gep372 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep372 = add i32 %gep370, %gep_array371*/
	main_lrph10i_gep372_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %387 = inttoptr i32 %gep372 to i32**/
		main_lrph10i_387 = main_lrph10i_gep372;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %387 = inttoptr i32 %gep372 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_220)) begin
		main_lrph10i_387_reg <= main_lrph10i_387;
		if (start == 1'b0 && ^(main_lrph10i_387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_387_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %388 = load i32* %387, align 4, !tbaa !1*/
		main_lrph10i_388 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %388 = load i32* %387, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_221)) begin
		main_lrph10i_388_reg <= main_lrph10i_388;
		if (start == 1'b0 && ^(main_lrph10i_388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_388_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %389 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
		main_lrph10i_389 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %389 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_219)) begin
		main_lrph10i_389_reg <= main_lrph10i_389;
		if (start == 1'b0 && ^(main_lrph10i_389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_389_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %390 = and i32 %389, 15*/
		main_lrph10i_390 = (main_lrph10i_389 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %390 = and i32 %389, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_219)) begin
		main_lrph10i_390_reg <= main_lrph10i_390;
		if (start == 1'b0 && ^(main_lrph10i_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_390_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %391 = ashr i32 %389, 4*/
		main_lrph10i_391 = ($signed(main_lrph10i_389) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %391 = ashr i32 %389, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_219)) begin
		main_lrph10i_391_reg <= main_lrph10i_391;
		if (start == 1'b0 && ^(main_lrph10i_391) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_391_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int373 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10i_gep_int373 = 0; end
		main_lrph10i_gep_int373 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int373 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		main_lrph10i_gep_int373_reg <= main_lrph10i_gep_int373;
		if (start == 1'b0 && ^(main_lrph10i_gep_int373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_int373_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array374 = mul i32 %391, 64*/
		main_lrph10i_gep_array374 = (main_lrph10i_391 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array374 = mul i32 %391, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_219)) begin
		main_lrph10i_gep_array374_reg <= main_lrph10i_gep_array374;
		if (start == 1'b0 && ^(main_lrph10i_gep_array374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array374_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep375 = add i32 %gep_int373, %gep_array374*/
		main_lrph10i_gep375 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep375 = add i32 %gep_int373, %gep_array374*/
	main_lrph10i_gep375_reg = main_AddRoundKeyexit_crit_edgei_gep199_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array376 = mul i32 %390, 4*/
		main_lrph10i_gep_array376 = (main_lrph10i_390 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array376 = mul i32 %390, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_219)) begin
		main_lrph10i_gep_array376_reg <= main_lrph10i_gep_array376;
		if (start == 1'b0 && ^(main_lrph10i_gep_array376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array376_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep377 = add i32 %gep375, %gep_array376*/
		main_lrph10i_gep377 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep377 = add i32 %gep375, %gep_array376*/
	main_lrph10i_gep377_reg = main_AddRoundKeyexit_crit_edgei_gep206_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %392 = inttoptr i32 %gep377 to i32**/
		main_lrph10i_392 = main_lrph10i_gep377;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %392 = inttoptr i32 %gep377 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_220)) begin
		main_lrph10i_392_reg <= main_lrph10i_392;
		if (start == 1'b0 && ^(main_lrph10i_392) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_392_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %393 = load i32* %392, align 4, !tbaa !1*/
		main_lrph10i_393 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %393 = load i32* %392, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_221)) begin
		main_lrph10i_393_reg <= main_lrph10i_393;
		if (start == 1'b0 && ^(main_lrph10i_393) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_393_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %394 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
		main_lrph10i_394 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %394 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_221)) begin
		main_lrph10i_394_reg <= main_lrph10i_394;
		if (start == 1'b0 && ^(main_lrph10i_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_394_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %395 = and i32 %394, 15*/
		main_lrph10i_395 = (main_lrph10i_394 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %395 = and i32 %394, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_221)) begin
		main_lrph10i_395_reg <= main_lrph10i_395;
		if (start == 1'b0 && ^(main_lrph10i_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_395_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %396 = ashr i32 %394, 4*/
		main_lrph10i_396 = ($signed(main_lrph10i_394) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %396 = ashr i32 %394, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_221)) begin
		main_lrph10i_396_reg <= main_lrph10i_396;
		if (start == 1'b0 && ^(main_lrph10i_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_396_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int378 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10i_gep_int378 = 0; end
		main_lrph10i_gep_int378 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int378 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		main_lrph10i_gep_int378_reg <= main_lrph10i_gep_int378;
		if (start == 1'b0 && ^(main_lrph10i_gep_int378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_int378_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array379 = mul i32 %396, 64*/
		main_lrph10i_gep_array379 = (main_lrph10i_396 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array379 = mul i32 %396, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_221)) begin
		main_lrph10i_gep_array379_reg <= main_lrph10i_gep_array379;
		if (start == 1'b0 && ^(main_lrph10i_gep_array379) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array379_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep380 = add i32 %gep_int378, %gep_array379*/
		main_lrph10i_gep380 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep380 = add i32 %gep_int378, %gep_array379*/
	main_lrph10i_gep380_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array381 = mul i32 %395, 4*/
		main_lrph10i_gep_array381 = (main_lrph10i_395 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array381 = mul i32 %395, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_221)) begin
		main_lrph10i_gep_array381_reg <= main_lrph10i_gep_array381;
		if (start == 1'b0 && ^(main_lrph10i_gep_array381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array381_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep382 = add i32 %gep380, %gep_array381*/
		main_lrph10i_gep382 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep382 = add i32 %gep380, %gep_array381*/
	main_lrph10i_gep382_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %397 = inttoptr i32 %gep382 to i32**/
		main_lrph10i_397 = main_lrph10i_gep382;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %397 = inttoptr i32 %gep382 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_222)) begin
		main_lrph10i_397_reg <= main_lrph10i_397;
		if (start == 1'b0 && ^(main_lrph10i_397) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_397_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %398 = load i32* %397, align 4, !tbaa !1*/
		main_lrph10i_398 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %398 = load i32* %397, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_223)) begin
		main_lrph10i_398_reg <= main_lrph10i_398;
		if (start == 1'b0 && ^(main_lrph10i_398) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_398_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %399 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
		main_lrph10i_399 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %399 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_222)) begin
		main_lrph10i_399_reg <= main_lrph10i_399;
		if (start == 1'b0 && ^(main_lrph10i_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_399_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %400 = and i32 %399, 15*/
		main_lrph10i_400 = (main_lrph10i_399 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %400 = and i32 %399, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_222)) begin
		main_lrph10i_400_reg <= main_lrph10i_400;
		if (start == 1'b0 && ^(main_lrph10i_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_400_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %401 = ashr i32 %399, 4*/
		main_lrph10i_401 = ($signed(main_lrph10i_399) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %401 = ashr i32 %399, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_222)) begin
		main_lrph10i_401_reg <= main_lrph10i_401;
		if (start == 1'b0 && ^(main_lrph10i_401) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_401_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int383 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10i_gep_int383 = 0; end
		main_lrph10i_gep_int383 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int383 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		main_lrph10i_gep_int383_reg <= main_lrph10i_gep_int383;
		if (start == 1'b0 && ^(main_lrph10i_gep_int383) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_int383_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array384 = mul i32 %401, 64*/
		main_lrph10i_gep_array384 = (main_lrph10i_401 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array384 = mul i32 %401, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_222)) begin
		main_lrph10i_gep_array384_reg <= main_lrph10i_gep_array384;
		if (start == 1'b0 && ^(main_lrph10i_gep_array384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array384_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep385 = add i32 %gep_int383, %gep_array384*/
		main_lrph10i_gep385 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep385 = add i32 %gep_int383, %gep_array384*/
	main_lrph10i_gep385_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array386 = mul i32 %400, 4*/
		main_lrph10i_gep_array386 = (main_lrph10i_400 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array386 = mul i32 %400, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_222)) begin
		main_lrph10i_gep_array386_reg <= main_lrph10i_gep_array386;
		if (start == 1'b0 && ^(main_lrph10i_gep_array386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array386_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep387 = add i32 %gep385, %gep_array386*/
		main_lrph10i_gep387 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep387 = add i32 %gep385, %gep_array386*/
	main_lrph10i_gep387_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %402 = inttoptr i32 %gep387 to i32**/
		main_lrph10i_402 = main_lrph10i_gep387;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %402 = inttoptr i32 %gep387 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_223)) begin
		main_lrph10i_402_reg <= main_lrph10i_402;
		if (start == 1'b0 && ^(main_lrph10i_402) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_402_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %403 = load i32* %402, align 4, !tbaa !1*/
		main_lrph10i_403 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %403 = load i32* %402, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_225)) begin
		main_lrph10i_403_reg <= main_lrph10i_403;
		if (start == 1'b0 && ^(main_lrph10i_403) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_403_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %404 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
		main_lrph10i_404 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %404 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_223)) begin
		main_lrph10i_404_reg <= main_lrph10i_404;
		if (start == 1'b0 && ^(main_lrph10i_404) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_404_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %405 = and i32 %404, 15*/
		main_lrph10i_405 = (main_lrph10i_404 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %405 = and i32 %404, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_223)) begin
		main_lrph10i_405_reg <= main_lrph10i_405;
		if (start == 1'b0 && ^(main_lrph10i_405) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_405_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %406 = ashr i32 %404, 4*/
		main_lrph10i_406 = ($signed(main_lrph10i_404) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %406 = ashr i32 %404, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_223)) begin
		main_lrph10i_406_reg <= main_lrph10i_406;
		if (start == 1'b0 && ^(main_lrph10i_406) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_406_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int388 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10i_gep_int388 = 0; end
		main_lrph10i_gep_int388 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int388 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		main_lrph10i_gep_int388_reg <= main_lrph10i_gep_int388;
		if (start == 1'b0 && ^(main_lrph10i_gep_int388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_int388_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array389 = mul i32 %406, 64*/
		main_lrph10i_gep_array389 = (main_lrph10i_406 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array389 = mul i32 %406, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_223)) begin
		main_lrph10i_gep_array389_reg <= main_lrph10i_gep_array389;
		if (start == 1'b0 && ^(main_lrph10i_gep_array389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array389_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep390 = add i32 %gep_int388, %gep_array389*/
		main_lrph10i_gep390 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep390 = add i32 %gep_int388, %gep_array389*/
	main_lrph10i_gep390_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array391 = mul i32 %405, 4*/
		main_lrph10i_gep_array391 = (main_lrph10i_405 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array391 = mul i32 %405, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_223)) begin
		main_lrph10i_gep_array391_reg <= main_lrph10i_gep_array391;
		if (start == 1'b0 && ^(main_lrph10i_gep_array391) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array391_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep392 = add i32 %gep390, %gep_array391*/
		main_lrph10i_gep392 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep392 = add i32 %gep390, %gep_array391*/
	main_lrph10i_gep392_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %407 = inttoptr i32 %gep392 to i32**/
		main_lrph10i_407 = main_lrph10i_gep392;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %407 = inttoptr i32 %gep392 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_224)) begin
		main_lrph10i_407_reg <= main_lrph10i_407;
		if (start == 1'b0 && ^(main_lrph10i_407) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_407_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %408 = load i32* %407, align 4, !tbaa !1*/
		main_lrph10i_408 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %408 = load i32* %407, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_227)) begin
		main_lrph10i_408_reg <= main_lrph10i_408;
		if (start == 1'b0 && ^(main_lrph10i_408) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_408_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %409 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
		main_lrph10i_409 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %409 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_228)) begin
		main_lrph10i_409_reg <= main_lrph10i_409;
		if (start == 1'b0 && ^(main_lrph10i_409) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_409_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %410 = and i32 %409, 15*/
		main_lrph10i_410 = (main_lrph10i_409 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %410 = and i32 %409, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_228)) begin
		main_lrph10i_410_reg <= main_lrph10i_410;
		if (start == 1'b0 && ^(main_lrph10i_410) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_410_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %411 = ashr i32 %409, 4*/
		main_lrph10i_411 = ($signed(main_lrph10i_409) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %411 = ashr i32 %409, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_228)) begin
		main_lrph10i_411_reg <= main_lrph10i_411;
		if (start == 1'b0 && ^(main_lrph10i_411) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_411_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int393 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10i_gep_int393 = 0; end
		main_lrph10i_gep_int393 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int393 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		main_lrph10i_gep_int393_reg <= main_lrph10i_gep_int393;
		if (start == 1'b0 && ^(main_lrph10i_gep_int393) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_int393_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array394 = mul i32 %411, 64*/
		main_lrph10i_gep_array394 = (main_lrph10i_411 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array394 = mul i32 %411, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_228)) begin
		main_lrph10i_gep_array394_reg <= main_lrph10i_gep_array394;
		if (start == 1'b0 && ^(main_lrph10i_gep_array394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array394_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep395 = add i32 %gep_int393, %gep_array394*/
		main_lrph10i_gep395 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep395 = add i32 %gep_int393, %gep_array394*/
	main_lrph10i_gep395_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array396 = mul i32 %410, 4*/
		main_lrph10i_gep_array396 = (main_lrph10i_410 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array396 = mul i32 %410, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_228)) begin
		main_lrph10i_gep_array396_reg <= main_lrph10i_gep_array396;
		if (start == 1'b0 && ^(main_lrph10i_gep_array396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array396_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep397 = add i32 %gep395, %gep_array396*/
		main_lrph10i_gep397 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep397 = add i32 %gep395, %gep_array396*/
	main_lrph10i_gep397_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %412 = inttoptr i32 %gep397 to i32**/
		main_lrph10i_412 = main_lrph10i_gep397;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %412 = inttoptr i32 %gep397 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_229)) begin
		main_lrph10i_412_reg <= main_lrph10i_412;
		if (start == 1'b0 && ^(main_lrph10i_412) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_412_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %413 = load i32* %412, align 4, !tbaa !1*/
		main_lrph10i_413 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %413 = load i32* %412, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_230)) begin
		main_lrph10i_413_reg <= main_lrph10i_413;
		if (start == 1'b0 && ^(main_lrph10i_413) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_413_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %414 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
		main_lrph10i_414 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %414 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_229)) begin
		main_lrph10i_414_reg <= main_lrph10i_414;
		if (start == 1'b0 && ^(main_lrph10i_414) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_414_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %415 = and i32 %414, 15*/
		main_lrph10i_415 = (main_lrph10i_414 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %415 = and i32 %414, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_229)) begin
		main_lrph10i_415_reg <= main_lrph10i_415;
		if (start == 1'b0 && ^(main_lrph10i_415) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_415_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %416 = ashr i32 %414, 4*/
		main_lrph10i_416 = ($signed(main_lrph10i_414) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %416 = ashr i32 %414, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_229)) begin
		main_lrph10i_416_reg <= main_lrph10i_416;
		if (start == 1'b0 && ^(main_lrph10i_416) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_416_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int398 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10i_gep_int398 = 0; end
		main_lrph10i_gep_int398 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int398 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		main_lrph10i_gep_int398_reg <= main_lrph10i_gep_int398;
		if (start == 1'b0 && ^(main_lrph10i_gep_int398) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_int398_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array399 = mul i32 %416, 64*/
		main_lrph10i_gep_array399 = (main_lrph10i_416 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array399 = mul i32 %416, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_229)) begin
		main_lrph10i_gep_array399_reg <= main_lrph10i_gep_array399;
		if (start == 1'b0 && ^(main_lrph10i_gep_array399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array399_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep400 = add i32 %gep_int398, %gep_array399*/
		main_lrph10i_gep400 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep400 = add i32 %gep_int398, %gep_array399*/
	main_lrph10i_gep400_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array401 = mul i32 %415, 4*/
		main_lrph10i_gep_array401 = (main_lrph10i_415 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array401 = mul i32 %415, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_229)) begin
		main_lrph10i_gep_array401_reg <= main_lrph10i_gep_array401;
		if (start == 1'b0 && ^(main_lrph10i_gep_array401) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array401_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep402 = add i32 %gep400, %gep_array401*/
		main_lrph10i_gep402 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep402 = add i32 %gep400, %gep_array401*/
	main_lrph10i_gep402_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %417 = inttoptr i32 %gep402 to i32**/
		main_lrph10i_417 = main_lrph10i_gep402;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %417 = inttoptr i32 %gep402 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_230)) begin
		main_lrph10i_417_reg <= main_lrph10i_417;
		if (start == 1'b0 && ^(main_lrph10i_417) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_417_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %418 = load i32* %417, align 4, !tbaa !1*/
		main_lrph10i_418 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %418 = load i32* %417, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_232)) begin
		main_lrph10i_418_reg <= main_lrph10i_418;
		if (start == 1'b0 && ^(main_lrph10i_418) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_418_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %419 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
		main_lrph10i_419 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %419 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_230)) begin
		main_lrph10i_419_reg <= main_lrph10i_419;
		if (start == 1'b0 && ^(main_lrph10i_419) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_419_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %420 = and i32 %419, 15*/
		main_lrph10i_420 = (main_lrph10i_419 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %420 = and i32 %419, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_230)) begin
		main_lrph10i_420_reg <= main_lrph10i_420;
		if (start == 1'b0 && ^(main_lrph10i_420) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_420_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %421 = ashr i32 %419, 4*/
		main_lrph10i_421 = ($signed(main_lrph10i_419) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %421 = ashr i32 %419, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_230)) begin
		main_lrph10i_421_reg <= main_lrph10i_421;
		if (start == 1'b0 && ^(main_lrph10i_421) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_421_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int403 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
if (reset) begin main_lrph10i_gep_int403 = 0; end
		main_lrph10i_gep_int403 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_int403 = ptrtoint [16 x [16 x i32]]* @invSbox to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		main_lrph10i_gep_int403_reg <= main_lrph10i_gep_int403;
		if (start == 1'b0 && ^(main_lrph10i_gep_int403) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_int403_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array404 = mul i32 %421, 64*/
		main_lrph10i_gep_array404 = (main_lrph10i_421 * 32'd64);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array404 = mul i32 %421, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_230)) begin
		main_lrph10i_gep_array404_reg <= main_lrph10i_gep_array404;
		if (start == 1'b0 && ^(main_lrph10i_gep_array404) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array404_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep405 = add i32 %gep_int403, %gep_array404*/
		main_lrph10i_gep405 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep405 = add i32 %gep_int403, %gep_array404*/
	main_lrph10i_gep405_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array406 = mul i32 %420, 4*/
		main_lrph10i_gep_array406 = (main_lrph10i_420 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %gep_array406 = mul i32 %420, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_230)) begin
		main_lrph10i_gep_array406_reg <= main_lrph10i_gep_array406;
		if (start == 1'b0 && ^(main_lrph10i_gep_array406) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_gep_array406_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %gep407 = add i32 %gep405, %gep_array406*/
		main_lrph10i_gep407 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph10.i*/
/*   %gep407 = add i32 %gep405, %gep_array406*/
	main_lrph10i_gep407_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %422 = inttoptr i32 %gep407 to i32**/
		main_lrph10i_422 = main_lrph10i_gep407;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %422 = inttoptr i32 %gep407 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_231)) begin
		main_lrph10i_422_reg <= main_lrph10i_422;
		if (start == 1'b0 && ^(main_lrph10i_422) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_422_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %423 = load i32* %422, align 4, !tbaa !1*/
		main_lrph10i_423 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %423 = load i32* %422, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_234)) begin
		main_lrph10i_423_reg <= main_lrph10i_423;
		if (start == 1'b0 && ^(main_lrph10i_423) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_423_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %i.0.i = add nsw i32 %i.09.i, -1*/
		main_lrph10i_i0i = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %i.0.i = add nsw i32 %i.09.i, -1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		main_lrph10i_i0i_reg <= main_lrph10i_i0i;
		if (start == 1'b0 && ^(main_lrph10i_i0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_i0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %424 = icmp sgt i32 %i.0.i, 0*/
		main_lrph10i_424 = ($signed(main_lrph10i_i0i) > $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %424 = icmp sgt i32 %i.0.i, 0*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		main_lrph10i_424_reg <= main_lrph10i_424;
		if (start == 1'b0 && ^(main_lrph10i_424) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10i_424_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %j.01.i2.i8 = phi i32 [ %449, %._crit_edge.i ], [ 0, %.lr.ph10.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrph10i_235) & (memory_controller_waitrequest == 1'd0)) & (main_lrph10i_424_reg == 1'd0))) begin
		main__crit_edgei_j01i2i8 = 32'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %j.01.i2.i8 = phi i32 [ %449, %._crit_edge.i ], [ 0, %.lr.ph10.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edgei_249) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei_exitcond25_reg == 1'd1))) */ begin
		main__crit_edgei_j01i2i8 = main__crit_edgei_449_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %j.01.i2.i8 = phi i32 [ %449, %._crit_edge.i ], [ 0, %.lr.ph10.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrph10i_235) & (memory_controller_waitrequest == 1'd0)) & (main_lrph10i_424_reg == 1'd0))) begin
		main__crit_edgei_j01i2i8_reg <= main__crit_edgei_j01i2i8;
		if (start == 1'b0 && ^(main__crit_edgei_j01i2i8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_j01i2i8_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %j.01.i2.i8 = phi i32 [ %449, %._crit_edge.i ], [ 0, %.lr.ph10.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgei_249) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei_exitcond25_reg == 1'd1))) begin
		main__crit_edgei_j01i2i8_reg <= main__crit_edgei_j01i2i8;
		if (start == 1'b0 && ^(main__crit_edgei_j01i2i8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_j01i2i8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int408 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main__crit_edgei_gep_int408 = 0; end
		main__crit_edgei_gep_int408 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int408 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main__crit_edgei_gep_int408_reg <= main__crit_edgei_gep_int408;
		if (start == 1'b0 && ^(main__crit_edgei_gep_int408) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_int408_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array409 = mul i32 %j.01.i2.i8, 4*/
		main__crit_edgei_gep_array409 = (main__crit_edgei_j01i2i8_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array409 = mul i32 %j.01.i2.i8, 4*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main__crit_edgei_gep_array409_reg <= main__crit_edgei_gep_array409;
		if (start == 1'b0 && ^(main__crit_edgei_gep_array409) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_array409_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep410 = add i32 %gep_int408, %gep_array409*/
		main__crit_edgei_gep410 = main_signed_add_32_0;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %gep410 = add i32 %gep_int408, %gep_array409*/
	main__crit_edgei_gep410_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %425 = inttoptr i32 %gep410 to i32**/
		main__crit_edgei_425 = main__crit_edgei_gep410;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %425 = inttoptr i32 %gep410 to i32**/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		main__crit_edgei_425_reg <= main__crit_edgei_425;
		if (start == 1'b0 && ^(main__crit_edgei_425) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_425_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %426 = load i32* %425, align 4, !tbaa !1*/
		main__crit_edgei_426 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %426 = load i32* %425, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_239)) begin
		main__crit_edgei_426_reg <= main__crit_edgei_426;
		if (start == 1'b0 && ^(main__crit_edgei_426) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_426_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %427 = shl nsw i32 %j.01.i2.i8, 2*/
		main__crit_edgei_427 = (main__crit_edgei_j01i2i8_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %427 = shl nsw i32 %j.01.i2.i8, 2*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main__crit_edgei_427_reg <= main__crit_edgei_427;
		if (start == 1'b0 && ^(main__crit_edgei_427) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_427_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int411 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main__crit_edgei_gep_int411 = 0; end
		main__crit_edgei_gep_int411 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int411 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main__crit_edgei_gep_int411_reg <= main__crit_edgei_gep_int411;
		if (start == 1'b0 && ^(main__crit_edgei_gep_int411) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_int411_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array412 = mul i32 %427, 4*/
		main__crit_edgei_gep_array412 = (main__crit_edgei_427 * 32'd4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array412 = mul i32 %427, 4*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main__crit_edgei_gep_array412_reg <= main__crit_edgei_gep_array412;
		if (start == 1'b0 && ^(main__crit_edgei_gep_array412) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_array412_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep413 = add i32 %gep_int411, %gep_array412*/
		main__crit_edgei_gep413 = main_signed_add_32_1;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %gep413 = add i32 %gep_int411, %gep_array412*/
	main__crit_edgei_gep413_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %428 = inttoptr i32 %gep413 to i32**/
		main__crit_edgei_428 = main__crit_edgei_gep413;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %428 = inttoptr i32 %gep413 to i32**/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		main__crit_edgei_428_reg <= main__crit_edgei_428;
		if (start == 1'b0 && ^(main__crit_edgei_428) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_428_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %429 = load i32* %428, align 4, !tbaa !1*/
		main__crit_edgei_429 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %429 = load i32* %428, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_239)) begin
		main__crit_edgei_429_reg <= main__crit_edgei_429;
		if (start == 1'b0 && ^(main__crit_edgei_429) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_429_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %430 = xor i32 %429, %426*/
		main__crit_edgei_430 = (main__crit_edgei_429 ^ main__crit_edgei_426);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %430 = xor i32 %429, %426*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_239)) begin
		main__crit_edgei_430_reg <= main__crit_edgei_430;
		if (start == 1'b0 && ^(main__crit_edgei_430) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_430_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int414 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main__crit_edgei_gep_int414 = 0; end
		main__crit_edgei_gep_int414 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int414 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main__crit_edgei_gep_int414_reg <= main__crit_edgei_gep_int414;
		if (start == 1'b0 && ^(main__crit_edgei_gep_int414) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_int414_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep415 = add i32 %gep_int414, 480*/
		main__crit_edgei_gep415 = main_signed_add_32_0;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %gep415 = add i32 %gep_int414, 480*/
	main__crit_edgei_gep415_reg = main_AddRoundKeyexit_crit_edgei_gep190_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array416 = mul i32 %j.01.i2.i8, 4*/
		main__crit_edgei_gep_array416 = (main__crit_edgei_j01i2i8_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array416 = mul i32 %j.01.i2.i8, 4*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main__crit_edgei_gep_array416_reg <= main__crit_edgei_gep_array416;
		if (start == 1'b0 && ^(main__crit_edgei_gep_array416) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_array416_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep417 = add i32 %gep415, %gep_array416*/
		main__crit_edgei_gep417 = main_signed_add_32_2;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %gep417 = add i32 %gep415, %gep_array416*/
	main__crit_edgei_gep417_reg = main_AddRoundKeyexit_crit_edgei_gep199_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %431 = inttoptr i32 %gep417 to i32**/
		main__crit_edgei_431 = main__crit_edgei_gep417;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %431 = inttoptr i32 %gep417 to i32**/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		main__crit_edgei_431_reg <= main__crit_edgei_431;
		if (start == 1'b0 && ^(main__crit_edgei_431) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_431_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %432 = load i32* %431, align 4, !tbaa !1*/
		main__crit_edgei_432 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %432 = load i32* %431, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_242)) begin
		main__crit_edgei_432_reg <= main__crit_edgei_432;
		if (start == 1'b0 && ^(main__crit_edgei_432) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_432_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %433 = or i32 %427, 1*/
		main__crit_edgei_433 = (main__crit_edgei_427 | 32'd1);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %433 = or i32 %427, 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main__crit_edgei_433_reg <= main__crit_edgei_433;
		if (start == 1'b0 && ^(main__crit_edgei_433) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_433_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int418 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main__crit_edgei_gep_int418 = 0; end
		main__crit_edgei_gep_int418 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int418 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main__crit_edgei_gep_int418_reg <= main__crit_edgei_gep_int418;
		if (start == 1'b0 && ^(main__crit_edgei_gep_int418) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_int418_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array419 = mul i32 %433, 4*/
		main__crit_edgei_gep_array419 = (main__crit_edgei_433 * 32'd4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array419 = mul i32 %433, 4*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main__crit_edgei_gep_array419_reg <= main__crit_edgei_gep_array419;
		if (start == 1'b0 && ^(main__crit_edgei_gep_array419) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_array419_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep420 = add i32 %gep_int418, %gep_array419*/
		main__crit_edgei_gep420 = main_signed_add_32_3;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %gep420 = add i32 %gep_int418, %gep_array419*/
	main__crit_edgei_gep420_reg = main_AddRoundKeyexit_crit_edgei_gep206_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %434 = inttoptr i32 %gep420 to i32**/
		main__crit_edgei_434 = main__crit_edgei_gep420;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %434 = inttoptr i32 %gep420 to i32**/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		main__crit_edgei_434_reg <= main__crit_edgei_434;
		if (start == 1'b0 && ^(main__crit_edgei_434) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_434_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %435 = load i32* %434, align 4, !tbaa !1*/
		main__crit_edgei_435 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %435 = load i32* %434, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_242)) begin
		main__crit_edgei_435_reg <= main__crit_edgei_435;
		if (start == 1'b0 && ^(main__crit_edgei_435) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_435_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %436 = xor i32 %435, %432*/
		main__crit_edgei_436 = (main__crit_edgei_435 ^ main__crit_edgei_432);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %436 = xor i32 %435, %432*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_242)) begin
		main__crit_edgei_436_reg <= main__crit_edgei_436;
		if (start == 1'b0 && ^(main__crit_edgei_436) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_436_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int421 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main__crit_edgei_gep_int421 = 0; end
		main__crit_edgei_gep_int421 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int421 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main__crit_edgei_gep_int421_reg <= main__crit_edgei_gep_int421;
		if (start == 1'b0 && ^(main__crit_edgei_gep_int421) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_int421_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep422 = add i32 %gep_int421, 960*/
		main__crit_edgei_gep422 = main_signed_add_32_1;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %gep422 = add i32 %gep_int421, 960*/
	main__crit_edgei_gep422_reg = main_AddRoundKeyexit_crit_edgei_gep194_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array423 = mul i32 %j.01.i2.i8, 4*/
		main__crit_edgei_gep_array423 = (main__crit_edgei_j01i2i8_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array423 = mul i32 %j.01.i2.i8, 4*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main__crit_edgei_gep_array423_reg <= main__crit_edgei_gep_array423;
		if (start == 1'b0 && ^(main__crit_edgei_gep_array423) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_array423_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep424 = add i32 %gep422, %gep_array423*/
		main__crit_edgei_gep424 = main_signed_add_32_4;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %gep424 = add i32 %gep422, %gep_array423*/
	main__crit_edgei_gep424_reg = main_2_gep14_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %437 = inttoptr i32 %gep424 to i32**/
		main__crit_edgei_437 = main__crit_edgei_gep424;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %437 = inttoptr i32 %gep424 to i32**/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		main__crit_edgei_437_reg <= main__crit_edgei_437;
		if (start == 1'b0 && ^(main__crit_edgei_437) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_437_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %438 = load i32* %437, align 4, !tbaa !1*/
		main__crit_edgei_438 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %438 = load i32* %437, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_245)) begin
		main__crit_edgei_438_reg <= main__crit_edgei_438;
		if (start == 1'b0 && ^(main__crit_edgei_438) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_438_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %439 = or i32 %427, 2*/
		main__crit_edgei_439 = (main__crit_edgei_427 | 32'd2);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %439 = or i32 %427, 2*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main__crit_edgei_439_reg <= main__crit_edgei_439;
		if (start == 1'b0 && ^(main__crit_edgei_439) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_439_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int425 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main__crit_edgei_gep_int425 = 0; end
		main__crit_edgei_gep_int425 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int425 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main__crit_edgei_gep_int425_reg <= main__crit_edgei_gep_int425;
		if (start == 1'b0 && ^(main__crit_edgei_gep_int425) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_int425_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array426 = mul i32 %439, 4*/
		main__crit_edgei_gep_array426 = (main__crit_edgei_439 * 32'd4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array426 = mul i32 %439, 4*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main__crit_edgei_gep_array426_reg <= main__crit_edgei_gep_array426;
		if (start == 1'b0 && ^(main__crit_edgei_gep_array426) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_array426_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep427 = add i32 %gep_int425, %gep_array426*/
		main__crit_edgei_gep427 = main_signed_add_32_5;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %gep427 = add i32 %gep_int425, %gep_array426*/
	main__crit_edgei_gep427_reg = main_2_gep17_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %440 = inttoptr i32 %gep427 to i32**/
		main__crit_edgei_440 = main__crit_edgei_gep427;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %440 = inttoptr i32 %gep427 to i32**/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		main__crit_edgei_440_reg <= main__crit_edgei_440;
		if (start == 1'b0 && ^(main__crit_edgei_440) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_440_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %441 = load i32* %440, align 4, !tbaa !1*/
		main__crit_edgei_441 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %441 = load i32* %440, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_245)) begin
		main__crit_edgei_441_reg <= main__crit_edgei_441;
		if (start == 1'b0 && ^(main__crit_edgei_441) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_441_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %442 = xor i32 %441, %438*/
		main__crit_edgei_442 = (main__crit_edgei_441 ^ main__crit_edgei_438);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %442 = xor i32 %441, %438*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_245)) begin
		main__crit_edgei_442_reg <= main__crit_edgei_442;
		if (start == 1'b0 && ^(main__crit_edgei_442) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_442_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int428 = ptrtoint [4 x [120 x i32]]* @word to i32*/
if (reset) begin main__crit_edgei_gep_int428 = 0; end
		main__crit_edgei_gep_int428 = `TAG_g_word_a;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int428 = ptrtoint [4 x [120 x i32]]* @word to i32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main__crit_edgei_gep_int428_reg <= main__crit_edgei_gep_int428;
		if (start == 1'b0 && ^(main__crit_edgei_gep_int428) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_int428_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep429 = add i32 %gep_int428, 1440*/
		main__crit_edgei_gep429 = main_signed_add_32_2;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %gep429 = add i32 %gep_int428, 1440*/
	main__crit_edgei_gep429_reg = main_AddRoundKeyexit_crit_edgei_gep201_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array430 = mul i32 %j.01.i2.i8, 4*/
		main__crit_edgei_gep_array430 = (main__crit_edgei_j01i2i8_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array430 = mul i32 %j.01.i2.i8, 4*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main__crit_edgei_gep_array430_reg <= main__crit_edgei_gep_array430;
		if (start == 1'b0 && ^(main__crit_edgei_gep_array430) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_array430_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep431 = add i32 %gep429, %gep_array430*/
		main__crit_edgei_gep431 = main_signed_add_32_6;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %gep431 = add i32 %gep429, %gep_array430*/
	main__crit_edgei_gep431_reg = main_2_gep21_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %443 = inttoptr i32 %gep431 to i32**/
		main__crit_edgei_443 = main__crit_edgei_gep431;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %443 = inttoptr i32 %gep431 to i32**/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		main__crit_edgei_443_reg <= main__crit_edgei_443;
		if (start == 1'b0 && ^(main__crit_edgei_443) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_443_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %444 = load i32* %443, align 4, !tbaa !1*/
		main__crit_edgei_444 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %444 = load i32* %443, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_248)) begin
		main__crit_edgei_444_reg <= main__crit_edgei_444;
		if (start == 1'b0 && ^(main__crit_edgei_444) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_444_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %445 = or i32 %427, 3*/
		main__crit_edgei_445 = (main__crit_edgei_427 | 32'd3);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %445 = or i32 %427, 3*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main__crit_edgei_445_reg <= main__crit_edgei_445;
		if (start == 1'b0 && ^(main__crit_edgei_445) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_445_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int432 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main__crit_edgei_gep_int432 = 0; end
		main__crit_edgei_gep_int432 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_int432 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main__crit_edgei_gep_int432_reg <= main__crit_edgei_gep_int432;
		if (start == 1'b0 && ^(main__crit_edgei_gep_int432) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_int432_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array433 = mul i32 %445, 4*/
		main__crit_edgei_gep_array433 = (main__crit_edgei_445 * 32'd4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %gep_array433 = mul i32 %445, 4*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main__crit_edgei_gep_array433_reg <= main__crit_edgei_gep_array433;
		if (start == 1'b0 && ^(main__crit_edgei_gep_array433) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_gep_array433_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %gep434 = add i32 %gep_int432, %gep_array433*/
		main__crit_edgei_gep434 = main_signed_add_32_7;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %gep434 = add i32 %gep_int432, %gep_array433*/
	main__crit_edgei_gep434_reg = main_AddRoundKeyexit_crit_edgei_215_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %446 = inttoptr i32 %gep434 to i32**/
		main__crit_edgei_446 = main__crit_edgei_gep434;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %446 = inttoptr i32 %gep434 to i32**/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		main__crit_edgei_446_reg <= main__crit_edgei_446;
		if (start == 1'b0 && ^(main__crit_edgei_446) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_446_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %447 = load i32* %446, align 4, !tbaa !1*/
		main__crit_edgei_447 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %447 = load i32* %446, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_248)) begin
		main__crit_edgei_447_reg <= main__crit_edgei_447;
		if (start == 1'b0 && ^(main__crit_edgei_447) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_447_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %448 = xor i32 %447, %444*/
		main__crit_edgei_448 = (main__crit_edgei_447 ^ main__crit_edgei_444);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %448 = xor i32 %447, %444*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_248)) begin
		main__crit_edgei_448_reg <= main__crit_edgei_448;
		if (start == 1'b0 && ^(main__crit_edgei_448) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_448_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %449 = add nsw i32 %j.01.i2.i8, 1*/
		main__crit_edgei_449 = main_signed_add_32_3;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %449 = add nsw i32 %j.01.i2.i8, 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main__crit_edgei_449_reg <= main__crit_edgei_449;
		if (start == 1'b0 && ^(main__crit_edgei_449) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_449_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %exitcond25 = icmp ne i32 %449, 4*/
		main__crit_edgei_exitcond25 = (main__crit_edgei_449 != 32'd4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %exitcond25 = icmp ne i32 %449, 4*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main__crit_edgei_exitcond25_reg <= main__crit_edgei_exitcond25;
		if (start == 1'b0 && ^(main__crit_edgei_exitcond25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_exitcond25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i14*/
	/*   %i.17.i13 = phi i32 [ %459, %456 ], [ 0, %AddRoundKey.exit3.i9 ]*/
	if (((cur_state == LEGUP_F_main_BB_AddRoundKeyexit3i9_250) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi14_i17i13 = 32'd0;
	end
	/* main: %.lr.ph.i14*/
	/*   %i.17.i13 = phi i32 [ %459, %456 ], [ 0, %AddRoundKey.exit3.i9 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__456_258) & (memory_controller_waitrequest == 1'd0)) & (main_456_exitcond == 1'd1))) */ begin
		main_lrphi14_i17i13 = main_456_459;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i14*/
	/*   %i.17.i13 = phi i32 [ %459, %456 ], [ 0, %AddRoundKey.exit3.i9 ]*/
	if (((cur_state == LEGUP_F_main_BB_AddRoundKeyexit3i9_250) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi14_i17i13_reg <= main_lrphi14_i17i13;
		if (start == 1'b0 && ^(main_lrphi14_i17i13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi14_i17i13_reg"); $finish; end
	end
	/* main: %.lr.ph.i14*/
	/*   %i.17.i13 = phi i32 [ %459, %456 ], [ 0, %AddRoundKey.exit3.i9 ]*/
	if ((((cur_state == LEGUP_F_main_BB__456_258) & (memory_controller_waitrequest == 1'd0)) & (main_456_exitcond == 1'd1))) begin
		main_lrphi14_i17i13_reg <= main_lrphi14_i17i13;
		if (start == 1'b0 && ^(main_lrphi14_i17i13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi14_i17i13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i14*/
	/*   %gep_int435 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_lrphi14_gep_int435 = 0; end
		main_lrphi14_gep_int435 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i14*/
	/*   %gep_int435 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrphi14_251)) begin
		main_lrphi14_gep_int435_reg <= main_lrphi14_gep_int435;
		if (start == 1'b0 && ^(main_lrphi14_gep_int435) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi14_gep_int435_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i14*/
	/*   %gep_array436 = mul i32 %i.17.i13, 4*/
		main_lrphi14_gep_array436 = (main_lrphi14_i17i13_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i14*/
	/*   %gep_array436 = mul i32 %i.17.i13, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrphi14_251)) begin
		main_lrphi14_gep_array436_reg <= main_lrphi14_gep_array436;
		if (start == 1'b0 && ^(main_lrphi14_gep_array436) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi14_gep_array436_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i14*/
	/*   %gep437 = add i32 %gep_int435, %gep_array436*/
		main_lrphi14_gep437 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph.i14*/
/*   %gep437 = add i32 %gep_int435, %gep_array436*/
	main_lrphi14_gep437_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.lr.ph.i14*/
	/*   %451 = inttoptr i32 %gep437 to i32**/
		main_lrphi14_451 = main_lrphi14_gep437;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i14*/
	/*   %451 = inttoptr i32 %gep437 to i32**/
	if ((cur_state == LEGUP_F_main_BB_lrphi14_252)) begin
		main_lrphi14_451_reg <= main_lrphi14_451;
		if (start == 1'b0 && ^(main_lrphi14_451) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi14_451_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i14*/
	/*   %452 = load i32* %451, align 4, !tbaa !1*/
		main_lrphi14_452 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i14*/
	/*   %452 = load i32* %451, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi14_254)) begin
		main_lrphi14_452_reg <= main_lrphi14_452;
		if (start == 1'b0 && ^(main_lrphi14_452) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi14_452_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i14*/
	/*   %453 = icmp slt i32 %452, 16*/
		main_lrphi14_453 = ($signed(main_lrphi14_452) < $signed(32'd16));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i14*/
	/*   %453 = icmp slt i32 %452, 16*/
	if ((cur_state == LEGUP_F_main_BB_lrphi14_254)) begin
		main_lrphi14_453_reg <= main_lrphi14_453;
		if (start == 1'b0 && ^(main_lrphi14_453) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi14_453_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %454*/
	/*   %.pre12.i = load i32* %451, align 4, !tbaa !1*/
		main_454_pre12i = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %454*/
	/*   %.pre12.i = load i32* %451, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__454_257)) begin
		main_454_pre12i_reg <= main_454_pre12i;
		if (start == 1'b0 && ^(main_454_pre12i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_454_pre12i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %456*/
	/*   %457 = phi i32 [ %.pre12.i, %454 ], [ %452, %.lr.ph.i14 ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi14_254) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi14_453 == 1'd0))) begin
		main_456_457 = main_lrphi14_452;
	end
	/* main: %456*/
	/*   %457 = phi i32 [ %.pre12.i, %454 ], [ %452, %.lr.ph.i14 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__454_257) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_456_457 = main_454_pre12i;
	end
end
always @(posedge clk) begin
	/* main: %456*/
	/*   %457 = phi i32 [ %.pre12.i, %454 ], [ %452, %.lr.ph.i14 ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi14_254) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi14_453 == 1'd0))) begin
		main_456_457_reg <= main_456_457;
		if (start == 1'b0 && ^(main_456_457) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_456_457_reg"); $finish; end
	end
	/* main: %456*/
	/*   %457 = phi i32 [ %.pre12.i, %454 ], [ %452, %.lr.ph.i14 ]*/
	if (((cur_state == LEGUP_F_main_BB__454_257) & (memory_controller_waitrequest == 1'd0))) begin
		main_456_457_reg <= main_456_457;
		if (start == 1'b0 && ^(main_456_457) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_456_457_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %456*/
	/*   %459 = add nsw i32 %i.17.i13, 1*/
		main_456_459 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %456*/
	/*   %459 = add nsw i32 %i.17.i13, 1*/
	if ((cur_state == LEGUP_F_main_BB__456_258)) begin
		main_456_459_reg <= main_456_459;
		if (start == 1'b0 && ^(main_456_459) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_456_459_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %456*/
	/*   %exitcond = icmp ne i32 %459, 16*/
		main_456_exitcond = (main_456_459 != 32'd16);
end
always @(posedge clk) begin
	/* main: %456*/
	/*   %exitcond = icmp ne i32 %459, 16*/
	if ((cur_state == LEGUP_F_main_BB__456_258)) begin
		main_456_exitcond_reg <= main_456_exitcond;
		if (start == 1'b0 && ^(main_456_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_456_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %460 = phi i32 [ %467, %.preheader.loopexit.i11 ], [ %.lcssa1, %456 ]*/
	if ((((cur_state == LEGUP_F_main_BB__456_258) & (memory_controller_waitrequest == 1'd0)) & (main_456_exitcond == 1'd0))) begin
		main_preheaderloopexiti11_460 = main_encryptexit_lcssa1_reg;
	end
	/* main: %.preheader.loopexit.i11*/
	/*   %460 = phi i32 [ %467, %.preheader.loopexit.i11 ], [ %.lcssa1, %456 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_262) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderloopexiti11_exitcondi16_reg == 1'd0))) */ begin
		main_preheaderloopexiti11_460 = main_preheaderloopexiti11_467;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %460 = phi i32 [ %467, %.preheader.loopexit.i11 ], [ %.lcssa1, %456 ]*/
	if ((((cur_state == LEGUP_F_main_BB__456_258) & (memory_controller_waitrequest == 1'd0)) & (main_456_exitcond == 1'd0))) begin
		main_preheaderloopexiti11_460_reg <= main_preheaderloopexiti11_460;
		if (start == 1'b0 && ^(main_preheaderloopexiti11_460) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti11_460_reg"); $finish; end
	end
	/* main: %.preheader.loopexit.i11*/
	/*   %460 = phi i32 [ %467, %.preheader.loopexit.i11 ], [ %.lcssa1, %456 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_262) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderloopexiti11_exitcondi16_reg == 1'd0))) begin
		main_preheaderloopexiti11_460_reg <= main_preheaderloopexiti11_460;
		if (start == 1'b0 && ^(main_preheaderloopexiti11_460) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti11_460_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %i.26.i15 = phi i32 [ %468, %.preheader.loopexit.i11 ], [ 0, %456 ]*/
	if ((((cur_state == LEGUP_F_main_BB__456_258) & (memory_controller_waitrequest == 1'd0)) & (main_456_exitcond == 1'd0))) begin
		main_preheaderloopexiti11_i26i15 = 32'd0;
	end
	/* main: %.preheader.loopexit.i11*/
	/*   %i.26.i15 = phi i32 [ %468, %.preheader.loopexit.i11 ], [ 0, %456 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_262) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderloopexiti11_exitcondi16_reg == 1'd0))) */ begin
		main_preheaderloopexiti11_i26i15 = main_preheaderloopexiti11_468_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %i.26.i15 = phi i32 [ %468, %.preheader.loopexit.i11 ], [ 0, %456 ]*/
	if ((((cur_state == LEGUP_F_main_BB__456_258) & (memory_controller_waitrequest == 1'd0)) & (main_456_exitcond == 1'd0))) begin
		main_preheaderloopexiti11_i26i15_reg <= main_preheaderloopexiti11_i26i15;
		if (start == 1'b0 && ^(main_preheaderloopexiti11_i26i15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti11_i26i15_reg"); $finish; end
	end
	/* main: %.preheader.loopexit.i11*/
	/*   %i.26.i15 = phi i32 [ %468, %.preheader.loopexit.i11 ], [ 0, %456 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_262) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderloopexiti11_exitcondi16_reg == 1'd0))) begin
		main_preheaderloopexiti11_i26i15_reg <= main_preheaderloopexiti11_i26i15;
		if (start == 1'b0 && ^(main_preheaderloopexiti11_i26i15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti11_i26i15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %gep_int438 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
if (reset) begin main_preheaderloopexiti11_gep_int438 = 0; end
		main_preheaderloopexiti11_gep_int438 = `TAG_g_statemt_a;
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %gep_int438 = ptrtoint i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0) to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_259)) begin
		main_preheaderloopexiti11_gep_int438_reg <= main_preheaderloopexiti11_gep_int438;
		if (start == 1'b0 && ^(main_preheaderloopexiti11_gep_int438) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti11_gep_int438_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %gep_array439 = mul i32 %i.26.i15, 4*/
		main_preheaderloopexiti11_gep_array439 = (main_preheaderloopexiti11_i26i15_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %gep_array439 = mul i32 %i.26.i15, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_259)) begin
		main_preheaderloopexiti11_gep_array439_reg <= main_preheaderloopexiti11_gep_array439;
		if (start == 1'b0 && ^(main_preheaderloopexiti11_gep_array439) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti11_gep_array439_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %gep440 = add i32 %gep_int438, %gep_array439*/
		main_preheaderloopexiti11_gep440 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.loopexit.i11*/
/*   %gep440 = add i32 %gep_int438, %gep_array439*/
	main_preheaderloopexiti11_gep440_reg = main_AddRoundKeyexit_crit_edgei_190_reg;
end
always @(*) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %461 = inttoptr i32 %gep440 to i32**/
		main_preheaderloopexiti11_461 = main_preheaderloopexiti11_gep440;
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %461 = inttoptr i32 %gep440 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_260)) begin
		main_preheaderloopexiti11_461_reg <= main_preheaderloopexiti11_461;
		if (start == 1'b0 && ^(main_preheaderloopexiti11_461) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti11_461_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %462 = load i32* %461, align 4, !tbaa !1*/
		main_preheaderloopexiti11_462 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %462 = load i32* %461, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_262)) begin
		main_preheaderloopexiti11_462_reg <= main_preheaderloopexiti11_462;
		if (start == 1'b0 && ^(main_preheaderloopexiti11_462) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti11_462_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %gep_int441 = ptrtoint [16 x i32]* @decrypt.out_dec_statemt to i32*/
if (reset) begin main_preheaderloopexiti11_gep_int441 = 0; end
		main_preheaderloopexiti11_gep_int441 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %gep_int441 = ptrtoint [16 x i32]* @decrypt.out_dec_statemt to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_259)) begin
		main_preheaderloopexiti11_gep_int441_reg <= main_preheaderloopexiti11_gep_int441;
		if (start == 1'b0 && ^(main_preheaderloopexiti11_gep_int441) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti11_gep_int441_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %gep_array442 = mul i32 %i.26.i15, 4*/
		main_preheaderloopexiti11_gep_array442 = (main_preheaderloopexiti11_i26i15_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %gep_array442 = mul i32 %i.26.i15, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_259)) begin
		main_preheaderloopexiti11_gep_array442_reg <= main_preheaderloopexiti11_gep_array442;
		if (start == 1'b0 && ^(main_preheaderloopexiti11_gep_array442) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti11_gep_array442_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %gep443 = add i32 %gep_int441, %gep_array442*/
		main_preheaderloopexiti11_gep443 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.loopexit.i11*/
/*   %gep443 = add i32 %gep_int441, %gep_array442*/
	main_preheaderloopexiti11_gep443_reg = main_AddRoundKeyexit_crit_edgei_gep192_reg;
end
always @(*) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %463 = inttoptr i32 %gep443 to i32**/
		main_preheaderloopexiti11_463 = main_preheaderloopexiti11_gep443;
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %463 = inttoptr i32 %gep443 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_260)) begin
		main_preheaderloopexiti11_463_reg <= main_preheaderloopexiti11_463;
		if (start == 1'b0 && ^(main_preheaderloopexiti11_463) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti11_463_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %464 = load i32* %463, align 4, !tbaa !1*/
		main_preheaderloopexiti11_464 = decryptout_dec_statemt_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %464 = load i32* %463, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_261)) begin
		main_preheaderloopexiti11_464_reg <= main_preheaderloopexiti11_464;
		if (start == 1'b0 && ^(main_preheaderloopexiti11_464) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti11_464_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %465 = icmp eq i32 %462, %464*/
		main_preheaderloopexiti11_465 = (main_preheaderloopexiti11_462 == main_preheaderloopexiti11_464_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %465 = icmp eq i32 %462, %464*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_262)) begin
		main_preheaderloopexiti11_465_reg <= main_preheaderloopexiti11_465;
		if (start == 1'b0 && ^(main_preheaderloopexiti11_465) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti11_465_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %466 = zext i1 %465 to i32*/
		main_preheaderloopexiti11_466 = main_preheaderloopexiti11_465;
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %466 = zext i1 %465 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_262)) begin
		main_preheaderloopexiti11_466_reg <= main_preheaderloopexiti11_466;
		if (start == 1'b0 && ^(main_preheaderloopexiti11_466) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti11_466_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %467 = add nsw i32 %466, %460*/
		main_preheaderloopexiti11_467 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.loopexit.i11*/
/*   %467 = add nsw i32 %466, %460*/
	main_preheaderloopexiti11_467_reg = main_AddRoundKeyexit_crit_edgei_gep190_reg;
end
always @(*) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %468 = add nsw i32 %i.26.i15, 1*/
		main_preheaderloopexiti11_468 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.loopexit.i11*/
/*   %468 = add nsw i32 %i.26.i15, 1*/
	main_preheaderloopexiti11_468_reg = main_222_225_reg;
end
always @(*) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %exitcond.i16 = icmp eq i32 %468, 16*/
		main_preheaderloopexiti11_exitcondi16 = (main_preheaderloopexiti11_468 == 32'd16);
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i11*/
	/*   %exitcond.i16 = icmp eq i32 %468, 16*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_259)) begin
		main_preheaderloopexiti11_exitcondi16_reg <= main_preheaderloopexiti11_exitcondi16;
		if (start == 1'b0 && ^(main_preheaderloopexiti11_exitcondi16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti11_exitcondi16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decrypt.exit*/
	/*   %.lcssa = phi i32 [ %467, %.preheader.loopexit.i11 ]*/
		main_decryptexit_lcssa = main_preheaderloopexiti11_467;
end
always @(posedge clk) begin
	/* main: %decrypt.exit*/
	/*   %.lcssa = phi i32 [ %467, %.preheader.loopexit.i11 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_262) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderloopexiti11_exitcondi16_reg == 1'd1))) begin
		main_decryptexit_lcssa_reg <= main_decryptexit_lcssa;
		if (start == 1'b0 && ^(main_decryptexit_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decryptexit_lcssa_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decrypt.exit*/
	/*   %470 = icmp eq i32 %.lcssa, 32*/
		main_decryptexit_470 = (main_decryptexit_lcssa_reg == 32'd32);
end
always @(posedge clk) begin
	/* main: %decrypt.exit*/
	/*   %470 = icmp eq i32 %.lcssa, 32*/
	if ((cur_state == LEGUP_F_main_BB_decryptexit_263)) begin
		main_decryptexit_470_reg <= main_decryptexit_470;
		if (start == 1'b0 && ^(main_decryptexit_470) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decryptexit_470_reg"); $finish; end
	end
end
always @(*) begin
	encryptout_enc_statemt_address_a = 1'd0;
	/* main: %.preheader.i*/
	/*   %230 = load i32* %229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		encryptout_enc_statemt_address_a = (main_preheaderi_229 >>> 3'd2);
	end
end
always @(*) begin
	encryptout_enc_statemt_write_enable_a = 1'd0;
	/* main: %.preheader.i*/
	/*   %230 = load i32* %229, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		encryptout_enc_statemt_write_enable_a = 1'd0;
	end
end
always @(*) begin
	decryptout_dec_statemt_address_a = 1'd0;
	/* main: %.preheader.loopexit.i11*/
	/*   %464 = load i32* %463, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_260)) begin
		decryptout_dec_statemt_address_a = (main_preheaderloopexiti11_463 >>> 3'd2);
	end
end
always @(*) begin
	decryptout_dec_statemt_write_enable_a = 1'd0;
	/* main: %.preheader.loopexit.i11*/
	/*   %464 = load i32* %463, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_260)) begin
		decryptout_dec_statemt_write_enable_a = 1'd0;
	end
end
always @(*) begin
	invSbox_address_a = 1'd0;
	/* main: %.lr.ph10.i.preheader*/
	/*   %267 = load i32* %266, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		invSbox_address_a = (main_lrph10ipreheader_266 >>> 3'd2);
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %277 = load i32* %276, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		invSbox_address_a = (main_lrph10ipreheader_276_reg >>> 3'd2);
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %282 = load i32* %281, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_182)) begin
		invSbox_address_a = (main_lrph10ipreheader_281_reg >>> 3'd2);
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %287 = load i32* %286, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_184)) begin
		invSbox_address_a = (main_lrph10ipreheader_286_reg >>> 3'd2);
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_186)) begin
		invSbox_address_a = (main_lrph10ipreheader_296_reg >>> 3'd2);
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %307 = load i32* %306, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_188)) begin
		invSbox_address_a = (main_lrph10ipreheader_306_reg >>> 3'd2);
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %317 = load i32* %316, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_190)) begin
		invSbox_address_a = (main_lrph10ipreheader_316_reg >>> 3'd2);
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %322 = load i32* %321, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_192)) begin
		invSbox_address_a = (main_lrph10ipreheader_321_reg >>> 3'd2);
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %327 = load i32* %326, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_194)) begin
		invSbox_address_a = (main_lrph10ipreheader_326_reg >>> 3'd2);
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %332 = load i32* %331, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_196)) begin
		invSbox_address_a = (main_lrph10ipreheader_331_reg >>> 3'd2);
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %337 = load i32* %336, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_198)) begin
		invSbox_address_a = (main_lrph10ipreheader_336_reg >>> 3'd2);
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %342 = load i32* %341, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_200)) begin
		invSbox_address_a = (main_lrph10ipreheader_341_reg >>> 3'd2);
	end
	/* main: %.lr.ph10.i*/
	/*   %348 = load i32* %347, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		invSbox_address_a = (main_lrph10i_347 >>> 3'd2);
	end
	/* main: %.lr.ph10.i*/
	/*   %358 = load i32* %357, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_210)) begin
		invSbox_address_a = (main_lrph10i_357_reg >>> 3'd2);
	end
	/* main: %.lr.ph10.i*/
	/*   %363 = load i32* %362, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_212)) begin
		invSbox_address_a = (main_lrph10i_362_reg >>> 3'd2);
	end
	/* main: %.lr.ph10.i*/
	/*   %368 = load i32* %367, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_214)) begin
		invSbox_address_a = (main_lrph10i_367_reg >>> 3'd2);
	end
	/* main: %.lr.ph10.i*/
	/*   %373 = load i32* %372, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_215)) begin
		invSbox_address_a = (main_lrph10i_372 >>> 3'd2);
	end
	/* main: %.lr.ph10.i*/
	/*   %378 = load i32* %377, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		invSbox_address_a = (main_lrph10i_377 >>> 3'd2);
	end
	/* main: %.lr.ph10.i*/
	/*   %388 = load i32* %387, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_220)) begin
		invSbox_address_a = (main_lrph10i_387 >>> 3'd2);
	end
	/* main: %.lr.ph10.i*/
	/*   %398 = load i32* %397, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_222)) begin
		invSbox_address_a = (main_lrph10i_397 >>> 3'd2);
	end
	/* main: %.lr.ph10.i*/
	/*   %403 = load i32* %402, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_224)) begin
		invSbox_address_a = (main_lrph10i_402_reg >>> 3'd2);
	end
	/* main: %.lr.ph10.i*/
	/*   %408 = load i32* %407, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_226)) begin
		invSbox_address_a = (main_lrph10i_407_reg >>> 3'd2);
	end
	/* main: %.lr.ph10.i*/
	/*   %413 = load i32* %412, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_229)) begin
		invSbox_address_a = (main_lrph10i_412 >>> 3'd2);
	end
	/* main: %.lr.ph10.i*/
	/*   %418 = load i32* %417, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_231)) begin
		invSbox_address_a = (main_lrph10i_417_reg >>> 3'd2);
	end
	/* main: %.lr.ph10.i*/
	/*   %423 = load i32* %422, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_233)) begin
		invSbox_address_a = (main_lrph10i_422_reg >>> 3'd2);
	end
end
always @(*) begin
	invSbox_write_enable_a = 1'd0;
	/* main: %.lr.ph10.i.preheader*/
	/*   %267 = load i32* %266, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %277 = load i32* %276, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %282 = load i32* %281, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_182)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %287 = load i32* %286, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_184)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_186)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %307 = load i32* %306, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_188)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %317 = load i32* %316, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_190)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %322 = load i32* %321, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_192)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %327 = load i32* %326, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_194)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %332 = load i32* %331, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_196)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %337 = load i32* %336, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_198)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %342 = load i32* %341, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_200)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   %348 = load i32* %347, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   %358 = load i32* %357, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_210)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   %363 = load i32* %362, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_212)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   %368 = load i32* %367, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_214)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   %373 = load i32* %372, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_215)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   %378 = load i32* %377, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   %388 = load i32* %387, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_220)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   %398 = load i32* %397, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_222)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   %403 = load i32* %402, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_224)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   %408 = load i32* %407, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_226)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   %413 = load i32* %412, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_229)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   %418 = load i32* %417, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_231)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   %423 = load i32* %422, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_233)) begin
		invSbox_write_enable_a = 1'd0;
	end
end
always @(*) begin
	invSbox_address_b = 1'd0;
	/* main: %.lr.ph10.i.preheader*/
	/*   %272 = load i32* %271, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		invSbox_address_b = (main_lrph10ipreheader_271 >>> 3'd2);
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %292 = load i32* %291, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_184)) begin
		invSbox_address_b = (main_lrph10ipreheader_291_reg >>> 3'd2);
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %302 = load i32* %301, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_186)) begin
		invSbox_address_b = (main_lrph10ipreheader_301_reg >>> 3'd2);
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %312 = load i32* %311, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_188)) begin
		invSbox_address_b = (main_lrph10ipreheader_311_reg >>> 3'd2);
	end
	/* main: %.lr.ph10.i*/
	/*   %353 = load i32* %352, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		invSbox_address_b = (main_lrph10i_352 >>> 3'd2);
	end
	/* main: %.lr.ph10.i*/
	/*   %383 = load i32* %382, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		invSbox_address_b = (main_lrph10i_382 >>> 3'd2);
	end
	/* main: %.lr.ph10.i*/
	/*   %393 = load i32* %392, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_220)) begin
		invSbox_address_b = (main_lrph10i_392 >>> 3'd2);
	end
end
always @(*) begin
	invSbox_write_enable_b = 1'd0;
	/* main: %.lr.ph10.i.preheader*/
	/*   %272 = load i32* %271, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %292 = load i32* %291, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_184)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %302 = load i32* %301, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_186)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %312 = load i32* %311, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_188)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   %353 = load i32* %352, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   %383 = load i32* %382, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   %393 = load i32* %392, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_220)) begin
		invSbox_write_enable_b = 1'd0;
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %1 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		KeySchedule_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_18)) begin
		KeySchedule_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_start"); $finish; end
	end
	/* main: %encrypt.exit*/
	/*   %235 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_encryptexit_153)) begin
		KeySchedule_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_154)) begin
		KeySchedule_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %1 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		KeySchedule_arg_type <= 32'd128128;
		if (start == 1'b0 && ^(32'd128128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_arg_type"); $finish; end
	end
	/* main: %encrypt.exit*/
	/*   %235 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_encryptexit_153)) begin
		KeySchedule_arg_type <= 32'd128128;
		if (start == 1'b0 && ^(32'd128128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_arg_type"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %1 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		KeySchedule_arg_key <= `TAG_g_key_a;
		if (start == 1'b0 && ^(`TAG_g_key_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_arg_key"); $finish; end
	end
	/* main: %encrypt.exit*/
	/*   %235 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_encryptexit_153)) begin
		KeySchedule_arg_key <= `TAG_g_key_a;
		if (start == 1'b0 && ^(`TAG_g_key_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_arg_key"); $finish; end
	end
end
always @(*) begin
	KeySchedule_finish_final = KeySchedule_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_17))) begin
		KeySchedule_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_finish_reg"); $finish; end
	end
	if (KeySchedule_finish) begin
		KeySchedule_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_encryptexit_153))) begin
		KeySchedule_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_finish_reg"); $finish; end
	end
	if (KeySchedule_finish) begin
		KeySchedule_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_17))) begin
		KeySchedule_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_return_val_reg"); $finish; end
	end
	if (KeySchedule_finish) begin
		KeySchedule_return_val_reg <= KeySchedule_return_val;
		if (start == 1'b0 && ^(KeySchedule_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_encryptexit_153))) begin
		KeySchedule_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_return_val_reg"); $finish; end
	end
	if (KeySchedule_finish) begin
		KeySchedule_return_val_reg <= KeySchedule_return_val;
		if (start == 1'b0 && ^(KeySchedule_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_return_val_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %1 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
		main_0_1 = KeySchedule_return_val_reg;
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %0*/
	/*   %1 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_18)) begin
		legup_function_call = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %108 = tail call i32 @MixColumn_AddRoundKey(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.08.i) #2*/
	if ((cur_state == LEGUP_function_call_80)) begin
		legup_function_call = 1'd1;
	end
	/* main: %encrypt.exit*/
	/*   %235 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_154)) begin
		legup_function_call = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %343 = tail call i32 @AddRoundKey_InversMixColumn(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.09.i) #2*/
	if ((cur_state == LEGUP_function_call_204)) begin
		legup_function_call = 1'd1;
	end
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %108 = tail call i32 @MixColumn_AddRoundKey(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.08.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		MixColumn_AddRoundKey_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_80)) begin
		MixColumn_AddRoundKey_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %108 = tail call i32 @MixColumn_AddRoundKey(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.08.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		MixColumn_AddRoundKey_arg_statemt <= `TAG_g_statemt_a;
		if (start == 1'b0 && ^(`TAG_g_statemt_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_arg_statemt"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %108 = tail call i32 @MixColumn_AddRoundKey(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.08.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		MixColumn_AddRoundKey_arg_nb <= 32'd4;
		if (start == 1'b0 && ^(32'd4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_arg_nb"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %108 = tail call i32 @MixColumn_AddRoundKey(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.08.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		MixColumn_AddRoundKey_arg_n <= main_AddRoundKeyexiti_i08i_reg;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_i08i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_arg_n"); $finish; end
	end
end
always @(*) begin
	MixColumn_AddRoundKey_finish_final = MixColumn_AddRoundKey_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79))) begin
		MixColumn_AddRoundKey_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_finish_reg"); $finish; end
	end
	if (MixColumn_AddRoundKey_finish) begin
		MixColumn_AddRoundKey_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79))) begin
		MixColumn_AddRoundKey_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_return_val_reg"); $finish; end
	end
	if (MixColumn_AddRoundKey_finish) begin
		MixColumn_AddRoundKey_return_val_reg <= MixColumn_AddRoundKey_return_val;
		if (start == 1'b0 && ^(MixColumn_AddRoundKey_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_return_val_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %108 = tail call i32 @MixColumn_AddRoundKey(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.08.i) #2*/
		main_AddRoundKeyexiti_108 = MixColumn_AddRoundKey_return_val_reg;
end
always @(*) begin
	/* main: %encrypt.exit*/
	/*   %235 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
		main_encryptexit_235 = KeySchedule_return_val_reg;
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %343 = tail call i32 @AddRoundKey_InversMixColumn(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.09.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		AddRoundKey_InversMixColumn_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_204)) begin
		AddRoundKey_InversMixColumn_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %343 = tail call i32 @AddRoundKey_InversMixColumn(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.09.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		AddRoundKey_InversMixColumn_arg_statemt <= `TAG_g_statemt_a;
		if (start == 1'b0 && ^(`TAG_g_statemt_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_arg_statemt"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %343 = tail call i32 @AddRoundKey_InversMixColumn(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.09.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		AddRoundKey_InversMixColumn_arg_nb <= 32'd4;
		if (start == 1'b0 && ^(32'd4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_arg_nb"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i*/
	/*   %343 = tail call i32 @AddRoundKey_InversMixColumn(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.09.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		AddRoundKey_InversMixColumn_arg_n <= main_lrph10i_i09i_reg;
		if (start == 1'b0 && ^(main_lrph10i_i09i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_arg_n"); $finish; end
	end
end
always @(*) begin
	AddRoundKey_InversMixColumn_finish_final = AddRoundKey_InversMixColumn_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_lrph10i_203))) begin
		AddRoundKey_InversMixColumn_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_finish_reg"); $finish; end
	end
	if (AddRoundKey_InversMixColumn_finish) begin
		AddRoundKey_InversMixColumn_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_lrph10i_203))) begin
		AddRoundKey_InversMixColumn_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_return_val_reg"); $finish; end
	end
	if (AddRoundKey_InversMixColumn_finish) begin
		AddRoundKey_InversMixColumn_return_val_reg <= AddRoundKey_InversMixColumn_return_val;
		if (start == 1'b0 && ^(AddRoundKey_InversMixColumn_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_return_val_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i*/
	/*   %343 = tail call i32 @AddRoundKey_InversMixColumn(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.09.i) #2*/
		main_lrph10i_343 = AddRoundKey_InversMixColumn_return_val_reg;
end
always @(*) begin
	/* main: %2*/
	/*   %gep5 = add i32 %gep_int4, 480*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_signed_add_32_0_op0 = main_2_gep_int4;
	end
	/* main: %2*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	else if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_0_op0 = main_2_gep_int_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep27 = add i32 %gep_int25, %gep_array26*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexitipreheader_gep_int25_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep37 = add i32 %gep_int35, %gep_array36*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexitipreheader_gep_int35_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep47 = add i32 %gep_int45, %gep_array46*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexitipreheader_gep_int45_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep57 = add i32 %gep_int55, %gep_array56*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexitipreheader_gep_int55_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep67 = add i32 %gep_int65, %gep_array66*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexitipreheader_gep_int65_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep77 = add i32 %gep_int75, %gep_array76*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexitipreheader_gep_int75_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep87 = add i32 %gep_int85, %gep_array86*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexitipreheader_gep_int85_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep97 = add i32 %gep_int95, %gep_array96*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexitipreheader_gep_int95_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %109 = add nsw i32 %i.08.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_i08i_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep107 = add i32 %gep_int105, %gep_array106*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int105_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep117 = add i32 %gep_int115, %gep_array116*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_88)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int115_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep122 = add i32 %gep_int120, %gep_array121*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_90)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int120_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep127 = add i32 %gep_int125, %gep_array126*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_94)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int125_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep132 = add i32 %gep_int130, %gep_array131*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_95)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int130_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep137 = add i32 %gep_int135, %gep_array136*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int135_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep142 = add i32 %gep_int140, %gep_array141*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_99)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int140_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep147 = add i32 %gep_int145, %gep_array146*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int145_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep152 = add i32 %gep_int150, %gep_array151*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_103)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int150_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep157 = add i32 %gep_int155, %gep_array156*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_106)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int155_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep162 = add i32 %gep_int160, %gep_array161*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int160_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep167 = add i32 %gep_int165, %gep_array166*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int165_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep172 = add i32 %gep_int170, %gep_array171*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int170_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep177 = add i32 %gep_int175, %gep_array176*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_118)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int175_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep182 = add i32 %gep_int180, %gep_array181*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_121)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexiti_gep_int180_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %190 = add nsw i32 %j.01.i2.i, 40*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexit_crit_edgei_j01i2i_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep190 = add i32 %gep_int188, %gep_array189*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexit_crit_edgei_gep_int188_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep187 = add i32 %gep_int185, %gep_array186*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_127)) begin
		main_signed_add_32_0_op0 = main_AddRoundKeyexit_crit_edgei_gep_int185_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %gep214 = add i32 %gep_int212, %gep_array213*/
	else if ((cur_state == LEGUP_F_main_BB_lrphi_142)) begin
		main_signed_add_32_0_op0 = main_lrphi_gep_int212_reg;
	end
	/* main: %222*/
	/*   %225 = add nsw i32 %i.17.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB__222_148)) begin
		main_signed_add_32_0_op0 = main_lrphi_i17i_reg;
	end
	/* main: %.preheader.i*/
	/*   %234 = add nsw i32 %i.26.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_signed_add_32_0_op0 = main_preheaderi_i26i_reg;
	end
	/* main: %.preheader.i*/
	/*   %gep217 = add i32 %gep_int215, %gep_array216*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_signed_add_32_0_op0 = main_preheaderi_gep_int215_reg;
	end
	/* main: %.preheader.i*/
	/*   %233 = add nsw i32 %232, %226*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_signed_add_32_0_op0 = main_preheaderi_232;
	end
	/* main: %236*/
	/*   %237 = add nsw i32 %j.01.i.i1, 40*/
	else if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_signed_add_32_0_op0 = main_236_j01ii1_reg;
	end
	/* main: %236*/
	/*   %gep226 = add i32 %gep_int224, %gep_array225*/
	else if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		main_signed_add_32_0_op0 = main_236_gep_int224_reg;
	end
	/* main: %236*/
	/*   %gep223 = add i32 %gep_int221, %gep_array222*/
	else if ((cur_state == LEGUP_F_main_BB__236_158)) begin
		main_signed_add_32_0_op0 = main_236_gep_int221_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep250 = add i32 %gep_int248, %gep_array249*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_signed_add_32_0_op0 = main_lrph10ipreheader_gep_int248_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep260 = add i32 %gep_int258, %gep_array259*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_signed_add_32_0_op0 = main_lrph10ipreheader_gep_int258_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep270 = add i32 %gep_int268, %gep_array269*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_signed_add_32_0_op0 = main_lrph10ipreheader_gep_int268_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep280 = add i32 %gep_int278, %gep_array279*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_signed_add_32_0_op0 = main_lrph10ipreheader_gep_int278_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep290 = add i32 %gep_int288, %gep_array289*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_signed_add_32_0_op0 = main_lrph10ipreheader_gep_int288_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep300 = add i32 %gep_int298, %gep_array299*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_signed_add_32_0_op0 = main_lrph10ipreheader_gep_int298_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep310 = add i32 %gep_int308, %gep_array309*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_signed_add_32_0_op0 = main_lrph10ipreheader_gep_int308_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep320 = add i32 %gep_int318, %gep_array319*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_181)) begin
		main_signed_add_32_0_op0 = main_lrph10ipreheader_gep_int318_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %i.0.i = add nsw i32 %i.09.i, -1*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		main_signed_add_32_0_op0 = main_lrph10i_i09i_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep330 = add i32 %gep_int328, %gep_array329*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		main_signed_add_32_0_op0 = main_lrph10i_gep_int328_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep340 = add i32 %gep_int338, %gep_array339*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_209)) begin
		main_signed_add_32_0_op0 = main_lrph10i_gep_int338_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep345 = add i32 %gep_int343, %gep_array344*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_210)) begin
		main_signed_add_32_0_op0 = main_lrph10i_gep_int343_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep350 = add i32 %gep_int348, %gep_array349*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_211)) begin
		main_signed_add_32_0_op0 = main_lrph10i_gep_int348_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep355 = add i32 %gep_int353, %gep_array354*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_215)) begin
		main_signed_add_32_0_op0 = main_lrph10i_gep_int353_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep360 = add i32 %gep_int358, %gep_array359*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		main_signed_add_32_0_op0 = main_lrph10i_gep_int358_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep370 = add i32 %gep_int368, %gep_array369*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_220)) begin
		main_signed_add_32_0_op0 = main_lrph10i_gep_int368_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep380 = add i32 %gep_int378, %gep_array379*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_222)) begin
		main_signed_add_32_0_op0 = main_lrph10i_gep_int378_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep385 = add i32 %gep_int383, %gep_array384*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_223)) begin
		main_signed_add_32_0_op0 = main_lrph10i_gep_int383_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep390 = add i32 %gep_int388, %gep_array389*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_224)) begin
		main_signed_add_32_0_op0 = main_lrph10i_gep_int388_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep395 = add i32 %gep_int393, %gep_array394*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_229)) begin
		main_signed_add_32_0_op0 = main_lrph10i_gep_int393_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep400 = add i32 %gep_int398, %gep_array399*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_230)) begin
		main_signed_add_32_0_op0 = main_lrph10i_gep_int398_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep405 = add i32 %gep_int403, %gep_array404*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_231)) begin
		main_signed_add_32_0_op0 = main_lrph10i_gep_int403_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep415 = add i32 %gep_int414, 480*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main_signed_add_32_0_op0 = main__crit_edgei_gep_int414;
	end
	/* main: %._crit_edge.i*/
	/*   %gep410 = add i32 %gep_int408, %gep_array409*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		main_signed_add_32_0_op0 = main__crit_edgei_gep_int408_reg;
	end
	/* main: %.lr.ph.i14*/
	/*   %gep437 = add i32 %gep_int435, %gep_array436*/
	else if ((cur_state == LEGUP_F_main_BB_lrphi14_252)) begin
		main_signed_add_32_0_op0 = main_lrphi14_gep_int435_reg;
	end
	/* main: %456*/
	/*   %459 = add nsw i32 %i.17.i13, 1*/
	else if ((cur_state == LEGUP_F_main_BB__456_258)) begin
		main_signed_add_32_0_op0 = main_lrphi14_i17i13_reg;
	end
	/* main: %.preheader.loopexit.i11*/
	/*   %468 = add nsw i32 %i.26.i15, 1*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_259)) begin
		main_signed_add_32_0_op0 = main_preheaderloopexiti11_i26i15_reg;
	end
	/* main: %.preheader.loopexit.i11*/
	/*   %gep440 = add i32 %gep_int438, %gep_array439*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_260)) begin
		main_signed_add_32_0_op0 = main_preheaderloopexiti11_gep_int438_reg;
	end
	/* main: %.preheader.loopexit.i11*/
	/*   %467 = add nsw i32 %466, %460*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_262)) */ begin
		main_signed_add_32_0_op0 = main_preheaderloopexiti11_466;
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep5 = add i32 %gep_int4, 480*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_signed_add_32_0_op1 = 32'd480;
	end
	/* main: %2*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	else if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_0_op1 = main_2_gep_array_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep27 = add i32 %gep_int25, %gep_array26*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexitipreheader_gep_array26_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep37 = add i32 %gep_int35, %gep_array36*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexitipreheader_gep_array36_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep47 = add i32 %gep_int45, %gep_array46*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexitipreheader_gep_array46_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep57 = add i32 %gep_int55, %gep_array56*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexitipreheader_gep_array56_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep67 = add i32 %gep_int65, %gep_array66*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexitipreheader_gep_array66_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep77 = add i32 %gep_int75, %gep_array76*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexitipreheader_gep_array76_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep87 = add i32 %gep_int85, %gep_array86*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexitipreheader_gep_array86_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep97 = add i32 %gep_int95, %gep_array96*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexitipreheader_gep_array96_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %109 = add nsw i32 %i.08.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep107 = add i32 %gep_int105, %gep_array106*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array106_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep117 = add i32 %gep_int115, %gep_array116*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_88)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array116_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep122 = add i32 %gep_int120, %gep_array121*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_90)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array121_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep127 = add i32 %gep_int125, %gep_array126*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_94)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array126_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep132 = add i32 %gep_int130, %gep_array131*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_95)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array131_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep137 = add i32 %gep_int135, %gep_array136*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array136_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep142 = add i32 %gep_int140, %gep_array141*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_99)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array141_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep147 = add i32 %gep_int145, %gep_array146*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array146_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep152 = add i32 %gep_int150, %gep_array151*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_103)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array151_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep157 = add i32 %gep_int155, %gep_array156*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_106)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array156_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep162 = add i32 %gep_int160, %gep_array161*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array161_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep167 = add i32 %gep_int165, %gep_array166*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array166_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep172 = add i32 %gep_int170, %gep_array171*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array171_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep177 = add i32 %gep_int175, %gep_array176*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_118)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array176_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep182 = add i32 %gep_int180, %gep_array181*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_121)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexiti_gep_array181_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %190 = add nsw i32 %j.01.i2.i, 40*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_signed_add_32_0_op1 = 32'd40;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep190 = add i32 %gep_int188, %gep_array189*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexit_crit_edgei_gep_array189_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep187 = add i32 %gep_int185, %gep_array186*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_127)) begin
		main_signed_add_32_0_op1 = main_AddRoundKeyexit_crit_edgei_gep_array186_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %gep214 = add i32 %gep_int212, %gep_array213*/
	else if ((cur_state == LEGUP_F_main_BB_lrphi_142)) begin
		main_signed_add_32_0_op1 = main_lrphi_gep_array213_reg;
	end
	/* main: %222*/
	/*   %225 = add nsw i32 %i.17.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB__222_148)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %.preheader.i*/
	/*   %234 = add nsw i32 %i.26.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %.preheader.i*/
	/*   %gep217 = add i32 %gep_int215, %gep_array216*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_signed_add_32_0_op1 = main_preheaderi_gep_array216_reg;
	end
	/* main: %.preheader.i*/
	/*   %233 = add nsw i32 %232, %226*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_signed_add_32_0_op1 = main_preheaderi_226_reg;
	end
	/* main: %236*/
	/*   %237 = add nsw i32 %j.01.i.i1, 40*/
	else if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_signed_add_32_0_op1 = 32'd40;
	end
	/* main: %236*/
	/*   %gep226 = add i32 %gep_int224, %gep_array225*/
	else if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		main_signed_add_32_0_op1 = main_236_gep_array225_reg;
	end
	/* main: %236*/
	/*   %gep223 = add i32 %gep_int221, %gep_array222*/
	else if ((cur_state == LEGUP_F_main_BB__236_158)) begin
		main_signed_add_32_0_op1 = main_236_gep_array222_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep250 = add i32 %gep_int248, %gep_array249*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_signed_add_32_0_op1 = main_lrph10ipreheader_gep_array249_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep260 = add i32 %gep_int258, %gep_array259*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_signed_add_32_0_op1 = main_lrph10ipreheader_gep_array259_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep270 = add i32 %gep_int268, %gep_array269*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_signed_add_32_0_op1 = main_lrph10ipreheader_gep_array269_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep280 = add i32 %gep_int278, %gep_array279*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_signed_add_32_0_op1 = main_lrph10ipreheader_gep_array279_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep290 = add i32 %gep_int288, %gep_array289*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_signed_add_32_0_op1 = main_lrph10ipreheader_gep_array289_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep300 = add i32 %gep_int298, %gep_array299*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_signed_add_32_0_op1 = main_lrph10ipreheader_gep_array299_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep310 = add i32 %gep_int308, %gep_array309*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_signed_add_32_0_op1 = main_lrph10ipreheader_gep_array309_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep320 = add i32 %gep_int318, %gep_array319*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_181)) begin
		main_signed_add_32_0_op1 = main_lrph10ipreheader_gep_array319_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %i.0.i = add nsw i32 %i.09.i, -1*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_203)) begin
		main_signed_add_32_0_op1 = -32'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep330 = add i32 %gep_int328, %gep_array329*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		main_signed_add_32_0_op1 = main_lrph10i_gep_array329_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep340 = add i32 %gep_int338, %gep_array339*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_209)) begin
		main_signed_add_32_0_op1 = main_lrph10i_gep_array339_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep345 = add i32 %gep_int343, %gep_array344*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_210)) begin
		main_signed_add_32_0_op1 = main_lrph10i_gep_array344_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep350 = add i32 %gep_int348, %gep_array349*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_211)) begin
		main_signed_add_32_0_op1 = main_lrph10i_gep_array349_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep355 = add i32 %gep_int353, %gep_array354*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_215)) begin
		main_signed_add_32_0_op1 = main_lrph10i_gep_array354_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep360 = add i32 %gep_int358, %gep_array359*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		main_signed_add_32_0_op1 = main_lrph10i_gep_array359_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep370 = add i32 %gep_int368, %gep_array369*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_220)) begin
		main_signed_add_32_0_op1 = main_lrph10i_gep_array369_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep380 = add i32 %gep_int378, %gep_array379*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_222)) begin
		main_signed_add_32_0_op1 = main_lrph10i_gep_array379_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep385 = add i32 %gep_int383, %gep_array384*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_223)) begin
		main_signed_add_32_0_op1 = main_lrph10i_gep_array384_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep390 = add i32 %gep_int388, %gep_array389*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_224)) begin
		main_signed_add_32_0_op1 = main_lrph10i_gep_array389_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep395 = add i32 %gep_int393, %gep_array394*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_229)) begin
		main_signed_add_32_0_op1 = main_lrph10i_gep_array394_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep400 = add i32 %gep_int398, %gep_array399*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_230)) begin
		main_signed_add_32_0_op1 = main_lrph10i_gep_array399_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep405 = add i32 %gep_int403, %gep_array404*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_231)) begin
		main_signed_add_32_0_op1 = main_lrph10i_gep_array404_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep415 = add i32 %gep_int414, 480*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main_signed_add_32_0_op1 = 32'd480;
	end
	/* main: %._crit_edge.i*/
	/*   %gep410 = add i32 %gep_int408, %gep_array409*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		main_signed_add_32_0_op1 = main__crit_edgei_gep_array409_reg;
	end
	/* main: %.lr.ph.i14*/
	/*   %gep437 = add i32 %gep_int435, %gep_array436*/
	else if ((cur_state == LEGUP_F_main_BB_lrphi14_252)) begin
		main_signed_add_32_0_op1 = main_lrphi14_gep_array436_reg;
	end
	/* main: %456*/
	/*   %459 = add nsw i32 %i.17.i13, 1*/
	else if ((cur_state == LEGUP_F_main_BB__456_258)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %.preheader.loopexit.i11*/
	/*   %468 = add nsw i32 %i.26.i15, 1*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_259)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %.preheader.loopexit.i11*/
	/*   %gep440 = add i32 %gep_int438, %gep_array439*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_260)) begin
		main_signed_add_32_0_op1 = main_preheaderloopexiti11_gep_array439_reg;
	end
	/* main: %.preheader.loopexit.i11*/
	/*   %467 = add nsw i32 %466, %460*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_262)) */ begin
		main_signed_add_32_0_op1 = main_preheaderloopexiti11_460_reg;
	end
end
always @(*) begin
	main_signed_add_32_0 = (main_signed_add_32_0_op0 + main_signed_add_32_0_op1);
end
always @(*) begin
	/* main: %2*/
	/*   %gep12 = add i32 %gep_int11, 960*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_signed_add_32_1_op0 = main_2_gep_int11;
	end
	/* main: %2*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
	else if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_1_op0 = main_2_gep_int1_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep29 = add i32 %gep27, %gep_array28*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexitipreheader_gep27;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep39 = add i32 %gep37, %gep_array38*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexitipreheader_gep37;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep49 = add i32 %gep47, %gep_array48*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexitipreheader_gep47;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep59 = add i32 %gep57, %gep_array58*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexitipreheader_gep57;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep69 = add i32 %gep67, %gep_array68*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexitipreheader_gep67;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep79 = add i32 %gep77, %gep_array78*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexitipreheader_gep77;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep89 = add i32 %gep87, %gep_array88*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexitipreheader_gep87;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep99 = add i32 %gep97, %gep_array98*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexitipreheader_gep97;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep109 = add i32 %gep107, %gep_array108*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep107;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep119 = add i32 %gep117, %gep_array118*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_88)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep117;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep124 = add i32 %gep122, %gep_array123*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_90)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep122;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep129 = add i32 %gep127, %gep_array128*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_94)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep127;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep134 = add i32 %gep132, %gep_array133*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_95)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep132;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep139 = add i32 %gep137, %gep_array138*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep137;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep144 = add i32 %gep142, %gep_array143*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_99)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep142;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep149 = add i32 %gep147, %gep_array148*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep147;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep154 = add i32 %gep152, %gep_array153*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_103)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep152;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep159 = add i32 %gep157, %gep_array158*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_106)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep157;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep164 = add i32 %gep162, %gep_array163*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep162;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep169 = add i32 %gep167, %gep_array168*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep167;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep174 = add i32 %gep172, %gep_array173*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep172;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep179 = add i32 %gep177, %gep_array178*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_118)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep177;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep184 = add i32 %gep182, %gep_array183*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_121)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexiti_gep182;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep192 = add i32 %gep_int191, 480*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexit_crit_edgei_gep_int191;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep197 = add i32 %gep_int195, %gep_array196*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexit_crit_edgei_gep_int195_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep194 = add i32 %gep192, %gep_array193*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_127)) begin
		main_signed_add_32_1_op0 = main_AddRoundKeyexit_crit_edgei_gep192_reg;
	end
	/* main: %.preheader.i*/
	/*   %gep220 = add i32 %gep_int218, %gep_array219*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_signed_add_32_1_op0 = main_preheaderi_gep_int218_reg;
	end
	/* main: %236*/
	/*   %gep228 = add i32 %gep_int227, 480*/
	else if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_signed_add_32_1_op0 = main_236_gep_int227;
	end
	/* main: %236*/
	/*   %gep233 = add i32 %gep_int231, %gep_array232*/
	else if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		main_signed_add_32_1_op0 = main_236_gep_int231_reg;
	end
	/* main: %236*/
	/*   %gep230 = add i32 %gep228, %gep_array229*/
	else if ((cur_state == LEGUP_F_main_BB__236_158)) begin
		main_signed_add_32_1_op0 = main_236_gep228_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep252 = add i32 %gep250, %gep_array251*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_signed_add_32_1_op0 = main_lrph10ipreheader_gep250;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep262 = add i32 %gep260, %gep_array261*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_signed_add_32_1_op0 = main_lrph10ipreheader_gep260;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep272 = add i32 %gep270, %gep_array271*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_signed_add_32_1_op0 = main_lrph10ipreheader_gep270;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep282 = add i32 %gep280, %gep_array281*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_signed_add_32_1_op0 = main_lrph10ipreheader_gep280;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep292 = add i32 %gep290, %gep_array291*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_signed_add_32_1_op0 = main_lrph10ipreheader_gep290;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep302 = add i32 %gep300, %gep_array301*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_signed_add_32_1_op0 = main_lrph10ipreheader_gep300;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep312 = add i32 %gep310, %gep_array311*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_signed_add_32_1_op0 = main_lrph10ipreheader_gep310;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep322 = add i32 %gep320, %gep_array321*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_181)) begin
		main_signed_add_32_1_op0 = main_lrph10ipreheader_gep320;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep332 = add i32 %gep330, %gep_array331*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		main_signed_add_32_1_op0 = main_lrph10i_gep330;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep342 = add i32 %gep340, %gep_array341*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_209)) begin
		main_signed_add_32_1_op0 = main_lrph10i_gep340;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep347 = add i32 %gep345, %gep_array346*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_210)) begin
		main_signed_add_32_1_op0 = main_lrph10i_gep345;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep352 = add i32 %gep350, %gep_array351*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_211)) begin
		main_signed_add_32_1_op0 = main_lrph10i_gep350;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep357 = add i32 %gep355, %gep_array356*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_215)) begin
		main_signed_add_32_1_op0 = main_lrph10i_gep355;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep362 = add i32 %gep360, %gep_array361*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		main_signed_add_32_1_op0 = main_lrph10i_gep360;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep372 = add i32 %gep370, %gep_array371*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_220)) begin
		main_signed_add_32_1_op0 = main_lrph10i_gep370;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep382 = add i32 %gep380, %gep_array381*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_222)) begin
		main_signed_add_32_1_op0 = main_lrph10i_gep380;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep387 = add i32 %gep385, %gep_array386*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_223)) begin
		main_signed_add_32_1_op0 = main_lrph10i_gep385;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep392 = add i32 %gep390, %gep_array391*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_224)) begin
		main_signed_add_32_1_op0 = main_lrph10i_gep390;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep397 = add i32 %gep395, %gep_array396*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_229)) begin
		main_signed_add_32_1_op0 = main_lrph10i_gep395;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep402 = add i32 %gep400, %gep_array401*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_230)) begin
		main_signed_add_32_1_op0 = main_lrph10i_gep400;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep407 = add i32 %gep405, %gep_array406*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_231)) begin
		main_signed_add_32_1_op0 = main_lrph10i_gep405;
	end
	/* main: %._crit_edge.i*/
	/*   %gep422 = add i32 %gep_int421, 960*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main_signed_add_32_1_op0 = main__crit_edgei_gep_int421;
	end
	/* main: %._crit_edge.i*/
	/*   %gep413 = add i32 %gep_int411, %gep_array412*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		main_signed_add_32_1_op0 = main__crit_edgei_gep_int411_reg;
	end
	/* main: %.preheader.loopexit.i11*/
	/*   %gep443 = add i32 %gep_int441, %gep_array442*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_260)) */ begin
		main_signed_add_32_1_op0 = main_preheaderloopexiti11_gep_int441_reg;
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep12 = add i32 %gep_int11, 960*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_signed_add_32_1_op1 = 32'd960;
	end
	/* main: %2*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
	else if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_1_op1 = main_2_gep_array2_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep29 = add i32 %gep27, %gep_array28*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexitipreheader_gep_array28_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep39 = add i32 %gep37, %gep_array38*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexitipreheader_gep_array38_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep49 = add i32 %gep47, %gep_array48*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexitipreheader_gep_array48_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep59 = add i32 %gep57, %gep_array58*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexitipreheader_gep_array58_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep69 = add i32 %gep67, %gep_array68*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexitipreheader_gep_array68_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep79 = add i32 %gep77, %gep_array78*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexitipreheader_gep_array78_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep89 = add i32 %gep87, %gep_array88*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexitipreheader_gep_array88_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep99 = add i32 %gep97, %gep_array98*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexitipreheader_gep_array98_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep109 = add i32 %gep107, %gep_array108*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array108_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep119 = add i32 %gep117, %gep_array118*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_88)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array118_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep124 = add i32 %gep122, %gep_array123*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_90)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array123_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep129 = add i32 %gep127, %gep_array128*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_94)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array128_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep134 = add i32 %gep132, %gep_array133*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_95)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array133_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep139 = add i32 %gep137, %gep_array138*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array138_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep144 = add i32 %gep142, %gep_array143*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_99)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array143_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep149 = add i32 %gep147, %gep_array148*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array148_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep154 = add i32 %gep152, %gep_array153*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_103)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array153_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep159 = add i32 %gep157, %gep_array158*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_106)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array158_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep164 = add i32 %gep162, %gep_array163*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array163_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep169 = add i32 %gep167, %gep_array168*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array168_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep174 = add i32 %gep172, %gep_array173*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array173_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep179 = add i32 %gep177, %gep_array178*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_118)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array178_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep184 = add i32 %gep182, %gep_array183*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_121)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexiti_gep_array183_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep192 = add i32 %gep_int191, 480*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_signed_add_32_1_op1 = 32'd480;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep197 = add i32 %gep_int195, %gep_array196*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexit_crit_edgei_gep_array196_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep194 = add i32 %gep192, %gep_array193*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_127)) begin
		main_signed_add_32_1_op1 = main_AddRoundKeyexit_crit_edgei_gep_array193_reg;
	end
	/* main: %.preheader.i*/
	/*   %gep220 = add i32 %gep_int218, %gep_array219*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_signed_add_32_1_op1 = main_preheaderi_gep_array219_reg;
	end
	/* main: %236*/
	/*   %gep228 = add i32 %gep_int227, 480*/
	else if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_signed_add_32_1_op1 = 32'd480;
	end
	/* main: %236*/
	/*   %gep233 = add i32 %gep_int231, %gep_array232*/
	else if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		main_signed_add_32_1_op1 = main_236_gep_array232_reg;
	end
	/* main: %236*/
	/*   %gep230 = add i32 %gep228, %gep_array229*/
	else if ((cur_state == LEGUP_F_main_BB__236_158)) begin
		main_signed_add_32_1_op1 = main_236_gep_array229_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep252 = add i32 %gep250, %gep_array251*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_signed_add_32_1_op1 = main_lrph10ipreheader_gep_array251_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep262 = add i32 %gep260, %gep_array261*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_signed_add_32_1_op1 = main_lrph10ipreheader_gep_array261_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep272 = add i32 %gep270, %gep_array271*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_signed_add_32_1_op1 = main_lrph10ipreheader_gep_array271_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep282 = add i32 %gep280, %gep_array281*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_signed_add_32_1_op1 = main_lrph10ipreheader_gep_array281_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep292 = add i32 %gep290, %gep_array291*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_signed_add_32_1_op1 = main_lrph10ipreheader_gep_array291_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep302 = add i32 %gep300, %gep_array301*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_signed_add_32_1_op1 = main_lrph10ipreheader_gep_array301_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep312 = add i32 %gep310, %gep_array311*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_signed_add_32_1_op1 = main_lrph10ipreheader_gep_array311_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep322 = add i32 %gep320, %gep_array321*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_181)) begin
		main_signed_add_32_1_op1 = main_lrph10ipreheader_gep_array321_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep332 = add i32 %gep330, %gep_array331*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		main_signed_add_32_1_op1 = main_lrph10i_gep_array331_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep342 = add i32 %gep340, %gep_array341*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_209)) begin
		main_signed_add_32_1_op1 = main_lrph10i_gep_array341_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep347 = add i32 %gep345, %gep_array346*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_210)) begin
		main_signed_add_32_1_op1 = main_lrph10i_gep_array346_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep352 = add i32 %gep350, %gep_array351*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_211)) begin
		main_signed_add_32_1_op1 = main_lrph10i_gep_array351_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep357 = add i32 %gep355, %gep_array356*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_215)) begin
		main_signed_add_32_1_op1 = main_lrph10i_gep_array356_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep362 = add i32 %gep360, %gep_array361*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		main_signed_add_32_1_op1 = main_lrph10i_gep_array361_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep372 = add i32 %gep370, %gep_array371*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_220)) begin
		main_signed_add_32_1_op1 = main_lrph10i_gep_array371_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep382 = add i32 %gep380, %gep_array381*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_222)) begin
		main_signed_add_32_1_op1 = main_lrph10i_gep_array381_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep387 = add i32 %gep385, %gep_array386*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_223)) begin
		main_signed_add_32_1_op1 = main_lrph10i_gep_array386_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep392 = add i32 %gep390, %gep_array391*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_224)) begin
		main_signed_add_32_1_op1 = main_lrph10i_gep_array391_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep397 = add i32 %gep395, %gep_array396*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_229)) begin
		main_signed_add_32_1_op1 = main_lrph10i_gep_array396_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep402 = add i32 %gep400, %gep_array401*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_230)) begin
		main_signed_add_32_1_op1 = main_lrph10i_gep_array401_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep407 = add i32 %gep405, %gep_array406*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_231)) begin
		main_signed_add_32_1_op1 = main_lrph10i_gep_array406_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep422 = add i32 %gep_int421, 960*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main_signed_add_32_1_op1 = 32'd960;
	end
	/* main: %._crit_edge.i*/
	/*   %gep413 = add i32 %gep_int411, %gep_array412*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		main_signed_add_32_1_op1 = main__crit_edgei_gep_array412_reg;
	end
	/* main: %.preheader.loopexit.i11*/
	/*   %gep443 = add i32 %gep_int441, %gep_array442*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_260)) */ begin
		main_signed_add_32_1_op1 = main_preheaderloopexiti11_gep_array442_reg;
	end
end
always @(*) begin
	main_signed_add_32_1 = (main_signed_add_32_1_op0 + main_signed_add_32_1_op1);
end
always @(*) begin
	/* main: %2*/
	/*   %gep19 = add i32 %gep_int18, 1440*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_signed_add_32_2_op0 = main_2_gep_int18;
	end
	/* main: %2*/
	/*   %gep7 = add i32 %gep5, %gep_array6*/
	else if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_2_op0 = main_2_gep5_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep32 = add i32 %gep_int30, %gep_array31*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexitipreheader_gep_int30_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep42 = add i32 %gep_int40, %gep_array41*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexitipreheader_gep_int40_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep52 = add i32 %gep_int50, %gep_array51*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexitipreheader_gep_int50_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep62 = add i32 %gep_int60, %gep_array61*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexitipreheader_gep_int60_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep72 = add i32 %gep_int70, %gep_array71*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexitipreheader_gep_int70_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep82 = add i32 %gep_int80, %gep_array81*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexitipreheader_gep_int80_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep92 = add i32 %gep_int90, %gep_array91*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexitipreheader_gep_int90_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep102 = add i32 %gep_int100, %gep_array101*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexitipreheader_gep_int100_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep112 = add i32 %gep_int110, %gep_array111*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexiti_gep_int110_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep199 = add i32 %gep_int198, 960*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexit_crit_edgei_gep_int198;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep204 = add i32 %gep_int202, %gep_array203*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexit_crit_edgei_gep_int202_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep201 = add i32 %gep199, %gep_array200*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_127)) begin
		main_signed_add_32_2_op0 = main_AddRoundKeyexit_crit_edgei_gep199_reg;
	end
	/* main: %236*/
	/*   %gep235 = add i32 %gep_int234, 960*/
	else if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_signed_add_32_2_op0 = main_236_gep_int234;
	end
	/* main: %236*/
	/*   %gep240 = add i32 %gep_int238, %gep_array239*/
	else if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		main_signed_add_32_2_op0 = main_236_gep_int238_reg;
	end
	/* main: %236*/
	/*   %gep237 = add i32 %gep235, %gep_array236*/
	else if ((cur_state == LEGUP_F_main_BB__236_158)) begin
		main_signed_add_32_2_op0 = main_236_gep235_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep255 = add i32 %gep_int253, %gep_array254*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_signed_add_32_2_op0 = main_lrph10ipreheader_gep_int253_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep265 = add i32 %gep_int263, %gep_array264*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_signed_add_32_2_op0 = main_lrph10ipreheader_gep_int263_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep275 = add i32 %gep_int273, %gep_array274*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_signed_add_32_2_op0 = main_lrph10ipreheader_gep_int273_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep285 = add i32 %gep_int283, %gep_array284*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_signed_add_32_2_op0 = main_lrph10ipreheader_gep_int283_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep295 = add i32 %gep_int293, %gep_array294*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_signed_add_32_2_op0 = main_lrph10ipreheader_gep_int293_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep305 = add i32 %gep_int303, %gep_array304*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_signed_add_32_2_op0 = main_lrph10ipreheader_gep_int303_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep315 = add i32 %gep_int313, %gep_array314*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_signed_add_32_2_op0 = main_lrph10ipreheader_gep_int313_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep325 = add i32 %gep_int323, %gep_array324*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_181)) begin
		main_signed_add_32_2_op0 = main_lrph10ipreheader_gep_int323_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep335 = add i32 %gep_int333, %gep_array334*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		main_signed_add_32_2_op0 = main_lrph10i_gep_int333_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep365 = add i32 %gep_int363, %gep_array364*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		main_signed_add_32_2_op0 = main_lrph10i_gep_int363_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep375 = add i32 %gep_int373, %gep_array374*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_220)) begin
		main_signed_add_32_2_op0 = main_lrph10i_gep_int373_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep429 = add i32 %gep_int428, 1440*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main_signed_add_32_2_op0 = main__crit_edgei_gep_int428;
	end
	/* main: %._crit_edge.i*/
	/*   %gep417 = add i32 %gep415, %gep_array416*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) */ begin
		main_signed_add_32_2_op0 = main__crit_edgei_gep415_reg;
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep19 = add i32 %gep_int18, 1440*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_signed_add_32_2_op1 = 32'd1440;
	end
	/* main: %2*/
	/*   %gep7 = add i32 %gep5, %gep_array6*/
	else if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_2_op1 = main_2_gep_array6_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep32 = add i32 %gep_int30, %gep_array31*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_signed_add_32_2_op1 = main_AddRoundKeyexitipreheader_gep_array31_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep42 = add i32 %gep_int40, %gep_array41*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_signed_add_32_2_op1 = main_AddRoundKeyexitipreheader_gep_array41_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep52 = add i32 %gep_int50, %gep_array51*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_signed_add_32_2_op1 = main_AddRoundKeyexitipreheader_gep_array51_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep62 = add i32 %gep_int60, %gep_array61*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_signed_add_32_2_op1 = main_AddRoundKeyexitipreheader_gep_array61_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep72 = add i32 %gep_int70, %gep_array71*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_signed_add_32_2_op1 = main_AddRoundKeyexitipreheader_gep_array71_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep82 = add i32 %gep_int80, %gep_array81*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_signed_add_32_2_op1 = main_AddRoundKeyexitipreheader_gep_array81_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep92 = add i32 %gep_int90, %gep_array91*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_signed_add_32_2_op1 = main_AddRoundKeyexitipreheader_gep_array91_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep102 = add i32 %gep_int100, %gep_array101*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_signed_add_32_2_op1 = main_AddRoundKeyexitipreheader_gep_array101_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep112 = add i32 %gep_int110, %gep_array111*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		main_signed_add_32_2_op1 = main_AddRoundKeyexiti_gep_array111_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep199 = add i32 %gep_int198, 960*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_signed_add_32_2_op1 = 32'd960;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep204 = add i32 %gep_int202, %gep_array203*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		main_signed_add_32_2_op1 = main_AddRoundKeyexit_crit_edgei_gep_array203_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep201 = add i32 %gep199, %gep_array200*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_127)) begin
		main_signed_add_32_2_op1 = main_AddRoundKeyexit_crit_edgei_gep_array200_reg;
	end
	/* main: %236*/
	/*   %gep235 = add i32 %gep_int234, 960*/
	else if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_signed_add_32_2_op1 = 32'd960;
	end
	/* main: %236*/
	/*   %gep240 = add i32 %gep_int238, %gep_array239*/
	else if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		main_signed_add_32_2_op1 = main_236_gep_array239_reg;
	end
	/* main: %236*/
	/*   %gep237 = add i32 %gep235, %gep_array236*/
	else if ((cur_state == LEGUP_F_main_BB__236_158)) begin
		main_signed_add_32_2_op1 = main_236_gep_array236_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep255 = add i32 %gep_int253, %gep_array254*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_signed_add_32_2_op1 = main_lrph10ipreheader_gep_array254_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep265 = add i32 %gep_int263, %gep_array264*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_signed_add_32_2_op1 = main_lrph10ipreheader_gep_array264_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep275 = add i32 %gep_int273, %gep_array274*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_signed_add_32_2_op1 = main_lrph10ipreheader_gep_array274_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep285 = add i32 %gep_int283, %gep_array284*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_signed_add_32_2_op1 = main_lrph10ipreheader_gep_array284_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep295 = add i32 %gep_int293, %gep_array294*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_signed_add_32_2_op1 = main_lrph10ipreheader_gep_array294_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep305 = add i32 %gep_int303, %gep_array304*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_signed_add_32_2_op1 = main_lrph10ipreheader_gep_array304_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep315 = add i32 %gep_int313, %gep_array314*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_signed_add_32_2_op1 = main_lrph10ipreheader_gep_array314_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep325 = add i32 %gep_int323, %gep_array324*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_181)) begin
		main_signed_add_32_2_op1 = main_lrph10ipreheader_gep_array324_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep335 = add i32 %gep_int333, %gep_array334*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		main_signed_add_32_2_op1 = main_lrph10i_gep_array334_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep365 = add i32 %gep_int363, %gep_array364*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		main_signed_add_32_2_op1 = main_lrph10i_gep_array364_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep375 = add i32 %gep_int373, %gep_array374*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_220)) begin
		main_signed_add_32_2_op1 = main_lrph10i_gep_array374_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep429 = add i32 %gep_int428, 1440*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main_signed_add_32_2_op1 = 32'd1440;
	end
	/* main: %._crit_edge.i*/
	/*   %gep417 = add i32 %gep415, %gep_array416*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) */ begin
		main_signed_add_32_2_op1 = main__crit_edgei_gep_array416_reg;
	end
end
always @(*) begin
	main_signed_add_32_2 = (main_signed_add_32_2_op0 + main_signed_add_32_2_op1);
end
always @(*) begin
	/* main: %2*/
	/*   %27 = add nsw i32 %j.01.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_signed_add_32_3_op0 = main_2_j01ii_reg;
	end
	/* main: %2*/
	/*   %gep10 = add i32 %gep_int8, %gep_array9*/
	else if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_3_op0 = main_2_gep_int8_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep34 = add i32 %gep32, %gep_array33*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexitipreheader_gep32;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep44 = add i32 %gep42, %gep_array43*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexitipreheader_gep42;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep54 = add i32 %gep52, %gep_array53*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexitipreheader_gep52;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep64 = add i32 %gep62, %gep_array63*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexitipreheader_gep62;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep74 = add i32 %gep72, %gep_array73*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexitipreheader_gep72;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep84 = add i32 %gep82, %gep_array83*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexitipreheader_gep82;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep94 = add i32 %gep92, %gep_array93*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexitipreheader_gep92;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep104 = add i32 %gep102, %gep_array103*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexitipreheader_gep102;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep114 = add i32 %gep112, %gep_array113*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexiti_gep112;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep206 = add i32 %gep_int205, 1440*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexit_crit_edgei_gep_int205;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep211 = add i32 %gep_int209, %gep_array210*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexit_crit_edgei_gep_int209_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep208 = add i32 %gep206, %gep_array207*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_127)) begin
		main_signed_add_32_3_op0 = main_AddRoundKeyexit_crit_edgei_gep206_reg;
	end
	/* main: %236*/
	/*   %gep242 = add i32 %gep_int241, 1440*/
	else if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_signed_add_32_3_op0 = main_236_gep_int241;
	end
	/* main: %236*/
	/*   %gep247 = add i32 %gep_int245, %gep_array246*/
	else if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		main_signed_add_32_3_op0 = main_236_gep_int245_reg;
	end
	/* main: %236*/
	/*   %gep244 = add i32 %gep242, %gep_array243*/
	else if ((cur_state == LEGUP_F_main_BB__236_158)) begin
		main_signed_add_32_3_op0 = main_236_gep242_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep257 = add i32 %gep255, %gep_array256*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_signed_add_32_3_op0 = main_lrph10ipreheader_gep255;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep267 = add i32 %gep265, %gep_array266*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_signed_add_32_3_op0 = main_lrph10ipreheader_gep265;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep277 = add i32 %gep275, %gep_array276*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_signed_add_32_3_op0 = main_lrph10ipreheader_gep275;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep287 = add i32 %gep285, %gep_array286*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_signed_add_32_3_op0 = main_lrph10ipreheader_gep285;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep297 = add i32 %gep295, %gep_array296*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_signed_add_32_3_op0 = main_lrph10ipreheader_gep295;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep307 = add i32 %gep305, %gep_array306*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_signed_add_32_3_op0 = main_lrph10ipreheader_gep305;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep317 = add i32 %gep315, %gep_array316*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_signed_add_32_3_op0 = main_lrph10ipreheader_gep315;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep327 = add i32 %gep325, %gep_array326*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_181)) begin
		main_signed_add_32_3_op0 = main_lrph10ipreheader_gep325;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep337 = add i32 %gep335, %gep_array336*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		main_signed_add_32_3_op0 = main_lrph10i_gep335;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep367 = add i32 %gep365, %gep_array366*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		main_signed_add_32_3_op0 = main_lrph10i_gep365;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep377 = add i32 %gep375, %gep_array376*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_220)) begin
		main_signed_add_32_3_op0 = main_lrph10i_gep375;
	end
	/* main: %._crit_edge.i*/
	/*   %449 = add nsw i32 %j.01.i2.i8, 1*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main_signed_add_32_3_op0 = main__crit_edgei_j01i2i8_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep420 = add i32 %gep_int418, %gep_array419*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) */ begin
		main_signed_add_32_3_op0 = main__crit_edgei_gep_int418_reg;
	end
end
always @(*) begin
	/* main: %2*/
	/*   %27 = add nsw i32 %j.01.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_signed_add_32_3_op1 = 32'd1;
	end
	/* main: %2*/
	/*   %gep10 = add i32 %gep_int8, %gep_array9*/
	else if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_3_op1 = main_2_gep_array9_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep34 = add i32 %gep32, %gep_array33*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		main_signed_add_32_3_op1 = main_AddRoundKeyexitipreheader_gep_array33_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep44 = add i32 %gep42, %gep_array43*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		main_signed_add_32_3_op1 = main_AddRoundKeyexitipreheader_gep_array43_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep54 = add i32 %gep52, %gep_array53*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_signed_add_32_3_op1 = main_AddRoundKeyexitipreheader_gep_array53_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep64 = add i32 %gep62, %gep_array63*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_signed_add_32_3_op1 = main_AddRoundKeyexitipreheader_gep_array63_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep74 = add i32 %gep72, %gep_array73*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_signed_add_32_3_op1 = main_AddRoundKeyexitipreheader_gep_array73_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep84 = add i32 %gep82, %gep_array83*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_signed_add_32_3_op1 = main_AddRoundKeyexitipreheader_gep_array83_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep94 = add i32 %gep92, %gep_array93*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_signed_add_32_3_op1 = main_AddRoundKeyexitipreheader_gep_array93_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %gep104 = add i32 %gep102, %gep_array103*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_signed_add_32_3_op1 = main_AddRoundKeyexitipreheader_gep_array103_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %gep114 = add i32 %gep112, %gep_array113*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		main_signed_add_32_3_op1 = main_AddRoundKeyexiti_gep_array113_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep206 = add i32 %gep_int205, 1440*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_signed_add_32_3_op1 = 32'd1440;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep211 = add i32 %gep_int209, %gep_array210*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		main_signed_add_32_3_op1 = main_AddRoundKeyexit_crit_edgei_gep_array210_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %gep208 = add i32 %gep206, %gep_array207*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_127)) begin
		main_signed_add_32_3_op1 = main_AddRoundKeyexit_crit_edgei_gep_array207_reg;
	end
	/* main: %236*/
	/*   %gep242 = add i32 %gep_int241, 1440*/
	else if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_signed_add_32_3_op1 = 32'd1440;
	end
	/* main: %236*/
	/*   %gep247 = add i32 %gep_int245, %gep_array246*/
	else if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		main_signed_add_32_3_op1 = main_236_gep_array246_reg;
	end
	/* main: %236*/
	/*   %gep244 = add i32 %gep242, %gep_array243*/
	else if ((cur_state == LEGUP_F_main_BB__236_158)) begin
		main_signed_add_32_3_op1 = main_236_gep_array243_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep257 = add i32 %gep255, %gep_array256*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		main_signed_add_32_3_op1 = main_lrph10ipreheader_gep_array256_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep267 = add i32 %gep265, %gep_array266*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		main_signed_add_32_3_op1 = main_lrph10ipreheader_gep_array266_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep277 = add i32 %gep275, %gep_array276*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		main_signed_add_32_3_op1 = main_lrph10ipreheader_gep_array276_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep287 = add i32 %gep285, %gep_array286*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		main_signed_add_32_3_op1 = main_lrph10ipreheader_gep_array286_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep297 = add i32 %gep295, %gep_array296*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		main_signed_add_32_3_op1 = main_lrph10ipreheader_gep_array296_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep307 = add i32 %gep305, %gep_array306*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		main_signed_add_32_3_op1 = main_lrph10ipreheader_gep_array306_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep317 = add i32 %gep315, %gep_array316*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_180)) begin
		main_signed_add_32_3_op1 = main_lrph10ipreheader_gep_array316_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %gep327 = add i32 %gep325, %gep_array326*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_181)) begin
		main_signed_add_32_3_op1 = main_lrph10ipreheader_gep_array326_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep337 = add i32 %gep335, %gep_array336*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		main_signed_add_32_3_op1 = main_lrph10i_gep_array336_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep367 = add i32 %gep365, %gep_array366*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		main_signed_add_32_3_op1 = main_lrph10i_gep_array366_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   %gep377 = add i32 %gep375, %gep_array376*/
	else if ((cur_state == LEGUP_F_main_BB_lrph10i_220)) begin
		main_signed_add_32_3_op1 = main_lrph10i_gep_array376_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %449 = add nsw i32 %j.01.i2.i8, 1*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_236)) begin
		main_signed_add_32_3_op1 = 32'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %gep420 = add i32 %gep_int418, %gep_array419*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) */ begin
		main_signed_add_32_3_op1 = main__crit_edgei_gep_array419_reg;
	end
end
always @(*) begin
	main_signed_add_32_3 = (main_signed_add_32_3_op0 + main_signed_add_32_3_op1);
end
always @(*) begin
	/* main: %2*/
	/*   %gep24 = add i32 %gep_int22, %gep_array23*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_7_op0 = main_2_gep_int22_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %215 = add nsw i32 %j.01.i2.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_signed_add_32_7_op0 = main_AddRoundKeyexit_crit_edgei_j01i2i_reg;
	end
	/* main: %236*/
	/*   %262 = add nsw i32 %j.01.i.i1, 1*/
	else if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_signed_add_32_7_op0 = main_236_j01ii1_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep434 = add i32 %gep_int432, %gep_array433*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) */ begin
		main_signed_add_32_7_op0 = main__crit_edgei_gep_int432_reg;
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep24 = add i32 %gep_int22, %gep_array23*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_7_op1 = main_2_gep_array23_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %215 = add nsw i32 %j.01.i2.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_125)) begin
		main_signed_add_32_7_op1 = 32'd1;
	end
	/* main: %236*/
	/*   %262 = add nsw i32 %j.01.i.i1, 1*/
	else if ((cur_state == LEGUP_F_main_BB__236_156)) begin
		main_signed_add_32_7_op1 = 32'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %gep434 = add i32 %gep_int432, %gep_array433*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) */ begin
		main_signed_add_32_7_op1 = main__crit_edgei_gep_array433_reg;
	end
end
always @(*) begin
	main_signed_add_32_7 = (main_signed_add_32_7_op0 + main_signed_add_32_7_op1);
end
always @(*) begin
	/* main: %2*/
	/*   %gep14 = add i32 %gep12, %gep_array13*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_4_op0 = main_2_gep12_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep424 = add i32 %gep422, %gep_array423*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) */ begin
		main_signed_add_32_4_op0 = main__crit_edgei_gep422_reg;
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep14 = add i32 %gep12, %gep_array13*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_4_op1 = main_2_gep_array13_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep424 = add i32 %gep422, %gep_array423*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) */ begin
		main_signed_add_32_4_op1 = main__crit_edgei_gep_array423_reg;
	end
end
always @(*) begin
	main_signed_add_32_4 = (main_signed_add_32_4_op0 + main_signed_add_32_4_op1);
end
always @(*) begin
	/* main: %2*/
	/*   %gep17 = add i32 %gep_int15, %gep_array16*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_5_op0 = main_2_gep_int15_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep427 = add i32 %gep_int425, %gep_array426*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) */ begin
		main_signed_add_32_5_op0 = main__crit_edgei_gep_int425_reg;
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep17 = add i32 %gep_int15, %gep_array16*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_5_op1 = main_2_gep_array16_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep427 = add i32 %gep_int425, %gep_array426*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) */ begin
		main_signed_add_32_5_op1 = main__crit_edgei_gep_array426_reg;
	end
end
always @(*) begin
	main_signed_add_32_5 = (main_signed_add_32_5_op0 + main_signed_add_32_5_op1);
end
always @(*) begin
	/* main: %2*/
	/*   %gep21 = add i32 %gep19, %gep_array20*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_6_op0 = main_2_gep19_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep431 = add i32 %gep429, %gep_array430*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) */ begin
		main_signed_add_32_6_op0 = main__crit_edgei_gep429_reg;
	end
end
always @(*) begin
	/* main: %2*/
	/*   %gep21 = add i32 %gep19, %gep_array20*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		main_signed_add_32_6_op1 = main_2_gep_array20_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %gep431 = add i32 %gep429, %gep_array430*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) */ begin
		main_signed_add_32_6_op1 = main__crit_edgei_gep_array430_reg;
	end
end
always @(*) begin
	main_signed_add_32_6 = (main_signed_add_32_6_op0 + main_signed_add_32_6_op1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %475*/
	/*   ret i32 %.lcssa*/
	if ((cur_state == LEGUP_F_main_BB__475_266)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %0*/
	/*   store i32 50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 246, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 48, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 224, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 7, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 43, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 40, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 210, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 171, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 9, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 79, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   %4 = load i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   store i32 %8, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   store i32 %14, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_26)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   %16 = load i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_27)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   store i32 %20, i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_29)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   %22 = load i32* %21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   store i32 %26, i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %28 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %38 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_35)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %48 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_36)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %58 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %68 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %78 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %88 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %98 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %32 = load i32* %31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %37, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %42 = load i32* %41, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_45)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %42, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_47)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %47 = load i32* %46, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %47, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %52 = load i32* %51, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %57, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %72 = load i32* %71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %77, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_59)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_60)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %82, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_62)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %87 = load i32* %86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_63)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %87, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_65)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %92 = load i32* %91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_66)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %92, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_68)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %97 = load i32* %96, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_69)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %97, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_71)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %102 = load i32* %101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_72)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %102, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_74)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_75)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %107, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_77)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %110 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_81)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %114 = load i32* %113, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %120 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_85)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %119, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_86)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %125 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_87)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %124 = load i32* %123, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_88)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %124, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_90)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %129 = load i32* %128, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_91)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %135 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_92)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %129, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %134 = load i32* %133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_94)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %139 = load i32* %138, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_95)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %145 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_96)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %139, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %144 = load i32* %143, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %149 = load i32* %148, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_99)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %155 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_100)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %149, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %154 = load i32* %153, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %159 = load i32* %158, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_103)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %159, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_105)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_106)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %164, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %169 = load i32* %168, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %169, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %174 = load i32* %173, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %174, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_114)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %179 = load i32* %178, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %179, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %184 = load i32* %183, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_118)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %184, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %189 = load i32* %188, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_121)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %189, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_123)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %195 = load i32* %194, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %192 = load i32* %191, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_127)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %196, i32* %194, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_129)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %198 = load i32* %197, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_130)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %202, i32* %200, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_132)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %204 = load i32* %203, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_133)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %208, i32* %206, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_135)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %210 = load i32* %209, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_136)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %214, i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_138)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %218 = load i32* %217, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_142)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %220*/
	/*   %.pre.i = load i32* %217, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__220_145)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %228 = load i32* %227, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %236*/
	/*   %242 = load i32* %241, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %236*/
	/*   %239 = load i32* %238, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_158)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %236*/
	/*   store i32 %243, i32* %241, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_160)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %236*/
	/*   %245 = load i32* %244, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_161)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %236*/
	/*   store i32 %249, i32* %247, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_163)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %236*/
	/*   %251 = load i32* %250, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_164)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %236*/
	/*   store i32 %255, i32* %253, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_166)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %236*/
	/*   %257 = load i32* %256, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_167)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %236*/
	/*   store i32 %261, i32* %259, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_169)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %263 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %273 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_172)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %283 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_173)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %293 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %303 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %313 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %323 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %333 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %272, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %277, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_181)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %282, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_183)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %292, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_185)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %302, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_187)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %312, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_189)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %317, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_191)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %322, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_193)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %327, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_195)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %332, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_197)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %337, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_199)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %342, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_201)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %344 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_205)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %354 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_206)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %359 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_207)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %364 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %353, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_209)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %358, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_211)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %369 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_212)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %363, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_213)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %374 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_214)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %373, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_216)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %384 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %383, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_218)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %394 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_219)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %399 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_220)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %393, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_221)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %398, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_223)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %403, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_225)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %409 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_226)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %408, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_227)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %419 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_228)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %413, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_230)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %418, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_232)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %423, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_234)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %426 = load i32* %425, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %430, i32* %428, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_239)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %432 = load i32* %431, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_240)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %436, i32* %434, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_242)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %438 = load i32* %437, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_243)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %442, i32* %440, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_245)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %444 = load i32* %443, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_246)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %448, i32* %446, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_248)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i14*/
	/*   %452 = load i32* %451, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi14_252)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %454*/
	/*   %.pre12.i = load i32* %451, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__454_255)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.loopexit.i11*/
	/*   %462 = load i32* %461, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_260)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %0*/
	/*   store i32 50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* main: %0*/
	/*   store i32 246, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 48, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %0*/
	/*   store i32 152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %0*/
	/*   store i32 224, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %0*/
	/*   store i32 7, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %0*/
	/*   store i32 43, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_address_a = `TAG_g_key_a;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 40, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 210, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd6));
	end
	/* main: %0*/
	/*   store i32 171, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd8));
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd10));
	end
	/* main: %0*/
	/*   store i32 9, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd12));
	end
	/* main: %0*/
	/*   store i32 79, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd14));
	end
	/* main: %2*/
	/*   %4 = load i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_address_a = main_2_3;
	end
	/* main: %2*/
	/*   store i32 %8, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		memory_controller_address_a = main_2_6_reg;
	end
	/* main: %2*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_address_a = main_2_9_reg;
	end
	/* main: %2*/
	/*   store i32 %14, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_26)) begin
		memory_controller_address_a = main_2_12_reg;
	end
	/* main: %2*/
	/*   %16 = load i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_27)) begin
		memory_controller_address_a = main_2_15_reg;
	end
	/* main: %2*/
	/*   store i32 %20, i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_29)) begin
		memory_controller_address_a = main_2_18_reg;
	end
	/* main: %2*/
	/*   %22 = load i32* %21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_30)) begin
		memory_controller_address_a = main_2_21_reg;
	end
	/* main: %2*/
	/*   store i32 %26, i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_32)) begin
		memory_controller_address_a = main_2_24_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %28 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %38 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_35)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %48 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_36)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %58 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %68 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %78 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %88 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %98 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %32 = load i32* %31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_31_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %37, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %42 = load i32* %41, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_45)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_41_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %42, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_47)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %47 = load i32* %46, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_46_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %47, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %52 = load i32* %51, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_51_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %57, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_61_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %72 = load i32* %71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_71_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %77, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_59)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_60)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_81_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %82, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_62)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %87 = load i32* %86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_63)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_86_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %87, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_65)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %92 = load i32* %91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_66)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_91_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %92, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_68)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %97 = load i32* %96, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_69)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_96_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %97, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_71)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %102 = load i32* %101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_72)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_101_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %102, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_74)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_75)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_106_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %107, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_77)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %110 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_81)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %114 = load i32* %113, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_113;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %120 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_85)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %119, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_86)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %125 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_87)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %124 = load i32* %123, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_88)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_123;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %124, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_90)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %129 = load i32* %128, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_91)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_128_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %135 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_92)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %129, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %134 = load i32* %133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_94)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_133;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %139 = load i32* %138, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_95)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_138;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %145 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_96)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %139, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %144 = load i32* %143, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_143;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %149 = load i32* %148, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_99)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_148;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %155 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_100)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %149, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %154 = load i32* %153, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_153;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %159 = load i32* %158, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_103)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_158;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %159, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_105)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_106)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_163;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %164, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %169 = load i32* %168, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_168;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %169, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %174 = load i32* %173, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_173;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %174, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_114)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %179 = load i32* %178, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_178;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %179, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %184 = load i32* %183, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_118)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_183;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %184, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %189 = load i32* %188, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_121)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_188;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %189, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_123)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %195 = load i32* %194, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_194;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %192 = load i32* %191, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_127)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_191;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %196, i32* %194, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_129)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_194_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %198 = load i32* %197, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_130)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_197_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %202, i32* %200, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_132)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_200_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %204 = load i32* %203, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_133)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_203_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %208, i32* %206, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_135)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_206_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %210 = load i32* %209, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_136)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_209_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %214, i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_138)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_212_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %218 = load i32* %217, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_142)) begin
		memory_controller_address_a = main_lrphi_217;
	end
	/* main: %220*/
	/*   %.pre.i = load i32* %217, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__220_145)) begin
		memory_controller_address_a = main_lrphi_217_reg;
	end
	/* main: %.preheader.i*/
	/*   %228 = load i32* %227, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_address_a = main_preheaderi_227;
	end
	/* main: %236*/
	/*   %242 = load i32* %241, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		memory_controller_address_a = main_236_241;
	end
	/* main: %236*/
	/*   %239 = load i32* %238, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_158)) begin
		memory_controller_address_a = main_236_238;
	end
	/* main: %236*/
	/*   store i32 %243, i32* %241, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_160)) begin
		memory_controller_address_a = main_236_241_reg;
	end
	/* main: %236*/
	/*   %245 = load i32* %244, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_161)) begin
		memory_controller_address_a = main_236_244_reg;
	end
	/* main: %236*/
	/*   store i32 %249, i32* %247, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_163)) begin
		memory_controller_address_a = main_236_247_reg;
	end
	/* main: %236*/
	/*   %251 = load i32* %250, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_164)) begin
		memory_controller_address_a = main_236_250_reg;
	end
	/* main: %236*/
	/*   store i32 %255, i32* %253, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_166)) begin
		memory_controller_address_a = main_236_253_reg;
	end
	/* main: %236*/
	/*   %257 = load i32* %256, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_167)) begin
		memory_controller_address_a = main_236_256_reg;
	end
	/* main: %236*/
	/*   store i32 %261, i32* %259, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_169)) begin
		memory_controller_address_a = main_236_259_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %263 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %273 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_172)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %283 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_173)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %293 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %303 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %313 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %323 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %333 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %272, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %277, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_181)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %282, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_183)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %292, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_185)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %302, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_187)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %312, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_189)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %317, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_191)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %322, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_193)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %327, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_195)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %332, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_197)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %337, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_199)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %342, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_201)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %.lr.ph10.i*/
	/*   %344 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_205)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %.lr.ph10.i*/
	/*   %354 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_206)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %.lr.ph10.i*/
	/*   %359 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_207)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %.lr.ph10.i*/
	/*   %364 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %353, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_209)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %358, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_211)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %.lr.ph10.i*/
	/*   %369 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_212)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %363, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_213)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %.lr.ph10.i*/
	/*   %374 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_214)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %373, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_216)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %.lr.ph10.i*/
	/*   %384 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %383, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_218)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %.lr.ph10.i*/
	/*   %394 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_219)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %.lr.ph10.i*/
	/*   %399 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_220)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %393, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_221)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %398, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_223)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %403, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_225)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %.lr.ph10.i*/
	/*   %409 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_226)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %408, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_227)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* main: %.lr.ph10.i*/
	/*   %419 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_228)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %413, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_230)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %418, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_232)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %423, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_234)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %._crit_edge.i*/
	/*   %426 = load i32* %425, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		memory_controller_address_a = main__crit_edgei_425;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %430, i32* %428, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_239)) begin
		memory_controller_address_a = main__crit_edgei_428_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %432 = load i32* %431, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_240)) begin
		memory_controller_address_a = main__crit_edgei_431_reg;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %436, i32* %434, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_242)) begin
		memory_controller_address_a = main__crit_edgei_434_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %438 = load i32* %437, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_243)) begin
		memory_controller_address_a = main__crit_edgei_437_reg;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %442, i32* %440, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_245)) begin
		memory_controller_address_a = main__crit_edgei_440_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %444 = load i32* %443, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_246)) begin
		memory_controller_address_a = main__crit_edgei_443_reg;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %448, i32* %446, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_248)) begin
		memory_controller_address_a = main__crit_edgei_446_reg;
	end
	/* main: %.lr.ph.i14*/
	/*   %452 = load i32* %451, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi14_252)) begin
		memory_controller_address_a = main_lrphi14_451;
	end
	/* main: %454*/
	/*   %.pre12.i = load i32* %451, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__454_255)) begin
		memory_controller_address_a = main_lrphi14_451_reg;
	end
	/* main: %.preheader.loopexit.i11*/
	/*   %462 = load i32* %461, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_260)) begin
		memory_controller_address_a = main_preheaderloopexiti11_461;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %0*/
	/*   store i32 50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 246, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 48, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 224, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 7, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 43, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 40, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 210, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 171, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 9, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 79, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   %4 = load i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %2*/
	/*   store i32 %8, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %2*/
	/*   store i32 %14, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_26)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   %16 = load i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_27)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %2*/
	/*   store i32 %20, i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_29)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   %22 = load i32* %21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_30)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %2*/
	/*   store i32 %26, i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_32)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %28 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %38 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_35)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %48 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_36)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %58 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %68 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %78 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %88 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %98 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %32 = load i32* %31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %37, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %42 = load i32* %41, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_45)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %42, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_47)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %47 = load i32* %46, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %47, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %52 = load i32* %51, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %57, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %72 = load i32* %71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %77, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_59)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_60)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %82, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_62)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %87 = load i32* %86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_63)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %87, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_65)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %92 = load i32* %91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_66)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %92, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_68)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %97 = load i32* %96, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_69)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %97, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_71)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %102 = load i32* %101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_72)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %102, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_74)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_75)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %107, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_77)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %110 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_81)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %114 = load i32* %113, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %120 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_85)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %119, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_86)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %125 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_87)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %124 = load i32* %123, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_88)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %124, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_90)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %129 = load i32* %128, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_91)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %135 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_92)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %129, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %134 = load i32* %133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_94)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %139 = load i32* %138, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_95)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %145 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_96)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %139, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %144 = load i32* %143, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %149 = load i32* %148, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_99)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %155 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_100)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %149, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %154 = load i32* %153, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %159 = load i32* %158, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_103)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %159, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_105)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_106)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %164, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %169 = load i32* %168, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %169, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %174 = load i32* %173, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %174, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_114)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %179 = load i32* %178, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %179, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %184 = load i32* %183, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_118)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %184, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %189 = load i32* %188, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_121)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %189, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_123)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %195 = load i32* %194, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %192 = load i32* %191, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_127)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %196, i32* %194, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_129)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %198 = load i32* %197, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_130)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %202, i32* %200, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_132)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %204 = load i32* %203, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_133)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %208, i32* %206, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_135)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %210 = load i32* %209, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_136)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %214, i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_138)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %218 = load i32* %217, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_142)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %220*/
	/*   %.pre.i = load i32* %217, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__220_145)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %228 = load i32* %227, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %236*/
	/*   %242 = load i32* %241, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %236*/
	/*   %239 = load i32* %238, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_158)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %236*/
	/*   store i32 %243, i32* %241, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_160)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %236*/
	/*   %245 = load i32* %244, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_161)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %236*/
	/*   store i32 %249, i32* %247, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_163)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %236*/
	/*   %251 = load i32* %250, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_164)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %236*/
	/*   store i32 %255, i32* %253, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_166)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %236*/
	/*   %257 = load i32* %256, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_167)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %236*/
	/*   store i32 %261, i32* %259, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_169)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %263 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %273 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_172)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %283 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_173)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %293 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %303 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %313 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %323 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %333 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %272, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %277, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_181)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %282, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_183)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %292, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_185)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %302, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_187)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %312, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_189)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %317, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_191)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %322, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_193)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %327, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_195)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %332, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_197)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %337, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_199)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %342, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_201)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %344 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_205)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   %354 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_206)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   %359 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_207)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   %364 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %353, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_209)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %358, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_211)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %369 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_212)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %363, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_213)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %374 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_214)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %373, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_216)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %384 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %383, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_218)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %394 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_219)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   %399 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_220)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %393, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_221)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %398, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_223)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %403, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_225)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %409 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_226)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %408, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_227)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %419 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_228)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %413, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_230)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %418, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_232)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %423, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_234)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %426 = load i32* %425, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %430, i32* %428, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_239)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %432 = load i32* %431, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_240)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %436, i32* %434, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_242)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %438 = load i32* %437, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_243)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %442, i32* %440, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_245)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %444 = load i32* %443, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_246)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %448, i32* %446, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_248)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i14*/
	/*   %452 = load i32* %451, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi14_252)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %454*/
	/*   %.pre12.i = load i32* %451, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__454_255)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.loopexit.i11*/
	/*   %462 = load i32* %461, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_260)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %0*/
	/*   store i32 50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_a = 32'd50;
	end
	/* main: %0*/
	/*   store i32 246, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_a = 32'd246;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_in_a = 32'd136;
	end
	/* main: %0*/
	/*   store i32 48, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_in_a = 32'd48;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_in_a = 32'd49;
	end
	/* main: %0*/
	/*   store i32 152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_in_a = 32'd152;
	end
	/* main: %0*/
	/*   store i32 224, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_in_a = 32'd224;
	end
	/* main: %0*/
	/*   store i32 7, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_in_a = 32'd7;
	end
	/* main: %0*/
	/*   store i32 43, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_in_a = 32'd43;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_in_a = 32'd21;
	end
	/* main: %0*/
	/*   store i32 40, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_in_a = 32'd40;
	end
	/* main: %0*/
	/*   store i32 210, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_in_a = 32'd210;
	end
	/* main: %0*/
	/*   store i32 171, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_in_a = 32'd171;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_in_a = 32'd21;
	end
	/* main: %0*/
	/*   store i32 9, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_in_a = 32'd9;
	end
	/* main: %0*/
	/*   store i32 79, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_in_a = 32'd79;
	end
	/* main: %2*/
	/*   store i32 %8, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		memory_controller_in_a = main_2_8;
	end
	/* main: %2*/
	/*   store i32 %14, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_26)) begin
		memory_controller_in_a = main_2_14;
	end
	/* main: %2*/
	/*   store i32 %20, i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_29)) begin
		memory_controller_in_a = main_2_20;
	end
	/* main: %2*/
	/*   store i32 %26, i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_32)) begin
		memory_controller_in_a = main_2_26;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %37, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_37;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %42, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_47)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_42;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %47, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_47;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %57, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_57;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_67;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %77, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_59)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_77;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %82, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_62)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_82;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %87, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_65)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_87;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %92, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_68)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_92;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %97, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_71)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_97;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %102, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_74)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_102;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %107, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_77)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_107;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %119, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_86)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_119;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %124, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_90)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_124;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %129, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_129;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %139, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_139;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %149, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_149;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %159, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_105)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_159;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %164, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_164;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %169, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_169;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %174, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_114)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_174;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %179, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_179;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %184, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_184;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %189, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_123)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_189;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %196, i32* %194, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_129)) begin
		memory_controller_in_a = main_AddRoundKeyexit_crit_edgei_196;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %202, i32* %200, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_132)) begin
		memory_controller_in_a = main_AddRoundKeyexit_crit_edgei_202;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %208, i32* %206, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_135)) begin
		memory_controller_in_a = main_AddRoundKeyexit_crit_edgei_208;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %214, i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_138)) begin
		memory_controller_in_a = main_AddRoundKeyexit_crit_edgei_214;
	end
	/* main: %236*/
	/*   store i32 %243, i32* %241, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_160)) begin
		memory_controller_in_a = main_236_243;
	end
	/* main: %236*/
	/*   store i32 %249, i32* %247, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_163)) begin
		memory_controller_in_a = main_236_249;
	end
	/* main: %236*/
	/*   store i32 %255, i32* %253, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_166)) begin
		memory_controller_in_a = main_236_255;
	end
	/* main: %236*/
	/*   store i32 %261, i32* %259, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_169)) begin
		memory_controller_in_a = main_236_261;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %272, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		memory_controller_in_a = main_lrph10ipreheader_272_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %277, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_181)) begin
		memory_controller_in_a = main_lrph10ipreheader_277;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %282, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_183)) begin
		memory_controller_in_a = main_lrph10ipreheader_282;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %292, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_185)) begin
		memory_controller_in_a = main_lrph10ipreheader_292;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %302, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_187)) begin
		memory_controller_in_a = main_lrph10ipreheader_302;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %312, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_189)) begin
		memory_controller_in_a = main_lrph10ipreheader_312;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %317, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_191)) begin
		memory_controller_in_a = main_lrph10ipreheader_317;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %322, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_193)) begin
		memory_controller_in_a = main_lrph10ipreheader_322;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %327, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_195)) begin
		memory_controller_in_a = main_lrph10ipreheader_327;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %332, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_197)) begin
		memory_controller_in_a = main_lrph10ipreheader_332;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %337, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_199)) begin
		memory_controller_in_a = main_lrph10ipreheader_337;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %342, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_201)) begin
		memory_controller_in_a = main_lrph10ipreheader_342;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %353, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_209)) begin
		memory_controller_in_a = main_lrph10i_353;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %358, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_211)) begin
		memory_controller_in_a = main_lrph10i_358;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %363, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_213)) begin
		memory_controller_in_a = main_lrph10i_363;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %373, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_216)) begin
		memory_controller_in_a = main_lrph10i_373;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %383, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_218)) begin
		memory_controller_in_a = main_lrph10i_383;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %393, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_221)) begin
		memory_controller_in_a = main_lrph10i_393;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %398, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_223)) begin
		memory_controller_in_a = main_lrph10i_398;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %403, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_225)) begin
		memory_controller_in_a = main_lrph10i_403;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %408, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_227)) begin
		memory_controller_in_a = main_lrph10i_408;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %413, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_230)) begin
		memory_controller_in_a = main_lrph10i_413;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %418, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_232)) begin
		memory_controller_in_a = main_lrph10i_418;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %423, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_234)) begin
		memory_controller_in_a = main_lrph10i_423;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %430, i32* %428, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_239)) begin
		memory_controller_in_a = main__crit_edgei_430;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %436, i32* %434, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_242)) begin
		memory_controller_in_a = main__crit_edgei_436;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %442, i32* %440, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_245)) begin
		memory_controller_in_a = main__crit_edgei_442;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %448, i32* %446, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_248)) begin
		memory_controller_in_a = main__crit_edgei_448;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %0*/
	/*   store i32 50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 246, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 48, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 224, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 7, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 43, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 40, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 210, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 171, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 9, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 79, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %2*/
	/*   %4 = load i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %2*/
	/*   store i32 %8, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %2*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %2*/
	/*   store i32 %14, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_26)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %2*/
	/*   %16 = load i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_27)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %2*/
	/*   store i32 %20, i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_29)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %2*/
	/*   %22 = load i32* %21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_30)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %2*/
	/*   store i32 %26, i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_32)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %28 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %38 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_35)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %48 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_36)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %58 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %68 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %78 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %88 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %98 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %32 = load i32* %31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %37, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %42 = load i32* %41, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_45)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %42, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_47)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %47 = load i32* %46, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %47, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %52 = load i32* %51, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %57, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %72 = load i32* %71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %77, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_59)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_60)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %82, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_62)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %87 = load i32* %86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_63)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %87, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_65)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %92 = load i32* %91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_66)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %92, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_68)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %97 = load i32* %96, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_69)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %97, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_71)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %102 = load i32* %101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_72)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %102, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_74)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_75)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %107, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_77)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %110 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_81)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %114 = load i32* %113, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %120 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_85)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %119, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_86)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %125 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_87)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %124 = load i32* %123, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_88)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %124, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_90)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %129 = load i32* %128, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_91)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %135 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_92)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %129, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %134 = load i32* %133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_94)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %139 = load i32* %138, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_95)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %145 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_96)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %139, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %144 = load i32* %143, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_98)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %149 = load i32* %148, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_99)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %155 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_100)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %149, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %154 = load i32* %153, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_102)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %159 = load i32* %158, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_103)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %159, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_105)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_106)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %164, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_108)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %169 = load i32* %168, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %169, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %174 = load i32* %173, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %174, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_114)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %179 = load i32* %178, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %179, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_117)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %184 = load i32* %183, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_118)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %184, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_120)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %189 = load i32* %188, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_121)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %189, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_123)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %195 = load i32* %194, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_126)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %192 = load i32* %191, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_127)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %196, i32* %194, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_129)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %198 = load i32* %197, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_130)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %202, i32* %200, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_132)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %204 = load i32* %203, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_133)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %208, i32* %206, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_135)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %210 = load i32* %209, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_136)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %214, i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_138)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i*/
	/*   %218 = load i32* %217, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_142)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %220*/
	/*   %.pre.i = load i32* %217, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__220_145)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %228 = load i32* %227, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %236*/
	/*   %242 = load i32* %241, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_157)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %236*/
	/*   %239 = load i32* %238, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_158)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %236*/
	/*   store i32 %243, i32* %241, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_160)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %236*/
	/*   %245 = load i32* %244, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_161)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %236*/
	/*   store i32 %249, i32* %247, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_163)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %236*/
	/*   %251 = load i32* %250, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_164)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %236*/
	/*   store i32 %255, i32* %253, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_166)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %236*/
	/*   %257 = load i32* %256, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_167)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %236*/
	/*   store i32 %261, i32* %259, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_169)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %263 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %273 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_172)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %283 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_173)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %293 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %303 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %313 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %323 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %333 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %272, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_179)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %277, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_181)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %282, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_183)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %292, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_185)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %302, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_187)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %312, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_189)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %317, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_191)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %322, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_193)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %327, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_195)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %332, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_197)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %337, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_199)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %342, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_201)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   %344 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_205)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   %354 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_206)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   %359 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_207)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   %364 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_208)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %353, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_209)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %358, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_211)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   %369 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_212)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %363, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_213)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   %374 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_214)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %373, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_216)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   %384 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %383, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_218)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   %394 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_219)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   %399 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_220)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %393, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_221)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %398, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_223)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %403, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_225)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   %409 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_226)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %408, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_227)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   %419 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_228)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %413, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_230)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %418, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_232)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %423, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_234)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %426 = load i32* %425, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %430, i32* %428, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_239)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %432 = load i32* %431, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_240)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %436, i32* %434, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_242)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %438 = load i32* %437, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_243)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %442, i32* %440, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_245)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %444 = load i32* %443, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_246)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %448, i32* %446, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_248)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i14*/
	/*   %452 = load i32* %451, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi14_252)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %454*/
	/*   %.pre12.i = load i32* %451, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__454_255)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.loopexit.i11*/
	/*   %462 = load i32* %461, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti11_260)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 90, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 141, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 126, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 22, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 174, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 166, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 247, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 207, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 60, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   %7 = load i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   %13 = load i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   %19 = load i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_27)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   %25 = load i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_30)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %33 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %43 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_35)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %53 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_36)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %63 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %73 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %83 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %93 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %103 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %32, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %57 = load i32* %56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %67 = load i32* %66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %62, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %77 = load i32* %76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %72, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_65)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %115 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_81)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %119 = load i32* %118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %130 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_91)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %114, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %140 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_95)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %134, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %150 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_99)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %144, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %160 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_103)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %165 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_106)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %170 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %154, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %175 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %185 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_118)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %201 = load i32* %200, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_130)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %207 = load i32* %206, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_133)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_136)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %236*/
	/*   %248 = load i32* %247, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_161)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %236*/
	/*   %254 = load i32* %253, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_164)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %236*/
	/*   %260 = load i32* %259, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_167)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %268 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %278 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_172)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %288 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_173)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %298 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %308 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %318 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %328 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %338 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %267, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_183)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %287, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_185)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %297, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_187)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %307, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_193)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %349 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_205)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %348, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_213)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %379 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_214)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %368, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_216)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %389 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %378, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_218)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %404 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_221)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %388, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_225)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %414 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_227)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %429 = load i32* %428, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %435 = load i32* %434, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_240)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %441 = load i32* %440, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_243)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %447 = load i32* %446, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_246)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 90, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 141, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %0*/
	/*   store i32 162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %0*/
	/*   store i32 55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %0*/
	/*   store i32 52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %0*/
	/*   store i32 126, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 22, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 174, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 166, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd7));
	end
	/* main: %0*/
	/*   store i32 247, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd9));
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd11));
	end
	/* main: %0*/
	/*   store i32 207, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd13));
	end
	/* main: %0*/
	/*   store i32 60, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd15));
	end
	/* main: %2*/
	/*   %7 = load i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_address_b = main_2_6;
	end
	/* main: %2*/
	/*   %13 = load i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_address_b = main_2_12_reg;
	end
	/* main: %2*/
	/*   %19 = load i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_27)) begin
		memory_controller_address_b = main_2_18_reg;
	end
	/* main: %2*/
	/*   %25 = load i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_30)) begin
		memory_controller_address_b = main_2_24_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %33 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %43 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_35)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %53 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_36)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %63 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %73 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %83 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %93 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %103 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_36_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %32, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %57 = load i32* %56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_56_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %67 = load i32* %66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_66_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %62, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %77 = load i32* %76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_76_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %72, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_65)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %115 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_81)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %119 = load i32* %118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		memory_controller_address_b = main_AddRoundKeyexiti_118;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %130 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_91)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %114, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %140 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_95)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %134, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %150 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_99)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %144, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %160 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_103)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %165 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_106)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %170 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		memory_controller_address_b = `TAG_g_statemt_a;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %154, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %175 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %185 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_118)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %201 = load i32* %200, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_130)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_200_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %207 = load i32* %206, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_133)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_206_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_136)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_212_reg;
	end
	/* main: %236*/
	/*   %248 = load i32* %247, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_161)) begin
		memory_controller_address_b = main_236_247_reg;
	end
	/* main: %236*/
	/*   %254 = load i32* %253, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_164)) begin
		memory_controller_address_b = main_236_253_reg;
	end
	/* main: %236*/
	/*   %260 = load i32* %259, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_167)) begin
		memory_controller_address_b = main_236_259_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %268 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %278 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_172)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %288 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_173)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %298 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %308 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %318 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %328 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %338 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %267, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_183)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %287, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_185)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %297, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_187)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %307, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_193)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %.lr.ph10.i*/
	/*   %349 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_205)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %348, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_213)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %.lr.ph10.i*/
	/*   %379 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_214)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %368, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_216)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %.lr.ph10.i*/
	/*   %389 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %378, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_218)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %.lr.ph10.i*/
	/*   %404 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_221)) begin
		memory_controller_address_b = `TAG_g_statemt_a;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %388, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_225)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %.lr.ph10.i*/
	/*   %414 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_227)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %._crit_edge.i*/
	/*   %429 = load i32* %428, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		memory_controller_address_b = main__crit_edgei_428;
	end
	/* main: %._crit_edge.i*/
	/*   %435 = load i32* %434, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_240)) begin
		memory_controller_address_b = main__crit_edgei_434_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %441 = load i32* %440, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_243)) begin
		memory_controller_address_b = main__crit_edgei_440_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %447 = load i32* %446, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_246)) begin
		memory_controller_address_b = main__crit_edgei_446_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 90, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 141, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 126, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 22, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 174, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 166, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 247, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 207, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 60, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   %7 = load i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %2*/
	/*   %13 = load i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %2*/
	/*   %19 = load i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_27)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %2*/
	/*   %25 = load i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_30)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %33 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %43 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_35)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %53 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_36)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %63 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %73 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %83 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %93 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %103 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %32, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %57 = load i32* %56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %67 = load i32* %66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %62, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %77 = load i32* %76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %72, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_65)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %115 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_81)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %119 = load i32* %118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %130 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_91)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %114, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %140 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_95)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %134, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %150 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_99)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %144, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %160 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_103)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %165 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_106)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %170 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %154, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %175 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %185 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_118)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %201 = load i32* %200, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_130)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %207 = load i32* %206, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_133)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_136)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %236*/
	/*   %248 = load i32* %247, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_161)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %236*/
	/*   %254 = load i32* %253, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_164)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %236*/
	/*   %260 = load i32* %259, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_167)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %268 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %278 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_172)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %288 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_173)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %298 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %308 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %318 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %328 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %338 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %267, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_183)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %287, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_185)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %297, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_187)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %307, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_193)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %349 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_205)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %348, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_213)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %379 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_214)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %368, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_216)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %389 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %378, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_218)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %404 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_221)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %388, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_225)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i*/
	/*   %414 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_227)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %429 = load i32* %428, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %435 = load i32* %434, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_240)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %441 = load i32* %440, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_243)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %447 = load i32* %446, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_246)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_b = 32'd67;
	end
	/* main: %0*/
	/*   store i32 168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_b = 32'd168;
	end
	/* main: %0*/
	/*   store i32 90, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_in_b = 32'd90;
	end
	/* main: %0*/
	/*   store i32 141, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_in_b = 32'd141;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_in_b = 32'd49;
	end
	/* main: %0*/
	/*   store i32 162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_in_b = 32'd162;
	end
	/* main: %0*/
	/*   store i32 55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_in_b = 32'd55;
	end
	/* main: %0*/
	/*   store i32 52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_in_b = 32'd52;
	end
	/* main: %0*/
	/*   store i32 126, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_in_b = 32'd126;
	end
	/* main: %0*/
	/*   store i32 22, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_in_b = 32'd22;
	end
	/* main: %0*/
	/*   store i32 174, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_in_b = 32'd174;
	end
	/* main: %0*/
	/*   store i32 166, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_in_b = 32'd166;
	end
	/* main: %0*/
	/*   store i32 247, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_in_b = 32'd247;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_in_b = 32'd136;
	end
	/* main: %0*/
	/*   store i32 207, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_in_b = 32'd207;
	end
	/* main: %0*/
	/*   store i32 60, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_in_b = 32'd60;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %32, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_32_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_52;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %62, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_62;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %72, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_65)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_72_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %114, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_114_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %134, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_134_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %144, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_144_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %154, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_154_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %267, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_183)) begin
		memory_controller_in_b = main_lrph10ipreheader_267_reg;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %287, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_185)) begin
		memory_controller_in_b = main_lrph10ipreheader_287;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %297, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_187)) begin
		memory_controller_in_b = main_lrph10ipreheader_297;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %307, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_193)) begin
		memory_controller_in_b = main_lrph10ipreheader_307_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %348, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_213)) begin
		memory_controller_in_b = main_lrph10i_348_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %368, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_216)) begin
		memory_controller_in_b = main_lrph10i_368_reg;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %378, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_218)) begin
		memory_controller_in_b = main_lrph10i_378;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %388, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_225)) begin
		memory_controller_in_b = main_lrph10i_388_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 90, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 141, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 126, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 22, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 174, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 166, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 247, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 207, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 60, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %2*/
	/*   %7 = load i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %2*/
	/*   %13 = load i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %2*/
	/*   %19 = load i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_27)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %2*/
	/*   %25 = load i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_30)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %33 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_34)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %43 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_35)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %53 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_36)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %63 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %73 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %83 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %93 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %103 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %32, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %57 = load i32* %56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %67 = load i32* %66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %62, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %77 = load i32* %76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %72, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_65)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %115 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_81)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %119 = load i32* %118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %130 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_91)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %114, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_93)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %140 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_95)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %134, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_97)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %150 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_99)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %144, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_101)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %160 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_103)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %165 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_106)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %170 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_109)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %154, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_111)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %175 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_112)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_115)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %185 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_118)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %201 = load i32* %200, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_130)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %207 = load i32* %206, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_133)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_136)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %236*/
	/*   %248 = load i32* %247, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_161)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %236*/
	/*   %254 = load i32* %253, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_164)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %236*/
	/*   %260 = load i32* %259, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__236_167)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %268 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_171)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %278 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_172)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %288 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_173)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %298 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_174)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %308 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_175)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %318 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_176)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %328 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_177)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   %338 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_178)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %267, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_183)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %287, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_185)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %297, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_187)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   store i32 %307, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_193)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   %349 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_205)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %348, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_213)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   %379 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_214)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %368, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_216)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   %389 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_217)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %378, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_218)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   %404 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_221)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   store i32 %388, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_225)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph10.i*/
	/*   %414 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10i_227)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %429 = load i32* %428, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_237)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %435 = load i32* %434, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_240)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %441 = load i32* %440, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_243)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %447 = load i32* %446, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_246)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %475*/
	/*   ret i32 %.lcssa*/
	if ((cur_state == LEGUP_F_main_BB__475_266)) begin
		return_val <= main_decryptexit_lcssa_reg;
		if (start == 1'b0 && ^(main_decryptexit_lcssa_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 

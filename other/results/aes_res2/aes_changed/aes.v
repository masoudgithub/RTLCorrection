//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sun Jun 23 13:57:17 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 10
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @Sbox = internal unnamed_addr constant [16 x [16 x i32]] [[16 x i32] [i32 99, i32 124, i32 119, i32 123, i32 242, i32 107, i32 111, i32 197, i32 48, i32 1, i32 103, i32 43, i32 254, i32 215, i32 171, ...
`define TAG_g_Sbox `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_Sbox_a {`TAG_g_Sbox, 23'd0}
// @key = internal global [32 x i32] zeroinitializer, align 4
`define TAG_g_key `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_key_a {`TAG_g_key, 23'd2048}
// @statemt = internal global [32 x i32] zeroinitializer, align 4
`define TAG_g_statemt `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_statemt_a {`TAG_g_statemt, 23'd1920}
// @word = internal unnamed_addr global [4 x [120 x i32]] zeroinitializer, align 4
`define TAG_g_word `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_word_a {`TAG_g_word, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [7:0] rom_32_address_a;
reg [7:0] rom_32_address_b;
reg rom_32_write_enable_a;
reg rom_32_write_enable_b;
reg [31:0] rom_32_in_a;
reg [31:0] rom_32_in_b;
wire [31:0] rom_32_out_a;
wire [31:0] rom_32_out_b;

// @Sbox = internal unnamed_addr constant [16 x [16 x i32]] [[16 x i32] [i32 99, i32 124, i32 119, i32 123, i32 242, i32 107, i32 111, i32 197, i32 48, i32 1, i32 103, i32 43, i32 254, i32 215, i32 171, ...
rom_dual_port rom_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( rom_32_address_a ),
	.address_b( rom_32_address_b ),
	.q_a( rom_32_out_a ),
	.q_b( rom_32_out_b)
);
defparam rom_32.width_a = 32;
defparam rom_32.width_b = 32;
defparam rom_32.widthad_a = 8;
defparam rom_32.widthad_b = 8;
defparam rom_32.numwords_a = 256;
defparam rom_32.numwords_b = 256;
defparam rom_32.latency = ram_latency;
defparam rom_32.init_file = "rom_32.mif";

reg [9:0] ram_32_address_a;
reg [9:0] ram_32_address_b;
reg ram_32_write_enable_a;
reg ram_32_write_enable_b;
reg [31:0] ram_32_in_a;
reg [31:0] ram_32_in_b;
wire [31:0] ram_32_out_a;
wire [31:0] ram_32_out_b;

// @statemt = internal global [32 x i32] zeroinitializer, align 4
ram_dual_port ram_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_32_address_a ),
	.address_b( ram_32_address_b ),
	.wren_a( ram_32_write_enable_a ),
	.wren_b( ram_32_write_enable_b ),
	.data_a( ram_32_in_a ),
	.data_b( ram_32_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_32_out_a ),
	.q_b( ram_32_out_b)
);
defparam ram_32.width_a = 32;
defparam ram_32.width_b = 32;
defparam ram_32.widthad_a = 10;
defparam ram_32.widthad_b = 10;
defparam ram_32.width_be_a = 1;
defparam ram_32.width_be_b = 1;
defparam ram_32.numwords_a = 544;
defparam ram_32.numwords_b = 544;
defparam ram_32.latency = ram_latency;
defparam ram_32.init_file = "ram_32.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_rom_32_a;
assign select_rom_32_a = (tag_a == 2);
reg [ram_latency:0] select_rom_32_reg_a;
wire [31:0] memory_controller_rom_32_out_a;
assign memory_controller_rom_32_out_a = {32{ select_rom_32_reg_a[ram_latency]}} & rom_32_out_a;

wire select_ram_32_a;
assign select_ram_32_a = (tag_a == 3);
reg [ram_latency:0] select_ram_32_reg_a;
wire [31:0] memory_controller_ram_32_out_a;
assign memory_controller_ram_32_out_a = {32{ select_ram_32_reg_a[ram_latency]}} & ram_32_out_a;

always @(*)
begin
	rom_32_address_a = memory_controller_address_a [8-1+2:2] & {8{select_rom_32_a}};
	rom_32_write_enable_a = memory_controller_write_enable_a & select_rom_32_a;
	rom_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	ram_32_address_a = memory_controller_address_a [10-1+2:2] & {10{select_ram_32_a}};
	ram_32_write_enable_a = memory_controller_write_enable_a & select_ram_32_a;
	ram_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_rom_32_reg_a[ram_latency]}} | {2{select_ram_32_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_rom_32_out_a | memory_controller_ram_32_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
end
always @(*)
begin
select_rom_32_reg_a[0] <= select_rom_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
end

reg [2:0] select_not_struct_b;

wire select_rom_32_b;
assign select_rom_32_b = (tag_b == 2);
reg [ram_latency:0] select_rom_32_reg_b;
wire [31:0] memory_controller_rom_32_out_b;
assign memory_controller_rom_32_out_b = {32{ select_rom_32_reg_b[ram_latency]}} & rom_32_out_b;

wire select_ram_32_b;
assign select_ram_32_b = (tag_b == 3);
reg [ram_latency:0] select_ram_32_reg_b;
wire [31:0] memory_controller_ram_32_out_b;
assign memory_controller_ram_32_out_b = {32{ select_ram_32_reg_b[ram_latency]}} & ram_32_out_b;

always @(*)
begin
	rom_32_address_b = memory_controller_address_b [8-1+2:2] & {8{select_rom_32_b}};
	rom_32_write_enable_b = memory_controller_write_enable_b & select_rom_32_b;
	rom_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	ram_32_address_b = memory_controller_address_b [10-1+2:2] & {10{select_ram_32_b}};
	ram_32_write_enable_b = memory_controller_write_enable_b & select_ram_32_b;
	ram_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_rom_32_reg_b[ram_latency]}} | {2{select_ram_32_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_rom_32_out_b | memory_controller_ram_32_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
end
always @(*)
begin
select_rom_32_reg_b[0] <= select_rom_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_main_BB__0_1 = 8'd1;
parameter [7:0] LEGUP_F_main_BB__0_2 = 8'd2;
parameter [7:0] LEGUP_F_main_BB__0_3 = 8'd3;
parameter [7:0] LEGUP_F_main_BB__0_4 = 8'd4;
parameter [7:0] LEGUP_F_main_BB__0_5 = 8'd5;
parameter [7:0] LEGUP_F_main_BB__0_6 = 8'd6;
parameter [7:0] LEGUP_F_main_BB__0_7 = 8'd7;
parameter [7:0] LEGUP_F_main_BB__0_8 = 8'd8;
parameter [7:0] LEGUP_F_main_BB__0_9 = 8'd9;
parameter [7:0] LEGUP_F_main_BB__0_10 = 8'd10;
parameter [7:0] LEGUP_F_main_BB__0_11 = 8'd11;
parameter [7:0] LEGUP_F_main_BB__0_12 = 8'd12;
parameter [7:0] LEGUP_F_main_BB__0_13 = 8'd13;
parameter [7:0] LEGUP_F_main_BB__0_14 = 8'd14;
parameter [7:0] LEGUP_F_main_BB__0_15 = 8'd15;
parameter [7:0] LEGUP_F_main_BB__0_16 = 8'd16;
parameter [7:0] LEGUP_F_main_BB__0_17 = 8'd17;
parameter [7:0] LEGUP_F_main_BB__0_19 = 8'd19;
parameter [7:0] LEGUP_F_main_BB__2_20 = 8'd20;
parameter [7:0] LEGUP_F_main_BB__2_21 = 8'd21;
parameter [7:0] LEGUP_F_main_BB__2_22 = 8'd22;
parameter [7:0] LEGUP_F_main_BB__2_23 = 8'd23;
parameter [7:0] LEGUP_F_main_BB__2_24 = 8'd24;
parameter [7:0] LEGUP_F_main_BB__2_25 = 8'd25;
parameter [7:0] LEGUP_F_main_BB__2_26 = 8'd26;
parameter [7:0] LEGUP_F_main_BB_preheaderiipreheader_27 = 8'd27;
parameter [7:0] LEGUP_F_main_BB_preheaderii_28 = 8'd28;
parameter [7:0] LEGUP_F_main_BB_preheaderii_29 = 8'd29;
parameter [7:0] LEGUP_F_main_BB_preheaderii_30 = 8'd30;
parameter [7:0] LEGUP_F_main_BB_preheaderii_31 = 8'd31;
parameter [7:0] LEGUP_F_main_BB_preheaderii_32 = 8'd32;
parameter [7:0] LEGUP_F_main_BB_preheaderii_33 = 8'd33;
parameter [7:0] LEGUP_F_main_BB_preheaderii_34 = 8'd34;
parameter [7:0] LEGUP_F_main_BB_preheaderii_35 = 8'd35;
parameter [7:0] LEGUP_F_main_BB_preheaderii_36 = 8'd36;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_37 = 8'd37;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_38 = 8'd38;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_39 = 8'd39;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_40 = 8'd40;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_41 = 8'd41;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_42 = 8'd42;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_43 = 8'd43;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_44 = 8'd44;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_45 = 8'd45;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_46 = 8'd46;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_47 = 8'd47;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_48 = 8'd48;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_49 = 8'd49;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_50 = 8'd50;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_51 = 8'd51;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_52 = 8'd52;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_53 = 8'd53;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_54 = 8'd54;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_55 = 8'd55;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_56 = 8'd56;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_57 = 8'd57;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_58 = 8'd58;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_59 = 8'd59;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_60 = 8'd60;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_61 = 8'd61;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_62 = 8'd62;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_64 = 8'd64;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_65 = 8'd65;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_66 = 8'd66;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_67 = 8'd67;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_68 = 8'd68;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_69 = 8'd69;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_70 = 8'd70;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_71 = 8'd71;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_72 = 8'd72;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_73 = 8'd73;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_74 = 8'd74;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_75 = 8'd75;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_76 = 8'd76;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_77 = 8'd77;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_78 = 8'd78;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_79 = 8'd79;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_80 = 8'd80;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_81 = 8'd81;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_82 = 8'd82;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_83 = 8'd83;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_84 = 8'd84;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_85 = 8'd85;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_86 = 8'd86;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_87 = 8'd87;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexiti_88 = 8'd88;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgeipreheader_89 = 8'd89;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_90 = 8'd90;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_91 = 8'd91;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_92 = 8'd92;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_93 = 8'd93;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_94 = 8'd94;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_95 = 8'd95;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_96 = 8'd96;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_97 = 8'd97;
parameter [7:0] LEGUP_F_main_BB_preheaderi4ipreheader_98 = 8'd98;
parameter [7:0] LEGUP_F_main_BB_preheaderi4i_99 = 8'd99;
parameter [7:0] LEGUP_F_main_BB_preheaderi4i_100 = 8'd100;
parameter [7:0] LEGUP_F_main_BB_preheaderi4i_101 = 8'd101;
parameter [7:0] LEGUP_F_main_BB_preheaderi4i_102 = 8'd102;
parameter [7:0] LEGUP_F_main_BB_preheaderi4i_103 = 8'd103;
parameter [7:0] LEGUP_F_main_BB_preheaderi4i_104 = 8'd104;
parameter [7:0] LEGUP_F_main_BB_preheaderi4i_105 = 8'd105;
parameter [7:0] LEGUP_F_main_BB_preheaderi4i_106 = 8'd106;
parameter [7:0] LEGUP_F_main_BB_preheaderi4i_107 = 8'd107;
parameter [7:0] LEGUP_F_main_BB_preheaderi4i_108 = 8'd108;
parameter [7:0] LEGUP_F_main_BB_lrphipreheader_109 = 8'd109;
parameter [7:0] LEGUP_F_main_BB_lrphi_110 = 8'd110;
parameter [7:0] LEGUP_F_main_BB_lrphi_111 = 8'd111;
parameter [7:0] LEGUP_F_main_BB_lrphi_112 = 8'd112;
parameter [7:0] LEGUP_F_main_BB__237_113 = 8'd113;
parameter [7:0] LEGUP_F_main_BB__237_114 = 8'd114;
parameter [7:0] LEGUP_F_main_BB__237_115 = 8'd115;
parameter [7:0] LEGUP_F_main_BB__239_116 = 8'd116;
parameter [7:0] LEGUP_F_main_BB_preheaderipreheader_117 = 8'd117;
parameter [7:0] LEGUP_F_main_BB_preheaderi_118 = 8'd118;
parameter [7:0] LEGUP_F_main_BB_preheaderi_119 = 8'd119;
parameter [7:0] LEGUP_F_main_BB_preheaderi_120 = 8'd120;
parameter [7:0] LEGUP_F_main_BB_encryptexit_121 = 8'd121;
parameter [7:0] LEGUP_F_main_BB_encryptexit_123 = 8'd123;
parameter [7:0] LEGUP_F_main_BB__251_124 = 8'd124;
parameter [7:0] LEGUP_F_main_BB__251_125 = 8'd125;
parameter [7:0] LEGUP_F_main_BB__251_126 = 8'd126;
parameter [7:0] LEGUP_F_main_BB__251_127 = 8'd127;
parameter [7:0] LEGUP_F_main_BB__251_128 = 8'd128;
parameter [7:0] LEGUP_F_main_BB__251_129 = 8'd129;
parameter [7:0] LEGUP_F_main_BB__251_130 = 8'd130;
parameter [7:0] LEGUP_F_main_BB__251_131 = 8'd131;
parameter [7:0] LEGUP_F_main_BB_preheaderii4preheader_132 = 8'd132;
parameter [7:0] LEGUP_F_main_BB_preheaderii4_133 = 8'd133;
parameter [7:0] LEGUP_F_main_BB_preheaderii4_134 = 8'd134;
parameter [7:0] LEGUP_F_main_BB_preheaderii4_135 = 8'd135;
parameter [7:0] LEGUP_F_main_BB_preheaderii4_136 = 8'd136;
parameter [7:0] LEGUP_F_main_BB_preheaderii4_137 = 8'd137;
parameter [7:0] LEGUP_F_main_BB_preheaderii4_138 = 8'd138;
parameter [7:0] LEGUP_F_main_BB_preheaderii4_139 = 8'd139;
parameter [7:0] LEGUP_F_main_BB_preheaderii4_140 = 8'd140;
parameter [7:0] LEGUP_F_main_BB_preheaderii4_141 = 8'd141;
parameter [7:0] LEGUP_F_main_BB_preheaderii4_142 = 8'd142;
parameter [7:0] LEGUP_F_main_BB_lrph12ipreheader_143 = 8'd143;
parameter [7:0] LEGUP_F_main_BB_lrph12ipreheader_144 = 8'd144;
parameter [7:0] LEGUP_F_main_BB_lrph12ipreheader_145 = 8'd145;
parameter [7:0] LEGUP_F_main_BB_lrph12ipreheader_146 = 8'd146;
parameter [7:0] LEGUP_F_main_BB_lrph12ipreheader_147 = 8'd147;
parameter [7:0] LEGUP_F_main_BB_lrph12ipreheader_148 = 8'd148;
parameter [7:0] LEGUP_F_main_BB_lrph12ipreheader_149 = 8'd149;
parameter [7:0] LEGUP_F_main_BB_lrph12ipreheader_150 = 8'd150;
parameter [7:0] LEGUP_F_main_BB_lrph12ipreheader_151 = 8'd151;
parameter [7:0] LEGUP_F_main_BB_lrph12ipreheader_152 = 8'd152;
parameter [7:0] LEGUP_F_main_BB_lrph12ipreheader_153 = 8'd153;
parameter [7:0] LEGUP_F_main_BB_lrph12ipreheader_154 = 8'd154;
parameter [7:0] LEGUP_F_main_BB_lrph12ipreheader_155 = 8'd155;
parameter [7:0] LEGUP_F_main_BB_lrph12ipreheader_156 = 8'd156;
parameter [7:0] LEGUP_F_main_BB_lrph12ipreheader_157 = 8'd157;
parameter [7:0] LEGUP_F_main_BB_lrph12ipreheader_158 = 8'd158;
parameter [7:0] LEGUP_F_main_BB_lrph12ipreheader_159 = 8'd159;
parameter [7:0] LEGUP_F_main_BB_lrph12i_160 = 8'd160;
parameter [7:0] LEGUP_F_main_BB_lrph12i_162 = 8'd162;
parameter [7:0] LEGUP_F_main_BB_lrph12i_163 = 8'd163;
parameter [7:0] LEGUP_F_main_BB_lrph12i_164 = 8'd164;
parameter [7:0] LEGUP_F_main_BB_lrph12i_165 = 8'd165;
parameter [7:0] LEGUP_F_main_BB_lrph12i_166 = 8'd166;
parameter [7:0] LEGUP_F_main_BB_lrph12i_167 = 8'd167;
parameter [7:0] LEGUP_F_main_BB_lrph12i_168 = 8'd168;
parameter [7:0] LEGUP_F_main_BB_lrph12i_169 = 8'd169;
parameter [7:0] LEGUP_F_main_BB_lrph12i_170 = 8'd170;
parameter [7:0] LEGUP_F_main_BB_lrph12i_171 = 8'd171;
parameter [7:0] LEGUP_F_main_BB_lrph12i_172 = 8'd172;
parameter [7:0] LEGUP_F_main_BB_lrph12i_173 = 8'd173;
parameter [7:0] LEGUP_F_main_BB_lrph12i_174 = 8'd174;
parameter [7:0] LEGUP_F_main_BB_lrph12i_175 = 8'd175;
parameter [7:0] LEGUP_F_main_BB_lrph12i_176 = 8'd176;
parameter [7:0] LEGUP_F_main_BB_lrph12i_177 = 8'd177;
parameter [7:0] LEGUP_F_main_BB_lrph12i_178 = 8'd178;
parameter [7:0] LEGUP_F_main_BB__crit_edgeipreheader_179 = 8'd179;
parameter [7:0] LEGUP_F_main_BB__crit_edgei_180 = 8'd180;
parameter [7:0] LEGUP_F_main_BB__crit_edgei_181 = 8'd181;
parameter [7:0] LEGUP_F_main_BB__crit_edgei_182 = 8'd182;
parameter [7:0] LEGUP_F_main_BB__crit_edgei_183 = 8'd183;
parameter [7:0] LEGUP_F_main_BB__crit_edgei_184 = 8'd184;
parameter [7:0] LEGUP_F_main_BB__crit_edgei_185 = 8'd185;
parameter [7:0] LEGUP_F_main_BB__crit_edgei_186 = 8'd186;
parameter [7:0] LEGUP_F_main_BB_preheaderi4i14preheader_187 = 8'd187;
parameter [7:0] LEGUP_F_main_BB_preheaderi4i14_188 = 8'd188;
parameter [7:0] LEGUP_F_main_BB_preheaderi4i14_189 = 8'd189;
parameter [7:0] LEGUP_F_main_BB_preheaderi4i14_190 = 8'd190;
parameter [7:0] LEGUP_F_main_BB_preheaderi4i14_191 = 8'd191;
parameter [7:0] LEGUP_F_main_BB_preheaderi4i14_192 = 8'd192;
parameter [7:0] LEGUP_F_main_BB_preheaderi4i14_193 = 8'd193;
parameter [7:0] LEGUP_F_main_BB_preheaderi4i14_194 = 8'd194;
parameter [7:0] LEGUP_F_main_BB_preheaderi4i14_195 = 8'd195;
parameter [7:0] LEGUP_F_main_BB_preheaderi4i14_196 = 8'd196;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexit5i15_197 = 8'd197;
parameter [7:0] LEGUP_F_main_BB_lrphi20_198 = 8'd198;
parameter [7:0] LEGUP_F_main_BB_lrphi20_199 = 8'd199;
parameter [7:0] LEGUP_F_main_BB_lrphi20_200 = 8'd200;
parameter [7:0] LEGUP_F_main_BB__486_201 = 8'd201;
parameter [7:0] LEGUP_F_main_BB__486_202 = 8'd202;
parameter [7:0] LEGUP_F_main_BB__486_203 = 8'd203;
parameter [7:0] LEGUP_F_main_BB__488_204 = 8'd204;
parameter [7:0] LEGUP_F_main_BB_preheaderloopexiti17preheader_205 = 8'd205;
parameter [7:0] LEGUP_F_main_BB_preheaderloopexiti17_206 = 8'd206;
parameter [7:0] LEGUP_F_main_BB_preheaderloopexiti17_207 = 8'd207;
parameter [7:0] LEGUP_F_main_BB_preheaderloopexiti17_208 = 8'd208;
parameter [7:0] LEGUP_F_main_BB_decryptexit_209 = 8'd209;
parameter [7:0] LEGUP_F_main_BB__501_210 = 8'd210;
parameter [7:0] LEGUP_F_main_BB__503_211 = 8'd211;
parameter [7:0] LEGUP_F_main_BB__505_212 = 8'd212;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [7:0] LEGUP_function_call_18 = 8'd18;
parameter [7:0] LEGUP_function_call_63 = 8'd63;
parameter [7:0] LEGUP_function_call_122 = 8'd122;
parameter [7:0] LEGUP_function_call_161 = 8'd161;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [31:0] main_2_j02ii;
reg [31:0] main_2_j02ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_scevgep77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_scevgep77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_scevgep78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_scevgep78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_scevgep79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_scevgep79_reg;
reg [31:0] main_2_3;
reg [31:0] main_2_3_reg;
reg [31:0] main_2_4;
reg [31:0] main_2_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_scevgep80;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_scevgep80_reg;
reg [31:0] main_2_5;
reg [31:0] main_2_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_scevgep81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_scevgep81_reg;
reg [31:0] main_2_6;
reg [31:0] main_2_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_scevgep82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_scevgep82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_scevgep83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_scevgep83_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_scevgep84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_scevgep84_reg;
reg [31:0] main_2_7;
reg [31:0] main_2_7_reg;
reg [31:0] main_2_8;
reg [31:0] main_2_8_reg;
reg [31:0] main_2_9;
reg [31:0] main_2_9_reg;
reg [31:0] main_2_10;
reg [31:0] main_2_10_reg;
reg [31:0] main_2_11;
reg [31:0] main_2_11_reg;
reg [31:0] main_2_12;
reg [31:0] main_2_12_reg;
reg [31:0] main_2_13;
reg [31:0] main_2_13_reg;
reg [31:0] main_2_14;
reg [31:0] main_2_14_reg;
reg [31:0] main_2_15;
reg [31:0] main_2_15_reg;
reg [31:0] main_2_16;
reg [31:0] main_2_16_reg;
reg [31:0] main_2_17;
reg [31:0] main_2_17_reg;
reg [31:0] main_2_18;
reg [31:0] main_2_18_reg;
reg [31:0] main_2_19;
reg [31:0] main_2_19_reg;
reg  main_2_exitcond76;
reg  main_2_exitcond76_reg;
reg [31:0] main_preheaderii_j11ii;
reg [31:0] main_preheaderii_j11ii_reg;
reg [31:0] main_preheaderii_20;
reg [31:0] main_preheaderii_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep69_reg;
reg [31:0] main_preheaderii_21;
reg [31:0] main_preheaderii_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep70_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep71_reg;
reg [31:0] main_preheaderii_22;
reg [31:0] main_preheaderii_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep73_reg;
reg [31:0] main_preheaderii_23;
reg [31:0] main_preheaderii_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep75_reg;
reg [31:0] main_preheaderii_24;
reg [31:0] main_preheaderii_24_reg;
reg [31:0] main_preheaderii_25;
reg [31:0] main_preheaderii_25_reg;
reg [31:0] main_preheaderii_26;
reg [31:0] main_preheaderii_26_reg;
reg [31:0] main_preheaderii_27;
reg [31:0] main_preheaderii_27_reg;
reg [31:0] main_preheaderii_28;
reg [31:0] main_preheaderii_28_reg;
reg [31:0] main_preheaderii_29;
reg [31:0] main_preheaderii_29_reg;
reg [31:0] main_preheaderii_30;
reg [31:0] main_preheaderii_30_reg;
reg [31:0] main_preheaderii_31;
reg [31:0] main_preheaderii_31_reg;
reg [31:0] main_preheaderii_32;
reg [31:0] main_preheaderii_32_reg;
reg [31:0] main_preheaderii_33;
reg [31:0] main_preheaderii_33_reg;
reg [31:0] main_preheaderii_34;
reg [31:0] main_preheaderii_34_reg;
reg [31:0] main_preheaderii_35;
reg [31:0] main_preheaderii_35_reg;
reg [31:0] main_preheaderii_36;
reg [31:0] main_preheaderii_36_reg;
reg  main_preheaderii_exitcond67;
reg  main_preheaderii_exitcond67_reg;
reg [31:0] main_AddRoundKeyexitipreheader_37;
reg [31:0] main_AddRoundKeyexitipreheader_37_reg;
reg [31:0] main_AddRoundKeyexitipreheader_38;
reg [31:0] main_AddRoundKeyexitipreheader_38_reg;
reg [31:0] main_AddRoundKeyexitipreheader_39;
reg [31:0] main_AddRoundKeyexitipreheader_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_40_reg;
reg [31:0] main_AddRoundKeyexitipreheader_41;
reg [31:0] main_AddRoundKeyexitipreheader_41_reg;
reg [31:0] main_AddRoundKeyexitipreheader_42;
reg [31:0] main_AddRoundKeyexitipreheader_42_reg;
reg [31:0] main_AddRoundKeyexitipreheader_43;
reg [31:0] main_AddRoundKeyexitipreheader_43_reg;
reg [31:0] main_AddRoundKeyexitipreheader_44;
reg [31:0] main_AddRoundKeyexitipreheader_44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_45_reg;
reg [31:0] main_AddRoundKeyexitipreheader_46;
reg [31:0] main_AddRoundKeyexitipreheader_46_reg;
reg [31:0] main_AddRoundKeyexitipreheader_47;
reg [31:0] main_AddRoundKeyexitipreheader_47_reg;
reg [31:0] main_AddRoundKeyexitipreheader_48;
reg [31:0] main_AddRoundKeyexitipreheader_48_reg;
reg [31:0] main_AddRoundKeyexitipreheader_49;
reg [31:0] main_AddRoundKeyexitipreheader_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_50_reg;
reg [31:0] main_AddRoundKeyexitipreheader_51;
reg [31:0] main_AddRoundKeyexitipreheader_51_reg;
reg [31:0] main_AddRoundKeyexitipreheader_52;
reg [31:0] main_AddRoundKeyexitipreheader_52_reg;
reg [31:0] main_AddRoundKeyexitipreheader_53;
reg [31:0] main_AddRoundKeyexitipreheader_53_reg;
reg [31:0] main_AddRoundKeyexitipreheader_54;
reg [31:0] main_AddRoundKeyexitipreheader_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_55_reg;
reg [31:0] main_AddRoundKeyexitipreheader_56;
reg [31:0] main_AddRoundKeyexitipreheader_56_reg;
reg [31:0] main_AddRoundKeyexitipreheader_57;
reg [31:0] main_AddRoundKeyexitipreheader_57_reg;
reg [31:0] main_AddRoundKeyexitipreheader_58;
reg [31:0] main_AddRoundKeyexitipreheader_58_reg;
reg [31:0] main_AddRoundKeyexitipreheader_59;
reg [31:0] main_AddRoundKeyexitipreheader_59_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_60_reg;
reg [31:0] main_AddRoundKeyexitipreheader_61;
reg [31:0] main_AddRoundKeyexitipreheader_61_reg;
reg [31:0] main_AddRoundKeyexitipreheader_62;
reg [31:0] main_AddRoundKeyexitipreheader_62_reg;
reg [31:0] main_AddRoundKeyexitipreheader_63;
reg [31:0] main_AddRoundKeyexitipreheader_63_reg;
reg [31:0] main_AddRoundKeyexitipreheader_64;
reg [31:0] main_AddRoundKeyexitipreheader_64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_65_reg;
reg [31:0] main_AddRoundKeyexitipreheader_66;
reg [31:0] main_AddRoundKeyexitipreheader_66_reg;
reg [31:0] main_AddRoundKeyexitipreheader_67;
reg [31:0] main_AddRoundKeyexitipreheader_67_reg;
reg [31:0] main_AddRoundKeyexitipreheader_68;
reg [31:0] main_AddRoundKeyexitipreheader_68_reg;
reg [31:0] main_AddRoundKeyexitipreheader_69;
reg [31:0] main_AddRoundKeyexitipreheader_69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_70_reg;
reg [31:0] main_AddRoundKeyexitipreheader_71;
reg [31:0] main_AddRoundKeyexitipreheader_71_reg;
reg [31:0] main_AddRoundKeyexitipreheader_72;
reg [31:0] main_AddRoundKeyexitipreheader_72_reg;
reg [31:0] main_AddRoundKeyexitipreheader_73;
reg [31:0] main_AddRoundKeyexitipreheader_73_reg;
reg [31:0] main_AddRoundKeyexitipreheader_74;
reg [31:0] main_AddRoundKeyexitipreheader_74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_75_reg;
reg [31:0] main_AddRoundKeyexitipreheader_76;
reg [31:0] main_AddRoundKeyexitipreheader_76_reg;
reg [31:0] main_AddRoundKeyexitipreheader_77;
reg [31:0] main_AddRoundKeyexitipreheader_77_reg;
reg [31:0] main_AddRoundKeyexitipreheader_78;
reg [31:0] main_AddRoundKeyexitipreheader_78_reg;
reg [31:0] main_AddRoundKeyexitipreheader_79;
reg [31:0] main_AddRoundKeyexitipreheader_79_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_80;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_80_reg;
reg [31:0] main_AddRoundKeyexitipreheader_81;
reg [31:0] main_AddRoundKeyexitipreheader_81_reg;
reg [31:0] main_AddRoundKeyexitipreheader_82;
reg [31:0] main_AddRoundKeyexitipreheader_82_reg;
reg [31:0] main_AddRoundKeyexitipreheader_83;
reg [31:0] main_AddRoundKeyexitipreheader_83_reg;
reg [31:0] main_AddRoundKeyexitipreheader_84;
reg [31:0] main_AddRoundKeyexitipreheader_84_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_85_reg;
reg [31:0] main_AddRoundKeyexitipreheader_86;
reg [31:0] main_AddRoundKeyexitipreheader_86_reg;
reg [31:0] main_AddRoundKeyexitipreheader_87;
reg [31:0] main_AddRoundKeyexitipreheader_87_reg;
reg [31:0] main_AddRoundKeyexitipreheader_88;
reg [31:0] main_AddRoundKeyexitipreheader_88_reg;
reg [31:0] main_AddRoundKeyexitipreheader_89;
reg [31:0] main_AddRoundKeyexitipreheader_89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_90;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_90_reg;
reg [31:0] main_AddRoundKeyexitipreheader_91;
reg [31:0] main_AddRoundKeyexitipreheader_91_reg;
reg [31:0] main_AddRoundKeyexitipreheader_92;
reg [31:0] main_AddRoundKeyexitipreheader_92_reg;
reg [31:0] main_AddRoundKeyexitipreheader_93;
reg [31:0] main_AddRoundKeyexitipreheader_93_reg;
reg [31:0] main_AddRoundKeyexitipreheader_94;
reg [31:0] main_AddRoundKeyexitipreheader_94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_95_reg;
reg [31:0] main_AddRoundKeyexitipreheader_96;
reg [31:0] main_AddRoundKeyexitipreheader_96_reg;
reg [31:0] main_AddRoundKeyexitipreheader_97;
reg [31:0] main_AddRoundKeyexitipreheader_97_reg;
reg [31:0] main_AddRoundKeyexitipreheader_98;
reg [31:0] main_AddRoundKeyexitipreheader_98_reg;
reg [31:0] main_AddRoundKeyexitipreheader_99;
reg [31:0] main_AddRoundKeyexitipreheader_99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_100_reg;
reg [31:0] main_AddRoundKeyexitipreheader_101;
reg [31:0] main_AddRoundKeyexitipreheader_101_reg;
reg [31:0] main_AddRoundKeyexitipreheader_102;
reg [31:0] main_AddRoundKeyexitipreheader_102_reg;
reg [31:0] main_AddRoundKeyexitipreheader_103;
reg [31:0] main_AddRoundKeyexitipreheader_103_reg;
reg [31:0] main_AddRoundKeyexitipreheader_104;
reg [31:0] main_AddRoundKeyexitipreheader_104_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_105;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_105_reg;
reg [31:0] main_AddRoundKeyexitipreheader_106;
reg [31:0] main_AddRoundKeyexitipreheader_106_reg;
reg [31:0] main_AddRoundKeyexitipreheader_107;
reg [31:0] main_AddRoundKeyexitipreheader_107_reg;
reg [31:0] main_AddRoundKeyexitipreheader_108;
reg [31:0] main_AddRoundKeyexitipreheader_108_reg;
reg [31:0] main_AddRoundKeyexitipreheader_109;
reg [31:0] main_AddRoundKeyexitipreheader_109_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_110;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_110_reg;
reg [31:0] main_AddRoundKeyexitipreheader_111;
reg [31:0] main_AddRoundKeyexitipreheader_111_reg;
reg [31:0] main_AddRoundKeyexitipreheader_112;
reg [31:0] main_AddRoundKeyexitipreheader_112_reg;
reg [31:0] main_AddRoundKeyexitipreheader_113;
reg [31:0] main_AddRoundKeyexitipreheader_113_reg;
reg [31:0] main_AddRoundKeyexitipreheader_114;
reg [31:0] main_AddRoundKeyexitipreheader_114_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_115;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexitipreheader_115_reg;
reg [31:0] main_AddRoundKeyexitipreheader_116;
reg [31:0] main_AddRoundKeyexitipreheader_116_reg;
reg [31:0] main_AddRoundKeyexiti_indvar64;
reg [31:0] main_AddRoundKeyexiti_indvar64_reg;
reg [31:0] main_AddRoundKeyexiti_i010i;
reg [31:0] main_AddRoundKeyexiti_i010i_reg;
reg [31:0] main_AddRoundKeyexiti_118;
reg [31:0] main_AddRoundKeyexiti_118_reg;
reg [31:0] main_AddRoundKeyexiti_119;
reg [31:0] main_AddRoundKeyexiti_119_reg;
reg [31:0] main_AddRoundKeyexiti_120;
reg [31:0] main_AddRoundKeyexiti_120_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_121;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_121_reg;
reg [31:0] main_AddRoundKeyexiti_122;
reg [31:0] main_AddRoundKeyexiti_122_reg;
reg [31:0] main_AddRoundKeyexiti_123;
reg [31:0] main_AddRoundKeyexiti_123_reg;
reg [31:0] main_AddRoundKeyexiti_124;
reg [31:0] main_AddRoundKeyexiti_124_reg;
reg [31:0] main_AddRoundKeyexiti_125;
reg [31:0] main_AddRoundKeyexiti_125_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_126;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_126_reg;
reg [31:0] main_AddRoundKeyexiti_127;
reg [31:0] main_AddRoundKeyexiti_127_reg;
reg [31:0] main_AddRoundKeyexiti_128;
reg [31:0] main_AddRoundKeyexiti_128_reg;
reg [31:0] main_AddRoundKeyexiti_129;
reg [31:0] main_AddRoundKeyexiti_129_reg;
reg [31:0] main_AddRoundKeyexiti_130;
reg [31:0] main_AddRoundKeyexiti_130_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_131;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_131_reg;
reg [31:0] main_AddRoundKeyexiti_132;
reg [31:0] main_AddRoundKeyexiti_132_reg;
reg [31:0] main_AddRoundKeyexiti_133;
reg [31:0] main_AddRoundKeyexiti_133_reg;
reg [31:0] main_AddRoundKeyexiti_134;
reg [31:0] main_AddRoundKeyexiti_134_reg;
reg [31:0] main_AddRoundKeyexiti_135;
reg [31:0] main_AddRoundKeyexiti_135_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_136;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_136_reg;
reg [31:0] main_AddRoundKeyexiti_137;
reg [31:0] main_AddRoundKeyexiti_137_reg;
reg [31:0] main_AddRoundKeyexiti_138;
reg [31:0] main_AddRoundKeyexiti_138_reg;
reg [31:0] main_AddRoundKeyexiti_139;
reg [31:0] main_AddRoundKeyexiti_139_reg;
reg [31:0] main_AddRoundKeyexiti_140;
reg [31:0] main_AddRoundKeyexiti_140_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_141;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_141_reg;
reg [31:0] main_AddRoundKeyexiti_142;
reg [31:0] main_AddRoundKeyexiti_142_reg;
reg [31:0] main_AddRoundKeyexiti_143;
reg [31:0] main_AddRoundKeyexiti_143_reg;
reg [31:0] main_AddRoundKeyexiti_144;
reg [31:0] main_AddRoundKeyexiti_144_reg;
reg [31:0] main_AddRoundKeyexiti_145;
reg [31:0] main_AddRoundKeyexiti_145_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_146;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_146_reg;
reg [31:0] main_AddRoundKeyexiti_147;
reg [31:0] main_AddRoundKeyexiti_147_reg;
reg [31:0] main_AddRoundKeyexiti_148;
reg [31:0] main_AddRoundKeyexiti_148_reg;
reg [31:0] main_AddRoundKeyexiti_149;
reg [31:0] main_AddRoundKeyexiti_149_reg;
reg [31:0] main_AddRoundKeyexiti_150;
reg [31:0] main_AddRoundKeyexiti_150_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_151;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_151_reg;
reg [31:0] main_AddRoundKeyexiti_152;
reg [31:0] main_AddRoundKeyexiti_152_reg;
reg [31:0] main_AddRoundKeyexiti_153;
reg [31:0] main_AddRoundKeyexiti_153_reg;
reg [31:0] main_AddRoundKeyexiti_154;
reg [31:0] main_AddRoundKeyexiti_154_reg;
reg [31:0] main_AddRoundKeyexiti_155;
reg [31:0] main_AddRoundKeyexiti_155_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_156;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_156_reg;
reg [31:0] main_AddRoundKeyexiti_157;
reg [31:0] main_AddRoundKeyexiti_157_reg;
reg [31:0] main_AddRoundKeyexiti_158;
reg [31:0] main_AddRoundKeyexiti_158_reg;
reg [31:0] main_AddRoundKeyexiti_159;
reg [31:0] main_AddRoundKeyexiti_159_reg;
reg [31:0] main_AddRoundKeyexiti_160;
reg [31:0] main_AddRoundKeyexiti_160_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_161;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_161_reg;
reg [31:0] main_AddRoundKeyexiti_162;
reg [31:0] main_AddRoundKeyexiti_162_reg;
reg [31:0] main_AddRoundKeyexiti_163;
reg [31:0] main_AddRoundKeyexiti_163_reg;
reg [31:0] main_AddRoundKeyexiti_164;
reg [31:0] main_AddRoundKeyexiti_164_reg;
reg [31:0] main_AddRoundKeyexiti_165;
reg [31:0] main_AddRoundKeyexiti_165_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_166;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_166_reg;
reg [31:0] main_AddRoundKeyexiti_167;
reg [31:0] main_AddRoundKeyexiti_167_reg;
reg [31:0] main_AddRoundKeyexiti_168;
reg [31:0] main_AddRoundKeyexiti_168_reg;
reg [31:0] main_AddRoundKeyexiti_169;
reg [31:0] main_AddRoundKeyexiti_169_reg;
reg [31:0] main_AddRoundKeyexiti_170;
reg [31:0] main_AddRoundKeyexiti_170_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_171;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_171_reg;
reg [31:0] main_AddRoundKeyexiti_172;
reg [31:0] main_AddRoundKeyexiti_172_reg;
reg [31:0] main_AddRoundKeyexiti_173;
reg [31:0] main_AddRoundKeyexiti_173_reg;
reg [31:0] main_AddRoundKeyexiti_174;
reg [31:0] main_AddRoundKeyexiti_174_reg;
reg [31:0] main_AddRoundKeyexiti_175;
reg [31:0] main_AddRoundKeyexiti_175_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_176;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_176_reg;
reg [31:0] main_AddRoundKeyexiti_177;
reg [31:0] main_AddRoundKeyexiti_177_reg;
reg [31:0] main_AddRoundKeyexiti_178;
reg [31:0] main_AddRoundKeyexiti_178_reg;
reg [31:0] main_AddRoundKeyexiti_179;
reg [31:0] main_AddRoundKeyexiti_179_reg;
reg [31:0] main_AddRoundKeyexiti_180;
reg [31:0] main_AddRoundKeyexiti_180_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_181;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_181_reg;
reg [31:0] main_AddRoundKeyexiti_182;
reg [31:0] main_AddRoundKeyexiti_182_reg;
reg [31:0] main_AddRoundKeyexiti_183;
reg [31:0] main_AddRoundKeyexiti_183_reg;
reg [31:0] main_AddRoundKeyexiti_184;
reg [31:0] main_AddRoundKeyexiti_184_reg;
reg [31:0] main_AddRoundKeyexiti_185;
reg [31:0] main_AddRoundKeyexiti_185_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_186;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_186_reg;
reg [31:0] main_AddRoundKeyexiti_187;
reg [31:0] main_AddRoundKeyexiti_187_reg;
reg [31:0] main_AddRoundKeyexiti_188;
reg [31:0] main_AddRoundKeyexiti_188_reg;
reg [31:0] main_AddRoundKeyexiti_189;
reg [31:0] main_AddRoundKeyexiti_189_reg;
reg [31:0] main_AddRoundKeyexiti_190;
reg [31:0] main_AddRoundKeyexiti_190_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_191;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_191_reg;
reg [31:0] main_AddRoundKeyexiti_192;
reg [31:0] main_AddRoundKeyexiti_192_reg;
reg [31:0] main_AddRoundKeyexiti_193;
reg [31:0] main_AddRoundKeyexiti_193_reg;
reg [31:0] main_AddRoundKeyexiti_194;
reg [31:0] main_AddRoundKeyexiti_194_reg;
reg [31:0] main_AddRoundKeyexiti_195;
reg [31:0] main_AddRoundKeyexiti_195_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_196;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexiti_196_reg;
reg [31:0] main_AddRoundKeyexiti_197;
reg [31:0] main_AddRoundKeyexiti_197_reg;
reg [31:0] main_AddRoundKeyexiti_indvarnext65;
reg [31:0] main_AddRoundKeyexiti_indvarnext65_reg;
reg  main_AddRoundKeyexiti_exitcond66;
reg  main_AddRoundKeyexiti_exitcond66_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_j02i2i;
reg [31:0] main_AddRoundKeyexit_crit_edgei_j02i2i_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_198;
reg [31:0] main_AddRoundKeyexit_crit_edgei_198_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_199;
reg [31:0] main_AddRoundKeyexit_crit_edgei_199_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep56_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_200;
reg [31:0] main_AddRoundKeyexit_crit_edgei_200_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep57_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_201;
reg [31:0] main_AddRoundKeyexit_crit_edgei_201_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep59_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_202;
reg [31:0] main_AddRoundKeyexit_crit_edgei_202_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep63_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_203;
reg [31:0] main_AddRoundKeyexit_crit_edgei_203_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_204;
reg [31:0] main_AddRoundKeyexit_crit_edgei_204_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_205;
reg [31:0] main_AddRoundKeyexit_crit_edgei_205_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_206;
reg [31:0] main_AddRoundKeyexit_crit_edgei_206_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_207;
reg [31:0] main_AddRoundKeyexit_crit_edgei_207_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_208;
reg [31:0] main_AddRoundKeyexit_crit_edgei_208_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_209;
reg [31:0] main_AddRoundKeyexit_crit_edgei_209_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_210;
reg [31:0] main_AddRoundKeyexit_crit_edgei_210_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_211;
reg [31:0] main_AddRoundKeyexit_crit_edgei_211_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_212;
reg [31:0] main_AddRoundKeyexit_crit_edgei_212_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_213;
reg [31:0] main_AddRoundKeyexit_crit_edgei_213_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_214;
reg [31:0] main_AddRoundKeyexit_crit_edgei_214_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_215;
reg [31:0] main_AddRoundKeyexit_crit_edgei_215_reg;
reg  main_AddRoundKeyexit_crit_edgei_exitcond55;
reg  main_AddRoundKeyexit_crit_edgei_exitcond55_reg;
reg [31:0] main_preheaderi4i_j11i3i;
reg [31:0] main_preheaderi4i_j11i3i_reg;
reg [31:0] main_preheaderi4i_216;
reg [31:0] main_preheaderi4i_216_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_scevgep47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_scevgep47_reg;
reg [31:0] main_preheaderi4i_217;
reg [31:0] main_preheaderi4i_217_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_scevgep48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_scevgep48_reg;
reg [31:0] main_preheaderi4i_218;
reg [31:0] main_preheaderi4i_218_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_scevgep49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_scevgep49_reg;
reg [31:0] main_preheaderi4i_219;
reg [31:0] main_preheaderi4i_219_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_scevgep50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_scevgep50_reg;
reg [31:0] main_preheaderi4i_220;
reg [31:0] main_preheaderi4i_220_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_scevgep51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_scevgep51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_scevgep52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_scevgep52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_scevgep53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_scevgep53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_scevgep54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i_scevgep54_reg;
reg [31:0] main_preheaderi4i_221;
reg [31:0] main_preheaderi4i_221_reg;
reg [31:0] main_preheaderi4i_222;
reg [31:0] main_preheaderi4i_222_reg;
reg [31:0] main_preheaderi4i_223;
reg [31:0] main_preheaderi4i_223_reg;
reg [31:0] main_preheaderi4i_224;
reg [31:0] main_preheaderi4i_224_reg;
reg [31:0] main_preheaderi4i_225;
reg [31:0] main_preheaderi4i_225_reg;
reg [31:0] main_preheaderi4i_226;
reg [31:0] main_preheaderi4i_226_reg;
reg [31:0] main_preheaderi4i_227;
reg [31:0] main_preheaderi4i_227_reg;
reg [31:0] main_preheaderi4i_228;
reg [31:0] main_preheaderi4i_228_reg;
reg [31:0] main_preheaderi4i_229;
reg [31:0] main_preheaderi4i_229_reg;
reg [31:0] main_preheaderi4i_230;
reg [31:0] main_preheaderi4i_230_reg;
reg [31:0] main_preheaderi4i_231;
reg [31:0] main_preheaderi4i_231_reg;
reg [31:0] main_preheaderi4i_232;
reg [31:0] main_preheaderi4i_232_reg;
reg [31:0] main_preheaderi4i_233;
reg [31:0] main_preheaderi4i_233_reg;
reg  main_preheaderi4i_exitcond46;
reg  main_preheaderi4i_exitcond46_reg;
reg [31:0] main_lrphi_i19i;
reg [31:0] main_lrphi_i19i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_scevgep45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_scevgep45_reg;
reg [31:0] main_lrphi_235;
reg [31:0] main_lrphi_235_reg;
reg  main_lrphi_236;
reg  main_lrphi_236_reg;
reg [31:0] main_237_prei;
reg [31:0] main_237_prei_reg;
reg [31:0] main_239_240;
reg [31:0] main_239_240_reg;
reg [31:0] main_239_242;
reg [31:0] main_239_242_reg;
reg  main_239_exitcond44;
reg  main_239_exitcond44_reg;
reg [31:0] main_preheaderi_243;
reg [31:0] main_preheaderi_243_reg;
reg [31:0] main_preheaderi_i28i;
reg [31:0] main_preheaderi_i28i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep43_reg;
reg [31:0] main_preheaderi_244;
reg [31:0] main_preheaderi_244_reg;
reg [31:0] main_preheaderi_245;
reg [31:0] main_preheaderi_245_reg;
reg  main_preheaderi_246;
reg  main_preheaderi_246_reg;
reg [31:0] main_preheaderi_247;
reg [31:0] main_preheaderi_247_reg;
reg [31:0] main_preheaderi_248;
reg [31:0] main_preheaderi_248_reg;
reg [31:0] main_preheaderi_249;
reg [31:0] main_preheaderi_249_reg;
reg  main_preheaderi_exitcond41;
reg  main_preheaderi_exitcond41_reg;
reg [31:0] main_251_j02ii1;
reg [31:0] main_251_j02ii1_reg;
reg [31:0] main_251_252;
reg [31:0] main_251_252_reg;
reg [31:0] main_251_253;
reg [31:0] main_251_253_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_251_scevgep33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_251_scevgep33_reg;
reg [31:0] main_251_254;
reg [31:0] main_251_254_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_251_scevgep34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_251_scevgep34_reg;
reg [31:0] main_251_255;
reg [31:0] main_251_255_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_251_scevgep35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_251_scevgep35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_251_scevgep36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_251_scevgep36_reg;
reg [31:0] main_251_256;
reg [31:0] main_251_256_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_251_scevgep37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_251_scevgep37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_251_scevgep38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_251_scevgep38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_251_scevgep39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_251_scevgep39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_251_scevgep40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_251_scevgep40_reg;
reg [31:0] main_251_257;
reg [31:0] main_251_257_reg;
reg [31:0] main_251_258;
reg [31:0] main_251_258_reg;
reg [31:0] main_251_259;
reg [31:0] main_251_259_reg;
reg [31:0] main_251_260;
reg [31:0] main_251_260_reg;
reg [31:0] main_251_261;
reg [31:0] main_251_261_reg;
reg [31:0] main_251_262;
reg [31:0] main_251_262_reg;
reg [31:0] main_251_263;
reg [31:0] main_251_263_reg;
reg [31:0] main_251_264;
reg [31:0] main_251_264_reg;
reg [31:0] main_251_265;
reg [31:0] main_251_265_reg;
reg [31:0] main_251_266;
reg [31:0] main_251_266_reg;
reg [31:0] main_251_267;
reg [31:0] main_251_267_reg;
reg [31:0] main_251_268;
reg [31:0] main_251_268_reg;
reg [31:0] main_251_269;
reg [31:0] main_251_269_reg;
reg  main_251_exitcond32;
reg  main_251_exitcond32_reg;
reg [31:0] main_preheaderii4_j11ii3;
reg [31:0] main_preheaderii4_j11ii3_reg;
reg [31:0] main_preheaderii4_270;
reg [31:0] main_preheaderii4_270_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_scevgep24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_scevgep24_reg;
reg [31:0] main_preheaderii4_271;
reg [31:0] main_preheaderii4_271_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_scevgep25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_scevgep25_reg;
reg [31:0] main_preheaderii4_272;
reg [31:0] main_preheaderii4_272_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_scevgep26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_scevgep26_reg;
reg [31:0] main_preheaderii4_273;
reg [31:0] main_preheaderii4_273_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_scevgep27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_scevgep27_reg;
reg [31:0] main_preheaderii4_274;
reg [31:0] main_preheaderii4_274_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_scevgep28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_scevgep28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_scevgep29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_scevgep29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_scevgep30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_scevgep30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_scevgep31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii4_scevgep31_reg;
reg [31:0] main_preheaderii4_275;
reg [31:0] main_preheaderii4_275_reg;
reg [31:0] main_preheaderii4_276;
reg [31:0] main_preheaderii4_276_reg;
reg [31:0] main_preheaderii4_277;
reg [31:0] main_preheaderii4_277_reg;
reg [31:0] main_preheaderii4_278;
reg [31:0] main_preheaderii4_278_reg;
reg [31:0] main_preheaderii4_279;
reg [31:0] main_preheaderii4_279_reg;
reg [31:0] main_preheaderii4_280;
reg [31:0] main_preheaderii4_280_reg;
reg [31:0] main_preheaderii4_281;
reg [31:0] main_preheaderii4_281_reg;
reg [31:0] main_preheaderii4_282;
reg [31:0] main_preheaderii4_282_reg;
reg [31:0] main_preheaderii4_283;
reg [31:0] main_preheaderii4_283_reg;
reg [31:0] main_preheaderii4_284;
reg [31:0] main_preheaderii4_284_reg;
reg [31:0] main_preheaderii4_285;
reg [31:0] main_preheaderii4_285_reg;
reg [31:0] main_preheaderii4_286;
reg [31:0] main_preheaderii4_286_reg;
reg [31:0] main_preheaderii4_287;
reg [31:0] main_preheaderii4_287_reg;
reg  main_preheaderii4_exitcond23;
reg  main_preheaderii4_exitcond23_reg;
reg [31:0] main_lrph12ipreheader_288;
reg [31:0] main_lrph12ipreheader_288_reg;
reg [31:0] main_lrph12ipreheader_289;
reg [31:0] main_lrph12ipreheader_289_reg;
reg [31:0] main_lrph12ipreheader_290;
reg [31:0] main_lrph12ipreheader_290_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_291;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_291_reg;
reg [31:0] main_lrph12ipreheader_292;
reg [31:0] main_lrph12ipreheader_292_reg;
reg [31:0] main_lrph12ipreheader_293;
reg [31:0] main_lrph12ipreheader_293_reg;
reg [31:0] main_lrph12ipreheader_294;
reg [31:0] main_lrph12ipreheader_294_reg;
reg [31:0] main_lrph12ipreheader_295;
reg [31:0] main_lrph12ipreheader_295_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_296;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_296_reg;
reg [31:0] main_lrph12ipreheader_297;
reg [31:0] main_lrph12ipreheader_297_reg;
reg [31:0] main_lrph12ipreheader_298;
reg [31:0] main_lrph12ipreheader_298_reg;
reg [31:0] main_lrph12ipreheader_299;
reg [31:0] main_lrph12ipreheader_299_reg;
reg [31:0] main_lrph12ipreheader_300;
reg [31:0] main_lrph12ipreheader_300_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_301;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_301_reg;
reg [31:0] main_lrph12ipreheader_302;
reg [31:0] main_lrph12ipreheader_302_reg;
reg [31:0] main_lrph12ipreheader_303;
reg [31:0] main_lrph12ipreheader_303_reg;
reg [31:0] main_lrph12ipreheader_304;
reg [31:0] main_lrph12ipreheader_304_reg;
reg [31:0] main_lrph12ipreheader_305;
reg [31:0] main_lrph12ipreheader_305_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_306;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_306_reg;
reg [31:0] main_lrph12ipreheader_307;
reg [31:0] main_lrph12ipreheader_307_reg;
reg [31:0] main_lrph12ipreheader_308;
reg [31:0] main_lrph12ipreheader_308_reg;
reg [31:0] main_lrph12ipreheader_309;
reg [31:0] main_lrph12ipreheader_309_reg;
reg [31:0] main_lrph12ipreheader_310;
reg [31:0] main_lrph12ipreheader_310_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_311;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_311_reg;
reg [31:0] main_lrph12ipreheader_312;
reg [31:0] main_lrph12ipreheader_312_reg;
reg [31:0] main_lrph12ipreheader_313;
reg [31:0] main_lrph12ipreheader_313_reg;
reg [31:0] main_lrph12ipreheader_314;
reg [31:0] main_lrph12ipreheader_314_reg;
reg [31:0] main_lrph12ipreheader_315;
reg [31:0] main_lrph12ipreheader_315_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_316;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_316_reg;
reg [31:0] main_lrph12ipreheader_317;
reg [31:0] main_lrph12ipreheader_317_reg;
reg [31:0] main_lrph12ipreheader_318;
reg [31:0] main_lrph12ipreheader_318_reg;
reg [31:0] main_lrph12ipreheader_319;
reg [31:0] main_lrph12ipreheader_319_reg;
reg [31:0] main_lrph12ipreheader_320;
reg [31:0] main_lrph12ipreheader_320_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_321;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_321_reg;
reg [31:0] main_lrph12ipreheader_322;
reg [31:0] main_lrph12ipreheader_322_reg;
reg [31:0] main_lrph12ipreheader_323;
reg [31:0] main_lrph12ipreheader_323_reg;
reg [31:0] main_lrph12ipreheader_324;
reg [31:0] main_lrph12ipreheader_324_reg;
reg [31:0] main_lrph12ipreheader_325;
reg [31:0] main_lrph12ipreheader_325_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_326;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_326_reg;
reg [31:0] main_lrph12ipreheader_327;
reg [31:0] main_lrph12ipreheader_327_reg;
reg [31:0] main_lrph12ipreheader_328;
reg [31:0] main_lrph12ipreheader_328_reg;
reg [31:0] main_lrph12ipreheader_329;
reg [31:0] main_lrph12ipreheader_329_reg;
reg [31:0] main_lrph12ipreheader_330;
reg [31:0] main_lrph12ipreheader_330_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_331;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_331_reg;
reg [31:0] main_lrph12ipreheader_332;
reg [31:0] main_lrph12ipreheader_332_reg;
reg [31:0] main_lrph12ipreheader_333;
reg [31:0] main_lrph12ipreheader_333_reg;
reg [31:0] main_lrph12ipreheader_334;
reg [31:0] main_lrph12ipreheader_334_reg;
reg [31:0] main_lrph12ipreheader_335;
reg [31:0] main_lrph12ipreheader_335_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_336;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_336_reg;
reg [31:0] main_lrph12ipreheader_337;
reg [31:0] main_lrph12ipreheader_337_reg;
reg [31:0] main_lrph12ipreheader_338;
reg [31:0] main_lrph12ipreheader_338_reg;
reg [31:0] main_lrph12ipreheader_339;
reg [31:0] main_lrph12ipreheader_339_reg;
reg [31:0] main_lrph12ipreheader_340;
reg [31:0] main_lrph12ipreheader_340_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_341;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_341_reg;
reg [31:0] main_lrph12ipreheader_342;
reg [31:0] main_lrph12ipreheader_342_reg;
reg [31:0] main_lrph12ipreheader_343;
reg [31:0] main_lrph12ipreheader_343_reg;
reg [31:0] main_lrph12ipreheader_344;
reg [31:0] main_lrph12ipreheader_344_reg;
reg [31:0] main_lrph12ipreheader_345;
reg [31:0] main_lrph12ipreheader_345_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_346;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_346_reg;
reg [31:0] main_lrph12ipreheader_347;
reg [31:0] main_lrph12ipreheader_347_reg;
reg [31:0] main_lrph12ipreheader_348;
reg [31:0] main_lrph12ipreheader_348_reg;
reg [31:0] main_lrph12ipreheader_349;
reg [31:0] main_lrph12ipreheader_349_reg;
reg [31:0] main_lrph12ipreheader_350;
reg [31:0] main_lrph12ipreheader_350_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_351;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_351_reg;
reg [31:0] main_lrph12ipreheader_352;
reg [31:0] main_lrph12ipreheader_352_reg;
reg [31:0] main_lrph12ipreheader_353;
reg [31:0] main_lrph12ipreheader_353_reg;
reg [31:0] main_lrph12ipreheader_354;
reg [31:0] main_lrph12ipreheader_354_reg;
reg [31:0] main_lrph12ipreheader_355;
reg [31:0] main_lrph12ipreheader_355_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_356;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_356_reg;
reg [31:0] main_lrph12ipreheader_357;
reg [31:0] main_lrph12ipreheader_357_reg;
reg [31:0] main_lrph12ipreheader_358;
reg [31:0] main_lrph12ipreheader_358_reg;
reg [31:0] main_lrph12ipreheader_359;
reg [31:0] main_lrph12ipreheader_359_reg;
reg [31:0] main_lrph12ipreheader_360;
reg [31:0] main_lrph12ipreheader_360_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_361;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_361_reg;
reg [31:0] main_lrph12ipreheader_362;
reg [31:0] main_lrph12ipreheader_362_reg;
reg [31:0] main_lrph12ipreheader_363;
reg [31:0] main_lrph12ipreheader_363_reg;
reg [31:0] main_lrph12ipreheader_364;
reg [31:0] main_lrph12ipreheader_364_reg;
reg [31:0] main_lrph12ipreheader_365;
reg [31:0] main_lrph12ipreheader_365_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_366;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12ipreheader_366_reg;
reg [31:0] main_lrph12ipreheader_367;
reg [31:0] main_lrph12ipreheader_367_reg;
reg [31:0] main_lrph12i_indvar;
reg [31:0] main_lrph12i_indvar_reg;
reg [31:0] main_lrph12i_i011i;
reg [31:0] main_lrph12i_i011i_reg;
reg [31:0] main_lrph12i_369;
reg [31:0] main_lrph12i_369_reg;
reg [31:0] main_lrph12i_370;
reg [31:0] main_lrph12i_370_reg;
reg [31:0] main_lrph12i_371;
reg [31:0] main_lrph12i_371_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_372;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_372_reg;
reg [31:0] main_lrph12i_373;
reg [31:0] main_lrph12i_373_reg;
reg [31:0] main_lrph12i_374;
reg [31:0] main_lrph12i_374_reg;
reg [31:0] main_lrph12i_375;
reg [31:0] main_lrph12i_375_reg;
reg [31:0] main_lrph12i_376;
reg [31:0] main_lrph12i_376_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_377;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_377_reg;
reg [31:0] main_lrph12i_378;
reg [31:0] main_lrph12i_378_reg;
reg [31:0] main_lrph12i_379;
reg [31:0] main_lrph12i_379_reg;
reg [31:0] main_lrph12i_380;
reg [31:0] main_lrph12i_380_reg;
reg [31:0] main_lrph12i_381;
reg [31:0] main_lrph12i_381_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_382;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_382_reg;
reg [31:0] main_lrph12i_383;
reg [31:0] main_lrph12i_383_reg;
reg [31:0] main_lrph12i_384;
reg [31:0] main_lrph12i_384_reg;
reg [31:0] main_lrph12i_385;
reg [31:0] main_lrph12i_385_reg;
reg [31:0] main_lrph12i_386;
reg [31:0] main_lrph12i_386_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_387;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_387_reg;
reg [31:0] main_lrph12i_388;
reg [31:0] main_lrph12i_388_reg;
reg [31:0] main_lrph12i_389;
reg [31:0] main_lrph12i_389_reg;
reg [31:0] main_lrph12i_390;
reg [31:0] main_lrph12i_390_reg;
reg [31:0] main_lrph12i_391;
reg [31:0] main_lrph12i_391_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_392;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_392_reg;
reg [31:0] main_lrph12i_393;
reg [31:0] main_lrph12i_393_reg;
reg [31:0] main_lrph12i_394;
reg [31:0] main_lrph12i_394_reg;
reg [31:0] main_lrph12i_395;
reg [31:0] main_lrph12i_395_reg;
reg [31:0] main_lrph12i_396;
reg [31:0] main_lrph12i_396_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_397;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_397_reg;
reg [31:0] main_lrph12i_398;
reg [31:0] main_lrph12i_398_reg;
reg [31:0] main_lrph12i_399;
reg [31:0] main_lrph12i_399_reg;
reg [31:0] main_lrph12i_400;
reg [31:0] main_lrph12i_400_reg;
reg [31:0] main_lrph12i_401;
reg [31:0] main_lrph12i_401_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_402;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_402_reg;
reg [31:0] main_lrph12i_403;
reg [31:0] main_lrph12i_403_reg;
reg [31:0] main_lrph12i_404;
reg [31:0] main_lrph12i_404_reg;
reg [31:0] main_lrph12i_405;
reg [31:0] main_lrph12i_405_reg;
reg [31:0] main_lrph12i_406;
reg [31:0] main_lrph12i_406_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_407;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_407_reg;
reg [31:0] main_lrph12i_408;
reg [31:0] main_lrph12i_408_reg;
reg [31:0] main_lrph12i_409;
reg [31:0] main_lrph12i_409_reg;
reg [31:0] main_lrph12i_410;
reg [31:0] main_lrph12i_410_reg;
reg [31:0] main_lrph12i_411;
reg [31:0] main_lrph12i_411_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_412;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_412_reg;
reg [31:0] main_lrph12i_413;
reg [31:0] main_lrph12i_413_reg;
reg [31:0] main_lrph12i_414;
reg [31:0] main_lrph12i_414_reg;
reg [31:0] main_lrph12i_415;
reg [31:0] main_lrph12i_415_reg;
reg [31:0] main_lrph12i_416;
reg [31:0] main_lrph12i_416_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_417;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_417_reg;
reg [31:0] main_lrph12i_418;
reg [31:0] main_lrph12i_418_reg;
reg [31:0] main_lrph12i_419;
reg [31:0] main_lrph12i_419_reg;
reg [31:0] main_lrph12i_420;
reg [31:0] main_lrph12i_420_reg;
reg [31:0] main_lrph12i_421;
reg [31:0] main_lrph12i_421_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_422;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_422_reg;
reg [31:0] main_lrph12i_423;
reg [31:0] main_lrph12i_423_reg;
reg [31:0] main_lrph12i_424;
reg [31:0] main_lrph12i_424_reg;
reg [31:0] main_lrph12i_425;
reg [31:0] main_lrph12i_425_reg;
reg [31:0] main_lrph12i_426;
reg [31:0] main_lrph12i_426_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_427;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_427_reg;
reg [31:0] main_lrph12i_428;
reg [31:0] main_lrph12i_428_reg;
reg [31:0] main_lrph12i_429;
reg [31:0] main_lrph12i_429_reg;
reg [31:0] main_lrph12i_430;
reg [31:0] main_lrph12i_430_reg;
reg [31:0] main_lrph12i_431;
reg [31:0] main_lrph12i_431_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_432;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_432_reg;
reg [31:0] main_lrph12i_433;
reg [31:0] main_lrph12i_433_reg;
reg [31:0] main_lrph12i_434;
reg [31:0] main_lrph12i_434_reg;
reg [31:0] main_lrph12i_435;
reg [31:0] main_lrph12i_435_reg;
reg [31:0] main_lrph12i_436;
reg [31:0] main_lrph12i_436_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_437;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_437_reg;
reg [31:0] main_lrph12i_438;
reg [31:0] main_lrph12i_438_reg;
reg [31:0] main_lrph12i_439;
reg [31:0] main_lrph12i_439_reg;
reg [31:0] main_lrph12i_440;
reg [31:0] main_lrph12i_440_reg;
reg [31:0] main_lrph12i_441;
reg [31:0] main_lrph12i_441_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_442;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_442_reg;
reg [31:0] main_lrph12i_443;
reg [31:0] main_lrph12i_443_reg;
reg [31:0] main_lrph12i_444;
reg [31:0] main_lrph12i_444_reg;
reg [31:0] main_lrph12i_445;
reg [31:0] main_lrph12i_445_reg;
reg [31:0] main_lrph12i_446;
reg [31:0] main_lrph12i_446_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_447;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph12i_447_reg;
reg [31:0] main_lrph12i_448;
reg [31:0] main_lrph12i_448_reg;
reg [31:0] main_lrph12i_indvarnext;
reg [31:0] main_lrph12i_indvarnext_reg;
reg  main_lrph12i_exitcond22;
reg  main_lrph12i_exitcond22_reg;
reg [31:0] main__crit_edgei_j02i2i11;
reg [31:0] main__crit_edgei_j02i2i11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep16_reg;
reg [31:0] main__crit_edgei_449;
reg [31:0] main__crit_edgei_449_reg;
reg [31:0] main__crit_edgei_450;
reg [31:0] main__crit_edgei_450_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep17_reg;
reg [31:0] main__crit_edgei_451;
reg [31:0] main__crit_edgei_451_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep18_reg;
reg [31:0] main__crit_edgei_452;
reg [31:0] main__crit_edgei_452_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep21_reg;
reg [31:0] main__crit_edgei_453;
reg [31:0] main__crit_edgei_453_reg;
reg [31:0] main__crit_edgei_454;
reg [31:0] main__crit_edgei_454_reg;
reg [31:0] main__crit_edgei_455;
reg [31:0] main__crit_edgei_455_reg;
reg [31:0] main__crit_edgei_456;
reg [31:0] main__crit_edgei_456_reg;
reg [31:0] main__crit_edgei_457;
reg [31:0] main__crit_edgei_457_reg;
reg [31:0] main__crit_edgei_458;
reg [31:0] main__crit_edgei_458_reg;
reg [31:0] main__crit_edgei_459;
reg [31:0] main__crit_edgei_459_reg;
reg [31:0] main__crit_edgei_460;
reg [31:0] main__crit_edgei_460_reg;
reg [31:0] main__crit_edgei_461;
reg [31:0] main__crit_edgei_461_reg;
reg [31:0] main__crit_edgei_462;
reg [31:0] main__crit_edgei_462_reg;
reg [31:0] main__crit_edgei_463;
reg [31:0] main__crit_edgei_463_reg;
reg [31:0] main__crit_edgei_464;
reg [31:0] main__crit_edgei_464_reg;
reg [31:0] main__crit_edgei_465;
reg [31:0] main__crit_edgei_465_reg;
reg  main__crit_edgei_exitcond13;
reg  main__crit_edgei_exitcond13_reg;
reg [31:0] main_preheaderi4i14_j11i3i13;
reg [31:0] main_preheaderi4i14_j11i3i13_reg;
reg [31:0] main_preheaderi4i14_466;
reg [31:0] main_preheaderi4i14_466_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_scevgep5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_scevgep5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_scevgep6_reg;
reg [31:0] main_preheaderi4i14_467;
reg [31:0] main_preheaderi4i14_467_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_scevgep7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_scevgep8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_scevgep8_reg;
reg [31:0] main_preheaderi4i14_468;
reg [31:0] main_preheaderi4i14_468_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_scevgep9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_scevgep9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_scevgep10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_scevgep10_reg;
reg [31:0] main_preheaderi4i14_469;
reg [31:0] main_preheaderi4i14_469_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_scevgep11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_scevgep11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_scevgep12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi4i14_scevgep12_reg;
reg [31:0] main_preheaderi4i14_470;
reg [31:0] main_preheaderi4i14_470_reg;
reg [31:0] main_preheaderi4i14_471;
reg [31:0] main_preheaderi4i14_471_reg;
reg [31:0] main_preheaderi4i14_472;
reg [31:0] main_preheaderi4i14_472_reg;
reg [31:0] main_preheaderi4i14_473;
reg [31:0] main_preheaderi4i14_473_reg;
reg [31:0] main_preheaderi4i14_474;
reg [31:0] main_preheaderi4i14_474_reg;
reg [31:0] main_preheaderi4i14_475;
reg [31:0] main_preheaderi4i14_475_reg;
reg [31:0] main_preheaderi4i14_476;
reg [31:0] main_preheaderi4i14_476_reg;
reg [31:0] main_preheaderi4i14_477;
reg [31:0] main_preheaderi4i14_477_reg;
reg [31:0] main_preheaderi4i14_478;
reg [31:0] main_preheaderi4i14_478_reg;
reg [31:0] main_preheaderi4i14_479;
reg [31:0] main_preheaderi4i14_479_reg;
reg [31:0] main_preheaderi4i14_480;
reg [31:0] main_preheaderi4i14_480_reg;
reg [31:0] main_preheaderi4i14_481;
reg [31:0] main_preheaderi4i14_481_reg;
reg [31:0] main_preheaderi4i14_482;
reg [31:0] main_preheaderi4i14_482_reg;
reg  main_preheaderi4i14_exitcond;
reg  main_preheaderi4i14_exitcond_reg;
reg [31:0] main_lrphi20_i19i19;
reg [31:0] main_lrphi20_i19i19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi20_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi20_scevgep4_reg;
reg [31:0] main_lrphi20_484;
reg [31:0] main_lrphi20_484_reg;
reg  main_lrphi20_485;
reg  main_lrphi20_485_reg;
reg [31:0] main_486_pre14i;
reg [31:0] main_486_pre14i_reg;
reg [31:0] main_488_489;
reg [31:0] main_488_489_reg;
reg [31:0] main_488_491;
reg [31:0] main_488_491_reg;
reg  main_488_exitcond3;
reg  main_488_exitcond3_reg;
reg [31:0] main_preheaderloopexiti17_492;
reg [31:0] main_preheaderloopexiti17_492_reg;
reg [31:0] main_preheaderloopexiti17_i28i21;
reg [31:0] main_preheaderloopexiti17_i28i21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderloopexiti17_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderloopexiti17_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderloopexiti17_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderloopexiti17_scevgep2_reg;
reg [31:0] main_preheaderloopexiti17_493;
reg [31:0] main_preheaderloopexiti17_493_reg;
reg [31:0] main_preheaderloopexiti17_494;
reg [31:0] main_preheaderloopexiti17_494_reg;
reg  main_preheaderloopexiti17_495;
reg  main_preheaderloopexiti17_495_reg;
reg [31:0] main_preheaderloopexiti17_496;
reg [31:0] main_preheaderloopexiti17_496_reg;
reg [31:0] main_preheaderloopexiti17_497;
reg [31:0] main_preheaderloopexiti17_497_reg;
reg [31:0] main_preheaderloopexiti17_498;
reg [31:0] main_preheaderloopexiti17_498_reg;
reg  main_preheaderloopexiti17_exitcond1;
reg  main_preheaderloopexiti17_exitcond1_reg;
reg  main_decryptexit_500;
reg  main_decryptexit_500_reg;
reg [3:0] encryptout_enc_statemt_address_a;
reg  encryptout_enc_statemt_write_enable_a;
wire [31:0] encryptout_enc_statemt_in_a;
wire [31:0] encryptout_enc_statemt_out_a;
wire [3:0] encryptout_enc_statemt_address_b;
wire  encryptout_enc_statemt_write_enable_b;
wire [31:0] encryptout_enc_statemt_in_b;
wire [31:0] encryptout_enc_statemt_out_b;
reg [3:0] decryptout_dec_statemt_address_a;
reg  decryptout_dec_statemt_write_enable_a;
wire [31:0] decryptout_dec_statemt_in_a;
wire [31:0] decryptout_dec_statemt_out_a;
wire [3:0] decryptout_dec_statemt_address_b;
wire  decryptout_dec_statemt_write_enable_b;
wire [31:0] decryptout_dec_statemt_in_b;
wire [31:0] decryptout_dec_statemt_out_b;
wire [4:0] Rcon0_address_a;
wire  Rcon0_write_enable_a;
wire [31:0] Rcon0_in_a;
wire [31:0] Rcon0_out_a;
wire [4:0] Rcon0_address_b;
wire  Rcon0_write_enable_b;
wire [31:0] Rcon0_in_b;
wire [31:0] Rcon0_out_b;
wire [7:0] rom_32_address_a;
wire  rom_32_write_enable_a;
wire [31:0] rom_32_in_a;
wire [31:0] rom_32_out_a;
wire [7:0] rom_32_address_b;
wire  rom_32_write_enable_b;
wire [31:0] rom_32_in_b;
wire [31:0] rom_32_out_b;
reg [7:0] invSbox_address_a;
reg  invSbox_write_enable_a;
wire [31:0] invSbox_in_a;
wire [31:0] invSbox_out_a;
reg [7:0] invSbox_address_b;
reg  invSbox_write_enable_b;
wire [31:0] invSbox_in_b;
wire [31:0] invSbox_out_b;
wire [8:0] ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire [8:0] ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire [4:0] MixColumn_AddRoundKey_0_ret_address_a;
wire  MixColumn_AddRoundKey_0_ret_write_enable_a;
wire [31:0] MixColumn_AddRoundKey_0_ret_in_a;
wire [31:0] MixColumn_AddRoundKey_0_ret_out_a;
wire [4:0] MixColumn_AddRoundKey_0_ret_address_b;
wire  MixColumn_AddRoundKey_0_ret_write_enable_b;
wire [31:0] MixColumn_AddRoundKey_0_ret_in_b;
wire [31:0] MixColumn_AddRoundKey_0_ret_out_b;
wire [4:0] AddRoundKey_InversMixColumn_0_ret_address_a;
wire  AddRoundKey_InversMixColumn_0_ret_write_enable_a;
wire [31:0] AddRoundKey_InversMixColumn_0_ret_in_a;
wire [31:0] AddRoundKey_InversMixColumn_0_ret_out_a;
wire [4:0] AddRoundKey_InversMixColumn_0_ret_address_b;
wire  AddRoundKey_InversMixColumn_0_ret_write_enable_b;
wire [31:0] AddRoundKey_InversMixColumn_0_ret_in_b;
wire [31:0] AddRoundKey_InversMixColumn_0_ret_out_b;
reg  KeySchedule_start;
reg [31:0] KeySchedule_arg_type;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_arg_key;
reg  KeySchedule_finish_final;
reg  KeySchedule_finish_reg;
wire  KeySchedule_finish;
wire [31:0] KeySchedule_return_val;
reg [31:0] KeySchedule_return_val_reg;
reg [31:0] main_0_1;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;
reg  MixColumn_AddRoundKey_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] MixColumn_AddRoundKey_arg_statemt;
reg [31:0] MixColumn_AddRoundKey_arg_nb;
reg [31:0] MixColumn_AddRoundKey_arg_n;
reg  MixColumn_AddRoundKey_finish_final;
reg  MixColumn_AddRoundKey_finish_reg;
wire  MixColumn_AddRoundKey_finish;
wire [31:0] MixColumn_AddRoundKey_return_val;
reg [31:0] MixColumn_AddRoundKey_return_val_reg;
reg [31:0] main_AddRoundKeyexiti_117;
reg [31:0] main_encryptexit_250;
reg  AddRoundKey_InversMixColumn_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] AddRoundKey_InversMixColumn_arg_statemt;
reg [31:0] AddRoundKey_InversMixColumn_arg_nb;
reg [31:0] AddRoundKey_InversMixColumn_arg_n;
reg  AddRoundKey_InversMixColumn_finish_final;
reg  AddRoundKey_InversMixColumn_finish_reg;
wire  AddRoundKey_InversMixColumn_finish;
wire [31:0] AddRoundKey_InversMixColumn_return_val;
reg [31:0] AddRoundKey_InversMixColumn_return_val_reg;
reg [31:0] main_lrph12i_368;


KeySchedule KeySchedule (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (KeySchedule_start),
	.finish (KeySchedule_finish),
	.return_val (KeySchedule_return_val),
	.arg_type (KeySchedule_arg_type),
	.arg_key (KeySchedule_arg_key)
);

defparam
	KeySchedule.tag_offset = tag_offset;


MixColumn_AddRoundKey MixColumn_AddRoundKey (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (MixColumn_AddRoundKey_start),
	.finish (MixColumn_AddRoundKey_finish),
	.return_val (MixColumn_AddRoundKey_return_val),
	.arg_statemt (MixColumn_AddRoundKey_arg_statemt),
	.arg_nb (MixColumn_AddRoundKey_arg_nb),
	.arg_n (MixColumn_AddRoundKey_arg_n)
);

defparam
	MixColumn_AddRoundKey.tag_offset = tag_offset;


AddRoundKey_InversMixColumn AddRoundKey_InversMixColumn (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (AddRoundKey_InversMixColumn_start),
	.finish (AddRoundKey_InversMixColumn_finish),
	.return_val (AddRoundKey_InversMixColumn_return_val),
	.arg_statemt (AddRoundKey_InversMixColumn_arg_statemt),
	.arg_nb (AddRoundKey_InversMixColumn_arg_nb),
	.arg_n (AddRoundKey_InversMixColumn_arg_n)
);

defparam
	AddRoundKey_InversMixColumn.tag_offset = tag_offset;

// Local Rams


// @encrypt.out_enc_statemt = internal unnamed_addr constant [16 x i32] [i32 57, i32 37, i32 132, i32 29, i32 2, i32 220, i32 9, i32 251, i32 220, i32 17, i32 133, i32 151, i32 25, i32 106, i32 11, i32 5...
rom_dual_port encryptout_enc_statemt (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( encryptout_enc_statemt_address_a ),
	.address_b( encryptout_enc_statemt_address_b ),
	.q_a( encryptout_enc_statemt_out_a ),
	.q_b( encryptout_enc_statemt_out_b)
);
defparam encryptout_enc_statemt.width_a = 32;
defparam encryptout_enc_statemt.width_b = 32;
defparam encryptout_enc_statemt.widthad_a = 4;
defparam encryptout_enc_statemt.widthad_b = 4;
defparam encryptout_enc_statemt.numwords_a = 16;
defparam encryptout_enc_statemt.numwords_b = 16;
defparam encryptout_enc_statemt.latency = 1;
defparam encryptout_enc_statemt.init_file = "encryptout_enc_statemt.mif";


// @decrypt.out_dec_statemt = internal unnamed_addr constant [16 x i32] [i32 50, i32 67, i32 246, i32 168, i32 136, i32 90, i32 48, i32 141, i32 49, i32 49, i32 152, i32 162, i32 224, i32 55, i32 7, i32 ...
rom_dual_port decryptout_dec_statemt (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( decryptout_dec_statemt_address_a ),
	.address_b( decryptout_dec_statemt_address_b ),
	.q_a( decryptout_dec_statemt_out_a ),
	.q_b( decryptout_dec_statemt_out_b)
);
defparam decryptout_dec_statemt.width_a = 32;
defparam decryptout_dec_statemt.width_b = 32;
defparam decryptout_dec_statemt.widthad_a = 4;
defparam decryptout_dec_statemt.widthad_b = 4;
defparam decryptout_dec_statemt.numwords_a = 16;
defparam decryptout_dec_statemt.numwords_b = 16;
defparam decryptout_dec_statemt.latency = 1;
defparam decryptout_dec_statemt.init_file = "decryptout_dec_statemt.mif";


// @invSbox = internal unnamed_addr constant [16 x [16 x i32]] [[16 x i32] [i32 82, i32 9, i32 106, i32 213, i32 48, i32 54, i32 165, i32 56, i32 191, i32 64, i32 163, i32 158, i32 129, i32 243, i32 215,...
rom_dual_port invSbox (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( invSbox_address_a ),
	.address_b( invSbox_address_b ),
	.q_a( invSbox_out_a ),
	.q_b( invSbox_out_b)
);
defparam invSbox.width_a = 32;
defparam invSbox.width_b = 32;
defparam invSbox.widthad_a = 8;
defparam invSbox.widthad_b = 8;
defparam invSbox.numwords_a = 256;
defparam invSbox.numwords_b = 256;
defparam invSbox.latency = 1;
defparam invSbox.init_file = "invSbox.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %234 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([20 x i8]* @.str, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_109)) begin
		$write("encrypted message 	");
	end
	/* main: %237*/
	/*   %238 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str1, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__237_113)) begin
		$write("0");
	end
	/* main: %239*/
	/*   %241 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str2, i32 0, i32 0), i32 %240) #2*/
	if ((cur_state == LEGUP_F_main_BB__239_116)) begin
		$write("%0x", $signed(main_239_240_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_239_240_reg) === 1'bX) finish <= 0;
	end
	/* main: %AddRoundKey.exit5.i15*/
	/*   %483 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([19 x i8]* @.str3, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit5i15_197)) begin
		$write("\ndecrypto message	");
	end
	/* main: %486*/
	/*   %487 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str1, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__486_201)) begin
		$write("0");
	end
	/* main: %488*/
	/*   %490 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str2, i32 0, i32 0), i32 %489) #2*/
	if ((cur_state == LEGUP_F_main_BB__488_204)) begin
		$write("%0x", $signed(main_488_489_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_488_489_reg) === 1'bX) finish <= 0;
	end
	/* main: %decrypt.exit*/
	/*   %499 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str4, i32 0, i32 0), i32 %497) #2*/
	if ((cur_state == LEGUP_F_main_BB_decryptexit_209)) begin
		$write("\nResult: %d\n", $signed(main_preheaderloopexiti17_497_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_preheaderloopexiti17_497_reg) === 1'bX) finish <= 0;
	end
	/* main: %501*/
	/*   %502 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str5, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__501_210)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %503*/
	/*   %504 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str6, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__503_211)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB_AddRoundKeyexit5i15_197:
		next_state = LEGUP_F_main_BB_lrphi20_198;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_90:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_91;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_91:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_92;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_92:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_93;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_93:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_94;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_94:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_95;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_95:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_96;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_96:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_97;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_97:
	if ((main_AddRoundKeyexit_crit_edgei_exitcond55_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi4ipreheader_98;
	else if ((main_AddRoundKeyexit_crit_edgei_exitcond55_reg == 1'd0))
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_90;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgeipreheader_89:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_90;
LEGUP_F_main_BB_AddRoundKeyexiti_62:
		next_state = LEGUP_function_call_63;
LEGUP_F_main_BB_AddRoundKeyexiti_64:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_65;
LEGUP_F_main_BB_AddRoundKeyexiti_65:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_66;
LEGUP_F_main_BB_AddRoundKeyexiti_66:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_67;
LEGUP_F_main_BB_AddRoundKeyexiti_67:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_68;
LEGUP_F_main_BB_AddRoundKeyexiti_68:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_69;
LEGUP_F_main_BB_AddRoundKeyexiti_69:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_70;
LEGUP_F_main_BB_AddRoundKeyexiti_70:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_71;
LEGUP_F_main_BB_AddRoundKeyexiti_71:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_72;
LEGUP_F_main_BB_AddRoundKeyexiti_72:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_73;
LEGUP_F_main_BB_AddRoundKeyexiti_73:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_74;
LEGUP_F_main_BB_AddRoundKeyexiti_74:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_75;
LEGUP_F_main_BB_AddRoundKeyexiti_75:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_76;
LEGUP_F_main_BB_AddRoundKeyexiti_76:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_77;
LEGUP_F_main_BB_AddRoundKeyexiti_77:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_78;
LEGUP_F_main_BB_AddRoundKeyexiti_78:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_79;
LEGUP_F_main_BB_AddRoundKeyexiti_79:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_80;
LEGUP_F_main_BB_AddRoundKeyexiti_80:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_81;
LEGUP_F_main_BB_AddRoundKeyexiti_81:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_82;
LEGUP_F_main_BB_AddRoundKeyexiti_82:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_83;
LEGUP_F_main_BB_AddRoundKeyexiti_83:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_84;
LEGUP_F_main_BB_AddRoundKeyexiti_84:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_85;
LEGUP_F_main_BB_AddRoundKeyexiti_85:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_86;
LEGUP_F_main_BB_AddRoundKeyexiti_86:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_87;
LEGUP_F_main_BB_AddRoundKeyexiti_87:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_88;
LEGUP_F_main_BB_AddRoundKeyexiti_88:
	if ((main_AddRoundKeyexiti_exitcond66_reg == 1'd1))
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgeipreheader_89;
	else if ((main_AddRoundKeyexiti_exitcond66_reg == 1'd0))
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_62;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_37:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_38;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_38:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_39;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_39:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_40;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_40:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_41;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_41:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_42;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_42:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_43;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_43:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_44;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_44:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_45;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_45:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_46;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_46:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_47;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_47:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_48;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_48:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_49;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_49:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_50;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_50:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_51;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_51:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_52;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_52:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_53;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_53:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_54;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_54:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_55;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_55:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_56;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_56:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_57;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_57:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_58;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_58:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_59;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_59:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_60;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_60:
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_61;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_61:
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_62;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__0_2;
LEGUP_F_main_BB__0_10:
		next_state = LEGUP_F_main_BB__0_11;
LEGUP_F_main_BB__0_11:
		next_state = LEGUP_F_main_BB__0_12;
LEGUP_F_main_BB__0_12:
		next_state = LEGUP_F_main_BB__0_13;
LEGUP_F_main_BB__0_13:
		next_state = LEGUP_F_main_BB__0_14;
LEGUP_F_main_BB__0_14:
		next_state = LEGUP_F_main_BB__0_15;
LEGUP_F_main_BB__0_15:
		next_state = LEGUP_F_main_BB__0_16;
LEGUP_F_main_BB__0_16:
		next_state = LEGUP_F_main_BB__0_17;
LEGUP_F_main_BB__0_17:
		next_state = LEGUP_function_call_18;
LEGUP_F_main_BB__0_19:
		next_state = LEGUP_F_main_BB__2_20;
LEGUP_F_main_BB__0_2:
		next_state = LEGUP_F_main_BB__0_3;
LEGUP_F_main_BB__0_3:
		next_state = LEGUP_F_main_BB__0_4;
LEGUP_F_main_BB__0_4:
		next_state = LEGUP_F_main_BB__0_5;
LEGUP_F_main_BB__0_5:
		next_state = LEGUP_F_main_BB__0_6;
LEGUP_F_main_BB__0_6:
		next_state = LEGUP_F_main_BB__0_7;
LEGUP_F_main_BB__0_7:
		next_state = LEGUP_F_main_BB__0_8;
LEGUP_F_main_BB__0_8:
		next_state = LEGUP_F_main_BB__0_9;
LEGUP_F_main_BB__0_9:
		next_state = LEGUP_F_main_BB__0_10;
LEGUP_F_main_BB__237_113:
		next_state = LEGUP_F_main_BB__237_114;
LEGUP_F_main_BB__237_114:
		next_state = LEGUP_F_main_BB__237_115;
LEGUP_F_main_BB__237_115:
		next_state = LEGUP_F_main_BB__239_116;
LEGUP_F_main_BB__239_116:
	if ((main_239_exitcond44 == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderipreheader_117;
	else if ((main_239_exitcond44 == 1'd0))
		next_state = LEGUP_F_main_BB_lrphi_110;
LEGUP_F_main_BB__251_124:
		next_state = LEGUP_F_main_BB__251_125;
LEGUP_F_main_BB__251_125:
		next_state = LEGUP_F_main_BB__251_126;
LEGUP_F_main_BB__251_126:
		next_state = LEGUP_F_main_BB__251_127;
LEGUP_F_main_BB__251_127:
		next_state = LEGUP_F_main_BB__251_128;
LEGUP_F_main_BB__251_128:
		next_state = LEGUP_F_main_BB__251_129;
LEGUP_F_main_BB__251_129:
		next_state = LEGUP_F_main_BB__251_130;
LEGUP_F_main_BB__251_130:
		next_state = LEGUP_F_main_BB__251_131;
LEGUP_F_main_BB__251_131:
	if ((main_251_exitcond32_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderii4preheader_132;
	else if ((main_251_exitcond32_reg == 1'd0))
		next_state = LEGUP_F_main_BB__251_124;
LEGUP_F_main_BB__2_20:
		next_state = LEGUP_F_main_BB__2_21;
LEGUP_F_main_BB__2_21:
		next_state = LEGUP_F_main_BB__2_22;
LEGUP_F_main_BB__2_22:
		next_state = LEGUP_F_main_BB__2_23;
LEGUP_F_main_BB__2_23:
		next_state = LEGUP_F_main_BB__2_24;
LEGUP_F_main_BB__2_24:
		next_state = LEGUP_F_main_BB__2_25;
LEGUP_F_main_BB__2_25:
		next_state = LEGUP_F_main_BB__2_26;
LEGUP_F_main_BB__2_26:
	if ((main_2_exitcond76_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderiipreheader_27;
	else if ((main_2_exitcond76_reg == 1'd0))
		next_state = LEGUP_F_main_BB__2_20;
LEGUP_F_main_BB__486_201:
		next_state = LEGUP_F_main_BB__486_202;
LEGUP_F_main_BB__486_202:
		next_state = LEGUP_F_main_BB__486_203;
LEGUP_F_main_BB__486_203:
		next_state = LEGUP_F_main_BB__488_204;
LEGUP_F_main_BB__488_204:
	if ((main_488_exitcond3 == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderloopexiti17preheader_205;
	else if ((main_488_exitcond3 == 1'd0))
		next_state = LEGUP_F_main_BB_lrphi20_198;
LEGUP_F_main_BB__501_210:
		next_state = LEGUP_F_main_BB__505_212;
LEGUP_F_main_BB__503_211:
		next_state = LEGUP_F_main_BB__505_212;
LEGUP_F_main_BB__505_212:
		next_state = LEGUP_0;
LEGUP_F_main_BB__crit_edgei_180:
		next_state = LEGUP_F_main_BB__crit_edgei_181;
LEGUP_F_main_BB__crit_edgei_181:
		next_state = LEGUP_F_main_BB__crit_edgei_182;
LEGUP_F_main_BB__crit_edgei_182:
		next_state = LEGUP_F_main_BB__crit_edgei_183;
LEGUP_F_main_BB__crit_edgei_183:
		next_state = LEGUP_F_main_BB__crit_edgei_184;
LEGUP_F_main_BB__crit_edgei_184:
		next_state = LEGUP_F_main_BB__crit_edgei_185;
LEGUP_F_main_BB__crit_edgei_185:
		next_state = LEGUP_F_main_BB__crit_edgei_186;
LEGUP_F_main_BB__crit_edgei_186:
	if ((main__crit_edgei_exitcond13_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi4i14preheader_187;
	else if ((main__crit_edgei_exitcond13_reg == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgei_180;
LEGUP_F_main_BB__crit_edgeipreheader_179:
		next_state = LEGUP_F_main_BB__crit_edgei_180;
LEGUP_F_main_BB_decryptexit_209:
	if ((main_decryptexit_500 == 1'd1))
		next_state = LEGUP_F_main_BB__501_210;
	else if ((main_decryptexit_500 == 1'd0))
		next_state = LEGUP_F_main_BB__503_211;
LEGUP_F_main_BB_encryptexit_121:
		next_state = LEGUP_function_call_122;
LEGUP_F_main_BB_encryptexit_123:
		next_state = LEGUP_F_main_BB__251_124;
LEGUP_F_main_BB_lrph12i_160:
		next_state = LEGUP_function_call_161;
LEGUP_F_main_BB_lrph12i_162:
		next_state = LEGUP_F_main_BB_lrph12i_163;
LEGUP_F_main_BB_lrph12i_163:
		next_state = LEGUP_F_main_BB_lrph12i_164;
LEGUP_F_main_BB_lrph12i_164:
		next_state = LEGUP_F_main_BB_lrph12i_165;
LEGUP_F_main_BB_lrph12i_165:
		next_state = LEGUP_F_main_BB_lrph12i_166;
LEGUP_F_main_BB_lrph12i_166:
		next_state = LEGUP_F_main_BB_lrph12i_167;
LEGUP_F_main_BB_lrph12i_167:
		next_state = LEGUP_F_main_BB_lrph12i_168;
LEGUP_F_main_BB_lrph12i_168:
		next_state = LEGUP_F_main_BB_lrph12i_169;
LEGUP_F_main_BB_lrph12i_169:
		next_state = LEGUP_F_main_BB_lrph12i_170;
LEGUP_F_main_BB_lrph12i_170:
		next_state = LEGUP_F_main_BB_lrph12i_171;
LEGUP_F_main_BB_lrph12i_171:
		next_state = LEGUP_F_main_BB_lrph12i_172;
LEGUP_F_main_BB_lrph12i_172:
		next_state = LEGUP_F_main_BB_lrph12i_173;
LEGUP_F_main_BB_lrph12i_173:
		next_state = LEGUP_F_main_BB_lrph12i_174;
LEGUP_F_main_BB_lrph12i_174:
		next_state = LEGUP_F_main_BB_lrph12i_175;
LEGUP_F_main_BB_lrph12i_175:
		next_state = LEGUP_F_main_BB_lrph12i_176;
LEGUP_F_main_BB_lrph12i_176:
		next_state = LEGUP_F_main_BB_lrph12i_177;
LEGUP_F_main_BB_lrph12i_177:
		next_state = LEGUP_F_main_BB_lrph12i_178;
LEGUP_F_main_BB_lrph12i_178:
	if ((main_lrph12i_exitcond22_reg == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edgeipreheader_179;
	else if ((main_lrph12i_exitcond22_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrph12i_160;
LEGUP_F_main_BB_lrph12ipreheader_143:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_144;
LEGUP_F_main_BB_lrph12ipreheader_144:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_145;
LEGUP_F_main_BB_lrph12ipreheader_145:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_146;
LEGUP_F_main_BB_lrph12ipreheader_146:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_147;
LEGUP_F_main_BB_lrph12ipreheader_147:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_148;
LEGUP_F_main_BB_lrph12ipreheader_148:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_149;
LEGUP_F_main_BB_lrph12ipreheader_149:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_150;
LEGUP_F_main_BB_lrph12ipreheader_150:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_151;
LEGUP_F_main_BB_lrph12ipreheader_151:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_152;
LEGUP_F_main_BB_lrph12ipreheader_152:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_153;
LEGUP_F_main_BB_lrph12ipreheader_153:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_154;
LEGUP_F_main_BB_lrph12ipreheader_154:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_155;
LEGUP_F_main_BB_lrph12ipreheader_155:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_156;
LEGUP_F_main_BB_lrph12ipreheader_156:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_157;
LEGUP_F_main_BB_lrph12ipreheader_157:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_158;
LEGUP_F_main_BB_lrph12ipreheader_158:
		next_state = LEGUP_F_main_BB_lrph12ipreheader_159;
LEGUP_F_main_BB_lrph12ipreheader_159:
		next_state = LEGUP_F_main_BB_lrph12i_160;
LEGUP_F_main_BB_lrphi20_198:
		next_state = LEGUP_F_main_BB_lrphi20_199;
LEGUP_F_main_BB_lrphi20_199:
		next_state = LEGUP_F_main_BB_lrphi20_200;
LEGUP_F_main_BB_lrphi20_200:
	if ((main_lrphi20_485 == 1'd1))
		next_state = LEGUP_F_main_BB__486_201;
	else if ((main_lrphi20_485 == 1'd0))
		next_state = LEGUP_F_main_BB__488_204;
LEGUP_F_main_BB_lrphi_110:
		next_state = LEGUP_F_main_BB_lrphi_111;
LEGUP_F_main_BB_lrphi_111:
		next_state = LEGUP_F_main_BB_lrphi_112;
LEGUP_F_main_BB_lrphi_112:
	if ((main_lrphi_236 == 1'd1))
		next_state = LEGUP_F_main_BB__237_113;
	else if ((main_lrphi_236 == 1'd0))
		next_state = LEGUP_F_main_BB__239_116;
LEGUP_F_main_BB_lrphipreheader_109:
		next_state = LEGUP_F_main_BB_lrphi_110;
LEGUP_F_main_BB_preheaderi4i14_188:
		next_state = LEGUP_F_main_BB_preheaderi4i14_189;
LEGUP_F_main_BB_preheaderi4i14_189:
		next_state = LEGUP_F_main_BB_preheaderi4i14_190;
LEGUP_F_main_BB_preheaderi4i14_190:
		next_state = LEGUP_F_main_BB_preheaderi4i14_191;
LEGUP_F_main_BB_preheaderi4i14_191:
		next_state = LEGUP_F_main_BB_preheaderi4i14_192;
LEGUP_F_main_BB_preheaderi4i14_192:
		next_state = LEGUP_F_main_BB_preheaderi4i14_193;
LEGUP_F_main_BB_preheaderi4i14_193:
		next_state = LEGUP_F_main_BB_preheaderi4i14_194;
LEGUP_F_main_BB_preheaderi4i14_194:
		next_state = LEGUP_F_main_BB_preheaderi4i14_195;
LEGUP_F_main_BB_preheaderi4i14_195:
		next_state = LEGUP_F_main_BB_preheaderi4i14_196;
LEGUP_F_main_BB_preheaderi4i14_196:
	if ((main_preheaderi4i14_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB_AddRoundKeyexit5i15_197;
	else if ((main_preheaderi4i14_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderi4i14_188;
LEGUP_F_main_BB_preheaderi4i14preheader_187:
		next_state = LEGUP_F_main_BB_preheaderi4i14_188;
LEGUP_F_main_BB_preheaderi4i_100:
		next_state = LEGUP_F_main_BB_preheaderi4i_101;
LEGUP_F_main_BB_preheaderi4i_101:
		next_state = LEGUP_F_main_BB_preheaderi4i_102;
LEGUP_F_main_BB_preheaderi4i_102:
		next_state = LEGUP_F_main_BB_preheaderi4i_103;
LEGUP_F_main_BB_preheaderi4i_103:
		next_state = LEGUP_F_main_BB_preheaderi4i_104;
LEGUP_F_main_BB_preheaderi4i_104:
		next_state = LEGUP_F_main_BB_preheaderi4i_105;
LEGUP_F_main_BB_preheaderi4i_105:
		next_state = LEGUP_F_main_BB_preheaderi4i_106;
LEGUP_F_main_BB_preheaderi4i_106:
		next_state = LEGUP_F_main_BB_preheaderi4i_107;
LEGUP_F_main_BB_preheaderi4i_107:
		next_state = LEGUP_F_main_BB_preheaderi4i_108;
LEGUP_F_main_BB_preheaderi4i_108:
	if ((main_preheaderi4i_exitcond46_reg == 1'd1))
		next_state = LEGUP_F_main_BB_lrphipreheader_109;
	else if ((main_preheaderi4i_exitcond46_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderi4i_99;
LEGUP_F_main_BB_preheaderi4i_99:
		next_state = LEGUP_F_main_BB_preheaderi4i_100;
LEGUP_F_main_BB_preheaderi4ipreheader_98:
		next_state = LEGUP_F_main_BB_preheaderi4i_99;
LEGUP_F_main_BB_preheaderi_118:
		next_state = LEGUP_F_main_BB_preheaderi_119;
LEGUP_F_main_BB_preheaderi_119:
		next_state = LEGUP_F_main_BB_preheaderi_120;
LEGUP_F_main_BB_preheaderi_120:
	if ((main_preheaderi_exitcond41_reg == 1'd1))
		next_state = LEGUP_F_main_BB_encryptexit_121;
	else if ((main_preheaderi_exitcond41_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderi_118;
LEGUP_F_main_BB_preheaderii4_133:
		next_state = LEGUP_F_main_BB_preheaderii4_134;
LEGUP_F_main_BB_preheaderii4_134:
		next_state = LEGUP_F_main_BB_preheaderii4_135;
LEGUP_F_main_BB_preheaderii4_135:
		next_state = LEGUP_F_main_BB_preheaderii4_136;
LEGUP_F_main_BB_preheaderii4_136:
		next_state = LEGUP_F_main_BB_preheaderii4_137;
LEGUP_F_main_BB_preheaderii4_137:
		next_state = LEGUP_F_main_BB_preheaderii4_138;
LEGUP_F_main_BB_preheaderii4_138:
		next_state = LEGUP_F_main_BB_preheaderii4_139;
LEGUP_F_main_BB_preheaderii4_139:
		next_state = LEGUP_F_main_BB_preheaderii4_140;
LEGUP_F_main_BB_preheaderii4_140:
		next_state = LEGUP_F_main_BB_preheaderii4_141;
LEGUP_F_main_BB_preheaderii4_141:
		next_state = LEGUP_F_main_BB_preheaderii4_142;
LEGUP_F_main_BB_preheaderii4_142:
	if ((main_preheaderii4_exitcond23_reg == 1'd1))
		next_state = LEGUP_F_main_BB_lrph12ipreheader_143;
	else if ((main_preheaderii4_exitcond23_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderii4_133;
LEGUP_F_main_BB_preheaderii4preheader_132:
		next_state = LEGUP_F_main_BB_preheaderii4_133;
LEGUP_F_main_BB_preheaderii_28:
		next_state = LEGUP_F_main_BB_preheaderii_29;
LEGUP_F_main_BB_preheaderii_29:
		next_state = LEGUP_F_main_BB_preheaderii_30;
LEGUP_F_main_BB_preheaderii_30:
		next_state = LEGUP_F_main_BB_preheaderii_31;
LEGUP_F_main_BB_preheaderii_31:
		next_state = LEGUP_F_main_BB_preheaderii_32;
LEGUP_F_main_BB_preheaderii_32:
		next_state = LEGUP_F_main_BB_preheaderii_33;
LEGUP_F_main_BB_preheaderii_33:
		next_state = LEGUP_F_main_BB_preheaderii_34;
LEGUP_F_main_BB_preheaderii_34:
		next_state = LEGUP_F_main_BB_preheaderii_35;
LEGUP_F_main_BB_preheaderii_35:
		next_state = LEGUP_F_main_BB_preheaderii_36;
LEGUP_F_main_BB_preheaderii_36:
	if ((main_preheaderii_exitcond67_reg == 1'd1))
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_37;
	else if ((main_preheaderii_exitcond67_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderii_28;
LEGUP_F_main_BB_preheaderiipreheader_27:
		next_state = LEGUP_F_main_BB_preheaderii_28;
LEGUP_F_main_BB_preheaderipreheader_117:
		next_state = LEGUP_F_main_BB_preheaderi_118;
LEGUP_F_main_BB_preheaderloopexiti17_206:
		next_state = LEGUP_F_main_BB_preheaderloopexiti17_207;
LEGUP_F_main_BB_preheaderloopexiti17_207:
		next_state = LEGUP_F_main_BB_preheaderloopexiti17_208;
LEGUP_F_main_BB_preheaderloopexiti17_208:
	if ((main_preheaderloopexiti17_exitcond1_reg == 1'd1))
		next_state = LEGUP_F_main_BB_decryptexit_209;
	else if ((main_preheaderloopexiti17_exitcond1_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderloopexiti17_206;
LEGUP_F_main_BB_preheaderloopexiti17preheader_205:
		next_state = LEGUP_F_main_BB_preheaderloopexiti17_206;
LEGUP_function_call_122:
	if ((KeySchedule_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_encryptexit_123;
LEGUP_function_call_161:
	if ((AddRoundKey_InversMixColumn_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_lrph12i_162;
LEGUP_function_call_18:
	if ((KeySchedule_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_19;
LEGUP_function_call_63:
	if ((MixColumn_AddRoundKey_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_AddRoundKeyexiti_64;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %2*/
	/*   %j.02.i.i = phi i32 [ 0, %0 ], [ %19, %2 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_2_j02ii = 32'd0;
	end
	/* main: %2*/
	/*   %j.02.i.i = phi i32 [ 0, %0 ], [ %19, %2 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__2_26) & (memory_controller_waitrequest == 1'd0)) & (main_2_exitcond76_reg == 1'd0))) */ begin
		main_2_j02ii = main_2_19_reg;
	end
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %j.02.i.i = phi i32 [ 0, %0 ], [ %19, %2 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_2_j02ii_reg <= main_2_j02ii;
		if (start == 1'b0 && ^(main_2_j02ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_j02ii_reg"); $finish; end
	end
	/* main: %2*/
	/*   %j.02.i.i = phi i32 [ 0, %0 ], [ %19, %2 ]*/
	if ((((cur_state == LEGUP_F_main_BB__2_26) & (memory_controller_waitrequest == 1'd0)) & (main_2_exitcond76_reg == 1'd0))) begin
		main_2_j02ii_reg <= main_2_j02ii;
		if (start == 1'b0 && ^(main_2_j02ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_j02ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %scevgep77 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %j.02.i.i*/
		main_2_scevgep77 = (`TAG_g_word_a | ((480 * 32'd3) + (4 * main_2_j02ii_reg)));
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %scevgep77 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %j.02.i.i*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_scevgep77_reg <= main_2_scevgep77;
		if (start == 1'b0 && ^(main_2_scevgep77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_scevgep77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %scevgep78 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %j.02.i.i*/
		main_2_scevgep78 = (`TAG_g_word_a | ((480 * 32'd2) + (4 * main_2_j02ii_reg)));
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %scevgep78 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %j.02.i.i*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_scevgep78_reg <= main_2_scevgep78;
		if (start == 1'b0 && ^(main_2_scevgep78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_scevgep78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %scevgep79 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %j.02.i.i*/
		main_2_scevgep79 = (`TAG_g_word_a | ((480 * 32'd1) + (4 * main_2_j02ii_reg)));
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %scevgep79 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %j.02.i.i*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_scevgep79_reg <= main_2_scevgep79;
		if (start == 1'b0 && ^(main_2_scevgep79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_scevgep79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %3 = shl i32 %j.02.i.i, 2*/
		main_2_3 = (main_2_j02ii_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %3 = shl i32 %j.02.i.i, 2*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_3_reg <= main_2_3;
		if (start == 1'b0 && ^(main_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %4 = or i32 %3, 3*/
		main_2_4 = (main_2_3 | 32'd3);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %4 = or i32 %3, 3*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_4_reg <= main_2_4;
		if (start == 1'b0 && ^(main_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %scevgep80 = getelementptr [32 x i32]* @statemt, i32 0, i32 %4*/
		main_2_scevgep80 = (`TAG_g_statemt_a | (4 * main_2_4));
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %scevgep80 = getelementptr [32 x i32]* @statemt, i32 0, i32 %4*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_scevgep80_reg <= main_2_scevgep80;
		if (start == 1'b0 && ^(main_2_scevgep80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_scevgep80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %5 = or i32 %3, 2*/
		main_2_5 = (main_2_3 | 32'd2);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %5 = or i32 %3, 2*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_5_reg <= main_2_5;
		if (start == 1'b0 && ^(main_2_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %scevgep81 = getelementptr [32 x i32]* @statemt, i32 0, i32 %5*/
		main_2_scevgep81 = (`TAG_g_statemt_a | (4 * main_2_5));
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %scevgep81 = getelementptr [32 x i32]* @statemt, i32 0, i32 %5*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_scevgep81_reg <= main_2_scevgep81;
		if (start == 1'b0 && ^(main_2_scevgep81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_scevgep81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %6 = or i32 %3, 1*/
		main_2_6 = (main_2_3 | 32'd1);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %6 = or i32 %3, 1*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_6_reg <= main_2_6;
		if (start == 1'b0 && ^(main_2_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %scevgep82 = getelementptr [32 x i32]* @statemt, i32 0, i32 %6*/
		main_2_scevgep82 = (`TAG_g_statemt_a | (4 * main_2_6));
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %scevgep82 = getelementptr [32 x i32]* @statemt, i32 0, i32 %6*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_scevgep82_reg <= main_2_scevgep82;
		if (start == 1'b0 && ^(main_2_scevgep82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_scevgep82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %scevgep83 = getelementptr [32 x i32]* @statemt, i32 0, i32 %3*/
		main_2_scevgep83 = (`TAG_g_statemt_a | (4 * main_2_3));
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %scevgep83 = getelementptr [32 x i32]* @statemt, i32 0, i32 %3*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_scevgep83_reg <= main_2_scevgep83;
		if (start == 1'b0 && ^(main_2_scevgep83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_scevgep83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %scevgep84 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %j.02.i.i*/
		main_2_scevgep84 = (`TAG_g_word_a | (4 * main_2_j02ii_reg));
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %scevgep84 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %j.02.i.i*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_scevgep84_reg <= main_2_scevgep84;
		if (start == 1'b0 && ^(main_2_scevgep84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_scevgep84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %7 = load i32* %scevgep84, align 4, !tbaa !1*/
		main_2_7 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %7 = load i32* %scevgep84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_22)) begin
		main_2_7_reg <= main_2_7;
		if (start == 1'b0 && ^(main_2_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %8 = load i32* %scevgep83, align 4, !tbaa !1*/
		main_2_8 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %8 = load i32* %scevgep83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_22)) begin
		main_2_8_reg <= main_2_8;
		if (start == 1'b0 && ^(main_2_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %9 = xor i32 %8, %7*/
		main_2_9 = (main_2_8 ^ main_2_7);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %9 = xor i32 %8, %7*/
	if ((cur_state == LEGUP_F_main_BB__2_22)) begin
		main_2_9_reg <= main_2_9;
		if (start == 1'b0 && ^(main_2_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %10 = load i32* %scevgep79, align 4, !tbaa !1*/
		main_2_10 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %10 = load i32* %scevgep79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		main_2_10_reg <= main_2_10;
		if (start == 1'b0 && ^(main_2_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %11 = load i32* %scevgep82, align 4, !tbaa !1*/
		main_2_11 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %11 = load i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		main_2_11_reg <= main_2_11;
		if (start == 1'b0 && ^(main_2_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %12 = xor i32 %11, %10*/
		main_2_12 = (main_2_11 ^ main_2_10);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %12 = xor i32 %11, %10*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		main_2_12_reg <= main_2_12;
		if (start == 1'b0 && ^(main_2_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %13 = load i32* %scevgep78, align 4, !tbaa !1*/
		main_2_13 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %13 = load i32* %scevgep78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		main_2_13_reg <= main_2_13;
		if (start == 1'b0 && ^(main_2_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %14 = load i32* %scevgep81, align 4, !tbaa !1*/
		main_2_14 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %14 = load i32* %scevgep81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		main_2_14_reg <= main_2_14;
		if (start == 1'b0 && ^(main_2_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %15 = xor i32 %14, %13*/
		main_2_15 = (main_2_14 ^ main_2_13);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %15 = xor i32 %14, %13*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		main_2_15_reg <= main_2_15;
		if (start == 1'b0 && ^(main_2_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %16 = load i32* %scevgep77, align 4, !tbaa !1*/
		main_2_16 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %16 = load i32* %scevgep77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_25)) begin
		main_2_16_reg <= main_2_16;
		if (start == 1'b0 && ^(main_2_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %17 = load i32* %scevgep80, align 4, !tbaa !1*/
		main_2_17 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %17 = load i32* %scevgep80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_25)) begin
		main_2_17_reg <= main_2_17;
		if (start == 1'b0 && ^(main_2_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %18 = xor i32 %17, %16*/
		main_2_18 = (main_2_17 ^ main_2_16);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %18 = xor i32 %17, %16*/
	if ((cur_state == LEGUP_F_main_BB__2_25)) begin
		main_2_18_reg <= main_2_18;
		if (start == 1'b0 && ^(main_2_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %19 = add nsw i32 %j.02.i.i, 1*/
		main_2_19 = (main_2_j02ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %19 = add nsw i32 %j.02.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_19_reg <= main_2_19;
		if (start == 1'b0 && ^(main_2_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %exitcond76 = icmp eq i32 %19, 4*/
		main_2_exitcond76 = (main_2_19 == 32'd4);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %exitcond76 = icmp eq i32 %19, 4*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		main_2_exitcond76_reg <= main_2_exitcond76;
		if (start == 1'b0 && ^(main_2_exitcond76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_exitcond76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %j.11.i.i = phi i32 [ %28, %.preheader.i.i ], [ 0, %.preheader.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderiipreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderii_j11ii = 32'd0;
	end
	/* main: %.preheader.i.i*/
	/*   %j.11.i.i = phi i32 [ %28, %.preheader.i.i ], [ 0, %.preheader.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderii_36) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderii_exitcond67_reg == 1'd0))) */ begin
		main_preheaderii_j11ii = main_preheaderii_28_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %j.11.i.i = phi i32 [ %28, %.preheader.i.i ], [ 0, %.preheader.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderiipreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderii_j11ii_reg <= main_preheaderii_j11ii;
		if (start == 1'b0 && ^(main_preheaderii_j11ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_j11ii_reg"); $finish; end
	end
	/* main: %.preheader.i.i*/
	/*   %j.11.i.i = phi i32 [ %28, %.preheader.i.i ], [ 0, %.preheader.i.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderii_36) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderii_exitcond67_reg == 1'd0))) begin
		main_preheaderii_j11ii_reg <= main_preheaderii_j11ii;
		if (start == 1'b0 && ^(main_preheaderii_j11ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_j11ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %20 = add i32 %j.11.i.i, 3*/
		main_preheaderii_20 = (main_preheaderii_j11ii_reg + 32'd3);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %20 = add i32 %j.11.i.i, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_28)) begin
		main_preheaderii_20_reg <= main_preheaderii_20;
		if (start == 1'b0 && ^(main_preheaderii_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep68 = getelementptr [32 x i32]* @statemt, i32 0, i32 %20*/
		main_preheaderii_scevgep68 = (`TAG_g_statemt_a | (4 * main_preheaderii_20_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep68 = getelementptr [32 x i32]* @statemt, i32 0, i32 %20*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_29)) begin
		main_preheaderii_scevgep68_reg <= main_preheaderii_scevgep68;
		if (start == 1'b0 && ^(main_preheaderii_scevgep68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_scevgep68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep69 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %j.11.i.i*/
		main_preheaderii_scevgep69 = (`TAG_g_word_a | ((480 * 32'd3) + (4 * main_preheaderii_j11ii_reg)));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep69 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %j.11.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_28)) begin
		main_preheaderii_scevgep69_reg <= main_preheaderii_scevgep69;
		if (start == 1'b0 && ^(main_preheaderii_scevgep69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_scevgep69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %21 = add i32 %j.11.i.i, 2*/
		main_preheaderii_21 = (main_preheaderii_j11ii_reg + 32'd2);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %21 = add i32 %j.11.i.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_28)) begin
		main_preheaderii_21_reg <= main_preheaderii_21;
		if (start == 1'b0 && ^(main_preheaderii_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep70 = getelementptr [32 x i32]* @statemt, i32 0, i32 %21*/
		main_preheaderii_scevgep70 = (`TAG_g_statemt_a | (4 * main_preheaderii_21_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep70 = getelementptr [32 x i32]* @statemt, i32 0, i32 %21*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_29)) begin
		main_preheaderii_scevgep70_reg <= main_preheaderii_scevgep70;
		if (start == 1'b0 && ^(main_preheaderii_scevgep70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_scevgep70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep71 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %j.11.i.i*/
		main_preheaderii_scevgep71 = (`TAG_g_word_a | ((480 * 32'd2) + (4 * main_preheaderii_j11ii_reg)));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep71 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %j.11.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_28)) begin
		main_preheaderii_scevgep71_reg <= main_preheaderii_scevgep71;
		if (start == 1'b0 && ^(main_preheaderii_scevgep71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_scevgep71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %22 = add i32 %j.11.i.i, 1*/
		main_preheaderii_22 = (main_preheaderii_j11ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %22 = add i32 %j.11.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_28)) begin
		main_preheaderii_22_reg <= main_preheaderii_22;
		if (start == 1'b0 && ^(main_preheaderii_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep72 = getelementptr [32 x i32]* @statemt, i32 0, i32 %22*/
		main_preheaderii_scevgep72 = (`TAG_g_statemt_a | (4 * main_preheaderii_22_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep72 = getelementptr [32 x i32]* @statemt, i32 0, i32 %22*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_29)) begin
		main_preheaderii_scevgep72_reg <= main_preheaderii_scevgep72;
		if (start == 1'b0 && ^(main_preheaderii_scevgep72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_scevgep72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep73 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %j.11.i.i*/
		main_preheaderii_scevgep73 = (`TAG_g_word_a | ((480 * 32'd1) + (4 * main_preheaderii_j11ii_reg)));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep73 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %j.11.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_28)) begin
		main_preheaderii_scevgep73_reg <= main_preheaderii_scevgep73;
		if (start == 1'b0 && ^(main_preheaderii_scevgep73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_scevgep73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %23 = shl i32 %j.11.i.i, 2*/
		main_preheaderii_23 = (main_preheaderii_j11ii_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %23 = shl i32 %j.11.i.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_28)) begin
		main_preheaderii_23_reg <= main_preheaderii_23;
		if (start == 1'b0 && ^(main_preheaderii_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep74 = getelementptr [32 x i32]* @statemt, i32 0, i32 %23*/
		main_preheaderii_scevgep74 = (`TAG_g_statemt_a | (4 * main_preheaderii_23));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep74 = getelementptr [32 x i32]* @statemt, i32 0, i32 %23*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_28)) begin
		main_preheaderii_scevgep74_reg <= main_preheaderii_scevgep74;
		if (start == 1'b0 && ^(main_preheaderii_scevgep74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_scevgep74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep75 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %j.11.i.i*/
		main_preheaderii_scevgep75 = (`TAG_g_word_a | (4 * main_preheaderii_j11ii_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep75 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %j.11.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_28)) begin
		main_preheaderii_scevgep75_reg <= main_preheaderii_scevgep75;
		if (start == 1'b0 && ^(main_preheaderii_scevgep75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_scevgep75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %24 = load i32* %scevgep75, align 4, !tbaa !1*/
		main_preheaderii_24 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %24 = load i32* %scevgep75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_30)) begin
		main_preheaderii_24_reg <= main_preheaderii_24;
		if (start == 1'b0 && ^(main_preheaderii_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %25 = load i32* %scevgep74, align 4, !tbaa !1*/
		main_preheaderii_25 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %25 = load i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_30)) begin
		main_preheaderii_25_reg <= main_preheaderii_25;
		if (start == 1'b0 && ^(main_preheaderii_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %26 = xor i32 %25, %24*/
		main_preheaderii_26 = (main_preheaderii_25 ^ main_preheaderii_24);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %26 = xor i32 %25, %24*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_30)) begin
		main_preheaderii_26_reg <= main_preheaderii_26;
		if (start == 1'b0 && ^(main_preheaderii_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %27 = load i32* %scevgep73, align 4, !tbaa !1*/
		main_preheaderii_27 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %27 = load i32* %scevgep73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_31)) begin
		main_preheaderii_27_reg <= main_preheaderii_27;
		if (start == 1'b0 && ^(main_preheaderii_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %28 = add nsw i32 %j.11.i.i, 1*/
		main_preheaderii_28 = (main_preheaderii_j11ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %28 = add nsw i32 %j.11.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_28)) begin
		main_preheaderii_28_reg <= main_preheaderii_28;
		if (start == 1'b0 && ^(main_preheaderii_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %29 = load i32* %scevgep72, align 4, !tbaa !1*/
		main_preheaderii_29 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %29 = load i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_33)) begin
		main_preheaderii_29_reg <= main_preheaderii_29;
		if (start == 1'b0 && ^(main_preheaderii_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %30 = xor i32 %29, %27*/
		main_preheaderii_30 = (main_preheaderii_29 ^ main_preheaderii_27_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %30 = xor i32 %29, %27*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_33)) begin
		main_preheaderii_30_reg <= main_preheaderii_30;
		if (start == 1'b0 && ^(main_preheaderii_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %31 = load i32* %scevgep71, align 4, !tbaa !1*/
		main_preheaderii_31 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %31 = load i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_32)) begin
		main_preheaderii_31_reg <= main_preheaderii_31;
		if (start == 1'b0 && ^(main_preheaderii_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %32 = load i32* %scevgep70, align 4, !tbaa !1*/
		main_preheaderii_32 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %32 = load i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_preheaderii_32_reg <= main_preheaderii_32;
		if (start == 1'b0 && ^(main_preheaderii_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %33 = xor i32 %32, %31*/
		main_preheaderii_33 = (main_preheaderii_32 ^ main_preheaderii_31_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %33 = xor i32 %32, %31*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_preheaderii_33_reg <= main_preheaderii_33;
		if (start == 1'b0 && ^(main_preheaderii_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %34 = load i32* %scevgep69, align 4, !tbaa !1*/
		main_preheaderii_34 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %34 = load i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_33)) begin
		main_preheaderii_34_reg <= main_preheaderii_34;
		if (start == 1'b0 && ^(main_preheaderii_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %35 = load i32* %scevgep68, align 4, !tbaa !1*/
		main_preheaderii_35 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %35 = load i32* %scevgep68, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_preheaderii_35_reg <= main_preheaderii_35;
		if (start == 1'b0 && ^(main_preheaderii_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %36 = xor i32 %35, %34*/
		main_preheaderii_36 = (main_preheaderii_35 ^ main_preheaderii_34_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %36 = xor i32 %35, %34*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		main_preheaderii_36_reg <= main_preheaderii_36;
		if (start == 1'b0 && ^(main_preheaderii_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %exitcond67 = icmp eq i32 %28, 4*/
		main_preheaderii_exitcond67 = (main_preheaderii_28 == 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %exitcond67 = icmp eq i32 %28, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_28)) begin
		main_preheaderii_exitcond67_reg <= main_preheaderii_exitcond67;
		if (start == 1'b0 && ^(main_preheaderii_exitcond67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_exitcond67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %37 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_37 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %37 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexitipreheader_37_reg <= main_AddRoundKeyexitipreheader_37;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %38 = and i32 %37, 15*/
		main_AddRoundKeyexitipreheader_38 = (main_AddRoundKeyexitipreheader_37 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %38 = and i32 %37, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexitipreheader_38_reg <= main_AddRoundKeyexitipreheader_38;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %39 = ashr i32 %37, 4*/
		main_AddRoundKeyexitipreheader_39 = ($signed(main_AddRoundKeyexitipreheader_37) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %39 = ashr i32 %37, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexitipreheader_39_reg <= main_AddRoundKeyexitipreheader_39;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %40 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %39, i32 %38*/
		main_AddRoundKeyexitipreheader_40 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexitipreheader_39) + (4 * main_AddRoundKeyexitipreheader_38)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %40 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %39, i32 %38*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexitipreheader_40_reg <= main_AddRoundKeyexitipreheader_40;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %41 = load i32* %40, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_41 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %41 = load i32* %40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_47)) begin
		main_AddRoundKeyexitipreheader_41_reg <= main_AddRoundKeyexitipreheader_41;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %42 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_42 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %42 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexitipreheader_42_reg <= main_AddRoundKeyexitipreheader_42;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %43 = and i32 %42, 15*/
		main_AddRoundKeyexitipreheader_43 = (main_AddRoundKeyexitipreheader_42 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %43 = and i32 %42, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexitipreheader_43_reg <= main_AddRoundKeyexitipreheader_43;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %44 = ashr i32 %42, 4*/
		main_AddRoundKeyexitipreheader_44 = ($signed(main_AddRoundKeyexitipreheader_42) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %44 = ashr i32 %42, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexitipreheader_44_reg <= main_AddRoundKeyexitipreheader_44;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %45 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %44, i32 %43*/
		main_AddRoundKeyexitipreheader_45 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexitipreheader_44) + (4 * main_AddRoundKeyexitipreheader_43)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %45 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %44, i32 %43*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		main_AddRoundKeyexitipreheader_45_reg <= main_AddRoundKeyexitipreheader_45;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %46 = load i32* %45, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_46 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %46 = load i32* %45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_47)) begin
		main_AddRoundKeyexitipreheader_46_reg <= main_AddRoundKeyexitipreheader_46;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %47 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_47 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %47 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexitipreheader_47_reg <= main_AddRoundKeyexitipreheader_47;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %48 = and i32 %47, 15*/
		main_AddRoundKeyexitipreheader_48 = (main_AddRoundKeyexitipreheader_47 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %48 = and i32 %47, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexitipreheader_48_reg <= main_AddRoundKeyexitipreheader_48;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %49 = ashr i32 %47, 4*/
		main_AddRoundKeyexitipreheader_49 = ($signed(main_AddRoundKeyexitipreheader_47) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %49 = ashr i32 %47, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexitipreheader_49_reg <= main_AddRoundKeyexitipreheader_49;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %50 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %49, i32 %48*/
		main_AddRoundKeyexitipreheader_50 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexitipreheader_49) + (4 * main_AddRoundKeyexitipreheader_48)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %50 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %49, i32 %48*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexitipreheader_50_reg <= main_AddRoundKeyexitipreheader_50;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_51 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		main_AddRoundKeyexitipreheader_51_reg <= main_AddRoundKeyexitipreheader_51;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %52 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_52 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %52 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexitipreheader_52_reg <= main_AddRoundKeyexitipreheader_52;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %53 = and i32 %52, 15*/
		main_AddRoundKeyexitipreheader_53 = (main_AddRoundKeyexitipreheader_52 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %53 = and i32 %52, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexitipreheader_53_reg <= main_AddRoundKeyexitipreheader_53;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %54 = ashr i32 %52, 4*/
		main_AddRoundKeyexitipreheader_54 = ($signed(main_AddRoundKeyexitipreheader_52) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %54 = ashr i32 %52, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexitipreheader_54_reg <= main_AddRoundKeyexitipreheader_54;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %55 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %54, i32 %53*/
		main_AddRoundKeyexitipreheader_55 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexitipreheader_54) + (4 * main_AddRoundKeyexitipreheader_53)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %55 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %54, i32 %53*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		main_AddRoundKeyexitipreheader_55_reg <= main_AddRoundKeyexitipreheader_55;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_56 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		main_AddRoundKeyexitipreheader_56_reg <= main_AddRoundKeyexitipreheader_56;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %57 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_57 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %57 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexitipreheader_57_reg <= main_AddRoundKeyexitipreheader_57;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %58 = and i32 %57, 15*/
		main_AddRoundKeyexitipreheader_58 = (main_AddRoundKeyexitipreheader_57 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %58 = and i32 %57, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexitipreheader_58_reg <= main_AddRoundKeyexitipreheader_58;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %59 = ashr i32 %57, 4*/
		main_AddRoundKeyexitipreheader_59 = ($signed(main_AddRoundKeyexitipreheader_57) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %59 = ashr i32 %57, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexitipreheader_59_reg <= main_AddRoundKeyexitipreheader_59;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %60 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %59, i32 %58*/
		main_AddRoundKeyexitipreheader_60 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexitipreheader_59) + (4 * main_AddRoundKeyexitipreheader_58)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %60 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %59, i32 %58*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexitipreheader_60_reg <= main_AddRoundKeyexitipreheader_60;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %61 = load i32* %60, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_61 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %61 = load i32* %60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_49)) begin
		main_AddRoundKeyexitipreheader_61_reg <= main_AddRoundKeyexitipreheader_61;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %62 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_62 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %62 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexitipreheader_62_reg <= main_AddRoundKeyexitipreheader_62;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %63 = and i32 %62, 15*/
		main_AddRoundKeyexitipreheader_63 = (main_AddRoundKeyexitipreheader_62 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %63 = and i32 %62, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexitipreheader_63_reg <= main_AddRoundKeyexitipreheader_63;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %64 = ashr i32 %62, 4*/
		main_AddRoundKeyexitipreheader_64 = ($signed(main_AddRoundKeyexitipreheader_62) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %64 = ashr i32 %62, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexitipreheader_64_reg <= main_AddRoundKeyexitipreheader_64;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %65 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %64, i32 %63*/
		main_AddRoundKeyexitipreheader_65 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexitipreheader_64) + (4 * main_AddRoundKeyexitipreheader_63)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %65 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %64, i32 %63*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		main_AddRoundKeyexitipreheader_65_reg <= main_AddRoundKeyexitipreheader_65;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %66 = load i32* %65, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_66 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %66 = load i32* %65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_49)) begin
		main_AddRoundKeyexitipreheader_66_reg <= main_AddRoundKeyexitipreheader_66;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %67 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_67 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %67 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexitipreheader_67_reg <= main_AddRoundKeyexitipreheader_67;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %68 = and i32 %67, 15*/
		main_AddRoundKeyexitipreheader_68 = (main_AddRoundKeyexitipreheader_67 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %68 = and i32 %67, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexitipreheader_68_reg <= main_AddRoundKeyexitipreheader_68;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %69 = ashr i32 %67, 4*/
		main_AddRoundKeyexitipreheader_69 = ($signed(main_AddRoundKeyexitipreheader_67) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %69 = ashr i32 %67, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexitipreheader_69_reg <= main_AddRoundKeyexitipreheader_69;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %70 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %69, i32 %68*/
		main_AddRoundKeyexitipreheader_70 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexitipreheader_69) + (4 * main_AddRoundKeyexitipreheader_68)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %70 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %69, i32 %68*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexitipreheader_70_reg <= main_AddRoundKeyexitipreheader_70;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %71 = load i32* %70, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_71 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %71 = load i32* %70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		main_AddRoundKeyexitipreheader_71_reg <= main_AddRoundKeyexitipreheader_71;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %72 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_72 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %72 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexitipreheader_72_reg <= main_AddRoundKeyexitipreheader_72;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %73 = and i32 %72, 15*/
		main_AddRoundKeyexitipreheader_73 = (main_AddRoundKeyexitipreheader_72 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %73 = and i32 %72, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexitipreheader_73_reg <= main_AddRoundKeyexitipreheader_73;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %74 = ashr i32 %72, 4*/
		main_AddRoundKeyexitipreheader_74 = ($signed(main_AddRoundKeyexitipreheader_72) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %74 = ashr i32 %72, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexitipreheader_74_reg <= main_AddRoundKeyexitipreheader_74;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %75 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %74, i32 %73*/
		main_AddRoundKeyexitipreheader_75 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexitipreheader_74) + (4 * main_AddRoundKeyexitipreheader_73)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %75 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %74, i32 %73*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		main_AddRoundKeyexitipreheader_75_reg <= main_AddRoundKeyexitipreheader_75;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %76 = load i32* %75, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_76 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %76 = load i32* %75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		main_AddRoundKeyexitipreheader_76_reg <= main_AddRoundKeyexitipreheader_76;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %77 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_77 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %77 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexitipreheader_77_reg <= main_AddRoundKeyexitipreheader_77;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %78 = and i32 %77, 15*/
		main_AddRoundKeyexitipreheader_78 = (main_AddRoundKeyexitipreheader_77 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %78 = and i32 %77, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexitipreheader_78_reg <= main_AddRoundKeyexitipreheader_78;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %79 = ashr i32 %77, 4*/
		main_AddRoundKeyexitipreheader_79 = ($signed(main_AddRoundKeyexitipreheader_77) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %79 = ashr i32 %77, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexitipreheader_79_reg <= main_AddRoundKeyexitipreheader_79;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %80 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %79, i32 %78*/
		main_AddRoundKeyexitipreheader_80 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexitipreheader_79) + (4 * main_AddRoundKeyexitipreheader_78)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %80 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %79, i32 %78*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexitipreheader_80_reg <= main_AddRoundKeyexitipreheader_80;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %81 = load i32* %80, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_81 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %81 = load i32* %80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_AddRoundKeyexitipreheader_81_reg <= main_AddRoundKeyexitipreheader_81;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %82 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_82 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %82 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexitipreheader_82_reg <= main_AddRoundKeyexitipreheader_82;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %83 = and i32 %82, 15*/
		main_AddRoundKeyexitipreheader_83 = (main_AddRoundKeyexitipreheader_82 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %83 = and i32 %82, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexitipreheader_83_reg <= main_AddRoundKeyexitipreheader_83;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %84 = ashr i32 %82, 4*/
		main_AddRoundKeyexitipreheader_84 = ($signed(main_AddRoundKeyexitipreheader_82) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %84 = ashr i32 %82, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexitipreheader_84_reg <= main_AddRoundKeyexitipreheader_84;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %85 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %84, i32 %83*/
		main_AddRoundKeyexitipreheader_85 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexitipreheader_84) + (4 * main_AddRoundKeyexitipreheader_83)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %85 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %84, i32 %83*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		main_AddRoundKeyexitipreheader_85_reg <= main_AddRoundKeyexitipreheader_85;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_86 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		main_AddRoundKeyexitipreheader_86_reg <= main_AddRoundKeyexitipreheader_86;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %87 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_87 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %87 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_AddRoundKeyexitipreheader_87_reg <= main_AddRoundKeyexitipreheader_87;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %88 = and i32 %87, 15*/
		main_AddRoundKeyexitipreheader_88 = (main_AddRoundKeyexitipreheader_87 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %88 = and i32 %87, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_AddRoundKeyexitipreheader_88_reg <= main_AddRoundKeyexitipreheader_88;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %89 = ashr i32 %87, 4*/
		main_AddRoundKeyexitipreheader_89 = ($signed(main_AddRoundKeyexitipreheader_87) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %89 = ashr i32 %87, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_AddRoundKeyexitipreheader_89_reg <= main_AddRoundKeyexitipreheader_89;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %90 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %89, i32 %88*/
		main_AddRoundKeyexitipreheader_90 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexitipreheader_89) + (4 * main_AddRoundKeyexitipreheader_88)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %90 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %89, i32 %88*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_AddRoundKeyexitipreheader_90_reg <= main_AddRoundKeyexitipreheader_90;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %91 = load i32* %90, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_91 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %91 = load i32* %90, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_AddRoundKeyexitipreheader_91_reg <= main_AddRoundKeyexitipreheader_91;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %92 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_92 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %92 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_AddRoundKeyexitipreheader_92_reg <= main_AddRoundKeyexitipreheader_92;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %93 = and i32 %92, 15*/
		main_AddRoundKeyexitipreheader_93 = (main_AddRoundKeyexitipreheader_92 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %93 = and i32 %92, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_AddRoundKeyexitipreheader_93_reg <= main_AddRoundKeyexitipreheader_93;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %94 = ashr i32 %92, 4*/
		main_AddRoundKeyexitipreheader_94 = ($signed(main_AddRoundKeyexitipreheader_92) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %94 = ashr i32 %92, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_AddRoundKeyexitipreheader_94_reg <= main_AddRoundKeyexitipreheader_94;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %95 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %94, i32 %93*/
		main_AddRoundKeyexitipreheader_95 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexitipreheader_94) + (4 * main_AddRoundKeyexitipreheader_93)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %95 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %94, i32 %93*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		main_AddRoundKeyexitipreheader_95_reg <= main_AddRoundKeyexitipreheader_95;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %96 = load i32* %95, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_96 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %96 = load i32* %95, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		main_AddRoundKeyexitipreheader_96_reg <= main_AddRoundKeyexitipreheader_96;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %97 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_97 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %97 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_45)) begin
		main_AddRoundKeyexitipreheader_97_reg <= main_AddRoundKeyexitipreheader_97;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %98 = and i32 %97, 15*/
		main_AddRoundKeyexitipreheader_98 = (main_AddRoundKeyexitipreheader_97 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %98 = and i32 %97, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_45)) begin
		main_AddRoundKeyexitipreheader_98_reg <= main_AddRoundKeyexitipreheader_98;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %99 = ashr i32 %97, 4*/
		main_AddRoundKeyexitipreheader_99 = ($signed(main_AddRoundKeyexitipreheader_97) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %99 = ashr i32 %97, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_45)) begin
		main_AddRoundKeyexitipreheader_99_reg <= main_AddRoundKeyexitipreheader_99;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %100 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %99, i32 %98*/
		main_AddRoundKeyexitipreheader_100 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexitipreheader_99) + (4 * main_AddRoundKeyexitipreheader_98)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %100 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %99, i32 %98*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_45)) begin
		main_AddRoundKeyexitipreheader_100_reg <= main_AddRoundKeyexitipreheader_100;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %101 = load i32* %100, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_101 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %101 = load i32* %100, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_AddRoundKeyexitipreheader_101_reg <= main_AddRoundKeyexitipreheader_101;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %102 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_102 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %102 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_45)) begin
		main_AddRoundKeyexitipreheader_102_reg <= main_AddRoundKeyexitipreheader_102;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %103 = and i32 %102, 15*/
		main_AddRoundKeyexitipreheader_103 = (main_AddRoundKeyexitipreheader_102 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %103 = and i32 %102, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_45)) begin
		main_AddRoundKeyexitipreheader_103_reg <= main_AddRoundKeyexitipreheader_103;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %104 = ashr i32 %102, 4*/
		main_AddRoundKeyexitipreheader_104 = ($signed(main_AddRoundKeyexitipreheader_102) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %104 = ashr i32 %102, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_45)) begin
		main_AddRoundKeyexitipreheader_104_reg <= main_AddRoundKeyexitipreheader_104;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %105 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %104, i32 %103*/
		main_AddRoundKeyexitipreheader_105 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexitipreheader_104) + (4 * main_AddRoundKeyexitipreheader_103)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %105 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %104, i32 %103*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_45)) begin
		main_AddRoundKeyexitipreheader_105_reg <= main_AddRoundKeyexitipreheader_105;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %106 = load i32* %105, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_106 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %106 = load i32* %105, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		main_AddRoundKeyexitipreheader_106_reg <= main_AddRoundKeyexitipreheader_106;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %107 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_107 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %107 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_46)) begin
		main_AddRoundKeyexitipreheader_107_reg <= main_AddRoundKeyexitipreheader_107;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %108 = and i32 %107, 15*/
		main_AddRoundKeyexitipreheader_108 = (main_AddRoundKeyexitipreheader_107 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %108 = and i32 %107, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_46)) begin
		main_AddRoundKeyexitipreheader_108_reg <= main_AddRoundKeyexitipreheader_108;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %109 = ashr i32 %107, 4*/
		main_AddRoundKeyexitipreheader_109 = ($signed(main_AddRoundKeyexitipreheader_107) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %109 = ashr i32 %107, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_46)) begin
		main_AddRoundKeyexitipreheader_109_reg <= main_AddRoundKeyexitipreheader_109;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %110 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %109, i32 %108*/
		main_AddRoundKeyexitipreheader_110 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexitipreheader_109) + (4 * main_AddRoundKeyexitipreheader_108)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %110 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %109, i32 %108*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_46)) begin
		main_AddRoundKeyexitipreheader_110_reg <= main_AddRoundKeyexitipreheader_110;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %111 = load i32* %110, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_111 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %111 = load i32* %110, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_AddRoundKeyexitipreheader_111_reg <= main_AddRoundKeyexitipreheader_111;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %112 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_112 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %112 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_46)) begin
		main_AddRoundKeyexitipreheader_112_reg <= main_AddRoundKeyexitipreheader_112;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %113 = and i32 %112, 15*/
		main_AddRoundKeyexitipreheader_113 = (main_AddRoundKeyexitipreheader_112 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %113 = and i32 %112, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_46)) begin
		main_AddRoundKeyexitipreheader_113_reg <= main_AddRoundKeyexitipreheader_113;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %114 = ashr i32 %112, 4*/
		main_AddRoundKeyexitipreheader_114 = ($signed(main_AddRoundKeyexitipreheader_112) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %114 = ashr i32 %112, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_46)) begin
		main_AddRoundKeyexitipreheader_114_reg <= main_AddRoundKeyexitipreheader_114;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %115 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %114, i32 %113*/
		main_AddRoundKeyexitipreheader_115 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexitipreheader_114) + (4 * main_AddRoundKeyexitipreheader_113)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %115 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %114, i32 %113*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_46)) begin
		main_AddRoundKeyexitipreheader_115_reg <= main_AddRoundKeyexitipreheader_115;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %116 = load i32* %115, align 4, !tbaa !1*/
		main_AddRoundKeyexitipreheader_116 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %116 = load i32* %115, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		main_AddRoundKeyexitipreheader_116_reg <= main_AddRoundKeyexitipreheader_116;
		if (start == 1'b0 && ^(main_AddRoundKeyexitipreheader_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexitipreheader_116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %indvar64 = phi i32 [ %indvar.next65, %AddRoundKey.exit.i ], [ 0, %AddRoundKey.exit.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_61) & (memory_controller_waitrequest == 1'd0))) begin
		main_AddRoundKeyexiti_indvar64 = 32'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %indvar64 = phi i32 [ %indvar.next65, %AddRoundKey.exit.i ], [ 0, %AddRoundKey.exit.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_88) & (memory_controller_waitrequest == 1'd0)) & (main_AddRoundKeyexiti_exitcond66_reg == 1'd0))) */ begin
		main_AddRoundKeyexiti_indvar64 = main_AddRoundKeyexiti_indvarnext65_reg;
	end
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %indvar64 = phi i32 [ %indvar.next65, %AddRoundKey.exit.i ], [ 0, %AddRoundKey.exit.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_61) & (memory_controller_waitrequest == 1'd0))) begin
		main_AddRoundKeyexiti_indvar64_reg <= main_AddRoundKeyexiti_indvar64;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_indvar64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_indvar64_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %indvar64 = phi i32 [ %indvar.next65, %AddRoundKey.exit.i ], [ 0, %AddRoundKey.exit.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_88) & (memory_controller_waitrequest == 1'd0)) & (main_AddRoundKeyexiti_exitcond66_reg == 1'd0))) begin
		main_AddRoundKeyexiti_indvar64_reg <= main_AddRoundKeyexiti_indvar64;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_indvar64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_indvar64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %i.010.i = add i32 %indvar64, 1*/
		main_AddRoundKeyexiti_i010i = (main_AddRoundKeyexiti_indvar64_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %i.010.i = add i32 %indvar64, 1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_62)) begin
		main_AddRoundKeyexiti_i010i_reg <= main_AddRoundKeyexiti_i010i;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_i010i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_i010i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %118 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_118 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %118 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_66)) begin
		main_AddRoundKeyexiti_118_reg <= main_AddRoundKeyexiti_118;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %119 = and i32 %118, 15*/
		main_AddRoundKeyexiti_119 = (main_AddRoundKeyexiti_118 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %119 = and i32 %118, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_66)) begin
		main_AddRoundKeyexiti_119_reg <= main_AddRoundKeyexiti_119;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %120 = ashr i32 %118, 4*/
		main_AddRoundKeyexiti_120 = ($signed(main_AddRoundKeyexiti_118) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %120 = ashr i32 %118, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_66)) begin
		main_AddRoundKeyexiti_120_reg <= main_AddRoundKeyexiti_120;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %121 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %120, i32 %119*/
		main_AddRoundKeyexiti_121 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexiti_120) + (4 * main_AddRoundKeyexiti_119)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %121 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %120, i32 %119*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_66)) begin
		main_AddRoundKeyexiti_121_reg <= main_AddRoundKeyexiti_121;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %122 = load i32* %121, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_122 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %122 = load i32* %121, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_74)) begin
		main_AddRoundKeyexiti_122_reg <= main_AddRoundKeyexiti_122;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %123 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_123 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %123 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_66)) begin
		main_AddRoundKeyexiti_123_reg <= main_AddRoundKeyexiti_123;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %124 = and i32 %123, 15*/
		main_AddRoundKeyexiti_124 = (main_AddRoundKeyexiti_123 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %124 = and i32 %123, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_66)) begin
		main_AddRoundKeyexiti_124_reg <= main_AddRoundKeyexiti_124;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %125 = ashr i32 %123, 4*/
		main_AddRoundKeyexiti_125 = ($signed(main_AddRoundKeyexiti_123) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %125 = ashr i32 %123, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_66)) begin
		main_AddRoundKeyexiti_125_reg <= main_AddRoundKeyexiti_125;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %126 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %125, i32 %124*/
		main_AddRoundKeyexiti_126 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexiti_125) + (4 * main_AddRoundKeyexiti_124)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %126 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %125, i32 %124*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_66)) begin
		main_AddRoundKeyexiti_126_reg <= main_AddRoundKeyexiti_126;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %127 = load i32* %126, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_127 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %127 = load i32* %126, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_74)) begin
		main_AddRoundKeyexiti_127_reg <= main_AddRoundKeyexiti_127;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %128 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_128 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %128 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_67)) begin
		main_AddRoundKeyexiti_128_reg <= main_AddRoundKeyexiti_128;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %129 = and i32 %128, 15*/
		main_AddRoundKeyexiti_129 = (main_AddRoundKeyexiti_128 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %129 = and i32 %128, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_67)) begin
		main_AddRoundKeyexiti_129_reg <= main_AddRoundKeyexiti_129;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %130 = ashr i32 %128, 4*/
		main_AddRoundKeyexiti_130 = ($signed(main_AddRoundKeyexiti_128) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %130 = ashr i32 %128, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_67)) begin
		main_AddRoundKeyexiti_130_reg <= main_AddRoundKeyexiti_130;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %131 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %130, i32 %129*/
		main_AddRoundKeyexiti_131 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexiti_130) + (4 * main_AddRoundKeyexiti_129)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %131 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %130, i32 %129*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_67)) begin
		main_AddRoundKeyexiti_131_reg <= main_AddRoundKeyexiti_131;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %132 = load i32* %131, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_132 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %132 = load i32* %131, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_75)) begin
		main_AddRoundKeyexiti_132_reg <= main_AddRoundKeyexiti_132;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %133 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_133 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %133 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_67)) begin
		main_AddRoundKeyexiti_133_reg <= main_AddRoundKeyexiti_133;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %134 = and i32 %133, 15*/
		main_AddRoundKeyexiti_134 = (main_AddRoundKeyexiti_133 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %134 = and i32 %133, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_67)) begin
		main_AddRoundKeyexiti_134_reg <= main_AddRoundKeyexiti_134;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_134_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %135 = ashr i32 %133, 4*/
		main_AddRoundKeyexiti_135 = ($signed(main_AddRoundKeyexiti_133) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %135 = ashr i32 %133, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_67)) begin
		main_AddRoundKeyexiti_135_reg <= main_AddRoundKeyexiti_135;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %136 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %135, i32 %134*/
		main_AddRoundKeyexiti_136 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexiti_135) + (4 * main_AddRoundKeyexiti_134)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %136 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %135, i32 %134*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_67)) begin
		main_AddRoundKeyexiti_136_reg <= main_AddRoundKeyexiti_136;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %137 = load i32* %136, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_137 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %137 = load i32* %136, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_75)) begin
		main_AddRoundKeyexiti_137_reg <= main_AddRoundKeyexiti_137;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %138 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_138 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %138 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_68)) begin
		main_AddRoundKeyexiti_138_reg <= main_AddRoundKeyexiti_138;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %139 = and i32 %138, 15*/
		main_AddRoundKeyexiti_139 = (main_AddRoundKeyexiti_138 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %139 = and i32 %138, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_68)) begin
		main_AddRoundKeyexiti_139_reg <= main_AddRoundKeyexiti_139;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %140 = ashr i32 %138, 4*/
		main_AddRoundKeyexiti_140 = ($signed(main_AddRoundKeyexiti_138) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %140 = ashr i32 %138, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_68)) begin
		main_AddRoundKeyexiti_140_reg <= main_AddRoundKeyexiti_140;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %141 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %140, i32 %139*/
		main_AddRoundKeyexiti_141 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexiti_140) + (4 * main_AddRoundKeyexiti_139)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %141 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %140, i32 %139*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_68)) begin
		main_AddRoundKeyexiti_141_reg <= main_AddRoundKeyexiti_141;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %142 = load i32* %141, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_142 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %142 = load i32* %141, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_76)) begin
		main_AddRoundKeyexiti_142_reg <= main_AddRoundKeyexiti_142;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %143 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_143 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %143 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_68)) begin
		main_AddRoundKeyexiti_143_reg <= main_AddRoundKeyexiti_143;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %144 = and i32 %143, 15*/
		main_AddRoundKeyexiti_144 = (main_AddRoundKeyexiti_143 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %144 = and i32 %143, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_68)) begin
		main_AddRoundKeyexiti_144_reg <= main_AddRoundKeyexiti_144;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %145 = ashr i32 %143, 4*/
		main_AddRoundKeyexiti_145 = ($signed(main_AddRoundKeyexiti_143) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %145 = ashr i32 %143, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_68)) begin
		main_AddRoundKeyexiti_145_reg <= main_AddRoundKeyexiti_145;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %146 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %145, i32 %144*/
		main_AddRoundKeyexiti_146 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexiti_145) + (4 * main_AddRoundKeyexiti_144)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %146 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %145, i32 %144*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_68)) begin
		main_AddRoundKeyexiti_146_reg <= main_AddRoundKeyexiti_146;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %147 = load i32* %146, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_147 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %147 = load i32* %146, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_76)) begin
		main_AddRoundKeyexiti_147_reg <= main_AddRoundKeyexiti_147;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %148 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_148 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %148 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_69)) begin
		main_AddRoundKeyexiti_148_reg <= main_AddRoundKeyexiti_148;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %149 = and i32 %148, 15*/
		main_AddRoundKeyexiti_149 = (main_AddRoundKeyexiti_148 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %149 = and i32 %148, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_69)) begin
		main_AddRoundKeyexiti_149_reg <= main_AddRoundKeyexiti_149;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %150 = ashr i32 %148, 4*/
		main_AddRoundKeyexiti_150 = ($signed(main_AddRoundKeyexiti_148) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %150 = ashr i32 %148, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_69)) begin
		main_AddRoundKeyexiti_150_reg <= main_AddRoundKeyexiti_150;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %151 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %150, i32 %149*/
		main_AddRoundKeyexiti_151 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexiti_150) + (4 * main_AddRoundKeyexiti_149)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %151 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %150, i32 %149*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_69)) begin
		main_AddRoundKeyexiti_151_reg <= main_AddRoundKeyexiti_151;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %152 = load i32* %151, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_152 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %152 = load i32* %151, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_77)) begin
		main_AddRoundKeyexiti_152_reg <= main_AddRoundKeyexiti_152;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %153 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_153 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %153 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_69)) begin
		main_AddRoundKeyexiti_153_reg <= main_AddRoundKeyexiti_153;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %154 = and i32 %153, 15*/
		main_AddRoundKeyexiti_154 = (main_AddRoundKeyexiti_153 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %154 = and i32 %153, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_69)) begin
		main_AddRoundKeyexiti_154_reg <= main_AddRoundKeyexiti_154;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %155 = ashr i32 %153, 4*/
		main_AddRoundKeyexiti_155 = ($signed(main_AddRoundKeyexiti_153) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %155 = ashr i32 %153, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_69)) begin
		main_AddRoundKeyexiti_155_reg <= main_AddRoundKeyexiti_155;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %156 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %155, i32 %154*/
		main_AddRoundKeyexiti_156 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexiti_155) + (4 * main_AddRoundKeyexiti_154)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %156 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %155, i32 %154*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_69)) begin
		main_AddRoundKeyexiti_156_reg <= main_AddRoundKeyexiti_156;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %157 = load i32* %156, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_157 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %157 = load i32* %156, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_77)) begin
		main_AddRoundKeyexiti_157_reg <= main_AddRoundKeyexiti_157;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %158 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_158 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %158 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_70)) begin
		main_AddRoundKeyexiti_158_reg <= main_AddRoundKeyexiti_158;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %159 = and i32 %158, 15*/
		main_AddRoundKeyexiti_159 = (main_AddRoundKeyexiti_158 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %159 = and i32 %158, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_70)) begin
		main_AddRoundKeyexiti_159_reg <= main_AddRoundKeyexiti_159;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %160 = ashr i32 %158, 4*/
		main_AddRoundKeyexiti_160 = ($signed(main_AddRoundKeyexiti_158) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %160 = ashr i32 %158, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_70)) begin
		main_AddRoundKeyexiti_160_reg <= main_AddRoundKeyexiti_160;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %161 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %160, i32 %159*/
		main_AddRoundKeyexiti_161 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexiti_160) + (4 * main_AddRoundKeyexiti_159)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %161 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %160, i32 %159*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_70)) begin
		main_AddRoundKeyexiti_161_reg <= main_AddRoundKeyexiti_161;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %162 = load i32* %161, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_162 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %162 = load i32* %161, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_78)) begin
		main_AddRoundKeyexiti_162_reg <= main_AddRoundKeyexiti_162;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_162_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %163 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_163 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %163 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_70)) begin
		main_AddRoundKeyexiti_163_reg <= main_AddRoundKeyexiti_163;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %164 = and i32 %163, 15*/
		main_AddRoundKeyexiti_164 = (main_AddRoundKeyexiti_163 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %164 = and i32 %163, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_70)) begin
		main_AddRoundKeyexiti_164_reg <= main_AddRoundKeyexiti_164;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_164_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %165 = ashr i32 %163, 4*/
		main_AddRoundKeyexiti_165 = ($signed(main_AddRoundKeyexiti_163) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %165 = ashr i32 %163, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_70)) begin
		main_AddRoundKeyexiti_165_reg <= main_AddRoundKeyexiti_165;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %166 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %165, i32 %164*/
		main_AddRoundKeyexiti_166 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexiti_165) + (4 * main_AddRoundKeyexiti_164)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %166 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %165, i32 %164*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_70)) begin
		main_AddRoundKeyexiti_166_reg <= main_AddRoundKeyexiti_166;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_166_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %167 = load i32* %166, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_167 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %167 = load i32* %166, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_78)) begin
		main_AddRoundKeyexiti_167_reg <= main_AddRoundKeyexiti_167;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_167_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %168 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_168 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %168 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_71)) begin
		main_AddRoundKeyexiti_168_reg <= main_AddRoundKeyexiti_168;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_168_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %169 = and i32 %168, 15*/
		main_AddRoundKeyexiti_169 = (main_AddRoundKeyexiti_168 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %169 = and i32 %168, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_71)) begin
		main_AddRoundKeyexiti_169_reg <= main_AddRoundKeyexiti_169;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %170 = ashr i32 %168, 4*/
		main_AddRoundKeyexiti_170 = ($signed(main_AddRoundKeyexiti_168) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %170 = ashr i32 %168, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_71)) begin
		main_AddRoundKeyexiti_170_reg <= main_AddRoundKeyexiti_170;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %171 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %170, i32 %169*/
		main_AddRoundKeyexiti_171 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexiti_170) + (4 * main_AddRoundKeyexiti_169)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %171 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %170, i32 %169*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_71)) begin
		main_AddRoundKeyexiti_171_reg <= main_AddRoundKeyexiti_171;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %172 = load i32* %171, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_172 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %172 = load i32* %171, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		main_AddRoundKeyexiti_172_reg <= main_AddRoundKeyexiti_172;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %173 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_173 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %173 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_71)) begin
		main_AddRoundKeyexiti_173_reg <= main_AddRoundKeyexiti_173;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %174 = and i32 %173, 15*/
		main_AddRoundKeyexiti_174 = (main_AddRoundKeyexiti_173 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %174 = and i32 %173, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_71)) begin
		main_AddRoundKeyexiti_174_reg <= main_AddRoundKeyexiti_174;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %175 = ashr i32 %173, 4*/
		main_AddRoundKeyexiti_175 = ($signed(main_AddRoundKeyexiti_173) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %175 = ashr i32 %173, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_71)) begin
		main_AddRoundKeyexiti_175_reg <= main_AddRoundKeyexiti_175;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %176 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %175, i32 %174*/
		main_AddRoundKeyexiti_176 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexiti_175) + (4 * main_AddRoundKeyexiti_174)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %176 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %175, i32 %174*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_71)) begin
		main_AddRoundKeyexiti_176_reg <= main_AddRoundKeyexiti_176;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_176_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %177 = load i32* %176, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_177 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %177 = load i32* %176, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		main_AddRoundKeyexiti_177_reg <= main_AddRoundKeyexiti_177;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %178 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_178 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %178 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_72)) begin
		main_AddRoundKeyexiti_178_reg <= main_AddRoundKeyexiti_178;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %179 = and i32 %178, 15*/
		main_AddRoundKeyexiti_179 = (main_AddRoundKeyexiti_178 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %179 = and i32 %178, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_72)) begin
		main_AddRoundKeyexiti_179_reg <= main_AddRoundKeyexiti_179;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %180 = ashr i32 %178, 4*/
		main_AddRoundKeyexiti_180 = ($signed(main_AddRoundKeyexiti_178) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %180 = ashr i32 %178, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_72)) begin
		main_AddRoundKeyexiti_180_reg <= main_AddRoundKeyexiti_180;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %181 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %180, i32 %179*/
		main_AddRoundKeyexiti_181 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexiti_180) + (4 * main_AddRoundKeyexiti_179)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %181 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %180, i32 %179*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_72)) begin
		main_AddRoundKeyexiti_181_reg <= main_AddRoundKeyexiti_181;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %182 = load i32* %181, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_182 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %182 = load i32* %181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_80)) begin
		main_AddRoundKeyexiti_182_reg <= main_AddRoundKeyexiti_182;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %183 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_183 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %183 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_72)) begin
		main_AddRoundKeyexiti_183_reg <= main_AddRoundKeyexiti_183;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %184 = and i32 %183, 15*/
		main_AddRoundKeyexiti_184 = (main_AddRoundKeyexiti_183 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %184 = and i32 %183, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_72)) begin
		main_AddRoundKeyexiti_184_reg <= main_AddRoundKeyexiti_184;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_184_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %185 = ashr i32 %183, 4*/
		main_AddRoundKeyexiti_185 = ($signed(main_AddRoundKeyexiti_183) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %185 = ashr i32 %183, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_72)) begin
		main_AddRoundKeyexiti_185_reg <= main_AddRoundKeyexiti_185;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %186 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %185, i32 %184*/
		main_AddRoundKeyexiti_186 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexiti_185) + (4 * main_AddRoundKeyexiti_184)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %186 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %185, i32 %184*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_72)) begin
		main_AddRoundKeyexiti_186_reg <= main_AddRoundKeyexiti_186;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %187 = load i32* %186, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_187 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %187 = load i32* %186, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_80)) begin
		main_AddRoundKeyexiti_187_reg <= main_AddRoundKeyexiti_187;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %188 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_188 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %188 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_73)) begin
		main_AddRoundKeyexiti_188_reg <= main_AddRoundKeyexiti_188;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %189 = and i32 %188, 15*/
		main_AddRoundKeyexiti_189 = (main_AddRoundKeyexiti_188 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %189 = and i32 %188, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_73)) begin
		main_AddRoundKeyexiti_189_reg <= main_AddRoundKeyexiti_189;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %190 = ashr i32 %188, 4*/
		main_AddRoundKeyexiti_190 = ($signed(main_AddRoundKeyexiti_188) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %190 = ashr i32 %188, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_73)) begin
		main_AddRoundKeyexiti_190_reg <= main_AddRoundKeyexiti_190;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %191 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %190, i32 %189*/
		main_AddRoundKeyexiti_191 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexiti_190) + (4 * main_AddRoundKeyexiti_189)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %191 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %190, i32 %189*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_73)) begin
		main_AddRoundKeyexiti_191_reg <= main_AddRoundKeyexiti_191;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %192 = load i32* %191, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_192 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %192 = load i32* %191, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_81)) begin
		main_AddRoundKeyexiti_192_reg <= main_AddRoundKeyexiti_192;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %193 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
		main_AddRoundKeyexiti_193 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %193 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_73)) begin
		main_AddRoundKeyexiti_193_reg <= main_AddRoundKeyexiti_193;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %194 = and i32 %193, 15*/
		main_AddRoundKeyexiti_194 = (main_AddRoundKeyexiti_193 & 32'd15);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %194 = and i32 %193, 15*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_73)) begin
		main_AddRoundKeyexiti_194_reg <= main_AddRoundKeyexiti_194;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_194_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %195 = ashr i32 %193, 4*/
		main_AddRoundKeyexiti_195 = ($signed(main_AddRoundKeyexiti_193) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %195 = ashr i32 %193, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_73)) begin
		main_AddRoundKeyexiti_195_reg <= main_AddRoundKeyexiti_195;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %196 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %195, i32 %194*/
		main_AddRoundKeyexiti_196 = (`TAG_g_Sbox_a | ((64 * main_AddRoundKeyexiti_195) + (4 * main_AddRoundKeyexiti_194)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %196 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %195, i32 %194*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_73)) begin
		main_AddRoundKeyexiti_196_reg <= main_AddRoundKeyexiti_196;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %197 = load i32* %196, align 4, !tbaa !1*/
		main_AddRoundKeyexiti_197 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %197 = load i32* %196, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_81)) begin
		main_AddRoundKeyexiti_197_reg <= main_AddRoundKeyexiti_197;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_197_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %indvar.next65 = add i32 %indvar64, 1*/
		main_AddRoundKeyexiti_indvarnext65 = (main_AddRoundKeyexiti_indvar64_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %indvar.next65 = add i32 %indvar64, 1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_62)) begin
		main_AddRoundKeyexiti_indvarnext65_reg <= main_AddRoundKeyexiti_indvarnext65;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_indvarnext65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_indvarnext65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %exitcond66 = icmp eq i32 %indvar.next65, 9*/
		main_AddRoundKeyexiti_exitcond66 = (main_AddRoundKeyexiti_indvarnext65 == 32'd9);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %exitcond66 = icmp eq i32 %indvar.next65, 9*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_62)) begin
		main_AddRoundKeyexiti_exitcond66_reg <= main_AddRoundKeyexiti_exitcond66;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_exitcond66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexiti_exitcond66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %j.02.i2.i = phi i32 [ %215, %AddRoundKey.exit._crit_edge.i ], [ 0, %AddRoundKey.exit._crit_edge.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgeipreheader_89) & (memory_controller_waitrequest == 1'd0))) begin
		main_AddRoundKeyexit_crit_edgei_j02i2i = 32'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %j.02.i2.i = phi i32 [ %215, %AddRoundKey.exit._crit_edge.i ], [ 0, %AddRoundKey.exit._crit_edge.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_97) & (memory_controller_waitrequest == 1'd0)) & (main_AddRoundKeyexit_crit_edgei_exitcond55_reg == 1'd0))) */ begin
		main_AddRoundKeyexit_crit_edgei_j02i2i = main_AddRoundKeyexit_crit_edgei_215_reg;
	end
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %j.02.i2.i = phi i32 [ %215, %AddRoundKey.exit._crit_edge.i ], [ 0, %AddRoundKey.exit._crit_edge.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgeipreheader_89) & (memory_controller_waitrequest == 1'd0))) begin
		main_AddRoundKeyexit_crit_edgei_j02i2i_reg <= main_AddRoundKeyexit_crit_edgei_j02i2i;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_j02i2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_j02i2i_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %j.02.i2.i = phi i32 [ %215, %AddRoundKey.exit._crit_edge.i ], [ 0, %AddRoundKey.exit._crit_edge.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_97) & (memory_controller_waitrequest == 1'd0)) & (main_AddRoundKeyexit_crit_edgei_exitcond55_reg == 1'd0))) begin
		main_AddRoundKeyexit_crit_edgei_j02i2i_reg <= main_AddRoundKeyexit_crit_edgei_j02i2i;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_j02i2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_j02i2i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %198 = shl i32 %j.02.i2.i, 2*/
		main_AddRoundKeyexit_crit_edgei_198 = (main_AddRoundKeyexit_crit_edgei_j02i2i_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %198 = shl i32 %j.02.i2.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_90)) begin
		main_AddRoundKeyexit_crit_edgei_198_reg <= main_AddRoundKeyexit_crit_edgei_198;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_198_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %199 = or i32 %198, 3*/
		main_AddRoundKeyexit_crit_edgei_199 = (main_AddRoundKeyexit_crit_edgei_198 | 32'd3);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %199 = or i32 %198, 3*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_90)) begin
		main_AddRoundKeyexit_crit_edgei_199_reg <= main_AddRoundKeyexit_crit_edgei_199;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep56 = getelementptr [32 x i32]* @statemt, i32 0, i32 %199*/
		main_AddRoundKeyexit_crit_edgei_scevgep56 = (`TAG_g_statemt_a | (4 * main_AddRoundKeyexit_crit_edgei_199));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep56 = getelementptr [32 x i32]* @statemt, i32 0, i32 %199*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_90)) begin
		main_AddRoundKeyexit_crit_edgei_scevgep56_reg <= main_AddRoundKeyexit_crit_edgei_scevgep56;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_scevgep56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_scevgep56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %200 = or i32 %198, 2*/
		main_AddRoundKeyexit_crit_edgei_200 = (main_AddRoundKeyexit_crit_edgei_198 | 32'd2);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %200 = or i32 %198, 2*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_90)) begin
		main_AddRoundKeyexit_crit_edgei_200_reg <= main_AddRoundKeyexit_crit_edgei_200;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep57 = getelementptr [32 x i32]* @statemt, i32 0, i32 %200*/
		main_AddRoundKeyexit_crit_edgei_scevgep57 = (`TAG_g_statemt_a | (4 * main_AddRoundKeyexit_crit_edgei_200));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep57 = getelementptr [32 x i32]* @statemt, i32 0, i32 %200*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_90)) begin
		main_AddRoundKeyexit_crit_edgei_scevgep57_reg <= main_AddRoundKeyexit_crit_edgei_scevgep57;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_scevgep57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_scevgep57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %201 = or i32 %198, 1*/
		main_AddRoundKeyexit_crit_edgei_201 = (main_AddRoundKeyexit_crit_edgei_198 | 32'd1);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %201 = or i32 %198, 1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_90)) begin
		main_AddRoundKeyexit_crit_edgei_201_reg <= main_AddRoundKeyexit_crit_edgei_201;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep58 = getelementptr [32 x i32]* @statemt, i32 0, i32 %201*/
		main_AddRoundKeyexit_crit_edgei_scevgep58 = (`TAG_g_statemt_a | (4 * main_AddRoundKeyexit_crit_edgei_201));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep58 = getelementptr [32 x i32]* @statemt, i32 0, i32 %201*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_90)) begin
		main_AddRoundKeyexit_crit_edgei_scevgep58_reg <= main_AddRoundKeyexit_crit_edgei_scevgep58;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_scevgep58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_scevgep58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep59 = getelementptr [32 x i32]* @statemt, i32 0, i32 %198*/
		main_AddRoundKeyexit_crit_edgei_scevgep59 = (`TAG_g_statemt_a | (4 * main_AddRoundKeyexit_crit_edgei_198));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep59 = getelementptr [32 x i32]* @statemt, i32 0, i32 %198*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_90)) begin
		main_AddRoundKeyexit_crit_edgei_scevgep59_reg <= main_AddRoundKeyexit_crit_edgei_scevgep59;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_scevgep59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_scevgep59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %202 = add i32 %j.02.i2.i, 40*/
		main_AddRoundKeyexit_crit_edgei_202 = (main_AddRoundKeyexit_crit_edgei_j02i2i_reg + 32'd40);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %202 = add i32 %j.02.i2.i, 40*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_90)) begin
		main_AddRoundKeyexit_crit_edgei_202_reg <= main_AddRoundKeyexit_crit_edgei_202;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep60 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %202*/
		main_AddRoundKeyexit_crit_edgei_scevgep60 = (`TAG_g_word_a | ((480 * 32'd3) + (4 * main_AddRoundKeyexit_crit_edgei_202_reg)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep60 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %202*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_91)) begin
		main_AddRoundKeyexit_crit_edgei_scevgep60_reg <= main_AddRoundKeyexit_crit_edgei_scevgep60;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_scevgep60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_scevgep60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep61 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %202*/
		main_AddRoundKeyexit_crit_edgei_scevgep61 = (`TAG_g_word_a | ((480 * 32'd2) + (4 * main_AddRoundKeyexit_crit_edgei_202_reg)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep61 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %202*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_91)) begin
		main_AddRoundKeyexit_crit_edgei_scevgep61_reg <= main_AddRoundKeyexit_crit_edgei_scevgep61;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_scevgep61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_scevgep61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep62 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %202*/
		main_AddRoundKeyexit_crit_edgei_scevgep62 = (`TAG_g_word_a | ((480 * 32'd1) + (4 * main_AddRoundKeyexit_crit_edgei_202_reg)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep62 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %202*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_91)) begin
		main_AddRoundKeyexit_crit_edgei_scevgep62_reg <= main_AddRoundKeyexit_crit_edgei_scevgep62;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_scevgep62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_scevgep62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep63 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %202*/
		main_AddRoundKeyexit_crit_edgei_scevgep63 = (`TAG_g_word_a | (4 * main_AddRoundKeyexit_crit_edgei_202_reg));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep63 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %202*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_91)) begin
		main_AddRoundKeyexit_crit_edgei_scevgep63_reg <= main_AddRoundKeyexit_crit_edgei_scevgep63;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_scevgep63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_scevgep63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %203 = load i32* %scevgep63, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_203 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %203 = load i32* %scevgep63, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_93)) begin
		main_AddRoundKeyexit_crit_edgei_203_reg <= main_AddRoundKeyexit_crit_edgei_203;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %204 = load i32* %scevgep59, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_204 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %204 = load i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_92)) begin
		main_AddRoundKeyexit_crit_edgei_204_reg <= main_AddRoundKeyexit_crit_edgei_204;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %205 = xor i32 %204, %203*/
		main_AddRoundKeyexit_crit_edgei_205 = (main_AddRoundKeyexit_crit_edgei_204_reg ^ main_AddRoundKeyexit_crit_edgei_203);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %205 = xor i32 %204, %203*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_93)) begin
		main_AddRoundKeyexit_crit_edgei_205_reg <= main_AddRoundKeyexit_crit_edgei_205;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %206 = load i32* %scevgep62, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_206 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %206 = load i32* %scevgep62, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_94)) begin
		main_AddRoundKeyexit_crit_edgei_206_reg <= main_AddRoundKeyexit_crit_edgei_206;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_206_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %207 = load i32* %scevgep58, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_207 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %207 = load i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_93)) begin
		main_AddRoundKeyexit_crit_edgei_207_reg <= main_AddRoundKeyexit_crit_edgei_207;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %208 = xor i32 %207, %206*/
		main_AddRoundKeyexit_crit_edgei_208 = (main_AddRoundKeyexit_crit_edgei_207_reg ^ main_AddRoundKeyexit_crit_edgei_206);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %208 = xor i32 %207, %206*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_94)) begin
		main_AddRoundKeyexit_crit_edgei_208_reg <= main_AddRoundKeyexit_crit_edgei_208;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %209 = load i32* %scevgep61, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_209 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %209 = load i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_95)) begin
		main_AddRoundKeyexit_crit_edgei_209_reg <= main_AddRoundKeyexit_crit_edgei_209;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_209_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %210 = load i32* %scevgep57, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_210 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %210 = load i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_94)) begin
		main_AddRoundKeyexit_crit_edgei_210_reg <= main_AddRoundKeyexit_crit_edgei_210;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %211 = xor i32 %210, %209*/
		main_AddRoundKeyexit_crit_edgei_211 = (main_AddRoundKeyexit_crit_edgei_210_reg ^ main_AddRoundKeyexit_crit_edgei_209);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %211 = xor i32 %210, %209*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_95)) begin
		main_AddRoundKeyexit_crit_edgei_211_reg <= main_AddRoundKeyexit_crit_edgei_211;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %212 = load i32* %scevgep60, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_212 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %212 = load i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_96)) begin
		main_AddRoundKeyexit_crit_edgei_212_reg <= main_AddRoundKeyexit_crit_edgei_212;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_212_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %213 = load i32* %scevgep56, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_213 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %213 = load i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_95)) begin
		main_AddRoundKeyexit_crit_edgei_213_reg <= main_AddRoundKeyexit_crit_edgei_213;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_213_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %214 = xor i32 %213, %212*/
		main_AddRoundKeyexit_crit_edgei_214 = (main_AddRoundKeyexit_crit_edgei_213_reg ^ main_AddRoundKeyexit_crit_edgei_212);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %214 = xor i32 %213, %212*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_96)) begin
		main_AddRoundKeyexit_crit_edgei_214_reg <= main_AddRoundKeyexit_crit_edgei_214;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_214_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %215 = add nsw i32 %j.02.i2.i, 1*/
		main_AddRoundKeyexit_crit_edgei_215 = (main_AddRoundKeyexit_crit_edgei_j02i2i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %215 = add nsw i32 %j.02.i2.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_90)) begin
		main_AddRoundKeyexit_crit_edgei_215_reg <= main_AddRoundKeyexit_crit_edgei_215;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_215_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %exitcond55 = icmp eq i32 %215, 4*/
		main_AddRoundKeyexit_crit_edgei_exitcond55 = (main_AddRoundKeyexit_crit_edgei_215 == 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %exitcond55 = icmp eq i32 %215, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_90)) begin
		main_AddRoundKeyexit_crit_edgei_exitcond55_reg <= main_AddRoundKeyexit_crit_edgei_exitcond55;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_exitcond55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_exitcond55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %j.11.i3.i = phi i32 [ %225, %.preheader.i4.i ], [ 0, %.preheader.i4.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi4ipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi4i_j11i3i = 32'd0;
	end
	/* main: %.preheader.i4.i*/
	/*   %j.11.i3.i = phi i32 [ %225, %.preheader.i4.i ], [ 0, %.preheader.i4.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi4i_108) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi4i_exitcond46_reg == 1'd0))) */ begin
		main_preheaderi4i_j11i3i = main_preheaderi4i_225_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %j.11.i3.i = phi i32 [ %225, %.preheader.i4.i ], [ 0, %.preheader.i4.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi4ipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi4i_j11i3i_reg <= main_preheaderi4i_j11i3i;
		if (start == 1'b0 && ^(main_preheaderi4i_j11i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_j11i3i_reg"); $finish; end
	end
	/* main: %.preheader.i4.i*/
	/*   %j.11.i3.i = phi i32 [ %225, %.preheader.i4.i ], [ 0, %.preheader.i4.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi4i_108) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi4i_exitcond46_reg == 1'd0))) begin
		main_preheaderi4i_j11i3i_reg <= main_preheaderi4i_j11i3i;
		if (start == 1'b0 && ^(main_preheaderi4i_j11i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_j11i3i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %216 = add i32 %j.11.i3.i, 3*/
		main_preheaderi4i_216 = (main_preheaderi4i_j11i3i_reg + 32'd3);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %216 = add i32 %j.11.i3.i, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_99)) begin
		main_preheaderi4i_216_reg <= main_preheaderi4i_216;
		if (start == 1'b0 && ^(main_preheaderi4i_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %scevgep47 = getelementptr [32 x i32]* @statemt, i32 0, i32 %216*/
		main_preheaderi4i_scevgep47 = (`TAG_g_statemt_a | (4 * main_preheaderi4i_216_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %scevgep47 = getelementptr [32 x i32]* @statemt, i32 0, i32 %216*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_100)) begin
		main_preheaderi4i_scevgep47_reg <= main_preheaderi4i_scevgep47;
		if (start == 1'b0 && ^(main_preheaderi4i_scevgep47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_scevgep47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %217 = add i32 %j.11.i3.i, 2*/
		main_preheaderi4i_217 = (main_preheaderi4i_j11i3i_reg + 32'd2);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %217 = add i32 %j.11.i3.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_99)) begin
		main_preheaderi4i_217_reg <= main_preheaderi4i_217;
		if (start == 1'b0 && ^(main_preheaderi4i_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_217_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %scevgep48 = getelementptr [32 x i32]* @statemt, i32 0, i32 %217*/
		main_preheaderi4i_scevgep48 = (`TAG_g_statemt_a | (4 * main_preheaderi4i_217_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %scevgep48 = getelementptr [32 x i32]* @statemt, i32 0, i32 %217*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_100)) begin
		main_preheaderi4i_scevgep48_reg <= main_preheaderi4i_scevgep48;
		if (start == 1'b0 && ^(main_preheaderi4i_scevgep48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_scevgep48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %218 = add i32 %j.11.i3.i, 1*/
		main_preheaderi4i_218 = (main_preheaderi4i_j11i3i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %218 = add i32 %j.11.i3.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_99)) begin
		main_preheaderi4i_218_reg <= main_preheaderi4i_218;
		if (start == 1'b0 && ^(main_preheaderi4i_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_218_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %scevgep49 = getelementptr [32 x i32]* @statemt, i32 0, i32 %218*/
		main_preheaderi4i_scevgep49 = (`TAG_g_statemt_a | (4 * main_preheaderi4i_218_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %scevgep49 = getelementptr [32 x i32]* @statemt, i32 0, i32 %218*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_100)) begin
		main_preheaderi4i_scevgep49_reg <= main_preheaderi4i_scevgep49;
		if (start == 1'b0 && ^(main_preheaderi4i_scevgep49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_scevgep49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %219 = shl i32 %j.11.i3.i, 2*/
		main_preheaderi4i_219 = (main_preheaderi4i_j11i3i_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %219 = shl i32 %j.11.i3.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_99)) begin
		main_preheaderi4i_219_reg <= main_preheaderi4i_219;
		if (start == 1'b0 && ^(main_preheaderi4i_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_219_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %scevgep50 = getelementptr [32 x i32]* @statemt, i32 0, i32 %219*/
		main_preheaderi4i_scevgep50 = (`TAG_g_statemt_a | (4 * main_preheaderi4i_219));
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %scevgep50 = getelementptr [32 x i32]* @statemt, i32 0, i32 %219*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_99)) begin
		main_preheaderi4i_scevgep50_reg <= main_preheaderi4i_scevgep50;
		if (start == 1'b0 && ^(main_preheaderi4i_scevgep50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_scevgep50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %220 = add i32 %j.11.i3.i, 40*/
		main_preheaderi4i_220 = (main_preheaderi4i_j11i3i_reg + 32'd40);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %220 = add i32 %j.11.i3.i, 40*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_99)) begin
		main_preheaderi4i_220_reg <= main_preheaderi4i_220;
		if (start == 1'b0 && ^(main_preheaderi4i_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_220_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %scevgep51 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %220*/
		main_preheaderi4i_scevgep51 = (`TAG_g_word_a | ((480 * 32'd3) + (4 * main_preheaderi4i_220_reg)));
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %scevgep51 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %220*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_100)) begin
		main_preheaderi4i_scevgep51_reg <= main_preheaderi4i_scevgep51;
		if (start == 1'b0 && ^(main_preheaderi4i_scevgep51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_scevgep51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %scevgep52 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %220*/
		main_preheaderi4i_scevgep52 = (`TAG_g_word_a | ((480 * 32'd2) + (4 * main_preheaderi4i_220_reg)));
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %scevgep52 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %220*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_100)) begin
		main_preheaderi4i_scevgep52_reg <= main_preheaderi4i_scevgep52;
		if (start == 1'b0 && ^(main_preheaderi4i_scevgep52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_scevgep52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %scevgep53 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %220*/
		main_preheaderi4i_scevgep53 = (`TAG_g_word_a | ((480 * 32'd1) + (4 * main_preheaderi4i_220_reg)));
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %scevgep53 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %220*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_100)) begin
		main_preheaderi4i_scevgep53_reg <= main_preheaderi4i_scevgep53;
		if (start == 1'b0 && ^(main_preheaderi4i_scevgep53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_scevgep53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %scevgep54 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %220*/
		main_preheaderi4i_scevgep54 = (`TAG_g_word_a | (4 * main_preheaderi4i_220_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %scevgep54 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %220*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_100)) begin
		main_preheaderi4i_scevgep54_reg <= main_preheaderi4i_scevgep54;
		if (start == 1'b0 && ^(main_preheaderi4i_scevgep54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_scevgep54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %221 = load i32* %scevgep54, align 4, !tbaa !1*/
		main_preheaderi4i_221 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %221 = load i32* %scevgep54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_102)) begin
		main_preheaderi4i_221_reg <= main_preheaderi4i_221;
		if (start == 1'b0 && ^(main_preheaderi4i_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_221_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %222 = load i32* %scevgep50, align 4, !tbaa !1*/
		main_preheaderi4i_222 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %222 = load i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_101)) begin
		main_preheaderi4i_222_reg <= main_preheaderi4i_222;
		if (start == 1'b0 && ^(main_preheaderi4i_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_222_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %223 = xor i32 %222, %221*/
		main_preheaderi4i_223 = (main_preheaderi4i_222_reg ^ main_preheaderi4i_221);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %223 = xor i32 %222, %221*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_102)) begin
		main_preheaderi4i_223_reg <= main_preheaderi4i_223;
		if (start == 1'b0 && ^(main_preheaderi4i_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %224 = load i32* %scevgep53, align 4, !tbaa !1*/
		main_preheaderi4i_224 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %224 = load i32* %scevgep53, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_102)) begin
		main_preheaderi4i_224_reg <= main_preheaderi4i_224;
		if (start == 1'b0 && ^(main_preheaderi4i_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_224_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %225 = add nsw i32 %j.11.i3.i, 1*/
		main_preheaderi4i_225 = (main_preheaderi4i_j11i3i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %225 = add nsw i32 %j.11.i3.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_99)) begin
		main_preheaderi4i_225_reg <= main_preheaderi4i_225;
		if (start == 1'b0 && ^(main_preheaderi4i_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_225_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %226 = load i32* %scevgep49, align 4, !tbaa !1*/
		main_preheaderi4i_226 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %226 = load i32* %scevgep49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_105)) begin
		main_preheaderi4i_226_reg <= main_preheaderi4i_226;
		if (start == 1'b0 && ^(main_preheaderi4i_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_226_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %227 = xor i32 %226, %224*/
		main_preheaderi4i_227 = (main_preheaderi4i_226 ^ main_preheaderi4i_224_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %227 = xor i32 %226, %224*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_105)) begin
		main_preheaderi4i_227_reg <= main_preheaderi4i_227;
		if (start == 1'b0 && ^(main_preheaderi4i_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_227_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %228 = load i32* %scevgep52, align 4, !tbaa !1*/
		main_preheaderi4i_228 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %228 = load i32* %scevgep52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_103)) begin
		main_preheaderi4i_228_reg <= main_preheaderi4i_228;
		if (start == 1'b0 && ^(main_preheaderi4i_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_228_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %229 = load i32* %scevgep48, align 4, !tbaa !1*/
		main_preheaderi4i_229 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %229 = load i32* %scevgep48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_106)) begin
		main_preheaderi4i_229_reg <= main_preheaderi4i_229;
		if (start == 1'b0 && ^(main_preheaderi4i_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %230 = xor i32 %229, %228*/
		main_preheaderi4i_230 = (main_preheaderi4i_229 ^ main_preheaderi4i_228_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %230 = xor i32 %229, %228*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_106)) begin
		main_preheaderi4i_230_reg <= main_preheaderi4i_230;
		if (start == 1'b0 && ^(main_preheaderi4i_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_230_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %231 = load i32* %scevgep51, align 4, !tbaa !1*/
		main_preheaderi4i_231 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %231 = load i32* %scevgep51, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_104)) begin
		main_preheaderi4i_231_reg <= main_preheaderi4i_231;
		if (start == 1'b0 && ^(main_preheaderi4i_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_231_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %232 = load i32* %scevgep47, align 4, !tbaa !1*/
		main_preheaderi4i_232 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %232 = load i32* %scevgep47, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_107)) begin
		main_preheaderi4i_232_reg <= main_preheaderi4i_232;
		if (start == 1'b0 && ^(main_preheaderi4i_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_232_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %233 = xor i32 %232, %231*/
		main_preheaderi4i_233 = (main_preheaderi4i_232 ^ main_preheaderi4i_231_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %233 = xor i32 %232, %231*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_107)) begin
		main_preheaderi4i_233_reg <= main_preheaderi4i_233;
		if (start == 1'b0 && ^(main_preheaderi4i_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_233_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i*/
	/*   %exitcond46 = icmp eq i32 %225, 4*/
		main_preheaderi4i_exitcond46 = (main_preheaderi4i_225 == 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i*/
	/*   %exitcond46 = icmp eq i32 %225, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_99)) begin
		main_preheaderi4i_exitcond46_reg <= main_preheaderi4i_exitcond46;
		if (start == 1'b0 && ^(main_preheaderi4i_exitcond46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i_exitcond46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %i.19.i = phi i32 [ %242, %239 ], [ 0, %.lr.ph.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_109) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_i19i = 32'd0;
	end
	/* main: %.lr.ph.i*/
	/*   %i.19.i = phi i32 [ %242, %239 ], [ 0, %.lr.ph.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__239_116) & (memory_controller_waitrequest == 1'd0)) & (main_239_exitcond44 == 1'd0))) */ begin
		main_lrphi_i19i = main_239_242;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %i.19.i = phi i32 [ %242, %239 ], [ 0, %.lr.ph.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_109) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_i19i_reg <= main_lrphi_i19i;
		if (start == 1'b0 && ^(main_lrphi_i19i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_i19i_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %i.19.i = phi i32 [ %242, %239 ], [ 0, %.lr.ph.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__239_116) & (memory_controller_waitrequest == 1'd0)) & (main_239_exitcond44 == 1'd0))) begin
		main_lrphi_i19i_reg <= main_lrphi_i19i;
		if (start == 1'b0 && ^(main_lrphi_i19i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_i19i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %scevgep45 = getelementptr [32 x i32]* @statemt, i32 0, i32 %i.19.i*/
		main_lrphi_scevgep45 = (`TAG_g_statemt_a | (4 * main_lrphi_i19i_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %scevgep45 = getelementptr [32 x i32]* @statemt, i32 0, i32 %i.19.i*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_110)) begin
		main_lrphi_scevgep45_reg <= main_lrphi_scevgep45;
		if (start == 1'b0 && ^(main_lrphi_scevgep45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_scevgep45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %235 = load i32* %scevgep45, align 4, !tbaa !1*/
		main_lrphi_235 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %235 = load i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_112)) begin
		main_lrphi_235_reg <= main_lrphi_235;
		if (start == 1'b0 && ^(main_lrphi_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_235_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %236 = icmp slt i32 %235, 16*/
		main_lrphi_236 = ($signed(main_lrphi_235) < $signed(32'd16));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %236 = icmp slt i32 %235, 16*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_112)) begin
		main_lrphi_236_reg <= main_lrphi_236;
		if (start == 1'b0 && ^(main_lrphi_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_236_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %237*/
	/*   %.pre.i = load i32* %scevgep45, align 4, !tbaa !1*/
		main_237_prei = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %237*/
	/*   %.pre.i = load i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__237_115)) begin
		main_237_prei_reg <= main_237_prei;
		if (start == 1'b0 && ^(main_237_prei) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_237_prei_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %239*/
	/*   %240 = phi i32 [ %.pre.i, %237 ], [ %235, %.lr.ph.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi_112) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_236 == 1'd0))) begin
		main_239_240 = main_lrphi_235;
	end
	/* main: %239*/
	/*   %240 = phi i32 [ %.pre.i, %237 ], [ %235, %.lr.ph.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__237_115) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_239_240 = main_237_prei;
	end
end
always @(posedge clk) begin
	/* main: %239*/
	/*   %240 = phi i32 [ %.pre.i, %237 ], [ %235, %.lr.ph.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi_112) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_236 == 1'd0))) begin
		main_239_240_reg <= main_239_240;
		if (start == 1'b0 && ^(main_239_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_240_reg"); $finish; end
	end
	/* main: %239*/
	/*   %240 = phi i32 [ %.pre.i, %237 ], [ %235, %.lr.ph.i ]*/
	if (((cur_state == LEGUP_F_main_BB__237_115) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_240_reg <= main_239_240;
		if (start == 1'b0 && ^(main_239_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_240_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %239*/
	/*   %242 = add nsw i32 %i.19.i, 1*/
		main_239_242 = (main_lrphi_i19i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %239*/
	/*   %242 = add nsw i32 %i.19.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__239_116)) begin
		main_239_242_reg <= main_239_242;
		if (start == 1'b0 && ^(main_239_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_242_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %239*/
	/*   %exitcond44 = icmp eq i32 %242, 16*/
		main_239_exitcond44 = (main_239_242 == 32'd16);
end
always @(posedge clk) begin
	/* main: %239*/
	/*   %exitcond44 = icmp eq i32 %242, 16*/
	if ((cur_state == LEGUP_F_main_BB__239_116)) begin
		main_239_exitcond44_reg <= main_239_exitcond44;
		if (start == 1'b0 && ^(main_239_exitcond44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_exitcond44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %243 = phi i32 [ %248, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_117) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_243 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %243 = phi i32 [ %248, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_120) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond41_reg == 1'd0))) */ begin
		main_preheaderi_243 = main_preheaderi_248;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %243 = phi i32 [ %248, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_117) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_243_reg <= main_preheaderi_243;
		if (start == 1'b0 && ^(main_preheaderi_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_243_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %243 = phi i32 [ %248, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_120) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond41_reg == 1'd0))) begin
		main_preheaderi_243_reg <= main_preheaderi_243;
		if (start == 1'b0 && ^(main_preheaderi_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_243_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %i.28.i = phi i32 [ %249, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_117) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_i28i = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %i.28.i = phi i32 [ %249, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_120) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond41_reg == 1'd0))) */ begin
		main_preheaderi_i28i = main_preheaderi_249_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %i.28.i = phi i32 [ %249, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_117) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_i28i_reg <= main_preheaderi_i28i;
		if (start == 1'b0 && ^(main_preheaderi_i28i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i28i_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %i.28.i = phi i32 [ %249, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_120) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond41_reg == 1'd0))) begin
		main_preheaderi_i28i_reg <= main_preheaderi_i28i;
		if (start == 1'b0 && ^(main_preheaderi_i28i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i28i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %scevgep42 = getelementptr [16 x i32]* @encrypt.out_enc_statemt, i32 0, i32 %i.28.i*/
		main_preheaderi_scevgep42 = (1'd0 | (4 * main_preheaderi_i28i_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %scevgep42 = getelementptr [16 x i32]* @encrypt.out_enc_statemt, i32 0, i32 %i.28.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_118)) begin
		main_preheaderi_scevgep42_reg <= main_preheaderi_scevgep42;
		if (start == 1'b0 && ^(main_preheaderi_scevgep42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_scevgep42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %scevgep43 = getelementptr [32 x i32]* @statemt, i32 0, i32 %i.28.i*/
		main_preheaderi_scevgep43 = (`TAG_g_statemt_a | (4 * main_preheaderi_i28i_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %scevgep43 = getelementptr [32 x i32]* @statemt, i32 0, i32 %i.28.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_118)) begin
		main_preheaderi_scevgep43_reg <= main_preheaderi_scevgep43;
		if (start == 1'b0 && ^(main_preheaderi_scevgep43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_scevgep43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %244 = load i32* %scevgep43, align 4, !tbaa !1*/
		main_preheaderi_244 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %244 = load i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_120)) begin
		main_preheaderi_244_reg <= main_preheaderi_244;
		if (start == 1'b0 && ^(main_preheaderi_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_244_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %245 = load i32* %scevgep42, align 4, !tbaa !1*/
		main_preheaderi_245 = encryptout_enc_statemt_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %245 = load i32* %scevgep42, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_119)) begin
		main_preheaderi_245_reg <= main_preheaderi_245;
		if (start == 1'b0 && ^(main_preheaderi_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_245_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %246 = icmp eq i32 %244, %245*/
		main_preheaderi_246 = (main_preheaderi_244 == main_preheaderi_245_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %246 = icmp eq i32 %244, %245*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_120)) begin
		main_preheaderi_246_reg <= main_preheaderi_246;
		if (start == 1'b0 && ^(main_preheaderi_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_246_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %247 = zext i1 %246 to i32*/
		main_preheaderi_247 = main_preheaderi_246;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %247 = zext i1 %246 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_120)) begin
		main_preheaderi_247_reg <= main_preheaderi_247;
		if (start == 1'b0 && ^(main_preheaderi_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %248 = add nsw i32 %247, %243*/
		main_preheaderi_248 = (main_preheaderi_247 + main_preheaderi_243_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %248 = add nsw i32 %247, %243*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_120)) begin
		main_preheaderi_248_reg <= main_preheaderi_248;
		if (start == 1'b0 && ^(main_preheaderi_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_248_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %249 = add nsw i32 %i.28.i, 1*/
		main_preheaderi_249 = (main_preheaderi_i28i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %249 = add nsw i32 %i.28.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_118)) begin
		main_preheaderi_249_reg <= main_preheaderi_249;
		if (start == 1'b0 && ^(main_preheaderi_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_249_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %exitcond41 = icmp eq i32 %249, 16*/
		main_preheaderi_exitcond41 = (main_preheaderi_249 == 32'd16);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %exitcond41 = icmp eq i32 %249, 16*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_118)) begin
		main_preheaderi_exitcond41_reg <= main_preheaderi_exitcond41;
		if (start == 1'b0 && ^(main_preheaderi_exitcond41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_exitcond41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %j.02.i.i1 = phi i32 [ 0, %encrypt.exit ], [ %269, %251 ]*/
	if (((cur_state == LEGUP_F_main_BB_encryptexit_123) & (memory_controller_waitrequest == 1'd0))) begin
		main_251_j02ii1 = 32'd0;
	end
	/* main: %251*/
	/*   %j.02.i.i1 = phi i32 [ 0, %encrypt.exit ], [ %269, %251 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__251_131) & (memory_controller_waitrequest == 1'd0)) & (main_251_exitcond32_reg == 1'd0))) */ begin
		main_251_j02ii1 = main_251_269_reg;
	end
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %j.02.i.i1 = phi i32 [ 0, %encrypt.exit ], [ %269, %251 ]*/
	if (((cur_state == LEGUP_F_main_BB_encryptexit_123) & (memory_controller_waitrequest == 1'd0))) begin
		main_251_j02ii1_reg <= main_251_j02ii1;
		if (start == 1'b0 && ^(main_251_j02ii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_j02ii1_reg"); $finish; end
	end
	/* main: %251*/
	/*   %j.02.i.i1 = phi i32 [ 0, %encrypt.exit ], [ %269, %251 ]*/
	if ((((cur_state == LEGUP_F_main_BB__251_131) & (memory_controller_waitrequest == 1'd0)) & (main_251_exitcond32_reg == 1'd0))) begin
		main_251_j02ii1_reg <= main_251_j02ii1;
		if (start == 1'b0 && ^(main_251_j02ii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_j02ii1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %252 = shl i32 %j.02.i.i1, 2*/
		main_251_252 = (main_251_j02ii1_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %252 = shl i32 %j.02.i.i1, 2*/
	if ((cur_state == LEGUP_F_main_BB__251_124)) begin
		main_251_252_reg <= main_251_252;
		if (start == 1'b0 && ^(main_251_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_252_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %253 = or i32 %252, 3*/
		main_251_253 = (main_251_252 | 32'd3);
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %253 = or i32 %252, 3*/
	if ((cur_state == LEGUP_F_main_BB__251_124)) begin
		main_251_253_reg <= main_251_253;
		if (start == 1'b0 && ^(main_251_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_253_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %scevgep33 = getelementptr [32 x i32]* @statemt, i32 0, i32 %253*/
		main_251_scevgep33 = (`TAG_g_statemt_a | (4 * main_251_253));
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %scevgep33 = getelementptr [32 x i32]* @statemt, i32 0, i32 %253*/
	if ((cur_state == LEGUP_F_main_BB__251_124)) begin
		main_251_scevgep33_reg <= main_251_scevgep33;
		if (start == 1'b0 && ^(main_251_scevgep33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_scevgep33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %254 = or i32 %252, 2*/
		main_251_254 = (main_251_252 | 32'd2);
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %254 = or i32 %252, 2*/
	if ((cur_state == LEGUP_F_main_BB__251_124)) begin
		main_251_254_reg <= main_251_254;
		if (start == 1'b0 && ^(main_251_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_254_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %scevgep34 = getelementptr [32 x i32]* @statemt, i32 0, i32 %254*/
		main_251_scevgep34 = (`TAG_g_statemt_a | (4 * main_251_254));
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %scevgep34 = getelementptr [32 x i32]* @statemt, i32 0, i32 %254*/
	if ((cur_state == LEGUP_F_main_BB__251_124)) begin
		main_251_scevgep34_reg <= main_251_scevgep34;
		if (start == 1'b0 && ^(main_251_scevgep34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_scevgep34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %255 = or i32 %252, 1*/
		main_251_255 = (main_251_252 | 32'd1);
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %255 = or i32 %252, 1*/
	if ((cur_state == LEGUP_F_main_BB__251_124)) begin
		main_251_255_reg <= main_251_255;
		if (start == 1'b0 && ^(main_251_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_255_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %scevgep35 = getelementptr [32 x i32]* @statemt, i32 0, i32 %255*/
		main_251_scevgep35 = (`TAG_g_statemt_a | (4 * main_251_255));
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %scevgep35 = getelementptr [32 x i32]* @statemt, i32 0, i32 %255*/
	if ((cur_state == LEGUP_F_main_BB__251_124)) begin
		main_251_scevgep35_reg <= main_251_scevgep35;
		if (start == 1'b0 && ^(main_251_scevgep35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_scevgep35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %scevgep36 = getelementptr [32 x i32]* @statemt, i32 0, i32 %252*/
		main_251_scevgep36 = (`TAG_g_statemt_a | (4 * main_251_252));
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %scevgep36 = getelementptr [32 x i32]* @statemt, i32 0, i32 %252*/
	if ((cur_state == LEGUP_F_main_BB__251_124)) begin
		main_251_scevgep36_reg <= main_251_scevgep36;
		if (start == 1'b0 && ^(main_251_scevgep36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_scevgep36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %256 = add i32 %j.02.i.i1, 40*/
		main_251_256 = (main_251_j02ii1_reg + 32'd40);
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %256 = add i32 %j.02.i.i1, 40*/
	if ((cur_state == LEGUP_F_main_BB__251_124)) begin
		main_251_256_reg <= main_251_256;
		if (start == 1'b0 && ^(main_251_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_256_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %scevgep37 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %256*/
		main_251_scevgep37 = (`TAG_g_word_a | ((480 * 32'd3) + (4 * main_251_256_reg)));
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %scevgep37 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %256*/
	if ((cur_state == LEGUP_F_main_BB__251_125)) begin
		main_251_scevgep37_reg <= main_251_scevgep37;
		if (start == 1'b0 && ^(main_251_scevgep37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_scevgep37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %scevgep38 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %256*/
		main_251_scevgep38 = (`TAG_g_word_a | ((480 * 32'd2) + (4 * main_251_256_reg)));
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %scevgep38 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %256*/
	if ((cur_state == LEGUP_F_main_BB__251_125)) begin
		main_251_scevgep38_reg <= main_251_scevgep38;
		if (start == 1'b0 && ^(main_251_scevgep38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_scevgep38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %scevgep39 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %256*/
		main_251_scevgep39 = (`TAG_g_word_a | ((480 * 32'd1) + (4 * main_251_256_reg)));
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %scevgep39 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %256*/
	if ((cur_state == LEGUP_F_main_BB__251_125)) begin
		main_251_scevgep39_reg <= main_251_scevgep39;
		if (start == 1'b0 && ^(main_251_scevgep39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_scevgep39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %scevgep40 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %256*/
		main_251_scevgep40 = (`TAG_g_word_a | (4 * main_251_256_reg));
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %scevgep40 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %256*/
	if ((cur_state == LEGUP_F_main_BB__251_125)) begin
		main_251_scevgep40_reg <= main_251_scevgep40;
		if (start == 1'b0 && ^(main_251_scevgep40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_scevgep40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %257 = load i32* %scevgep40, align 4, !tbaa !1*/
		main_251_257 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %257 = load i32* %scevgep40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_127)) begin
		main_251_257_reg <= main_251_257;
		if (start == 1'b0 && ^(main_251_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_257_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %258 = load i32* %scevgep36, align 4, !tbaa !1*/
		main_251_258 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %258 = load i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_126)) begin
		main_251_258_reg <= main_251_258;
		if (start == 1'b0 && ^(main_251_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_258_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %259 = xor i32 %258, %257*/
		main_251_259 = (main_251_258_reg ^ main_251_257);
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %259 = xor i32 %258, %257*/
	if ((cur_state == LEGUP_F_main_BB__251_127)) begin
		main_251_259_reg <= main_251_259;
		if (start == 1'b0 && ^(main_251_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_259_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %260 = load i32* %scevgep39, align 4, !tbaa !1*/
		main_251_260 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %260 = load i32* %scevgep39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_128)) begin
		main_251_260_reg <= main_251_260;
		if (start == 1'b0 && ^(main_251_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_260_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %261 = load i32* %scevgep35, align 4, !tbaa !1*/
		main_251_261 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %261 = load i32* %scevgep35, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_127)) begin
		main_251_261_reg <= main_251_261;
		if (start == 1'b0 && ^(main_251_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_261_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %262 = xor i32 %261, %260*/
		main_251_262 = (main_251_261_reg ^ main_251_260);
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %262 = xor i32 %261, %260*/
	if ((cur_state == LEGUP_F_main_BB__251_128)) begin
		main_251_262_reg <= main_251_262;
		if (start == 1'b0 && ^(main_251_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_262_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %263 = load i32* %scevgep38, align 4, !tbaa !1*/
		main_251_263 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %263 = load i32* %scevgep38, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_129)) begin
		main_251_263_reg <= main_251_263;
		if (start == 1'b0 && ^(main_251_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_263_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %264 = load i32* %scevgep34, align 4, !tbaa !1*/
		main_251_264 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %264 = load i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_128)) begin
		main_251_264_reg <= main_251_264;
		if (start == 1'b0 && ^(main_251_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_264_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %265 = xor i32 %264, %263*/
		main_251_265 = (main_251_264_reg ^ main_251_263);
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %265 = xor i32 %264, %263*/
	if ((cur_state == LEGUP_F_main_BB__251_129)) begin
		main_251_265_reg <= main_251_265;
		if (start == 1'b0 && ^(main_251_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_265_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %266 = load i32* %scevgep37, align 4, !tbaa !1*/
		main_251_266 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %266 = load i32* %scevgep37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_130)) begin
		main_251_266_reg <= main_251_266;
		if (start == 1'b0 && ^(main_251_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_266_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %267 = load i32* %scevgep33, align 4, !tbaa !1*/
		main_251_267 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %267 = load i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_129)) begin
		main_251_267_reg <= main_251_267;
		if (start == 1'b0 && ^(main_251_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_267_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %268 = xor i32 %267, %266*/
		main_251_268 = (main_251_267_reg ^ main_251_266);
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %268 = xor i32 %267, %266*/
	if ((cur_state == LEGUP_F_main_BB__251_130)) begin
		main_251_268_reg <= main_251_268;
		if (start == 1'b0 && ^(main_251_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_268_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %269 = add nsw i32 %j.02.i.i1, 1*/
		main_251_269 = (main_251_j02ii1_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %269 = add nsw i32 %j.02.i.i1, 1*/
	if ((cur_state == LEGUP_F_main_BB__251_124)) begin
		main_251_269_reg <= main_251_269;
		if (start == 1'b0 && ^(main_251_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_269_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %exitcond32 = icmp eq i32 %269, 4*/
		main_251_exitcond32 = (main_251_269 == 32'd4);
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %exitcond32 = icmp eq i32 %269, 4*/
	if ((cur_state == LEGUP_F_main_BB__251_124)) begin
		main_251_exitcond32_reg <= main_251_exitcond32;
		if (start == 1'b0 && ^(main_251_exitcond32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_exitcond32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %j.11.i.i3 = phi i32 [ %279, %.preheader.i.i4 ], [ 0, %.preheader.i.i4.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderii4preheader_132) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderii4_j11ii3 = 32'd0;
	end
	/* main: %.preheader.i.i4*/
	/*   %j.11.i.i3 = phi i32 [ %279, %.preheader.i.i4 ], [ 0, %.preheader.i.i4.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderii4_142) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderii4_exitcond23_reg == 1'd0))) */ begin
		main_preheaderii4_j11ii3 = main_preheaderii4_279_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %j.11.i.i3 = phi i32 [ %279, %.preheader.i.i4 ], [ 0, %.preheader.i.i4.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderii4preheader_132) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderii4_j11ii3_reg <= main_preheaderii4_j11ii3;
		if (start == 1'b0 && ^(main_preheaderii4_j11ii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_j11ii3_reg"); $finish; end
	end
	/* main: %.preheader.i.i4*/
	/*   %j.11.i.i3 = phi i32 [ %279, %.preheader.i.i4 ], [ 0, %.preheader.i.i4.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderii4_142) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderii4_exitcond23_reg == 1'd0))) begin
		main_preheaderii4_j11ii3_reg <= main_preheaderii4_j11ii3;
		if (start == 1'b0 && ^(main_preheaderii4_j11ii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_j11ii3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %270 = add i32 %j.11.i.i3, 3*/
		main_preheaderii4_270 = (main_preheaderii4_j11ii3_reg + 32'd3);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %270 = add i32 %j.11.i.i3, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_133)) begin
		main_preheaderii4_270_reg <= main_preheaderii4_270;
		if (start == 1'b0 && ^(main_preheaderii4_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_270_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %scevgep24 = getelementptr [32 x i32]* @statemt, i32 0, i32 %270*/
		main_preheaderii4_scevgep24 = (`TAG_g_statemt_a | (4 * main_preheaderii4_270_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %scevgep24 = getelementptr [32 x i32]* @statemt, i32 0, i32 %270*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_134)) begin
		main_preheaderii4_scevgep24_reg <= main_preheaderii4_scevgep24;
		if (start == 1'b0 && ^(main_preheaderii4_scevgep24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_scevgep24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %271 = add i32 %j.11.i.i3, 2*/
		main_preheaderii4_271 = (main_preheaderii4_j11ii3_reg + 32'd2);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %271 = add i32 %j.11.i.i3, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_133)) begin
		main_preheaderii4_271_reg <= main_preheaderii4_271;
		if (start == 1'b0 && ^(main_preheaderii4_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_271_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %scevgep25 = getelementptr [32 x i32]* @statemt, i32 0, i32 %271*/
		main_preheaderii4_scevgep25 = (`TAG_g_statemt_a | (4 * main_preheaderii4_271_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %scevgep25 = getelementptr [32 x i32]* @statemt, i32 0, i32 %271*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_134)) begin
		main_preheaderii4_scevgep25_reg <= main_preheaderii4_scevgep25;
		if (start == 1'b0 && ^(main_preheaderii4_scevgep25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_scevgep25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %272 = add i32 %j.11.i.i3, 1*/
		main_preheaderii4_272 = (main_preheaderii4_j11ii3_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %272 = add i32 %j.11.i.i3, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_133)) begin
		main_preheaderii4_272_reg <= main_preheaderii4_272;
		if (start == 1'b0 && ^(main_preheaderii4_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_272_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %scevgep26 = getelementptr [32 x i32]* @statemt, i32 0, i32 %272*/
		main_preheaderii4_scevgep26 = (`TAG_g_statemt_a | (4 * main_preheaderii4_272_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %scevgep26 = getelementptr [32 x i32]* @statemt, i32 0, i32 %272*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_134)) begin
		main_preheaderii4_scevgep26_reg <= main_preheaderii4_scevgep26;
		if (start == 1'b0 && ^(main_preheaderii4_scevgep26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_scevgep26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %273 = shl i32 %j.11.i.i3, 2*/
		main_preheaderii4_273 = (main_preheaderii4_j11ii3_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %273 = shl i32 %j.11.i.i3, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_133)) begin
		main_preheaderii4_273_reg <= main_preheaderii4_273;
		if (start == 1'b0 && ^(main_preheaderii4_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_273_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %scevgep27 = getelementptr [32 x i32]* @statemt, i32 0, i32 %273*/
		main_preheaderii4_scevgep27 = (`TAG_g_statemt_a | (4 * main_preheaderii4_273));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %scevgep27 = getelementptr [32 x i32]* @statemt, i32 0, i32 %273*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_133)) begin
		main_preheaderii4_scevgep27_reg <= main_preheaderii4_scevgep27;
		if (start == 1'b0 && ^(main_preheaderii4_scevgep27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_scevgep27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %274 = add i32 %j.11.i.i3, 40*/
		main_preheaderii4_274 = (main_preheaderii4_j11ii3_reg + 32'd40);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %274 = add i32 %j.11.i.i3, 40*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_133)) begin
		main_preheaderii4_274_reg <= main_preheaderii4_274;
		if (start == 1'b0 && ^(main_preheaderii4_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_274_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %scevgep28 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %274*/
		main_preheaderii4_scevgep28 = (`TAG_g_word_a | ((480 * 32'd3) + (4 * main_preheaderii4_274_reg)));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %scevgep28 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %274*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_134)) begin
		main_preheaderii4_scevgep28_reg <= main_preheaderii4_scevgep28;
		if (start == 1'b0 && ^(main_preheaderii4_scevgep28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_scevgep28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %scevgep29 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %274*/
		main_preheaderii4_scevgep29 = (`TAG_g_word_a | ((480 * 32'd2) + (4 * main_preheaderii4_274_reg)));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %scevgep29 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %274*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_134)) begin
		main_preheaderii4_scevgep29_reg <= main_preheaderii4_scevgep29;
		if (start == 1'b0 && ^(main_preheaderii4_scevgep29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_scevgep29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %scevgep30 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %274*/
		main_preheaderii4_scevgep30 = (`TAG_g_word_a | ((480 * 32'd1) + (4 * main_preheaderii4_274_reg)));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %scevgep30 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %274*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_134)) begin
		main_preheaderii4_scevgep30_reg <= main_preheaderii4_scevgep30;
		if (start == 1'b0 && ^(main_preheaderii4_scevgep30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_scevgep30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %scevgep31 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %274*/
		main_preheaderii4_scevgep31 = (`TAG_g_word_a | (4 * main_preheaderii4_274_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %scevgep31 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %274*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_134)) begin
		main_preheaderii4_scevgep31_reg <= main_preheaderii4_scevgep31;
		if (start == 1'b0 && ^(main_preheaderii4_scevgep31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_scevgep31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %275 = load i32* %scevgep31, align 4, !tbaa !1*/
		main_preheaderii4_275 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %275 = load i32* %scevgep31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_136)) begin
		main_preheaderii4_275_reg <= main_preheaderii4_275;
		if (start == 1'b0 && ^(main_preheaderii4_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_275_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %276 = load i32* %scevgep27, align 4, !tbaa !1*/
		main_preheaderii4_276 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %276 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_135)) begin
		main_preheaderii4_276_reg <= main_preheaderii4_276;
		if (start == 1'b0 && ^(main_preheaderii4_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_276_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %277 = xor i32 %276, %275*/
		main_preheaderii4_277 = (main_preheaderii4_276_reg ^ main_preheaderii4_275);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %277 = xor i32 %276, %275*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_136)) begin
		main_preheaderii4_277_reg <= main_preheaderii4_277;
		if (start == 1'b0 && ^(main_preheaderii4_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_277_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %278 = load i32* %scevgep30, align 4, !tbaa !1*/
		main_preheaderii4_278 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %278 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_136)) begin
		main_preheaderii4_278_reg <= main_preheaderii4_278;
		if (start == 1'b0 && ^(main_preheaderii4_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_278_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %279 = add nsw i32 %j.11.i.i3, 1*/
		main_preheaderii4_279 = (main_preheaderii4_j11ii3_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %279 = add nsw i32 %j.11.i.i3, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_133)) begin
		main_preheaderii4_279_reg <= main_preheaderii4_279;
		if (start == 1'b0 && ^(main_preheaderii4_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_279_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %280 = load i32* %scevgep26, align 4, !tbaa !1*/
		main_preheaderii4_280 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %280 = load i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_139)) begin
		main_preheaderii4_280_reg <= main_preheaderii4_280;
		if (start == 1'b0 && ^(main_preheaderii4_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_280_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %281 = xor i32 %280, %278*/
		main_preheaderii4_281 = (main_preheaderii4_280 ^ main_preheaderii4_278_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %281 = xor i32 %280, %278*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_139)) begin
		main_preheaderii4_281_reg <= main_preheaderii4_281;
		if (start == 1'b0 && ^(main_preheaderii4_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_281_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %282 = load i32* %scevgep29, align 4, !tbaa !1*/
		main_preheaderii4_282 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %282 = load i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_137)) begin
		main_preheaderii4_282_reg <= main_preheaderii4_282;
		if (start == 1'b0 && ^(main_preheaderii4_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_282_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %283 = load i32* %scevgep25, align 4, !tbaa !1*/
		main_preheaderii4_283 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %283 = load i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_140)) begin
		main_preheaderii4_283_reg <= main_preheaderii4_283;
		if (start == 1'b0 && ^(main_preheaderii4_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_283_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %284 = xor i32 %283, %282*/
		main_preheaderii4_284 = (main_preheaderii4_283 ^ main_preheaderii4_282_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %284 = xor i32 %283, %282*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_140)) begin
		main_preheaderii4_284_reg <= main_preheaderii4_284;
		if (start == 1'b0 && ^(main_preheaderii4_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_284_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %285 = load i32* %scevgep28, align 4, !tbaa !1*/
		main_preheaderii4_285 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %285 = load i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_138)) begin
		main_preheaderii4_285_reg <= main_preheaderii4_285;
		if (start == 1'b0 && ^(main_preheaderii4_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_285_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %286 = load i32* %scevgep24, align 4, !tbaa !1*/
		main_preheaderii4_286 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %286 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_141)) begin
		main_preheaderii4_286_reg <= main_preheaderii4_286;
		if (start == 1'b0 && ^(main_preheaderii4_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_286_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %287 = xor i32 %286, %285*/
		main_preheaderii4_287 = (main_preheaderii4_286 ^ main_preheaderii4_285_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %287 = xor i32 %286, %285*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_141)) begin
		main_preheaderii4_287_reg <= main_preheaderii4_287;
		if (start == 1'b0 && ^(main_preheaderii4_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_287_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i4*/
	/*   %exitcond23 = icmp eq i32 %279, 4*/
		main_preheaderii4_exitcond23 = (main_preheaderii4_279 == 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i4*/
	/*   %exitcond23 = icmp eq i32 %279, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_133)) begin
		main_preheaderii4_exitcond23_reg <= main_preheaderii4_exitcond23;
		if (start == 1'b0 && ^(main_preheaderii4_exitcond23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii4_exitcond23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %288 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
		main_lrph12ipreheader_288 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %288 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_145)) begin
		main_lrph12ipreheader_288_reg <= main_lrph12ipreheader_288;
		if (start == 1'b0 && ^(main_lrph12ipreheader_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_288_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %289 = and i32 %288, 15*/
		main_lrph12ipreheader_289 = (main_lrph12ipreheader_288 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %289 = and i32 %288, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_145)) begin
		main_lrph12ipreheader_289_reg <= main_lrph12ipreheader_289;
		if (start == 1'b0 && ^(main_lrph12ipreheader_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_289_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %290 = ashr i32 %288, 4*/
		main_lrph12ipreheader_290 = ($signed(main_lrph12ipreheader_288) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %290 = ashr i32 %288, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_145)) begin
		main_lrph12ipreheader_290_reg <= main_lrph12ipreheader_290;
		if (start == 1'b0 && ^(main_lrph12ipreheader_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_290_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %291 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %290, i32 %289*/
		main_lrph12ipreheader_291 = (1'd0 | ((64 * main_lrph12ipreheader_290) + (4 * main_lrph12ipreheader_289)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %291 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %290, i32 %289*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_145)) begin
		main_lrph12ipreheader_291_reg <= main_lrph12ipreheader_291;
		if (start == 1'b0 && ^(main_lrph12ipreheader_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_291_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %292 = load i32* %291, align 4, !tbaa !1*/
		main_lrph12ipreheader_292 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %292 = load i32* %291, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_146)) begin
		main_lrph12ipreheader_292_reg <= main_lrph12ipreheader_292;
		if (start == 1'b0 && ^(main_lrph12ipreheader_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_292_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %293 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
		main_lrph12ipreheader_293 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %293 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_145)) begin
		main_lrph12ipreheader_293_reg <= main_lrph12ipreheader_293;
		if (start == 1'b0 && ^(main_lrph12ipreheader_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_293_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %294 = and i32 %293, 15*/
		main_lrph12ipreheader_294 = (main_lrph12ipreheader_293 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %294 = and i32 %293, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_145)) begin
		main_lrph12ipreheader_294_reg <= main_lrph12ipreheader_294;
		if (start == 1'b0 && ^(main_lrph12ipreheader_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_294_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %295 = ashr i32 %293, 4*/
		main_lrph12ipreheader_295 = ($signed(main_lrph12ipreheader_293) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %295 = ashr i32 %293, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_145)) begin
		main_lrph12ipreheader_295_reg <= main_lrph12ipreheader_295;
		if (start == 1'b0 && ^(main_lrph12ipreheader_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_295_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %296 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %295, i32 %294*/
		main_lrph12ipreheader_296 = (1'd0 | ((64 * main_lrph12ipreheader_295) + (4 * main_lrph12ipreheader_294)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %296 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %295, i32 %294*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_145)) begin
		main_lrph12ipreheader_296_reg <= main_lrph12ipreheader_296;
		if (start == 1'b0 && ^(main_lrph12ipreheader_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_296_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
		main_lrph12ipreheader_297 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_146)) begin
		main_lrph12ipreheader_297_reg <= main_lrph12ipreheader_297;
		if (start == 1'b0 && ^(main_lrph12ipreheader_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_297_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %298 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
		main_lrph12ipreheader_298 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %298 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_146)) begin
		main_lrph12ipreheader_298_reg <= main_lrph12ipreheader_298;
		if (start == 1'b0 && ^(main_lrph12ipreheader_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_298_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %299 = and i32 %298, 15*/
		main_lrph12ipreheader_299 = (main_lrph12ipreheader_298 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %299 = and i32 %298, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_146)) begin
		main_lrph12ipreheader_299_reg <= main_lrph12ipreheader_299;
		if (start == 1'b0 && ^(main_lrph12ipreheader_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_299_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %300 = ashr i32 %298, 4*/
		main_lrph12ipreheader_300 = ($signed(main_lrph12ipreheader_298) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %300 = ashr i32 %298, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_146)) begin
		main_lrph12ipreheader_300_reg <= main_lrph12ipreheader_300;
		if (start == 1'b0 && ^(main_lrph12ipreheader_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_300_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %301 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %300, i32 %299*/
		main_lrph12ipreheader_301 = (1'd0 | ((64 * main_lrph12ipreheader_300) + (4 * main_lrph12ipreheader_299)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %301 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %300, i32 %299*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_146)) begin
		main_lrph12ipreheader_301_reg <= main_lrph12ipreheader_301;
		if (start == 1'b0 && ^(main_lrph12ipreheader_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_301_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %302 = load i32* %301, align 4, !tbaa !1*/
		main_lrph12ipreheader_302 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %302 = load i32* %301, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_147)) begin
		main_lrph12ipreheader_302_reg <= main_lrph12ipreheader_302;
		if (start == 1'b0 && ^(main_lrph12ipreheader_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_302_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %303 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
		main_lrph12ipreheader_303 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %303 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_146)) begin
		main_lrph12ipreheader_303_reg <= main_lrph12ipreheader_303;
		if (start == 1'b0 && ^(main_lrph12ipreheader_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_303_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %304 = and i32 %303, 15*/
		main_lrph12ipreheader_304 = (main_lrph12ipreheader_303 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %304 = and i32 %303, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_146)) begin
		main_lrph12ipreheader_304_reg <= main_lrph12ipreheader_304;
		if (start == 1'b0 && ^(main_lrph12ipreheader_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_304_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %305 = ashr i32 %303, 4*/
		main_lrph12ipreheader_305 = ($signed(main_lrph12ipreheader_303) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %305 = ashr i32 %303, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_146)) begin
		main_lrph12ipreheader_305_reg <= main_lrph12ipreheader_305;
		if (start == 1'b0 && ^(main_lrph12ipreheader_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_305_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %306 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %305, i32 %304*/
		main_lrph12ipreheader_306 = (1'd0 | ((64 * main_lrph12ipreheader_305) + (4 * main_lrph12ipreheader_304)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %306 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %305, i32 %304*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_146)) begin
		main_lrph12ipreheader_306_reg <= main_lrph12ipreheader_306;
		if (start == 1'b0 && ^(main_lrph12ipreheader_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_306_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %307 = load i32* %306, align 4, !tbaa !1*/
		main_lrph12ipreheader_307 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %307 = load i32* %306, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_147)) begin
		main_lrph12ipreheader_307_reg <= main_lrph12ipreheader_307;
		if (start == 1'b0 && ^(main_lrph12ipreheader_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_307_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %308 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
		main_lrph12ipreheader_308 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %308 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_147)) begin
		main_lrph12ipreheader_308_reg <= main_lrph12ipreheader_308;
		if (start == 1'b0 && ^(main_lrph12ipreheader_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_308_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %309 = and i32 %308, 15*/
		main_lrph12ipreheader_309 = (main_lrph12ipreheader_308 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %309 = and i32 %308, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_147)) begin
		main_lrph12ipreheader_309_reg <= main_lrph12ipreheader_309;
		if (start == 1'b0 && ^(main_lrph12ipreheader_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_309_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %310 = ashr i32 %308, 4*/
		main_lrph12ipreheader_310 = ($signed(main_lrph12ipreheader_308) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %310 = ashr i32 %308, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_147)) begin
		main_lrph12ipreheader_310_reg <= main_lrph12ipreheader_310;
		if (start == 1'b0 && ^(main_lrph12ipreheader_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_310_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %311 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %310, i32 %309*/
		main_lrph12ipreheader_311 = (1'd0 | ((64 * main_lrph12ipreheader_310) + (4 * main_lrph12ipreheader_309)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %311 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %310, i32 %309*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_147)) begin
		main_lrph12ipreheader_311_reg <= main_lrph12ipreheader_311;
		if (start == 1'b0 && ^(main_lrph12ipreheader_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_311_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %312 = load i32* %311, align 4, !tbaa !1*/
		main_lrph12ipreheader_312 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %312 = load i32* %311, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_148)) begin
		main_lrph12ipreheader_312_reg <= main_lrph12ipreheader_312;
		if (start == 1'b0 && ^(main_lrph12ipreheader_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_312_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %313 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
		main_lrph12ipreheader_313 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %313 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_147)) begin
		main_lrph12ipreheader_313_reg <= main_lrph12ipreheader_313;
		if (start == 1'b0 && ^(main_lrph12ipreheader_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_313_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %314 = and i32 %313, 15*/
		main_lrph12ipreheader_314 = (main_lrph12ipreheader_313 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %314 = and i32 %313, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_147)) begin
		main_lrph12ipreheader_314_reg <= main_lrph12ipreheader_314;
		if (start == 1'b0 && ^(main_lrph12ipreheader_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_314_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %315 = ashr i32 %313, 4*/
		main_lrph12ipreheader_315 = ($signed(main_lrph12ipreheader_313) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %315 = ashr i32 %313, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_147)) begin
		main_lrph12ipreheader_315_reg <= main_lrph12ipreheader_315;
		if (start == 1'b0 && ^(main_lrph12ipreheader_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_315_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %316 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %315, i32 %314*/
		main_lrph12ipreheader_316 = (1'd0 | ((64 * main_lrph12ipreheader_315) + (4 * main_lrph12ipreheader_314)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %316 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %315, i32 %314*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_147)) begin
		main_lrph12ipreheader_316_reg <= main_lrph12ipreheader_316;
		if (start == 1'b0 && ^(main_lrph12ipreheader_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_316_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %317 = load i32* %316, align 4, !tbaa !1*/
		main_lrph12ipreheader_317 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %317 = load i32* %316, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_148)) begin
		main_lrph12ipreheader_317_reg <= main_lrph12ipreheader_317;
		if (start == 1'b0 && ^(main_lrph12ipreheader_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_317_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %318 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
		main_lrph12ipreheader_318 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %318 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_148)) begin
		main_lrph12ipreheader_318_reg <= main_lrph12ipreheader_318;
		if (start == 1'b0 && ^(main_lrph12ipreheader_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_318_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %319 = and i32 %318, 15*/
		main_lrph12ipreheader_319 = (main_lrph12ipreheader_318 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %319 = and i32 %318, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_148)) begin
		main_lrph12ipreheader_319_reg <= main_lrph12ipreheader_319;
		if (start == 1'b0 && ^(main_lrph12ipreheader_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_319_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %320 = ashr i32 %318, 4*/
		main_lrph12ipreheader_320 = ($signed(main_lrph12ipreheader_318) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %320 = ashr i32 %318, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_148)) begin
		main_lrph12ipreheader_320_reg <= main_lrph12ipreheader_320;
		if (start == 1'b0 && ^(main_lrph12ipreheader_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_320_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %321 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %320, i32 %319*/
		main_lrph12ipreheader_321 = (1'd0 | ((64 * main_lrph12ipreheader_320) + (4 * main_lrph12ipreheader_319)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %321 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %320, i32 %319*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_148)) begin
		main_lrph12ipreheader_321_reg <= main_lrph12ipreheader_321;
		if (start == 1'b0 && ^(main_lrph12ipreheader_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_321_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %322 = load i32* %321, align 4, !tbaa !1*/
		main_lrph12ipreheader_322 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %322 = load i32* %321, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_149)) begin
		main_lrph12ipreheader_322_reg <= main_lrph12ipreheader_322;
		if (start == 1'b0 && ^(main_lrph12ipreheader_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_322_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %323 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
		main_lrph12ipreheader_323 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %323 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_148)) begin
		main_lrph12ipreheader_323_reg <= main_lrph12ipreheader_323;
		if (start == 1'b0 && ^(main_lrph12ipreheader_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_323_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %324 = and i32 %323, 15*/
		main_lrph12ipreheader_324 = (main_lrph12ipreheader_323 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %324 = and i32 %323, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_148)) begin
		main_lrph12ipreheader_324_reg <= main_lrph12ipreheader_324;
		if (start == 1'b0 && ^(main_lrph12ipreheader_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_324_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %325 = ashr i32 %323, 4*/
		main_lrph12ipreheader_325 = ($signed(main_lrph12ipreheader_323) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %325 = ashr i32 %323, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_148)) begin
		main_lrph12ipreheader_325_reg <= main_lrph12ipreheader_325;
		if (start == 1'b0 && ^(main_lrph12ipreheader_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_325_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %326 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %325, i32 %324*/
		main_lrph12ipreheader_326 = (1'd0 | ((64 * main_lrph12ipreheader_325) + (4 * main_lrph12ipreheader_324)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %326 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %325, i32 %324*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_148)) begin
		main_lrph12ipreheader_326_reg <= main_lrph12ipreheader_326;
		if (start == 1'b0 && ^(main_lrph12ipreheader_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_326_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %327 = load i32* %326, align 4, !tbaa !1*/
		main_lrph12ipreheader_327 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %327 = load i32* %326, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_149)) begin
		main_lrph12ipreheader_327_reg <= main_lrph12ipreheader_327;
		if (start == 1'b0 && ^(main_lrph12ipreheader_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_327_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %328 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
		main_lrph12ipreheader_328 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %328 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_149)) begin
		main_lrph12ipreheader_328_reg <= main_lrph12ipreheader_328;
		if (start == 1'b0 && ^(main_lrph12ipreheader_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_328_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %329 = and i32 %328, 15*/
		main_lrph12ipreheader_329 = (main_lrph12ipreheader_328 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %329 = and i32 %328, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_149)) begin
		main_lrph12ipreheader_329_reg <= main_lrph12ipreheader_329;
		if (start == 1'b0 && ^(main_lrph12ipreheader_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_329_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %330 = ashr i32 %328, 4*/
		main_lrph12ipreheader_330 = ($signed(main_lrph12ipreheader_328) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %330 = ashr i32 %328, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_149)) begin
		main_lrph12ipreheader_330_reg <= main_lrph12ipreheader_330;
		if (start == 1'b0 && ^(main_lrph12ipreheader_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_330_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %331 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %330, i32 %329*/
		main_lrph12ipreheader_331 = (1'd0 | ((64 * main_lrph12ipreheader_330) + (4 * main_lrph12ipreheader_329)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %331 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %330, i32 %329*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_149)) begin
		main_lrph12ipreheader_331_reg <= main_lrph12ipreheader_331;
		if (start == 1'b0 && ^(main_lrph12ipreheader_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_331_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %332 = load i32* %331, align 4, !tbaa !1*/
		main_lrph12ipreheader_332 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %332 = load i32* %331, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_150)) begin
		main_lrph12ipreheader_332_reg <= main_lrph12ipreheader_332;
		if (start == 1'b0 && ^(main_lrph12ipreheader_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_332_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %333 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
		main_lrph12ipreheader_333 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %333 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_149)) begin
		main_lrph12ipreheader_333_reg <= main_lrph12ipreheader_333;
		if (start == 1'b0 && ^(main_lrph12ipreheader_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_333_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %334 = and i32 %333, 15*/
		main_lrph12ipreheader_334 = (main_lrph12ipreheader_333 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %334 = and i32 %333, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_149)) begin
		main_lrph12ipreheader_334_reg <= main_lrph12ipreheader_334;
		if (start == 1'b0 && ^(main_lrph12ipreheader_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_334_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %335 = ashr i32 %333, 4*/
		main_lrph12ipreheader_335 = ($signed(main_lrph12ipreheader_333) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %335 = ashr i32 %333, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_149)) begin
		main_lrph12ipreheader_335_reg <= main_lrph12ipreheader_335;
		if (start == 1'b0 && ^(main_lrph12ipreheader_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_335_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %336 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %335, i32 %334*/
		main_lrph12ipreheader_336 = (1'd0 | ((64 * main_lrph12ipreheader_335) + (4 * main_lrph12ipreheader_334)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %336 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %335, i32 %334*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_149)) begin
		main_lrph12ipreheader_336_reg <= main_lrph12ipreheader_336;
		if (start == 1'b0 && ^(main_lrph12ipreheader_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_336_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %337 = load i32* %336, align 4, !tbaa !1*/
		main_lrph12ipreheader_337 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %337 = load i32* %336, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_150)) begin
		main_lrph12ipreheader_337_reg <= main_lrph12ipreheader_337;
		if (start == 1'b0 && ^(main_lrph12ipreheader_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_337_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %338 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
		main_lrph12ipreheader_338 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %338 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_150)) begin
		main_lrph12ipreheader_338_reg <= main_lrph12ipreheader_338;
		if (start == 1'b0 && ^(main_lrph12ipreheader_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_338_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %339 = and i32 %338, 15*/
		main_lrph12ipreheader_339 = (main_lrph12ipreheader_338 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %339 = and i32 %338, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_150)) begin
		main_lrph12ipreheader_339_reg <= main_lrph12ipreheader_339;
		if (start == 1'b0 && ^(main_lrph12ipreheader_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_339_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %340 = ashr i32 %338, 4*/
		main_lrph12ipreheader_340 = ($signed(main_lrph12ipreheader_338) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %340 = ashr i32 %338, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_150)) begin
		main_lrph12ipreheader_340_reg <= main_lrph12ipreheader_340;
		if (start == 1'b0 && ^(main_lrph12ipreheader_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_340_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %341 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %340, i32 %339*/
		main_lrph12ipreheader_341 = (1'd0 | ((64 * main_lrph12ipreheader_340) + (4 * main_lrph12ipreheader_339)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %341 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %340, i32 %339*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_150)) begin
		main_lrph12ipreheader_341_reg <= main_lrph12ipreheader_341;
		if (start == 1'b0 && ^(main_lrph12ipreheader_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_341_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %342 = load i32* %341, align 4, !tbaa !1*/
		main_lrph12ipreheader_342 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %342 = load i32* %341, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		main_lrph12ipreheader_342_reg <= main_lrph12ipreheader_342;
		if (start == 1'b0 && ^(main_lrph12ipreheader_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_342_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %343 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
		main_lrph12ipreheader_343 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %343 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_150)) begin
		main_lrph12ipreheader_343_reg <= main_lrph12ipreheader_343;
		if (start == 1'b0 && ^(main_lrph12ipreheader_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_343_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %344 = and i32 %343, 15*/
		main_lrph12ipreheader_344 = (main_lrph12ipreheader_343 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %344 = and i32 %343, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_150)) begin
		main_lrph12ipreheader_344_reg <= main_lrph12ipreheader_344;
		if (start == 1'b0 && ^(main_lrph12ipreheader_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_344_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %345 = ashr i32 %343, 4*/
		main_lrph12ipreheader_345 = ($signed(main_lrph12ipreheader_343) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %345 = ashr i32 %343, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_150)) begin
		main_lrph12ipreheader_345_reg <= main_lrph12ipreheader_345;
		if (start == 1'b0 && ^(main_lrph12ipreheader_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_345_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %346 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %345, i32 %344*/
		main_lrph12ipreheader_346 = (1'd0 | ((64 * main_lrph12ipreheader_345) + (4 * main_lrph12ipreheader_344)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %346 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %345, i32 %344*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_150)) begin
		main_lrph12ipreheader_346_reg <= main_lrph12ipreheader_346;
		if (start == 1'b0 && ^(main_lrph12ipreheader_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_346_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %347 = load i32* %346, align 4, !tbaa !1*/
		main_lrph12ipreheader_347 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %347 = load i32* %346, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		main_lrph12ipreheader_347_reg <= main_lrph12ipreheader_347;
		if (start == 1'b0 && ^(main_lrph12ipreheader_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_347_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %348 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
		main_lrph12ipreheader_348 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %348 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		main_lrph12ipreheader_348_reg <= main_lrph12ipreheader_348;
		if (start == 1'b0 && ^(main_lrph12ipreheader_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_348_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %349 = and i32 %348, 15*/
		main_lrph12ipreheader_349 = (main_lrph12ipreheader_348 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %349 = and i32 %348, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		main_lrph12ipreheader_349_reg <= main_lrph12ipreheader_349;
		if (start == 1'b0 && ^(main_lrph12ipreheader_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_349_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %350 = ashr i32 %348, 4*/
		main_lrph12ipreheader_350 = ($signed(main_lrph12ipreheader_348) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %350 = ashr i32 %348, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		main_lrph12ipreheader_350_reg <= main_lrph12ipreheader_350;
		if (start == 1'b0 && ^(main_lrph12ipreheader_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_350_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %351 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %350, i32 %349*/
		main_lrph12ipreheader_351 = (1'd0 | ((64 * main_lrph12ipreheader_350) + (4 * main_lrph12ipreheader_349)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %351 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %350, i32 %349*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		main_lrph12ipreheader_351_reg <= main_lrph12ipreheader_351;
		if (start == 1'b0 && ^(main_lrph12ipreheader_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_351_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %352 = load i32* %351, align 4, !tbaa !1*/
		main_lrph12ipreheader_352 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %352 = load i32* %351, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		main_lrph12ipreheader_352_reg <= main_lrph12ipreheader_352;
		if (start == 1'b0 && ^(main_lrph12ipreheader_352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_352_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %353 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
		main_lrph12ipreheader_353 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %353 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		main_lrph12ipreheader_353_reg <= main_lrph12ipreheader_353;
		if (start == 1'b0 && ^(main_lrph12ipreheader_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_353_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %354 = and i32 %353, 15*/
		main_lrph12ipreheader_354 = (main_lrph12ipreheader_353 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %354 = and i32 %353, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		main_lrph12ipreheader_354_reg <= main_lrph12ipreheader_354;
		if (start == 1'b0 && ^(main_lrph12ipreheader_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_354_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %355 = ashr i32 %353, 4*/
		main_lrph12ipreheader_355 = ($signed(main_lrph12ipreheader_353) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %355 = ashr i32 %353, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		main_lrph12ipreheader_355_reg <= main_lrph12ipreheader_355;
		if (start == 1'b0 && ^(main_lrph12ipreheader_355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_355_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %356 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %355, i32 %354*/
		main_lrph12ipreheader_356 = (1'd0 | ((64 * main_lrph12ipreheader_355) + (4 * main_lrph12ipreheader_354)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %356 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %355, i32 %354*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		main_lrph12ipreheader_356_reg <= main_lrph12ipreheader_356;
		if (start == 1'b0 && ^(main_lrph12ipreheader_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_356_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %357 = load i32* %356, align 4, !tbaa !1*/
		main_lrph12ipreheader_357 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %357 = load i32* %356, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		main_lrph12ipreheader_357_reg <= main_lrph12ipreheader_357;
		if (start == 1'b0 && ^(main_lrph12ipreheader_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_357_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %358 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
		main_lrph12ipreheader_358 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %358 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		main_lrph12ipreheader_358_reg <= main_lrph12ipreheader_358;
		if (start == 1'b0 && ^(main_lrph12ipreheader_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_358_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %359 = and i32 %358, 15*/
		main_lrph12ipreheader_359 = (main_lrph12ipreheader_358 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %359 = and i32 %358, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		main_lrph12ipreheader_359_reg <= main_lrph12ipreheader_359;
		if (start == 1'b0 && ^(main_lrph12ipreheader_359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_359_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %360 = ashr i32 %358, 4*/
		main_lrph12ipreheader_360 = ($signed(main_lrph12ipreheader_358) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %360 = ashr i32 %358, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		main_lrph12ipreheader_360_reg <= main_lrph12ipreheader_360;
		if (start == 1'b0 && ^(main_lrph12ipreheader_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_360_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %361 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %360, i32 %359*/
		main_lrph12ipreheader_361 = (1'd0 | ((64 * main_lrph12ipreheader_360) + (4 * main_lrph12ipreheader_359)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %361 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %360, i32 %359*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		main_lrph12ipreheader_361_reg <= main_lrph12ipreheader_361;
		if (start == 1'b0 && ^(main_lrph12ipreheader_361) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_361_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %362 = load i32* %361, align 4, !tbaa !1*/
		main_lrph12ipreheader_362 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %362 = load i32* %361, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_153)) begin
		main_lrph12ipreheader_362_reg <= main_lrph12ipreheader_362;
		if (start == 1'b0 && ^(main_lrph12ipreheader_362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_362_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %363 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
		main_lrph12ipreheader_363 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %363 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		main_lrph12ipreheader_363_reg <= main_lrph12ipreheader_363;
		if (start == 1'b0 && ^(main_lrph12ipreheader_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_363_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %364 = and i32 %363, 15*/
		main_lrph12ipreheader_364 = (main_lrph12ipreheader_363 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %364 = and i32 %363, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		main_lrph12ipreheader_364_reg <= main_lrph12ipreheader_364;
		if (start == 1'b0 && ^(main_lrph12ipreheader_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_364_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %365 = ashr i32 %363, 4*/
		main_lrph12ipreheader_365 = ($signed(main_lrph12ipreheader_363) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %365 = ashr i32 %363, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		main_lrph12ipreheader_365_reg <= main_lrph12ipreheader_365;
		if (start == 1'b0 && ^(main_lrph12ipreheader_365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_365_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %366 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %365, i32 %364*/
		main_lrph12ipreheader_366 = (1'd0 | ((64 * main_lrph12ipreheader_365) + (4 * main_lrph12ipreheader_364)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %366 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %365, i32 %364*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		main_lrph12ipreheader_366_reg <= main_lrph12ipreheader_366;
		if (start == 1'b0 && ^(main_lrph12ipreheader_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_366_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %367 = load i32* %366, align 4, !tbaa !1*/
		main_lrph12ipreheader_367 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i.preheader*/
	/*   %367 = load i32* %366, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_153)) begin
		main_lrph12ipreheader_367_reg <= main_lrph12ipreheader_367;
		if (start == 1'b0 && ^(main_lrph12ipreheader_367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12ipreheader_367_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.lr.ph12.i ], [ 0, %.lr.ph12.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph12ipreheader_159) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph12i_indvar = 32'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.lr.ph12.i ], [ 0, %.lr.ph12.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrph12i_178) & (memory_controller_waitrequest == 1'd0)) & (main_lrph12i_exitcond22_reg == 1'd0))) */ begin
		main_lrph12i_indvar = main_lrph12i_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.lr.ph12.i ], [ 0, %.lr.ph12.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph12ipreheader_159) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph12i_indvar_reg <= main_lrph12i_indvar;
		if (start == 1'b0 && ^(main_lrph12i_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_indvar_reg"); $finish; end
	end
	/* main: %.lr.ph12.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.lr.ph12.i ], [ 0, %.lr.ph12.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrph12i_178) & (memory_controller_waitrequest == 1'd0)) & (main_lrph12i_exitcond22_reg == 1'd0))) begin
		main_lrph12i_indvar_reg <= main_lrph12i_indvar;
		if (start == 1'b0 && ^(main_lrph12i_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %i.011.i = sub i32 9, %indvar*/
		main_lrph12i_i011i = (32'd9 - main_lrph12i_indvar_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %i.011.i = sub i32 9, %indvar*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_160)) begin
		main_lrph12i_i011i_reg <= main_lrph12i_i011i;
		if (start == 1'b0 && ^(main_lrph12i_i011i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_i011i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %369 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
		main_lrph12i_369 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %369 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_164)) begin
		main_lrph12i_369_reg <= main_lrph12i_369;
		if (start == 1'b0 && ^(main_lrph12i_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_369_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %370 = and i32 %369, 15*/
		main_lrph12i_370 = (main_lrph12i_369 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %370 = and i32 %369, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_164)) begin
		main_lrph12i_370_reg <= main_lrph12i_370;
		if (start == 1'b0 && ^(main_lrph12i_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_370_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %371 = ashr i32 %369, 4*/
		main_lrph12i_371 = ($signed(main_lrph12i_369) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %371 = ashr i32 %369, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_164)) begin
		main_lrph12i_371_reg <= main_lrph12i_371;
		if (start == 1'b0 && ^(main_lrph12i_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_371_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %372 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %371, i32 %370*/
		main_lrph12i_372 = (1'd0 | ((64 * main_lrph12i_371) + (4 * main_lrph12i_370)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %372 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %371, i32 %370*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_164)) begin
		main_lrph12i_372_reg <= main_lrph12i_372;
		if (start == 1'b0 && ^(main_lrph12i_372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_372_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %373 = load i32* %372, align 4, !tbaa !1*/
		main_lrph12i_373 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %373 = load i32* %372, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_165)) begin
		main_lrph12i_373_reg <= main_lrph12i_373;
		if (start == 1'b0 && ^(main_lrph12i_373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_373_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %374 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
		main_lrph12i_374 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %374 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_164)) begin
		main_lrph12i_374_reg <= main_lrph12i_374;
		if (start == 1'b0 && ^(main_lrph12i_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_374_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %375 = and i32 %374, 15*/
		main_lrph12i_375 = (main_lrph12i_374 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %375 = and i32 %374, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_164)) begin
		main_lrph12i_375_reg <= main_lrph12i_375;
		if (start == 1'b0 && ^(main_lrph12i_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_375_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %376 = ashr i32 %374, 4*/
		main_lrph12i_376 = ($signed(main_lrph12i_374) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %376 = ashr i32 %374, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_164)) begin
		main_lrph12i_376_reg <= main_lrph12i_376;
		if (start == 1'b0 && ^(main_lrph12i_376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_376_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %377 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %376, i32 %375*/
		main_lrph12i_377 = (1'd0 | ((64 * main_lrph12i_376) + (4 * main_lrph12i_375)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %377 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %376, i32 %375*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_164)) begin
		main_lrph12i_377_reg <= main_lrph12i_377;
		if (start == 1'b0 && ^(main_lrph12i_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_377_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %378 = load i32* %377, align 4, !tbaa !1*/
		main_lrph12i_378 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %378 = load i32* %377, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_165)) begin
		main_lrph12i_378_reg <= main_lrph12i_378;
		if (start == 1'b0 && ^(main_lrph12i_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_378_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %379 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
		main_lrph12i_379 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %379 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_165)) begin
		main_lrph12i_379_reg <= main_lrph12i_379;
		if (start == 1'b0 && ^(main_lrph12i_379) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_379_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %380 = and i32 %379, 15*/
		main_lrph12i_380 = (main_lrph12i_379 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %380 = and i32 %379, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_165)) begin
		main_lrph12i_380_reg <= main_lrph12i_380;
		if (start == 1'b0 && ^(main_lrph12i_380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_380_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %381 = ashr i32 %379, 4*/
		main_lrph12i_381 = ($signed(main_lrph12i_379) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %381 = ashr i32 %379, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_165)) begin
		main_lrph12i_381_reg <= main_lrph12i_381;
		if (start == 1'b0 && ^(main_lrph12i_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_381_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %382 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %381, i32 %380*/
		main_lrph12i_382 = (1'd0 | ((64 * main_lrph12i_381) + (4 * main_lrph12i_380)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %382 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %381, i32 %380*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_165)) begin
		main_lrph12i_382_reg <= main_lrph12i_382;
		if (start == 1'b0 && ^(main_lrph12i_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_382_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %383 = load i32* %382, align 4, !tbaa !1*/
		main_lrph12i_383 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %383 = load i32* %382, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_166)) begin
		main_lrph12i_383_reg <= main_lrph12i_383;
		if (start == 1'b0 && ^(main_lrph12i_383) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_383_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %384 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
		main_lrph12i_384 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %384 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_165)) begin
		main_lrph12i_384_reg <= main_lrph12i_384;
		if (start == 1'b0 && ^(main_lrph12i_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_384_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %385 = and i32 %384, 15*/
		main_lrph12i_385 = (main_lrph12i_384 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %385 = and i32 %384, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_165)) begin
		main_lrph12i_385_reg <= main_lrph12i_385;
		if (start == 1'b0 && ^(main_lrph12i_385) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_385_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %386 = ashr i32 %384, 4*/
		main_lrph12i_386 = ($signed(main_lrph12i_384) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %386 = ashr i32 %384, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_165)) begin
		main_lrph12i_386_reg <= main_lrph12i_386;
		if (start == 1'b0 && ^(main_lrph12i_386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_386_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %387 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %386, i32 %385*/
		main_lrph12i_387 = (1'd0 | ((64 * main_lrph12i_386) + (4 * main_lrph12i_385)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %387 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %386, i32 %385*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_165)) begin
		main_lrph12i_387_reg <= main_lrph12i_387;
		if (start == 1'b0 && ^(main_lrph12i_387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_387_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %388 = load i32* %387, align 4, !tbaa !1*/
		main_lrph12i_388 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %388 = load i32* %387, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_166)) begin
		main_lrph12i_388_reg <= main_lrph12i_388;
		if (start == 1'b0 && ^(main_lrph12i_388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_388_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %389 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
		main_lrph12i_389 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %389 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_166)) begin
		main_lrph12i_389_reg <= main_lrph12i_389;
		if (start == 1'b0 && ^(main_lrph12i_389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_389_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %390 = and i32 %389, 15*/
		main_lrph12i_390 = (main_lrph12i_389 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %390 = and i32 %389, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_166)) begin
		main_lrph12i_390_reg <= main_lrph12i_390;
		if (start == 1'b0 && ^(main_lrph12i_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_390_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %391 = ashr i32 %389, 4*/
		main_lrph12i_391 = ($signed(main_lrph12i_389) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %391 = ashr i32 %389, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_166)) begin
		main_lrph12i_391_reg <= main_lrph12i_391;
		if (start == 1'b0 && ^(main_lrph12i_391) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_391_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %392 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %391, i32 %390*/
		main_lrph12i_392 = (1'd0 | ((64 * main_lrph12i_391) + (4 * main_lrph12i_390)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %392 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %391, i32 %390*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_166)) begin
		main_lrph12i_392_reg <= main_lrph12i_392;
		if (start == 1'b0 && ^(main_lrph12i_392) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_392_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %393 = load i32* %392, align 4, !tbaa !1*/
		main_lrph12i_393 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %393 = load i32* %392, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_167)) begin
		main_lrph12i_393_reg <= main_lrph12i_393;
		if (start == 1'b0 && ^(main_lrph12i_393) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_393_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %394 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
		main_lrph12i_394 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %394 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_166)) begin
		main_lrph12i_394_reg <= main_lrph12i_394;
		if (start == 1'b0 && ^(main_lrph12i_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_394_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %395 = and i32 %394, 15*/
		main_lrph12i_395 = (main_lrph12i_394 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %395 = and i32 %394, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_166)) begin
		main_lrph12i_395_reg <= main_lrph12i_395;
		if (start == 1'b0 && ^(main_lrph12i_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_395_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %396 = ashr i32 %394, 4*/
		main_lrph12i_396 = ($signed(main_lrph12i_394) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %396 = ashr i32 %394, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_166)) begin
		main_lrph12i_396_reg <= main_lrph12i_396;
		if (start == 1'b0 && ^(main_lrph12i_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_396_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %397 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %396, i32 %395*/
		main_lrph12i_397 = (1'd0 | ((64 * main_lrph12i_396) + (4 * main_lrph12i_395)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %397 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %396, i32 %395*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_166)) begin
		main_lrph12i_397_reg <= main_lrph12i_397;
		if (start == 1'b0 && ^(main_lrph12i_397) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_397_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %398 = load i32* %397, align 4, !tbaa !1*/
		main_lrph12i_398 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %398 = load i32* %397, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_167)) begin
		main_lrph12i_398_reg <= main_lrph12i_398;
		if (start == 1'b0 && ^(main_lrph12i_398) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_398_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %399 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
		main_lrph12i_399 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %399 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_167)) begin
		main_lrph12i_399_reg <= main_lrph12i_399;
		if (start == 1'b0 && ^(main_lrph12i_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_399_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %400 = and i32 %399, 15*/
		main_lrph12i_400 = (main_lrph12i_399 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %400 = and i32 %399, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_167)) begin
		main_lrph12i_400_reg <= main_lrph12i_400;
		if (start == 1'b0 && ^(main_lrph12i_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_400_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %401 = ashr i32 %399, 4*/
		main_lrph12i_401 = ($signed(main_lrph12i_399) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %401 = ashr i32 %399, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_167)) begin
		main_lrph12i_401_reg <= main_lrph12i_401;
		if (start == 1'b0 && ^(main_lrph12i_401) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_401_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %402 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %401, i32 %400*/
		main_lrph12i_402 = (1'd0 | ((64 * main_lrph12i_401) + (4 * main_lrph12i_400)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %402 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %401, i32 %400*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_167)) begin
		main_lrph12i_402_reg <= main_lrph12i_402;
		if (start == 1'b0 && ^(main_lrph12i_402) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_402_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %403 = load i32* %402, align 4, !tbaa !1*/
		main_lrph12i_403 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %403 = load i32* %402, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_168)) begin
		main_lrph12i_403_reg <= main_lrph12i_403;
		if (start == 1'b0 && ^(main_lrph12i_403) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_403_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %404 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
		main_lrph12i_404 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %404 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_167)) begin
		main_lrph12i_404_reg <= main_lrph12i_404;
		if (start == 1'b0 && ^(main_lrph12i_404) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_404_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %405 = and i32 %404, 15*/
		main_lrph12i_405 = (main_lrph12i_404 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %405 = and i32 %404, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_167)) begin
		main_lrph12i_405_reg <= main_lrph12i_405;
		if (start == 1'b0 && ^(main_lrph12i_405) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_405_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %406 = ashr i32 %404, 4*/
		main_lrph12i_406 = ($signed(main_lrph12i_404) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %406 = ashr i32 %404, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_167)) begin
		main_lrph12i_406_reg <= main_lrph12i_406;
		if (start == 1'b0 && ^(main_lrph12i_406) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_406_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %407 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %406, i32 %405*/
		main_lrph12i_407 = (1'd0 | ((64 * main_lrph12i_406) + (4 * main_lrph12i_405)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %407 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %406, i32 %405*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_167)) begin
		main_lrph12i_407_reg <= main_lrph12i_407;
		if (start == 1'b0 && ^(main_lrph12i_407) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_407_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %408 = load i32* %407, align 4, !tbaa !1*/
		main_lrph12i_408 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %408 = load i32* %407, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_168)) begin
		main_lrph12i_408_reg <= main_lrph12i_408;
		if (start == 1'b0 && ^(main_lrph12i_408) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_408_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %409 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
		main_lrph12i_409 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %409 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_168)) begin
		main_lrph12i_409_reg <= main_lrph12i_409;
		if (start == 1'b0 && ^(main_lrph12i_409) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_409_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %410 = and i32 %409, 15*/
		main_lrph12i_410 = (main_lrph12i_409 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %410 = and i32 %409, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_168)) begin
		main_lrph12i_410_reg <= main_lrph12i_410;
		if (start == 1'b0 && ^(main_lrph12i_410) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_410_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %411 = ashr i32 %409, 4*/
		main_lrph12i_411 = ($signed(main_lrph12i_409) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %411 = ashr i32 %409, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_168)) begin
		main_lrph12i_411_reg <= main_lrph12i_411;
		if (start == 1'b0 && ^(main_lrph12i_411) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_411_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %412 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %411, i32 %410*/
		main_lrph12i_412 = (1'd0 | ((64 * main_lrph12i_411) + (4 * main_lrph12i_410)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %412 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %411, i32 %410*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_168)) begin
		main_lrph12i_412_reg <= main_lrph12i_412;
		if (start == 1'b0 && ^(main_lrph12i_412) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_412_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %413 = load i32* %412, align 4, !tbaa !1*/
		main_lrph12i_413 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %413 = load i32* %412, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_169)) begin
		main_lrph12i_413_reg <= main_lrph12i_413;
		if (start == 1'b0 && ^(main_lrph12i_413) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_413_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %414 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
		main_lrph12i_414 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %414 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_168)) begin
		main_lrph12i_414_reg <= main_lrph12i_414;
		if (start == 1'b0 && ^(main_lrph12i_414) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_414_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %415 = and i32 %414, 15*/
		main_lrph12i_415 = (main_lrph12i_414 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %415 = and i32 %414, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_168)) begin
		main_lrph12i_415_reg <= main_lrph12i_415;
		if (start == 1'b0 && ^(main_lrph12i_415) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_415_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %416 = ashr i32 %414, 4*/
		main_lrph12i_416 = ($signed(main_lrph12i_414) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %416 = ashr i32 %414, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_168)) begin
		main_lrph12i_416_reg <= main_lrph12i_416;
		if (start == 1'b0 && ^(main_lrph12i_416) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_416_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %417 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %416, i32 %415*/
		main_lrph12i_417 = (1'd0 | ((64 * main_lrph12i_416) + (4 * main_lrph12i_415)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %417 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %416, i32 %415*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_168)) begin
		main_lrph12i_417_reg <= main_lrph12i_417;
		if (start == 1'b0 && ^(main_lrph12i_417) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_417_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %418 = load i32* %417, align 4, !tbaa !1*/
		main_lrph12i_418 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %418 = load i32* %417, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_169)) begin
		main_lrph12i_418_reg <= main_lrph12i_418;
		if (start == 1'b0 && ^(main_lrph12i_418) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_418_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %419 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
		main_lrph12i_419 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %419 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_169)) begin
		main_lrph12i_419_reg <= main_lrph12i_419;
		if (start == 1'b0 && ^(main_lrph12i_419) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_419_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %420 = and i32 %419, 15*/
		main_lrph12i_420 = (main_lrph12i_419 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %420 = and i32 %419, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_169)) begin
		main_lrph12i_420_reg <= main_lrph12i_420;
		if (start == 1'b0 && ^(main_lrph12i_420) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_420_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %421 = ashr i32 %419, 4*/
		main_lrph12i_421 = ($signed(main_lrph12i_419) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %421 = ashr i32 %419, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_169)) begin
		main_lrph12i_421_reg <= main_lrph12i_421;
		if (start == 1'b0 && ^(main_lrph12i_421) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_421_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %422 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %421, i32 %420*/
		main_lrph12i_422 = (1'd0 | ((64 * main_lrph12i_421) + (4 * main_lrph12i_420)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %422 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %421, i32 %420*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_169)) begin
		main_lrph12i_422_reg <= main_lrph12i_422;
		if (start == 1'b0 && ^(main_lrph12i_422) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_422_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %423 = load i32* %422, align 4, !tbaa !1*/
		main_lrph12i_423 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %423 = load i32* %422, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		main_lrph12i_423_reg <= main_lrph12i_423;
		if (start == 1'b0 && ^(main_lrph12i_423) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_423_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %424 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
		main_lrph12i_424 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %424 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_169)) begin
		main_lrph12i_424_reg <= main_lrph12i_424;
		if (start == 1'b0 && ^(main_lrph12i_424) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_424_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %425 = and i32 %424, 15*/
		main_lrph12i_425 = (main_lrph12i_424 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %425 = and i32 %424, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_169)) begin
		main_lrph12i_425_reg <= main_lrph12i_425;
		if (start == 1'b0 && ^(main_lrph12i_425) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_425_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %426 = ashr i32 %424, 4*/
		main_lrph12i_426 = ($signed(main_lrph12i_424) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %426 = ashr i32 %424, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_169)) begin
		main_lrph12i_426_reg <= main_lrph12i_426;
		if (start == 1'b0 && ^(main_lrph12i_426) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_426_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %427 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %426, i32 %425*/
		main_lrph12i_427 = (1'd0 | ((64 * main_lrph12i_426) + (4 * main_lrph12i_425)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %427 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %426, i32 %425*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_169)) begin
		main_lrph12i_427_reg <= main_lrph12i_427;
		if (start == 1'b0 && ^(main_lrph12i_427) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_427_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %428 = load i32* %427, align 4, !tbaa !1*/
		main_lrph12i_428 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %428 = load i32* %427, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		main_lrph12i_428_reg <= main_lrph12i_428;
		if (start == 1'b0 && ^(main_lrph12i_428) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_428_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %429 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
		main_lrph12i_429 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %429 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		main_lrph12i_429_reg <= main_lrph12i_429;
		if (start == 1'b0 && ^(main_lrph12i_429) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_429_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %430 = and i32 %429, 15*/
		main_lrph12i_430 = (main_lrph12i_429 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %430 = and i32 %429, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		main_lrph12i_430_reg <= main_lrph12i_430;
		if (start == 1'b0 && ^(main_lrph12i_430) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_430_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %431 = ashr i32 %429, 4*/
		main_lrph12i_431 = ($signed(main_lrph12i_429) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %431 = ashr i32 %429, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		main_lrph12i_431_reg <= main_lrph12i_431;
		if (start == 1'b0 && ^(main_lrph12i_431) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_431_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %432 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %431, i32 %430*/
		main_lrph12i_432 = (1'd0 | ((64 * main_lrph12i_431) + (4 * main_lrph12i_430)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %432 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %431, i32 %430*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		main_lrph12i_432_reg <= main_lrph12i_432;
		if (start == 1'b0 && ^(main_lrph12i_432) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_432_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %433 = load i32* %432, align 4, !tbaa !1*/
		main_lrph12i_433 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %433 = load i32* %432, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		main_lrph12i_433_reg <= main_lrph12i_433;
		if (start == 1'b0 && ^(main_lrph12i_433) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_433_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %434 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
		main_lrph12i_434 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %434 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		main_lrph12i_434_reg <= main_lrph12i_434;
		if (start == 1'b0 && ^(main_lrph12i_434) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_434_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %435 = and i32 %434, 15*/
		main_lrph12i_435 = (main_lrph12i_434 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %435 = and i32 %434, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		main_lrph12i_435_reg <= main_lrph12i_435;
		if (start == 1'b0 && ^(main_lrph12i_435) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_435_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %436 = ashr i32 %434, 4*/
		main_lrph12i_436 = ($signed(main_lrph12i_434) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %436 = ashr i32 %434, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		main_lrph12i_436_reg <= main_lrph12i_436;
		if (start == 1'b0 && ^(main_lrph12i_436) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_436_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %437 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %436, i32 %435*/
		main_lrph12i_437 = (1'd0 | ((64 * main_lrph12i_436) + (4 * main_lrph12i_435)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %437 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %436, i32 %435*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		main_lrph12i_437_reg <= main_lrph12i_437;
		if (start == 1'b0 && ^(main_lrph12i_437) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_437_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %438 = load i32* %437, align 4, !tbaa !1*/
		main_lrph12i_438 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %438 = load i32* %437, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		main_lrph12i_438_reg <= main_lrph12i_438;
		if (start == 1'b0 && ^(main_lrph12i_438) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_438_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %439 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
		main_lrph12i_439 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %439 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		main_lrph12i_439_reg <= main_lrph12i_439;
		if (start == 1'b0 && ^(main_lrph12i_439) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_439_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %440 = and i32 %439, 15*/
		main_lrph12i_440 = (main_lrph12i_439 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %440 = and i32 %439, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		main_lrph12i_440_reg <= main_lrph12i_440;
		if (start == 1'b0 && ^(main_lrph12i_440) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_440_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %441 = ashr i32 %439, 4*/
		main_lrph12i_441 = ($signed(main_lrph12i_439) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %441 = ashr i32 %439, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		main_lrph12i_441_reg <= main_lrph12i_441;
		if (start == 1'b0 && ^(main_lrph12i_441) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_441_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %442 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %441, i32 %440*/
		main_lrph12i_442 = (1'd0 | ((64 * main_lrph12i_441) + (4 * main_lrph12i_440)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %442 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %441, i32 %440*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		main_lrph12i_442_reg <= main_lrph12i_442;
		if (start == 1'b0 && ^(main_lrph12i_442) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_442_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %443 = load i32* %442, align 4, !tbaa !1*/
		main_lrph12i_443 = invSbox_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %443 = load i32* %442, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_172)) begin
		main_lrph12i_443_reg <= main_lrph12i_443;
		if (start == 1'b0 && ^(main_lrph12i_443) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_443_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %444 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
		main_lrph12i_444 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %444 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		main_lrph12i_444_reg <= main_lrph12i_444;
		if (start == 1'b0 && ^(main_lrph12i_444) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_444_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %445 = and i32 %444, 15*/
		main_lrph12i_445 = (main_lrph12i_444 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %445 = and i32 %444, 15*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		main_lrph12i_445_reg <= main_lrph12i_445;
		if (start == 1'b0 && ^(main_lrph12i_445) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_445_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %446 = ashr i32 %444, 4*/
		main_lrph12i_446 = ($signed(main_lrph12i_444) >>> 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %446 = ashr i32 %444, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		main_lrph12i_446_reg <= main_lrph12i_446;
		if (start == 1'b0 && ^(main_lrph12i_446) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_446_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %447 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %446, i32 %445*/
		main_lrph12i_447 = (1'd0 | ((64 * main_lrph12i_446) + (4 * main_lrph12i_445)));
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %447 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %446, i32 %445*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		main_lrph12i_447_reg <= main_lrph12i_447;
		if (start == 1'b0 && ^(main_lrph12i_447) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_447_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %448 = load i32* %447, align 4, !tbaa !1*/
		main_lrph12i_448 = invSbox_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %448 = load i32* %447, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_172)) begin
		main_lrph12i_448_reg <= main_lrph12i_448;
		if (start == 1'b0 && ^(main_lrph12i_448) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_448_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_lrph12i_indvarnext = (main_lrph12i_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_160)) begin
		main_lrph12i_indvarnext_reg <= main_lrph12i_indvarnext;
		if (start == 1'b0 && ^(main_lrph12i_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %exitcond22 = icmp eq i32 %indvar.next, 9*/
		main_lrph12i_exitcond22 = (main_lrph12i_indvarnext == 32'd9);
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %exitcond22 = icmp eq i32 %indvar.next, 9*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_160)) begin
		main_lrph12i_exitcond22_reg <= main_lrph12i_exitcond22;
		if (start == 1'b0 && ^(main_lrph12i_exitcond22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph12i_exitcond22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %j.02.i2.i11 = phi i32 [ %465, %._crit_edge.i ], [ 0, %._crit_edge.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgeipreheader_179) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_j02i2i11 = 32'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %j.02.i2.i11 = phi i32 [ %465, %._crit_edge.i ], [ 0, %._crit_edge.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edgei_186) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei_exitcond13_reg == 1'd0))) */ begin
		main__crit_edgei_j02i2i11 = main__crit_edgei_465_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %j.02.i2.i11 = phi i32 [ %465, %._crit_edge.i ], [ 0, %._crit_edge.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgeipreheader_179) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_j02i2i11_reg <= main__crit_edgei_j02i2i11;
		if (start == 1'b0 && ^(main__crit_edgei_j02i2i11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_j02i2i11_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %j.02.i2.i11 = phi i32 [ %465, %._crit_edge.i ], [ 0, %._crit_edge.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgei_186) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei_exitcond13_reg == 1'd0))) begin
		main__crit_edgei_j02i2i11_reg <= main__crit_edgei_j02i2i11;
		if (start == 1'b0 && ^(main__crit_edgei_j02i2i11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_j02i2i11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep14 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %j.02.i2.i11*/
		main__crit_edgei_scevgep14 = (`TAG_g_word_a | ((480 * 32'd3) + (4 * main__crit_edgei_j02i2i11_reg)));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep14 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %j.02.i2.i11*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_180)) begin
		main__crit_edgei_scevgep14_reg <= main__crit_edgei_scevgep14;
		if (start == 1'b0 && ^(main__crit_edgei_scevgep14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_scevgep14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep15 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %j.02.i2.i11*/
		main__crit_edgei_scevgep15 = (`TAG_g_word_a | ((480 * 32'd2) + (4 * main__crit_edgei_j02i2i11_reg)));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep15 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %j.02.i2.i11*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_180)) begin
		main__crit_edgei_scevgep15_reg <= main__crit_edgei_scevgep15;
		if (start == 1'b0 && ^(main__crit_edgei_scevgep15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_scevgep15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep16 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %j.02.i2.i11*/
		main__crit_edgei_scevgep16 = (`TAG_g_word_a | ((480 * 32'd1) + (4 * main__crit_edgei_j02i2i11_reg)));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep16 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %j.02.i2.i11*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_180)) begin
		main__crit_edgei_scevgep16_reg <= main__crit_edgei_scevgep16;
		if (start == 1'b0 && ^(main__crit_edgei_scevgep16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_scevgep16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %449 = shl i32 %j.02.i2.i11, 2*/
		main__crit_edgei_449 = (main__crit_edgei_j02i2i11_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %449 = shl i32 %j.02.i2.i11, 2*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_180)) begin
		main__crit_edgei_449_reg <= main__crit_edgei_449;
		if (start == 1'b0 && ^(main__crit_edgei_449) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_449_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %450 = or i32 %449, 3*/
		main__crit_edgei_450 = (main__crit_edgei_449 | 32'd3);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %450 = or i32 %449, 3*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_180)) begin
		main__crit_edgei_450_reg <= main__crit_edgei_450;
		if (start == 1'b0 && ^(main__crit_edgei_450) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_450_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep17 = getelementptr [32 x i32]* @statemt, i32 0, i32 %450*/
		main__crit_edgei_scevgep17 = (`TAG_g_statemt_a | (4 * main__crit_edgei_450));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep17 = getelementptr [32 x i32]* @statemt, i32 0, i32 %450*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_180)) begin
		main__crit_edgei_scevgep17_reg <= main__crit_edgei_scevgep17;
		if (start == 1'b0 && ^(main__crit_edgei_scevgep17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_scevgep17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %451 = or i32 %449, 2*/
		main__crit_edgei_451 = (main__crit_edgei_449 | 32'd2);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %451 = or i32 %449, 2*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_180)) begin
		main__crit_edgei_451_reg <= main__crit_edgei_451;
		if (start == 1'b0 && ^(main__crit_edgei_451) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_451_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep18 = getelementptr [32 x i32]* @statemt, i32 0, i32 %451*/
		main__crit_edgei_scevgep18 = (`TAG_g_statemt_a | (4 * main__crit_edgei_451));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep18 = getelementptr [32 x i32]* @statemt, i32 0, i32 %451*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_180)) begin
		main__crit_edgei_scevgep18_reg <= main__crit_edgei_scevgep18;
		if (start == 1'b0 && ^(main__crit_edgei_scevgep18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_scevgep18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %452 = or i32 %449, 1*/
		main__crit_edgei_452 = (main__crit_edgei_449 | 32'd1);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %452 = or i32 %449, 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_180)) begin
		main__crit_edgei_452_reg <= main__crit_edgei_452;
		if (start == 1'b0 && ^(main__crit_edgei_452) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_452_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep19 = getelementptr [32 x i32]* @statemt, i32 0, i32 %452*/
		main__crit_edgei_scevgep19 = (`TAG_g_statemt_a | (4 * main__crit_edgei_452));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep19 = getelementptr [32 x i32]* @statemt, i32 0, i32 %452*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_180)) begin
		main__crit_edgei_scevgep19_reg <= main__crit_edgei_scevgep19;
		if (start == 1'b0 && ^(main__crit_edgei_scevgep19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_scevgep19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep20 = getelementptr [32 x i32]* @statemt, i32 0, i32 %449*/
		main__crit_edgei_scevgep20 = (`TAG_g_statemt_a | (4 * main__crit_edgei_449));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep20 = getelementptr [32 x i32]* @statemt, i32 0, i32 %449*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_180)) begin
		main__crit_edgei_scevgep20_reg <= main__crit_edgei_scevgep20;
		if (start == 1'b0 && ^(main__crit_edgei_scevgep20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_scevgep20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep21 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %j.02.i2.i11*/
		main__crit_edgei_scevgep21 = (`TAG_g_word_a | (4 * main__crit_edgei_j02i2i11_reg));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep21 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %j.02.i2.i11*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_180)) begin
		main__crit_edgei_scevgep21_reg <= main__crit_edgei_scevgep21;
		if (start == 1'b0 && ^(main__crit_edgei_scevgep21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_scevgep21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %453 = load i32* %scevgep21, align 4, !tbaa !1*/
		main__crit_edgei_453 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %453 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_182)) begin
		main__crit_edgei_453_reg <= main__crit_edgei_453;
		if (start == 1'b0 && ^(main__crit_edgei_453) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_453_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %454 = load i32* %scevgep20, align 4, !tbaa !1*/
		main__crit_edgei_454 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %454 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_182)) begin
		main__crit_edgei_454_reg <= main__crit_edgei_454;
		if (start == 1'b0 && ^(main__crit_edgei_454) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_454_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %455 = xor i32 %454, %453*/
		main__crit_edgei_455 = (main__crit_edgei_454 ^ main__crit_edgei_453);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %455 = xor i32 %454, %453*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_182)) begin
		main__crit_edgei_455_reg <= main__crit_edgei_455;
		if (start == 1'b0 && ^(main__crit_edgei_455) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_455_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %456 = load i32* %scevgep16, align 4, !tbaa !1*/
		main__crit_edgei_456 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %456 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_183)) begin
		main__crit_edgei_456_reg <= main__crit_edgei_456;
		if (start == 1'b0 && ^(main__crit_edgei_456) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_456_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %457 = load i32* %scevgep19, align 4, !tbaa !1*/
		main__crit_edgei_457 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %457 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_183)) begin
		main__crit_edgei_457_reg <= main__crit_edgei_457;
		if (start == 1'b0 && ^(main__crit_edgei_457) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_457_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %458 = xor i32 %457, %456*/
		main__crit_edgei_458 = (main__crit_edgei_457 ^ main__crit_edgei_456);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %458 = xor i32 %457, %456*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_183)) begin
		main__crit_edgei_458_reg <= main__crit_edgei_458;
		if (start == 1'b0 && ^(main__crit_edgei_458) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_458_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %459 = load i32* %scevgep15, align 4, !tbaa !1*/
		main__crit_edgei_459 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %459 = load i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_184)) begin
		main__crit_edgei_459_reg <= main__crit_edgei_459;
		if (start == 1'b0 && ^(main__crit_edgei_459) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_459_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %460 = load i32* %scevgep18, align 4, !tbaa !1*/
		main__crit_edgei_460 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %460 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_184)) begin
		main__crit_edgei_460_reg <= main__crit_edgei_460;
		if (start == 1'b0 && ^(main__crit_edgei_460) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_460_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %461 = xor i32 %460, %459*/
		main__crit_edgei_461 = (main__crit_edgei_460 ^ main__crit_edgei_459);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %461 = xor i32 %460, %459*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_184)) begin
		main__crit_edgei_461_reg <= main__crit_edgei_461;
		if (start == 1'b0 && ^(main__crit_edgei_461) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_461_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %462 = load i32* %scevgep14, align 4, !tbaa !1*/
		main__crit_edgei_462 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %462 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_185)) begin
		main__crit_edgei_462_reg <= main__crit_edgei_462;
		if (start == 1'b0 && ^(main__crit_edgei_462) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_462_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %463 = load i32* %scevgep17, align 4, !tbaa !1*/
		main__crit_edgei_463 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %463 = load i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_185)) begin
		main__crit_edgei_463_reg <= main__crit_edgei_463;
		if (start == 1'b0 && ^(main__crit_edgei_463) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_463_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %464 = xor i32 %463, %462*/
		main__crit_edgei_464 = (main__crit_edgei_463 ^ main__crit_edgei_462);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %464 = xor i32 %463, %462*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_185)) begin
		main__crit_edgei_464_reg <= main__crit_edgei_464;
		if (start == 1'b0 && ^(main__crit_edgei_464) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_464_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %465 = add nsw i32 %j.02.i2.i11, 1*/
		main__crit_edgei_465 = (main__crit_edgei_j02i2i11_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %465 = add nsw i32 %j.02.i2.i11, 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_180)) begin
		main__crit_edgei_465_reg <= main__crit_edgei_465;
		if (start == 1'b0 && ^(main__crit_edgei_465) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_465_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %exitcond13 = icmp eq i32 %465, 4*/
		main__crit_edgei_exitcond13 = (main__crit_edgei_465 == 32'd4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %exitcond13 = icmp eq i32 %465, 4*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_180)) begin
		main__crit_edgei_exitcond13_reg <= main__crit_edgei_exitcond13;
		if (start == 1'b0 && ^(main__crit_edgei_exitcond13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_exitcond13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %j.11.i3.i13 = phi i32 [ %474, %.preheader.i4.i14 ], [ 0, %.preheader.i4.i14.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi4i14preheader_187) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi4i14_j11i3i13 = 32'd0;
	end
	/* main: %.preheader.i4.i14*/
	/*   %j.11.i3.i13 = phi i32 [ %474, %.preheader.i4.i14 ], [ 0, %.preheader.i4.i14.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi4i14_196) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi4i14_exitcond_reg == 1'd0))) */ begin
		main_preheaderi4i14_j11i3i13 = main_preheaderi4i14_474_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %j.11.i3.i13 = phi i32 [ %474, %.preheader.i4.i14 ], [ 0, %.preheader.i4.i14.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi4i14preheader_187) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi4i14_j11i3i13_reg <= main_preheaderi4i14_j11i3i13;
		if (start == 1'b0 && ^(main_preheaderi4i14_j11i3i13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_j11i3i13_reg"); $finish; end
	end
	/* main: %.preheader.i4.i14*/
	/*   %j.11.i3.i13 = phi i32 [ %474, %.preheader.i4.i14 ], [ 0, %.preheader.i4.i14.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi4i14_196) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi4i14_exitcond_reg == 1'd0))) begin
		main_preheaderi4i14_j11i3i13_reg <= main_preheaderi4i14_j11i3i13;
		if (start == 1'b0 && ^(main_preheaderi4i14_j11i3i13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_j11i3i13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %466 = add i32 %j.11.i3.i13, 3*/
		main_preheaderi4i14_466 = (main_preheaderi4i14_j11i3i13_reg + 32'd3);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %466 = add i32 %j.11.i3.i13, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_188)) begin
		main_preheaderi4i14_466_reg <= main_preheaderi4i14_466;
		if (start == 1'b0 && ^(main_preheaderi4i14_466) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_466_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %scevgep5 = getelementptr [32 x i32]* @statemt, i32 0, i32 %466*/
		main_preheaderi4i14_scevgep5 = (`TAG_g_statemt_a | (4 * main_preheaderi4i14_466_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %scevgep5 = getelementptr [32 x i32]* @statemt, i32 0, i32 %466*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_189)) begin
		main_preheaderi4i14_scevgep5_reg <= main_preheaderi4i14_scevgep5;
		if (start == 1'b0 && ^(main_preheaderi4i14_scevgep5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_scevgep5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %scevgep6 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %j.11.i3.i13*/
		main_preheaderi4i14_scevgep6 = (`TAG_g_word_a | ((480 * 32'd3) + (4 * main_preheaderi4i14_j11i3i13_reg)));
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %scevgep6 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %j.11.i3.i13*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_188)) begin
		main_preheaderi4i14_scevgep6_reg <= main_preheaderi4i14_scevgep6;
		if (start == 1'b0 && ^(main_preheaderi4i14_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_scevgep6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %467 = add i32 %j.11.i3.i13, 2*/
		main_preheaderi4i14_467 = (main_preheaderi4i14_j11i3i13_reg + 32'd2);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %467 = add i32 %j.11.i3.i13, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_188)) begin
		main_preheaderi4i14_467_reg <= main_preheaderi4i14_467;
		if (start == 1'b0 && ^(main_preheaderi4i14_467) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_467_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %scevgep7 = getelementptr [32 x i32]* @statemt, i32 0, i32 %467*/
		main_preheaderi4i14_scevgep7 = (`TAG_g_statemt_a | (4 * main_preheaderi4i14_467_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %scevgep7 = getelementptr [32 x i32]* @statemt, i32 0, i32 %467*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_189)) begin
		main_preheaderi4i14_scevgep7_reg <= main_preheaderi4i14_scevgep7;
		if (start == 1'b0 && ^(main_preheaderi4i14_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_scevgep7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %scevgep8 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %j.11.i3.i13*/
		main_preheaderi4i14_scevgep8 = (`TAG_g_word_a | ((480 * 32'd2) + (4 * main_preheaderi4i14_j11i3i13_reg)));
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %scevgep8 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %j.11.i3.i13*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_188)) begin
		main_preheaderi4i14_scevgep8_reg <= main_preheaderi4i14_scevgep8;
		if (start == 1'b0 && ^(main_preheaderi4i14_scevgep8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_scevgep8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %468 = add i32 %j.11.i3.i13, 1*/
		main_preheaderi4i14_468 = (main_preheaderi4i14_j11i3i13_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %468 = add i32 %j.11.i3.i13, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_188)) begin
		main_preheaderi4i14_468_reg <= main_preheaderi4i14_468;
		if (start == 1'b0 && ^(main_preheaderi4i14_468) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_468_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %scevgep9 = getelementptr [32 x i32]* @statemt, i32 0, i32 %468*/
		main_preheaderi4i14_scevgep9 = (`TAG_g_statemt_a | (4 * main_preheaderi4i14_468_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %scevgep9 = getelementptr [32 x i32]* @statemt, i32 0, i32 %468*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_189)) begin
		main_preheaderi4i14_scevgep9_reg <= main_preheaderi4i14_scevgep9;
		if (start == 1'b0 && ^(main_preheaderi4i14_scevgep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_scevgep9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %scevgep10 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %j.11.i3.i13*/
		main_preheaderi4i14_scevgep10 = (`TAG_g_word_a | ((480 * 32'd1) + (4 * main_preheaderi4i14_j11i3i13_reg)));
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %scevgep10 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %j.11.i3.i13*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_188)) begin
		main_preheaderi4i14_scevgep10_reg <= main_preheaderi4i14_scevgep10;
		if (start == 1'b0 && ^(main_preheaderi4i14_scevgep10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_scevgep10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %469 = shl i32 %j.11.i3.i13, 2*/
		main_preheaderi4i14_469 = (main_preheaderi4i14_j11i3i13_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %469 = shl i32 %j.11.i3.i13, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_188)) begin
		main_preheaderi4i14_469_reg <= main_preheaderi4i14_469;
		if (start == 1'b0 && ^(main_preheaderi4i14_469) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_469_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %scevgep11 = getelementptr [32 x i32]* @statemt, i32 0, i32 %469*/
		main_preheaderi4i14_scevgep11 = (`TAG_g_statemt_a | (4 * main_preheaderi4i14_469));
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %scevgep11 = getelementptr [32 x i32]* @statemt, i32 0, i32 %469*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_188)) begin
		main_preheaderi4i14_scevgep11_reg <= main_preheaderi4i14_scevgep11;
		if (start == 1'b0 && ^(main_preheaderi4i14_scevgep11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_scevgep11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %scevgep12 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %j.11.i3.i13*/
		main_preheaderi4i14_scevgep12 = (`TAG_g_word_a | (4 * main_preheaderi4i14_j11i3i13_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %scevgep12 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %j.11.i3.i13*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_188)) begin
		main_preheaderi4i14_scevgep12_reg <= main_preheaderi4i14_scevgep12;
		if (start == 1'b0 && ^(main_preheaderi4i14_scevgep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_scevgep12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %470 = load i32* %scevgep12, align 4, !tbaa !1*/
		main_preheaderi4i14_470 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %470 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_190)) begin
		main_preheaderi4i14_470_reg <= main_preheaderi4i14_470;
		if (start == 1'b0 && ^(main_preheaderi4i14_470) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_470_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %471 = load i32* %scevgep11, align 4, !tbaa !1*/
		main_preheaderi4i14_471 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %471 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_190)) begin
		main_preheaderi4i14_471_reg <= main_preheaderi4i14_471;
		if (start == 1'b0 && ^(main_preheaderi4i14_471) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_471_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %472 = xor i32 %471, %470*/
		main_preheaderi4i14_472 = (main_preheaderi4i14_471 ^ main_preheaderi4i14_470);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %472 = xor i32 %471, %470*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_190)) begin
		main_preheaderi4i14_472_reg <= main_preheaderi4i14_472;
		if (start == 1'b0 && ^(main_preheaderi4i14_472) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_472_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %473 = load i32* %scevgep10, align 4, !tbaa !1*/
		main_preheaderi4i14_473 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %473 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_191)) begin
		main_preheaderi4i14_473_reg <= main_preheaderi4i14_473;
		if (start == 1'b0 && ^(main_preheaderi4i14_473) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_473_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %474 = add nsw i32 %j.11.i3.i13, 1*/
		main_preheaderi4i14_474 = (main_preheaderi4i14_j11i3i13_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %474 = add nsw i32 %j.11.i3.i13, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_188)) begin
		main_preheaderi4i14_474_reg <= main_preheaderi4i14_474;
		if (start == 1'b0 && ^(main_preheaderi4i14_474) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_474_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %475 = load i32* %scevgep9, align 4, !tbaa !1*/
		main_preheaderi4i14_475 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %475 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_193)) begin
		main_preheaderi4i14_475_reg <= main_preheaderi4i14_475;
		if (start == 1'b0 && ^(main_preheaderi4i14_475) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_475_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %476 = xor i32 %475, %473*/
		main_preheaderi4i14_476 = (main_preheaderi4i14_475 ^ main_preheaderi4i14_473_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %476 = xor i32 %475, %473*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_193)) begin
		main_preheaderi4i14_476_reg <= main_preheaderi4i14_476;
		if (start == 1'b0 && ^(main_preheaderi4i14_476) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_476_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %477 = load i32* %scevgep8, align 4, !tbaa !1*/
		main_preheaderi4i14_477 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %477 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_192)) begin
		main_preheaderi4i14_477_reg <= main_preheaderi4i14_477;
		if (start == 1'b0 && ^(main_preheaderi4i14_477) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_477_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %478 = load i32* %scevgep7, align 4, !tbaa !1*/
		main_preheaderi4i14_478 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %478 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_194)) begin
		main_preheaderi4i14_478_reg <= main_preheaderi4i14_478;
		if (start == 1'b0 && ^(main_preheaderi4i14_478) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_478_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %479 = xor i32 %478, %477*/
		main_preheaderi4i14_479 = (main_preheaderi4i14_478 ^ main_preheaderi4i14_477_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %479 = xor i32 %478, %477*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_194)) begin
		main_preheaderi4i14_479_reg <= main_preheaderi4i14_479;
		if (start == 1'b0 && ^(main_preheaderi4i14_479) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_479_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %480 = load i32* %scevgep6, align 4, !tbaa !1*/
		main_preheaderi4i14_480 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %480 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_193)) begin
		main_preheaderi4i14_480_reg <= main_preheaderi4i14_480;
		if (start == 1'b0 && ^(main_preheaderi4i14_480) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_480_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %481 = load i32* %scevgep5, align 4, !tbaa !1*/
		main_preheaderi4i14_481 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %481 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_195)) begin
		main_preheaderi4i14_481_reg <= main_preheaderi4i14_481;
		if (start == 1'b0 && ^(main_preheaderi4i14_481) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_481_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %482 = xor i32 %481, %480*/
		main_preheaderi4i14_482 = (main_preheaderi4i14_481 ^ main_preheaderi4i14_480_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %482 = xor i32 %481, %480*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_195)) begin
		main_preheaderi4i14_482_reg <= main_preheaderi4i14_482;
		if (start == 1'b0 && ^(main_preheaderi4i14_482) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_482_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i4.i14*/
	/*   %exitcond = icmp eq i32 %474, 4*/
		main_preheaderi4i14_exitcond = (main_preheaderi4i14_474 == 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i4.i14*/
	/*   %exitcond = icmp eq i32 %474, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_188)) begin
		main_preheaderi4i14_exitcond_reg <= main_preheaderi4i14_exitcond;
		if (start == 1'b0 && ^(main_preheaderi4i14_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi4i14_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i20*/
	/*   %i.19.i19 = phi i32 [ %491, %488 ], [ 0, %AddRoundKey.exit5.i15 ]*/
	if (((cur_state == LEGUP_F_main_BB_AddRoundKeyexit5i15_197) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi20_i19i19 = 32'd0;
	end
	/* main: %.lr.ph.i20*/
	/*   %i.19.i19 = phi i32 [ %491, %488 ], [ 0, %AddRoundKey.exit5.i15 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__488_204) & (memory_controller_waitrequest == 1'd0)) & (main_488_exitcond3 == 1'd0))) */ begin
		main_lrphi20_i19i19 = main_488_491;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i20*/
	/*   %i.19.i19 = phi i32 [ %491, %488 ], [ 0, %AddRoundKey.exit5.i15 ]*/
	if (((cur_state == LEGUP_F_main_BB_AddRoundKeyexit5i15_197) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi20_i19i19_reg <= main_lrphi20_i19i19;
		if (start == 1'b0 && ^(main_lrphi20_i19i19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi20_i19i19_reg"); $finish; end
	end
	/* main: %.lr.ph.i20*/
	/*   %i.19.i19 = phi i32 [ %491, %488 ], [ 0, %AddRoundKey.exit5.i15 ]*/
	if ((((cur_state == LEGUP_F_main_BB__488_204) & (memory_controller_waitrequest == 1'd0)) & (main_488_exitcond3 == 1'd0))) begin
		main_lrphi20_i19i19_reg <= main_lrphi20_i19i19;
		if (start == 1'b0 && ^(main_lrphi20_i19i19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi20_i19i19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i20*/
	/*   %scevgep4 = getelementptr [32 x i32]* @statemt, i32 0, i32 %i.19.i19*/
		main_lrphi20_scevgep4 = (`TAG_g_statemt_a | (4 * main_lrphi20_i19i19_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i20*/
	/*   %scevgep4 = getelementptr [32 x i32]* @statemt, i32 0, i32 %i.19.i19*/
	if ((cur_state == LEGUP_F_main_BB_lrphi20_198)) begin
		main_lrphi20_scevgep4_reg <= main_lrphi20_scevgep4;
		if (start == 1'b0 && ^(main_lrphi20_scevgep4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi20_scevgep4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i20*/
	/*   %484 = load i32* %scevgep4, align 4, !tbaa !1*/
		main_lrphi20_484 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i20*/
	/*   %484 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi20_200)) begin
		main_lrphi20_484_reg <= main_lrphi20_484;
		if (start == 1'b0 && ^(main_lrphi20_484) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi20_484_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i20*/
	/*   %485 = icmp slt i32 %484, 16*/
		main_lrphi20_485 = ($signed(main_lrphi20_484) < $signed(32'd16));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i20*/
	/*   %485 = icmp slt i32 %484, 16*/
	if ((cur_state == LEGUP_F_main_BB_lrphi20_200)) begin
		main_lrphi20_485_reg <= main_lrphi20_485;
		if (start == 1'b0 && ^(main_lrphi20_485) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi20_485_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %486*/
	/*   %.pre14.i = load i32* %scevgep4, align 4, !tbaa !1*/
		main_486_pre14i = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %486*/
	/*   %.pre14.i = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__486_203)) begin
		main_486_pre14i_reg <= main_486_pre14i;
		if (start == 1'b0 && ^(main_486_pre14i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_486_pre14i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %488*/
	/*   %489 = phi i32 [ %.pre14.i, %486 ], [ %484, %.lr.ph.i20 ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi20_200) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi20_485 == 1'd0))) begin
		main_488_489 = main_lrphi20_484;
	end
	/* main: %488*/
	/*   %489 = phi i32 [ %.pre14.i, %486 ], [ %484, %.lr.ph.i20 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__486_203) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_488_489 = main_486_pre14i;
	end
end
always @(posedge clk) begin
	/* main: %488*/
	/*   %489 = phi i32 [ %.pre14.i, %486 ], [ %484, %.lr.ph.i20 ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi20_200) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi20_485 == 1'd0))) begin
		main_488_489_reg <= main_488_489;
		if (start == 1'b0 && ^(main_488_489) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_488_489_reg"); $finish; end
	end
	/* main: %488*/
	/*   %489 = phi i32 [ %.pre14.i, %486 ], [ %484, %.lr.ph.i20 ]*/
	if (((cur_state == LEGUP_F_main_BB__486_203) & (memory_controller_waitrequest == 1'd0))) begin
		main_488_489_reg <= main_488_489;
		if (start == 1'b0 && ^(main_488_489) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_488_489_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %488*/
	/*   %491 = add nsw i32 %i.19.i19, 1*/
		main_488_491 = (main_lrphi20_i19i19_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %488*/
	/*   %491 = add nsw i32 %i.19.i19, 1*/
	if ((cur_state == LEGUP_F_main_BB__488_204)) begin
		main_488_491_reg <= main_488_491;
		if (start == 1'b0 && ^(main_488_491) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_488_491_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %488*/
	/*   %exitcond3 = icmp eq i32 %491, 16*/
		main_488_exitcond3 = (main_488_491 == 32'd16);
end
always @(posedge clk) begin
	/* main: %488*/
	/*   %exitcond3 = icmp eq i32 %491, 16*/
	if ((cur_state == LEGUP_F_main_BB__488_204)) begin
		main_488_exitcond3_reg <= main_488_exitcond3;
		if (start == 1'b0 && ^(main_488_exitcond3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_488_exitcond3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %492 = phi i32 [ %497, %.preheader.loopexit.i17 ], [ %248, %.preheader.loopexit.i17.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderloopexiti17preheader_205) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderloopexiti17_492 = main_preheaderi_248_reg;
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %492 = phi i32 [ %497, %.preheader.loopexit.i17 ], [ %248, %.preheader.loopexit.i17.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_208) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderloopexiti17_exitcond1_reg == 1'd0))) */ begin
		main_preheaderloopexiti17_492 = main_preheaderloopexiti17_497;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %492 = phi i32 [ %497, %.preheader.loopexit.i17 ], [ %248, %.preheader.loopexit.i17.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderloopexiti17preheader_205) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderloopexiti17_492_reg <= main_preheaderloopexiti17_492;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_492) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_492_reg"); $finish; end
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %492 = phi i32 [ %497, %.preheader.loopexit.i17 ], [ %248, %.preheader.loopexit.i17.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_208) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderloopexiti17_exitcond1_reg == 1'd0))) begin
		main_preheaderloopexiti17_492_reg <= main_preheaderloopexiti17_492;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_492) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_492_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %i.28.i21 = phi i32 [ %498, %.preheader.loopexit.i17 ], [ 0, %.preheader.loopexit.i17.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderloopexiti17preheader_205) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderloopexiti17_i28i21 = 32'd0;
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %i.28.i21 = phi i32 [ %498, %.preheader.loopexit.i17 ], [ 0, %.preheader.loopexit.i17.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_208) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderloopexiti17_exitcond1_reg == 1'd0))) */ begin
		main_preheaderloopexiti17_i28i21 = main_preheaderloopexiti17_498_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %i.28.i21 = phi i32 [ %498, %.preheader.loopexit.i17 ], [ 0, %.preheader.loopexit.i17.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderloopexiti17preheader_205) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderloopexiti17_i28i21_reg <= main_preheaderloopexiti17_i28i21;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_i28i21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_i28i21_reg"); $finish; end
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %i.28.i21 = phi i32 [ %498, %.preheader.loopexit.i17 ], [ 0, %.preheader.loopexit.i17.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_208) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderloopexiti17_exitcond1_reg == 1'd0))) begin
		main_preheaderloopexiti17_i28i21_reg <= main_preheaderloopexiti17_i28i21;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_i28i21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_i28i21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %scevgep = getelementptr [16 x i32]* @decrypt.out_dec_statemt, i32 0, i32 %i.28.i21*/
		main_preheaderloopexiti17_scevgep = (1'd0 | (4 * main_preheaderloopexiti17_i28i21_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %scevgep = getelementptr [16 x i32]* @decrypt.out_dec_statemt, i32 0, i32 %i.28.i21*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_206)) begin
		main_preheaderloopexiti17_scevgep_reg <= main_preheaderloopexiti17_scevgep;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %scevgep2 = getelementptr [32 x i32]* @statemt, i32 0, i32 %i.28.i21*/
		main_preheaderloopexiti17_scevgep2 = (`TAG_g_statemt_a | (4 * main_preheaderloopexiti17_i28i21_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %scevgep2 = getelementptr [32 x i32]* @statemt, i32 0, i32 %i.28.i21*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_206)) begin
		main_preheaderloopexiti17_scevgep2_reg <= main_preheaderloopexiti17_scevgep2;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_scevgep2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_scevgep2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %493 = load i32* %scevgep2, align 4, !tbaa !1*/
		main_preheaderloopexiti17_493 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %493 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_208)) begin
		main_preheaderloopexiti17_493_reg <= main_preheaderloopexiti17_493;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_493) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_493_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %494 = load i32* %scevgep, align 4, !tbaa !1*/
		main_preheaderloopexiti17_494 = decryptout_dec_statemt_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %494 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_207)) begin
		main_preheaderloopexiti17_494_reg <= main_preheaderloopexiti17_494;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_494) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_494_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %495 = icmp eq i32 %493, %494*/
		main_preheaderloopexiti17_495 = (main_preheaderloopexiti17_493 == main_preheaderloopexiti17_494_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %495 = icmp eq i32 %493, %494*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_208)) begin
		main_preheaderloopexiti17_495_reg <= main_preheaderloopexiti17_495;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_495) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_495_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %496 = zext i1 %495 to i32*/
		main_preheaderloopexiti17_496 = main_preheaderloopexiti17_495;
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %496 = zext i1 %495 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_208)) begin
		main_preheaderloopexiti17_496_reg <= main_preheaderloopexiti17_496;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_496) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_496_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %497 = add nsw i32 %496, %492*/
		main_preheaderloopexiti17_497 = (main_preheaderloopexiti17_496 + main_preheaderloopexiti17_492_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %497 = add nsw i32 %496, %492*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_208)) begin
		main_preheaderloopexiti17_497_reg <= main_preheaderloopexiti17_497;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_497) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_497_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %498 = add nsw i32 %i.28.i21, 1*/
		main_preheaderloopexiti17_498 = (main_preheaderloopexiti17_i28i21_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %498 = add nsw i32 %i.28.i21, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_206)) begin
		main_preheaderloopexiti17_498_reg <= main_preheaderloopexiti17_498;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_498) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_498_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %exitcond1 = icmp eq i32 %498, 16*/
		main_preheaderloopexiti17_exitcond1 = (main_preheaderloopexiti17_498 == 32'd16);
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i17*/
	/*   %exitcond1 = icmp eq i32 %498, 16*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_206)) begin
		main_preheaderloopexiti17_exitcond1_reg <= main_preheaderloopexiti17_exitcond1;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_exitcond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti17_exitcond1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decrypt.exit*/
	/*   %500 = icmp eq i32 %497, 32*/
		main_decryptexit_500 = (main_preheaderloopexiti17_497_reg == 32'd32);
end
always @(posedge clk) begin
	/* main: %decrypt.exit*/
	/*   %500 = icmp eq i32 %497, 32*/
	if ((cur_state == LEGUP_F_main_BB_decryptexit_209)) begin
		main_decryptexit_500_reg <= main_decryptexit_500;
		if (start == 1'b0 && ^(main_decryptexit_500) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decryptexit_500_reg"); $finish; end
	end
end
always @(*) begin
	encryptout_enc_statemt_address_a = 1'd0;
	/* main: %.preheader.i*/
	/*   %245 = load i32* %scevgep42, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_118)) begin
		encryptout_enc_statemt_address_a = (main_preheaderi_scevgep42 >>> 3'd2);
	end
end
always @(*) begin
	encryptout_enc_statemt_write_enable_a = 1'd0;
	/* main: %.preheader.i*/
	/*   %245 = load i32* %scevgep42, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_118)) begin
		encryptout_enc_statemt_write_enable_a = 1'd0;
	end
end
always @(*) begin
	decryptout_dec_statemt_address_a = 1'd0;
	/* main: %.preheader.loopexit.i17*/
	/*   %494 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_206)) begin
		decryptout_dec_statemt_address_a = (main_preheaderloopexiti17_scevgep >>> 3'd2);
	end
end
always @(*) begin
	decryptout_dec_statemt_write_enable_a = 1'd0;
	/* main: %.preheader.loopexit.i17*/
	/*   %494 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_206)) begin
		decryptout_dec_statemt_write_enable_a = 1'd0;
	end
end
always @(*) begin
	invSbox_address_a = 1'd0;
	/* main: %.lr.ph12.i.preheader*/
	/*   %292 = load i32* %291, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_145)) begin
		invSbox_address_a = (main_lrph12ipreheader_291 >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %302 = load i32* %301, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_146)) begin
		invSbox_address_a = (main_lrph12ipreheader_301 >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %312 = load i32* %311, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_147)) begin
		invSbox_address_a = (main_lrph12ipreheader_311 >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %322 = load i32* %321, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_148)) begin
		invSbox_address_a = (main_lrph12ipreheader_321 >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %332 = load i32* %331, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_149)) begin
		invSbox_address_a = (main_lrph12ipreheader_331 >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %342 = load i32* %341, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_150)) begin
		invSbox_address_a = (main_lrph12ipreheader_341 >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %352 = load i32* %351, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		invSbox_address_a = (main_lrph12ipreheader_351 >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %362 = load i32* %361, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		invSbox_address_a = (main_lrph12ipreheader_361 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %373 = load i32* %372, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_164)) begin
		invSbox_address_a = (main_lrph12i_372 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %383 = load i32* %382, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_165)) begin
		invSbox_address_a = (main_lrph12i_382 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %393 = load i32* %392, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_166)) begin
		invSbox_address_a = (main_lrph12i_392 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %403 = load i32* %402, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_167)) begin
		invSbox_address_a = (main_lrph12i_402 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %413 = load i32* %412, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_168)) begin
		invSbox_address_a = (main_lrph12i_412 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %423 = load i32* %422, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_169)) begin
		invSbox_address_a = (main_lrph12i_422 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %433 = load i32* %432, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		invSbox_address_a = (main_lrph12i_432 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %443 = load i32* %442, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		invSbox_address_a = (main_lrph12i_442 >>> 3'd2);
	end
end
always @(*) begin
	invSbox_write_enable_a = 1'd0;
	/* main: %.lr.ph12.i.preheader*/
	/*   %292 = load i32* %291, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_145)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %302 = load i32* %301, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_146)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %312 = load i32* %311, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_147)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %322 = load i32* %321, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_148)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %332 = load i32* %331, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_149)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %342 = load i32* %341, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_150)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %352 = load i32* %351, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %362 = load i32* %361, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %373 = load i32* %372, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_164)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %383 = load i32* %382, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_165)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %393 = load i32* %392, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_166)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %403 = load i32* %402, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_167)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %413 = load i32* %412, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_168)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %423 = load i32* %422, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_169)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %433 = load i32* %432, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %443 = load i32* %442, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		invSbox_write_enable_a = 1'd0;
	end
end
always @(*) begin
	invSbox_address_b = 1'd0;
	/* main: %.lr.ph12.i.preheader*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_145)) begin
		invSbox_address_b = (main_lrph12ipreheader_296 >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %307 = load i32* %306, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_146)) begin
		invSbox_address_b = (main_lrph12ipreheader_306 >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %317 = load i32* %316, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_147)) begin
		invSbox_address_b = (main_lrph12ipreheader_316 >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %327 = load i32* %326, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_148)) begin
		invSbox_address_b = (main_lrph12ipreheader_326 >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %337 = load i32* %336, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_149)) begin
		invSbox_address_b = (main_lrph12ipreheader_336 >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %347 = load i32* %346, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_150)) begin
		invSbox_address_b = (main_lrph12ipreheader_346 >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %357 = load i32* %356, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		invSbox_address_b = (main_lrph12ipreheader_356 >>> 3'd2);
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %367 = load i32* %366, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		invSbox_address_b = (main_lrph12ipreheader_366 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %378 = load i32* %377, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_164)) begin
		invSbox_address_b = (main_lrph12i_377 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %388 = load i32* %387, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_165)) begin
		invSbox_address_b = (main_lrph12i_387 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %398 = load i32* %397, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_166)) begin
		invSbox_address_b = (main_lrph12i_397 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %408 = load i32* %407, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_167)) begin
		invSbox_address_b = (main_lrph12i_407 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %418 = load i32* %417, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_168)) begin
		invSbox_address_b = (main_lrph12i_417 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %428 = load i32* %427, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_169)) begin
		invSbox_address_b = (main_lrph12i_427 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %438 = load i32* %437, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		invSbox_address_b = (main_lrph12i_437 >>> 3'd2);
	end
	/* main: %.lr.ph12.i*/
	/*   %448 = load i32* %447, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		invSbox_address_b = (main_lrph12i_447 >>> 3'd2);
	end
end
always @(*) begin
	invSbox_write_enable_b = 1'd0;
	/* main: %.lr.ph12.i.preheader*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_145)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %307 = load i32* %306, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_146)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %317 = load i32* %316, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_147)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %327 = load i32* %326, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_148)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %337 = load i32* %336, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_149)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %347 = load i32* %346, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_150)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %357 = load i32* %356, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %367 = load i32* %366, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %378 = load i32* %377, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_164)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %388 = load i32* %387, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_165)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %398 = load i32* %397, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_166)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %408 = load i32* %407, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_167)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %418 = load i32* %417, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_168)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %428 = load i32* %427, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_169)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %438 = load i32* %437, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %448 = load i32* %447, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		invSbox_write_enable_b = 1'd0;
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %1 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		KeySchedule_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_18)) begin
		KeySchedule_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_start"); $finish; end
	end
	/* main: %encrypt.exit*/
	/*   %250 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_encryptexit_121)) begin
		KeySchedule_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_122)) begin
		KeySchedule_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %1 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		KeySchedule_arg_type <= 32'd128128;
		if (start == 1'b0 && ^(32'd128128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_arg_type"); $finish; end
	end
	/* main: %encrypt.exit*/
	/*   %250 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_encryptexit_121)) begin
		KeySchedule_arg_type <= 32'd128128;
		if (start == 1'b0 && ^(32'd128128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_arg_type"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %1 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		KeySchedule_arg_key <= `TAG_g_key_a;
		if (start == 1'b0 && ^(`TAG_g_key_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_arg_key"); $finish; end
	end
	/* main: %encrypt.exit*/
	/*   %250 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_encryptexit_121)) begin
		KeySchedule_arg_key <= `TAG_g_key_a;
		if (start == 1'b0 && ^(`TAG_g_key_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_arg_key"); $finish; end
	end
end
always @(*) begin
	KeySchedule_finish_final = KeySchedule_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_17))) begin
		KeySchedule_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_finish_reg"); $finish; end
	end
	if (KeySchedule_finish) begin
		KeySchedule_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_encryptexit_121))) begin
		KeySchedule_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_finish_reg"); $finish; end
	end
	if (KeySchedule_finish) begin
		KeySchedule_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_17))) begin
		KeySchedule_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_return_val_reg"); $finish; end
	end
	if (KeySchedule_finish) begin
		KeySchedule_return_val_reg <= KeySchedule_return_val;
		if (start == 1'b0 && ^(KeySchedule_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_encryptexit_121))) begin
		KeySchedule_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_return_val_reg"); $finish; end
	end
	if (KeySchedule_finish) begin
		KeySchedule_return_val_reg <= KeySchedule_return_val;
		if (start == 1'b0 && ^(KeySchedule_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_return_val_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   %1 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
		main_0_1 = KeySchedule_return_val_reg;
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %0*/
	/*   %1 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_18)) begin
		legup_function_call = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %117 = tail call i32 @MixColumn_AddRoundKey(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.010.i) #2*/
	if ((cur_state == LEGUP_function_call_63)) begin
		legup_function_call = 1'd1;
	end
	/* main: %encrypt.exit*/
	/*   %250 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_122)) begin
		legup_function_call = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %368 = tail call i32 @AddRoundKey_InversMixColumn(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.011.i) #2*/
	if ((cur_state == LEGUP_function_call_161)) begin
		legup_function_call = 1'd1;
	end
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %117 = tail call i32 @MixColumn_AddRoundKey(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.010.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_62)) begin
		MixColumn_AddRoundKey_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_63)) begin
		MixColumn_AddRoundKey_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %117 = tail call i32 @MixColumn_AddRoundKey(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.010.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_62)) begin
		MixColumn_AddRoundKey_arg_statemt <= `TAG_g_statemt_a;
		if (start == 1'b0 && ^(`TAG_g_statemt_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_arg_statemt"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %117 = tail call i32 @MixColumn_AddRoundKey(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.010.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_62)) begin
		MixColumn_AddRoundKey_arg_nb <= 32'd4;
		if (start == 1'b0 && ^(32'd4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_arg_nb"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %117 = tail call i32 @MixColumn_AddRoundKey(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.010.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_62)) begin
		MixColumn_AddRoundKey_arg_n <= main_AddRoundKeyexiti_i010i;
		if (start == 1'b0 && ^(main_AddRoundKeyexiti_i010i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_arg_n"); $finish; end
	end
end
always @(*) begin
	MixColumn_AddRoundKey_finish_final = MixColumn_AddRoundKey_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_62))) begin
		MixColumn_AddRoundKey_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_finish_reg"); $finish; end
	end
	if (MixColumn_AddRoundKey_finish) begin
		MixColumn_AddRoundKey_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_62))) begin
		MixColumn_AddRoundKey_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_return_val_reg"); $finish; end
	end
	if (MixColumn_AddRoundKey_finish) begin
		MixColumn_AddRoundKey_return_val_reg <= MixColumn_AddRoundKey_return_val;
		if (start == 1'b0 && ^(MixColumn_AddRoundKey_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to MixColumn_AddRoundKey_return_val_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i*/
	/*   %117 = tail call i32 @MixColumn_AddRoundKey(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.010.i) #2*/
		main_AddRoundKeyexiti_117 = MixColumn_AddRoundKey_return_val_reg;
end
always @(*) begin
	/* main: %encrypt.exit*/
	/*   %250 = tail call i32 @KeySchedule(i32 128128, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0)) #2*/
		main_encryptexit_250 = KeySchedule_return_val_reg;
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %368 = tail call i32 @AddRoundKey_InversMixColumn(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.011.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_160)) begin
		AddRoundKey_InversMixColumn_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_161)) begin
		AddRoundKey_InversMixColumn_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %368 = tail call i32 @AddRoundKey_InversMixColumn(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.011.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_160)) begin
		AddRoundKey_InversMixColumn_arg_statemt <= `TAG_g_statemt_a;
		if (start == 1'b0 && ^(`TAG_g_statemt_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_arg_statemt"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %368 = tail call i32 @AddRoundKey_InversMixColumn(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.011.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_160)) begin
		AddRoundKey_InversMixColumn_arg_nb <= 32'd4;
		if (start == 1'b0 && ^(32'd4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_arg_nb"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph12.i*/
	/*   %368 = tail call i32 @AddRoundKey_InversMixColumn(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.011.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_160)) begin
		AddRoundKey_InversMixColumn_arg_n <= main_lrph12i_i011i;
		if (start == 1'b0 && ^(main_lrph12i_i011i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_arg_n"); $finish; end
	end
end
always @(*) begin
	AddRoundKey_InversMixColumn_finish_final = AddRoundKey_InversMixColumn_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_lrph12i_160))) begin
		AddRoundKey_InversMixColumn_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_finish_reg"); $finish; end
	end
	if (AddRoundKey_InversMixColumn_finish) begin
		AddRoundKey_InversMixColumn_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_lrph12i_160))) begin
		AddRoundKey_InversMixColumn_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_return_val_reg"); $finish; end
	end
	if (AddRoundKey_InversMixColumn_finish) begin
		AddRoundKey_InversMixColumn_return_val_reg <= AddRoundKey_InversMixColumn_return_val;
		if (start == 1'b0 && ^(AddRoundKey_InversMixColumn_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to AddRoundKey_InversMixColumn_return_val_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph12.i*/
	/*   %368 = tail call i32 @AddRoundKey_InversMixColumn(i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), i32 4, i32 %i.011.i) #2*/
		main_lrph12i_368 = AddRoundKey_InversMixColumn_return_val_reg;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %505*/
	/*   ret i32 %497*/
	if ((cur_state == LEGUP_F_main_BB__505_212)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %0*/
	/*   store i32 50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 246, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 48, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 224, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 7, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 43, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 40, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 210, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 171, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 9, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 79, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   %7 = load i32* %scevgep84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   %10 = load i32* %scevgep79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   %13 = load i32* %scevgep78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_22)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   %16 = load i32* %scevgep77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   store i32 %9, i32* %scevgep83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   store i32 %15, i32* %scevgep81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_25)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %24 = load i32* %scevgep75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_28)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %31 = load i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %29 = load i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_31)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %30, i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_33)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %37 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %47 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %57 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %67 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %77 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %87 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %97 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %107 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %41 = load i32* %40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_45)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_46)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %61 = load i32* %60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_47)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %71 = load i32* %70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %81 = load i32* %80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_49)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %91 = load i32* %90, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %101 = load i32* %100, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %111 = load i32* %110, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %46, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %56, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %66, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %76, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %86, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %96, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %101, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_59)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %111, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_60)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %118 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_64)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %128 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_65)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %138 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_66)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %148 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_67)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %158 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_68)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %168 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_69)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %178 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_70)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %188 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_71)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %122 = load i32* %121, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_72)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %132 = load i32* %131, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_73)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %142 = load i32* %141, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_74)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %152 = load i32* %151, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_75)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %162 = load i32* %161, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_76)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %172 = load i32* %171, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_77)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %182 = load i32* %181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_78)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %192 = load i32* %191, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %127, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_80)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %137, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_81)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %147, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_82)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %157, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_83)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %167, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %177, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_85)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %182, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_86)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %192, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_87)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %204 = load i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_90)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %203 = load i32* %scevgep63, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_91)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %206 = load i32* %scevgep62, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_92)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %209 = load i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_93)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %212 = load i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_94)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %205, i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_95)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %211, i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_96)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %221 = load i32* %scevgep54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_100)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %228 = load i32* %scevgep52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_101)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %231 = load i32* %scevgep51, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_102)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %229 = load i32* %scevgep48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_104)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %232 = load i32* %scevgep47, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_105)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %230, i32* %scevgep48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_106)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %233, i32* %scevgep47, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_107)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %251*/
	/*   %257 = load i32* %scevgep40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_125)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %251*/
	/*   %260 = load i32* %scevgep39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_126)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %251*/
	/*   %263 = load i32* %scevgep38, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_127)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %251*/
	/*   %266 = load i32* %scevgep37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_128)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %251*/
	/*   store i32 %265, i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_130)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %276 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_133)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %275 = load i32* %scevgep31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_134)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %277, i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_136)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %280 = load i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_137)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %281, i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_139)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %288 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_143)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %298 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_144)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %308 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_145)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %318 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_146)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %328 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_147)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %338 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_148)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %348 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_149)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %358 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_150)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %297, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %307, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %317, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_153)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %327, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_154)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %337, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_155)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %347, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_156)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %352, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_157)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %362, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_158)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %369 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_162)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %379 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_163)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %389 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_164)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %399 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_165)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %409 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_166)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %419 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_167)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %429 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_168)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %439 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_169)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %378, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %388, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %398, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_172)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %408, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_173)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %418, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_174)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %428, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_175)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %433, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_176)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %443, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_177)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %453 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_180)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %456 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_181)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %459 = load i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_182)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %462 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_183)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %455, i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_184)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %461, i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_185)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %470 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_188)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %473 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_189)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %477 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_190)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %475 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_191)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %476, i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_193)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i20*/
	/*   %484 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi20_198)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %486*/
	/*   %.pre14.i = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__486_201)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %493 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_206)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %0*/
	/*   store i32 50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* main: %0*/
	/*   store i32 246, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 48, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %0*/
	/*   store i32 152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %0*/
	/*   store i32 224, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %0*/
	/*   store i32 7, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %0*/
	/*   store i32 43, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_address_a = `TAG_g_key_a;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 40, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 210, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd6));
	end
	/* main: %0*/
	/*   store i32 171, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd8));
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd10));
	end
	/* main: %0*/
	/*   store i32 9, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd12));
	end
	/* main: %0*/
	/*   store i32 79, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd14));
	end
	/* main: %2*/
	/*   %7 = load i32* %scevgep84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		memory_controller_address_a = main_2_scevgep84;
	end
	/* main: %2*/
	/*   %10 = load i32* %scevgep79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_address_a = main_2_scevgep79_reg;
	end
	/* main: %2*/
	/*   %13 = load i32* %scevgep78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_22)) begin
		memory_controller_address_a = main_2_scevgep78_reg;
	end
	/* main: %2*/
	/*   %16 = load i32* %scevgep77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		memory_controller_address_a = main_2_scevgep77_reg;
	end
	/* main: %2*/
	/*   store i32 %9, i32* %scevgep83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_address_a = main_2_scevgep83_reg;
	end
	/* main: %2*/
	/*   store i32 %15, i32* %scevgep81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_25)) begin
		memory_controller_address_a = main_2_scevgep81_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %24 = load i32* %scevgep75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_28)) begin
		memory_controller_address_a = main_preheaderii_scevgep75;
	end
	/* main: %.preheader.i.i*/
	/*   %31 = load i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_30)) begin
		memory_controller_address_a = main_preheaderii_scevgep71_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %29 = load i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_31)) begin
		memory_controller_address_a = main_preheaderii_scevgep72_reg;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %30, i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_33)) begin
		memory_controller_address_a = main_preheaderii_scevgep72_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %37 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %47 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %57 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %67 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %77 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %87 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %97 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %107 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %41 = load i32* %40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_45)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_40_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_46)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_50_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %61 = load i32* %60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_47)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_60_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %71 = load i32* %70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_70_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %81 = load i32* %80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_49)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_80_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %91 = load i32* %90, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_90_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %101 = load i32* %100, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_100_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %111 = load i32* %110, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		memory_controller_address_a = main_AddRoundKeyexitipreheader_110_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %46, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %56, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %66, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %76, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %86, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %96, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %101, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_59)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %111, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_60)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %118 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_64)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %128 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_65)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %138 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_66)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %148 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_67)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %158 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_68)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %168 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_69)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %178 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_70)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %188 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_71)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %122 = load i32* %121, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_72)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_121_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %132 = load i32* %131, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_73)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_131_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %142 = load i32* %141, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_74)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_141_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %152 = load i32* %151, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_75)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_151_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %162 = load i32* %161, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_76)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_161_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %172 = load i32* %171, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_77)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_171_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %182 = load i32* %181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_78)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_181_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %192 = load i32* %191, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		memory_controller_address_a = main_AddRoundKeyexiti_191_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %127, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_80)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %137, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_81)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %147, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_82)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %157, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_83)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %167, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %177, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_85)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %182, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_86)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %192, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_87)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %204 = load i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_90)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_scevgep59;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %203 = load i32* %scevgep63, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_91)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_scevgep63;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %206 = load i32* %scevgep62, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_92)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_scevgep62_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %209 = load i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_93)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_scevgep61_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %212 = load i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_94)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_scevgep60_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %205, i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_95)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_scevgep59_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %211, i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_96)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_scevgep57_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %221 = load i32* %scevgep54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_100)) begin
		memory_controller_address_a = main_preheaderi4i_scevgep54;
	end
	/* main: %.preheader.i4.i*/
	/*   %228 = load i32* %scevgep52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_101)) begin
		memory_controller_address_a = main_preheaderi4i_scevgep52_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %231 = load i32* %scevgep51, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_102)) begin
		memory_controller_address_a = main_preheaderi4i_scevgep51_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %229 = load i32* %scevgep48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_104)) begin
		memory_controller_address_a = main_preheaderi4i_scevgep48_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %232 = load i32* %scevgep47, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_105)) begin
		memory_controller_address_a = main_preheaderi4i_scevgep47_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %230, i32* %scevgep48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_106)) begin
		memory_controller_address_a = main_preheaderi4i_scevgep48_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %233, i32* %scevgep47, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_107)) begin
		memory_controller_address_a = main_preheaderi4i_scevgep47_reg;
	end
	/* main: %251*/
	/*   %257 = load i32* %scevgep40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_125)) begin
		memory_controller_address_a = main_251_scevgep40;
	end
	/* main: %251*/
	/*   %260 = load i32* %scevgep39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_126)) begin
		memory_controller_address_a = main_251_scevgep39_reg;
	end
	/* main: %251*/
	/*   %263 = load i32* %scevgep38, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_127)) begin
		memory_controller_address_a = main_251_scevgep38_reg;
	end
	/* main: %251*/
	/*   %266 = load i32* %scevgep37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_128)) begin
		memory_controller_address_a = main_251_scevgep37_reg;
	end
	/* main: %251*/
	/*   store i32 %265, i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_130)) begin
		memory_controller_address_a = main_251_scevgep34_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %276 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_133)) begin
		memory_controller_address_a = main_preheaderii4_scevgep27;
	end
	/* main: %.preheader.i.i4*/
	/*   %275 = load i32* %scevgep31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_134)) begin
		memory_controller_address_a = main_preheaderii4_scevgep31;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %277, i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_136)) begin
		memory_controller_address_a = main_preheaderii4_scevgep27_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %280 = load i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_137)) begin
		memory_controller_address_a = main_preheaderii4_scevgep26_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %281, i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_139)) begin
		memory_controller_address_a = main_preheaderii4_scevgep26_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %288 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_143)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %298 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_144)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %308 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_145)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %318 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_146)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %328 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_147)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %338 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_148)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %348 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_149)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %358 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_150)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %297, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %307, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %317, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_153)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %327, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_154)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %337, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_155)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %347, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_156)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %352, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_157)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %362, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_158)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %.lr.ph12.i*/
	/*   %369 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_162)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %.lr.ph12.i*/
	/*   %379 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_163)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %.lr.ph12.i*/
	/*   %389 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_164)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %.lr.ph12.i*/
	/*   %399 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_165)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %.lr.ph12.i*/
	/*   %409 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_166)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %.lr.ph12.i*/
	/*   %419 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_167)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %.lr.ph12.i*/
	/*   %429 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_168)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* main: %.lr.ph12.i*/
	/*   %439 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_169)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %378, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %388, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %398, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_172)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %408, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_173)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %418, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_174)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %428, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_175)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %433, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_176)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %443, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_177)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %._crit_edge.i*/
	/*   %453 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_180)) begin
		memory_controller_address_a = main__crit_edgei_scevgep21;
	end
	/* main: %._crit_edge.i*/
	/*   %456 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_181)) begin
		memory_controller_address_a = main__crit_edgei_scevgep16_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %459 = load i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_182)) begin
		memory_controller_address_a = main__crit_edgei_scevgep15_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %462 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_183)) begin
		memory_controller_address_a = main__crit_edgei_scevgep14_reg;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %455, i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_184)) begin
		memory_controller_address_a = main__crit_edgei_scevgep20_reg;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %461, i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_185)) begin
		memory_controller_address_a = main__crit_edgei_scevgep18_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %470 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_188)) begin
		memory_controller_address_a = main_preheaderi4i14_scevgep12;
	end
	/* main: %.preheader.i4.i14*/
	/*   %473 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_189)) begin
		memory_controller_address_a = main_preheaderi4i14_scevgep10_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %477 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_190)) begin
		memory_controller_address_a = main_preheaderi4i14_scevgep8_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %475 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_191)) begin
		memory_controller_address_a = main_preheaderi4i14_scevgep9_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %476, i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_193)) begin
		memory_controller_address_a = main_preheaderi4i14_scevgep9_reg;
	end
	/* main: %.lr.ph.i20*/
	/*   %484 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi20_198)) begin
		memory_controller_address_a = main_lrphi20_scevgep4;
	end
	/* main: %486*/
	/*   %.pre14.i = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__486_201)) begin
		memory_controller_address_a = main_lrphi20_scevgep4_reg;
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %493 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_206)) begin
		memory_controller_address_a = main_preheaderloopexiti17_scevgep2;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %0*/
	/*   store i32 50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 246, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 48, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 224, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 7, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 43, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 40, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 210, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 171, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 9, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 79, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   %7 = load i32* %scevgep84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %2*/
	/*   %10 = load i32* %scevgep79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %2*/
	/*   %13 = load i32* %scevgep78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_22)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %2*/
	/*   %16 = load i32* %scevgep77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %2*/
	/*   store i32 %9, i32* %scevgep83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   store i32 %15, i32* %scevgep81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_25)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %24 = load i32* %scevgep75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_28)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i.i*/
	/*   %31 = load i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_30)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i.i*/
	/*   %29 = load i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_31)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %30, i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_33)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %37 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %47 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %57 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %67 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %77 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %87 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %97 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %107 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %41 = load i32* %40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_45)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_46)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %61 = load i32* %60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_47)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %71 = load i32* %70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %81 = load i32* %80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_49)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %91 = load i32* %90, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %101 = load i32* %100, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %111 = load i32* %110, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %46, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %56, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %66, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %76, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %86, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %96, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %101, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_59)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %111, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_60)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %118 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_64)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %128 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_65)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %138 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_66)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %148 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_67)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %158 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_68)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %168 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_69)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %178 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_70)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %188 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_71)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %122 = load i32* %121, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_72)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %132 = load i32* %131, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_73)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %142 = load i32* %141, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_74)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %152 = load i32* %151, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_75)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %162 = load i32* %161, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_76)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %172 = load i32* %171, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_77)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %182 = load i32* %181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_78)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %192 = load i32* %191, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %127, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_80)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %137, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_81)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %147, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_82)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %157, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_83)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %167, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %177, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_85)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %182, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_86)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %192, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_87)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %204 = load i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_90)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %203 = load i32* %scevgep63, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_91)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %206 = load i32* %scevgep62, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_92)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %209 = load i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_93)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %212 = load i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_94)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %205, i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_95)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %211, i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_96)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %221 = load i32* %scevgep54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_100)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i4.i*/
	/*   %228 = load i32* %scevgep52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_101)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i4.i*/
	/*   %231 = load i32* %scevgep51, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_102)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i4.i*/
	/*   %229 = load i32* %scevgep48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_104)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i4.i*/
	/*   %232 = load i32* %scevgep47, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_105)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %230, i32* %scevgep48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_106)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %233, i32* %scevgep47, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_107)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %251*/
	/*   %257 = load i32* %scevgep40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_125)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %251*/
	/*   %260 = load i32* %scevgep39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_126)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %251*/
	/*   %263 = load i32* %scevgep38, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_127)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %251*/
	/*   %266 = load i32* %scevgep37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_128)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %251*/
	/*   store i32 %265, i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_130)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %276 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_133)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i.i4*/
	/*   %275 = load i32* %scevgep31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_134)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %277, i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_136)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %280 = load i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_137)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %281, i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_139)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %288 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_143)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %298 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_144)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %308 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_145)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %318 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_146)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %328 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_147)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %338 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_148)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %348 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_149)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %358 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_150)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %297, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %307, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %317, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_153)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %327, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_154)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %337, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_155)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %347, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_156)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %352, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_157)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %362, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_158)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %369 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_162)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %379 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_163)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %389 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_164)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %399 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_165)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %409 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_166)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %419 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_167)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %429 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_168)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %439 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_169)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %378, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %388, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %398, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_172)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %408, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_173)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %418, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_174)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %428, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_175)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %433, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_176)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %443, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_177)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %453 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_180)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %456 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_181)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %459 = load i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_182)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %462 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_183)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %455, i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_184)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %461, i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_185)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %470 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_188)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i4.i14*/
	/*   %473 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_189)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i4.i14*/
	/*   %477 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_190)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i4.i14*/
	/*   %475 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_191)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %476, i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_193)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i20*/
	/*   %484 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi20_198)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %486*/
	/*   %.pre14.i = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__486_201)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %493 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_206)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %0*/
	/*   store i32 50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_a = 32'd50;
	end
	/* main: %0*/
	/*   store i32 246, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_a = 32'd246;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_in_a = 32'd136;
	end
	/* main: %0*/
	/*   store i32 48, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_in_a = 32'd48;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_in_a = 32'd49;
	end
	/* main: %0*/
	/*   store i32 152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_in_a = 32'd152;
	end
	/* main: %0*/
	/*   store i32 224, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_in_a = 32'd224;
	end
	/* main: %0*/
	/*   store i32 7, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_in_a = 32'd7;
	end
	/* main: %0*/
	/*   store i32 43, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_in_a = 32'd43;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_in_a = 32'd21;
	end
	/* main: %0*/
	/*   store i32 40, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_in_a = 32'd40;
	end
	/* main: %0*/
	/*   store i32 210, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_in_a = 32'd210;
	end
	/* main: %0*/
	/*   store i32 171, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_in_a = 32'd171;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_in_a = 32'd21;
	end
	/* main: %0*/
	/*   store i32 9, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_in_a = 32'd9;
	end
	/* main: %0*/
	/*   store i32 79, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_in_a = 32'd79;
	end
	/* main: %2*/
	/*   store i32 %9, i32* %scevgep83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_in_a = main_2_9_reg;
	end
	/* main: %2*/
	/*   store i32 %15, i32* %scevgep81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_25)) begin
		memory_controller_in_a = main_2_15_reg;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %30, i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_33)) begin
		memory_controller_in_a = main_preheaderii_30;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %46, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_46_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %56, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_56_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %66, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_66_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %76, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_76_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %86, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_86_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %96, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_96_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %101, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_59)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_101_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %111, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_60)) begin
		memory_controller_in_a = main_AddRoundKeyexitipreheader_111_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %127, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_80)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_127_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %137, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_81)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_137_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %147, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_82)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_147_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %157, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_83)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_157_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %167, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_167_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %177, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_85)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_177_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %182, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_86)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_182_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %192, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_87)) begin
		memory_controller_in_a = main_AddRoundKeyexiti_192_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %205, i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_95)) begin
		memory_controller_in_a = main_AddRoundKeyexit_crit_edgei_205_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %211, i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_96)) begin
		memory_controller_in_a = main_AddRoundKeyexit_crit_edgei_211_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %230, i32* %scevgep48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_106)) begin
		memory_controller_in_a = main_preheaderi4i_230;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %233, i32* %scevgep47, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_107)) begin
		memory_controller_in_a = main_preheaderi4i_233;
	end
	/* main: %251*/
	/*   store i32 %265, i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_130)) begin
		memory_controller_in_a = main_251_265_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %277, i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_136)) begin
		memory_controller_in_a = main_preheaderii4_277;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %281, i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_139)) begin
		memory_controller_in_a = main_preheaderii4_281;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %297, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		memory_controller_in_a = main_lrph12ipreheader_297_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %307, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		memory_controller_in_a = main_lrph12ipreheader_307_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %317, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_153)) begin
		memory_controller_in_a = main_lrph12ipreheader_317_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %327, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_154)) begin
		memory_controller_in_a = main_lrph12ipreheader_327_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %337, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_155)) begin
		memory_controller_in_a = main_lrph12ipreheader_337_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %347, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_156)) begin
		memory_controller_in_a = main_lrph12ipreheader_347_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %352, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_157)) begin
		memory_controller_in_a = main_lrph12ipreheader_352_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %362, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_158)) begin
		memory_controller_in_a = main_lrph12ipreheader_362_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %378, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		memory_controller_in_a = main_lrph12i_378_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %388, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		memory_controller_in_a = main_lrph12i_388_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %398, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_172)) begin
		memory_controller_in_a = main_lrph12i_398_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %408, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_173)) begin
		memory_controller_in_a = main_lrph12i_408_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %418, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_174)) begin
		memory_controller_in_a = main_lrph12i_418_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %428, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_175)) begin
		memory_controller_in_a = main_lrph12i_428_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %433, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_176)) begin
		memory_controller_in_a = main_lrph12i_433_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %443, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_177)) begin
		memory_controller_in_a = main_lrph12i_443_reg;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %455, i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_184)) begin
		memory_controller_in_a = main__crit_edgei_455_reg;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %461, i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_185)) begin
		memory_controller_in_a = main__crit_edgei_461_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %476, i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_193)) begin
		memory_controller_in_a = main_preheaderi4i14_476;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %0*/
	/*   store i32 50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 246, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 48, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 224, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 7, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 43, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 40, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 210, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 171, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 9, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 79, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %2*/
	/*   %7 = load i32* %scevgep84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %2*/
	/*   %10 = load i32* %scevgep79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %2*/
	/*   %13 = load i32* %scevgep78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_22)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %2*/
	/*   %16 = load i32* %scevgep77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %2*/
	/*   store i32 %9, i32* %scevgep83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %2*/
	/*   store i32 %15, i32* %scevgep81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_25)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   %24 = load i32* %scevgep75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_28)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   %31 = load i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_30)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   %29 = load i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_31)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %30, i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_33)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %37 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %47 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %57 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %67 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %77 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %87 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %97 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %107 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %41 = load i32* %40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_45)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_46)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %61 = load i32* %60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_47)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %71 = load i32* %70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %81 = load i32* %80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_49)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %91 = load i32* %90, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %101 = load i32* %100, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %111 = load i32* %110, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %46, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %56, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %66, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %76, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %86, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %96, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %101, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_59)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %111, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_60)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %118 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_64)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %128 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_65)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %138 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_66)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %148 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_67)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %158 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_68)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %168 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_69)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %178 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_70)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %188 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_71)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %122 = load i32* %121, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_72)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %132 = load i32* %131, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_73)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %142 = load i32* %141, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_74)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %152 = load i32* %151, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_75)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %162 = load i32* %161, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_76)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %172 = load i32* %171, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_77)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %182 = load i32* %181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_78)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %192 = load i32* %191, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %127, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_80)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %137, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_81)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %147, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_82)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %157, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_83)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %167, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %177, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_85)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %182, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_86)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %192, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_87)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %204 = load i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_90)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %203 = load i32* %scevgep63, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_91)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %206 = load i32* %scevgep62, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_92)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %209 = load i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_93)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %212 = load i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_94)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %205, i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_95)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %211, i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_96)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   %221 = load i32* %scevgep54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_100)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   %228 = load i32* %scevgep52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_101)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   %231 = load i32* %scevgep51, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_102)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   %229 = load i32* %scevgep48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_104)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   %232 = load i32* %scevgep47, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_105)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %230, i32* %scevgep48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_106)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %233, i32* %scevgep47, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_107)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %251*/
	/*   %257 = load i32* %scevgep40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_125)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %251*/
	/*   %260 = load i32* %scevgep39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_126)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %251*/
	/*   %263 = load i32* %scevgep38, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_127)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %251*/
	/*   %266 = load i32* %scevgep37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_128)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %251*/
	/*   store i32 %265, i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_130)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   %276 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_133)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   %275 = load i32* %scevgep31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_134)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %277, i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_136)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   %280 = load i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_137)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %281, i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_139)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %288 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_143)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %298 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_144)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %308 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_145)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %318 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_146)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %328 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_147)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %338 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_148)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %348 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_149)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %358 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_150)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %297, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %307, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %317, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_153)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %327, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_154)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %337, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_155)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %347, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_156)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %352, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_157)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %362, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_158)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %369 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_162)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %379 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_163)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %389 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_164)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %399 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_165)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %409 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_166)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %419 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_167)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %429 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_168)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %439 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_169)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %378, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %388, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %398, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_172)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %408, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_173)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %418, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_174)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %428, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_175)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %433, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_176)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %443, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_177)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %453 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_180)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %456 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_181)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %459 = load i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_182)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %462 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_183)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %455, i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_184)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %461, i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_185)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   %470 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_188)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   %473 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_189)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   %477 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_190)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   %475 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_191)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %476, i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_193)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i20*/
	/*   %484 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi20_198)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %486*/
	/*   %.pre14.i = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__486_201)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.loopexit.i17*/
	/*   %493 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti17_206)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 90, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 141, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 126, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 22, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 174, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 166, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 247, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 207, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 60, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   %8 = load i32* %scevgep83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   %11 = load i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   %14 = load i32* %scevgep81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_22)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   %17 = load i32* %scevgep80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   store i32 %12, i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   store i32 %18, i32* %scevgep80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_25)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %25 = load i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_28)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %27 = load i32* %scevgep73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_29)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %26, i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_30)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %34 = load i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %32 = load i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_32)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %35 = load i32* %scevgep68, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_33)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %33, i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %36, i32* %scevgep68, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %42 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %52 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %62 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %72 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %82 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %92 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %102 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %112 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %46 = load i32* %45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_45)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_46)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %66 = load i32* %65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_47)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %76 = load i32* %75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_49)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %96 = load i32* %95, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %106 = load i32* %105, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %116 = load i32* %115, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %51, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %41, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %61, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %71, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %91, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %81, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %106, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_59)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %116, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_60)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %123 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_64)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %133 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_65)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %143 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_66)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %153 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_67)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %163 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_68)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %173 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_69)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %183 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_70)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %193 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_71)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %127 = load i32* %126, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_72)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %137 = load i32* %136, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_73)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %147 = load i32* %146, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_74)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %157 = load i32* %156, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_75)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %167 = load i32* %166, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_76)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %177 = load i32* %176, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_77)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %187 = load i32* %186, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_78)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %197 = load i32* %196, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %132, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_80)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %122, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_81)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %142, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_82)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_83)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %172, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_85)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %187, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_86)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %197, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_87)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %207 = load i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_91)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %210 = load i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_92)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %213 = load i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_93)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %208, i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_94)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %214, i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_96)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %222 = load i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_99)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %224 = load i32* %scevgep53, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_100)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %223, i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_102)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %226 = load i32* %scevgep49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_103)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %227, i32* %scevgep49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_105)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %235 = load i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_110)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %237*/
	/*   %.pre.i = load i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__237_113)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %244 = load i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_118)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %251*/
	/*   %258 = load i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_124)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %251*/
	/*   %261 = load i32* %scevgep35, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_125)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %251*/
	/*   %264 = load i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_126)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %251*/
	/*   %267 = load i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_127)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %251*/
	/*   store i32 %262, i32* %scevgep35, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_128)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %251*/
	/*   store i32 %259, i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_129)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %251*/
	/*   store i32 %268, i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_130)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %278 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_134)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %282 = load i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_135)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %285 = load i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_136)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %283 = load i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_138)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %286 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_139)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %284, i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_140)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %287, i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_141)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %293 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_143)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %303 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_144)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %313 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_145)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %323 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_146)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %333 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_147)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %343 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_148)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %353 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_149)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %363 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_150)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %302, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %292, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %312, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_153)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %322, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_154)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %342, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_155)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %332, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_156)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %357, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_157)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %367, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_158)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %374 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_162)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %384 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_163)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %394 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_164)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %404 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_165)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %414 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_166)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %424 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_167)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %434 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_168)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %444 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_169)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %383, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %373, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %393, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_172)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %403, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_173)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %423, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_174)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %413, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_175)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %438, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_176)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %448, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_177)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %454 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_180)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %457 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_181)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %460 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_182)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %463 = load i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_183)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %458, i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_184)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %464, i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_185)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %471 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_188)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %472, i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_190)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %480 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_191)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %478 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_192)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %481 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_193)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %479, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_194)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %482, i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_195)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 90, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 141, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %0*/
	/*   store i32 162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %0*/
	/*   store i32 55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %0*/
	/*   store i32 52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %0*/
	/*   store i32 126, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 22, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 174, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 166, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd7));
	end
	/* main: %0*/
	/*   store i32 247, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd9));
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd11));
	end
	/* main: %0*/
	/*   store i32 207, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd13));
	end
	/* main: %0*/
	/*   store i32 60, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd15));
	end
	/* main: %2*/
	/*   %8 = load i32* %scevgep83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		memory_controller_address_b = main_2_scevgep83;
	end
	/* main: %2*/
	/*   %11 = load i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_address_b = main_2_scevgep82_reg;
	end
	/* main: %2*/
	/*   %14 = load i32* %scevgep81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_22)) begin
		memory_controller_address_b = main_2_scevgep81_reg;
	end
	/* main: %2*/
	/*   %17 = load i32* %scevgep80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		memory_controller_address_b = main_2_scevgep80_reg;
	end
	/* main: %2*/
	/*   store i32 %12, i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_address_b = main_2_scevgep82_reg;
	end
	/* main: %2*/
	/*   store i32 %18, i32* %scevgep80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_25)) begin
		memory_controller_address_b = main_2_scevgep80_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %25 = load i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_28)) begin
		memory_controller_address_b = main_preheaderii_scevgep74;
	end
	/* main: %.preheader.i.i*/
	/*   %27 = load i32* %scevgep73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_29)) begin
		memory_controller_address_b = main_preheaderii_scevgep73_reg;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %26, i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_30)) begin
		memory_controller_address_b = main_preheaderii_scevgep74_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %34 = load i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_31)) begin
		memory_controller_address_b = main_preheaderii_scevgep69_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %32 = load i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_32)) begin
		memory_controller_address_b = main_preheaderii_scevgep70_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %35 = load i32* %scevgep68, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_33)) begin
		memory_controller_address_b = main_preheaderii_scevgep68_reg;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %33, i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		memory_controller_address_b = main_preheaderii_scevgep70_reg;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %36, i32* %scevgep68, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		memory_controller_address_b = main_preheaderii_scevgep68_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %42 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %52 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %62 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %72 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %82 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %92 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %102 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %112 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %46 = load i32* %45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_45)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_45_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_46)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_55_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %66 = load i32* %65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_47)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_65_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %76 = load i32* %75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_75_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_49)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_85_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %96 = load i32* %95, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_95_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %106 = load i32* %105, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_105_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %116 = load i32* %115, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		memory_controller_address_b = main_AddRoundKeyexitipreheader_115_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %51, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %41, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %61, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %71, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %91, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %81, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %106, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_59)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %116, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_60)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %123 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_64)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %133 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_65)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %143 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_66)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %153 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_67)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %163 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_68)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %173 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_69)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %183 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_70)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %193 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_71)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %127 = load i32* %126, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_72)) begin
		memory_controller_address_b = main_AddRoundKeyexiti_126_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %137 = load i32* %136, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_73)) begin
		memory_controller_address_b = main_AddRoundKeyexiti_136_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %147 = load i32* %146, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_74)) begin
		memory_controller_address_b = main_AddRoundKeyexiti_146_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %157 = load i32* %156, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_75)) begin
		memory_controller_address_b = main_AddRoundKeyexiti_156_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %167 = load i32* %166, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_76)) begin
		memory_controller_address_b = main_AddRoundKeyexiti_166_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %177 = load i32* %176, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_77)) begin
		memory_controller_address_b = main_AddRoundKeyexiti_176_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %187 = load i32* %186, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_78)) begin
		memory_controller_address_b = main_AddRoundKeyexiti_186_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %197 = load i32* %196, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		memory_controller_address_b = main_AddRoundKeyexiti_196_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %132, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_80)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %122, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_81)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %142, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_82)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_83)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %172, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_85)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %187, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_86)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %197, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_87)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %207 = load i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_91)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_scevgep58_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %210 = load i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_92)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_scevgep57_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %213 = load i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_93)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_scevgep56_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %208, i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_94)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_scevgep58_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %214, i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_96)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_scevgep56_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %222 = load i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_99)) begin
		memory_controller_address_b = main_preheaderi4i_scevgep50;
	end
	/* main: %.preheader.i4.i*/
	/*   %224 = load i32* %scevgep53, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_100)) begin
		memory_controller_address_b = main_preheaderi4i_scevgep53;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %223, i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_102)) begin
		memory_controller_address_b = main_preheaderi4i_scevgep50_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   %226 = load i32* %scevgep49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_103)) begin
		memory_controller_address_b = main_preheaderi4i_scevgep49_reg;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %227, i32* %scevgep49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_105)) begin
		memory_controller_address_b = main_preheaderi4i_scevgep49_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %235 = load i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_110)) begin
		memory_controller_address_b = main_lrphi_scevgep45;
	end
	/* main: %237*/
	/*   %.pre.i = load i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__237_113)) begin
		memory_controller_address_b = main_lrphi_scevgep45_reg;
	end
	/* main: %.preheader.i*/
	/*   %244 = load i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_118)) begin
		memory_controller_address_b = main_preheaderi_scevgep43;
	end
	/* main: %251*/
	/*   %258 = load i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_124)) begin
		memory_controller_address_b = main_251_scevgep36;
	end
	/* main: %251*/
	/*   %261 = load i32* %scevgep35, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_125)) begin
		memory_controller_address_b = main_251_scevgep35_reg;
	end
	/* main: %251*/
	/*   %264 = load i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_126)) begin
		memory_controller_address_b = main_251_scevgep34_reg;
	end
	/* main: %251*/
	/*   %267 = load i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_127)) begin
		memory_controller_address_b = main_251_scevgep33_reg;
	end
	/* main: %251*/
	/*   store i32 %262, i32* %scevgep35, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_128)) begin
		memory_controller_address_b = main_251_scevgep35_reg;
	end
	/* main: %251*/
	/*   store i32 %259, i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_129)) begin
		memory_controller_address_b = main_251_scevgep36_reg;
	end
	/* main: %251*/
	/*   store i32 %268, i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_130)) begin
		memory_controller_address_b = main_251_scevgep33_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %278 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_134)) begin
		memory_controller_address_b = main_preheaderii4_scevgep30;
	end
	/* main: %.preheader.i.i4*/
	/*   %282 = load i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_135)) begin
		memory_controller_address_b = main_preheaderii4_scevgep29_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %285 = load i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_136)) begin
		memory_controller_address_b = main_preheaderii4_scevgep28_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %283 = load i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_138)) begin
		memory_controller_address_b = main_preheaderii4_scevgep25_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   %286 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_139)) begin
		memory_controller_address_b = main_preheaderii4_scevgep24_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %284, i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_140)) begin
		memory_controller_address_b = main_preheaderii4_scevgep25_reg;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %287, i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_141)) begin
		memory_controller_address_b = main_preheaderii4_scevgep24_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %293 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_143)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %303 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_144)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %313 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_145)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %323 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_146)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %333 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_147)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %343 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_148)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %353 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_149)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %363 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_150)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %302, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %292, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %312, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_153)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %322, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_154)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %342, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_155)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %332, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_156)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %357, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_157)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %367, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_158)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %.lr.ph12.i*/
	/*   %374 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_162)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %.lr.ph12.i*/
	/*   %384 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_163)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %.lr.ph12.i*/
	/*   %394 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_164)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %.lr.ph12.i*/
	/*   %404 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_165)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %.lr.ph12.i*/
	/*   %414 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_166)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %.lr.ph12.i*/
	/*   %424 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_167)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %.lr.ph12.i*/
	/*   %434 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_168)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %.lr.ph12.i*/
	/*   %444 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_169)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %383, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %373, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %393, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_172)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %403, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_173)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %423, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_174)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %413, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_175)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %438, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_176)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %448, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_177)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %._crit_edge.i*/
	/*   %454 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_180)) begin
		memory_controller_address_b = main__crit_edgei_scevgep20;
	end
	/* main: %._crit_edge.i*/
	/*   %457 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_181)) begin
		memory_controller_address_b = main__crit_edgei_scevgep19_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %460 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_182)) begin
		memory_controller_address_b = main__crit_edgei_scevgep18_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %463 = load i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_183)) begin
		memory_controller_address_b = main__crit_edgei_scevgep17_reg;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %458, i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_184)) begin
		memory_controller_address_b = main__crit_edgei_scevgep19_reg;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %464, i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_185)) begin
		memory_controller_address_b = main__crit_edgei_scevgep17_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %471 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_188)) begin
		memory_controller_address_b = main_preheaderi4i14_scevgep11;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %472, i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_190)) begin
		memory_controller_address_b = main_preheaderi4i14_scevgep11_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %480 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_191)) begin
		memory_controller_address_b = main_preheaderi4i14_scevgep6_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %478 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_192)) begin
		memory_controller_address_b = main_preheaderi4i14_scevgep7_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   %481 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_193)) begin
		memory_controller_address_b = main_preheaderi4i14_scevgep5_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %479, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_194)) begin
		memory_controller_address_b = main_preheaderi4i14_scevgep7_reg;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %482, i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_195)) begin
		memory_controller_address_b = main_preheaderi4i14_scevgep5_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 90, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 141, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 126, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 22, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 174, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 166, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 247, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 207, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 60, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   %8 = load i32* %scevgep83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %2*/
	/*   %11 = load i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %2*/
	/*   %14 = load i32* %scevgep81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_22)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %2*/
	/*   %17 = load i32* %scevgep80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %2*/
	/*   store i32 %12, i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %2*/
	/*   store i32 %18, i32* %scevgep80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_25)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %25 = load i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_28)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i.i*/
	/*   %27 = load i32* %scevgep73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_29)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %26, i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_30)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %34 = load i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_31)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i.i*/
	/*   %32 = load i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_32)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i.i*/
	/*   %35 = load i32* %scevgep68, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_33)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %33, i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %36, i32* %scevgep68, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %42 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %52 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %62 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %72 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %82 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %92 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %102 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %112 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %46 = load i32* %45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_45)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_46)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %66 = load i32* %65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_47)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %76 = load i32* %75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_49)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %96 = load i32* %95, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %106 = load i32* %105, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %116 = load i32* %115, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %51, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %41, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %61, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %71, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %91, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %81, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %106, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_59)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %116, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_60)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %123 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_64)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %133 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_65)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %143 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_66)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %153 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_67)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %163 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_68)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %173 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_69)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %183 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_70)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %193 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_71)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %127 = load i32* %126, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_72)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %137 = load i32* %136, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_73)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %147 = load i32* %146, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_74)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %157 = load i32* %156, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_75)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %167 = load i32* %166, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_76)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %177 = load i32* %176, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_77)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %187 = load i32* %186, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_78)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %197 = load i32* %196, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %132, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_80)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %122, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_81)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %142, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_82)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_83)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %172, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_85)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %187, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_86)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %197, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_87)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %207 = load i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_91)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %210 = load i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_92)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %213 = load i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_93)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %208, i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_94)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %214, i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_96)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %222 = load i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_99)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i4.i*/
	/*   %224 = load i32* %scevgep53, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_100)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %223, i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_102)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i*/
	/*   %226 = load i32* %scevgep49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_103)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %227, i32* %scevgep49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_105)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %235 = load i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_110)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %237*/
	/*   %.pre.i = load i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__237_113)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %244 = load i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_118)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %251*/
	/*   %258 = load i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_124)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %251*/
	/*   %261 = load i32* %scevgep35, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_125)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %251*/
	/*   %264 = load i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_126)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %251*/
	/*   %267 = load i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_127)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %251*/
	/*   store i32 %262, i32* %scevgep35, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_128)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %251*/
	/*   store i32 %259, i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_129)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %251*/
	/*   store i32 %268, i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_130)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   %278 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_134)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i.i4*/
	/*   %282 = load i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_135)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i.i4*/
	/*   %285 = load i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_136)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i.i4*/
	/*   %283 = load i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_138)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i.i4*/
	/*   %286 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_139)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %284, i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_140)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %287, i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_141)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %293 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_143)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %303 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_144)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %313 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_145)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %323 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_146)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %333 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_147)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %343 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_148)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %353 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_149)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %363 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_150)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %302, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %292, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %312, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_153)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %322, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_154)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %342, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_155)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %332, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_156)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %357, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_157)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %367, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_158)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   %374 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_162)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %384 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_163)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %394 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_164)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %404 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_165)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %414 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_166)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %424 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_167)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %434 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_168)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   %444 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_169)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %383, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %373, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %393, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_172)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %403, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_173)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %423, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_174)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %413, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_175)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %438, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_176)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %448, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_177)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %454 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_180)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %457 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_181)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %460 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_182)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %463 = load i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_183)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %458, i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_184)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %464, i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_185)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %471 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_188)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %472, i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_190)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   %480 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_191)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i4.i14*/
	/*   %478 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_192)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i4.i14*/
	/*   %481 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_193)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %479, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_194)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %482, i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_195)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_b = 32'd67;
	end
	/* main: %0*/
	/*   store i32 168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_b = 32'd168;
	end
	/* main: %0*/
	/*   store i32 90, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_in_b = 32'd90;
	end
	/* main: %0*/
	/*   store i32 141, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_in_b = 32'd141;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_in_b = 32'd49;
	end
	/* main: %0*/
	/*   store i32 162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_in_b = 32'd162;
	end
	/* main: %0*/
	/*   store i32 55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_in_b = 32'd55;
	end
	/* main: %0*/
	/*   store i32 52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_in_b = 32'd52;
	end
	/* main: %0*/
	/*   store i32 126, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_in_b = 32'd126;
	end
	/* main: %0*/
	/*   store i32 22, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_in_b = 32'd22;
	end
	/* main: %0*/
	/*   store i32 174, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_in_b = 32'd174;
	end
	/* main: %0*/
	/*   store i32 166, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_in_b = 32'd166;
	end
	/* main: %0*/
	/*   store i32 247, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_in_b = 32'd247;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_in_b = 32'd136;
	end
	/* main: %0*/
	/*   store i32 207, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_in_b = 32'd207;
	end
	/* main: %0*/
	/*   store i32 60, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_in_b = 32'd60;
	end
	/* main: %2*/
	/*   store i32 %12, i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_in_b = main_2_12_reg;
	end
	/* main: %2*/
	/*   store i32 %18, i32* %scevgep80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_25)) begin
		memory_controller_in_b = main_2_18;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %26, i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_30)) begin
		memory_controller_in_b = main_preheaderii_26;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %33, i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		memory_controller_in_b = main_preheaderii_33;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %36, i32* %scevgep68, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		memory_controller_in_b = main_preheaderii_36;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %51, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_51_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %41, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_41_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %61, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_61_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %71, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_71_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %91, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_91_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %81, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_81_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %106, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_59)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_106_reg;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %116, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_60)) begin
		memory_controller_in_b = main_AddRoundKeyexitipreheader_116_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %132, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_80)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_132_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %122, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_81)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_122_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %142, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_82)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_142_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_83)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_152_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %172, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_172_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_85)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_162_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %187, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_86)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_187_reg;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %197, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_87)) begin
		memory_controller_in_b = main_AddRoundKeyexiti_197_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %208, i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_94)) begin
		memory_controller_in_b = main_AddRoundKeyexit_crit_edgei_208;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %214, i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_96)) begin
		memory_controller_in_b = main_AddRoundKeyexit_crit_edgei_214;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %223, i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_102)) begin
		memory_controller_in_b = main_preheaderi4i_223;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %227, i32* %scevgep49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_105)) begin
		memory_controller_in_b = main_preheaderi4i_227;
	end
	/* main: %251*/
	/*   store i32 %262, i32* %scevgep35, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_128)) begin
		memory_controller_in_b = main_251_262;
	end
	/* main: %251*/
	/*   store i32 %259, i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_129)) begin
		memory_controller_in_b = main_251_259_reg;
	end
	/* main: %251*/
	/*   store i32 %268, i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_130)) begin
		memory_controller_in_b = main_251_268;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %284, i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_140)) begin
		memory_controller_in_b = main_preheaderii4_284;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %287, i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_141)) begin
		memory_controller_in_b = main_preheaderii4_287;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %302, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		memory_controller_in_b = main_lrph12ipreheader_302_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %292, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		memory_controller_in_b = main_lrph12ipreheader_292_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %312, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_153)) begin
		memory_controller_in_b = main_lrph12ipreheader_312_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %322, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_154)) begin
		memory_controller_in_b = main_lrph12ipreheader_322_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %342, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_155)) begin
		memory_controller_in_b = main_lrph12ipreheader_342_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %332, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_156)) begin
		memory_controller_in_b = main_lrph12ipreheader_332_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %357, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_157)) begin
		memory_controller_in_b = main_lrph12ipreheader_357_reg;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %367, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_158)) begin
		memory_controller_in_b = main_lrph12ipreheader_367_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %383, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		memory_controller_in_b = main_lrph12i_383_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %373, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		memory_controller_in_b = main_lrph12i_373_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %393, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_172)) begin
		memory_controller_in_b = main_lrph12i_393_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %403, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_173)) begin
		memory_controller_in_b = main_lrph12i_403_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %423, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_174)) begin
		memory_controller_in_b = main_lrph12i_423_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %413, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_175)) begin
		memory_controller_in_b = main_lrph12i_413_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %438, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_176)) begin
		memory_controller_in_b = main_lrph12i_438_reg;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %448, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_177)) begin
		memory_controller_in_b = main_lrph12i_448_reg;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %458, i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_184)) begin
		memory_controller_in_b = main__crit_edgei_458_reg;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %464, i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_185)) begin
		memory_controller_in_b = main__crit_edgei_464;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %472, i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_190)) begin
		memory_controller_in_b = main_preheaderi4i14_472;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %479, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_194)) begin
		memory_controller_in_b = main_preheaderi4i14_479;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %482, i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_195)) begin
		memory_controller_in_b = main_preheaderi4i14_482;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 90, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 141, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 126, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 22, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 174, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 166, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 247, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 207, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 60, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %2*/
	/*   %8 = load i32* %scevgep83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_20)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %2*/
	/*   %11 = load i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %2*/
	/*   %14 = load i32* %scevgep81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_22)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %2*/
	/*   %17 = load i32* %scevgep80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_23)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %2*/
	/*   store i32 %12, i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_24)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %2*/
	/*   store i32 %18, i32* %scevgep80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__2_25)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   %25 = load i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_28)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   %27 = load i32* %scevgep73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_29)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %26, i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_30)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   %34 = load i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_31)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   %32 = load i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_32)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   %35 = load i32* %scevgep68, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_33)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %33, i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %36, i32* %scevgep68, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_35)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %42 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_37)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %52 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_38)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %62 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_39)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %72 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_40)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %82 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_41)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %92 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_42)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %102 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_43)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %112 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_44)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %46 = load i32* %45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_45)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_46)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %66 = load i32* %65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_47)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %76 = load i32* %75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_48)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_49)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %96 = load i32* %95, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_50)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %106 = load i32* %105, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_51)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   %116 = load i32* %115, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_52)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %51, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_53)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %41, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_54)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %61, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_55)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %71, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_56)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %91, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_57)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %81, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_58)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %106, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_59)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   store i32 %116, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_60)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %123 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_64)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %133 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_65)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %143 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_66)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %153 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_67)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %163 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_68)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %173 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_69)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %183 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_70)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %193 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_71)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %127 = load i32* %126, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_72)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %137 = load i32* %136, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_73)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %147 = load i32* %146, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_74)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %157 = load i32* %156, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_75)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %167 = load i32* %166, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_76)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %177 = load i32* %176, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_77)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %187 = load i32* %186, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_78)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   %197 = load i32* %196, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_79)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %132, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_80)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %122, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_81)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %142, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_82)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_83)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %172, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_84)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_85)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %187, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_86)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit.i*/
	/*   store i32 %197, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexiti_87)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %207 = load i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_91)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %210 = load i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_92)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %213 = load i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_93)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %208, i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_94)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %214, i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_96)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   %222 = load i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_99)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   %224 = load i32* %scevgep53, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_100)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %223, i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_102)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   %226 = load i32* %scevgep49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_103)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i*/
	/*   store i32 %227, i32* %scevgep49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i_105)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph.i*/
	/*   %235 = load i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_110)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %237*/
	/*   %.pre.i = load i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__237_113)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %244 = load i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_118)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %251*/
	/*   %258 = load i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_124)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %251*/
	/*   %261 = load i32* %scevgep35, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_125)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %251*/
	/*   %264 = load i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_126)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %251*/
	/*   %267 = load i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_127)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %251*/
	/*   store i32 %262, i32* %scevgep35, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_128)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %251*/
	/*   store i32 %259, i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_129)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %251*/
	/*   store i32 %268, i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__251_130)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   %278 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_134)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   %282 = load i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_135)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   %285 = load i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_136)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   %283 = load i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_138)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   %286 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_139)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %284, i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_140)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i4*/
	/*   store i32 %287, i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii4_141)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %293 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_143)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %303 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_144)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %313 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_145)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %323 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_146)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %333 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_147)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %343 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_148)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %353 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_149)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   %363 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_150)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %302, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_151)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %292, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_152)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %312, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_153)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %322, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_154)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %342, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_155)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %332, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_156)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %357, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_157)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i.preheader*/
	/*   store i32 %367, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12ipreheader_158)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %374 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_162)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %384 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_163)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %394 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_164)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %404 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_165)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %414 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_166)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %424 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_167)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %434 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_168)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   %444 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_169)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %383, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_170)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %373, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_171)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %393, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_172)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %403, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_173)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %423, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_174)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %413, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_175)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %438, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_176)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph12.i*/
	/*   store i32 %448, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph12i_177)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %454 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_180)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %457 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_181)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %460 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_182)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %463 = load i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_183)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %458, i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_184)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %464, i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_185)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   %471 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_188)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %472, i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_190)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   %480 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_191)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   %478 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_192)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   %481 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_193)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %479, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_194)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i4.i14*/
	/*   store i32 %482, i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi4i14_195)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %505*/
	/*   ret i32 %497*/
	if ((cur_state == LEGUP_F_main_BB__505_212)) begin
		return_val <= main_preheaderloopexiti17_497_reg;
		if (start == 1'b0 && ^(main_preheaderloopexiti17_497_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 

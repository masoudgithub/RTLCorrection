//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Tue Jun 18 03:11:52 2019
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sun Jun 23 10:22:57 2019
//----------------------------------------------------------------------------//

--------------------------------------------------------------------------------
Function: main
--------------------------------------------------------------------------------
Function unit type:           Number Required               
decis_levl_local_mem_dual_port1                             
ilb_table_local_mem_dual_port 1                             
mem_dual_port                 2                             
qq2_code2_table_local_mem_dual_port1                             
qq4_code4_table_local_mem_dual_port1                             
qq6_code6_table_local_mem_dual_port1                             
result_local_mem_dual_port    1                             
signed_add_32                 19                            
signed_divide_32              1                             
signed_multiply_32            29                            
signed_subtract_32            2                             
test_data_local_mem_dual_port 2                             
test_result_local_mem_dual_port1                             
tqmf_local_mem_dual_port      2                             
wh_code_table_local_mem_dual_port1                             
wl_code_table_local_mem_dual_port1                             
--------------------------------------------------------------------------------
Function: legup_memset_4_i64
--------------------------------------------------------------------------------
Function unit type:           Number Required               
legup_memset_4_i64_0_1_local_mem_dual_port1                             
legup_memset_4_i64_0_2_local_mem_dual_port1                             
legup_memset_4_i64_0_3_local_mem_dual_port1                             
legup_memset_4_i64_0_c_local_mem_dual_port2                             
legup_memset_4_i64_0_s_local_mem_dual_port2                             
signed_add_32                 1                             
signed_add_64                 1                             

Running Bipartite Weighted Matching on function: legup_memset_4_i64
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_1_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0
  store i8* %m, i8** %1, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0
  store i8* %m, i8** %1, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8* %m, i8** %1, align... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_2_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0
  store i8 %c1, i8* %2, align ... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0
  store i8 %c1, i8* %2, align ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8 %c1, i8* %2, align ... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %n, i64* %3, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %n, i64* %3, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i64 %n, i64* %3, align... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_1_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %14 = load i8** %1, align 4 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0
  %14 = load i8** %1, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0
  %14 = load i8** %1, align 4 (idx: 0)            100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0
  %14 = load i8** %1, align 4 (idx: 0)            1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %14 = load i8** %1, align 4 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_2_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %4 = load i8* %2, align 1 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0
  %4 = load i8* %2, align 1 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0
  %4 = load i8* %2, align 1 (idx: 0)              100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0
  %4 = load i8* %2, align 1 (idx: 0)              1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %4 = load i8* %2, align 1 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %16 = load i64* %3, align 8 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  %16 = load i64* %3, align 8 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  %16 = load i64* %3, align 8 (idx: 0)            100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  %16 = load i64* %3, align 8 (idx: 0)            1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %16 = load i64* %3, align 8 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i64 %17, i64* %3, alig... hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %17, i64* %3, alig... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %17, i64* %3, alig... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %17, i64* %3, alig... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i64 %17, i64* %3, alig... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %5, i32* %c, align... (idx: 0)        90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %5, i32* %c, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %5, i32* %c, align... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_s_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_1
  store i32* %15, i32** %s, al... (idx: 0)        90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_1
  store i32* %15, i32** %s, al... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32* %15, i32** %s, al... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %6 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %6 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %8 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %8 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %6 = load i32* %c, align 4 (idx: 0)             90                            95                            
  %8 = load i32* %c, align 4 (idx: 1)             90                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %6 = load i32* %c, align 4 (idx: 0)             1                             0                             
  %8 = load i32* %c, align 4 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %6 = load i32* %c, align 4 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0 (mux inputs: 2)
  %8 = load i32* %c, align 4 (idx: 1) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %9, i32* %c, align... hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  store i32 %9, i32* %c, align... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  store i32 %9, i32* %c, align... hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %9, i32* %c, align... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %9, i32* %c, align... (idx: 0)        85                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %9, i32* %c, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %9, i32* %c, align... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %10 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %10 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %10 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %10 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %12 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %12 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %12 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %12 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %10 = load i32* %c, align 4 (idx: 0)            80                            100                           
  %12 = load i32* %c, align 4 (idx: 1)            80                            100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %10 = load i32* %c, align 4 (idx: 0)            1                             0                             
  %12 = load i32* %c, align 4 (idx: 1)            0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %10 = load i32* %c, align 4 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0 (mux inputs: 3)
  %12 = load i32* %c, align 4 (idx: 1) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %13, i32* %c, alig... hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  store i32 %13, i32* %c, alig... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  store i32 %13, i32* %c, alig... hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %13, i32* %c, alig... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %13, i32* %c, alig... (idx: 0)        75                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %13, i32* %c, alig... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %13, i32* %c, alig... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_legup_memset_4_i64_BB__18
Binding functional unit type: legup_memset_4_i64_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %19 = load i64* %3, align 8 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  %19 = load i64* %3, align 8 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  %19 = load i64* %3, align 8 (idx: 0)            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  %19 = load i64* %3, align 8 (idx: 0)            1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %19 = load i64* %3, align 8 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_i64_BB__18
Binding functional unit type: legup_memset_4_i64_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i64 %20, i64* %3, alig... hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %20, i64* %3, alig... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %20, i64* %3, alig... (idx: 0)        85                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %20, i64* %3, alig... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i64 %20, i64* %3, alig... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_legup_memset_4_i64_BB__18
Binding functional unit type: signed_add_64
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_i64_signed_add_64_0
  %20 = add i64 %19, -1 (idx: 0)                  95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_signed_add_64_0
  %20 = add i64 %19, -1 (idx: 0)                  1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %20 = add i64 %19, -1 (idx: 0) -> legup_memset_4_i64_signed_add_64_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__22
Binding functional unit type: legup_memset_4_i64_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %23 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %23 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %23 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %23 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %23 = load i32* %c, align 4 (idx: 0)            70                            100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %23 = load i32* %c, align 4 (idx: 0)            1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %23 = load i32* %c, align 4 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_legup_memset_4_i64_BB__22
Binding functional unit type: legup_memset_4_i64_0_s_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %24 = load i32** %s, align 4 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0
  %24 = load i32** %s, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_1
  %24 = load i32** %s, align 4 (idx: 0)           90                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_1
  %24 = load i32** %s, align 4 (idx: 0)           1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %24 = load i32** %s, align 4 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_i64_BB__22
Binding functional unit type: legup_memset_4_i64_0_s_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32* %25, i32** %s, al... hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0
  store i32* %25, i32** %s, al... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0
  store i32 %23, i32* %24, ali... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_1
  store i32* %25, i32** %s, al... (idx: 0)        85                            90                            
  store i32 %23, i32* %24, ali... (idx: 1)        80                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_1
  store i32* %25, i32** %s, al... (idx: 0)        0                             1                             
  store i32 %23, i32* %24, ali... (idx: 1)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %23, i32* %24, ali... (idx: 1) -> legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0 (mux inputs: 4)
  store i32* %25, i32** %s, al... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_i64_BB__22
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_i64_signed_add_32_0
  %gep = add i32 %gep_int, 4 (idx: 0)             -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_signed_add_32_0
  %gep = add i32 %gep_int, 4 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep = add i32 %gep_int, 4 (idx: 0) -> legup_memset_4_i64_signed_add_32_0 (mux inputs: 1)

Running Bipartite Weighted Matching on function: main
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             1                             
  store i32 0, i32* getelement... (idx: 1)        1                             1                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %81 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %81 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
  %82 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %82 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %81 = load i32* getelementpt... (idx: 0)        11                            11                            
  %82 = load i32* getelementpt... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %81 = load i32* getelementpt... (idx: 0)        1                             0                             
  %82 = load i32* getelementpt... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %81 = load i32* getelementpt... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  %82 = load i32* getelementpt... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %31 = mul nsw i32 %25, 12 (idx: 0)              -4                            -3                            -3                            -5                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -5                            -3                            -3                            -4                            -3                            
  %32 = mul nsw i32 %24, -44 (idx
  %33 = mul nsw i32 %23, -44 (idx
  %35 = mul nsw i32 %22, 212 (idx: 3)             -4                            -3                            -3                            -4                            -4                            -4                            -5                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -5                            -4                            -4                            -4                            -4                            -4                            -5                            -4                            -4                            -4                            -3                            -3                            -5                            -3                            
  %37 = mul nsw i32 %21, 48 (idx: 4)              -4                            -4                            -4                            -4                            -4                            -3                            -4                            -5                            -4                            -4                            -4                            -4                            -4                            -4                            -3                            -4                            -4                            -4                            -4                            -3                            -5                            -3                            -4                            -3                            -4                            -4                            -5                            -3                            -4                            
  %39 = mul nsw i32 %20, -624 (idx
  %43 = mul nsw i32 %18, 1448 (idx: 6)            -4                            -3                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -5                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -5                            -4                            -4                            -4                            -4                            -4                            -4                            -3                            -3                            -4                            -3                            
  %45 = mul nsw i32 %17, -840 (idx
  %47 = mul nsw i32 %16, -3220 (idx
  %49 = mul nsw i32 %15, 3804 (idx: 9)            -4                            -3                            -3                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -5                            -4                            -4                            -5                            -4                            -4                            -4                            -4                            -4                            -5                            -4                            -4                            -5                            -3                            -3                            -4                            -3                            
  %51 = mul nsw i32 %14, 15504 (idx: 10)          -4                            -3                            -3                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -5                            -5                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -5                            -5                            -4                            -3                            -3                            -4                            -3                            
  %53 = mul nsw i32 %13, 15504 (idx
  %55 = mul nsw i32 %12, 3804 (idx: 12)           -4                            -3                            -3                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -5                            -4                            -4                            -5                            -4                            -4                            -4                            -4                            -4                            -5                            -4                            -4                            -5                            -3                            -3                            -4                            -3                            
  %57 = mul nsw i32 %11, -3220 (idx
  %59 = mul nsw i32 %10, -840 (idx
  %61 = mul nsw i32 %9, 1448 (idx: 15)            -4                            -3                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -5                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -5                            -4                            -4                            -4                            -4                            -4                            -4                            -3                            -3                            -4                            -3                            
  %65 = mul nsw i32 %7, -624 (idx
  %67 = mul nsw i32 %6, 48 (idx: 17)              -4                            -3                            -3                            -4                            -4                            -4                            -4                            -5                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -5                            -4                            -4                            -4                            -5                            -4                            -4                            -4                            -4                            -3                            -4                            -4                            -3                            
  %69 = mul nsw i32 %5, 212 (idx: 18)             -4                            -3                            -3                            -4                            -4                            -4                            -5                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -5                            -4                            -4                            -4                            -4                            -4                            -5                            -4                            -4                            -4                            -3                            -3                            -5                            -3                            
  %71 = mul nsw i32 %4, -44 (idx
  %73 = mul nsw i32 %3, -44 (idx
  %75 = mul nsw i32 %2, 12 (idx: 21)              -4                            -3                            -3                            -5                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -5                            -3                            -3                            -4                            -3                            
  %126 = mul nsw i32 %125, %al... (idx: 22)       -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %31 = mul nsw i32 %25, 12 (idx
  %32 = mul nsw i32 %24, -44 (idx
  %33 = mul nsw i32 %23, -44 (idx
  %35 = mul nsw i32 %22, 212 (idx
  %37 = mul nsw i32 %21, 48 (idx
  %39 = mul nsw i32 %20, -624 (idx
  %43 = mul nsw i32 %18, 1448 (idx
  %45 = mul nsw i32 %17, -840 (idx
  %47 = mul nsw i32 %16, -3220 (idx
  %49 = mul nsw i32 %15, 3804 (idx
  %51 = mul nsw i32 %14, 15504 (idx
  %53 = mul nsw i32 %13, 15504 (idx
  %55 = mul nsw i32 %12, 3804 (idx
  %57 = mul nsw i32 %11, -3220 (idx
  %59 = mul nsw i32 %10, -840 (idx
  %61 = mul nsw i32 %9, 1448 (idx
  %65 = mul nsw i32 %7, -624 (idx
  %67 = mul nsw i32 %6, 48 (idx
  %69 = mul nsw i32 %5, 212 (idx
  %71 = mul nsw i32 %4, -44 (idx
  %73 = mul nsw i32 %3, -44 (idx
  %75 = mul nsw i32 %2, 12 (idx
  %126 = mul nsw i32 %125, %al... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %32 = mul nsw i32 %24, -44 (idx: 1) -> main_signed_multiply_32_0 (mux inputs: 1)
  %59 = mul nsw i32 %10, -840 (idx: 14) -> main_signed_multiply_32_1 (mux inputs: 1)
  %73 = mul nsw i32 %3, -44 (idx: 20) -> main_signed_multiply_32_2 (mux inputs: 1)
  %31 = mul nsw i32 %25, 12 (idx: 0) -> main_signed_multiply_32_3 (mux inputs: 1)
  %33 = mul nsw i32 %23, -44 (idx: 2) -> main_signed_multiply_32_4 (mux inputs: 1)
  %39 = mul nsw i32 %20, -624 (idx: 5) -> main_signed_multiply_32_5 (mux inputs: 1)
  %35 = mul nsw i32 %22, 212 (idx: 3) -> main_signed_multiply_32_6 (mux inputs: 1)
  %37 = mul nsw i32 %21, 48 (idx: 4) -> main_signed_multiply_32_7 (mux inputs: 1)
  %45 = mul nsw i32 %17, -840 (idx: 7) -> main_signed_multiply_32_8 (mux inputs: 1)
  %43 = mul nsw i32 %18, 1448 (idx: 6) -> main_signed_multiply_32_9 (mux inputs: 1)
  %47 = mul nsw i32 %16, -3220 (idx: 8) -> main_signed_multiply_32_10 (mux inputs: 1)
  %57 = mul nsw i32 %11, -3220 (idx: 13) -> main_signed_multiply_32_11 (mux inputs: 1)
  %49 = mul nsw i32 %15, 3804 (idx: 9) -> main_signed_multiply_32_12 (mux inputs: 1)
  %51 = mul nsw i32 %14, 15504 (idx: 10) -> main_signed_multiply_32_13 (mux inputs: 1)
  %53 = mul nsw i32 %13, 15504 (idx: 11) -> main_signed_multiply_32_14 (mux inputs: 1)
  %55 = mul nsw i32 %12, 3804 (idx: 12) -> main_signed_multiply_32_15 (mux inputs: 1)
  %65 = mul nsw i32 %7, -624 (idx: 16) -> main_signed_multiply_32_16 (mux inputs: 1)
  %71 = mul nsw i32 %4, -44 (idx: 19) -> main_signed_multiply_32_17 (mux inputs: 1)
  %61 = mul nsw i32 %9, 1448 (idx: 15) -> main_signed_multiply_32_18 (mux inputs: 1)
  %126 = mul nsw i32 %125, %al... (idx: 22) -> main_signed_multiply_32_19 (mux inputs: 2)
  %67 = mul nsw i32 %6, 48 (idx: 17) -> main_signed_multiply_32_20 (mux inputs: 1)
  %69 = mul nsw i32 %5, 212 (idx: 18) -> main_signed_multiply_32_21 (mux inputs: 1)
  %75 = mul nsw i32 %2, 12 (idx: 21) -> main_signed_multiply_32_24 (mux inputs: 1)
State: LEGUP_F_main_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %84 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %84 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
  %85 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %85 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %84 = load i32* getelementpt... (idx: 0)        11                            11                            
  %85 = load i32* getelementpt... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %84 = load i32* getelementpt... (idx: 0)        1                             0                             
  %85 = load i32* getelementpt... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %84 = load i32* getelementpt... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  %85 = load i32* getelementpt... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep = add i32 %gep_int, %ge... (idx: 0)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %gep3 = add i32 %gep_int1, %... (idx: 1)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %34 = add nsw i32 %33, %31 (idx: 2)             -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %36 = add nsw i32 %35, %32 (idx: 3)             -10                           -10                           -10                           -10                           -10                           -10                           -9                            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %38 = add nsw i32 %37, %34 (idx
  %40 = add nsw i32 %39, %36 (idx: 5)             -10                           -10                           -10                           -10                           -10                           -10                           -9                            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %42 = add nsw i32 %41, %38 (idx: 6)             -10                           -10                           -10                           -10                           -10                           -10                           -9                            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %44 = add nsw i32 %43, %40 (idx: 7)             -10                           -10                           -10                           -9                            -9                            -9                            -8                            -9                            -9                            -10                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -10                           
  %46 = add nsw i32 %45, %42 (idx: 8)             -10                           -10                           -10                           -9                            -9                            -9                            -8                            -9                            -9                            -10                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -10                           
  %48 = add nsw i32 %47, %44 (idx: 9)             -10                           -10                           -10                           -10                           -10                           -10                           -9                            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %50 = add nsw i32 %49, %46 (idx: 10)            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %52 = add nsw i32 %51, %48 (idx: 11)            -10                           -10                           -10                           -9                            -9                            -9                            -8                            -9                            -9                            -10                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -10                           
  %54 = add nsw i32 %53, %50 (idx: 12)            -10                           -10                           -10                           -10                           -10                           -10                           -9                            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %56 = add nsw i32 %55, %52 (idx: 13)            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %58 = add nsw i32 %57, %54 (idx: 14)            -10                           -10                           -10                           -10                           -10                           -10                           -9                            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %60 = add nsw i32 %59, %56 (idx: 15)            -10                           -10                           -10                           -9                            -9                            -9                            -9                            -9                            -9                            -10                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -10                           
  %62 = add nsw i32 %61, %58 (idx: 16)            -10                           -10                           -10                           -10                           -10                           -10                           -9                            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %64 = add nsw i32 %63, %60 (idx: 17)            -10                           -10                           -10                           -10                           -10                           -10                           -9                            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep = add i32 %gep_int, %ge... (idx
  %gep3 = add i32 %gep_int1, %... (idx
  %34 = add nsw i32 %33, %31 (idx
  %36 = add nsw i32 %35, %32 (idx: 3)             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %38 = add nsw i32 %37, %34 (idx
  %40 = add nsw i32 %39, %36 (idx: 5)             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %42 = add nsw i32 %41, %38 (idx: 6)             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %44 = add nsw i32 %43, %40 (idx
  %46 = add nsw i32 %45, %42 (idx
  %48 = add nsw i32 %47, %44 (idx
  %50 = add nsw i32 %49, %46 (idx
  %52 = add nsw i32 %51, %48 (idx: 11)            0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %54 = add nsw i32 %53, %50 (idx
  %56 = add nsw i32 %55, %52 (idx
  %58 = add nsw i32 %57, %54 (idx
  %60 = add nsw i32 %59, %56 (idx
  %62 = add nsw i32 %61, %58 (idx
  %64 = add nsw i32 %63, %60 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %46 = add nsw i32 %45, %42 (idx: 8) -> main_signed_add_32_0 (mux inputs: 2)
  %52 = add nsw i32 %51, %48 (idx: 11) -> main_signed_add_32_1 (mux inputs: 2)
  %60 = add nsw i32 %59, %56 (idx: 15) -> main_signed_add_32_2 (mux inputs: 2)
  %36 = add nsw i32 %35, %32 (idx: 3) -> main_signed_add_32_3 (mux inputs: 2)
  %40 = add nsw i32 %39, %36 (idx: 5) -> main_signed_add_32_4 (mux inputs: 2)
  %42 = add nsw i32 %41, %38 (idx: 6) -> main_signed_add_32_5 (mux inputs: 2)
  %50 = add nsw i32 %49, %46 (idx: 10) -> main_signed_add_32_6 (mux inputs: 2)
  %48 = add nsw i32 %47, %44 (idx: 9) -> main_signed_add_32_7 (mux inputs: 2)
  %54 = add nsw i32 %53, %50 (idx: 12) -> main_signed_add_32_8 (mux inputs: 2)
  %38 = add nsw i32 %37, %34 (idx: 4) -> main_signed_add_32_9 (mux inputs: 2)
  %56 = add nsw i32 %55, %52 (idx: 13) -> main_signed_add_32_10 (mux inputs: 2)
  %58 = add nsw i32 %57, %54 (idx: 14) -> main_signed_add_32_11 (mux inputs: 2)
  %62 = add nsw i32 %61, %58 (idx: 16) -> main_signed_add_32_12 (mux inputs: 2)
  %64 = add nsw i32 %63, %60 (idx: 17) -> main_signed_add_32_13 (mux inputs: 2)
  %gep = add i32 %gep_int, %ge... (idx: 0) -> main_signed_add_32_15 (mux inputs: 2)
  %gep3 = add i32 %gep_int1, %... (idx: 1) -> main_signed_add_32_16 (mux inputs: 2)
  %34 = add nsw i32 %33, %31 (idx: 2) -> main_signed_add_32_17 (mux inputs: 2)
  %44 = add nsw i32 %43, %40 (idx: 7) -> main_signed_add_32_18 (mux inputs: 2)
State: LEGUP_F_main_BB__1
Binding functional unit type: test_data_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_test_data_local_mem_dual_port_0main_test_data_local_mem_dual_port_1
  %27 = load i32* %26, align 4... (idx: 0)        95                            95                            
  %30 = load i32* %29, align 4... (idx: 1)        95                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_test_data_local_mem_dual_port_0main_test_data_local_mem_dual_port_1
  %27 = load i32* %26, align 4... (idx: 0)        1                             0                             
  %30 = load i32* %29, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %27 = load i32* %26, align 4... (idx: 0) -> main_test_data_local_mem_dual_port_0 (mux inputs: 1)
  %30 = load i32* %29, align 4... (idx: 1) -> main_test_data_local_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_main_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %88 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %88 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
  %89 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %89 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %88 = load i32* getelementpt... (idx: 0)        11                            11                            
  %89 = load i32* getelementpt... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %88 = load i32* getelementpt... (idx: 0)        1                             0                             
  %89 = load i32* getelementpt... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %88 = load i32* getelementpt... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  %89 = load i32* getelementpt... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_0
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_1
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_2
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_3
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_4
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_5
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_6
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_7
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_8
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_9
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_10
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_11
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_15
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_16
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_17
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_18
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_0
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_1
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_2
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_3
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_4
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_5
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_6
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_7
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_8
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_9
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_10
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_11
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_15
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_16
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_17
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_18
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_0
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_1
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_2
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_3
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_4
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_5
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_6
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_7
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_8
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_9
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_10
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_11
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_15
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_16
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_17
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_18
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_0
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_1
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_2
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_3
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_4
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_5
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_6
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_7
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_8
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_9
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_10
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_11
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_15
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_16
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_17
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_18
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_0
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_1
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_2
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_3
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_4
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_5
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_6
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_7
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_8
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_9
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_10
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_11
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_15
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_16
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_17
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_18
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_0
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_1
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_2
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_3
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_4
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_5
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_6
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_7
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_8
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_9
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_10
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_11
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_15
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_16
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_17
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_18
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_0
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_1
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_2
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_3
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_4
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_5
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_6
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_7
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_8
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_9
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_10
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_11
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_15
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_16
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_17
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %66 = add nsw i32 %65, %62 (idx: 0)             -20                           -20                           -20                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -29                           -29                           -9                            -19                           -19                           -19                           -20                           
  %68 = add nsw i32 %67, %64 (idx: 1)             -20                           -20                           -20                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -30                           -30                           -10                           -20                           -20                           -20                           -20                           
  %70 = add nsw i32 %69, %66 (idx: 2)             -20                           -20                           -20                           -19                           -19                           -19                           -19                           -19                           -19                           -20                           -19                           -19                           -29                           -29                           -9                            -19                           -19                           -19                           -20                           
  %72 = add nsw i32 %71, %68 (idx: 3)             -20                           -20                           -20                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -30                           -30                           -10                           -20                           -20                           -20                           -20                           
  %74 = add nsw i32 %73, %70 (idx: 4)             -20                           -20                           -20                           -19                           -19                           -19                           -19                           -19                           -19                           -20                           -19                           -19                           -29                           -29                           -9                            -19                           -19                           -19                           -20                           
  %76 = add nsw i32 %75, %72 (idx: 5)             -20                           -20                           -20                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -30                           -30                           -10                           -20                           -20                           -20                           -20                           
  %77 = add nsw i32 %76, %74 (idx: 6)             -20                           -20                           -20                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -29                           -29                           -9                            -19                           -19                           -19                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %66 = add nsw i32 %65, %62 (idx
  %68 = add nsw i32 %67, %64 (idx
  %70 = add nsw i32 %69, %66 (idx
  %72 = add nsw i32 %71, %68 (idx
  %74 = add nsw i32 %73, %70 (idx
  %76 = add nsw i32 %75, %72 (idx
  %77 = add nsw i32 %76, %74 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %74 = add nsw i32 %73, %70 (idx: 4) -> main_signed_add_32_0 (mux inputs: 4)
  %77 = add nsw i32 %76, %74 (idx: 6) -> main_signed_add_32_1 (mux inputs: 4)
  %66 = add nsw i32 %65, %62 (idx: 0) -> main_signed_add_32_2 (mux inputs: 4)
  %72 = add nsw i32 %71, %68 (idx: 3) -> main_signed_add_32_12 (mux inputs: 4)
  %68 = add nsw i32 %67, %64 (idx: 1) -> main_signed_add_32_13 (mux inputs: 4)
  %76 = add nsw i32 %75, %72 (idx: 5) -> main_signed_add_32_17 (mux inputs: 4)
  %70 = add nsw i32 %69, %66 (idx: 2) -> main_signed_add_32_18 (mux inputs: 4)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_14
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_15
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_16
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_17
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_18
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_19
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_20
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_21
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_24
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %83 = mul nsw i32 %82, %81 (idx: 0)             -10                           -8                            -8                            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -20                           -10                           -10                           -10                           -10                           -10                           -8                            -8                            -10                           -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %83 = mul nsw i32 %82, %81 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %83 = mul nsw i32 %82, %81 (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 4)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %79 = sub nsw i32 %74, %76 (idx: 0)             -9                            -9                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %79 = sub nsw i32 %74, %76 (idx: 0)             1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %79 = sub nsw i32 %74, %76 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 2)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %4, i32* getelemen... (idx: 0)        95                            95                            
  store i32 %5, i32* getelemen... (idx: 1)        95                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %4, i32* getelemen... (idx: 0)        1                             0                             
  store i32 %5, i32* getelemen... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %4, i32* getelemen... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 1)
  store i32 %5, i32* getelemen... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_main_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %92 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %92 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
  %93 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %93 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %92 = load i32* getelementpt... (idx: 0)        11                            11                            
  %93 = load i32* getelementpt... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %92 = load i32* getelementpt... (idx: 0)        1                             0                             
  %93 = load i32* getelementpt... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %92 = load i32* getelementpt... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  %93 = load i32* getelementpt... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_14
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_15
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_16
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_17
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_18
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_19
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_20
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_21
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_24
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %86 = mul nsw i32 %85, %84 (idx: 0)             -10                           -8                            -8                            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -40                           -10                           -10                           -10                           -10                           -10                           -8                            -8                            -10                           -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %86 = mul nsw i32 %85, %84 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %86 = mul nsw i32 %85, %84 (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 6)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %6, i32* getelemen... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %6, i32* getelemen... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %7, i32* getelemen... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %7, i32* getelemen... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %6, i32* getelemen... (idx: 0)        95                            95                            
  store i32 %7, i32* getelemen... (idx: 1)        95                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %6, i32* getelemen... (idx: 0)        1                             0                             
  store i32 %7, i32* getelemen... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %6, i32* getelemen... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 2)
  store i32 %7, i32* getelemen... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_main_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %96 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %96 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
  %97 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %97 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %96 = load i32* getelementpt... (idx: 0)        11                            11                            
  %97 = load i32* getelementpt... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %96 = load i32* getelementpt... (idx: 0)        1                             0                             
  %97 = load i32* getelementpt... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %96 = load i32* getelementpt... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  %97 = load i32* getelementpt... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_0
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_1
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_2
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_3
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_4
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_5
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_6
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_7
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_8
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_9
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_10
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_11
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_12
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_13
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_15
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_16
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_17
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %87 = add nsw i32 %86, %83 (idx: 0)             -40                           -40                           -40                           -19                           -19                           -19                           -19                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -39                           -40                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %87 = add nsw i32 %86, %83 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %87 = add nsw i32 %86, %83 (idx: 0) -> main_signed_add_32_0 (mux inputs: 6)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_14
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_15
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_16
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_17
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_18
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_19
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_20
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_21
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_24
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %90 = mul nsw i32 %89, %88 (idx: 0)             -10                           -8                            -8                            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -60                           -10                           -10                           -10                           -10                           -10                           -8                            -8                            -10                           -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %90 = mul nsw i32 %89, %88 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %90 = mul nsw i32 %89, %88 (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 8)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %8, i32* getelemen... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %8, i32* getelemen... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %9, i32* getelemen... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %9, i32* getelemen... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %8, i32* getelemen... (idx: 0)        85                            85                            
  store i32 %9, i32* getelemen... (idx: 1)        85                            85                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %8, i32* getelemen... (idx: 0)        1                             0                             
  store i32 %9, i32* getelemen... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %8, i32* getelemen... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 3)
  store i32 %9, i32* getelemen... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 3)
State: LEGUP_F_main_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %100 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %100 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %101 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %101 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %100 = load i32* getelementp... (idx: 0)        11                            11                            
  %101 = load i32* getelementp... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %100 = load i32* getelementp... (idx: 0)        1                             0                             
  %101 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %100 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  %101 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_0
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_1
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_2
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_3
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_4
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_5
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_6
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_7
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_8
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_9
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_10
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_11
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_12
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_13
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_15
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_16
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_17
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %91 = add nsw i32 %87, %90 (idx: 0)             -60                           -40                           -40                           -19                           -19                           -19                           -19                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -39                           -40                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %91 = add nsw i32 %87, %90 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %91 = add nsw i32 %87, %90 (idx: 0) -> main_signed_add_32_0 (mux inputs: 8)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_14
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_15
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_16
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_17
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_18
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_19
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_20
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_21
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_24
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %94 = mul nsw i32 %93, %92 (idx: 0)             -10                           -8                            -8                            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -80                           -10                           -10                           -10                           -10                           -10                           -8                            -8                            -10                           -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %94 = mul nsw i32 %93, %92 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %94 = mul nsw i32 %93, %92 (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 10)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %10, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %10, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %11, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %11, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %10, i32* geteleme... (idx: 0)        75                            75                            
  store i32 %11, i32* geteleme... (idx: 1)        75                            75                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %10, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %11, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %10, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 4)
  store i32 %11, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 4)
State: LEGUP_F_main_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %104 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %104 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %105 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %105 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %104 = load i32* getelementp... (idx: 0)        11                            11                            
  %105 = load i32* getelementp... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %104 = load i32* getelementp... (idx: 0)        1                             0                             
  %105 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %104 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  %105 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_0
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_1
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_2
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_3
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_4
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_5
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_6
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_7
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_8
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_9
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_10
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_11
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_12
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_13
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_15
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_16
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_17
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %95 = add nsw i32 %91, %94 (idx: 0)             -80                           -40                           -40                           -19                           -19                           -19                           -19                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -39                           -40                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %95 = add nsw i32 %91, %94 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %95 = add nsw i32 %91, %94 (idx: 0) -> main_signed_add_32_0 (mux inputs: 10)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_14
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_15
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_16
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_17
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_18
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_19
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_20
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_21
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_24
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %98 = mul nsw i32 %97, %96 (idx: 0)             -10                           -8                            -8                            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -100                          -10                           -10                           -10                           -10                           -10                           -8                            -8                            -10                           -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %98 = mul nsw i32 %97, %96 (idx: 0)             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %98 = mul nsw i32 %97, %96 (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 12)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %12, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %12, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %13, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %13, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %12, i32* geteleme... (idx: 0)        65                            65                            
  store i32 %13, i32* geteleme... (idx: 1)        65                            65                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %12, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %13, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %12, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 5)
  store i32 %13, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 5)
State: LEGUP_F_main_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %108 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %108 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %109 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %109 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %108 = load i32* getelementp... (idx: 0)        11                            11                            
  %109 = load i32* getelementp... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %108 = load i32* getelementp... (idx: 0)        1                             0                             
  %109 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %108 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  %109 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_0
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_1
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_2
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_3
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_4
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_5
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_6
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_7
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_8
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_9
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_10
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_11
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_12
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_13
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_15
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_16
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_17
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %99 = add nsw i32 %95, %98 (idx: 0)             -100                          -40                           -40                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -40                           -40                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %99 = add nsw i32 %95, %98 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %99 = add nsw i32 %95, %98 (idx: 0) -> main_signed_add_32_0 (mux inputs: 12)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_24
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %102 = mul nsw i32 %101, %10... (idx: 0)        -10                           -8                            -8                            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -120                          -10                           -10                           -10                           -10                           -10                           -8                            -8                            -10                           -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %102 = mul nsw i32 %101, %10... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %102 = mul nsw i32 %101, %10... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 14)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %14, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %14, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %15, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %15, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %14, i32* geteleme... (idx: 0)        55                            55                            
  store i32 %15, i32* geteleme... (idx: 1)        55                            55                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %14, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %15, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %14, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 6)
  store i32 %15, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 6)
State: LEGUP_F_main_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %112 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %112 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %113 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %113 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %112 = load i32* getelementp... (idx: 0)        11                            11                            
  %113 = load i32* getelementp... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %112 = load i32* getelementp... (idx: 0)        1                             0                             
  %113 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %112 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  %113 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_0
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_1
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_2
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_3
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_4
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_5
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_6
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_7
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_8
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_9
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_10
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_11
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_12
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_13
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_15
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_16
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_17
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_18
  %106 = add i32 %103, %104 can share an output register with another operation already assigned to main_signed_add_32_0
  %106 = add i32 %103, %104 can share an output register with another operation already assigned to main_signed_add_32_1
  %106 = add i32 %103, %104 can share an output register with another operation already assigned to main_signed_add_32_2
  %106 = add i32 %103, %104 can share an output register with another operation already assigned to main_signed_add_32_3
  %106 = add i32 %103, %104 can share an output register with another operation already assigned to main_signed_add_32_4
  %106 = add i32 %103, %104 can share an output register with another operation already assigned to main_signed_add_32_5
  %106 = add i32 %103, %104 can share an output register with another operation already assigned to main_signed_add_32_6
  %106 = add i32 %103, %104 can share an output register with another operation already assigned to main_signed_add_32_7
  %106 = add i32 %103, %104 can share an output register with another operation already assigned to main_signed_add_32_8
  %106 = add i32 %103, %104 can share an output register with another operation already assigned to main_signed_add_32_9
  %106 = add i32 %103, %104 can share an output register with another operation already assigned to main_signed_add_32_10
  %106 = add i32 %103, %104 can share an output register with another operation already assigned to main_signed_add_32_11
  %106 = add i32 %103, %104 can share an output register with another operation already assigned to main_signed_add_32_12
  %106 = add i32 %103, %104 can share an output register with another operation already assigned to main_signed_add_32_13
  %106 = add i32 %103, %104 can share an output register with another operation already assigned to main_signed_add_32_15
  %106 = add i32 %103, %104 can share an output register with another operation already assigned to main_signed_add_32_16
  %106 = add i32 %103, %104 can share an output register with another operation already assigned to main_signed_add_32_17
  %106 = add i32 %103, %104 can share an output register with another operation already assigned to main_signed_add_32_18
  %107 = add i32 %106, %105 can share an output register with another operation already assigned to main_signed_add_32_0
  %107 = add i32 %106, %105 can share an output register with another operation already assigned to main_signed_add_32_1
  %107 = add i32 %106, %105 can share an output register with another operation already assigned to main_signed_add_32_2
  %107 = add i32 %106, %105 can share an output register with another operation already assigned to main_signed_add_32_3
  %107 = add i32 %106, %105 can share an output register with another operation already assigned to main_signed_add_32_4
  %107 = add i32 %106, %105 can share an output register with another operation already assigned to main_signed_add_32_5
  %107 = add i32 %106, %105 can share an output register with another operation already assigned to main_signed_add_32_6
  %107 = add i32 %106, %105 can share an output register with another operation already assigned to main_signed_add_32_7
  %107 = add i32 %106, %105 can share an output register with another operation already assigned to main_signed_add_32_8
  %107 = add i32 %106, %105 can share an output register with another operation already assigned to main_signed_add_32_9
  %107 = add i32 %106, %105 can share an output register with another operation already assigned to main_signed_add_32_10
  %107 = add i32 %106, %105 can share an output register with another operation already assigned to main_signed_add_32_11
  %107 = add i32 %106, %105 can share an output register with another operation already assigned to main_signed_add_32_12
  %107 = add i32 %106, %105 can share an output register with another operation already assigned to main_signed_add_32_13
  %107 = add i32 %106, %105 can share an output register with another operation already assigned to main_signed_add_32_15
  %107 = add i32 %106, %105 can share an output register with another operation already assigned to main_signed_add_32_16
  %107 = add i32 %106, %105 can share an output register with another operation already assigned to main_signed_add_32_17
  %107 = add i32 %106, %105 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %103 = add nsw i32 %99, %102 (idx: 0)           -120                          -40                           -40                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -40                           -40                           
  %106 = add i32 %103, %104 (idx: 1)              -120                          -40                           -40                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -39                           -40                           
  %107 = add i32 %106, %105 (idx: 2)              -120                          -40                           -40                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -39                           -40                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %103 = add nsw i32 %99, %102 (idx
  %106 = add i32 %103, %104 (idx
  %107 = add i32 %106, %105 (idx: 2)              1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %107 = add i32 %106, %105 (idx: 2) -> main_signed_add_32_0 (mux inputs: 14)
  %103 = add nsw i32 %99, %102 (idx: 0) -> main_signed_add_32_17 (mux inputs: 6)
  %106 = add i32 %103, %104 (idx: 1) -> main_signed_add_32_18 (mux inputs: 6)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %16, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %16, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %17, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %17, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %16, i32* geteleme... (idx: 0)        45                            45                            
  store i32 %17, i32* geteleme... (idx: 1)        45                            45                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %16, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %17, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %16, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 7)
  store i32 %17, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 7)
State: LEGUP_F_main_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %116 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %116 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %117 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %117 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %116 = load i32* getelementp... (idx: 0)        11                            11                            
  %117 = load i32* getelementp... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %116 = load i32* getelementp... (idx: 0)        1                             0                             
  %117 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %116 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  %117 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %110 = add i32 %107, %108 can share an output register with another operation already assigned to main_signed_add_32_0
  %110 = add i32 %107, %108 can share an output register with another operation already assigned to main_signed_add_32_1
  %110 = add i32 %107, %108 can share an output register with another operation already assigned to main_signed_add_32_2
  %110 = add i32 %107, %108 can share an output register with another operation already assigned to main_signed_add_32_3
  %110 = add i32 %107, %108 can share an output register with another operation already assigned to main_signed_add_32_4
  %110 = add i32 %107, %108 can share an output register with another operation already assigned to main_signed_add_32_5
  %110 = add i32 %107, %108 can share an output register with another operation already assigned to main_signed_add_32_6
  %110 = add i32 %107, %108 can share an output register with another operation already assigned to main_signed_add_32_7
  %110 = add i32 %107, %108 can share an output register with another operation already assigned to main_signed_add_32_8
  %110 = add i32 %107, %108 can share an output register with another operation already assigned to main_signed_add_32_9
  %110 = add i32 %107, %108 can share an output register with another operation already assigned to main_signed_add_32_10
  %110 = add i32 %107, %108 can share an output register with another operation already assigned to main_signed_add_32_11
  %110 = add i32 %107, %108 can share an output register with another operation already assigned to main_signed_add_32_12
  %110 = add i32 %107, %108 can share an output register with another operation already assigned to main_signed_add_32_13
  %110 = add i32 %107, %108 can share an output register with another operation already assigned to main_signed_add_32_15
  %110 = add i32 %107, %108 can share an output register with another operation already assigned to main_signed_add_32_16
  %110 = add i32 %107, %108 can share an output register with another operation already assigned to main_signed_add_32_17
  %110 = add i32 %107, %108 can share an output register with another operation already assigned to main_signed_add_32_18
  %111 = add i32 %110, %109 can share an output register with another operation already assigned to main_signed_add_32_0
  %111 = add i32 %110, %109 can share an output register with another operation already assigned to main_signed_add_32_1
  %111 = add i32 %110, %109 can share an output register with another operation already assigned to main_signed_add_32_2
  %111 = add i32 %110, %109 can share an output register with another operation already assigned to main_signed_add_32_3
  %111 = add i32 %110, %109 can share an output register with another operation already assigned to main_signed_add_32_4
  %111 = add i32 %110, %109 can share an output register with another operation already assigned to main_signed_add_32_5
  %111 = add i32 %110, %109 can share an output register with another operation already assigned to main_signed_add_32_6
  %111 = add i32 %110, %109 can share an output register with another operation already assigned to main_signed_add_32_7
  %111 = add i32 %110, %109 can share an output register with another operation already assigned to main_signed_add_32_8
  %111 = add i32 %110, %109 can share an output register with another operation already assigned to main_signed_add_32_9
  %111 = add i32 %110, %109 can share an output register with another operation already assigned to main_signed_add_32_10
  %111 = add i32 %110, %109 can share an output register with another operation already assigned to main_signed_add_32_11
  %111 = add i32 %110, %109 can share an output register with another operation already assigned to main_signed_add_32_12
  %111 = add i32 %110, %109 can share an output register with another operation already assigned to main_signed_add_32_13
  %111 = add i32 %110, %109 can share an output register with another operation already assigned to main_signed_add_32_15
  %111 = add i32 %110, %109 can share an output register with another operation already assigned to main_signed_add_32_16
  %111 = add i32 %110, %109 can share an output register with another operation already assigned to main_signed_add_32_17
  %111 = add i32 %110, %109 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %110 = add i32 %107, %108 (idx: 0)              -140                          -40                           -40                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -59                           -60                           
  %111 = add i32 %110, %109 (idx: 1)              -140                          -40                           -40                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -59                           -60                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %110 = add i32 %107, %108 (idx
  %111 = add i32 %110, %109 (idx: 1)              0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %110 = add i32 %107, %108 (idx: 0) -> main_signed_add_32_0 (mux inputs: 16)
  %111 = add i32 %110, %109 (idx: 1) -> main_signed_add_32_18 (mux inputs: 8)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %18, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %18, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %19, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %19, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %18, i32* geteleme... (idx: 0)        35                            35                            
  store i32 %19, i32* geteleme... (idx: 1)        35                            35                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %18, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %19, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %18, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 8)
  store i32 %19, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 8)
State: LEGUP_F_main_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %120 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %120 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %121 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %121 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %120 = load i32* getelementp... (idx: 0)        11                            11                            
  %121 = load i32* getelementp... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %120 = load i32* getelementp... (idx: 0)        1                             0                             
  %121 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %120 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  %121 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %114 = add i32 %111, %112 can share an output register with another operation already assigned to main_signed_add_32_0
  %114 = add i32 %111, %112 can share an output register with another operation already assigned to main_signed_add_32_1
  %114 = add i32 %111, %112 can share an output register with another operation already assigned to main_signed_add_32_2
  %114 = add i32 %111, %112 can share an output register with another operation already assigned to main_signed_add_32_3
  %114 = add i32 %111, %112 can share an output register with another operation already assigned to main_signed_add_32_4
  %114 = add i32 %111, %112 can share an output register with another operation already assigned to main_signed_add_32_5
  %114 = add i32 %111, %112 can share an output register with another operation already assigned to main_signed_add_32_6
  %114 = add i32 %111, %112 can share an output register with another operation already assigned to main_signed_add_32_7
  %114 = add i32 %111, %112 can share an output register with another operation already assigned to main_signed_add_32_8
  %114 = add i32 %111, %112 can share an output register with another operation already assigned to main_signed_add_32_9
  %114 = add i32 %111, %112 can share an output register with another operation already assigned to main_signed_add_32_10
  %114 = add i32 %111, %112 can share an output register with another operation already assigned to main_signed_add_32_11
  %114 = add i32 %111, %112 can share an output register with another operation already assigned to main_signed_add_32_12
  %114 = add i32 %111, %112 can share an output register with another operation already assigned to main_signed_add_32_13
  %114 = add i32 %111, %112 can share an output register with another operation already assigned to main_signed_add_32_15
  %114 = add i32 %111, %112 can share an output register with another operation already assigned to main_signed_add_32_16
  %114 = add i32 %111, %112 can share an output register with another operation already assigned to main_signed_add_32_17
  %114 = add i32 %111, %112 can share an output register with another operation already assigned to main_signed_add_32_18
  %115 = add i32 %114, %113 can share an output register with another operation already assigned to main_signed_add_32_0
  %115 = add i32 %114, %113 can share an output register with another operation already assigned to main_signed_add_32_1
  %115 = add i32 %114, %113 can share an output register with another operation already assigned to main_signed_add_32_2
  %115 = add i32 %114, %113 can share an output register with another operation already assigned to main_signed_add_32_3
  %115 = add i32 %114, %113 can share an output register with another operation already assigned to main_signed_add_32_4
  %115 = add i32 %114, %113 can share an output register with another operation already assigned to main_signed_add_32_5
  %115 = add i32 %114, %113 can share an output register with another operation already assigned to main_signed_add_32_6
  %115 = add i32 %114, %113 can share an output register with another operation already assigned to main_signed_add_32_7
  %115 = add i32 %114, %113 can share an output register with another operation already assigned to main_signed_add_32_8
  %115 = add i32 %114, %113 can share an output register with another operation already assigned to main_signed_add_32_9
  %115 = add i32 %114, %113 can share an output register with another operation already assigned to main_signed_add_32_10
  %115 = add i32 %114, %113 can share an output register with another operation already assigned to main_signed_add_32_11
  %115 = add i32 %114, %113 can share an output register with another operation already assigned to main_signed_add_32_12
  %115 = add i32 %114, %113 can share an output register with another operation already assigned to main_signed_add_32_13
  %115 = add i32 %114, %113 can share an output register with another operation already assigned to main_signed_add_32_15
  %115 = add i32 %114, %113 can share an output register with another operation already assigned to main_signed_add_32_16
  %115 = add i32 %114, %113 can share an output register with another operation already assigned to main_signed_add_32_17
  %115 = add i32 %114, %113 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %114 = add i32 %111, %112 (idx: 0)              -160                          -40                           -40                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -59                           -80                           
  %115 = add i32 %114, %113 (idx: 1)              -160                          -40                           -40                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -59                           -80                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %114 = add i32 %111, %112 (idx
  %115 = add i32 %114, %113 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %114 = add i32 %111, %112 (idx: 0) -> main_signed_add_32_0 (mux inputs: 18)
  %115 = add i32 %114, %113 (idx: 1) -> main_signed_add_32_18 (mux inputs: 10)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %20, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %20, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %21, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %21, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %20, i32* geteleme... (idx: 0)        25                            25                            
  store i32 %21, i32* geteleme... (idx: 1)        25                            25                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %20, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %21, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %20, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 9)
  store i32 %21, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 9)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %118 = add i32 %115, %116 can share an output register with another operation already assigned to main_signed_add_32_0
  %118 = add i32 %115, %116 can share an output register with another operation already assigned to main_signed_add_32_1
  %118 = add i32 %115, %116 can share an output register with another operation already assigned to main_signed_add_32_2
  %118 = add i32 %115, %116 can share an output register with another operation already assigned to main_signed_add_32_3
  %118 = add i32 %115, %116 can share an output register with another operation already assigned to main_signed_add_32_4
  %118 = add i32 %115, %116 can share an output register with another operation already assigned to main_signed_add_32_5
  %118 = add i32 %115, %116 can share an output register with another operation already assigned to main_signed_add_32_6
  %118 = add i32 %115, %116 can share an output register with another operation already assigned to main_signed_add_32_7
  %118 = add i32 %115, %116 can share an output register with another operation already assigned to main_signed_add_32_8
  %118 = add i32 %115, %116 can share an output register with another operation already assigned to main_signed_add_32_9
  %118 = add i32 %115, %116 can share an output register with another operation already assigned to main_signed_add_32_10
  %118 = add i32 %115, %116 can share an output register with another operation already assigned to main_signed_add_32_11
  %118 = add i32 %115, %116 can share an output register with another operation already assigned to main_signed_add_32_12
  %118 = add i32 %115, %116 can share an output register with another operation already assigned to main_signed_add_32_13
  %118 = add i32 %115, %116 can share an output register with another operation already assigned to main_signed_add_32_15
  %118 = add i32 %115, %116 can share an output register with another operation already assigned to main_signed_add_32_16
  %118 = add i32 %115, %116 can share an output register with another operation already assigned to main_signed_add_32_17
  %118 = add i32 %115, %116 can share an output register with another operation already assigned to main_signed_add_32_18
  %119 = add i32 %118, %117 can share an output register with another operation already assigned to main_signed_add_32_0
  %119 = add i32 %118, %117 can share an output register with another operation already assigned to main_signed_add_32_1
  %119 = add i32 %118, %117 can share an output register with another operation already assigned to main_signed_add_32_2
  %119 = add i32 %118, %117 can share an output register with another operation already assigned to main_signed_add_32_3
  %119 = add i32 %118, %117 can share an output register with another operation already assigned to main_signed_add_32_4
  %119 = add i32 %118, %117 can share an output register with another operation already assigned to main_signed_add_32_5
  %119 = add i32 %118, %117 can share an output register with another operation already assigned to main_signed_add_32_6
  %119 = add i32 %118, %117 can share an output register with another operation already assigned to main_signed_add_32_7
  %119 = add i32 %118, %117 can share an output register with another operation already assigned to main_signed_add_32_8
  %119 = add i32 %118, %117 can share an output register with another operation already assigned to main_signed_add_32_9
  %119 = add i32 %118, %117 can share an output register with another operation already assigned to main_signed_add_32_10
  %119 = add i32 %118, %117 can share an output register with another operation already assigned to main_signed_add_32_11
  %119 = add i32 %118, %117 can share an output register with another operation already assigned to main_signed_add_32_12
  %119 = add i32 %118, %117 can share an output register with another operation already assigned to main_signed_add_32_13
  %119 = add i32 %118, %117 can share an output register with another operation already assigned to main_signed_add_32_15
  %119 = add i32 %118, %117 can share an output register with another operation already assigned to main_signed_add_32_16
  %119 = add i32 %118, %117 can share an output register with another operation already assigned to main_signed_add_32_17
  %119 = add i32 %118, %117 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %118 = add i32 %115, %116 (idx: 0)              -180                          -40                           -40                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -59                           -100                          
  %119 = add i32 %118, %117 (idx: 1)              -180                          -40                           -40                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -59                           -100                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %118 = add i32 %115, %116 (idx
  %119 = add i32 %118, %117 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %118 = add i32 %115, %116 (idx: 0) -> main_signed_add_32_0 (mux inputs: 20)
  %119 = add i32 %118, %117 (idx: 1) -> main_signed_add_32_18 (mux inputs: 12)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %22, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %22, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %23, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %23, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %22, i32* geteleme... (idx: 0)        15                            15                            
  store i32 %23, i32* geteleme... (idx: 1)        15                            15                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %22, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %23, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %22, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 10)
  store i32 %23, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 10)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %122 = add i32 %119, %120 can share an output register with another operation already assigned to main_signed_add_32_0
  %122 = add i32 %119, %120 can share an output register with another operation already assigned to main_signed_add_32_1
  %122 = add i32 %119, %120 can share an output register with another operation already assigned to main_signed_add_32_2
  %122 = add i32 %119, %120 can share an output register with another operation already assigned to main_signed_add_32_3
  %122 = add i32 %119, %120 can share an output register with another operation already assigned to main_signed_add_32_4
  %122 = add i32 %119, %120 can share an output register with another operation already assigned to main_signed_add_32_5
  %122 = add i32 %119, %120 can share an output register with another operation already assigned to main_signed_add_32_6
  %122 = add i32 %119, %120 can share an output register with another operation already assigned to main_signed_add_32_7
  %122 = add i32 %119, %120 can share an output register with another operation already assigned to main_signed_add_32_8
  %122 = add i32 %119, %120 can share an output register with another operation already assigned to main_signed_add_32_9
  %122 = add i32 %119, %120 can share an output register with another operation already assigned to main_signed_add_32_10
  %122 = add i32 %119, %120 can share an output register with another operation already assigned to main_signed_add_32_11
  %122 = add i32 %119, %120 can share an output register with another operation already assigned to main_signed_add_32_12
  %122 = add i32 %119, %120 can share an output register with another operation already assigned to main_signed_add_32_13
  %122 = add i32 %119, %120 can share an output register with another operation already assigned to main_signed_add_32_15
  %122 = add i32 %119, %120 can share an output register with another operation already assigned to main_signed_add_32_16
  %122 = add i32 %119, %120 can share an output register with another operation already assigned to main_signed_add_32_17
  %122 = add i32 %119, %120 can share an output register with another operation already assigned to main_signed_add_32_18
  %123 = add i32 %122, %121 can share an output register with another operation already assigned to main_signed_add_32_0
  %123 = add i32 %122, %121 can share an output register with another operation already assigned to main_signed_add_32_1
  %123 = add i32 %122, %121 can share an output register with another operation already assigned to main_signed_add_32_2
  %123 = add i32 %122, %121 can share an output register with another operation already assigned to main_signed_add_32_3
  %123 = add i32 %122, %121 can share an output register with another operation already assigned to main_signed_add_32_4
  %123 = add i32 %122, %121 can share an output register with another operation already assigned to main_signed_add_32_5
  %123 = add i32 %122, %121 can share an output register with another operation already assigned to main_signed_add_32_6
  %123 = add i32 %122, %121 can share an output register with another operation already assigned to main_signed_add_32_7
  %123 = add i32 %122, %121 can share an output register with another operation already assigned to main_signed_add_32_8
  %123 = add i32 %122, %121 can share an output register with another operation already assigned to main_signed_add_32_9
  %123 = add i32 %122, %121 can share an output register with another operation already assigned to main_signed_add_32_10
  %123 = add i32 %122, %121 can share an output register with another operation already assigned to main_signed_add_32_11
  %123 = add i32 %122, %121 can share an output register with another operation already assigned to main_signed_add_32_12
  %123 = add i32 %122, %121 can share an output register with another operation already assigned to main_signed_add_32_13
  %123 = add i32 %122, %121 can share an output register with another operation already assigned to main_signed_add_32_15
  %123 = add i32 %122, %121 can share an output register with another operation already assigned to main_signed_add_32_16
  %123 = add i32 %122, %121 can share an output register with another operation already assigned to main_signed_add_32_17
  %123 = add i32 %122, %121 can share an output register with another operation already assigned to main_signed_add_32_18
  %128 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_0
  %128 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_1
  %128 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_2
  %128 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_3
  %128 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_4
  %128 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_5
  %128 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_6
  %128 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_7
  %128 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_8
  %128 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_9
  %128 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_10
  %128 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_11
  %128 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_12
  %128 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_13
  %128 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_15
  %128 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_16
  %128 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_17
  %128 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %122 = add i32 %119, %120 (idx: 0)              -200                          -40                           -40                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -59                           -120                          
  %123 = add i32 %122, %121 (idx: 1)              -200                          -40                           -40                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -59                           -120                          
  %128 = add nsw i32 %127, %12... (idx: 2)        -200                          -40                           -40                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -60                           -120                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %122 = add i32 %119, %120 (idx
  %123 = add i32 %122, %121 (idx
  %128 = add nsw i32 %127, %12... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %122 = add i32 %119, %120 (idx: 0) -> main_signed_add_32_0 (mux inputs: 22)
  %128 = add nsw i32 %127, %12... (idx: 2) -> main_signed_add_32_17 (mux inputs: 8)
  %123 = add i32 %122, %121 (idx: 1) -> main_signed_add_32_18 (mux inputs: 14)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %129 = sub nsw i32 %78, %128 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %131 = sub nsw i32 0, %129 can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %129 = sub nsw i32 %78, %128 (idx: 0)           -19                           -9                            
  %131 = sub nsw i32 0, %129 (idx: 1)             -15                           -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %129 = sub nsw i32 %78, %128 (idx: 0)           1                             0                             
  %131 = sub nsw i32 0, %129 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %129 = sub nsw i32 %78, %128 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 4)
  %131 = sub nsw i32 0, %129 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 1)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %24, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %24, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %25, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %25, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %24, i32* geteleme... (idx: 0)        5                             5                             
  store i32 %25, i32* geteleme... (idx: 1)        5                             5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %24, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %25, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %24, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 11)
  store i32 %25, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 11)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %27, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %27, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %30, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %30, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %27, i32* geteleme... (idx: 0)        -5                            -5                            
  store i32 %30, i32* geteleme... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %27, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %30, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %27, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  store i32 %30, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB__134
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %140 = add nsw i32 %mil.01.i... (idx: 0)        -224                          -45                           -44                           -24                           -25                           -23                           -22                           -23                           -23                           -24                           -24                           -23                           -43                           -43                           -3                            -23                           -24                           -85                           -144                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %140 = add nsw i32 %mil.01.i... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %140 = add nsw i32 %mil.01.i... (idx: 0) -> main_signed_add_32_0 (mux inputs: 23)
State: LEGUP_F_main_BB__134
Binding functional unit type: decis_levl_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_decis_levl_local_mem_dual_port_0
  %136 = load i32* %135, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_decis_levl_local_mem_dual_port_0
  %136 = load i32* %135, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %136 = load i32* %135, align... (idx: 0) -> main_decis_levl_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB__134
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep6 = add i32 %gep_int4, %... (idx: 0)        -230                          -40                           -40                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -80                           -140                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep6 = add i32 %gep_int4, %... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep6 = add i32 %gep_int4, %... (idx: 0) -> main_signed_add_32_0 (mux inputs: 25)
State: LEGUP_F_main_BB__134
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %137 = mul nsw i32 %136, %de... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %137 = mul nsw i32 %136, %de... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %137 = mul nsw i32 %136, %de... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %137 = mul nsw i32 %136, %de... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %137 = mul nsw i32 %136, %de... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %137 = mul nsw i32 %136, %de... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %137 = mul nsw i32 %136, %de... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %137 = mul nsw i32 %136, %de... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %137 = mul nsw i32 %136, %de... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %137 = mul nsw i32 %136, %de... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %137 = mul nsw i32 %136, %de... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %137 = mul nsw i32 %136, %de... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %137 = mul nsw i32 %136, %de... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %137 = mul nsw i32 %136, %de... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %137 = mul nsw i32 %136, %de... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %137 = mul nsw i32 %136, %de... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %137 = mul nsw i32 %136, %de... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %137 = mul nsw i32 %136, %de... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %137 = mul nsw i32 %136, %de... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %137 = mul nsw i32 %136, %de... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %137 = mul nsw i32 %136, %de... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %137 = mul nsw i32 %136, %de... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %137 = mul nsw i32 %136, %de... can share an output register with another operation already assigned to main_signed_multiply_32_24
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %137 = mul nsw i32 %136, %de... (idx: 0)        -10                           -8                            -8                            -9                            -9                            -10                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -139                          -9                            -9                            -9                            -9                            -9                            -8                            -8                            -9                            -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %137 = mul nsw i32 %136, %de... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %137 = mul nsw i32 %136, %de... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 16)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %295 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_0
  %295 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_1
  %295 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_2
  %295 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_3
  %295 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_4
  %295 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_5
  %295 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_6
  %295 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_7
  %295 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_8
  %295 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_9
  %295 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_10
  %295 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_11
  %295 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_12
  %295 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_13
  %295 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_15
  %295 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_16
  %295 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_17
  %295 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %295 = add nsw i32 %i.02.i, ... (idx: 0)        -244                          -35                           -34                           -14                           -14                           -13                           -12                           -13                           -13                           -14                           -14                           -13                           -33                           -33                           -3                            -13                           -14                           -74                           -135                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %295 = add nsw i32 %i.02.i, ... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %295 = add nsw i32 %i.02.i, ... (idx: 0) -> main_signed_add_32_0 (mux inputs: 26)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_divide_32
Weight matrix for operation/function unit matching:
                                                  main_signed_divide_32_0       
  %293 = sdiv i32 %i.02.i, 2 (idx: 0)             95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_divide_32_0       
  %293 = sdiv i32 %i.02.i, 2 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %293 = sdiv i32 %i.02.i, 2 (idx: 0) -> main_signed_divide_32_0 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %146 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %146 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %146 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %146 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %146 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %146 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %146 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %146 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %146 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %146 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %146 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %146 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %146 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %146 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %146 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %146 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %146 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %146 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %146 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %146 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %146 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %146 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %146 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %171 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %171 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %171 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %171 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %171 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %171 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %171 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %171 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %171 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %171 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %171 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %171 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %171 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %171 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %171 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %171 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %171 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %171 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %171 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %171 = mul nsw i32 %al2.0, 1... hey can share an input with another operation already assigned to main_signed_multiply_32_19
  %171 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %171 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %171 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %171 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %176 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %176 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %176 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %176 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %176 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %176 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %176 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %176 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %176 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %176 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %176 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %176 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %176 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %176 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %176 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %176 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %176 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %176 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %176 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %176 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %176 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %176 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %176 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %231 = mul nsw i32 %230, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %231 = mul nsw i32 %230, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %231 = mul nsw i32 %230, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %231 = mul nsw i32 %230, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %231 = mul nsw i32 %230, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %231 = mul nsw i32 %230, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %231 = mul nsw i32 %230, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %231 = mul nsw i32 %230, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %231 = mul nsw i32 %230, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %231 = mul nsw i32 %230, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %231 = mul nsw i32 %230, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %231 = mul nsw i32 %230, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %231 = mul nsw i32 %230, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %231 = mul nsw i32 %230, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %231 = mul nsw i32 %230, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %231 = mul nsw i32 %230, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %231 = mul nsw i32 %230, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %231 = mul nsw i32 %230, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %231 = mul nsw i32 %230, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %231 = mul nsw i32 %230, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %231 = mul nsw i32 %230, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %231 = mul nsw i32 %230, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %231 = mul nsw i32 %230, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %238 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %238 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %238 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %238 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %238 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %238 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %238 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %238 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %238 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %238 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %238 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %238 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %238 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %238 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %238 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %238 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %238 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %238 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %238 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %238 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %238 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %238 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %238 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %251 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %251 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %251 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %251 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %251 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %251 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %251 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %251 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %251 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %251 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %251 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %251 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %251 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %251 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %251 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %251 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %251 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %251 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %251 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %251 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %251 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %251 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %251 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %276 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %276 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %276 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %276 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %276 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %276 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %276 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %276 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %276 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %276 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %276 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %276 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %276 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %276 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %276 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %276 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %276 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %276 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %276 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %276 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %276 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %276 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %276 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %281 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %281 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %281 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %281 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %281 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %281 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %281 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %281 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %281 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %281 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %281 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %281 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %281 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %281 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %281 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %281 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %281 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %281 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %281 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %281 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %281 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %281 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %281 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_24
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %146 = mul nsw i32 %nbl.0, 1... (idx
  %171 = mul nsw i32 %al2.0, 1... (idx
  %176 = mul nsw i32 %al1.0, 2... (idx
  %231 = mul nsw i32 %230, %ah... (idx: 3)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -160                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %238 = mul nsw i32 %deth.0, ... (idx
  %251 = mul nsw i32 %nbh.0, 1... (idx
  %276 = mul nsw i32 %ah2.0, 1... (idx
  %281 = mul nsw i32 %ah1.0, 2... (idx
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %146 = mul nsw i32 %nbl.0, 1... (idx
  %171 = mul nsw i32 %al2.0, 1... (idx
  %176 = mul nsw i32 %al1.0, 2... (idx
  %231 = mul nsw i32 %230, %ah... (idx
  %238 = mul nsw i32 %deth.0, ... (idx
  %251 = mul nsw i32 %nbh.0, 1... (idx
  %276 = mul nsw i32 %ah2.0, 1... (idx
  %281 = mul nsw i32 %ah1.0, 2... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %251 = mul nsw i32 %nbh.0, 1... (idx: 5) -> main_signed_multiply_32_0 (mux inputs: 2)
  %176 = mul nsw i32 %al1.0, 2... (idx: 2) -> main_signed_multiply_32_1 (mux inputs: 2)
  %276 = mul nsw i32 %ah2.0, 1... (idx: 6) -> main_signed_multiply_32_2 (mux inputs: 2)
  %146 = mul nsw i32 %nbl.0, 1... (idx: 0) -> main_signed_multiply_32_6 (mux inputs: 2)
  %281 = mul nsw i32 %ah1.0, 2... (idx: 7) -> main_signed_multiply_32_8 (mux inputs: 2)
  %231 = mul nsw i32 %230, %ah... (idx: 3) -> main_signed_multiply_32_19 (mux inputs: 18)
  %238 = mul nsw i32 %deth.0, ... (idx: 4) -> main_signed_multiply_32_27 (mux inputs: 1)
  %171 = mul nsw i32 %al2.0, 1... (idx: 1) -> main_signed_multiply_32_28 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %165 = sub nsw i32 0, %162 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %165 = sub nsw i32 0, %162 can share an output register with another operation already assigned to main_signed_subtract_32_1
  %270 = sub nsw i32 0, %267 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %270 = sub nsw i32 0, %267 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %165 = sub nsw i32 0, %162 (idx: 0)             -35                           -5                            
  %270 = sub nsw i32 0, %267 (idx: 1)             -35                           -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %165 = sub nsw i32 0, %162 (idx: 0)             1                             0                             
  %270 = sub nsw i32 0, %267 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %165 = sub nsw i32 0, %162 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 5)
  %270 = sub nsw i32 0, %267 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 2)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %ril.0.i.i = load i32* %ril.... can share an output register with another operation already assigned to main_mem_dual_port_0
  %ril.0.i.i = load i32* %ril.... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %ril.0.i.i = load i32* %ril.... (idx: 0)        5                             5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %ril.0.i.i = load i32* %ril.... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %ril.0.i.i = load i32* %ril.... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_18
  %180 = add nsw i32 %177, 192 can share an output register with another operation already assigned to main_signed_add_32_0
  %180 = add nsw i32 %177, 192 can share an output register with another operation already assigned to main_signed_add_32_1
  %180 = add nsw i32 %177, 192 can share an output register with another operation already assigned to main_signed_add_32_2
  %180 = add nsw i32 %177, 192 can share an output register with another operation already assigned to main_signed_add_32_3
  %180 = add nsw i32 %177, 192 can share an output register with another operation already assigned to main_signed_add_32_4
  %180 = add nsw i32 %177, 192 can share an output register with another operation already assigned to main_signed_add_32_5
  %180 = add nsw i32 %177, 192 can share an output register with another operation already assigned to main_signed_add_32_6
  %180 = add nsw i32 %177, 192 can share an output register with another operation already assigned to main_signed_add_32_7
  %180 = add nsw i32 %177, 192 can share an output register with another operation already assigned to main_signed_add_32_8
  %180 = add nsw i32 %177, 192 can share an output register with another operation already assigned to main_signed_add_32_9
  %180 = add nsw i32 %177, 192 can share an output register with another operation already assigned to main_signed_add_32_10
  %180 = add nsw i32 %177, 192 can share an output register with another operation already assigned to main_signed_add_32_11
  %180 = add nsw i32 %177, 192 can share an output register with another operation already assigned to main_signed_add_32_12
  %180 = add nsw i32 %177, 192 can share an output register with another operation already assigned to main_signed_add_32_13
  %180 = add nsw i32 %177, 192 can share an output register with another operation already assigned to main_signed_add_32_15
  %180 = add nsw i32 %177, 192 can share an output register with another operation already assigned to main_signed_add_32_16
  %180 = add nsw i32 %177, 192 can share an output register with another operation already assigned to main_signed_add_32_17
  %180 = add nsw i32 %177, 192 can share an output register with another operation already assigned to main_signed_add_32_18
  %285 = add nsw i32 %282, 192 can share an output register with another operation already assigned to main_signed_add_32_0
  %285 = add nsw i32 %282, 192 can share an output register with another operation already assigned to main_signed_add_32_1
  %285 = add nsw i32 %282, 192 can share an output register with another operation already assigned to main_signed_add_32_2
  %285 = add nsw i32 %282, 192 can share an output register with another operation already assigned to main_signed_add_32_3
  %285 = add nsw i32 %282, 192 can share an output register with another operation already assigned to main_signed_add_32_4
  %285 = add nsw i32 %282, 192 can share an output register with another operation already assigned to main_signed_add_32_5
  %285 = add nsw i32 %282, 192 can share an output register with another operation already assigned to main_signed_add_32_6
  %285 = add nsw i32 %282, 192 can share an output register with another operation already assigned to main_signed_add_32_7
  %285 = add nsw i32 %282, 192 can share an output register with another operation already assigned to main_signed_add_32_8
  %285 = add nsw i32 %282, 192 can share an output register with another operation already assigned to main_signed_add_32_9
  %285 = add nsw i32 %282, 192 can share an output register with another operation already assigned to main_signed_add_32_10
  %285 = add nsw i32 %282, 192 can share an output register with another operation already assigned to main_signed_add_32_11
  %285 = add nsw i32 %282, 192 can share an output register with another operation already assigned to main_signed_add_32_12
  %285 = add nsw i32 %282, 192 can share an output register with another operation already assigned to main_signed_add_32_13
  %285 = add nsw i32 %282, 192 can share an output register with another operation already assigned to main_signed_add_32_15
  %285 = add nsw i32 %282, 192 can share an output register with another operation already assigned to main_signed_add_32_16
  %285 = add nsw i32 %282, 192 can share an output register with another operation already assigned to main_signed_add_32_17
  %285 = add nsw i32 %282, 192 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep9 = add i32 %gep_int7, %... (idx: 0)        -260                          -40                           -40                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -80                           -140                          
  %180 = add nsw i32 %177, 192 (idx: 1)           -255                          -34                           -34                           -14                           -14                           -14                           -14                           -14                           -14                           -14                           -14                           -14                           -34                           -34                           -4                            -14                           -14                           -74                           -135                          
  %285 = add nsw i32 %282, 192 (idx: 2)           -255                          -34                           -34                           -14                           -14                           -14                           -14                           -14                           -14                           -14                           -14                           -14                           -34                           -34                           -4                            -14                           -14                           -74                           -135                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep9 = add i32 %gep_int7, %... (idx
  %180 = add nsw i32 %177, 192 (idx
  %285 = add nsw i32 %282, 192 (idx: 2)           1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %285 = add nsw i32 %282, 192 (idx: 2) -> main_signed_add_32_0 (mux inputs: 27)
  %gep9 = add i32 %gep_int7, %... (idx: 0) -> main_signed_add_32_17 (mux inputs: 10)
  %180 = add nsw i32 %177, 192 (idx: 1) -> main_signed_add_32_18 (mux inputs: 15)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: qq4_code4_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_qq4_code4_table_local_mem_dual_port_0
  %143 = load i32* %142, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_qq4_code4_table_local_mem_dual_port_0
  %143 = load i32* %142, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %143 = load i32* %142, align... (idx: 0) -> main_qq4_code4_table_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_18
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep12 = add i32 %gep_int10,... (idx: 0)        -270                          -40                           -40                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -100                          -150                          
  %gep15 = add i32 %gep_int13,... (idx: 1)        -270                          -40                           -40                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -100                          -150                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep12 = add i32 %gep_int10,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep15 = add i32 %gep_int13,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep12 = add i32 %gep_int10,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 29)
  %gep15 = add i32 %gep_int13,... (idx: 1) -> main_signed_add_32_18 (mux inputs: 17)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: wl_code_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_wl_code_table_local_mem_dual_port_0
  %149 = load i32* %148, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_wl_code_table_local_mem_dual_port_0
  %149 = load i32* %148, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %149 = load i32* %148, align... (idx: 0) -> main_wl_code_table_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %150 = add nsw i32 %147, %14... can share an output register with another operation already assigned to main_signed_add_32_0
  %150 = add nsw i32 %147, %14... can share an output register with another operation already assigned to main_signed_add_32_1
  %150 = add nsw i32 %147, %14... can share an output register with another operation already assigned to main_signed_add_32_2
  %150 = add nsw i32 %147, %14... can share an output register with another operation already assigned to main_signed_add_32_3
  %150 = add nsw i32 %147, %14... can share an output register with another operation already assigned to main_signed_add_32_4
  %150 = add nsw i32 %147, %14... can share an output register with another operation already assigned to main_signed_add_32_5
  %150 = add nsw i32 %147, %14... can share an output register with another operation already assigned to main_signed_add_32_6
  %150 = add nsw i32 %147, %14... can share an output register with another operation already assigned to main_signed_add_32_7
  %150 = add nsw i32 %147, %14... can share an output register with another operation already assigned to main_signed_add_32_8
  %150 = add nsw i32 %147, %14... can share an output register with another operation already assigned to main_signed_add_32_9
  %150 = add nsw i32 %147, %14... can share an output register with another operation already assigned to main_signed_add_32_10
  %150 = add nsw i32 %147, %14... can share an output register with another operation already assigned to main_signed_add_32_11
  %150 = add nsw i32 %147, %14... can share an output register with another operation already assigned to main_signed_add_32_12
  %150 = add nsw i32 %147, %14... can share an output register with another operation already assigned to main_signed_add_32_13
  %150 = add nsw i32 %147, %14... can share an output register with another operation already assigned to main_signed_add_32_15
  %150 = add nsw i32 %147, %14... can share an output register with another operation already assigned to main_signed_add_32_16
  %150 = add nsw i32 %147, %14... can share an output register with another operation already assigned to main_signed_add_32_17
  %150 = add nsw i32 %147, %14... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %150 = add nsw i32 %147, %14... (idx: 0)        -290                          -40                           -40                           -19                           -19                           -19                           -19                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -99                           -170                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %150 = add nsw i32 %147, %14... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %150 = add nsw i32 %147, %14... (idx: 0) -> main_signed_add_32_0 (mux inputs: 31)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %144 = mul nsw i32 %143, %de... hey can share an input with another operation already assigned to main_signed_multiply_32_19
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %144 = mul nsw i32 %143, %de... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %144 = mul nsw i32 %143, %de... (idx: 0)        -20                           -18                           -18                           -9                            -9                            -10                           -19                           -9                            -19                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -174                          -9                            -9                            -9                            -9                            -9                            -8                            -8                            -9                            -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %144 = mul nsw i32 %143, %de... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %144 = mul nsw i32 %143, %de... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 19)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %158 = sub i32 9, %155 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %158 = sub i32 9, %155 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %158 = sub i32 9, %155 (idx: 0)                 -45                           -14                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %158 = sub i32 9, %155 (idx: 0)                 1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %158 = sub i32 9, %155 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 6)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %161 = add nsw i32 %124, %14... can share an output register with another operation already assigned to main_signed_add_32_0
  %161 = add nsw i32 %124, %14... hey can share an input with another operation already assigned to main_signed_add_32_17
  %161 = add nsw i32 %124, %14... can share an output register with another operation already assigned to main_signed_add_32_17
  %161 = add nsw i32 %124, %14... can share an output register with another operation already assigned to main_signed_add_32_18
  %185 = add nsw i32 %145, %12... can share an output register with another operation already assigned to main_signed_add_32_0
  %185 = add nsw i32 %145, %12... can share an output register with another operation already assigned to main_signed_add_32_1
  %185 = add nsw i32 %145, %12... can share an output register with another operation already assigned to main_signed_add_32_2
  %185 = add nsw i32 %145, %12... can share an output register with another operation already assigned to main_signed_add_32_3
  %185 = add nsw i32 %145, %12... can share an output register with another operation already assigned to main_signed_add_32_4
  %185 = add nsw i32 %145, %12... can share an output register with another operation already assigned to main_signed_add_32_5
  %185 = add nsw i32 %145, %12... can share an output register with another operation already assigned to main_signed_add_32_6
  %185 = add nsw i32 %145, %12... can share an output register with another operation already assigned to main_signed_add_32_7
  %185 = add nsw i32 %145, %12... can share an output register with another operation already assigned to main_signed_add_32_8
  %185 = add nsw i32 %145, %12... can share an output register with another operation already assigned to main_signed_add_32_9
  %185 = add nsw i32 %145, %12... can share an output register with another operation already assigned to main_signed_add_32_10
  %185 = add nsw i32 %145, %12... can share an output register with another operation already assigned to main_signed_add_32_11
  %185 = add nsw i32 %145, %12... can share an output register with another operation already assigned to main_signed_add_32_12
  %185 = add nsw i32 %145, %12... can share an output register with another operation already assigned to main_signed_add_32_13
  %185 = add nsw i32 %145, %12... can share an output register with another operation already assigned to main_signed_add_32_15
  %185 = add nsw i32 %145, %12... can share an output register with another operation already assigned to main_signed_add_32_16
  %185 = add nsw i32 %145, %12... can share an output register with another operation already assigned to main_signed_add_32_17
  %185 = add nsw i32 %145, %12... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %161 = add nsw i32 %124, %14... (idx: 0)        -310                          -50                           -50                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -50                           -50                           -10                           -30                           -30                           -95                           -170                          
  %185 = add nsw i32 %145, %12... (idx: 1)        -310                          -40                           -40                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -100                          -170                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %161 = add nsw i32 %124, %14... (idx
  %185 = add nsw i32 %145, %12... (idx: 1)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %161 = add nsw i32 %124, %14... (idx: 0) -> main_signed_add_32_0 (mux inputs: 33)
  %185 = add nsw i32 %145, %12... (idx: 1) -> main_signed_add_32_18 (mux inputs: 19)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %163 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %167 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %163 = mul nsw i32 %plt1.0, ... (idx: 0)        -20                           -20                           -20                           -10                           -10                           -9                            -20                           -10                           -20                           -10                           -10                           -10                           -10                           -10                           -9                            -10                           -9                            -10                           -10                           -189                          -10                           -9                            -10                           -9                            -10                           -10                           -10                           -9                            -10                           
  %167 = mul nsw i32 %plt2.0, ... (idx: 1)        -20                           -20                           -20                           -10                           -10                           -9                            -20                           -10                           -20                           -10                           -10                           -10                           -10                           -10                           -9                            -10                           -9                            -10                           -10                           -189                          -10                           -9                            -10                           -9                            -10                           -10                           -10                           -9                            -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %163 = mul nsw i32 %plt1.0, ... (idx
  %167 = mul nsw i32 %plt2.0, ... (idx: 1)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %167 = mul nsw i32 %plt2.0, ... (idx: 1) -> main_signed_multiply_32_0 (mux inputs: 4)
  %163 = mul nsw i32 %plt1.0, ... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 21)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: ilb_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_ilb_table_local_mem_dual_port_0
  %157 = load i32* %156, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_ilb_table_local_mem_dual_port_0
  %157 = load i32* %156, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %157 = load i32* %156, align... (idx: 0) -> main_ilb_table_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_18
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_0
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_1
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_2
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_3
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_4
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_5
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_6
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_7
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_8
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_9
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_10
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_11
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_12
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_13
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_15
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_16
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_17
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_18
  %173 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_0
  %173 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_1
  %173 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_2
  %173 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_3
  %173 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_4
  %173 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_5
  %173 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_6
  %173 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_7
  %173 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_8
  %173 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_9
  %173 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_10
  %173 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_11
  %173 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_12
  %173 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_13
  %173 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_15
  %173 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_16
  %173 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_17
  %173 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_18
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_0
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_1
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_2
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_3
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_4
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_5
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_6
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_7
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_8
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_9
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_10
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_11
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_12
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_13
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_15
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_16
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_17
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep18 = add i32 %gep_int16,... (idx: 0)        -330                          -40                           -40                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -100                          -190                          
  %wd4.0.i8.i = add nsw i32 %1... (idx: 1)        -230                          60                            60                            80                            80                            80                            80                            80                            80                            80                            80                            80                            60                            60                            90                            80                            80                            0                             -90                           
  %173 = add nsw i32 %wd4.0.i8... (idx: 2)        -230                          60                            60                            80                            80                            80                            80                            80                            80                            80                            80                            80                            60                            60                            90                            80                            80                            0                             -90                           
  %apl1.0.i4.i = add nsw i32 %... (idx: 3)        -330                          -40                           -40                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -100                          -190                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep18 = add i32 %gep_int16,... (idx
  %wd4.0.i8.i = add nsw i32 %1... (idx
  %173 = add nsw i32 %wd4.0.i8... (idx
  %apl1.0.i4.i = add nsw i32 %... (idx: 3)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep18 = add i32 %gep_int16,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 35)
  %apl1.0.i4.i = add nsw i32 %... (idx: 3) -> main_signed_add_32_1 (mux inputs: 6)
  %173 = add nsw i32 %wd4.0.i8... (idx: 2) -> main_signed_add_32_17 (mux inputs: 12)
  %wd4.0.i8.i = add nsw i32 %1... (idx: 1) -> main_signed_add_32_18 (mux inputs: 21)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %181 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_0
  %181 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_1
  %183 = sub nsw i32 0, %181 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %183 = sub nsw i32 0, %181 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %181 = sub nsw i32 15360, %.... (idx: 0)        -55                           -14                           
  %183 = sub nsw i32 0, %181 (idx: 1)             -55                           -15                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %181 = sub nsw i32 15360, %.... (idx: 0)        1                             0                             
  %183 = sub nsw i32 0, %181 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %181 = sub nsw i32 15360, %.... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 7)
  %183 = sub nsw i32 0, %181 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 3)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %186 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %186 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %187 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %187 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %186 = load i32* getelementp... (idx: 0)        1                             11                            
  %187 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %186 = load i32* getelementp... (idx: 0)        1                             0                             
  %187 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %186 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %187 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %189 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %189 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %190 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %190 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %189 = load i32* getelementp... (idx: 0)        1                             11                            
  %190 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %189 = load i32* getelementp... (idx: 0)        1                             0                             
  %190 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %189 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %190 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %193 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %193 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %194 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %194 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %193 = load i32* getelementp... (idx: 0)        1                             11                            
  %194 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %193 = load i32* getelementp... (idx: 0)        1                             0                             
  %194 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %193 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %194 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %188 = mul nsw i32 %187, %18... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %188 = mul nsw i32 %187, %18... (idx: 0)        -40                           -18                           -18                           -10                           -10                           -10                           -20                           -10                           -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -210                          -10                           -10                           -10                           -10                           -10                           -8                            -8                            -10                           -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %188 = mul nsw i32 %187, %18... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %188 = mul nsw i32 %187, %18... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 23)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %197 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %197 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %198 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %198 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %197 = load i32* getelementp... (idx: 0)        1                             11                            
  %198 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %197 = load i32* getelementp... (idx: 0)        1                             0                             
  %198 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %197 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %198 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %191 = mul nsw i32 %190, %18... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %191 = mul nsw i32 %190, %18... (idx: 0)        -40                           -18                           -18                           -10                           -10                           -10                           -20                           -10                           -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -230                          -10                           -10                           -10                           -10                           -10                           -8                            -8                            -10                           -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %191 = mul nsw i32 %190, %18... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %191 = mul nsw i32 %190, %18... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 25)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %201 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %201 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %202 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %202 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %201 = load i32* getelementp... (idx: 0)        1                             11                            
  %202 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %201 = load i32* getelementp... (idx: 0)        1                             0                             
  %202 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %201 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %202 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %192 = add nsw i32 %191, %18... can share an output register with another operation already assigned to main_signed_add_32_0
  %192 = add nsw i32 %191, %18... can share an output register with another operation already assigned to main_signed_add_32_1
  %192 = add nsw i32 %191, %18... can share an output register with another operation already assigned to main_signed_add_32_2
  %192 = add nsw i32 %191, %18... can share an output register with another operation already assigned to main_signed_add_32_3
  %192 = add nsw i32 %191, %18... can share an output register with another operation already assigned to main_signed_add_32_4
  %192 = add nsw i32 %191, %18... can share an output register with another operation already assigned to main_signed_add_32_5
  %192 = add nsw i32 %191, %18... can share an output register with another operation already assigned to main_signed_add_32_6
  %192 = add nsw i32 %191, %18... can share an output register with another operation already assigned to main_signed_add_32_7
  %192 = add nsw i32 %191, %18... can share an output register with another operation already assigned to main_signed_add_32_8
  %192 = add nsw i32 %191, %18... can share an output register with another operation already assigned to main_signed_add_32_9
  %192 = add nsw i32 %191, %18... can share an output register with another operation already assigned to main_signed_add_32_10
  %192 = add nsw i32 %191, %18... can share an output register with another operation already assigned to main_signed_add_32_11
  %192 = add nsw i32 %191, %18... can share an output register with another operation already assigned to main_signed_add_32_12
  %192 = add nsw i32 %191, %18... can share an output register with another operation already assigned to main_signed_add_32_13
  %192 = add nsw i32 %191, %18... can share an output register with another operation already assigned to main_signed_add_32_15
  %192 = add nsw i32 %191, %18... can share an output register with another operation already assigned to main_signed_add_32_16
  %192 = add nsw i32 %191, %18... can share an output register with another operation already assigned to main_signed_add_32_17
  %192 = add nsw i32 %191, %18... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %192 = add nsw i32 %191, %18... (idx: 0)        -350                          -60                           -40                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -120                          -210                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %192 = add nsw i32 %191, %18... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %192 = add nsw i32 %191, %18... (idx: 0) -> main_signed_add_32_0 (mux inputs: 37)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %195 = mul nsw i32 %194, %19... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %195 = mul nsw i32 %194, %19... (idx: 0)        -40                           -18                           -18                           -10                           -10                           -10                           -20                           -10                           -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -250                          -10                           -10                           -10                           -10                           -10                           -8                            -8                            -10                           -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %195 = mul nsw i32 %194, %19... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %195 = mul nsw i32 %194, %19... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 27)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %205 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %205 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %206 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %206 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %205 = load i32* getelementp... (idx: 0)        1                             11                            
  %206 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %205 = load i32* getelementp... (idx: 0)        1                             0                             
  %206 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %205 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %206 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %196 = add nsw i32 %192, %19... can share an output register with another operation already assigned to main_signed_add_32_0
  %196 = add nsw i32 %192, %19... can share an output register with another operation already assigned to main_signed_add_32_1
  %196 = add nsw i32 %192, %19... can share an output register with another operation already assigned to main_signed_add_32_2
  %196 = add nsw i32 %192, %19... can share an output register with another operation already assigned to main_signed_add_32_3
  %196 = add nsw i32 %192, %19... can share an output register with another operation already assigned to main_signed_add_32_4
  %196 = add nsw i32 %192, %19... can share an output register with another operation already assigned to main_signed_add_32_5
  %196 = add nsw i32 %192, %19... can share an output register with another operation already assigned to main_signed_add_32_6
  %196 = add nsw i32 %192, %19... can share an output register with another operation already assigned to main_signed_add_32_7
  %196 = add nsw i32 %192, %19... can share an output register with another operation already assigned to main_signed_add_32_8
  %196 = add nsw i32 %192, %19... can share an output register with another operation already assigned to main_signed_add_32_9
  %196 = add nsw i32 %192, %19... can share an output register with another operation already assigned to main_signed_add_32_10
  %196 = add nsw i32 %192, %19... can share an output register with another operation already assigned to main_signed_add_32_11
  %196 = add nsw i32 %192, %19... can share an output register with another operation already assigned to main_signed_add_32_12
  %196 = add nsw i32 %192, %19... can share an output register with another operation already assigned to main_signed_add_32_13
  %196 = add nsw i32 %192, %19... can share an output register with another operation already assigned to main_signed_add_32_15
  %196 = add nsw i32 %192, %19... can share an output register with another operation already assigned to main_signed_add_32_16
  %196 = add nsw i32 %192, %19... can share an output register with another operation already assigned to main_signed_add_32_17
  %196 = add nsw i32 %192, %19... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %196 = add nsw i32 %192, %19... (idx: 0)        -370                          -60                           -40                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -120                          -210                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %196 = add nsw i32 %192, %19... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %196 = add nsw i32 %192, %19... (idx: 0) -> main_signed_add_32_0 (mux inputs: 39)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %199 = mul nsw i32 %198, %19... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %199 = mul nsw i32 %198, %19... (idx: 0)        -40                           -18                           -18                           -10                           -10                           -10                           -20                           -10                           -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -270                          -10                           -10                           -10                           -10                           -10                           -8                            -8                            -10                           -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %199 = mul nsw i32 %198, %19... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %199 = mul nsw i32 %198, %19... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 29)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %209 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %209 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %210 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %210 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %209 = load i32* getelementp... (idx: 0)        1                             11                            
  %210 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %209 = load i32* getelementp... (idx: 0)        1                             0                             
  %210 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %209 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %210 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %200 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_0
  %200 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_1
  %200 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_2
  %200 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_3
  %200 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_4
  %200 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_5
  %200 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_6
  %200 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_7
  %200 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_8
  %200 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_9
  %200 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_10
  %200 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_11
  %200 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_12
  %200 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_13
  %200 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_15
  %200 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_16
  %200 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_17
  %200 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %200 = add nsw i32 %196, %19... (idx: 0)        -390                          -60                           -40                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -120                          -210                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %200 = add nsw i32 %196, %19... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %200 = add nsw i32 %196, %19... (idx: 0) -> main_signed_add_32_0 (mux inputs: 41)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %203 = mul nsw i32 %202, %20... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %203 = mul nsw i32 %202, %20... (idx: 0)        -40                           -18                           -18                           -10                           -10                           -10                           -20                           -10                           -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -290                          -10                           -10                           -10                           -10                           -10                           -8                            -8                            -10                           -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %203 = mul nsw i32 %202, %20... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %203 = mul nsw i32 %202, %20... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 31)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %213 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %213 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %214 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %214 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %213 = load i32* getelementp... (idx: 0)        1                             11                            
  %214 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %213 = load i32* getelementp... (idx: 0)        1                             0                             
  %214 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %213 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %214 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %204 = add nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_add_32_0
  %204 = add nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_add_32_1
  %204 = add nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_add_32_2
  %204 = add nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_add_32_3
  %204 = add nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_add_32_4
  %204 = add nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_add_32_5
  %204 = add nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_add_32_6
  %204 = add nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_add_32_7
  %204 = add nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_add_32_8
  %204 = add nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_add_32_9
  %204 = add nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_add_32_10
  %204 = add nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_add_32_11
  %204 = add nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_add_32_12
  %204 = add nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_add_32_13
  %204 = add nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_add_32_15
  %204 = add nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_add_32_16
  %204 = add nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_add_32_17
  %204 = add nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %204 = add nsw i32 %200, %20... (idx: 0)        -410                          -60                           -40                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -120                          -210                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %204 = add nsw i32 %200, %20... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %204 = add nsw i32 %200, %20... (idx: 0) -> main_signed_add_32_0 (mux inputs: 43)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %207 = mul nsw i32 %206, %20... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %207 = mul nsw i32 %206, %20... (idx: 0)        -40                           -18                           -18                           -10                           -10                           -10                           -20                           -10                           -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -310                          -10                           -10                           -10                           -10                           -10                           -8                            -8                            -10                           -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %207 = mul nsw i32 %206, %20... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %207 = mul nsw i32 %206, %20... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 33)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %217 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %217 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %218 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %218 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %217 = load i32* getelementp... (idx: 0)        1                             11                            
  %218 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %217 = load i32* getelementp... (idx: 0)        1                             0                             
  %218 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %217 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %218 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %208 = add nsw i32 %204, %20... can share an output register with another operation already assigned to main_signed_add_32_0
  %208 = add nsw i32 %204, %20... can share an output register with another operation already assigned to main_signed_add_32_1
  %208 = add nsw i32 %204, %20... can share an output register with another operation already assigned to main_signed_add_32_2
  %208 = add nsw i32 %204, %20... can share an output register with another operation already assigned to main_signed_add_32_3
  %208 = add nsw i32 %204, %20... can share an output register with another operation already assigned to main_signed_add_32_4
  %208 = add nsw i32 %204, %20... can share an output register with another operation already assigned to main_signed_add_32_5
  %208 = add nsw i32 %204, %20... can share an output register with another operation already assigned to main_signed_add_32_6
  %208 = add nsw i32 %204, %20... can share an output register with another operation already assigned to main_signed_add_32_7
  %208 = add nsw i32 %204, %20... can share an output register with another operation already assigned to main_signed_add_32_8
  %208 = add nsw i32 %204, %20... can share an output register with another operation already assigned to main_signed_add_32_9
  %208 = add nsw i32 %204, %20... can share an output register with another operation already assigned to main_signed_add_32_10
  %208 = add nsw i32 %204, %20... can share an output register with another operation already assigned to main_signed_add_32_11
  %208 = add nsw i32 %204, %20... can share an output register with another operation already assigned to main_signed_add_32_12
  %208 = add nsw i32 %204, %20... can share an output register with another operation already assigned to main_signed_add_32_13
  %208 = add nsw i32 %204, %20... can share an output register with another operation already assigned to main_signed_add_32_15
  %208 = add nsw i32 %204, %20... can share an output register with another operation already assigned to main_signed_add_32_16
  %208 = add nsw i32 %204, %20... can share an output register with another operation already assigned to main_signed_add_32_17
  %208 = add nsw i32 %204, %20... can share an output register with another operation already assigned to main_signed_add_32_18
  %211 = add i32 %208, %209 can share an output register with another operation already assigned to main_signed_add_32_0
  %211 = add i32 %208, %209 can share an output register with another operation already assigned to main_signed_add_32_1
  %211 = add i32 %208, %209 can share an output register with another operation already assigned to main_signed_add_32_2
  %211 = add i32 %208, %209 can share an output register with another operation already assigned to main_signed_add_32_3
  %211 = add i32 %208, %209 can share an output register with another operation already assigned to main_signed_add_32_4
  %211 = add i32 %208, %209 can share an output register with another operation already assigned to main_signed_add_32_5
  %211 = add i32 %208, %209 can share an output register with another operation already assigned to main_signed_add_32_6
  %211 = add i32 %208, %209 can share an output register with another operation already assigned to main_signed_add_32_7
  %211 = add i32 %208, %209 can share an output register with another operation already assigned to main_signed_add_32_8
  %211 = add i32 %208, %209 can share an output register with another operation already assigned to main_signed_add_32_9
  %211 = add i32 %208, %209 can share an output register with another operation already assigned to main_signed_add_32_10
  %211 = add i32 %208, %209 can share an output register with another operation already assigned to main_signed_add_32_11
  %211 = add i32 %208, %209 can share an output register with another operation already assigned to main_signed_add_32_12
  %211 = add i32 %208, %209 can share an output register with another operation already assigned to main_signed_add_32_13
  %211 = add i32 %208, %209 can share an output register with another operation already assigned to main_signed_add_32_15
  %211 = add i32 %208, %209 can share an output register with another operation already assigned to main_signed_add_32_16
  %211 = add i32 %208, %209 can share an output register with another operation already assigned to main_signed_add_32_17
  %211 = add i32 %208, %209 can share an output register with another operation already assigned to main_signed_add_32_18
  %212 = add i32 %211, %210 can share an output register with another operation already assigned to main_signed_add_32_0
  %212 = add i32 %211, %210 can share an output register with another operation already assigned to main_signed_add_32_1
  %212 = add i32 %211, %210 can share an output register with another operation already assigned to main_signed_add_32_2
  %212 = add i32 %211, %210 can share an output register with another operation already assigned to main_signed_add_32_3
  %212 = add i32 %211, %210 can share an output register with another operation already assigned to main_signed_add_32_4
  %212 = add i32 %211, %210 can share an output register with another operation already assigned to main_signed_add_32_5
  %212 = add i32 %211, %210 can share an output register with another operation already assigned to main_signed_add_32_6
  %212 = add i32 %211, %210 can share an output register with another operation already assigned to main_signed_add_32_7
  %212 = add i32 %211, %210 can share an output register with another operation already assigned to main_signed_add_32_8
  %212 = add i32 %211, %210 can share an output register with another operation already assigned to main_signed_add_32_9
  %212 = add i32 %211, %210 can share an output register with another operation already assigned to main_signed_add_32_10
  %212 = add i32 %211, %210 can share an output register with another operation already assigned to main_signed_add_32_11
  %212 = add i32 %211, %210 can share an output register with another operation already assigned to main_signed_add_32_12
  %212 = add i32 %211, %210 can share an output register with another operation already assigned to main_signed_add_32_13
  %212 = add i32 %211, %210 can share an output register with another operation already assigned to main_signed_add_32_15
  %212 = add i32 %211, %210 can share an output register with another operation already assigned to main_signed_add_32_16
  %212 = add i32 %211, %210 can share an output register with another operation already assigned to main_signed_add_32_17
  %212 = add i32 %211, %210 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %208 = add nsw i32 %204, %20... (idx: 0)        -430                          -60                           -40                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -120                          -210                          
  %211 = add i32 %208, %209 (idx: 1)              -430                          -60                           -40                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -119                          -210                          
  %212 = add i32 %211, %210 (idx: 2)              -430                          -60                           -40                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -119                          -210                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %208 = add nsw i32 %204, %20... (idx
  %211 = add i32 %208, %209 (idx
  %212 = add i32 %211, %210 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %212 = add i32 %211, %210 (idx: 2) -> main_signed_add_32_0 (mux inputs: 45)
  %208 = add nsw i32 %204, %20... (idx: 0) -> main_signed_add_32_17 (mux inputs: 14)
  %211 = add i32 %208, %209 (idx: 1) -> main_signed_add_32_18 (mux inputs: 23)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %221 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %221 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %222 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %222 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %221 = load i32* getelementp... (idx: 0)        1                             11                            
  %222 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %221 = load i32* getelementp... (idx: 0)        1                             0                             
  %222 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %221 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %222 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %215 = add i32 %212, %213 can share an output register with another operation already assigned to main_signed_add_32_0
  %215 = add i32 %212, %213 can share an output register with another operation already assigned to main_signed_add_32_1
  %215 = add i32 %212, %213 can share an output register with another operation already assigned to main_signed_add_32_2
  %215 = add i32 %212, %213 can share an output register with another operation already assigned to main_signed_add_32_3
  %215 = add i32 %212, %213 can share an output register with another operation already assigned to main_signed_add_32_4
  %215 = add i32 %212, %213 can share an output register with another operation already assigned to main_signed_add_32_5
  %215 = add i32 %212, %213 can share an output register with another operation already assigned to main_signed_add_32_6
  %215 = add i32 %212, %213 can share an output register with another operation already assigned to main_signed_add_32_7
  %215 = add i32 %212, %213 can share an output register with another operation already assigned to main_signed_add_32_8
  %215 = add i32 %212, %213 can share an output register with another operation already assigned to main_signed_add_32_9
  %215 = add i32 %212, %213 can share an output register with another operation already assigned to main_signed_add_32_10
  %215 = add i32 %212, %213 can share an output register with another operation already assigned to main_signed_add_32_11
  %215 = add i32 %212, %213 can share an output register with another operation already assigned to main_signed_add_32_12
  %215 = add i32 %212, %213 can share an output register with another operation already assigned to main_signed_add_32_13
  %215 = add i32 %212, %213 can share an output register with another operation already assigned to main_signed_add_32_15
  %215 = add i32 %212, %213 can share an output register with another operation already assigned to main_signed_add_32_16
  %215 = add i32 %212, %213 can share an output register with another operation already assigned to main_signed_add_32_17
  %215 = add i32 %212, %213 can share an output register with another operation already assigned to main_signed_add_32_18
  %216 = add i32 %215, %214 can share an output register with another operation already assigned to main_signed_add_32_0
  %216 = add i32 %215, %214 can share an output register with another operation already assigned to main_signed_add_32_1
  %216 = add i32 %215, %214 can share an output register with another operation already assigned to main_signed_add_32_2
  %216 = add i32 %215, %214 can share an output register with another operation already assigned to main_signed_add_32_3
  %216 = add i32 %215, %214 can share an output register with another operation already assigned to main_signed_add_32_4
  %216 = add i32 %215, %214 can share an output register with another operation already assigned to main_signed_add_32_5
  %216 = add i32 %215, %214 can share an output register with another operation already assigned to main_signed_add_32_6
  %216 = add i32 %215, %214 can share an output register with another operation already assigned to main_signed_add_32_7
  %216 = add i32 %215, %214 can share an output register with another operation already assigned to main_signed_add_32_8
  %216 = add i32 %215, %214 can share an output register with another operation already assigned to main_signed_add_32_9
  %216 = add i32 %215, %214 can share an output register with another operation already assigned to main_signed_add_32_10
  %216 = add i32 %215, %214 can share an output register with another operation already assigned to main_signed_add_32_11
  %216 = add i32 %215, %214 can share an output register with another operation already assigned to main_signed_add_32_12
  %216 = add i32 %215, %214 can share an output register with another operation already assigned to main_signed_add_32_13
  %216 = add i32 %215, %214 can share an output register with another operation already assigned to main_signed_add_32_15
  %216 = add i32 %215, %214 can share an output register with another operation already assigned to main_signed_add_32_16
  %216 = add i32 %215, %214 can share an output register with another operation already assigned to main_signed_add_32_17
  %216 = add i32 %215, %214 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %215 = add i32 %212, %213 (idx: 0)              -450                          -60                           -40                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -139                          -230                          
  %216 = add i32 %215, %214 (idx: 1)              -450                          -60                           -40                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -139                          -230                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %215 = add i32 %212, %213 (idx
  %216 = add i32 %215, %214 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %215 = add i32 %212, %213 (idx: 0) -> main_signed_add_32_0 (mux inputs: 47)
  %216 = add i32 %215, %214 (idx: 1) -> main_signed_add_32_18 (mux inputs: 25)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %225 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %225 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %226 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %226 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %225 = load i32* getelementp... (idx: 0)        1                             11                            
  %226 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %225 = load i32* getelementp... (idx: 0)        1                             0                             
  %226 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %225 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %226 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %219 = add i32 %216, %217 can share an output register with another operation already assigned to main_signed_add_32_0
  %219 = add i32 %216, %217 can share an output register with another operation already assigned to main_signed_add_32_1
  %219 = add i32 %216, %217 can share an output register with another operation already assigned to main_signed_add_32_2
  %219 = add i32 %216, %217 can share an output register with another operation already assigned to main_signed_add_32_3
  %219 = add i32 %216, %217 can share an output register with another operation already assigned to main_signed_add_32_4
  %219 = add i32 %216, %217 can share an output register with another operation already assigned to main_signed_add_32_5
  %219 = add i32 %216, %217 can share an output register with another operation already assigned to main_signed_add_32_6
  %219 = add i32 %216, %217 can share an output register with another operation already assigned to main_signed_add_32_7
  %219 = add i32 %216, %217 can share an output register with another operation already assigned to main_signed_add_32_8
  %219 = add i32 %216, %217 can share an output register with another operation already assigned to main_signed_add_32_9
  %219 = add i32 %216, %217 can share an output register with another operation already assigned to main_signed_add_32_10
  %219 = add i32 %216, %217 can share an output register with another operation already assigned to main_signed_add_32_11
  %219 = add i32 %216, %217 can share an output register with another operation already assigned to main_signed_add_32_12
  %219 = add i32 %216, %217 can share an output register with another operation already assigned to main_signed_add_32_13
  %219 = add i32 %216, %217 can share an output register with another operation already assigned to main_signed_add_32_15
  %219 = add i32 %216, %217 can share an output register with another operation already assigned to main_signed_add_32_16
  %219 = add i32 %216, %217 can share an output register with another operation already assigned to main_signed_add_32_17
  %219 = add i32 %216, %217 can share an output register with another operation already assigned to main_signed_add_32_18
  %220 = add i32 %219, %218 can share an output register with another operation already assigned to main_signed_add_32_0
  %220 = add i32 %219, %218 can share an output register with another operation already assigned to main_signed_add_32_1
  %220 = add i32 %219, %218 can share an output register with another operation already assigned to main_signed_add_32_2
  %220 = add i32 %219, %218 can share an output register with another operation already assigned to main_signed_add_32_3
  %220 = add i32 %219, %218 can share an output register with another operation already assigned to main_signed_add_32_4
  %220 = add i32 %219, %218 can share an output register with another operation already assigned to main_signed_add_32_5
  %220 = add i32 %219, %218 can share an output register with another operation already assigned to main_signed_add_32_6
  %220 = add i32 %219, %218 can share an output register with another operation already assigned to main_signed_add_32_7
  %220 = add i32 %219, %218 can share an output register with another operation already assigned to main_signed_add_32_8
  %220 = add i32 %219, %218 can share an output register with another operation already assigned to main_signed_add_32_9
  %220 = add i32 %219, %218 can share an output register with another operation already assigned to main_signed_add_32_10
  %220 = add i32 %219, %218 can share an output register with another operation already assigned to main_signed_add_32_11
  %220 = add i32 %219, %218 can share an output register with another operation already assigned to main_signed_add_32_12
  %220 = add i32 %219, %218 can share an output register with another operation already assigned to main_signed_add_32_13
  %220 = add i32 %219, %218 can share an output register with another operation already assigned to main_signed_add_32_15
  %220 = add i32 %219, %218 can share an output register with another operation already assigned to main_signed_add_32_16
  %220 = add i32 %219, %218 can share an output register with another operation already assigned to main_signed_add_32_17
  %220 = add i32 %219, %218 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %219 = add i32 %216, %217 (idx: 0)              -470                          -60                           -40                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -139                          -250                          
  %220 = add i32 %219, %218 (idx: 1)              -470                          -60                           -40                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -139                          -250                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %219 = add i32 %216, %217 (idx
  %220 = add i32 %219, %218 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %219 = add i32 %216, %217 (idx: 0) -> main_signed_add_32_0 (mux inputs: 49)
  %220 = add i32 %219, %218 (idx: 1) -> main_signed_add_32_18 (mux inputs: 27)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %223 = add i32 %220, %221 can share an output register with another operation already assigned to main_signed_add_32_0
  %223 = add i32 %220, %221 can share an output register with another operation already assigned to main_signed_add_32_1
  %223 = add i32 %220, %221 can share an output register with another operation already assigned to main_signed_add_32_2
  %223 = add i32 %220, %221 can share an output register with another operation already assigned to main_signed_add_32_3
  %223 = add i32 %220, %221 can share an output register with another operation already assigned to main_signed_add_32_4
  %223 = add i32 %220, %221 can share an output register with another operation already assigned to main_signed_add_32_5
  %223 = add i32 %220, %221 can share an output register with another operation already assigned to main_signed_add_32_6
  %223 = add i32 %220, %221 can share an output register with another operation already assigned to main_signed_add_32_7
  %223 = add i32 %220, %221 can share an output register with another operation already assigned to main_signed_add_32_8
  %223 = add i32 %220, %221 can share an output register with another operation already assigned to main_signed_add_32_9
  %223 = add i32 %220, %221 can share an output register with another operation already assigned to main_signed_add_32_10
  %223 = add i32 %220, %221 can share an output register with another operation already assigned to main_signed_add_32_11
  %223 = add i32 %220, %221 can share an output register with another operation already assigned to main_signed_add_32_12
  %223 = add i32 %220, %221 can share an output register with another operation already assigned to main_signed_add_32_13
  %223 = add i32 %220, %221 can share an output register with another operation already assigned to main_signed_add_32_15
  %223 = add i32 %220, %221 can share an output register with another operation already assigned to main_signed_add_32_16
  %223 = add i32 %220, %221 can share an output register with another operation already assigned to main_signed_add_32_17
  %223 = add i32 %220, %221 can share an output register with another operation already assigned to main_signed_add_32_18
  %224 = add i32 %223, %222 can share an output register with another operation already assigned to main_signed_add_32_0
  %224 = add i32 %223, %222 can share an output register with another operation already assigned to main_signed_add_32_1
  %224 = add i32 %223, %222 can share an output register with another operation already assigned to main_signed_add_32_2
  %224 = add i32 %223, %222 can share an output register with another operation already assigned to main_signed_add_32_3
  %224 = add i32 %223, %222 can share an output register with another operation already assigned to main_signed_add_32_4
  %224 = add i32 %223, %222 can share an output register with another operation already assigned to main_signed_add_32_5
  %224 = add i32 %223, %222 can share an output register with another operation already assigned to main_signed_add_32_6
  %224 = add i32 %223, %222 can share an output register with another operation already assigned to main_signed_add_32_7
  %224 = add i32 %223, %222 can share an output register with another operation already assigned to main_signed_add_32_8
  %224 = add i32 %223, %222 can share an output register with another operation already assigned to main_signed_add_32_9
  %224 = add i32 %223, %222 can share an output register with another operation already assigned to main_signed_add_32_10
  %224 = add i32 %223, %222 can share an output register with another operation already assigned to main_signed_add_32_11
  %224 = add i32 %223, %222 can share an output register with another operation already assigned to main_signed_add_32_12
  %224 = add i32 %223, %222 can share an output register with another operation already assigned to main_signed_add_32_13
  %224 = add i32 %223, %222 can share an output register with another operation already assigned to main_signed_add_32_15
  %224 = add i32 %223, %222 can share an output register with another operation already assigned to main_signed_add_32_16
  %224 = add i32 %223, %222 can share an output register with another operation already assigned to main_signed_add_32_17
  %224 = add i32 %223, %222 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %223 = add i32 %220, %221 (idx: 0)              -490                          -60                           -40                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -139                          -270                          
  %224 = add i32 %223, %222 (idx: 1)              -490                          -60                           -40                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -139                          -270                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %223 = add i32 %220, %221 (idx
  %224 = add i32 %223, %222 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %223 = add i32 %220, %221 (idx: 0) -> main_signed_add_32_0 (mux inputs: 51)
  %224 = add i32 %223, %222 (idx: 1) -> main_signed_add_32_18 (mux inputs: 29)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %227 = add i32 %224, %225 can share an output register with another operation already assigned to main_signed_add_32_0
  %227 = add i32 %224, %225 can share an output register with another operation already assigned to main_signed_add_32_1
  %227 = add i32 %224, %225 can share an output register with another operation already assigned to main_signed_add_32_2
  %227 = add i32 %224, %225 can share an output register with another operation already assigned to main_signed_add_32_3
  %227 = add i32 %224, %225 can share an output register with another operation already assigned to main_signed_add_32_4
  %227 = add i32 %224, %225 can share an output register with another operation already assigned to main_signed_add_32_5
  %227 = add i32 %224, %225 can share an output register with another operation already assigned to main_signed_add_32_6
  %227 = add i32 %224, %225 can share an output register with another operation already assigned to main_signed_add_32_7
  %227 = add i32 %224, %225 can share an output register with another operation already assigned to main_signed_add_32_8
  %227 = add i32 %224, %225 can share an output register with another operation already assigned to main_signed_add_32_9
  %227 = add i32 %224, %225 can share an output register with another operation already assigned to main_signed_add_32_10
  %227 = add i32 %224, %225 can share an output register with another operation already assigned to main_signed_add_32_11
  %227 = add i32 %224, %225 can share an output register with another operation already assigned to main_signed_add_32_12
  %227 = add i32 %224, %225 can share an output register with another operation already assigned to main_signed_add_32_13
  %227 = add i32 %224, %225 can share an output register with another operation already assigned to main_signed_add_32_15
  %227 = add i32 %224, %225 can share an output register with another operation already assigned to main_signed_add_32_16
  %227 = add i32 %224, %225 can share an output register with another operation already assigned to main_signed_add_32_17
  %227 = add i32 %224, %225 can share an output register with another operation already assigned to main_signed_add_32_18
  %228 = add i32 %227, %226 can share an output register with another operation already assigned to main_signed_add_32_0
  %228 = add i32 %227, %226 can share an output register with another operation already assigned to main_signed_add_32_1
  %228 = add i32 %227, %226 can share an output register with another operation already assigned to main_signed_add_32_2
  %228 = add i32 %227, %226 can share an output register with another operation already assigned to main_signed_add_32_3
  %228 = add i32 %227, %226 can share an output register with another operation already assigned to main_signed_add_32_4
  %228 = add i32 %227, %226 can share an output register with another operation already assigned to main_signed_add_32_5
  %228 = add i32 %227, %226 can share an output register with another operation already assigned to main_signed_add_32_6
  %228 = add i32 %227, %226 can share an output register with another operation already assigned to main_signed_add_32_7
  %228 = add i32 %227, %226 can share an output register with another operation already assigned to main_signed_add_32_8
  %228 = add i32 %227, %226 can share an output register with another operation already assigned to main_signed_add_32_9
  %228 = add i32 %227, %226 can share an output register with another operation already assigned to main_signed_add_32_10
  %228 = add i32 %227, %226 can share an output register with another operation already assigned to main_signed_add_32_11
  %228 = add i32 %227, %226 can share an output register with another operation already assigned to main_signed_add_32_12
  %228 = add i32 %227, %226 can share an output register with another operation already assigned to main_signed_add_32_13
  %228 = add i32 %227, %226 can share an output register with another operation already assigned to main_signed_add_32_15
  %228 = add i32 %227, %226 can share an output register with another operation already assigned to main_signed_add_32_16
  %228 = add i32 %227, %226 can share an output register with another operation already assigned to main_signed_add_32_17
  %228 = add i32 %227, %226 can share an output register with another operation already assigned to main_signed_add_32_18
  %233 = add nsw i32 %232, %22... can share an output register with another operation already assigned to main_signed_add_32_0
  %233 = add nsw i32 %232, %22... can share an output register with another operation already assigned to main_signed_add_32_1
  %233 = add nsw i32 %232, %22... can share an output register with another operation already assigned to main_signed_add_32_2
  %233 = add nsw i32 %232, %22... can share an output register with another operation already assigned to main_signed_add_32_3
  %233 = add nsw i32 %232, %22... can share an output register with another operation already assigned to main_signed_add_32_4
  %233 = add nsw i32 %232, %22... can share an output register with another operation already assigned to main_signed_add_32_5
  %233 = add nsw i32 %232, %22... can share an output register with another operation already assigned to main_signed_add_32_6
  %233 = add nsw i32 %232, %22... can share an output register with another operation already assigned to main_signed_add_32_7
  %233 = add nsw i32 %232, %22... can share an output register with another operation already assigned to main_signed_add_32_8
  %233 = add nsw i32 %232, %22... can share an output register with another operation already assigned to main_signed_add_32_9
  %233 = add nsw i32 %232, %22... can share an output register with another operation already assigned to main_signed_add_32_10
  %233 = add nsw i32 %232, %22... can share an output register with another operation already assigned to main_signed_add_32_11
  %233 = add nsw i32 %232, %22... can share an output register with another operation already assigned to main_signed_add_32_12
  %233 = add nsw i32 %232, %22... can share an output register with another operation already assigned to main_signed_add_32_13
  %233 = add nsw i32 %232, %22... can share an output register with another operation already assigned to main_signed_add_32_15
  %233 = add nsw i32 %232, %22... can share an output register with another operation already assigned to main_signed_add_32_16
  %233 = add nsw i32 %232, %22... can share an output register with another operation already assigned to main_signed_add_32_17
  %233 = add nsw i32 %232, %22... can share an output register with another operation already assigned to main_signed_add_32_18
  %237 = add nsw i32 %236, 3 can share an output register with another operation already assigned to main_signed_add_32_0
  %237 = add nsw i32 %236, 3 can share an output register with another operation already assigned to main_signed_add_32_1
  %237 = add nsw i32 %236, 3 can share an output register with another operation already assigned to main_signed_add_32_2
  %237 = add nsw i32 %236, 3 can share an output register with another operation already assigned to main_signed_add_32_3
  %237 = add nsw i32 %236, 3 can share an output register with another operation already assigned to main_signed_add_32_4
  %237 = add nsw i32 %236, 3 can share an output register with another operation already assigned to main_signed_add_32_5
  %237 = add nsw i32 %236, 3 can share an output register with another operation already assigned to main_signed_add_32_6
  %237 = add nsw i32 %236, 3 can share an output register with another operation already assigned to main_signed_add_32_7
  %237 = add nsw i32 %236, 3 can share an output register with another operation already assigned to main_signed_add_32_8
  %237 = add nsw i32 %236, 3 can share an output register with another operation already assigned to main_signed_add_32_9
  %237 = add nsw i32 %236, 3 can share an output register with another operation already assigned to main_signed_add_32_10
  %237 = add nsw i32 %236, 3 can share an output register with another operation already assigned to main_signed_add_32_11
  %237 = add nsw i32 %236, 3 can share an output register with another operation already assigned to main_signed_add_32_12
  %237 = add nsw i32 %236, 3 can share an output register with another operation already assigned to main_signed_add_32_13
  %237 = add nsw i32 %236, 3 can share an output register with another operation already assigned to main_signed_add_32_15
  %237 = add nsw i32 %236, 3 can share an output register with another operation already assigned to main_signed_add_32_16
  %237 = add nsw i32 %236, 3 can share an output register with another operation already assigned to main_signed_add_32_17
  %237 = add nsw i32 %236, 3 can share an output register with another operation already assigned to main_signed_add_32_18
  %243 = add nsw i32 %236, 2 can share an output register with another operation already assigned to main_signed_add_32_0
  %243 = add nsw i32 %236, 2 can share an output register with another operation already assigned to main_signed_add_32_1
  %243 = add nsw i32 %236, 2 can share an output register with another operation already assigned to main_signed_add_32_2
  %243 = add nsw i32 %236, 2 can share an output register with another operation already assigned to main_signed_add_32_3
  %243 = add nsw i32 %236, 2 can share an output register with another operation already assigned to main_signed_add_32_4
  %243 = add nsw i32 %236, 2 can share an output register with another operation already assigned to main_signed_add_32_5
  %243 = add nsw i32 %236, 2 can share an output register with another operation already assigned to main_signed_add_32_6
  %243 = add nsw i32 %236, 2 can share an output register with another operation already assigned to main_signed_add_32_7
  %243 = add nsw i32 %236, 2 can share an output register with another operation already assigned to main_signed_add_32_8
  %243 = add nsw i32 %236, 2 can share an output register with another operation already assigned to main_signed_add_32_9
  %243 = add nsw i32 %236, 2 can share an output register with another operation already assigned to main_signed_add_32_10
  %243 = add nsw i32 %236, 2 can share an output register with another operation already assigned to main_signed_add_32_11
  %243 = add nsw i32 %236, 2 can share an output register with another operation already assigned to main_signed_add_32_12
  %243 = add nsw i32 %236, 2 can share an output register with another operation already assigned to main_signed_add_32_13
  %243 = add nsw i32 %236, 2 can share an output register with another operation already assigned to main_signed_add_32_15
  %243 = add nsw i32 %236, 2 can share an output register with another operation already assigned to main_signed_add_32_16
  %243 = add nsw i32 %236, 2 can share an output register with another operation already assigned to main_signed_add_32_17
  %243 = add nsw i32 %236, 2 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %227 = add i32 %224, %225 (idx: 0)              -510                          -60                           -40                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -139                          -290                          
  %228 = add i32 %227, %226 (idx: 1)              -510                          -60                           -40                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -139                          -290                          
  %233 = add nsw i32 %232, %22... (idx: 2)        -510                          -60                           -40                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -140                          -290                          
  %237 = add nsw i32 %236, 3 (idx: 3)             -504                          -54                           -35                           -14                           -14                           -14                           -14                           -14                           -14                           -14                           -14                           -14                           -34                           -34                           -4                            -14                           -14                           -134                          -284                          
  %243 = add nsw i32 %236, 2 (idx: 4)             -504                          -55                           -34                           -14                           -14                           -14                           -14                           -14                           -14                           -14                           -14                           -14                           -34                           -34                           -4                            -14                           -14                           -134                          -285                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %227 = add i32 %224, %225 (idx
  %228 = add i32 %227, %226 (idx
  %233 = add nsw i32 %232, %22... (idx
  %237 = add nsw i32 %236, 3 (idx
  %243 = add nsw i32 %236, 2 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %227 = add i32 %224, %225 (idx: 0) -> main_signed_add_32_0 (mux inputs: 53)
  %228 = add i32 %227, %226 (idx: 1) -> main_signed_add_32_1 (mux inputs: 8)
  %237 = add nsw i32 %236, 3 (idx: 3) -> main_signed_add_32_2 (mux inputs: 5)
  %233 = add nsw i32 %232, %22... (idx: 2) -> main_signed_add_32_17 (mux inputs: 16)
  %243 = add nsw i32 %236, 2 (idx: 4) -> main_signed_add_32_18 (mux inputs: 30)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %234 = sub nsw i32 %80, %233 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %234 = sub nsw i32 %80, %233 can share an output register with another operation already assigned to main_signed_subtract_32_1
  %241 = sub nsw i32 0, %234 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %241 = sub nsw i32 0, %234 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %234 = sub nsw i32 %80, %233 (idx: 0)           -70                           -30                           
  %241 = sub nsw i32 0, %234 (idx: 1)             -65                           -25                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %234 = sub nsw i32 %80, %233 (idx: 0)           1                             0                             
  %241 = sub nsw i32 0, %234 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %234 = sub nsw i32 %80, %233 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 9)
  %241 = sub nsw i32 0, %234 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 4)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %246 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_0
  %246 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_1
  %246 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_2
  %246 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_3
  %246 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_4
  %246 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_5
  %246 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_6
  %246 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_7
  %246 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_8
  %246 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_9
  %246 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_10
  %246 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_11
  %246 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_12
  %246 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_13
  %246 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_15
  %246 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_16
  %246 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_17
  %246 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %246 = add nsw i32 %., -2 (idx: 0)              -524                          -74                           -44                           -14                           -14                           -14                           -14                           -14                           -14                           -14                           -14                           -14                           -34                           -34                           -4                            -14                           -14                           -154                          -294                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %246 = add nsw i32 %., -2 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %246 = add nsw i32 %., -2 (idx: 0) -> main_signed_add_32_0 (mux inputs: 54)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: qq2_code2_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_qq2_code2_table_local_mem_dual_port_0
  %248 = load i32* %247, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_qq2_code2_table_local_mem_dual_port_0
  %248 = load i32* %247, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %248 = load i32* %247, align... (idx: 0) -> main_qq2_code2_table_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_18
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep21 = add i32 %gep_int19,... (idx: 0)        -540                          -80                           -50                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -160                          -300                          
  %gep24 = add i32 %gep_int22,... (idx: 1)        -540                          -80                           -50                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -160                          -300                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep21 = add i32 %gep_int19,... (idx
  %gep24 = add i32 %gep_int22,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep21 = add i32 %gep_int19,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 56)
  %gep24 = add i32 %gep_int22,... (idx: 1) -> main_signed_add_32_18 (mux inputs: 32)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: wh_code_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_wh_code_table_local_mem_dual_port_0
  %254 = load i32* %253, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_wh_code_table_local_mem_dual_port_0
  %254 = load i32* %253, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %254 = load i32* %253, align... (idx: 0) -> main_wh_code_table_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %255 = add nsw i32 %252, %25... can share an output register with another operation already assigned to main_signed_add_32_0
  %255 = add nsw i32 %252, %25... can share an output register with another operation already assigned to main_signed_add_32_1
  %255 = add nsw i32 %252, %25... can share an output register with another operation already assigned to main_signed_add_32_2
  %255 = add nsw i32 %252, %25... can share an output register with another operation already assigned to main_signed_add_32_3
  %255 = add nsw i32 %252, %25... can share an output register with another operation already assigned to main_signed_add_32_4
  %255 = add nsw i32 %252, %25... can share an output register with another operation already assigned to main_signed_add_32_5
  %255 = add nsw i32 %252, %25... can share an output register with another operation already assigned to main_signed_add_32_6
  %255 = add nsw i32 %252, %25... can share an output register with another operation already assigned to main_signed_add_32_7
  %255 = add nsw i32 %252, %25... can share an output register with another operation already assigned to main_signed_add_32_8
  %255 = add nsw i32 %252, %25... can share an output register with another operation already assigned to main_signed_add_32_9
  %255 = add nsw i32 %252, %25... can share an output register with another operation already assigned to main_signed_add_32_10
  %255 = add nsw i32 %252, %25... can share an output register with another operation already assigned to main_signed_add_32_11
  %255 = add nsw i32 %252, %25... can share an output register with another operation already assigned to main_signed_add_32_12
  %255 = add nsw i32 %252, %25... can share an output register with another operation already assigned to main_signed_add_32_13
  %255 = add nsw i32 %252, %25... can share an output register with another operation already assigned to main_signed_add_32_15
  %255 = add nsw i32 %252, %25... can share an output register with another operation already assigned to main_signed_add_32_16
  %255 = add nsw i32 %252, %25... can share an output register with another operation already assigned to main_signed_add_32_17
  %255 = add nsw i32 %252, %25... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %255 = add nsw i32 %252, %25... (idx: 0)        -560                          -80                           -50                           -19                           -19                           -19                           -19                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -159                          -320                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %255 = add nsw i32 %252, %25... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %255 = add nsw i32 %252, %25... (idx: 0) -> main_signed_add_32_0 (mux inputs: 58)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %249 = mul nsw i32 %248, %de... hey can share an input with another operation already assigned to main_signed_multiply_32_27
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %249 = mul nsw i32 %248, %de... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %249 = mul nsw i32 %248, %de... (idx: 0)        -40                           -18                           -18                           -9                            -9                            -9                            -19                           -9                            -19                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -329                          -9                            -9                            -9                            -9                            -9                            -8                            -8                            -5                            -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %249 = mul nsw i32 %248, %de... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %249 = mul nsw i32 %248, %de... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 35)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %263 = sub i32 11, %260 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %263 = sub i32 11, %260 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %263 = sub i32 11, %260 (idx: 0)                -85                           -34                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %263 = sub i32 11, %260 (idx: 0)                1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %263 = sub i32 11, %260 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 10)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %266 = add nsw i32 %229, %25... can share an output register with another operation already assigned to main_signed_add_32_0
  %266 = add nsw i32 %229, %25... hey can share an input with another operation already assigned to main_signed_add_32_17
  %290 = add nsw i32 %250, %23... can share an output register with another operation already assigned to main_signed_add_32_0
  %290 = add nsw i32 %250, %23... can share an output register with another operation already assigned to main_signed_add_32_1
  %290 = add nsw i32 %250, %23... can share an output register with another operation already assigned to main_signed_add_32_2
  %290 = add nsw i32 %250, %23... can share an output register with another operation already assigned to main_signed_add_32_3
  %290 = add nsw i32 %250, %23... can share an output register with another operation already assigned to main_signed_add_32_4
  %290 = add nsw i32 %250, %23... can share an output register with another operation already assigned to main_signed_add_32_5
  %290 = add nsw i32 %250, %23... can share an output register with another operation already assigned to main_signed_add_32_6
  %290 = add nsw i32 %250, %23... can share an output register with another operation already assigned to main_signed_add_32_7
  %290 = add nsw i32 %250, %23... can share an output register with another operation already assigned to main_signed_add_32_8
  %290 = add nsw i32 %250, %23... can share an output register with another operation already assigned to main_signed_add_32_9
  %290 = add nsw i32 %250, %23... can share an output register with another operation already assigned to main_signed_add_32_10
  %290 = add nsw i32 %250, %23... can share an output register with another operation already assigned to main_signed_add_32_11
  %290 = add nsw i32 %250, %23... can share an output register with another operation already assigned to main_signed_add_32_12
  %290 = add nsw i32 %250, %23... can share an output register with another operation already assigned to main_signed_add_32_13
  %290 = add nsw i32 %250, %23... can share an output register with another operation already assigned to main_signed_add_32_15
  %290 = add nsw i32 %250, %23... can share an output register with another operation already assigned to main_signed_add_32_16
  %290 = add nsw i32 %250, %23... can share an output register with another operation already assigned to main_signed_add_32_17
  %290 = add nsw i32 %250, %23... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %266 = add nsw i32 %229, %25... (idx: 0)        -580                          -90                           -60                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -50                           -50                           -10                           -30                           -30                           -165                          -330                          
  %290 = add nsw i32 %250, %23... (idx: 1)        -580                          -80                           -50                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -160                          -320                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %266 = add nsw i32 %229, %25... (idx
  %290 = add nsw i32 %250, %23... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %290 = add nsw i32 %250, %23... (idx: 1) -> main_signed_add_32_0 (mux inputs: 60)
  %266 = add nsw i32 %229, %25... (idx: 0) -> main_signed_add_32_18 (mux inputs: 34)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %268 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %272 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %268 = mul nsw i32 %ph1.0, %... (idx: 0)        -40                           -20                           -20                           -10                           -10                           -9                            -20                           -10                           -20                           -10                           -10                           -10                           -10                           -10                           -9                            -10                           -9                            -10                           -10                           -349                          -10                           -9                            -10                           -9                            -10                           -10                           -10                           -9                            -10                           
  %272 = mul nsw i32 %ph2.0, %... (idx: 1)        -40                           -20                           -20                           -10                           -10                           -9                            -20                           -10                           -20                           -10                           -10                           -10                           -10                           -10                           -9                            -10                           -9                            -10                           -10                           -349                          -10                           -9                            -10                           -9                            -10                           -10                           -10                           -9                            -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %268 = mul nsw i32 %ph1.0, %... (idx
  %272 = mul nsw i32 %ph2.0, %... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %272 = mul nsw i32 %ph2.0, %... (idx: 1) -> main_signed_multiply_32_0 (mux inputs: 6)
  %268 = mul nsw i32 %ph1.0, %... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 37)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: ilb_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %262 = load i32* %261, align... can share an output register with another operation already assigned to main_ilb_table_local_mem_dual_port_0
                                                  main_ilb_table_local_mem_dual_port_0
  %262 = load i32* %261, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_ilb_table_local_mem_dual_port_0
  %262 = load i32* %261, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %262 = load i32* %261, align... (idx: 0) -> main_ilb_table_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_18
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_0
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_1
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_2
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_3
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_4
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_5
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_6
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_7
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_8
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_9
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_10
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_11
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_12
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_13
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_15
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_16
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_17
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_18
  %278 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_0
  %278 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_1
  %278 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_2
  %278 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_3
  %278 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_4
  %278 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_5
  %278 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_6
  %278 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_7
  %278 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_8
  %278 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_9
  %278 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_10
  %278 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_11
  %278 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_12
  %278 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_13
  %278 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_15
  %278 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_16
  %278 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_17
  %278 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_18
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_0
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_1
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_2
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_3
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_4
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_5
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_6
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_7
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_8
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_9
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_10
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_11
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_12
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_13
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_15
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_16
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_17
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep27 = add i32 %gep_int25,... (idx: 0)        -600                          -80                           -50                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -160                          -340                          
  %wd4.0.i.i4 = add nsw i32 %2... (idx: 1)        -600                          -80                           -50                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -160                          -340                          
  %278 = add nsw i32 %wd4.0.i.... (idx: 2)        -600                          -80                           -50                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -160                          -340                          
  %apl1.0.i.i7 = add nsw i32 %... (idx: 3)        -600                          -80                           -50                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -160                          -340                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep27 = add i32 %gep_int25,... (idx
  %wd4.0.i.i4 = add nsw i32 %2... (idx
  %278 = add nsw i32 %wd4.0.i.... (idx
  %apl1.0.i.i7 = add nsw i32 %... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep27 = add i32 %gep_int25,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 62)
  %apl1.0.i.i7 = add nsw i32 %... (idx: 3) -> main_signed_add_32_1 (mux inputs: 10)
  %278 = add nsw i32 %wd4.0.i.... (idx: 2) -> main_signed_add_32_17 (mux inputs: 18)
  %wd4.0.i.i4 = add nsw i32 %2... (idx: 1) -> main_signed_add_32_18 (mux inputs: 36)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %286 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_0
  %286 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_1
  %288 = sub nsw i32 0, %286 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %288 = sub nsw i32 0, %286 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %286 = sub nsw i32 15360, %.... (idx: 0)        -95                           -34                           
  %288 = sub nsw i32 0, %286 (idx: 1)             -95                           -35                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %286 = sub nsw i32 15360, %.... (idx: 0)        1                             0                             
  %288 = sub nsw i32 0, %286 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %286 = sub nsw i32 15360, %.... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 11)
  %288 = sub nsw i32 0, %286 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 5)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep30 = add i32 %gep_int28,... (idx: 0)        -620                          -100                          -50                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -180                          -360                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep30 = add i32 %gep_int28,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep30 = add i32 %gep_int28,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 64)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre = load i32* getelement... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre = load i32* getelement... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre16 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre16 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre = load i32* getelement... (idx: 0)        -10                           -10                           
  %.pre16 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre = load i32* getelement... (idx: 0)        1                             0                             
  %.pre16 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre = load i32* getelement... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre16 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre17 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre17 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre18 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre18 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre17 = load i32* geteleme... (idx: 0)        -10                           -10                           
  %.pre18 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre17 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre18 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre17 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre18 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre19 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre19 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre20 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre20 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre19 = load i32* geteleme... (idx: 0)        -10                           -10                           
  %.pre20 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre19 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre20 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre19 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre20 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre21 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre21 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre22 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre22 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre21 = load i32* geteleme... (idx: 0)        -10                           -10                           
  %.pre22 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre21 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre22 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre21 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre22 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre23 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre23 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre24 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre24 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre23 = load i32* geteleme... (idx: 0)        -10                           -10                           
  %.pre24 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre23 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre24 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre23 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre24 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre25 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre25 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre26 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre26 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre25 = load i32* geteleme... (idx: 0)        -10                           -10                           
  %.pre26 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre25 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre26 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre25 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre26 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre27 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre27 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre28 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre28 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre27 = load i32* geteleme... (idx: 0)        -10                           -10                           
  %.pre28 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre27 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre28 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre27 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre28 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre29 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre29 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre30 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre30 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre29 = load i32* geteleme... (idx: 0)        -10                           -10                           
  %.pre30 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre29 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre30 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre29 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre30 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre31 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre31 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre32 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre32 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre31 = load i32* geteleme... (idx: 0)        -10                           -10                           
  %.pre32 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre31 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre32 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre31 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre32 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre33 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre33 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre34 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre34 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre33 = load i32* geteleme... (idx: 0)        -10                           -10                           
  %.pre34 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre33 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre34 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre33 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre34 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre35 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre35 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre36 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre36 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre35 = load i32* geteleme... (idx: 0)        -10                           -10                           
  %.pre36 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre35 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre36 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre35 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre36 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre37 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre37 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre38 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre38 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre37 = load i32* geteleme... (idx: 0)        -10                           -10                           
  %.pre38 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre37 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre38 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre37 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre38 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_preheaderipreheader
Binding functional unit type: qq6_code6_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_qq6_code6_table_local_mem_dual_port_0
  %298 = load i32* %297, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_qq6_code6_table_local_mem_dual_port_0
  %298 = load i32* %297, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %298 = load i32* %297, align... (idx: 0) -> main_qq6_code6_table_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_preheaderipreheader
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep33 = add i32 %gep_int31,... (idx: 0)        -640                          -100                          -50                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -180                          -360                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep33 = add i32 %gep_int31,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep33 = add i32 %gep_int31,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 66)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %304 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %304 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %305 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %305 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %304 = load i32* getelementp... (idx: 0)        1                             11                            
  %305 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %304 = load i32* getelementp... (idx: 0)        1                             0                             
  %305 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %304 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %305 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %545 = add nsw i32 %i.11.i, ... (idx: 0)        -664                          -105                          -54                           -24                           -24                           -23                           -22                           -23                           -23                           -24                           -24                           -23                           -43                           -43                           -3                            -23                           -24                           -184                          -365                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %545 = add nsw i32 %i.11.i, ... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %545 = add nsw i32 %i.11.i, ... (idx: 0) -> main_signed_add_32_0 (mux inputs: 67)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_divide_32
Weight matrix for operation/function unit matching:
  %299 = sdiv i32 %i.11.i, 2 can share an output register with another operation already assigned to main_signed_divide_32_0
                                                  main_signed_divide_32_0       
  %299 = sdiv i32 %i.11.i, 2 (idx: 0)             95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_divide_32_0       
  %299 = sdiv i32 %i.11.i, 2 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %299 = sdiv i32 %i.11.i, 2 (idx: 0) -> main_signed_divide_32_0 (mux inputs: 2)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %349 = mul nsw i32 %348, %de... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %357 = mul nsw i32 %298, %de... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %360 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %385 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %390 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %445 = mul nsw i32 %444, %de... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %452 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %477 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %482 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %496 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %498 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %506 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %508 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %510 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %512 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %514 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %516 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %518 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %520 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %522 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %524 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %528 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %530 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %532 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %534 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %536 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %538 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %349 = mul nsw i32 %348, %de... (idx: 0)        -60                           -20                           -20                           -10                           -10                           -10                           -20                           -10                           -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -370                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %357 = mul nsw i32 %298, %de... (idx: 1)        -60                           -18                           -18                           -9                            -9                            -10                           -19                           -9                            -19                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -369                          -9                            -9                            -9                            -9                            -9                            -8                            -8                            -9                            -8                            
  %360 = mul nsw i32 %dec_nbl.... (idx: 2)        -55                           -14                           -15                           -4                            -4                            -4                            -15                           -5                            -14                           -4                            -4                            -5                            -5                            -4                            -4                            -4                            -4                            -4                            -4                            -364                          -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -5                            
  %385 = mul nsw i32 %dec_al2.... (idx: 3)        -55                           -14                           -15                           -4                            -4                            -4                            -15                           -5                            -14                           -4                            -4                            -5                            -5                            -4                            -4                            -4                            -4                            -4                            -4                            -364                          -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -5                            
  %390 = mul nsw i32 %dec_al1.... (idx: 4)        -54                           -15                           -14                           -4                            -4                            -4                            -14                           -4                            -15                           -4                            -4                            -4                            -4                            -5                            -4                            -4                            -4                            -4                            -4                            -364                          -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            
  %445 = mul nsw i32 %444, %de... (idx: 5)        -60                           -20                           -20                           -10                           -10                           -10                           -20                           -10                           -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -370                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %452 = mul nsw i32 %dec_nbh.... (idx: 6)        -55                           -14                           -15                           -4                            -4                            -4                            -15                           -5                            -14                           -4                            -4                            -5                            -5                            -4                            -4                            -4                            -4                            -4                            -4                            -364                          -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -5                            
  %477 = mul nsw i32 %dec_ah2.... (idx: 7)        -55                           -14                           -15                           -4                            -4                            -4                            -15                           -5                            -14                           -4                            -4                            -5                            -5                            -4                            -4                            -4                            -4                            -4                            -4                            -364                          -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -5                            
  %482 = mul nsw i32 %dec_ah1.... (idx: 8)        -54                           -15                           -14                           -4                            -4                            -4                            -14                           -4                            -15                           -4                            -4                            -4                            -4                            -5                            -4                            -4                            -4                            -4                            -4                            -364                          -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            
  %496 = mul nsw i32 %accumc.0... (idx: 9)        -54                           -14                           -14                           -4                            -3                            -4                            -13                           -3                            -14                           -4                            -3                            -3                            -3                            -4                            -4                            -3                            -4                            -3                            -3                            -364                          -3                            -4                            -3                            -4                            -3                            -4                            -3                            -4                            -3                            
  %498 = mul nsw i32 %accumd.0... (idx: 10)       -54                           -14                           -14                           -4                            -4                            -3                            -15                           -4                            -14                           -4                            -4                            -4                            -4                            -4                            -3                            -5                            -3                            -4                            -4                            -363                          -4                            -4                            -4                            -3                            -4                            -4                            -4                            -4                            -4                            
  %500 = mul nsw i32 %accumc.1... (idx: 11)       -54                           -14                           -14                           -4                            -3                            -4                            -13                           -4                            -14                           -4                            -3                            -3                            -3                            -4                            -4                            -3                            -5                            -3                            -3                            -364                          -4                            -4                            -3                            -4                            -3                            -4                            -4                            -4                            -3                            
  %502 = mul nsw i32 %accumd.1... (idx: 12)       -54                           -14                           -14                           -4                            -4                            -3                            -14                           -4                            -14                           -4                            -4                            -4                            -4                            -4                            -3                            -4                            -3                            -4                            -4                            -363                          -4                            -3                            -4                            -3                            -4                            -4                            -4                            -3                            -4                            
  %506 = mul nsw i32 %accumd.2... (idx: 13)       -54                           -14                           -15                           -4                            -4                            -3                            -14                           -4                            -14                           -5                            -4                            -4                            -4                            -4                            -3                            -4                            -3                            -4                            -5                            -363                          -4                            -3                            -4                            -3                            -4                            -4                            -4                            -3                            -4                            
  %508 = mul nsw i32 %accumc.3... (idx: 14)       -54                           -14                           -14                           -4                            -3                            -4                            -13                           -3                            -14                           -4                            -3                            -3                            -3                            -4                            -4                            -3                            -4                            -3                            -3                            -364                          -3                            -4                            -3                            -4                            -3                            -4                            -3                            -4                            -3                            
  %510 = mul nsw i32 %accumd.3... (idx: 15)       -54                           -14                           -14                           -4                            -4                            -3                            -14                           -4                            -14                           -4                            -4                            -4                            -4                            -4                            -3                            -4                            -3                            -4                            -4                            -363                          -4                            -3                            -4                            -3                            -4                            -4                            -4                            -3                            -4                            
  %512 = mul nsw i32 %accumc.4... (idx: 16)       -54                           -14                           -14                           -4                            -3                            -4                            -13                           -3                            -14                           -4                            -3                            -3                            -4                            -4                            -4                            -4                            -4                            -3                            -3                            -364                          -3                            -5                            -3                            -4                            -4                            -4                            -3                            -4                            -3                            
  %514 = mul nsw i32 %accumd.4... (idx: 17)       -54                           -14                           -14                           -4                            -4                            -3                            -14                           -4                            -14                           -4                            -4                            -4                            -4                            -5                            -4                            -4                            -3                            -4                            -4                            -363                          -4                            -3                            -5                            -4                            -4                            -4                            -4                            -3                            -4                            
  %516 = mul nsw i32 %accumc.5... (idx: 18)       -54                           -14                           -14                           -4                            -3                            -4                            -13                           -3                            -14                           -4                            -3                            -3                            -3                            -5                            -5                            -3                            -4                            -3                            -3                            -364                          -3                            -4                            -4                            -5                            -3                            -4                            -3                            -4                            -3                            
  %518 = mul nsw i32 %accumd.5... (idx: 19)       -54                           -14                           -14                           -4                            -4                            -3                            -14                           -4                            -14                           -4                            -4                            -4                            -5                            -4                            -3                            -5                            -3                            -4                            -4                            -363                          -4                            -4                            -4                            -3                            -5                            -4                            -4                            -3                            -4                            
  %520 = mul nsw i32 %accumc.6... (idx: 20)       -54                           -14                           -14                           -4                            -3                            -4                            -13                           -3                            -14                           -4                            -3                            -3                            -3                            -4                            -4                            -3                            -4                            -3                            -3                            -364                          -3                            -4                            -3                            -4                            -3                            -4                            -3                            -4                            -3                            
  %522 = mul nsw i32 %accumd.6... (idx: 21)       -54                           -14                           -14                           -4                            -4                            -3                            -14                           -4                            -14                           -4                            -4                            -4                            -4                            -4                            -3                            -4                            -3                            -4                            -4                            -363                          -4                            -3                            -4                            -3                            -4                            -4                            -4                            -3                            -4                            
  %524 = mul nsw i32 %accumc.7... (idx: 22)       -54                           -14                           -15                           -4                            -3                            -4                            -13                           -3                            -14                           -5                            -3                            -3                            -3                            -4                            -4                            -3                            -4                            -3                            -4                            -364                          -3                            -4                            -3                            -4                            -3                            -4                            -3                            -4                            -3                            
  %528 = mul nsw i32 %accumc.8... (idx: 23)       -54                           -14                           -14                           -4                            -3                            -4                            -13                           -3                            -14                           -4                            -3                            -3                            -3                            -4                            -4                            -3                            -4                            -3                            -3                            -364                          -3                            -4                            -3                            -4                            -3                            -4                            -3                            -4                            -3                            
  %530 = mul nsw i32 %accumd.8... (idx: 24)       -54                           -14                           -14                           -4                            -4                            -3                            -14                           -5                            -14                           -4                            -4                            -4                            -4                            -4                            -3                            -4                            -4                            -4                            -4                            -363                          -5                            -3                            -4                            -3                            -4                            -4                            -5                            -3                            -4                            
  %532 = mul nsw i32 %accumc.9... (idx: 25)       -54                           -14                           -14                           -4                            -3                            -4                            -14                           -3                            -14                           -4                            -3                            -3                            -3                            -4                            -4                            -4                            -4                            -3                            -3                            -364                          -3                            -5                            -3                            -4                            -3                            -4                            -3                            -5                            -3                            
  %534 = mul nsw i32 %accumd.9... (idx: 26)       -54                           -14                           -14                           -4                            -4                            -3                            -14                           -4                            -14                           -4                            -4                            -4                            -4                            -4                            -3                            -4                            -3                            -4                            -4                            -363                          -4                            -3                            -4                            -3                            -4                            -4                            -4                            -3                            -4                            
  %536 = mul nsw i32 %accumc.1... (idx: 27)       -54                           -14                           -14                           -4                            -3                            -4                            -13                           -3                            -14                           -4                            -3                            -3                            -3                            -4                            -4                            -3                            -4                            -3                            -3                            -364                          -3                            -4                            -3                            -4                            -3                            -4                            -3                            -4                            -3                            
  %538 = mul nsw i32 %accumd.1... (idx: 28)       -54                           -14                           -14                           -5                            -4                            -3                            -14                           -4                            -14                           -4                            -4                            -4                            -4                            -4                            -3                            -4                            -3                            -4                            -4                            -363                          -4                            -3                            -4                            -3                            -5                            -4                            -4                            -3                            -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %349 = mul nsw i32 %348, %de... (idx
  %357 = mul nsw i32 %298, %de... (idx: 1)        0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %360 = mul nsw i32 %dec_nbl.... (idx: 2)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %385 = mul nsw i32 %dec_al2.... (idx
  %390 = mul nsw i32 %dec_al1.... (idx
  %445 = mul nsw i32 %444, %de... (idx: 5)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             
  %452 = mul nsw i32 %dec_nbh.... (idx
  %477 = mul nsw i32 %dec_ah2.... (idx
  %482 = mul nsw i32 %dec_ah1.... (idx
  %496 = mul nsw i32 %accumc.0... (idx
  %498 = mul nsw i32 %accumd.0... (idx
  %500 = mul nsw i32 %accumc.1... (idx
  %502 = mul nsw i32 %accumd.1... (idx
  %506 = mul nsw i32 %accumd.2... (idx
  %508 = mul nsw i32 %accumc.3... (idx: 14)       0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %510 = mul nsw i32 %accumd.3... (idx
  %512 = mul nsw i32 %accumc.4... (idx
  %514 = mul nsw i32 %accumd.4... (idx
  %516 = mul nsw i32 %accumc.5... (idx
  %518 = mul nsw i32 %accumd.5... (idx: 19)       0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %520 = mul nsw i32 %accumc.6... (idx: 20)       0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             
  %522 = mul nsw i32 %accumd.6... (idx
  %524 = mul nsw i32 %accumc.7... (idx
  %528 = mul nsw i32 %accumc.8... (idx: 23)       0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             
  %530 = mul nsw i32 %accumd.8... (idx: 24)       0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %532 = mul nsw i32 %accumc.9... (idx
  %534 = mul nsw i32 %accumd.9... (idx
  %536 = mul nsw i32 %accumc.1... (idx
  %538 = mul nsw i32 %accumd.1... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %452 = mul nsw i32 %dec_nbh.... (idx: 6) -> main_signed_multiply_32_0 (mux inputs: 7)
  %390 = mul nsw i32 %dec_al1.... (idx: 4) -> main_signed_multiply_32_1 (mux inputs: 3)
  %496 = mul nsw i32 %accumc.0... (idx: 9) -> main_signed_multiply_32_2 (mux inputs: 3)
  %538 = mul nsw i32 %accumd.1... (idx: 28) -> main_signed_multiply_32_3 (mux inputs: 2)
  %534 = mul nsw i32 %accumd.9... (idx: 26) -> main_signed_multiply_32_4 (mux inputs: 2)
  %357 = mul nsw i32 %298, %de... (idx: 1) -> main_signed_multiply_32_5 (mux inputs: 3)
  %477 = mul nsw i32 %dec_ah2.... (idx: 7) -> main_signed_multiply_32_6 (mux inputs: 3)
  %530 = mul nsw i32 %accumd.8... (idx: 24) -> main_signed_multiply_32_7 (mux inputs: 2)
  %482 = mul nsw i32 %dec_ah1.... (idx: 8) -> main_signed_multiply_32_8 (mux inputs: 3)
  %524 = mul nsw i32 %accumc.7... (idx: 22) -> main_signed_multiply_32_9 (mux inputs: 2)
  %502 = mul nsw i32 %accumd.1... (idx: 12) -> main_signed_multiply_32_10 (mux inputs: 2)
  %360 = mul nsw i32 %dec_nbl.... (idx: 2) -> main_signed_multiply_32_11 (mux inputs: 2)
  %518 = mul nsw i32 %accumd.5... (idx: 19) -> main_signed_multiply_32_12 (mux inputs: 2)
  %536 = mul nsw i32 %accumc.1... (idx: 27) -> main_signed_multiply_32_13 (mux inputs: 2)
  %516 = mul nsw i32 %accumc.5... (idx: 18) -> main_signed_multiply_32_14 (mux inputs: 2)
  %498 = mul nsw i32 %accumd.0... (idx: 10) -> main_signed_multiply_32_15 (mux inputs: 2)
  %500 = mul nsw i32 %accumc.1... (idx: 11) -> main_signed_multiply_32_16 (mux inputs: 2)
  %510 = mul nsw i32 %accumd.3... (idx: 15) -> main_signed_multiply_32_17 (mux inputs: 2)
  %506 = mul nsw i32 %accumd.2... (idx: 13) -> main_signed_multiply_32_18 (mux inputs: 2)
  %508 = mul nsw i32 %accumc.3... (idx: 14) -> main_signed_multiply_32_19 (mux inputs: 38)
  %349 = mul nsw i32 %348, %de... (idx: 0) -> main_signed_multiply_32_20 (mux inputs: 3)
  %512 = mul nsw i32 %accumc.4... (idx: 16) -> main_signed_multiply_32_21 (mux inputs: 2)
  %514 = mul nsw i32 %accumd.4... (idx: 17) -> main_signed_multiply_32_22 (mux inputs: 1)
  %520 = mul nsw i32 %accumc.6... (idx: 20) -> main_signed_multiply_32_23 (mux inputs: 1)
  %522 = mul nsw i32 %accumd.6... (idx: 21) -> main_signed_multiply_32_24 (mux inputs: 2)
  %528 = mul nsw i32 %accumc.8... (idx: 23) -> main_signed_multiply_32_25 (mux inputs: 1)
  %445 = mul nsw i32 %444, %de... (idx: 5) -> main_signed_multiply_32_26 (mux inputs: 2)
  %532 = mul nsw i32 %accumc.9... (idx: 25) -> main_signed_multiply_32_27 (mux inputs: 2)
  %385 = mul nsw i32 %dec_al2.... (idx: 3) -> main_signed_multiply_32_28 (mux inputs: 2)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %379 = sub nsw i32 0, %376 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %379 = sub nsw i32 0, %376 can share an output register with another operation already assigned to main_signed_subtract_32_1
  %471 = sub nsw i32 0, %468 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %471 = sub nsw i32 0, %468 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %379 = sub nsw i32 0, %376 (idx: 0)             -105                          -45                           
  %471 = sub nsw i32 0, %468 (idx: 1)             -105                          -45                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %379 = sub nsw i32 0, %376 (idx: 0)             1                             0                             
  %471 = sub nsw i32 0, %468 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %379 = sub nsw i32 0, %376 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 12)
  %471 = sub nsw i32 0, %468 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 6)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %307 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %307 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %308 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %308 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %307 = load i32* getelementp... (idx: 0)        1                             11                            
  %308 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %307 = load i32* getelementp... (idx: 0)        1                             0                             
  %308 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %307 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %308 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %394 = add nsw i32 %391, 192 can share an output register with another operation already assigned to main_signed_add_32_0
  %394 = add nsw i32 %391, 192 can share an output register with another operation already assigned to main_signed_add_32_1
  %394 = add nsw i32 %391, 192 can share an output register with another operation already assigned to main_signed_add_32_2
  %394 = add nsw i32 %391, 192 can share an output register with another operation already assigned to main_signed_add_32_3
  %394 = add nsw i32 %391, 192 can share an output register with another operation already assigned to main_signed_add_32_4
  %394 = add nsw i32 %391, 192 can share an output register with another operation already assigned to main_signed_add_32_5
  %394 = add nsw i32 %391, 192 can share an output register with another operation already assigned to main_signed_add_32_6
  %394 = add nsw i32 %391, 192 can share an output register with another operation already assigned to main_signed_add_32_7
  %394 = add nsw i32 %391, 192 can share an output register with another operation already assigned to main_signed_add_32_8
  %394 = add nsw i32 %391, 192 can share an output register with another operation already assigned to main_signed_add_32_9
  %394 = add nsw i32 %391, 192 can share an output register with another operation already assigned to main_signed_add_32_10
  %394 = add nsw i32 %391, 192 can share an output register with another operation already assigned to main_signed_add_32_11
  %394 = add nsw i32 %391, 192 can share an output register with another operation already assigned to main_signed_add_32_12
  %394 = add nsw i32 %391, 192 can share an output register with another operation already assigned to main_signed_add_32_13
  %394 = add nsw i32 %391, 192 can share an output register with another operation already assigned to main_signed_add_32_15
  %394 = add nsw i32 %391, 192 can share an output register with another operation already assigned to main_signed_add_32_16
  %394 = add nsw i32 %391, 192 can share an output register with another operation already assigned to main_signed_add_32_17
  %394 = add nsw i32 %391, 192 can share an output register with another operation already assigned to main_signed_add_32_18
  %486 = add nsw i32 %483, 192 can share an output register with another operation already assigned to main_signed_add_32_0
  %486 = add nsw i32 %483, 192 can share an output register with another operation already assigned to main_signed_add_32_1
  %486 = add nsw i32 %483, 192 can share an output register with another operation already assigned to main_signed_add_32_2
  %486 = add nsw i32 %483, 192 can share an output register with another operation already assigned to main_signed_add_32_3
  %486 = add nsw i32 %483, 192 can share an output register with another operation already assigned to main_signed_add_32_4
  %486 = add nsw i32 %483, 192 can share an output register with another operation already assigned to main_signed_add_32_5
  %486 = add nsw i32 %483, 192 can share an output register with another operation already assigned to main_signed_add_32_6
  %486 = add nsw i32 %483, 192 can share an output register with another operation already assigned to main_signed_add_32_7
  %486 = add nsw i32 %483, 192 can share an output register with another operation already assigned to main_signed_add_32_8
  %486 = add nsw i32 %483, 192 can share an output register with another operation already assigned to main_signed_add_32_9
  %486 = add nsw i32 %483, 192 can share an output register with another operation already assigned to main_signed_add_32_10
  %486 = add nsw i32 %483, 192 can share an output register with another operation already assigned to main_signed_add_32_11
  %486 = add nsw i32 %483, 192 can share an output register with another operation already assigned to main_signed_add_32_12
  %486 = add nsw i32 %483, 192 can share an output register with another operation already assigned to main_signed_add_32_13
  %486 = add nsw i32 %483, 192 can share an output register with another operation already assigned to main_signed_add_32_15
  %486 = add nsw i32 %483, 192 can share an output register with another operation already assigned to main_signed_add_32_16
  %486 = add nsw i32 %483, 192 can share an output register with another operation already assigned to main_signed_add_32_17
  %486 = add nsw i32 %483, 192 can share an output register with another operation already assigned to main_signed_add_32_18
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_18
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %394 = add nsw i32 %391, 192 (idx: 0)           -665                          -94                           -44                           -14                           -14                           -14                           -14                           -14                           -14                           -14                           -14                           -14                           -34                           -34                           -4                            -14                           -14                           -174                          -355                          
  %486 = add nsw i32 %483, 192 (idx: 1)           -665                          -94                           -44                           -14                           -14                           -14                           -14                           -14                           -14                           -14                           -14                           -14                           -34                           -34                           -4                            -14                           -14                           -174                          -355                          
  %gep57 = add i32 %gep_int55,... (idx: 2)        -670                          -100                          -50                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -180                          -360                          
  %gep60 = add i32 %gep_int58,... (idx: 3)        -670                          -100                          -50                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -180                          -360                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %394 = add nsw i32 %391, 192 (idx
  %486 = add nsw i32 %483, 192 (idx
  %gep57 = add i32 %gep_int55,... (idx
  %gep60 = add i32 %gep_int58,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %394 = add nsw i32 %391, 192 (idx: 0) -> main_signed_add_32_0 (mux inputs: 68)
  %gep60 = add i32 %gep_int58,... (idx: 3) -> main_signed_add_32_1 (mux inputs: 12)
  %gep57 = add i32 %gep_int55,... (idx: 2) -> main_signed_add_32_17 (mux inputs: 20)
  %486 = add nsw i32 %483, 192 (idx: 1) -> main_signed_add_32_18 (mux inputs: 37)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %311 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %311 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %312 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %312 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %311 = load i32* getelementp... (idx: 0)        1                             11                            
  %312 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %311 = load i32* getelementp... (idx: 0)        1                             0                             
  %312 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %311 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %312 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %306 = mul nsw i32 %305, %30... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %306 = mul nsw i32 %305, %30... (idx: 0)        -70                           -28                           -28                           -20                           -20                           -30                           -30                           -20                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -380                          -30                           -20                           -20                           -20                           -20                           -18                           -18                           -20                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %306 = mul nsw i32 %305, %30... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %306 = mul nsw i32 %305, %30... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 40)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %315 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %315 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %316 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %316 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %315 = load i32* getelementp... (idx: 0)        1                             11                            
  %316 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %315 = load i32* getelementp... (idx: 0)        1                             0                             
  %316 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %315 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %316 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %309 = mul nsw i32 %308, %30... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %309 = mul nsw i32 %308, %30... (idx: 0)        -70                           -28                           -28                           -20                           -20                           -30                           -30                           -20                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -400                          -30                           -20                           -20                           -20                           -20                           -18                           -18                           -20                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %309 = mul nsw i32 %308, %30... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %309 = mul nsw i32 %308, %30... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 42)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %319 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %319 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %320 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %320 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %319 = load i32* getelementp... (idx: 0)        1                             11                            
  %320 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %319 = load i32* getelementp... (idx: 0)        1                             0                             
  %320 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %319 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %320 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %310 = add nsw i32 %309, %30... can share an output register with another operation already assigned to main_signed_add_32_0
  %310 = add nsw i32 %309, %30... can share an output register with another operation already assigned to main_signed_add_32_1
  %310 = add nsw i32 %309, %30... can share an output register with another operation already assigned to main_signed_add_32_2
  %310 = add nsw i32 %309, %30... can share an output register with another operation already assigned to main_signed_add_32_3
  %310 = add nsw i32 %309, %30... can share an output register with another operation already assigned to main_signed_add_32_4
  %310 = add nsw i32 %309, %30... can share an output register with another operation already assigned to main_signed_add_32_5
  %310 = add nsw i32 %309, %30... can share an output register with another operation already assigned to main_signed_add_32_6
  %310 = add nsw i32 %309, %30... can share an output register with another operation already assigned to main_signed_add_32_7
  %310 = add nsw i32 %309, %30... can share an output register with another operation already assigned to main_signed_add_32_8
  %310 = add nsw i32 %309, %30... can share an output register with another operation already assigned to main_signed_add_32_9
  %310 = add nsw i32 %309, %30... can share an output register with another operation already assigned to main_signed_add_32_10
  %310 = add nsw i32 %309, %30... can share an output register with another operation already assigned to main_signed_add_32_11
  %310 = add nsw i32 %309, %30... can share an output register with another operation already assigned to main_signed_add_32_12
  %310 = add nsw i32 %309, %30... can share an output register with another operation already assigned to main_signed_add_32_13
  %310 = add nsw i32 %309, %30... can share an output register with another operation already assigned to main_signed_add_32_15
  %310 = add nsw i32 %309, %30... can share an output register with another operation already assigned to main_signed_add_32_16
  %310 = add nsw i32 %309, %30... can share an output register with another operation already assigned to main_signed_add_32_17
  %310 = add nsw i32 %309, %30... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %310 = add nsw i32 %309, %30... (idx: 0)        -680                          -120                          -50                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -200                          -370                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %310 = add nsw i32 %309, %30... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %310 = add nsw i32 %309, %30... (idx: 0) -> main_signed_add_32_0 (mux inputs: 70)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %313 = mul nsw i32 %312, %31... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %313 = mul nsw i32 %312, %31... (idx: 0)        -70                           -28                           -28                           -20                           -20                           -30                           -30                           -20                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -420                          -30                           -20                           -20                           -20                           -20                           -18                           -18                           -20                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %313 = mul nsw i32 %312, %31... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %313 = mul nsw i32 %312, %31... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 44)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %323 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %323 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %324 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %324 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %323 = load i32* getelementp... (idx: 0)        1                             11                            
  %324 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %323 = load i32* getelementp... (idx: 0)        1                             0                             
  %324 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %323 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %324 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %314 = add nsw i32 %310, %31... can share an output register with another operation already assigned to main_signed_add_32_0
  %314 = add nsw i32 %310, %31... can share an output register with another operation already assigned to main_signed_add_32_1
  %314 = add nsw i32 %310, %31... can share an output register with another operation already assigned to main_signed_add_32_2
  %314 = add nsw i32 %310, %31... can share an output register with another operation already assigned to main_signed_add_32_3
  %314 = add nsw i32 %310, %31... can share an output register with another operation already assigned to main_signed_add_32_4
  %314 = add nsw i32 %310, %31... can share an output register with another operation already assigned to main_signed_add_32_5
  %314 = add nsw i32 %310, %31... can share an output register with another operation already assigned to main_signed_add_32_6
  %314 = add nsw i32 %310, %31... can share an output register with another operation already assigned to main_signed_add_32_7
  %314 = add nsw i32 %310, %31... can share an output register with another operation already assigned to main_signed_add_32_8
  %314 = add nsw i32 %310, %31... can share an output register with another operation already assigned to main_signed_add_32_9
  %314 = add nsw i32 %310, %31... can share an output register with another operation already assigned to main_signed_add_32_10
  %314 = add nsw i32 %310, %31... can share an output register with another operation already assigned to main_signed_add_32_11
  %314 = add nsw i32 %310, %31... can share an output register with another operation already assigned to main_signed_add_32_12
  %314 = add nsw i32 %310, %31... can share an output register with another operation already assigned to main_signed_add_32_13
  %314 = add nsw i32 %310, %31... can share an output register with another operation already assigned to main_signed_add_32_15
  %314 = add nsw i32 %310, %31... can share an output register with another operation already assigned to main_signed_add_32_16
  %314 = add nsw i32 %310, %31... can share an output register with another operation already assigned to main_signed_add_32_17
  %314 = add nsw i32 %310, %31... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %314 = add nsw i32 %310, %31... (idx: 0)        -700                          -120                          -50                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -200                          -370                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %314 = add nsw i32 %310, %31... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %314 = add nsw i32 %310, %31... (idx: 0) -> main_signed_add_32_0 (mux inputs: 72)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %317 = mul nsw i32 %316, %31... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %317 = mul nsw i32 %316, %31... (idx: 0)        -70                           -28                           -28                           -20                           -20                           -30                           -30                           -20                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -440                          -30                           -20                           -20                           -20                           -20                           -18                           -18                           -20                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %317 = mul nsw i32 %316, %31... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %317 = mul nsw i32 %316, %31... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 46)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %327 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %327 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %328 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %328 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %327 = load i32* getelementp... (idx: 0)        1                             11                            
  %328 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %327 = load i32* getelementp... (idx: 0)        1                             0                             
  %328 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %327 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %328 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %318 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_0
  %318 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_1
  %318 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_2
  %318 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_3
  %318 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_4
  %318 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_5
  %318 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_6
  %318 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_7
  %318 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_8
  %318 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_9
  %318 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_10
  %318 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_11
  %318 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_12
  %318 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_13
  %318 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_15
  %318 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_16
  %318 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_17
  %318 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %318 = add nsw i32 %314, %31... (idx: 0)        -720                          -120                          -50                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -200                          -370                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %318 = add nsw i32 %314, %31... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %318 = add nsw i32 %314, %31... (idx: 0) -> main_signed_add_32_0 (mux inputs: 74)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %321 = mul nsw i32 %320, %31... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %321 = mul nsw i32 %320, %31... (idx: 0)        -70                           -28                           -28                           -20                           -20                           -30                           -30                           -20                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -460                          -30                           -20                           -20                           -20                           -20                           -18                           -18                           -20                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %321 = mul nsw i32 %320, %31... (idx: 0)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %321 = mul nsw i32 %320, %31... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 48)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %331 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %331 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %332 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %332 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %331 = load i32* getelementp... (idx: 0)        1                             11                            
  %332 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %331 = load i32* getelementp... (idx: 0)        1                             0                             
  %332 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %331 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %332 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %322 = add nsw i32 %318, %32... can share an output register with another operation already assigned to main_signed_add_32_0
  %322 = add nsw i32 %318, %32... can share an output register with another operation already assigned to main_signed_add_32_1
  %322 = add nsw i32 %318, %32... can share an output register with another operation already assigned to main_signed_add_32_2
  %322 = add nsw i32 %318, %32... can share an output register with another operation already assigned to main_signed_add_32_3
  %322 = add nsw i32 %318, %32... can share an output register with another operation already assigned to main_signed_add_32_4
  %322 = add nsw i32 %318, %32... can share an output register with another operation already assigned to main_signed_add_32_5
  %322 = add nsw i32 %318, %32... can share an output register with another operation already assigned to main_signed_add_32_6
  %322 = add nsw i32 %318, %32... can share an output register with another operation already assigned to main_signed_add_32_7
  %322 = add nsw i32 %318, %32... can share an output register with another operation already assigned to main_signed_add_32_8
  %322 = add nsw i32 %318, %32... can share an output register with another operation already assigned to main_signed_add_32_9
  %322 = add nsw i32 %318, %32... can share an output register with another operation already assigned to main_signed_add_32_10
  %322 = add nsw i32 %318, %32... can share an output register with another operation already assigned to main_signed_add_32_11
  %322 = add nsw i32 %318, %32... can share an output register with another operation already assigned to main_signed_add_32_12
  %322 = add nsw i32 %318, %32... can share an output register with another operation already assigned to main_signed_add_32_13
  %322 = add nsw i32 %318, %32... can share an output register with another operation already assigned to main_signed_add_32_15
  %322 = add nsw i32 %318, %32... can share an output register with another operation already assigned to main_signed_add_32_16
  %322 = add nsw i32 %318, %32... can share an output register with another operation already assigned to main_signed_add_32_17
  %322 = add nsw i32 %318, %32... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %322 = add nsw i32 %318, %32... (idx: 0)        -740                          -120                          -50                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -200                          -370                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %322 = add nsw i32 %318, %32... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %322 = add nsw i32 %318, %32... (idx: 0) -> main_signed_add_32_0 (mux inputs: 76)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %325 = mul nsw i32 %324, %32... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %325 = mul nsw i32 %324, %32... (idx: 0)        -70                           -28                           -28                           -20                           -20                           -30                           -30                           -20                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -480                          -30                           -20                           -20                           -20                           -20                           -18                           -18                           -20                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %325 = mul nsw i32 %324, %32... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %325 = mul nsw i32 %324, %32... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 50)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %335 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %335 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %336 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %336 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %335 = load i32* getelementp... (idx: 0)        1                             11                            
  %336 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %335 = load i32* getelementp... (idx: 0)        1                             0                             
  %336 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %335 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %336 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %326 = add nsw i32 %322, %32... can share an output register with another operation already assigned to main_signed_add_32_0
  %326 = add nsw i32 %322, %32... can share an output register with another operation already assigned to main_signed_add_32_1
  %326 = add nsw i32 %322, %32... can share an output register with another operation already assigned to main_signed_add_32_2
  %326 = add nsw i32 %322, %32... can share an output register with another operation already assigned to main_signed_add_32_3
  %326 = add nsw i32 %322, %32... can share an output register with another operation already assigned to main_signed_add_32_4
  %326 = add nsw i32 %322, %32... can share an output register with another operation already assigned to main_signed_add_32_5
  %326 = add nsw i32 %322, %32... can share an output register with another operation already assigned to main_signed_add_32_6
  %326 = add nsw i32 %322, %32... can share an output register with another operation already assigned to main_signed_add_32_7
  %326 = add nsw i32 %322, %32... can share an output register with another operation already assigned to main_signed_add_32_8
  %326 = add nsw i32 %322, %32... can share an output register with another operation already assigned to main_signed_add_32_9
  %326 = add nsw i32 %322, %32... can share an output register with another operation already assigned to main_signed_add_32_10
  %326 = add nsw i32 %322, %32... can share an output register with another operation already assigned to main_signed_add_32_11
  %326 = add nsw i32 %322, %32... can share an output register with another operation already assigned to main_signed_add_32_12
  %326 = add nsw i32 %322, %32... can share an output register with another operation already assigned to main_signed_add_32_13
  %326 = add nsw i32 %322, %32... can share an output register with another operation already assigned to main_signed_add_32_15
  %326 = add nsw i32 %322, %32... can share an output register with another operation already assigned to main_signed_add_32_16
  %326 = add nsw i32 %322, %32... can share an output register with another operation already assigned to main_signed_add_32_17
  %326 = add nsw i32 %322, %32... can share an output register with another operation already assigned to main_signed_add_32_18
  %329 = add i32 %326, %327 can share an output register with another operation already assigned to main_signed_add_32_0
  %329 = add i32 %326, %327 can share an output register with another operation already assigned to main_signed_add_32_1
  %329 = add i32 %326, %327 can share an output register with another operation already assigned to main_signed_add_32_2
  %329 = add i32 %326, %327 can share an output register with another operation already assigned to main_signed_add_32_3
  %329 = add i32 %326, %327 can share an output register with another operation already assigned to main_signed_add_32_4
  %329 = add i32 %326, %327 can share an output register with another operation already assigned to main_signed_add_32_5
  %329 = add i32 %326, %327 can share an output register with another operation already assigned to main_signed_add_32_6
  %329 = add i32 %326, %327 can share an output register with another operation already assigned to main_signed_add_32_7
  %329 = add i32 %326, %327 can share an output register with another operation already assigned to main_signed_add_32_8
  %329 = add i32 %326, %327 can share an output register with another operation already assigned to main_signed_add_32_9
  %329 = add i32 %326, %327 can share an output register with another operation already assigned to main_signed_add_32_10
  %329 = add i32 %326, %327 can share an output register with another operation already assigned to main_signed_add_32_11
  %329 = add i32 %326, %327 can share an output register with another operation already assigned to main_signed_add_32_12
  %329 = add i32 %326, %327 can share an output register with another operation already assigned to main_signed_add_32_13
  %329 = add i32 %326, %327 can share an output register with another operation already assigned to main_signed_add_32_15
  %329 = add i32 %326, %327 can share an output register with another operation already assigned to main_signed_add_32_16
  %329 = add i32 %326, %327 can share an output register with another operation already assigned to main_signed_add_32_17
  %329 = add i32 %326, %327 can share an output register with another operation already assigned to main_signed_add_32_18
  %330 = add i32 %329, %328 can share an output register with another operation already assigned to main_signed_add_32_0
  %330 = add i32 %329, %328 can share an output register with another operation already assigned to main_signed_add_32_1
  %330 = add i32 %329, %328 can share an output register with another operation already assigned to main_signed_add_32_2
  %330 = add i32 %329, %328 can share an output register with another operation already assigned to main_signed_add_32_3
  %330 = add i32 %329, %328 can share an output register with another operation already assigned to main_signed_add_32_4
  %330 = add i32 %329, %328 can share an output register with another operation already assigned to main_signed_add_32_5
  %330 = add i32 %329, %328 can share an output register with another operation already assigned to main_signed_add_32_6
  %330 = add i32 %329, %328 can share an output register with another operation already assigned to main_signed_add_32_7
  %330 = add i32 %329, %328 can share an output register with another operation already assigned to main_signed_add_32_8
  %330 = add i32 %329, %328 can share an output register with another operation already assigned to main_signed_add_32_9
  %330 = add i32 %329, %328 can share an output register with another operation already assigned to main_signed_add_32_10
  %330 = add i32 %329, %328 can share an output register with another operation already assigned to main_signed_add_32_11
  %330 = add i32 %329, %328 can share an output register with another operation already assigned to main_signed_add_32_12
  %330 = add i32 %329, %328 can share an output register with another operation already assigned to main_signed_add_32_13
  %330 = add i32 %329, %328 can share an output register with another operation already assigned to main_signed_add_32_15
  %330 = add i32 %329, %328 can share an output register with another operation already assigned to main_signed_add_32_16
  %330 = add i32 %329, %328 can share an output register with another operation already assigned to main_signed_add_32_17
  %330 = add i32 %329, %328 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %326 = add nsw i32 %322, %32... (idx: 0)        -760                          -120                          -50                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -200                          -370                          
  %329 = add i32 %326, %327 (idx: 1)              -760                          -120                          -50                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -199                          -370                          
  %330 = add i32 %329, %328 (idx: 2)              -760                          -120                          -50                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -199                          -370                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %326 = add nsw i32 %322, %32... (idx: 0)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             
  %329 = add i32 %326, %327 (idx
  %330 = add i32 %329, %328 (idx: 2)              1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %330 = add i32 %329, %328 (idx: 2) -> main_signed_add_32_0 (mux inputs: 78)
  %326 = add nsw i32 %322, %32... (idx: 0) -> main_signed_add_32_17 (mux inputs: 22)
  %329 = add i32 %326, %327 (idx: 1) -> main_signed_add_32_18 (mux inputs: 39)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %339 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %339 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %340 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %340 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %339 = load i32* getelementp... (idx: 0)        1                             11                            
  %340 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %339 = load i32* getelementp... (idx: 0)        1                             0                             
  %340 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %339 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %340 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %333 = add i32 %330, %331 can share an output register with another operation already assigned to main_signed_add_32_0
  %333 = add i32 %330, %331 can share an output register with another operation already assigned to main_signed_add_32_1
  %333 = add i32 %330, %331 can share an output register with another operation already assigned to main_signed_add_32_2
  %333 = add i32 %330, %331 can share an output register with another operation already assigned to main_signed_add_32_3
  %333 = add i32 %330, %331 can share an output register with another operation already assigned to main_signed_add_32_4
  %333 = add i32 %330, %331 can share an output register with another operation already assigned to main_signed_add_32_5
  %333 = add i32 %330, %331 can share an output register with another operation already assigned to main_signed_add_32_6
  %333 = add i32 %330, %331 can share an output register with another operation already assigned to main_signed_add_32_7
  %333 = add i32 %330, %331 can share an output register with another operation already assigned to main_signed_add_32_8
  %333 = add i32 %330, %331 can share an output register with another operation already assigned to main_signed_add_32_9
  %333 = add i32 %330, %331 can share an output register with another operation already assigned to main_signed_add_32_10
  %333 = add i32 %330, %331 can share an output register with another operation already assigned to main_signed_add_32_11
  %333 = add i32 %330, %331 can share an output register with another operation already assigned to main_signed_add_32_12
  %333 = add i32 %330, %331 can share an output register with another operation already assigned to main_signed_add_32_13
  %333 = add i32 %330, %331 can share an output register with another operation already assigned to main_signed_add_32_15
  %333 = add i32 %330, %331 can share an output register with another operation already assigned to main_signed_add_32_16
  %333 = add i32 %330, %331 can share an output register with another operation already assigned to main_signed_add_32_17
  %333 = add i32 %330, %331 can share an output register with another operation already assigned to main_signed_add_32_18
  %334 = add i32 %333, %332 can share an output register with another operation already assigned to main_signed_add_32_0
  %334 = add i32 %333, %332 can share an output register with another operation already assigned to main_signed_add_32_1
  %334 = add i32 %333, %332 can share an output register with another operation already assigned to main_signed_add_32_2
  %334 = add i32 %333, %332 can share an output register with another operation already assigned to main_signed_add_32_3
  %334 = add i32 %333, %332 can share an output register with another operation already assigned to main_signed_add_32_4
  %334 = add i32 %333, %332 can share an output register with another operation already assigned to main_signed_add_32_5
  %334 = add i32 %333, %332 can share an output register with another operation already assigned to main_signed_add_32_6
  %334 = add i32 %333, %332 can share an output register with another operation already assigned to main_signed_add_32_7
  %334 = add i32 %333, %332 can share an output register with another operation already assigned to main_signed_add_32_8
  %334 = add i32 %333, %332 can share an output register with another operation already assigned to main_signed_add_32_9
  %334 = add i32 %333, %332 can share an output register with another operation already assigned to main_signed_add_32_10
  %334 = add i32 %333, %332 can share an output register with another operation already assigned to main_signed_add_32_11
  %334 = add i32 %333, %332 can share an output register with another operation already assigned to main_signed_add_32_12
  %334 = add i32 %333, %332 can share an output register with another operation already assigned to main_signed_add_32_13
  %334 = add i32 %333, %332 can share an output register with another operation already assigned to main_signed_add_32_15
  %334 = add i32 %333, %332 can share an output register with another operation already assigned to main_signed_add_32_16
  %334 = add i32 %333, %332 can share an output register with another operation already assigned to main_signed_add_32_17
  %334 = add i32 %333, %332 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %333 = add i32 %330, %331 (idx: 0)              -780                          -120                          -50                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -219                          -390                          
  %334 = add i32 %333, %332 (idx: 1)              -780                          -120                          -50                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -219                          -390                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %333 = add i32 %330, %331 (idx
  %334 = add i32 %333, %332 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %333 = add i32 %330, %331 (idx: 0) -> main_signed_add_32_0 (mux inputs: 80)
  %334 = add i32 %333, %332 (idx: 1) -> main_signed_add_32_18 (mux inputs: 41)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %343 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %343 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %344 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %344 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %343 = load i32* getelementp... (idx: 0)        1                             11                            
  %344 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %343 = load i32* getelementp... (idx: 0)        1                             0                             
  %344 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %343 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %344 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %337 = add i32 %334, %335 can share an output register with another operation already assigned to main_signed_add_32_0
  %337 = add i32 %334, %335 can share an output register with another operation already assigned to main_signed_add_32_1
  %337 = add i32 %334, %335 can share an output register with another operation already assigned to main_signed_add_32_2
  %337 = add i32 %334, %335 can share an output register with another operation already assigned to main_signed_add_32_3
  %337 = add i32 %334, %335 can share an output register with another operation already assigned to main_signed_add_32_4
  %337 = add i32 %334, %335 can share an output register with another operation already assigned to main_signed_add_32_5
  %337 = add i32 %334, %335 can share an output register with another operation already assigned to main_signed_add_32_6
  %337 = add i32 %334, %335 can share an output register with another operation already assigned to main_signed_add_32_7
  %337 = add i32 %334, %335 can share an output register with another operation already assigned to main_signed_add_32_8
  %337 = add i32 %334, %335 can share an output register with another operation already assigned to main_signed_add_32_9
  %337 = add i32 %334, %335 can share an output register with another operation already assigned to main_signed_add_32_10
  %337 = add i32 %334, %335 can share an output register with another operation already assigned to main_signed_add_32_11
  %337 = add i32 %334, %335 can share an output register with another operation already assigned to main_signed_add_32_12
  %337 = add i32 %334, %335 can share an output register with another operation already assigned to main_signed_add_32_13
  %337 = add i32 %334, %335 can share an output register with another operation already assigned to main_signed_add_32_15
  %337 = add i32 %334, %335 can share an output register with another operation already assigned to main_signed_add_32_16
  %337 = add i32 %334, %335 can share an output register with another operation already assigned to main_signed_add_32_17
  %337 = add i32 %334, %335 can share an output register with another operation already assigned to main_signed_add_32_18
  %338 = add i32 %337, %336 can share an output register with another operation already assigned to main_signed_add_32_0
  %338 = add i32 %337, %336 can share an output register with another operation already assigned to main_signed_add_32_1
  %338 = add i32 %337, %336 can share an output register with another operation already assigned to main_signed_add_32_2
  %338 = add i32 %337, %336 can share an output register with another operation already assigned to main_signed_add_32_3
  %338 = add i32 %337, %336 can share an output register with another operation already assigned to main_signed_add_32_4
  %338 = add i32 %337, %336 can share an output register with another operation already assigned to main_signed_add_32_5
  %338 = add i32 %337, %336 can share an output register with another operation already assigned to main_signed_add_32_6
  %338 = add i32 %337, %336 can share an output register with another operation already assigned to main_signed_add_32_7
  %338 = add i32 %337, %336 can share an output register with another operation already assigned to main_signed_add_32_8
  %338 = add i32 %337, %336 can share an output register with another operation already assigned to main_signed_add_32_9
  %338 = add i32 %337, %336 can share an output register with another operation already assigned to main_signed_add_32_10
  %338 = add i32 %337, %336 can share an output register with another operation already assigned to main_signed_add_32_11
  %338 = add i32 %337, %336 can share an output register with another operation already assigned to main_signed_add_32_12
  %338 = add i32 %337, %336 can share an output register with another operation already assigned to main_signed_add_32_13
  %338 = add i32 %337, %336 can share an output register with another operation already assigned to main_signed_add_32_15
  %338 = add i32 %337, %336 can share an output register with another operation already assigned to main_signed_add_32_16
  %338 = add i32 %337, %336 can share an output register with another operation already assigned to main_signed_add_32_17
  %338 = add i32 %337, %336 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %337 = add i32 %334, %335 (idx: 0)              -800                          -120                          -50                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -219                          -410                          
  %338 = add i32 %337, %336 (idx: 1)              -800                          -120                          -50                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -219                          -410                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %337 = add i32 %334, %335 (idx
  %338 = add i32 %337, %336 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %337 = add i32 %334, %335 (idx: 0) -> main_signed_add_32_0 (mux inputs: 82)
  %338 = add i32 %337, %336 (idx: 1) -> main_signed_add_32_18 (mux inputs: 43)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %341 = add i32 %338, %339 can share an output register with another operation already assigned to main_signed_add_32_0
  %341 = add i32 %338, %339 can share an output register with another operation already assigned to main_signed_add_32_1
  %341 = add i32 %338, %339 can share an output register with another operation already assigned to main_signed_add_32_2
  %341 = add i32 %338, %339 can share an output register with another operation already assigned to main_signed_add_32_3
  %341 = add i32 %338, %339 can share an output register with another operation already assigned to main_signed_add_32_4
  %341 = add i32 %338, %339 can share an output register with another operation already assigned to main_signed_add_32_5
  %341 = add i32 %338, %339 can share an output register with another operation already assigned to main_signed_add_32_6
  %341 = add i32 %338, %339 can share an output register with another operation already assigned to main_signed_add_32_7
  %341 = add i32 %338, %339 can share an output register with another operation already assigned to main_signed_add_32_8
  %341 = add i32 %338, %339 can share an output register with another operation already assigned to main_signed_add_32_9
  %341 = add i32 %338, %339 can share an output register with another operation already assigned to main_signed_add_32_10
  %341 = add i32 %338, %339 can share an output register with another operation already assigned to main_signed_add_32_11
  %341 = add i32 %338, %339 can share an output register with another operation already assigned to main_signed_add_32_12
  %341 = add i32 %338, %339 can share an output register with another operation already assigned to main_signed_add_32_13
  %341 = add i32 %338, %339 can share an output register with another operation already assigned to main_signed_add_32_15
  %341 = add i32 %338, %339 can share an output register with another operation already assigned to main_signed_add_32_16
  %341 = add i32 %338, %339 can share an output register with another operation already assigned to main_signed_add_32_17
  %341 = add i32 %338, %339 can share an output register with another operation already assigned to main_signed_add_32_18
  %342 = add i32 %341, %340 can share an output register with another operation already assigned to main_signed_add_32_0
  %342 = add i32 %341, %340 can share an output register with another operation already assigned to main_signed_add_32_1
  %342 = add i32 %341, %340 can share an output register with another operation already assigned to main_signed_add_32_2
  %342 = add i32 %341, %340 can share an output register with another operation already assigned to main_signed_add_32_3
  %342 = add i32 %341, %340 can share an output register with another operation already assigned to main_signed_add_32_4
  %342 = add i32 %341, %340 can share an output register with another operation already assigned to main_signed_add_32_5
  %342 = add i32 %341, %340 can share an output register with another operation already assigned to main_signed_add_32_6
  %342 = add i32 %341, %340 can share an output register with another operation already assigned to main_signed_add_32_7
  %342 = add i32 %341, %340 can share an output register with another operation already assigned to main_signed_add_32_8
  %342 = add i32 %341, %340 can share an output register with another operation already assigned to main_signed_add_32_9
  %342 = add i32 %341, %340 can share an output register with another operation already assigned to main_signed_add_32_10
  %342 = add i32 %341, %340 can share an output register with another operation already assigned to main_signed_add_32_11
  %342 = add i32 %341, %340 can share an output register with another operation already assigned to main_signed_add_32_12
  %342 = add i32 %341, %340 can share an output register with another operation already assigned to main_signed_add_32_13
  %342 = add i32 %341, %340 can share an output register with another operation already assigned to main_signed_add_32_15
  %342 = add i32 %341, %340 can share an output register with another operation already assigned to main_signed_add_32_16
  %342 = add i32 %341, %340 can share an output register with another operation already assigned to main_signed_add_32_17
  %342 = add i32 %341, %340 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %341 = add i32 %338, %339 (idx: 0)              -820                          -120                          -50                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -219                          -430                          
  %342 = add i32 %341, %340 (idx: 1)              -820                          -120                          -50                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -219                          -430                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %341 = add i32 %338, %339 (idx
  %342 = add i32 %341, %340 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %341 = add i32 %338, %339 (idx: 0) -> main_signed_add_32_0 (mux inputs: 84)
  %342 = add i32 %341, %340 (idx: 1) -> main_signed_add_32_18 (mux inputs: 45)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %345 = add i32 %342, %343 can share an output register with another operation already assigned to main_signed_add_32_0
  %345 = add i32 %342, %343 can share an output register with another operation already assigned to main_signed_add_32_1
  %345 = add i32 %342, %343 can share an output register with another operation already assigned to main_signed_add_32_2
  %345 = add i32 %342, %343 can share an output register with another operation already assigned to main_signed_add_32_3
  %345 = add i32 %342, %343 can share an output register with another operation already assigned to main_signed_add_32_4
  %345 = add i32 %342, %343 can share an output register with another operation already assigned to main_signed_add_32_5
  %345 = add i32 %342, %343 can share an output register with another operation already assigned to main_signed_add_32_6
  %345 = add i32 %342, %343 can share an output register with another operation already assigned to main_signed_add_32_7
  %345 = add i32 %342, %343 can share an output register with another operation already assigned to main_signed_add_32_8
  %345 = add i32 %342, %343 can share an output register with another operation already assigned to main_signed_add_32_9
  %345 = add i32 %342, %343 can share an output register with another operation already assigned to main_signed_add_32_10
  %345 = add i32 %342, %343 can share an output register with another operation already assigned to main_signed_add_32_11
  %345 = add i32 %342, %343 can share an output register with another operation already assigned to main_signed_add_32_12
  %345 = add i32 %342, %343 can share an output register with another operation already assigned to main_signed_add_32_13
  %345 = add i32 %342, %343 can share an output register with another operation already assigned to main_signed_add_32_15
  %345 = add i32 %342, %343 can share an output register with another operation already assigned to main_signed_add_32_16
  %345 = add i32 %342, %343 can share an output register with another operation already assigned to main_signed_add_32_17
  %345 = add i32 %342, %343 can share an output register with another operation already assigned to main_signed_add_32_18
  %346 = add i32 %345, %344 can share an output register with another operation already assigned to main_signed_add_32_0
  %346 = add i32 %345, %344 can share an output register with another operation already assigned to main_signed_add_32_1
  %346 = add i32 %345, %344 can share an output register with another operation already assigned to main_signed_add_32_2
  %346 = add i32 %345, %344 can share an output register with another operation already assigned to main_signed_add_32_3
  %346 = add i32 %345, %344 can share an output register with another operation already assigned to main_signed_add_32_4
  %346 = add i32 %345, %344 can share an output register with another operation already assigned to main_signed_add_32_5
  %346 = add i32 %345, %344 can share an output register with another operation already assigned to main_signed_add_32_6
  %346 = add i32 %345, %344 can share an output register with another operation already assigned to main_signed_add_32_7
  %346 = add i32 %345, %344 can share an output register with another operation already assigned to main_signed_add_32_8
  %346 = add i32 %345, %344 can share an output register with another operation already assigned to main_signed_add_32_9
  %346 = add i32 %345, %344 can share an output register with another operation already assigned to main_signed_add_32_10
  %346 = add i32 %345, %344 can share an output register with another operation already assigned to main_signed_add_32_11
  %346 = add i32 %345, %344 can share an output register with another operation already assigned to main_signed_add_32_12
  %346 = add i32 %345, %344 can share an output register with another operation already assigned to main_signed_add_32_13
  %346 = add i32 %345, %344 can share an output register with another operation already assigned to main_signed_add_32_15
  %346 = add i32 %345, %344 can share an output register with another operation already assigned to main_signed_add_32_16
  %346 = add i32 %345, %344 can share an output register with another operation already assigned to main_signed_add_32_17
  %346 = add i32 %345, %344 can share an output register with another operation already assigned to main_signed_add_32_18
  %351 = add nsw i32 %350, %34... can share an output register with another operation already assigned to main_signed_add_32_0
  %351 = add nsw i32 %350, %34... can share an output register with another operation already assigned to main_signed_add_32_1
  %351 = add nsw i32 %350, %34... can share an output register with another operation already assigned to main_signed_add_32_2
  %351 = add nsw i32 %350, %34... can share an output register with another operation already assigned to main_signed_add_32_3
  %351 = add nsw i32 %350, %34... can share an output register with another operation already assigned to main_signed_add_32_4
  %351 = add nsw i32 %350, %34... can share an output register with another operation already assigned to main_signed_add_32_5
  %351 = add nsw i32 %350, %34... can share an output register with another operation already assigned to main_signed_add_32_6
  %351 = add nsw i32 %350, %34... can share an output register with another operation already assigned to main_signed_add_32_7
  %351 = add nsw i32 %350, %34... can share an output register with another operation already assigned to main_signed_add_32_8
  %351 = add nsw i32 %350, %34... can share an output register with another operation already assigned to main_signed_add_32_9
  %351 = add nsw i32 %350, %34... can share an output register with another operation already assigned to main_signed_add_32_10
  %351 = add nsw i32 %350, %34... can share an output register with another operation already assigned to main_signed_add_32_11
  %351 = add nsw i32 %350, %34... can share an output register with another operation already assigned to main_signed_add_32_12
  %351 = add nsw i32 %350, %34... can share an output register with another operation already assigned to main_signed_add_32_13
  %351 = add nsw i32 %350, %34... can share an output register with another operation already assigned to main_signed_add_32_15
  %351 = add nsw i32 %350, %34... can share an output register with another operation already assigned to main_signed_add_32_16
  %351 = add nsw i32 %350, %34... can share an output register with another operation already assigned to main_signed_add_32_17
  %351 = add nsw i32 %350, %34... can share an output register with another operation already assigned to main_signed_add_32_18
  %359 = add nsw i32 %358, %35... can share an output register with another operation already assigned to main_signed_add_32_0
  %359 = add nsw i32 %358, %35... can share an output register with another operation already assigned to main_signed_add_32_1
  %359 = add nsw i32 %358, %35... can share an output register with another operation already assigned to main_signed_add_32_2
  %359 = add nsw i32 %358, %35... can share an output register with another operation already assigned to main_signed_add_32_3
  %359 = add nsw i32 %358, %35... can share an output register with another operation already assigned to main_signed_add_32_4
  %359 = add nsw i32 %358, %35... can share an output register with another operation already assigned to main_signed_add_32_5
  %359 = add nsw i32 %358, %35... can share an output register with another operation already assigned to main_signed_add_32_6
  %359 = add nsw i32 %358, %35... can share an output register with another operation already assigned to main_signed_add_32_7
  %359 = add nsw i32 %358, %35... can share an output register with another operation already assigned to main_signed_add_32_8
  %359 = add nsw i32 %358, %35... can share an output register with another operation already assigned to main_signed_add_32_9
  %359 = add nsw i32 %358, %35... can share an output register with another operation already assigned to main_signed_add_32_10
  %359 = add nsw i32 %358, %35... can share an output register with another operation already assigned to main_signed_add_32_11
  %359 = add nsw i32 %358, %35... can share an output register with another operation already assigned to main_signed_add_32_12
  %359 = add nsw i32 %358, %35... can share an output register with another operation already assigned to main_signed_add_32_13
  %359 = add nsw i32 %358, %35... can share an output register with another operation already assigned to main_signed_add_32_15
  %359 = add nsw i32 %358, %35... can share an output register with another operation already assigned to main_signed_add_32_16
  %359 = add nsw i32 %358, %35... can share an output register with another operation already assigned to main_signed_add_32_17
  %359 = add nsw i32 %358, %35... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %345 = add i32 %342, %343 (idx: 0)              -840                          -120                          -50                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -219                          -450                          
  %346 = add i32 %345, %344 (idx: 1)              -840                          -120                          -50                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -219                          -450                          
  %351 = add nsw i32 %350, %34... (idx: 2)        -840                          -120                          -50                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -220                          -450                          
  %359 = add nsw i32 %358, %35... (idx: 3)        -840                          -120                          -50                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -220                          -450                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %345 = add i32 %342, %343 (idx
  %346 = add i32 %345, %344 (idx
  %351 = add nsw i32 %350, %34... (idx
  %359 = add nsw i32 %358, %35... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %345 = add i32 %342, %343 (idx: 0) -> main_signed_add_32_0 (mux inputs: 86)
  %359 = add nsw i32 %358, %35... (idx: 3) -> main_signed_add_32_1 (mux inputs: 14)
  %351 = add nsw i32 %350, %34... (idx: 2) -> main_signed_add_32_17 (mux inputs: 24)
  %346 = add i32 %345, %344 (idx: 1) -> main_signed_add_32_18 (mux inputs: 47)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep36 = add i32 %gep_int34,... (idx: 0)        -860                          -140                          -50                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -240                          -470                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep36 = add i32 %gep_int34,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep36 = add i32 %gep_int34,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 88)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: qq4_code4_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %354 = load i32* %353, align... can share an output register with another operation already assigned to main_qq4_code4_table_local_mem_dual_port_0
                                                  main_qq4_code4_table_local_mem_dual_port_0
  %354 = load i32* %353, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_qq4_code4_table_local_mem_dual_port_0
  %354 = load i32* %353, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %354 = load i32* %353, align... (idx: 0) -> main_qq4_code4_table_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_18
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_18
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_18
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep39 = add i32 %gep_int37,... (idx: 0)        -880                          -140                          -50                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -240                          -470                          
  %gep42 = add i32 %gep_int40,... (idx: 1)        -880                          -140                          -50                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -240                          -470                          
  %gep48 = add i32 %gep_int46,... (idx: 2)        -880                          -140                          -50                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -240                          -470                          
  %gep51 = add i32 %gep_int49,... (idx: 3)        -880                          -140                          -50                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -240                          -470                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep39 = add i32 %gep_int37,... (idx
  %gep42 = add i32 %gep_int40,... (idx
  %gep48 = add i32 %gep_int46,... (idx
  %gep51 = add i32 %gep_int49,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep39 = add i32 %gep_int37,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 90)
  %gep51 = add i32 %gep_int49,... (idx: 3) -> main_signed_add_32_1 (mux inputs: 16)
  %gep48 = add i32 %gep_int46,... (idx: 2) -> main_signed_add_32_17 (mux inputs: 26)
  %gep42 = add i32 %gep_int40,... (idx: 1) -> main_signed_add_32_18 (mux inputs: 49)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: wl_code_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %363 = load i32* %362, align... can share an output register with another operation already assigned to main_wl_code_table_local_mem_dual_port_0
                                                  main_wl_code_table_local_mem_dual_port_0
  %363 = load i32* %362, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_wl_code_table_local_mem_dual_port_0
  %363 = load i32* %362, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %363 = load i32* %362, align... (idx: 0) -> main_wl_code_table_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %364 = add nsw i32 %361, %36... can share an output register with another operation already assigned to main_signed_add_32_0
  %364 = add nsw i32 %361, %36... can share an output register with another operation already assigned to main_signed_add_32_1
  %364 = add nsw i32 %361, %36... can share an output register with another operation already assigned to main_signed_add_32_2
  %364 = add nsw i32 %361, %36... can share an output register with another operation already assigned to main_signed_add_32_3
  %364 = add nsw i32 %361, %36... can share an output register with another operation already assigned to main_signed_add_32_4
  %364 = add nsw i32 %361, %36... can share an output register with another operation already assigned to main_signed_add_32_5
  %364 = add nsw i32 %361, %36... can share an output register with another operation already assigned to main_signed_add_32_6
  %364 = add nsw i32 %361, %36... can share an output register with another operation already assigned to main_signed_add_32_7
  %364 = add nsw i32 %361, %36... can share an output register with another operation already assigned to main_signed_add_32_8
  %364 = add nsw i32 %361, %36... can share an output register with another operation already assigned to main_signed_add_32_9
  %364 = add nsw i32 %361, %36... can share an output register with another operation already assigned to main_signed_add_32_10
  %364 = add nsw i32 %361, %36... can share an output register with another operation already assigned to main_signed_add_32_11
  %364 = add nsw i32 %361, %36... can share an output register with another operation already assigned to main_signed_add_32_12
  %364 = add nsw i32 %361, %36... can share an output register with another operation already assigned to main_signed_add_32_13
  %364 = add nsw i32 %361, %36... can share an output register with another operation already assigned to main_signed_add_32_15
  %364 = add nsw i32 %361, %36... can share an output register with another operation already assigned to main_signed_add_32_16
  %364 = add nsw i32 %361, %36... can share an output register with another operation already assigned to main_signed_add_32_17
  %364 = add nsw i32 %361, %36... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %364 = add nsw i32 %361, %36... (idx: 0)        -900                          -160                          -50                           -19                           -19                           -19                           -19                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -259                          -490                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %364 = add nsw i32 %361, %36... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %364 = add nsw i32 %361, %36... (idx: 0) -> main_signed_add_32_0 (mux inputs: 92)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %355 = mul nsw i32 %354, %de... hey can share an input with another operation already assigned to main_signed_multiply_32_5
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %355 = mul nsw i32 %354, %de... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %355 = mul nsw i32 %354, %de... (idx: 0)        -70                           -28                           -28                           -19                           -19                           -25                           -29                           -19                           -29                           -19                           -19                           -19                           -19                           -19                           -19                           -19                           -19                           -19                           -19                           -499                          -29                           -19                           -19                           -19                           -19                           -18                           -18                           -19                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %355 = mul nsw i32 %354, %de... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %355 = mul nsw i32 %354, %de... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 52)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %372 = sub i32 9, %369 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %372 = sub i32 9, %369 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %372 = sub i32 9, %369 (idx: 0)                 -115                          -54                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %372 = sub i32 9, %369 (idx: 0)                 1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %372 = sub i32 9, %369 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 13)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %375 = add nsw i32 %347, %35... hey can share an input with another operation already assigned to main_signed_add_32_17
  %399 = add nsw i32 %356, %35... hey can share an input with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %375 = add nsw i32 %347, %35... (idx: 0)        -930                          -170                          -60                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -50                           -50                           -10                           -30                           -30                           -265                          -500                          
  %399 = add nsw i32 %356, %35... (idx: 1)        -930                          -165                          -60                           -30                           -30                           -30                           -29                           -30                           -30                           -30                           -30                           -30                           -50                           -50                           -10                           -30                           -30                           -270                          -500                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %375 = add nsw i32 %347, %35... (idx
  %399 = add nsw i32 %356, %35... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %375 = add nsw i32 %347, %35... (idx: 0) -> main_signed_add_32_0 (mux inputs: 94)
  %399 = add nsw i32 %356, %35... (idx: 1) -> main_signed_add_32_18 (mux inputs: 51)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %377 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %381 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %377 = mul nsw i32 %dec_plt1... (idx: 0)        -70                           -30                           -30                           -20                           -20                           -29                           -30                           -20                           -30                           -20                           -20                           -20                           -20                           -20                           -19                           -20                           -19                           -20                           -20                           -519                          -30                           -19                           -20                           -19                           -20                           -20                           -20                           -19                           -20                           
  %381 = mul nsw i32 %dec_plt2... (idx: 1)        -70                           -30                           -30                           -20                           -20                           -29                           -30                           -20                           -30                           -20                           -20                           -20                           -20                           -20                           -19                           -20                           -19                           -20                           -20                           -519                          -30                           -19                           -20                           -19                           -20                           -20                           -20                           -19                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %377 = mul nsw i32 %dec_plt1... (idx
  %381 = mul nsw i32 %dec_plt2... (idx: 1)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %381 = mul nsw i32 %dec_plt2... (idx: 1) -> main_signed_multiply_32_0 (mux inputs: 9)
  %377 = mul nsw i32 %dec_plt1... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 54)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: ilb_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %371 = load i32* %370, align... can share an output register with another operation already assigned to main_ilb_table_local_mem_dual_port_0
                                                  main_ilb_table_local_mem_dual_port_0
  %371 = load i32* %370, align... (idx: 0)        85                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_ilb_table_local_mem_dual_port_0
  %371 = load i32* %370, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %371 = load i32* %370, align... (idx: 0) -> main_ilb_table_local_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_18
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_0
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_1
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_2
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_3
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_4
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_5
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_6
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_7
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_8
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_9
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_10
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_11
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_12
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_13
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_15
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_16
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_17
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_18
  %387 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_0
  %387 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_1
  %387 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_2
  %387 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_3
  %387 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_4
  %387 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_5
  %387 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_6
  %387 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_7
  %387 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_8
  %387 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_9
  %387 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_10
  %387 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_11
  %387 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_12
  %387 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_13
  %387 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_15
  %387 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_16
  %387 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_17
  %387 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_18
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_0
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_1
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_2
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_3
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_4
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_5
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_6
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_7
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_8
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_9
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_10
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_11
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_12
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_13
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_15
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_16
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_17
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep45 = add i32 %gep_int43,... (idx: 0)        -940                          -160                          -50                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -260                          -510                          
  %wd4.0.i7.i = add nsw i32 %3... (idx: 1)        -940                          -160                          -50                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -260                          -510                          
  %387 = add nsw i32 %wd4.0.i7... (idx: 2)        -940                          -160                          -50                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -260                          -510                          
  %apl1.0.i3.i = add nsw i32 %... (idx: 3)        -940                          -160                          -50                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -260                          -510                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep45 = add i32 %gep_int43,... (idx
  %wd4.0.i7.i = add nsw i32 %3... (idx
  %387 = add nsw i32 %wd4.0.i7... (idx
  %apl1.0.i3.i = add nsw i32 %... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep45 = add i32 %gep_int43,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 96)
  %apl1.0.i3.i = add nsw i32 %... (idx: 3) -> main_signed_add_32_1 (mux inputs: 18)
  %387 = add nsw i32 %wd4.0.i7... (idx: 2) -> main_signed_add_32_17 (mux inputs: 28)
  %wd4.0.i7.i = add nsw i32 %3... (idx: 1) -> main_signed_add_32_18 (mux inputs: 53)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %395 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_0
  %395 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_1
  %397 = sub nsw i32 0, %395 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %397 = sub nsw i32 0, %395 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %395 = sub nsw i32 15360, %.... (idx: 0)        -125                          -54                           
  %397 = sub nsw i32 0, %395 (idx: 1)             -125                          -55                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %395 = sub nsw i32 15360, %.... (idx: 0)        1                             0                             
  %397 = sub nsw i32 0, %395 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %395 = sub nsw i32 15360, %.... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 14)
  %397 = sub nsw i32 0, %395 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 7)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %400 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %400 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %401 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %401 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %400 = load i32* getelementp... (idx: 0)        1                             11                            
  %401 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %400 = load i32* getelementp... (idx: 0)        1                             0                             
  %401 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %400 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %401 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: qq2_code2_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %449 = load i32* %448, align... can share an output register with another operation already assigned to main_qq2_code2_table_local_mem_dual_port_0
                                                  main_qq2_code2_table_local_mem_dual_port_0
  %449 = load i32* %448, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_qq2_code2_table_local_mem_dual_port_0
  %449 = load i32* %448, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %449 = load i32* %448, align... (idx: 0) -> main_qq2_code2_table_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: wh_code_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %455 = load i32* %454, align... can share an output register with another operation already assigned to main_wh_code_table_local_mem_dual_port_0
                                                  main_wh_code_table_local_mem_dual_port_0
  %455 = load i32* %454, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_wh_code_table_local_mem_dual_port_0
  %455 = load i32* %454, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %455 = load i32* %454, align... (idx: 0) -> main_wh_code_table_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %403 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %403 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %404 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %404 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %403 = load i32* getelementp... (idx: 0)        1                             11                            
  %404 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %403 = load i32* getelementp... (idx: 0)        1                             0                             
  %404 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %403 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %404 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %456 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_0
  %456 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_1
  %456 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_2
  %456 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_3
  %456 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_4
  %456 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_5
  %456 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_6
  %456 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_7
  %456 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_8
  %456 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_9
  %456 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_10
  %456 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_11
  %456 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_12
  %456 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_13
  %456 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_15
  %456 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_16
  %456 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_17
  %456 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %456 = add nsw i32 %453, %45... (idx: 0)        -960                          -180                          -50                           -19                           -19                           -19                           -19                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -279                          -530                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %456 = add nsw i32 %453, %45... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %456 = add nsw i32 %453, %45... (idx: 0) -> main_signed_add_32_0 (mux inputs: 98)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %450 = mul nsw i32 %449, %de... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %450 = mul nsw i32 %449, %de... (idx: 0)        -90                           -28                           -28                           -19                           -19                           -29                           -29                           -19                           -29                           -19                           -19                           -19                           -19                           -19                           -19                           -19                           -19                           -19                           -19                           -539                          -29                           -19                           -19                           -19                           -19                           -18                           -18                           -20                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %450 = mul nsw i32 %449, %de... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %450 = mul nsw i32 %449, %de... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 56)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %464 = sub i32 11, %461 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %464 = sub i32 11, %461 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %464 = sub i32 11, %461 (idx: 0)                -135                          -64                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %464 = sub i32 11, %461 (idx: 0)                1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %464 = sub i32 11, %461 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 15)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %407 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %407 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %408 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %408 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %407 = load i32* getelementp... (idx: 0)        1                             11                            
  %408 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %407 = load i32* getelementp... (idx: 0)        1                             0                             
  %408 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %407 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %408 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %402 = mul nsw i32 %401, %40... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %402 = mul nsw i32 %401, %40... (idx: 0)        -90                           -28                           -28                           -20                           -20                           -30                           -30                           -20                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -560                          -30                           -20                           -20                           -20                           -20                           -18                           -18                           -20                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %402 = mul nsw i32 %401, %40... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %402 = mul nsw i32 %401, %40... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 58)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: ilb_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %463 = load i32* %462, align... can share an output register with another operation already assigned to main_ilb_table_local_mem_dual_port_0
                                                  main_ilb_table_local_mem_dual_port_0
  %463 = load i32* %462, align... (idx: 0)        75                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_ilb_table_local_mem_dual_port_0
  %463 = load i32* %462, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %463 = load i32* %462, align... (idx: 0) -> main_ilb_table_local_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %411 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %411 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %412 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %412 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %411 = load i32* getelementp... (idx: 0)        1                             11                            
  %412 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %411 = load i32* getelementp... (idx: 0)        1                             0                             
  %412 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %411 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %412 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep54 = add i32 %gep_int52,... (idx: 0)        -980                          -180                          -50                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -280                          -530                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep54 = add i32 %gep_int52,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep54 = add i32 %gep_int52,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 100)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %405 = mul nsw i32 %404, %40... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %405 = mul nsw i32 %404, %40... (idx: 0)        -90                           -28                           -28                           -20                           -20                           -30                           -30                           -20                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -580                          -30                           -20                           -20                           -20                           -20                           -18                           -18                           -20                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %405 = mul nsw i32 %404, %40... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %405 = mul nsw i32 %404, %40... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 60)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %415 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %415 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %416 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %416 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %415 = load i32* getelementp... (idx: 0)        1                             11                            
  %416 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %415 = load i32* getelementp... (idx: 0)        1                             0                             
  %416 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %415 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %416 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %406 = add nsw i32 %405, %40... can share an output register with another operation already assigned to main_signed_add_32_0
  %406 = add nsw i32 %405, %40... can share an output register with another operation already assigned to main_signed_add_32_1
  %406 = add nsw i32 %405, %40... can share an output register with another operation already assigned to main_signed_add_32_2
  %406 = add nsw i32 %405, %40... can share an output register with another operation already assigned to main_signed_add_32_3
  %406 = add nsw i32 %405, %40... can share an output register with another operation already assigned to main_signed_add_32_4
  %406 = add nsw i32 %405, %40... can share an output register with another operation already assigned to main_signed_add_32_5
  %406 = add nsw i32 %405, %40... can share an output register with another operation already assigned to main_signed_add_32_6
  %406 = add nsw i32 %405, %40... can share an output register with another operation already assigned to main_signed_add_32_7
  %406 = add nsw i32 %405, %40... can share an output register with another operation already assigned to main_signed_add_32_8
  %406 = add nsw i32 %405, %40... can share an output register with another operation already assigned to main_signed_add_32_9
  %406 = add nsw i32 %405, %40... can share an output register with another operation already assigned to main_signed_add_32_10
  %406 = add nsw i32 %405, %40... can share an output register with another operation already assigned to main_signed_add_32_11
  %406 = add nsw i32 %405, %40... can share an output register with another operation already assigned to main_signed_add_32_12
  %406 = add nsw i32 %405, %40... can share an output register with another operation already assigned to main_signed_add_32_13
  %406 = add nsw i32 %405, %40... can share an output register with another operation already assigned to main_signed_add_32_15
  %406 = add nsw i32 %405, %40... can share an output register with another operation already assigned to main_signed_add_32_16
  %406 = add nsw i32 %405, %40... can share an output register with another operation already assigned to main_signed_add_32_17
  %406 = add nsw i32 %405, %40... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %406 = add nsw i32 %405, %40... (idx: 0)        -1000                         -180                          -50                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -280                          -530                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %406 = add nsw i32 %405, %40... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %406 = add nsw i32 %405, %40... (idx: 0) -> main_signed_add_32_0 (mux inputs: 102)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %409 = mul nsw i32 %408, %40... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %409 = mul nsw i32 %408, %40... (idx: 0)        -90                           -28                           -28                           -20                           -20                           -30                           -30                           -20                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -600                          -30                           -20                           -20                           -20                           -20                           -18                           -18                           -20                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %409 = mul nsw i32 %408, %40... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %409 = mul nsw i32 %408, %40... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 62)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %419 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %419 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %420 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %420 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %419 = load i32* getelementp... (idx: 0)        1                             11                            
  %420 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %419 = load i32* getelementp... (idx: 0)        1                             0                             
  %420 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %419 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %420 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %410 = add nsw i32 %406, %40... can share an output register with another operation already assigned to main_signed_add_32_0
  %410 = add nsw i32 %406, %40... can share an output register with another operation already assigned to main_signed_add_32_1
  %410 = add nsw i32 %406, %40... can share an output register with another operation already assigned to main_signed_add_32_2
  %410 = add nsw i32 %406, %40... can share an output register with another operation already assigned to main_signed_add_32_3
  %410 = add nsw i32 %406, %40... can share an output register with another operation already assigned to main_signed_add_32_4
  %410 = add nsw i32 %406, %40... can share an output register with another operation already assigned to main_signed_add_32_5
  %410 = add nsw i32 %406, %40... can share an output register with another operation already assigned to main_signed_add_32_6
  %410 = add nsw i32 %406, %40... can share an output register with another operation already assigned to main_signed_add_32_7
  %410 = add nsw i32 %406, %40... can share an output register with another operation already assigned to main_signed_add_32_8
  %410 = add nsw i32 %406, %40... can share an output register with another operation already assigned to main_signed_add_32_9
  %410 = add nsw i32 %406, %40... can share an output register with another operation already assigned to main_signed_add_32_10
  %410 = add nsw i32 %406, %40... can share an output register with another operation already assigned to main_signed_add_32_11
  %410 = add nsw i32 %406, %40... can share an output register with another operation already assigned to main_signed_add_32_12
  %410 = add nsw i32 %406, %40... can share an output register with another operation already assigned to main_signed_add_32_13
  %410 = add nsw i32 %406, %40... can share an output register with another operation already assigned to main_signed_add_32_15
  %410 = add nsw i32 %406, %40... can share an output register with another operation already assigned to main_signed_add_32_16
  %410 = add nsw i32 %406, %40... can share an output register with another operation already assigned to main_signed_add_32_17
  %410 = add nsw i32 %406, %40... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %410 = add nsw i32 %406, %40... (idx: 0)        -1020                         -180                          -50                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -280                          -530                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %410 = add nsw i32 %406, %40... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %410 = add nsw i32 %406, %40... (idx: 0) -> main_signed_add_32_0 (mux inputs: 104)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %413 = mul nsw i32 %412, %41... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %413 = mul nsw i32 %412, %41... (idx: 0)        -90                           -28                           -28                           -20                           -20                           -30                           -30                           -20                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -620                          -30                           -20                           -20                           -20                           -20                           -18                           -18                           -20                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %413 = mul nsw i32 %412, %41... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %413 = mul nsw i32 %412, %41... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 64)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %423 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %423 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %424 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %424 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %423 = load i32* getelementp... (idx: 0)        1                             11                            
  %424 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %423 = load i32* getelementp... (idx: 0)        1                             0                             
  %424 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %423 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %424 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %414 = add nsw i32 %410, %41... can share an output register with another operation already assigned to main_signed_add_32_0
  %414 = add nsw i32 %410, %41... can share an output register with another operation already assigned to main_signed_add_32_1
  %414 = add nsw i32 %410, %41... can share an output register with another operation already assigned to main_signed_add_32_2
  %414 = add nsw i32 %410, %41... can share an output register with another operation already assigned to main_signed_add_32_3
  %414 = add nsw i32 %410, %41... can share an output register with another operation already assigned to main_signed_add_32_4
  %414 = add nsw i32 %410, %41... can share an output register with another operation already assigned to main_signed_add_32_5
  %414 = add nsw i32 %410, %41... can share an output register with another operation already assigned to main_signed_add_32_6
  %414 = add nsw i32 %410, %41... can share an output register with another operation already assigned to main_signed_add_32_7
  %414 = add nsw i32 %410, %41... can share an output register with another operation already assigned to main_signed_add_32_8
  %414 = add nsw i32 %410, %41... can share an output register with another operation already assigned to main_signed_add_32_9
  %414 = add nsw i32 %410, %41... can share an output register with another operation already assigned to main_signed_add_32_10
  %414 = add nsw i32 %410, %41... can share an output register with another operation already assigned to main_signed_add_32_11
  %414 = add nsw i32 %410, %41... can share an output register with another operation already assigned to main_signed_add_32_12
  %414 = add nsw i32 %410, %41... can share an output register with another operation already assigned to main_signed_add_32_13
  %414 = add nsw i32 %410, %41... can share an output register with another operation already assigned to main_signed_add_32_15
  %414 = add nsw i32 %410, %41... can share an output register with another operation already assigned to main_signed_add_32_16
  %414 = add nsw i32 %410, %41... can share an output register with another operation already assigned to main_signed_add_32_17
  %414 = add nsw i32 %410, %41... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %414 = add nsw i32 %410, %41... (idx: 0)        -1040                         -180                          -50                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -280                          -530                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %414 = add nsw i32 %410, %41... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %414 = add nsw i32 %410, %41... (idx: 0) -> main_signed_add_32_0 (mux inputs: 106)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %417 = mul nsw i32 %416, %41... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %417 = mul nsw i32 %416, %41... (idx: 0)        -90                           -28                           -28                           -20                           -20                           -30                           -30                           -20                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -640                          -30                           -20                           -20                           -20                           -20                           -18                           -18                           -20                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %417 = mul nsw i32 %416, %41... (idx: 0)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %417 = mul nsw i32 %416, %41... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 66)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %427 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %427 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %428 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %428 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %427 = load i32* getelementp... (idx: 0)        1                             11                            
  %428 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %427 = load i32* getelementp... (idx: 0)        1                             0                             
  %428 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %427 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %428 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %418 = add nsw i32 %414, %41... can share an output register with another operation already assigned to main_signed_add_32_0
  %418 = add nsw i32 %414, %41... can share an output register with another operation already assigned to main_signed_add_32_1
  %418 = add nsw i32 %414, %41... can share an output register with another operation already assigned to main_signed_add_32_2
  %418 = add nsw i32 %414, %41... can share an output register with another operation already assigned to main_signed_add_32_3
  %418 = add nsw i32 %414, %41... can share an output register with another operation already assigned to main_signed_add_32_4
  %418 = add nsw i32 %414, %41... can share an output register with another operation already assigned to main_signed_add_32_5
  %418 = add nsw i32 %414, %41... can share an output register with another operation already assigned to main_signed_add_32_6
  %418 = add nsw i32 %414, %41... can share an output register with another operation already assigned to main_signed_add_32_7
  %418 = add nsw i32 %414, %41... can share an output register with another operation already assigned to main_signed_add_32_8
  %418 = add nsw i32 %414, %41... can share an output register with another operation already assigned to main_signed_add_32_9
  %418 = add nsw i32 %414, %41... can share an output register with another operation already assigned to main_signed_add_32_10
  %418 = add nsw i32 %414, %41... can share an output register with another operation already assigned to main_signed_add_32_11
  %418 = add nsw i32 %414, %41... can share an output register with another operation already assigned to main_signed_add_32_12
  %418 = add nsw i32 %414, %41... can share an output register with another operation already assigned to main_signed_add_32_13
  %418 = add nsw i32 %414, %41... can share an output register with another operation already assigned to main_signed_add_32_15
  %418 = add nsw i32 %414, %41... can share an output register with another operation already assigned to main_signed_add_32_16
  %418 = add nsw i32 %414, %41... can share an output register with another operation already assigned to main_signed_add_32_17
  %418 = add nsw i32 %414, %41... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %418 = add nsw i32 %414, %41... (idx: 0)        -1060                         -180                          -50                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -280                          -530                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %418 = add nsw i32 %414, %41... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %418 = add nsw i32 %414, %41... (idx: 0) -> main_signed_add_32_0 (mux inputs: 108)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %421 = mul nsw i32 %420, %41... can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %421 = mul nsw i32 %420, %41... (idx: 0)        -90                           -28                           -28                           -20                           -20                           -30                           -30                           -20                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -660                          -30                           -20                           -20                           -20                           -20                           -18                           -18                           -20                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %421 = mul nsw i32 %420, %41... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %421 = mul nsw i32 %420, %41... (idx: 0) -> main_signed_multiply_32_19 (mux inputs: 68)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %431 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %431 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %432 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %432 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %431 = load i32* getelementp... (idx: 0)        1                             11                            
  %432 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %431 = load i32* getelementp... (idx: 0)        1                             0                             
  %432 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %431 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %432 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %422 = add nsw i32 %418, %42... can share an output register with another operation already assigned to main_signed_add_32_0
  %422 = add nsw i32 %418, %42... can share an output register with another operation already assigned to main_signed_add_32_1
  %422 = add nsw i32 %418, %42... can share an output register with another operation already assigned to main_signed_add_32_2
  %422 = add nsw i32 %418, %42... can share an output register with another operation already assigned to main_signed_add_32_3
  %422 = add nsw i32 %418, %42... can share an output register with another operation already assigned to main_signed_add_32_4
  %422 = add nsw i32 %418, %42... can share an output register with another operation already assigned to main_signed_add_32_5
  %422 = add nsw i32 %418, %42... can share an output register with another operation already assigned to main_signed_add_32_6
  %422 = add nsw i32 %418, %42... can share an output register with another operation already assigned to main_signed_add_32_7
  %422 = add nsw i32 %418, %42... can share an output register with another operation already assigned to main_signed_add_32_8
  %422 = add nsw i32 %418, %42... can share an output register with another operation already assigned to main_signed_add_32_9
  %422 = add nsw i32 %418, %42... can share an output register with another operation already assigned to main_signed_add_32_10
  %422 = add nsw i32 %418, %42... can share an output register with another operation already assigned to main_signed_add_32_11
  %422 = add nsw i32 %418, %42... can share an output register with another operation already assigned to main_signed_add_32_12
  %422 = add nsw i32 %418, %42... can share an output register with another operation already assigned to main_signed_add_32_13
  %422 = add nsw i32 %418, %42... can share an output register with another operation already assigned to main_signed_add_32_15
  %422 = add nsw i32 %418, %42... can share an output register with another operation already assigned to main_signed_add_32_16
  %422 = add nsw i32 %418, %42... can share an output register with another operation already assigned to main_signed_add_32_17
  %422 = add nsw i32 %418, %42... can share an output register with another operation already assigned to main_signed_add_32_18
  %425 = add i32 %422, %423 can share an output register with another operation already assigned to main_signed_add_32_0
  %425 = add i32 %422, %423 can share an output register with another operation already assigned to main_signed_add_32_1
  %425 = add i32 %422, %423 can share an output register with another operation already assigned to main_signed_add_32_2
  %425 = add i32 %422, %423 can share an output register with another operation already assigned to main_signed_add_32_3
  %425 = add i32 %422, %423 can share an output register with another operation already assigned to main_signed_add_32_4
  %425 = add i32 %422, %423 can share an output register with another operation already assigned to main_signed_add_32_5
  %425 = add i32 %422, %423 can share an output register with another operation already assigned to main_signed_add_32_6
  %425 = add i32 %422, %423 can share an output register with another operation already assigned to main_signed_add_32_7
  %425 = add i32 %422, %423 can share an output register with another operation already assigned to main_signed_add_32_8
  %425 = add i32 %422, %423 can share an output register with another operation already assigned to main_signed_add_32_9
  %425 = add i32 %422, %423 can share an output register with another operation already assigned to main_signed_add_32_10
  %425 = add i32 %422, %423 can share an output register with another operation already assigned to main_signed_add_32_11
  %425 = add i32 %422, %423 can share an output register with another operation already assigned to main_signed_add_32_12
  %425 = add i32 %422, %423 can share an output register with another operation already assigned to main_signed_add_32_13
  %425 = add i32 %422, %423 can share an output register with another operation already assigned to main_signed_add_32_15
  %425 = add i32 %422, %423 can share an output register with another operation already assigned to main_signed_add_32_16
  %425 = add i32 %422, %423 can share an output register with another operation already assigned to main_signed_add_32_17
  %425 = add i32 %422, %423 can share an output register with another operation already assigned to main_signed_add_32_18
  %426 = add i32 %425, %424 can share an output register with another operation already assigned to main_signed_add_32_0
  %426 = add i32 %425, %424 can share an output register with another operation already assigned to main_signed_add_32_1
  %426 = add i32 %425, %424 can share an output register with another operation already assigned to main_signed_add_32_2
  %426 = add i32 %425, %424 can share an output register with another operation already assigned to main_signed_add_32_3
  %426 = add i32 %425, %424 can share an output register with another operation already assigned to main_signed_add_32_4
  %426 = add i32 %425, %424 can share an output register with another operation already assigned to main_signed_add_32_5
  %426 = add i32 %425, %424 can share an output register with another operation already assigned to main_signed_add_32_6
  %426 = add i32 %425, %424 can share an output register with another operation already assigned to main_signed_add_32_7
  %426 = add i32 %425, %424 can share an output register with another operation already assigned to main_signed_add_32_8
  %426 = add i32 %425, %424 can share an output register with another operation already assigned to main_signed_add_32_9
  %426 = add i32 %425, %424 can share an output register with another operation already assigned to main_signed_add_32_10
  %426 = add i32 %425, %424 can share an output register with another operation already assigned to main_signed_add_32_11
  %426 = add i32 %425, %424 can share an output register with another operation already assigned to main_signed_add_32_12
  %426 = add i32 %425, %424 can share an output register with another operation already assigned to main_signed_add_32_13
  %426 = add i32 %425, %424 can share an output register with another operation already assigned to main_signed_add_32_15
  %426 = add i32 %425, %424 can share an output register with another operation already assigned to main_signed_add_32_16
  %426 = add i32 %425, %424 can share an output register with another operation already assigned to main_signed_add_32_17
  %426 = add i32 %425, %424 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %422 = add nsw i32 %418, %42... (idx: 0)        -1080                         -180                          -50                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -280                          -530                          
  %425 = add i32 %422, %423 (idx: 1)              -1080                         -180                          -50                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -279                          -530                          
  %426 = add i32 %425, %424 (idx: 2)              -1080                         -180                          -50                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -279                          -530                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %422 = add nsw i32 %418, %42... (idx
  %425 = add i32 %422, %423 (idx
  %426 = add i32 %425, %424 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %426 = add i32 %425, %424 (idx: 2) -> main_signed_add_32_0 (mux inputs: 110)
  %422 = add nsw i32 %418, %42... (idx: 0) -> main_signed_add_32_17 (mux inputs: 30)
  %425 = add i32 %422, %423 (idx: 1) -> main_signed_add_32_18 (mux inputs: 55)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %435 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %435 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %436 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %436 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %435 = load i32* getelementp... (idx: 0)        1                             11                            
  %436 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %435 = load i32* getelementp... (idx: 0)        1                             0                             
  %436 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %435 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %436 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %429 = add i32 %426, %427 can share an output register with another operation already assigned to main_signed_add_32_0
  %429 = add i32 %426, %427 can share an output register with another operation already assigned to main_signed_add_32_1
  %429 = add i32 %426, %427 can share an output register with another operation already assigned to main_signed_add_32_2
  %429 = add i32 %426, %427 can share an output register with another operation already assigned to main_signed_add_32_3
  %429 = add i32 %426, %427 can share an output register with another operation already assigned to main_signed_add_32_4
  %429 = add i32 %426, %427 can share an output register with another operation already assigned to main_signed_add_32_5
  %429 = add i32 %426, %427 can share an output register with another operation already assigned to main_signed_add_32_6
  %429 = add i32 %426, %427 can share an output register with another operation already assigned to main_signed_add_32_7
  %429 = add i32 %426, %427 can share an output register with another operation already assigned to main_signed_add_32_8
  %429 = add i32 %426, %427 can share an output register with another operation already assigned to main_signed_add_32_9
  %429 = add i32 %426, %427 can share an output register with another operation already assigned to main_signed_add_32_10
  %429 = add i32 %426, %427 can share an output register with another operation already assigned to main_signed_add_32_11
  %429 = add i32 %426, %427 can share an output register with another operation already assigned to main_signed_add_32_12
  %429 = add i32 %426, %427 can share an output register with another operation already assigned to main_signed_add_32_13
  %429 = add i32 %426, %427 can share an output register with another operation already assigned to main_signed_add_32_15
  %429 = add i32 %426, %427 can share an output register with another operation already assigned to main_signed_add_32_16
  %429 = add i32 %426, %427 can share an output register with another operation already assigned to main_signed_add_32_17
  %429 = add i32 %426, %427 can share an output register with another operation already assigned to main_signed_add_32_18
  %430 = add i32 %429, %428 can share an output register with another operation already assigned to main_signed_add_32_0
  %430 = add i32 %429, %428 can share an output register with another operation already assigned to main_signed_add_32_1
  %430 = add i32 %429, %428 can share an output register with another operation already assigned to main_signed_add_32_2
  %430 = add i32 %429, %428 can share an output register with another operation already assigned to main_signed_add_32_3
  %430 = add i32 %429, %428 can share an output register with another operation already assigned to main_signed_add_32_4
  %430 = add i32 %429, %428 can share an output register with another operation already assigned to main_signed_add_32_5
  %430 = add i32 %429, %428 can share an output register with another operation already assigned to main_signed_add_32_6
  %430 = add i32 %429, %428 can share an output register with another operation already assigned to main_signed_add_32_7
  %430 = add i32 %429, %428 can share an output register with another operation already assigned to main_signed_add_32_8
  %430 = add i32 %429, %428 can share an output register with another operation already assigned to main_signed_add_32_9
  %430 = add i32 %429, %428 can share an output register with another operation already assigned to main_signed_add_32_10
  %430 = add i32 %429, %428 can share an output register with another operation already assigned to main_signed_add_32_11
  %430 = add i32 %429, %428 can share an output register with another operation already assigned to main_signed_add_32_12
  %430 = add i32 %429, %428 can share an output register with another operation already assigned to main_signed_add_32_13
  %430 = add i32 %429, %428 can share an output register with another operation already assigned to main_signed_add_32_15
  %430 = add i32 %429, %428 can share an output register with another operation already assigned to main_signed_add_32_16
  %430 = add i32 %429, %428 can share an output register with another operation already assigned to main_signed_add_32_17
  %430 = add i32 %429, %428 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %429 = add i32 %426, %427 (idx: 0)              -1100                         -180                          -50                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -299                          -550                          
  %430 = add i32 %429, %428 (idx: 1)              -1100                         -180                          -50                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -299                          -550                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %429 = add i32 %426, %427 (idx
  %430 = add i32 %429, %428 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %429 = add i32 %426, %427 (idx: 0) -> main_signed_add_32_0 (mux inputs: 112)
  %430 = add i32 %429, %428 (idx: 1) -> main_signed_add_32_18 (mux inputs: 57)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %439 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %439 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %440 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %440 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %439 = load i32* getelementp... (idx: 0)        1                             11                            
  %440 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %439 = load i32* getelementp... (idx: 0)        1                             0                             
  %440 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %439 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %440 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %433 = add i32 %430, %431 can share an output register with another operation already assigned to main_signed_add_32_0
  %433 = add i32 %430, %431 can share an output register with another operation already assigned to main_signed_add_32_1
  %433 = add i32 %430, %431 can share an output register with another operation already assigned to main_signed_add_32_2
  %433 = add i32 %430, %431 can share an output register with another operation already assigned to main_signed_add_32_3
  %433 = add i32 %430, %431 can share an output register with another operation already assigned to main_signed_add_32_4
  %433 = add i32 %430, %431 can share an output register with another operation already assigned to main_signed_add_32_5
  %433 = add i32 %430, %431 can share an output register with another operation already assigned to main_signed_add_32_6
  %433 = add i32 %430, %431 can share an output register with another operation already assigned to main_signed_add_32_7
  %433 = add i32 %430, %431 can share an output register with another operation already assigned to main_signed_add_32_8
  %433 = add i32 %430, %431 can share an output register with another operation already assigned to main_signed_add_32_9
  %433 = add i32 %430, %431 can share an output register with another operation already assigned to main_signed_add_32_10
  %433 = add i32 %430, %431 can share an output register with another operation already assigned to main_signed_add_32_11
  %433 = add i32 %430, %431 can share an output register with another operation already assigned to main_signed_add_32_12
  %433 = add i32 %430, %431 can share an output register with another operation already assigned to main_signed_add_32_13
  %433 = add i32 %430, %431 can share an output register with another operation already assigned to main_signed_add_32_15
  %433 = add i32 %430, %431 can share an output register with another operation already assigned to main_signed_add_32_16
  %433 = add i32 %430, %431 can share an output register with another operation already assigned to main_signed_add_32_17
  %433 = add i32 %430, %431 can share an output register with another operation already assigned to main_signed_add_32_18
  %434 = add i32 %433, %432 can share an output register with another operation already assigned to main_signed_add_32_0
  %434 = add i32 %433, %432 can share an output register with another operation already assigned to main_signed_add_32_1
  %434 = add i32 %433, %432 can share an output register with another operation already assigned to main_signed_add_32_2
  %434 = add i32 %433, %432 can share an output register with another operation already assigned to main_signed_add_32_3
  %434 = add i32 %433, %432 can share an output register with another operation already assigned to main_signed_add_32_4
  %434 = add i32 %433, %432 can share an output register with another operation already assigned to main_signed_add_32_5
  %434 = add i32 %433, %432 can share an output register with another operation already assigned to main_signed_add_32_6
  %434 = add i32 %433, %432 can share an output register with another operation already assigned to main_signed_add_32_7
  %434 = add i32 %433, %432 can share an output register with another operation already assigned to main_signed_add_32_8
  %434 = add i32 %433, %432 can share an output register with another operation already assigned to main_signed_add_32_9
  %434 = add i32 %433, %432 can share an output register with another operation already assigned to main_signed_add_32_10
  %434 = add i32 %433, %432 can share an output register with another operation already assigned to main_signed_add_32_11
  %434 = add i32 %433, %432 can share an output register with another operation already assigned to main_signed_add_32_12
  %434 = add i32 %433, %432 can share an output register with another operation already assigned to main_signed_add_32_13
  %434 = add i32 %433, %432 can share an output register with another operation already assigned to main_signed_add_32_15
  %434 = add i32 %433, %432 can share an output register with another operation already assigned to main_signed_add_32_16
  %434 = add i32 %433, %432 can share an output register with another operation already assigned to main_signed_add_32_17
  %434 = add i32 %433, %432 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %433 = add i32 %430, %431 (idx: 0)              -1120                         -180                          -50                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -299                          -570                          
  %434 = add i32 %433, %432 (idx: 1)              -1120                         -180                          -50                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -299                          -570                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %433 = add i32 %430, %431 (idx
  %434 = add i32 %433, %432 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %433 = add i32 %430, %431 (idx: 0) -> main_signed_add_32_0 (mux inputs: 114)
  %434 = add i32 %433, %432 (idx: 1) -> main_signed_add_32_18 (mux inputs: 59)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %437 = add i32 %434, %435 can share an output register with another operation already assigned to main_signed_add_32_0
  %437 = add i32 %434, %435 can share an output register with another operation already assigned to main_signed_add_32_1
  %437 = add i32 %434, %435 can share an output register with another operation already assigned to main_signed_add_32_2
  %437 = add i32 %434, %435 can share an output register with another operation already assigned to main_signed_add_32_3
  %437 = add i32 %434, %435 can share an output register with another operation already assigned to main_signed_add_32_4
  %437 = add i32 %434, %435 can share an output register with another operation already assigned to main_signed_add_32_5
  %437 = add i32 %434, %435 can share an output register with another operation already assigned to main_signed_add_32_6
  %437 = add i32 %434, %435 can share an output register with another operation already assigned to main_signed_add_32_7
  %437 = add i32 %434, %435 can share an output register with another operation already assigned to main_signed_add_32_8
  %437 = add i32 %434, %435 can share an output register with another operation already assigned to main_signed_add_32_9
  %437 = add i32 %434, %435 can share an output register with another operation already assigned to main_signed_add_32_10
  %437 = add i32 %434, %435 can share an output register with another operation already assigned to main_signed_add_32_11
  %437 = add i32 %434, %435 can share an output register with another operation already assigned to main_signed_add_32_12
  %437 = add i32 %434, %435 can share an output register with another operation already assigned to main_signed_add_32_13
  %437 = add i32 %434, %435 can share an output register with another operation already assigned to main_signed_add_32_15
  %437 = add i32 %434, %435 can share an output register with another operation already assigned to main_signed_add_32_16
  %437 = add i32 %434, %435 can share an output register with another operation already assigned to main_signed_add_32_17
  %437 = add i32 %434, %435 can share an output register with another operation already assigned to main_signed_add_32_18
  %438 = add i32 %437, %436 can share an output register with another operation already assigned to main_signed_add_32_0
  %438 = add i32 %437, %436 can share an output register with another operation already assigned to main_signed_add_32_1
  %438 = add i32 %437, %436 can share an output register with another operation already assigned to main_signed_add_32_2
  %438 = add i32 %437, %436 can share an output register with another operation already assigned to main_signed_add_32_3
  %438 = add i32 %437, %436 can share an output register with another operation already assigned to main_signed_add_32_4
  %438 = add i32 %437, %436 can share an output register with another operation already assigned to main_signed_add_32_5
  %438 = add i32 %437, %436 can share an output register with another operation already assigned to main_signed_add_32_6
  %438 = add i32 %437, %436 can share an output register with another operation already assigned to main_signed_add_32_7
  %438 = add i32 %437, %436 can share an output register with another operation already assigned to main_signed_add_32_8
  %438 = add i32 %437, %436 can share an output register with another operation already assigned to main_signed_add_32_9
  %438 = add i32 %437, %436 can share an output register with another operation already assigned to main_signed_add_32_10
  %438 = add i32 %437, %436 can share an output register with another operation already assigned to main_signed_add_32_11
  %438 = add i32 %437, %436 can share an output register with another operation already assigned to main_signed_add_32_12
  %438 = add i32 %437, %436 can share an output register with another operation already assigned to main_signed_add_32_13
  %438 = add i32 %437, %436 can share an output register with another operation already assigned to main_signed_add_32_15
  %438 = add i32 %437, %436 can share an output register with another operation already assigned to main_signed_add_32_16
  %438 = add i32 %437, %436 can share an output register with another operation already assigned to main_signed_add_32_17
  %438 = add i32 %437, %436 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %437 = add i32 %434, %435 (idx: 0)              -1140                         -180                          -50                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -299                          -590                          
  %438 = add i32 %437, %436 (idx: 1)              -1140                         -180                          -50                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -299                          -590                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %437 = add i32 %434, %435 (idx: 0)              1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %438 = add i32 %437, %436 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %437 = add i32 %434, %435 (idx: 0) -> main_signed_add_32_0 (mux inputs: 116)
  %438 = add i32 %437, %436 (idx: 1) -> main_signed_add_32_18 (mux inputs: 61)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %441 = add i32 %438, %439 can share an output register with another operation already assigned to main_signed_add_32_0
  %441 = add i32 %438, %439 can share an output register with another operation already assigned to main_signed_add_32_1
  %441 = add i32 %438, %439 can share an output register with another operation already assigned to main_signed_add_32_2
  %441 = add i32 %438, %439 can share an output register with another operation already assigned to main_signed_add_32_3
  %441 = add i32 %438, %439 can share an output register with another operation already assigned to main_signed_add_32_4
  %441 = add i32 %438, %439 can share an output register with another operation already assigned to main_signed_add_32_5
  %441 = add i32 %438, %439 can share an output register with another operation already assigned to main_signed_add_32_6
  %441 = add i32 %438, %439 can share an output register with another operation already assigned to main_signed_add_32_7
  %441 = add i32 %438, %439 can share an output register with another operation already assigned to main_signed_add_32_8
  %441 = add i32 %438, %439 can share an output register with another operation already assigned to main_signed_add_32_9
  %441 = add i32 %438, %439 can share an output register with another operation already assigned to main_signed_add_32_10
  %441 = add i32 %438, %439 can share an output register with another operation already assigned to main_signed_add_32_11
  %441 = add i32 %438, %439 can share an output register with another operation already assigned to main_signed_add_32_12
  %441 = add i32 %438, %439 can share an output register with another operation already assigned to main_signed_add_32_13
  %441 = add i32 %438, %439 can share an output register with another operation already assigned to main_signed_add_32_15
  %441 = add i32 %438, %439 can share an output register with another operation already assigned to main_signed_add_32_16
  %441 = add i32 %438, %439 can share an output register with another operation already assigned to main_signed_add_32_17
  %441 = add i32 %438, %439 can share an output register with another operation already assigned to main_signed_add_32_18
  %442 = add i32 %441, %440 can share an output register with another operation already assigned to main_signed_add_32_0
  %442 = add i32 %441, %440 can share an output register with another operation already assigned to main_signed_add_32_1
  %442 = add i32 %441, %440 can share an output register with another operation already assigned to main_signed_add_32_2
  %442 = add i32 %441, %440 can share an output register with another operation already assigned to main_signed_add_32_3
  %442 = add i32 %441, %440 can share an output register with another operation already assigned to main_signed_add_32_4
  %442 = add i32 %441, %440 can share an output register with another operation already assigned to main_signed_add_32_5
  %442 = add i32 %441, %440 can share an output register with another operation already assigned to main_signed_add_32_6
  %442 = add i32 %441, %440 can share an output register with another operation already assigned to main_signed_add_32_7
  %442 = add i32 %441, %440 can share an output register with another operation already assigned to main_signed_add_32_8
  %442 = add i32 %441, %440 can share an output register with another operation already assigned to main_signed_add_32_9
  %442 = add i32 %441, %440 can share an output register with another operation already assigned to main_signed_add_32_10
  %442 = add i32 %441, %440 can share an output register with another operation already assigned to main_signed_add_32_11
  %442 = add i32 %441, %440 can share an output register with another operation already assigned to main_signed_add_32_12
  %442 = add i32 %441, %440 can share an output register with another operation already assigned to main_signed_add_32_13
  %442 = add i32 %441, %440 can share an output register with another operation already assigned to main_signed_add_32_15
  %442 = add i32 %441, %440 can share an output register with another operation already assigned to main_signed_add_32_16
  %442 = add i32 %441, %440 can share an output register with another operation already assigned to main_signed_add_32_17
  %442 = add i32 %441, %440 can share an output register with another operation already assigned to main_signed_add_32_18
  %447 = add nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_add_32_0
  %447 = add nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_add_32_1
  %447 = add nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_add_32_2
  %447 = add nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_add_32_3
  %447 = add nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_add_32_4
  %447 = add nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_add_32_5
  %447 = add nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_add_32_6
  %447 = add nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_add_32_7
  %447 = add nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_add_32_8
  %447 = add nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_add_32_9
  %447 = add nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_add_32_10
  %447 = add nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_add_32_11
  %447 = add nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_add_32_12
  %447 = add nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_add_32_13
  %447 = add nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_add_32_15
  %447 = add nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_add_32_16
  %447 = add nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_add_32_17
  %447 = add nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %441 = add i32 %438, %439 (idx: 0)              -1160                         -180                          -50                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -299                          -610                          
  %442 = add i32 %441, %440 (idx: 1)              -1160                         -180                          -50                           -19                           -19                           -19                           -18                           -19                           -19                           -20                           -19                           -19                           -39                           -39                           -9                            -19                           -19                           -299                          -610                          
  %447 = add nsw i32 %446, %44... (idx: 2)        -1160                         -180                          -50                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -10                           -20                           -20                           -300                          -610                          
  %467 = add nsw i32 %443, %45... (idx: 3)        -1170                         -190                          -60                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -50                           -50                           -10                           -30                           -30                           -310                          -620                          
  %491 = add nsw i32 %451, %44... (idx: 4)        -1170                         -190                          -60                           -30                           -30                           -30                           -29                           -30                           -30                           -30                           -30                           -30                           -50                           -50                           -10                           -30                           -30                           -310                          -620                          
  %493 = add nsw i32 %491, %35... (idx: 5)        -1170                         -190                          -60                           -30                           -30                           -30                           -28                           -30                           -30                           -30                           -30                           -30                           -50                           -50                           -10                           -30                           -30                           -310                          -620                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %441 = add i32 %438, %439 (idx
  %442 = add i32 %441, %440 (idx
  %447 = add nsw i32 %446, %44... (idx
  %467 = add nsw i32 %443, %45... (idx
  %491 = add nsw i32 %451, %44... (idx
  %493 = add nsw i32 %491, %35... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %441 = add i32 %438, %439 (idx: 0) -> main_signed_add_32_0 (mux inputs: 118)
  %467 = add nsw i32 %443, %45... (idx: 3) -> main_signed_add_32_1 (mux inputs: 20)
  %491 = add nsw i32 %451, %44... (idx: 4) -> main_signed_add_32_2 (mux inputs: 7)
  %493 = add nsw i32 %491, %35... (idx: 5) -> main_signed_add_32_12 (mux inputs: 6)
  %447 = add nsw i32 %446, %44... (idx: 2) -> main_signed_add_32_17 (mux inputs: 32)
  %442 = add i32 %441, %440 (idx: 1) -> main_signed_add_32_18 (mux inputs: 63)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %469 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %473 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_14
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_15
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_16
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_17
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_18
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_19
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_20
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_21
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_24
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_26
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_27
  %494 = mul nsw i32 %492, 12 can share an output register with another operation already assigned to main_signed_multiply_32_28
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_14
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_15
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_16
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_17
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_18
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_19
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_20
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_21
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_24
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_26
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_27
  %495 = mul nsw i32 %493, -44 can share an output register with another operation already assigned to main_signed_multiply_32_28
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %469 = mul nsw i32 %dec_ph1.... (idx: 0)        -90                           -30                           -30                           -20                           -20                           -29                           -30                           -20                           -30                           -20                           -20                           -20                           -20                           -20                           -19                           -20                           -19                           -20                           -20                           -679                          -30                           -19                           -20                           -19                           -20                           -20                           -20                           -19                           -20                           
  %473 = mul nsw i32 %dec_ph2.... (idx: 1)        -90                           -30                           -30                           -20                           -20                           -29                           -30                           -20                           -30                           -20                           -20                           -20                           -20                           -20                           -19                           -20                           -19                           -20                           -20                           -679                          -30                           -19                           -20                           -19                           -20                           -20                           -20                           -19                           -20                           
  %494 = mul nsw i32 %492, 12 (idx: 2)            -84                           -24                           -24                           -15                           -13                           -24                           -23                           -13                           -24                           -14                           -13                           -13                           -13                           -14                           -14                           -13                           -14                           -13                           -13                           -674                          -23                           -14                           -13                           -14                           -14                           -14                           -13                           -14                           -13                           
  %495 = mul nsw i32 %493, -44 (idx: 3)           -84                           -24                           -24                           -14                           -14                           -23                           -24                           -14                           -24                           -14                           -14                           -14                           -14                           -14                           -13                           -14                           -13                           -14                           -14                           -673                          -24                           -13                           -14                           -13                           -14                           -14                           -14                           -13                           -14                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %469 = mul nsw i32 %dec_ph1.... (idx
  %473 = mul nsw i32 %dec_ph2.... (idx
  %494 = mul nsw i32 %492, 12 (idx: 2)            0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %495 = mul nsw i32 %493, -44 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %473 = mul nsw i32 %dec_ph2.... (idx: 1) -> main_signed_multiply_32_0 (mux inputs: 11)
  %495 = mul nsw i32 %493, -44 (idx: 3) -> main_signed_multiply_32_1 (mux inputs: 4)
  %469 = mul nsw i32 %dec_ph1.... (idx: 0) -> main_signed_multiply_32_2 (mux inputs: 5)
  %494 = mul nsw i32 %492, 12 (idx: 2) -> main_signed_multiply_32_19 (mux inputs: 69)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %492 = sub nsw i32 %359, %49... (idx: 0)        -160                          -80                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %492 = sub nsw i32 %359, %49... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %492 = sub nsw i32 %359, %49... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 17)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %wd4.0.i.i = add nsw i32 %47... can share an output register with another operation already assigned to main_signed_add_32_0
  %wd4.0.i.i = add nsw i32 %47... can share an output register with another operation already assigned to main_signed_add_32_1
  %wd4.0.i.i = add nsw i32 %47... can share an output register with another operation already assigned to main_signed_add_32_2
  %wd4.0.i.i = add nsw i32 %47... can share an output register with another operation already assigned to main_signed_add_32_3
  %wd4.0.i.i = add nsw i32 %47... can share an output register with another operation already assigned to main_signed_add_32_4
  %wd4.0.i.i = add nsw i32 %47... can share an output register with another operation already assigned to main_signed_add_32_5
  %wd4.0.i.i = add nsw i32 %47... can share an output register with another operation already assigned to main_signed_add_32_6
  %wd4.0.i.i = add nsw i32 %47... can share an output register with another operation already assigned to main_signed_add_32_7
  %wd4.0.i.i = add nsw i32 %47... can share an output register with another operation already assigned to main_signed_add_32_8
  %wd4.0.i.i = add nsw i32 %47... can share an output register with another operation already assigned to main_signed_add_32_9
  %wd4.0.i.i = add nsw i32 %47... can share an output register with another operation already assigned to main_signed_add_32_10
  %wd4.0.i.i = add nsw i32 %47... can share an output register with another operation already assigned to main_signed_add_32_11
  %wd4.0.i.i = add nsw i32 %47... can share an output register with another operation already assigned to main_signed_add_32_12
  %wd4.0.i.i = add nsw i32 %47... can share an output register with another operation already assigned to main_signed_add_32_13
  %wd4.0.i.i = add nsw i32 %47... can share an output register with another operation already assigned to main_signed_add_32_15
  %wd4.0.i.i = add nsw i32 %47... can share an output register with another operation already assigned to main_signed_add_32_16
  %wd4.0.i.i = add nsw i32 %47... can share an output register with another operation already assigned to main_signed_add_32_17
  %wd4.0.i.i = add nsw i32 %47... can share an output register with another operation already assigned to main_signed_add_32_18
  %479 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_0
  %479 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_1
  %479 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_2
  %479 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_3
  %479 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_4
  %479 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_5
  %479 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_6
  %479 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_7
  %479 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_8
  %479 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_9
  %479 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_10
  %479 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_11
  %479 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_12
  %479 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_13
  %479 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_15
  %479 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_16
  %479 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_17
  %479 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_18
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_0
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_1
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_2
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_3
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_4
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_5
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_6
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_7
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_8
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_9
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_10
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_11
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_12
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_13
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_15
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_16
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_17
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_18
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_0
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_1
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_2
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_3
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_4
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_5
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_6
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_7
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_8
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_9
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_10
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_11
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_12
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_13
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_15
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_16
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_17
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_18
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_0
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_1
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_2
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_3
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_4
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_5
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_6
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_7
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_8
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_9
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_10
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_11
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_12
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_13
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_15
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_16
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_17
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_18
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_0
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_1
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_2
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_3
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_4
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_5
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_6
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_7
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_8
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_9
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_10
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_11
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_12
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_13
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_15
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_16
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_17
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_18
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_0
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_1
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_2
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_3
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_4
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_5
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_6
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_7
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_8
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_9
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_10
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_11
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_12
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_13
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_15
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_16
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_17
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_18
  %505 = add nsw i32 %504, %50... can share an output register with another operation already assigned to main_signed_add_32_0
  %505 = add nsw i32 %504, %50... can share an output register with another operation already assigned to main_signed_add_32_1
  %505 = add nsw i32 %504, %50... can share an output register with another operation already assigned to main_signed_add_32_2
  %505 = add nsw i32 %504, %50... can share an output register with another operation already assigned to main_signed_add_32_3
  %505 = add nsw i32 %504, %50... can share an output register with another operation already assigned to main_signed_add_32_4
  %505 = add nsw i32 %504, %50... can share an output register with another operation already assigned to main_signed_add_32_5
  %505 = add nsw i32 %504, %50... can share an output register with another operation already assigned to main_signed_add_32_6
  %505 = add nsw i32 %504, %50... can share an output register with another operation already assigned to main_signed_add_32_7
  %505 = add nsw i32 %504, %50... can share an output register with another operation already assigned to main_signed_add_32_8
  %505 = add nsw i32 %504, %50... can share an output register with another operation already assigned to main_signed_add_32_9
  %505 = add nsw i32 %504, %50... can share an output register with another operation already assigned to main_signed_add_32_10
  %505 = add nsw i32 %504, %50... can share an output register with another operation already assigned to main_signed_add_32_11
  %505 = add nsw i32 %504, %50... can share an output register with another operation already assigned to main_signed_add_32_12
  %505 = add nsw i32 %504, %50... can share an output register with another operation already assigned to main_signed_add_32_13
  %505 = add nsw i32 %504, %50... can share an output register with another operation already assigned to main_signed_add_32_15
  %505 = add nsw i32 %504, %50... can share an output register with another operation already assigned to main_signed_add_32_16
  %505 = add nsw i32 %504, %50... can share an output register with another operation already assigned to main_signed_add_32_17
  %505 = add nsw i32 %504, %50... can share an output register with another operation already assigned to main_signed_add_32_18
  %507 = add nsw i32 %506, %50... can share an output register with another operation already assigned to main_signed_add_32_0
  %507 = add nsw i32 %506, %50... can share an output register with another operation already assigned to main_signed_add_32_1
  %507 = add nsw i32 %506, %50... can share an output register with another operation already assigned to main_signed_add_32_2
  %507 = add nsw i32 %506, %50... can share an output register with another operation already assigned to main_signed_add_32_3
  %507 = add nsw i32 %506, %50... can share an output register with another operation already assigned to main_signed_add_32_4
  %507 = add nsw i32 %506, %50... can share an output register with another operation already assigned to main_signed_add_32_5
  %507 = add nsw i32 %506, %50... can share an output register with another operation already assigned to main_signed_add_32_6
  %507 = add nsw i32 %506, %50... can share an output register with another operation already assigned to main_signed_add_32_7
  %507 = add nsw i32 %506, %50... can share an output register with another operation already assigned to main_signed_add_32_8
  %507 = add nsw i32 %506, %50... can share an output register with another operation already assigned to main_signed_add_32_9
  %507 = add nsw i32 %506, %50... can share an output register with another operation already assigned to main_signed_add_32_10
  %507 = add nsw i32 %506, %50... can share an output register with another operation already assigned to main_signed_add_32_11
  %507 = add nsw i32 %506, %50... can share an output register with another operation already assigned to main_signed_add_32_12
  %507 = add nsw i32 %506, %50... can share an output register with another operation already assigned to main_signed_add_32_13
  %507 = add nsw i32 %506, %50... can share an output register with another operation already assigned to main_signed_add_32_15
  %507 = add nsw i32 %506, %50... can share an output register with another operation already assigned to main_signed_add_32_16
  %507 = add nsw i32 %506, %50... can share an output register with another operation already assigned to main_signed_add_32_17
  %507 = add nsw i32 %506, %50... can share an output register with another operation already assigned to main_signed_add_32_18
  %509 = add nsw i32 %508, %50... can share an output register with another operation already assigned to main_signed_add_32_0
  %509 = add nsw i32 %508, %50... can share an output register with another operation already assigned to main_signed_add_32_1
  %509 = add nsw i32 %508, %50... can share an output register with another operation already assigned to main_signed_add_32_2
  %509 = add nsw i32 %508, %50... can share an output register with another operation already assigned to main_signed_add_32_3
  %509 = add nsw i32 %508, %50... can share an output register with another operation already assigned to main_signed_add_32_4
  %509 = add nsw i32 %508, %50... can share an output register with another operation already assigned to main_signed_add_32_5
  %509 = add nsw i32 %508, %50... can share an output register with another operation already assigned to main_signed_add_32_6
  %509 = add nsw i32 %508, %50... can share an output register with another operation already assigned to main_signed_add_32_7
  %509 = add nsw i32 %508, %50... can share an output register with another operation already assigned to main_signed_add_32_8
  %509 = add nsw i32 %508, %50... can share an output register with another operation already assigned to main_signed_add_32_9
  %509 = add nsw i32 %508, %50... can share an output register with another operation already assigned to main_signed_add_32_10
  %509 = add nsw i32 %508, %50... can share an output register with another operation already assigned to main_signed_add_32_11
  %509 = add nsw i32 %508, %50... can share an output register with another operation already assigned to main_signed_add_32_12
  %509 = add nsw i32 %508, %50... can share an output register with another operation already assigned to main_signed_add_32_13
  %509 = add nsw i32 %508, %50... can share an output register with another operation already assigned to main_signed_add_32_15
  %509 = add nsw i32 %508, %50... can share an output register with another operation already assigned to main_signed_add_32_16
  %509 = add nsw i32 %508, %50... can share an output register with another operation already assigned to main_signed_add_32_17
  %509 = add nsw i32 %508, %50... can share an output register with another operation already assigned to main_signed_add_32_18
  %511 = add nsw i32 %510, %50... can share an output register with another operation already assigned to main_signed_add_32_0
  %511 = add nsw i32 %510, %50... can share an output register with another operation already assigned to main_signed_add_32_1
  %511 = add nsw i32 %510, %50... can share an output register with another operation already assigned to main_signed_add_32_2
  %511 = add nsw i32 %510, %50... can share an output register with another operation already assigned to main_signed_add_32_3
  %511 = add nsw i32 %510, %50... can share an output register with another operation already assigned to main_signed_add_32_4
  %511 = add nsw i32 %510, %50... can share an output register with another operation already assigned to main_signed_add_32_5
  %511 = add nsw i32 %510, %50... can share an output register with another operation already assigned to main_signed_add_32_6
  %511 = add nsw i32 %510, %50... can share an output register with another operation already assigned to main_signed_add_32_7
  %511 = add nsw i32 %510, %50... can share an output register with another operation already assigned to main_signed_add_32_8
  %511 = add nsw i32 %510, %50... can share an output register with another operation already assigned to main_signed_add_32_9
  %511 = add nsw i32 %510, %50... can share an output register with another operation already assigned to main_signed_add_32_10
  %511 = add nsw i32 %510, %50... can share an output register with another operation already assigned to main_signed_add_32_11
  %511 = add nsw i32 %510, %50... can share an output register with another operation already assigned to main_signed_add_32_12
  %511 = add nsw i32 %510, %50... can share an output register with another operation already assigned to main_signed_add_32_13
  %511 = add nsw i32 %510, %50... can share an output register with another operation already assigned to main_signed_add_32_15
  %511 = add nsw i32 %510, %50... can share an output register with another operation already assigned to main_signed_add_32_16
  %511 = add nsw i32 %510, %50... can share an output register with another operation already assigned to main_signed_add_32_17
  %511 = add nsw i32 %510, %50... can share an output register with another operation already assigned to main_signed_add_32_18
  %513 = add nsw i32 %512, %50... can share an output register with another operation already assigned to main_signed_add_32_0
  %513 = add nsw i32 %512, %50... can share an output register with another operation already assigned to main_signed_add_32_1
  %513 = add nsw i32 %512, %50... can share an output register with another operation already assigned to main_signed_add_32_2
  %513 = add nsw i32 %512, %50... can share an output register with another operation already assigned to main_signed_add_32_3
  %513 = add nsw i32 %512, %50... can share an output register with another operation already assigned to main_signed_add_32_4
  %513 = add nsw i32 %512, %50... can share an output register with another operation already assigned to main_signed_add_32_5
  %513 = add nsw i32 %512, %50... can share an output register with another operation already assigned to main_signed_add_32_6
  %513 = add nsw i32 %512, %50... can share an output register with another operation already assigned to main_signed_add_32_7
  %513 = add nsw i32 %512, %50... can share an output register with another operation already assigned to main_signed_add_32_8
  %513 = add nsw i32 %512, %50... can share an output register with another operation already assigned to main_signed_add_32_9
  %513 = add nsw i32 %512, %50... can share an output register with another operation already assigned to main_signed_add_32_10
  %513 = add nsw i32 %512, %50... can share an output register with another operation already assigned to main_signed_add_32_11
  %513 = add nsw i32 %512, %50... can share an output register with another operation already assigned to main_signed_add_32_12
  %513 = add nsw i32 %512, %50... can share an output register with another operation already assigned to main_signed_add_32_13
  %513 = add nsw i32 %512, %50... can share an output register with another operation already assigned to main_signed_add_32_15
  %513 = add nsw i32 %512, %50... can share an output register with another operation already assigned to main_signed_add_32_16
  %513 = add nsw i32 %512, %50... can share an output register with another operation already assigned to main_signed_add_32_17
  %513 = add nsw i32 %512, %50... can share an output register with another operation already assigned to main_signed_add_32_18
  %515 = add nsw i32 %514, %51... can share an output register with another operation already assigned to main_signed_add_32_0
  %515 = add nsw i32 %514, %51... can share an output register with another operation already assigned to main_signed_add_32_1
  %515 = add nsw i32 %514, %51... can share an output register with another operation already assigned to main_signed_add_32_2
  %515 = add nsw i32 %514, %51... can share an output register with another operation already assigned to main_signed_add_32_3
  %515 = add nsw i32 %514, %51... can share an output register with another operation already assigned to main_signed_add_32_4
  %515 = add nsw i32 %514, %51... can share an output register with another operation already assigned to main_signed_add_32_5
  %515 = add nsw i32 %514, %51... can share an output register with another operation already assigned to main_signed_add_32_6
  %515 = add nsw i32 %514, %51... can share an output register with another operation already assigned to main_signed_add_32_7
  %515 = add nsw i32 %514, %51... can share an output register with another operation already assigned to main_signed_add_32_8
  %515 = add nsw i32 %514, %51... can share an output register with another operation already assigned to main_signed_add_32_9
  %515 = add nsw i32 %514, %51... can share an output register with another operation already assigned to main_signed_add_32_10
  %515 = add nsw i32 %514, %51... can share an output register with another operation already assigned to main_signed_add_32_11
  %515 = add nsw i32 %514, %51... can share an output register with another operation already assigned to main_signed_add_32_12
  %515 = add nsw i32 %514, %51... can share an output register with another operation already assigned to main_signed_add_32_13
  %515 = add nsw i32 %514, %51... can share an output register with another operation already assigned to main_signed_add_32_15
  %515 = add nsw i32 %514, %51... can share an output register with another operation already assigned to main_signed_add_32_16
  %515 = add nsw i32 %514, %51... can share an output register with another operation already assigned to main_signed_add_32_17
  %515 = add nsw i32 %514, %51... can share an output register with another operation already assigned to main_signed_add_32_18
  %517 = add nsw i32 %516, %51... can share an output register with another operation already assigned to main_signed_add_32_0
  %517 = add nsw i32 %516, %51... can share an output register with another operation already assigned to main_signed_add_32_1
  %517 = add nsw i32 %516, %51... can share an output register with another operation already assigned to main_signed_add_32_2
  %517 = add nsw i32 %516, %51... can share an output register with another operation already assigned to main_signed_add_32_3
  %517 = add nsw i32 %516, %51... can share an output register with another operation already assigned to main_signed_add_32_4
  %517 = add nsw i32 %516, %51... can share an output register with another operation already assigned to main_signed_add_32_5
  %517 = add nsw i32 %516, %51... can share an output register with another operation already assigned to main_signed_add_32_6
  %517 = add nsw i32 %516, %51... can share an output register with another operation already assigned to main_signed_add_32_7
  %517 = add nsw i32 %516, %51... can share an output register with another operation already assigned to main_signed_add_32_8
  %517 = add nsw i32 %516, %51... can share an output register with another operation already assigned to main_signed_add_32_9
  %517 = add nsw i32 %516, %51... can share an output register with another operation already assigned to main_signed_add_32_10
  %517 = add nsw i32 %516, %51... can share an output register with another operation already assigned to main_signed_add_32_11
  %517 = add nsw i32 %516, %51... can share an output register with another operation already assigned to main_signed_add_32_12
  %517 = add nsw i32 %516, %51... can share an output register with another operation already assigned to main_signed_add_32_13
  %517 = add nsw i32 %516, %51... can share an output register with another operation already assigned to main_signed_add_32_15
  %517 = add nsw i32 %516, %51... can share an output register with another operation already assigned to main_signed_add_32_16
  %517 = add nsw i32 %516, %51... can share an output register with another operation already assigned to main_signed_add_32_17
  %517 = add nsw i32 %516, %51... can share an output register with another operation already assigned to main_signed_add_32_18
  %519 = add nsw i32 %518, %51... can share an output register with another operation already assigned to main_signed_add_32_0
  %519 = add nsw i32 %518, %51... can share an output register with another operation already assigned to main_signed_add_32_1
  %519 = add nsw i32 %518, %51... can share an output register with another operation already assigned to main_signed_add_32_2
  %519 = add nsw i32 %518, %51... can share an output register with another operation already assigned to main_signed_add_32_3
  %519 = add nsw i32 %518, %51... can share an output register with another operation already assigned to main_signed_add_32_4
  %519 = add nsw i32 %518, %51... can share an output register with another operation already assigned to main_signed_add_32_5
  %519 = add nsw i32 %518, %51... can share an output register with another operation already assigned to main_signed_add_32_6
  %519 = add nsw i32 %518, %51... can share an output register with another operation already assigned to main_signed_add_32_7
  %519 = add nsw i32 %518, %51... can share an output register with another operation already assigned to main_signed_add_32_8
  %519 = add nsw i32 %518, %51... can share an output register with another operation already assigned to main_signed_add_32_9
  %519 = add nsw i32 %518, %51... can share an output register with another operation already assigned to main_signed_add_32_10
  %519 = add nsw i32 %518, %51... can share an output register with another operation already assigned to main_signed_add_32_11
  %519 = add nsw i32 %518, %51... can share an output register with another operation already assigned to main_signed_add_32_12
  %519 = add nsw i32 %518, %51... can share an output register with another operation already assigned to main_signed_add_32_13
  %519 = add nsw i32 %518, %51... can share an output register with another operation already assigned to main_signed_add_32_15
  %519 = add nsw i32 %518, %51... can share an output register with another operation already assigned to main_signed_add_32_16
  %519 = add nsw i32 %518, %51... can share an output register with another operation already assigned to main_signed_add_32_17
  %519 = add nsw i32 %518, %51... can share an output register with another operation already assigned to main_signed_add_32_18
  %521 = add nsw i32 %520, %51... can share an output register with another operation already assigned to main_signed_add_32_0
  %521 = add nsw i32 %520, %51... can share an output register with another operation already assigned to main_signed_add_32_1
  %521 = add nsw i32 %520, %51... can share an output register with another operation already assigned to main_signed_add_32_2
  %521 = add nsw i32 %520, %51... can share an output register with another operation already assigned to main_signed_add_32_3
  %521 = add nsw i32 %520, %51... can share an output register with another operation already assigned to main_signed_add_32_4
  %521 = add nsw i32 %520, %51... can share an output register with another operation already assigned to main_signed_add_32_5
  %521 = add nsw i32 %520, %51... can share an output register with another operation already assigned to main_signed_add_32_6
  %521 = add nsw i32 %520, %51... can share an output register with another operation already assigned to main_signed_add_32_7
  %521 = add nsw i32 %520, %51... can share an output register with another operation already assigned to main_signed_add_32_8
  %521 = add nsw i32 %520, %51... can share an output register with another operation already assigned to main_signed_add_32_9
  %521 = add nsw i32 %520, %51... can share an output register with another operation already assigned to main_signed_add_32_10
  %521 = add nsw i32 %520, %51... can share an output register with another operation already assigned to main_signed_add_32_11
  %521 = add nsw i32 %520, %51... can share an output register with another operation already assigned to main_signed_add_32_12
  %521 = add nsw i32 %520, %51... can share an output register with another operation already assigned to main_signed_add_32_13
  %521 = add nsw i32 %520, %51... can share an output register with another operation already assigned to main_signed_add_32_15
  %521 = add nsw i32 %520, %51... can share an output register with another operation already assigned to main_signed_add_32_16
  %521 = add nsw i32 %520, %51... can share an output register with another operation already assigned to main_signed_add_32_17
  %521 = add nsw i32 %520, %51... can share an output register with another operation already assigned to main_signed_add_32_18
  %523 = add nsw i32 %522, %51... can share an output register with another operation already assigned to main_signed_add_32_0
  %523 = add nsw i32 %522, %51... can share an output register with another operation already assigned to main_signed_add_32_1
  %523 = add nsw i32 %522, %51... can share an output register with another operation already assigned to main_signed_add_32_2
  %523 = add nsw i32 %522, %51... can share an output register with another operation already assigned to main_signed_add_32_3
  %523 = add nsw i32 %522, %51... can share an output register with another operation already assigned to main_signed_add_32_4
  %523 = add nsw i32 %522, %51... can share an output register with another operation already assigned to main_signed_add_32_5
  %523 = add nsw i32 %522, %51... can share an output register with another operation already assigned to main_signed_add_32_6
  %523 = add nsw i32 %522, %51... can share an output register with another operation already assigned to main_signed_add_32_7
  %523 = add nsw i32 %522, %51... can share an output register with another operation already assigned to main_signed_add_32_8
  %523 = add nsw i32 %522, %51... can share an output register with another operation already assigned to main_signed_add_32_9
  %523 = add nsw i32 %522, %51... can share an output register with another operation already assigned to main_signed_add_32_10
  %523 = add nsw i32 %522, %51... can share an output register with another operation already assigned to main_signed_add_32_11
  %523 = add nsw i32 %522, %51... can share an output register with another operation already assigned to main_signed_add_32_12
  %523 = add nsw i32 %522, %51... can share an output register with another operation already assigned to main_signed_add_32_13
  %523 = add nsw i32 %522, %51... can share an output register with another operation already assigned to main_signed_add_32_15
  %523 = add nsw i32 %522, %51... can share an output register with another operation already assigned to main_signed_add_32_16
  %523 = add nsw i32 %522, %51... can share an output register with another operation already assigned to main_signed_add_32_17
  %523 = add nsw i32 %522, %51... can share an output register with another operation already assigned to main_signed_add_32_18
  %525 = add nsw i32 %524, %52... can share an output register with another operation already assigned to main_signed_add_32_0
  %525 = add nsw i32 %524, %52... can share an output register with another operation already assigned to main_signed_add_32_1
  %525 = add nsw i32 %524, %52... can share an output register with another operation already assigned to main_signed_add_32_2
  %525 = add nsw i32 %524, %52... can share an output register with another operation already assigned to main_signed_add_32_3
  %525 = add nsw i32 %524, %52... can share an output register with another operation already assigned to main_signed_add_32_4
  %525 = add nsw i32 %524, %52... can share an output register with another operation already assigned to main_signed_add_32_5
  %525 = add nsw i32 %524, %52... can share an output register with another operation already assigned to main_signed_add_32_6
  %525 = add nsw i32 %524, %52... can share an output register with another operation already assigned to main_signed_add_32_7
  %525 = add nsw i32 %524, %52... can share an output register with another operation already assigned to main_signed_add_32_8
  %525 = add nsw i32 %524, %52... can share an output register with another operation already assigned to main_signed_add_32_9
  %525 = add nsw i32 %524, %52... can share an output register with another operation already assigned to main_signed_add_32_10
  %525 = add nsw i32 %524, %52... can share an output register with another operation already assigned to main_signed_add_32_11
  %525 = add nsw i32 %524, %52... can share an output register with another operation already assigned to main_signed_add_32_12
  %525 = add nsw i32 %524, %52... can share an output register with another operation already assigned to main_signed_add_32_13
  %525 = add nsw i32 %524, %52... can share an output register with another operation already assigned to main_signed_add_32_15
  %525 = add nsw i32 %524, %52... can share an output register with another operation already assigned to main_signed_add_32_16
  %525 = add nsw i32 %524, %52... can share an output register with another operation already assigned to main_signed_add_32_17
  %525 = add nsw i32 %524, %52... can share an output register with another operation already assigned to main_signed_add_32_18
  %527 = add nsw i32 %526, %52... can share an output register with another operation already assigned to main_signed_add_32_0
  %527 = add nsw i32 %526, %52... can share an output register with another operation already assigned to main_signed_add_32_1
  %527 = add nsw i32 %526, %52... can share an output register with another operation already assigned to main_signed_add_32_2
  %527 = add nsw i32 %526, %52... can share an output register with another operation already assigned to main_signed_add_32_3
  %527 = add nsw i32 %526, %52... can share an output register with another operation already assigned to main_signed_add_32_4
  %527 = add nsw i32 %526, %52... can share an output register with another operation already assigned to main_signed_add_32_5
  %527 = add nsw i32 %526, %52... can share an output register with another operation already assigned to main_signed_add_32_6
  %527 = add nsw i32 %526, %52... can share an output register with another operation already assigned to main_signed_add_32_7
  %527 = add nsw i32 %526, %52... can share an output register with another operation already assigned to main_signed_add_32_8
  %527 = add nsw i32 %526, %52... can share an output register with another operation already assigned to main_signed_add_32_9
  %527 = add nsw i32 %526, %52... can share an output register with another operation already assigned to main_signed_add_32_10
  %527 = add nsw i32 %526, %52... can share an output register with another operation already assigned to main_signed_add_32_11
  %527 = add nsw i32 %526, %52... can share an output register with another operation already assigned to main_signed_add_32_12
  %527 = add nsw i32 %526, %52... can share an output register with another operation already assigned to main_signed_add_32_13
  %527 = add nsw i32 %526, %52... can share an output register with another operation already assigned to main_signed_add_32_15
  %527 = add nsw i32 %526, %52... can share an output register with another operation already assigned to main_signed_add_32_16
  %527 = add nsw i32 %526, %52... can share an output register with another operation already assigned to main_signed_add_32_17
  %527 = add nsw i32 %526, %52... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %wd4.0.i.i = add nsw i32 %47... (idx: 0)        -1180                         -200                          -70                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -60                           -40                           -10                           -20                           -20                           -320                          -630                          
  %479 = add nsw i32 %wd4.0.i.... (idx: 1)        -1180                         -200                          -70                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -60                           -40                           -10                           -20                           -20                           -320                          -630                          
  %apl1.0.i.i = add nsw i32 %4... (idx: 2)        -1180                         -200                          -70                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -60                           -40                           -10                           -20                           -20                           -320                          -630                          
  %497 = add nsw i32 %496, %49... (idx: 3)        -1180                         -200                          -70                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -60                           -40                           -10                           -20                           -20                           -320                          -630                          
  %499 = add nsw i32 %498, %49... (idx: 4)        -1180                         -200                          -70                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -60                           -40                           -10                           -20                           -20                           -320                          -630                          
  %501 = add nsw i32 %500, %49... (idx: 5)        -1180                         -200                          -70                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -60                           -40                           -10                           -20                           -20                           -320                          -630                          
  %503 = add nsw i32 %502, %49... (idx: 6)        -1180                         -200                          -70                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -60                           -40                           -10                           -20                           -20                           -320                          -630                          
  %505 = add nsw i32 %504, %50... (idx: 7)        -1180                         -200                          -70                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -60                           -40                           -10                           -20                           -20                           -320                          -630                          
  %507 = add nsw i32 %506, %50... (idx: 8)        -1180                         -200                          -70                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -60                           -40                           -10                           -20                           -20                           -320                          -630                          
  %509 = add nsw i32 %508, %50... (idx: 9)        -1180                         -200                          -70                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -60                           -40                           -10                           -20                           -20                           -320                          -630                          
  %511 = add nsw i32 %510, %50... (idx: 10)       -1180                         -200                          -70                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -60                           -40                           -10                           -20                           -20                           -320                          -630                          
  %513 = add nsw i32 %512, %50... (idx: 11)       -1180                         -200                          -70                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -60                           -40                           -10                           -20                           -20                           -320                          -630                          
  %515 = add nsw i32 %514, %51... (idx: 12)       -1180                         -200                          -70                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -60                           -40                           -10                           -20                           -20                           -320                          -630                          
  %517 = add nsw i32 %516, %51... (idx: 13)       -1180                         -200                          -70                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -60                           -40                           -10                           -20                           -20                           -320                          -630                          
  %519 = add nsw i32 %518, %51... (idx: 14)       -1180                         -200                          -70                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -60                           -40                           -10                           -20                           -20                           -320                          -630                          
  %521 = add nsw i32 %520, %51... (idx: 15)       -1180                         -200                          -70                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -60                           -40                           -10                           -20                           -20                           -320                          -630                          
  %523 = add nsw i32 %522, %51... (idx: 16)       -1180                         -200                          -70                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -60                           -40                           -10                           -20                           -20                           -320                          -630                          
  %525 = add nsw i32 %524, %52... (idx: 17)       -1180                         -200                          -70                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -60                           -40                           -10                           -20                           -20                           -320                          -630                          
  %527 = add nsw i32 %526, %52... (idx: 18)       -1180                         -200                          -70                           -20                           -20                           -20                           -19                           -20                           -20                           -20                           -20                           -20                           -60                           -40                           -10                           -20                           -20                           -320                          -630                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %wd4.0.i.i = add nsw i32 %47... (idx
  %479 = add nsw i32 %wd4.0.i.... (idx
  %apl1.0.i.i = add nsw i32 %4... (idx
  %497 = add nsw i32 %496, %49... (idx
  %499 = add nsw i32 %498, %49... (idx
  %501 = add nsw i32 %500, %49... (idx
  %503 = add nsw i32 %502, %49... (idx
  %505 = add nsw i32 %504, %50... (idx
  %507 = add nsw i32 %506, %50... (idx
  %509 = add nsw i32 %508, %50... (idx
  %511 = add nsw i32 %510, %50... (idx
  %513 = add nsw i32 %512, %50... (idx
  %515 = add nsw i32 %514, %51... (idx
  %517 = add nsw i32 %516, %51... (idx
  %519 = add nsw i32 %518, %51... (idx
  %521 = add nsw i32 %520, %51... (idx
  %523 = add nsw i32 %522, %51... (idx
  %525 = add nsw i32 %524, %52... (idx
  %527 = add nsw i32 %526, %52... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %527 = add nsw i32 %526, %52... (idx: 18) -> main_signed_add_32_0 (mux inputs: 120)
  %479 = add nsw i32 %wd4.0.i.... (idx: 1) -> main_signed_add_32_1 (mux inputs: 22)
  %apl1.0.i.i = add nsw i32 %4... (idx: 2) -> main_signed_add_32_2 (mux inputs: 9)
  %497 = add nsw i32 %496, %49... (idx: 3) -> main_signed_add_32_3 (mux inputs: 4)
  %499 = add nsw i32 %498, %49... (idx: 4) -> main_signed_add_32_4 (mux inputs: 4)
  %501 = add nsw i32 %500, %49... (idx: 5) -> main_signed_add_32_5 (mux inputs: 4)
  %wd4.0.i.i = add nsw i32 %47... (idx: 0) -> main_signed_add_32_6 (mux inputs: 4)
  %503 = add nsw i32 %502, %49... (idx: 6) -> main_signed_add_32_7 (mux inputs: 4)
  %505 = add nsw i32 %504, %50... (idx: 7) -> main_signed_add_32_8 (mux inputs: 4)
  %507 = add nsw i32 %506, %50... (idx: 8) -> main_signed_add_32_9 (mux inputs: 4)
  %509 = add nsw i32 %508, %50... (idx: 9) -> main_signed_add_32_10 (mux inputs: 4)
  %511 = add nsw i32 %510, %50... (idx: 10) -> main_signed_add_32_11 (mux inputs: 4)
  %513 = add nsw i32 %512, %50... (idx: 11) -> main_signed_add_32_12 (mux inputs: 8)
  %515 = add nsw i32 %514, %51... (idx: 12) -> main_signed_add_32_13 (mux inputs: 6)
  %517 = add nsw i32 %516, %51... (idx: 13) -> main_signed_add_32_14 (mux inputs: 2)
  %519 = add nsw i32 %518, %51... (idx: 14) -> main_signed_add_32_15 (mux inputs: 4)
  %521 = add nsw i32 %520, %51... (idx: 15) -> main_signed_add_32_16 (mux inputs: 4)
  %523 = add nsw i32 %522, %51... (idx: 16) -> main_signed_add_32_17 (mux inputs: 34)
  %525 = add nsw i32 %524, %52... (idx: 17) -> main_signed_add_32_18 (mux inputs: 65)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: result_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_result_local_mem_dual_port_0
  store i32 %540, i32* %542, a... (idx: 0)        90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_result_local_mem_dual_port_0
  store i32 %540, i32* %542, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %540, i32* %542, a... (idx: 0) -> main_result_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %529 = add nsw i32 %528, %52... can share an output register with another operation already assigned to main_signed_add_32_0
  %529 = add nsw i32 %528, %52... can share an output register with another operation already assigned to main_signed_add_32_1
  %529 = add nsw i32 %528, %52... can share an output register with another operation already assigned to main_signed_add_32_2
  %529 = add nsw i32 %528, %52... can share an output register with another operation already assigned to main_signed_add_32_3
  %529 = add nsw i32 %528, %52... can share an output register with another operation already assigned to main_signed_add_32_4
  %529 = add nsw i32 %528, %52... can share an output register with another operation already assigned to main_signed_add_32_5
  %529 = add nsw i32 %528, %52... can share an output register with another operation already assigned to main_signed_add_32_6
  %529 = add nsw i32 %528, %52... can share an output register with another operation already assigned to main_signed_add_32_7
  %529 = add nsw i32 %528, %52... can share an output register with another operation already assigned to main_signed_add_32_8
  %529 = add nsw i32 %528, %52... can share an output register with another operation already assigned to main_signed_add_32_9
  %529 = add nsw i32 %528, %52... can share an output register with another operation already assigned to main_signed_add_32_10
  %529 = add nsw i32 %528, %52... can share an output register with another operation already assigned to main_signed_add_32_11
  %529 = add nsw i32 %528, %52... can share an output register with another operation already assigned to main_signed_add_32_12
  %529 = add nsw i32 %528, %52... can share an output register with another operation already assigned to main_signed_add_32_13
  %529 = add nsw i32 %528, %52... can share an output register with another operation already assigned to main_signed_add_32_14
  %529 = add nsw i32 %528, %52... can share an output register with another operation already assigned to main_signed_add_32_15
  %529 = add nsw i32 %528, %52... can share an output register with another operation already assigned to main_signed_add_32_16
  %529 = add nsw i32 %528, %52... can share an output register with another operation already assigned to main_signed_add_32_17
  %529 = add nsw i32 %528, %52... can share an output register with another operation already assigned to main_signed_add_32_18
  %531 = add nsw i32 %530, %52... can share an output register with another operation already assigned to main_signed_add_32_0
  %531 = add nsw i32 %530, %52... can share an output register with another operation already assigned to main_signed_add_32_1
  %531 = add nsw i32 %530, %52... can share an output register with another operation already assigned to main_signed_add_32_2
  %531 = add nsw i32 %530, %52... can share an output register with another operation already assigned to main_signed_add_32_3
  %531 = add nsw i32 %530, %52... can share an output register with another operation already assigned to main_signed_add_32_4
  %531 = add nsw i32 %530, %52... can share an output register with another operation already assigned to main_signed_add_32_5
  %531 = add nsw i32 %530, %52... can share an output register with another operation already assigned to main_signed_add_32_6
  %531 = add nsw i32 %530, %52... can share an output register with another operation already assigned to main_signed_add_32_7
  %531 = add nsw i32 %530, %52... can share an output register with another operation already assigned to main_signed_add_32_8
  %531 = add nsw i32 %530, %52... can share an output register with another operation already assigned to main_signed_add_32_9
  %531 = add nsw i32 %530, %52... can share an output register with another operation already assigned to main_signed_add_32_10
  %531 = add nsw i32 %530, %52... can share an output register with another operation already assigned to main_signed_add_32_11
  %531 = add nsw i32 %530, %52... can share an output register with another operation already assigned to main_signed_add_32_12
  %531 = add nsw i32 %530, %52... can share an output register with another operation already assigned to main_signed_add_32_13
  %531 = add nsw i32 %530, %52... can share an output register with another operation already assigned to main_signed_add_32_14
  %531 = add nsw i32 %530, %52... can share an output register with another operation already assigned to main_signed_add_32_15
  %531 = add nsw i32 %530, %52... can share an output register with another operation already assigned to main_signed_add_32_16
  %531 = add nsw i32 %530, %52... can share an output register with another operation already assigned to main_signed_add_32_17
  %531 = add nsw i32 %530, %52... can share an output register with another operation already assigned to main_signed_add_32_18
  %533 = add nsw i32 %532, %52... can share an output register with another operation already assigned to main_signed_add_32_0
  %533 = add nsw i32 %532, %52... can share an output register with another operation already assigned to main_signed_add_32_1
  %533 = add nsw i32 %532, %52... can share an output register with another operation already assigned to main_signed_add_32_2
  %533 = add nsw i32 %532, %52... can share an output register with another operation already assigned to main_signed_add_32_3
  %533 = add nsw i32 %532, %52... can share an output register with another operation already assigned to main_signed_add_32_4
  %533 = add nsw i32 %532, %52... can share an output register with another operation already assigned to main_signed_add_32_5
  %533 = add nsw i32 %532, %52... can share an output register with another operation already assigned to main_signed_add_32_6
  %533 = add nsw i32 %532, %52... can share an output register with another operation already assigned to main_signed_add_32_7
  %533 = add nsw i32 %532, %52... can share an output register with another operation already assigned to main_signed_add_32_8
  %533 = add nsw i32 %532, %52... can share an output register with another operation already assigned to main_signed_add_32_9
  %533 = add nsw i32 %532, %52... can share an output register with another operation already assigned to main_signed_add_32_10
  %533 = add nsw i32 %532, %52... can share an output register with another operation already assigned to main_signed_add_32_11
  %533 = add nsw i32 %532, %52... can share an output register with another operation already assigned to main_signed_add_32_12
  %533 = add nsw i32 %532, %52... can share an output register with another operation already assigned to main_signed_add_32_13
  %533 = add nsw i32 %532, %52... can share an output register with another operation already assigned to main_signed_add_32_14
  %533 = add nsw i32 %532, %52... can share an output register with another operation already assigned to main_signed_add_32_15
  %533 = add nsw i32 %532, %52... can share an output register with another operation already assigned to main_signed_add_32_16
  %533 = add nsw i32 %532, %52... can share an output register with another operation already assigned to main_signed_add_32_17
  %533 = add nsw i32 %532, %52... can share an output register with another operation already assigned to main_signed_add_32_18
  %535 = add nsw i32 %534, %53... can share an output register with another operation already assigned to main_signed_add_32_0
  %535 = add nsw i32 %534, %53... can share an output register with another operation already assigned to main_signed_add_32_1
  %535 = add nsw i32 %534, %53... can share an output register with another operation already assigned to main_signed_add_32_2
  %535 = add nsw i32 %534, %53... can share an output register with another operation already assigned to main_signed_add_32_3
  %535 = add nsw i32 %534, %53... can share an output register with another operation already assigned to main_signed_add_32_4
  %535 = add nsw i32 %534, %53... can share an output register with another operation already assigned to main_signed_add_32_5
  %535 = add nsw i32 %534, %53... can share an output register with another operation already assigned to main_signed_add_32_6
  %535 = add nsw i32 %534, %53... can share an output register with another operation already assigned to main_signed_add_32_7
  %535 = add nsw i32 %534, %53... can share an output register with another operation already assigned to main_signed_add_32_8
  %535 = add nsw i32 %534, %53... can share an output register with another operation already assigned to main_signed_add_32_9
  %535 = add nsw i32 %534, %53... can share an output register with another operation already assigned to main_signed_add_32_10
  %535 = add nsw i32 %534, %53... can share an output register with another operation already assigned to main_signed_add_32_11
  %535 = add nsw i32 %534, %53... can share an output register with another operation already assigned to main_signed_add_32_12
  %535 = add nsw i32 %534, %53... can share an output register with another operation already assigned to main_signed_add_32_13
  %535 = add nsw i32 %534, %53... can share an output register with another operation already assigned to main_signed_add_32_14
  %535 = add nsw i32 %534, %53... can share an output register with another operation already assigned to main_signed_add_32_15
  %535 = add nsw i32 %534, %53... can share an output register with another operation already assigned to main_signed_add_32_16
  %535 = add nsw i32 %534, %53... can share an output register with another operation already assigned to main_signed_add_32_17
  %535 = add nsw i32 %534, %53... can share an output register with another operation already assigned to main_signed_add_32_18
  %537 = add nsw i32 %536, %53... can share an output register with another operation already assigned to main_signed_add_32_0
  %537 = add nsw i32 %536, %53... can share an output register with another operation already assigned to main_signed_add_32_1
  %537 = add nsw i32 %536, %53... can share an output register with another operation already assigned to main_signed_add_32_2
  %537 = add nsw i32 %536, %53... can share an output register with another operation already assigned to main_signed_add_32_3
  %537 = add nsw i32 %536, %53... can share an output register with another operation already assigned to main_signed_add_32_4
  %537 = add nsw i32 %536, %53... can share an output register with another operation already assigned to main_signed_add_32_5
  %537 = add nsw i32 %536, %53... can share an output register with another operation already assigned to main_signed_add_32_6
  %537 = add nsw i32 %536, %53... can share an output register with another operation already assigned to main_signed_add_32_7
  %537 = add nsw i32 %536, %53... can share an output register with another operation already assigned to main_signed_add_32_8
  %537 = add nsw i32 %536, %53... can share an output register with another operation already assigned to main_signed_add_32_9
  %537 = add nsw i32 %536, %53... can share an output register with another operation already assigned to main_signed_add_32_10
  %537 = add nsw i32 %536, %53... can share an output register with another operation already assigned to main_signed_add_32_11
  %537 = add nsw i32 %536, %53... can share an output register with another operation already assigned to main_signed_add_32_12
  %537 = add nsw i32 %536, %53... can share an output register with another operation already assigned to main_signed_add_32_13
  %537 = add nsw i32 %536, %53... can share an output register with another operation already assigned to main_signed_add_32_14
  %537 = add nsw i32 %536, %53... can share an output register with another operation already assigned to main_signed_add_32_15
  %537 = add nsw i32 %536, %53... can share an output register with another operation already assigned to main_signed_add_32_16
  %537 = add nsw i32 %536, %53... can share an output register with another operation already assigned to main_signed_add_32_17
  %537 = add nsw i32 %536, %53... can share an output register with another operation already assigned to main_signed_add_32_18
  %539 = add nsw i32 %538, %53... can share an output register with another operation already assigned to main_signed_add_32_0
  %539 = add nsw i32 %538, %53... can share an output register with another operation already assigned to main_signed_add_32_1
  %539 = add nsw i32 %538, %53... can share an output register with another operation already assigned to main_signed_add_32_2
  %539 = add nsw i32 %538, %53... can share an output register with another operation already assigned to main_signed_add_32_3
  %539 = add nsw i32 %538, %53... can share an output register with another operation already assigned to main_signed_add_32_4
  %539 = add nsw i32 %538, %53... can share an output register with another operation already assigned to main_signed_add_32_5
  %539 = add nsw i32 %538, %53... can share an output register with another operation already assigned to main_signed_add_32_6
  %539 = add nsw i32 %538, %53... can share an output register with another operation already assigned to main_signed_add_32_7
  %539 = add nsw i32 %538, %53... can share an output register with another operation already assigned to main_signed_add_32_8
  %539 = add nsw i32 %538, %53... can share an output register with another operation already assigned to main_signed_add_32_9
  %539 = add nsw i32 %538, %53... can share an output register with another operation already assigned to main_signed_add_32_10
  %539 = add nsw i32 %538, %53... can share an output register with another operation already assigned to main_signed_add_32_11
  %539 = add nsw i32 %538, %53... can share an output register with another operation already assigned to main_signed_add_32_12
  %539 = add nsw i32 %538, %53... can share an output register with another operation already assigned to main_signed_add_32_13
  %539 = add nsw i32 %538, %53... can share an output register with another operation already assigned to main_signed_add_32_14
  %539 = add nsw i32 %538, %53... can share an output register with another operation already assigned to main_signed_add_32_15
  %539 = add nsw i32 %538, %53... can share an output register with another operation already assigned to main_signed_add_32_16
  %539 = add nsw i32 %538, %53... can share an output register with another operation already assigned to main_signed_add_32_17
  %539 = add nsw i32 %538, %53... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %529 = add nsw i32 %528, %52... (idx: 0)        -1200                         -220                          -90                           -40                           -40                           -40                           -39                           -40                           -40                           -40                           -40                           -40                           -80                           -60                           -20                           -40                           -40                           -340                          -650                          
  %531 = add nsw i32 %530, %52... (idx: 1)        -1200                         -220                          -90                           -40                           -40                           -40                           -39                           -40                           -40                           -40                           -40                           -40                           -80                           -60                           -20                           -40                           -40                           -340                          -650                          
  %533 = add nsw i32 %532, %52... (idx: 2)        -1200                         -220                          -90                           -40                           -40                           -40                           -39                           -40                           -40                           -40                           -40                           -40                           -80                           -60                           -20                           -40                           -40                           -340                          -650                          
  %535 = add nsw i32 %534, %53... (idx: 3)        -1200                         -220                          -90                           -40                           -40                           -40                           -39                           -40                           -40                           -40                           -40                           -40                           -80                           -60                           -20                           -40                           -40                           -340                          -650                          
  %537 = add nsw i32 %536, %53... (idx: 4)        -1200                         -220                          -90                           -40                           -40                           -40                           -39                           -40                           -40                           -40                           -40                           -40                           -80                           -60                           -20                           -40                           -40                           -340                          -650                          
  %539 = add nsw i32 %538, %53... (idx: 5)        -1200                         -220                          -90                           -40                           -40                           -40                           -39                           -40                           -40                           -40                           -40                           -40                           -80                           -60                           -20                           -40                           -40                           -340                          -650                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %529 = add nsw i32 %528, %52... (idx
  %531 = add nsw i32 %530, %52... (idx
  %533 = add nsw i32 %532, %52... (idx
  %535 = add nsw i32 %534, %53... (idx
  %537 = add nsw i32 %536, %53... (idx
  %539 = add nsw i32 %538, %53... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %529 = add nsw i32 %528, %52... (idx: 0) -> main_signed_add_32_0 (mux inputs: 122)
  %535 = add nsw i32 %534, %53... (idx: 3) -> main_signed_add_32_1 (mux inputs: 24)
  %537 = add nsw i32 %536, %53... (idx: 4) -> main_signed_add_32_2 (mux inputs: 11)
  %539 = add nsw i32 %538, %53... (idx: 5) -> main_signed_add_32_12 (mux inputs: 10)
  %533 = add nsw i32 %532, %52... (idx: 2) -> main_signed_add_32_17 (mux inputs: 36)
  %531 = add nsw i32 %530, %52... (idx: 1) -> main_signed_add_32_18 (mux inputs: 67)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %487 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_0
  %487 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_1
  %489 = sub nsw i32 0, %487 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %489 = sub nsw i32 0, %487 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %487 = sub nsw i32 15360, %.... (idx: 0)        -165                          -64                           
  %489 = sub nsw i32 0, %487 (idx: 1)             -165                          -65                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %487 = sub nsw i32 15360, %.... (idx: 0)        1                             0                             
  %489 = sub nsw i32 0, %487 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %487 = sub nsw i32 15360, %.... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 18)
  %489 = sub nsw i32 0, %487 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 8)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: result_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %541, i32* %544, a... can share an output register with another operation already assigned to main_result_local_mem_dual_port_0
                                                  main_result_local_mem_dual_port_0
  store i32 %541, i32* %544, a... (idx: 0)        80                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_result_local_mem_dual_port_0
  store i32 %541, i32* %544, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %541, i32* %544, a... (idx: 0) -> main_result_local_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB_adpcm_mainexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %553 = add nsw i32 %i.03, 1 (idx: 0)            -1224                         -245                          -114                          -44                           -45                           -43                           -42                           -43                           -43                           -44                           -44                           -43                           -103                          -63                           -23                           -43                           -44                           -365                          -674                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %553 = add nsw i32 %i.03, 1 (idx: 0)            1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %553 = add nsw i32 %i.03, 1 (idx: 0) -> main_signed_add_32_0 (mux inputs: 123)
State: LEGUP_F_main_BB_adpcm_mainexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_18
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep63 = add i32 %gep_int61,... (idx: 0)        -1230                         -240                          -110                          -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -100                          -60                           -20                           -40                           -40                           -360                          -670                          
  %gep66 = add i32 %gep_int64,... (idx: 1)        -1230                         -240                          -110                          -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -100                          -60                           -20                           -40                           -40                           -360                          -670                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep63 = add i32 %gep_int61,... (idx
  %gep66 = add i32 %gep_int64,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep63 = add i32 %gep_int61,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 125)
  %gep66 = add i32 %gep_int64,... (idx: 1) -> main_signed_add_32_18 (mux inputs: 69)
State: LEGUP_F_main_BB_adpcm_mainexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %.main_result.0 = add nsw i3... (idx: 0)        -1260                         -250                          -120                          -50                           -50                           -49                           -48                           -49                           -49                           -50                           -50                           -49                           -109                          -69                           -29                           -49                           -50                           -370                          -700                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %.main_result.0 = add nsw i3... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.main_result.0 = add nsw i3... (idx: 0) -> main_signed_add_32_0 (mux inputs: 127)
State: LEGUP_F_main_BB_preheader
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %560 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_0
  %560 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_1
  %560 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_2
  %560 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_3
  %560 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_4
  %560 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_5
  %560 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_6
  %560 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_7
  %560 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_8
  %560 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_9
  %560 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_10
  %560 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_11
  %560 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_12
  %560 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_13
  %560 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_14
  %560 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_15
  %560 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_16
  %560 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_17
  %560 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %560 = add nsw i32 %i.11, 1 (idx: 0)            -1264                         -235                          -104                          -34                           -35                           -33                           -32                           -33                           -33                           -34                           -34                           -33                           -93                           -53                           -13                           -33                           -34                           -355                          -684                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %560 = add nsw i32 %i.11, 1 (idx: 0)            1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %560 = add nsw i32 %i.11, 1 (idx: 0) -> main_signed_add_32_0 (mux inputs: 128)
State: LEGUP_F_main_BB_preheader
Binding functional unit type: result_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %555 = load i32* %554, align... can share an output register with another operation already assigned to main_result_local_mem_dual_port_0
                                                  main_result_local_mem_dual_port_0
  %555 = load i32* %554, align... (idx: 0)        65                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_result_local_mem_dual_port_0
  %555 = load i32* %554, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %555 = load i32* %554, align... (idx: 0) -> main_result_local_mem_dual_port_0 (mux inputs: 5)
State: LEGUP_F_main_BB_preheader
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_18
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep69 = add i32 %gep_int67,... (idx: 0)        -1280                         -240                          -110                          -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -100                          -60                           -20                           -40                           -40                           -360                          -690                          
  %gep72 = add i32 %gep_int70,... (idx: 1)        -1280                         -240                          -110                          -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -100                          -60                           -20                           -40                           -40                           -360                          -690                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep69 = add i32 %gep_int67,... (idx
  %gep72 = add i32 %gep_int70,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep69 = add i32 %gep_int67,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 130)
  %gep72 = add i32 %gep_int70,... (idx: 1) -> main_signed_add_32_18 (mux inputs: 71)
State: LEGUP_F_main_BB_preheader
Binding functional unit type: test_result_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_test_result_local_mem_dual_port_0
  %557 = load i32* %556, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_test_result_local_mem_dual_port_0
  %557 = load i32* %556, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %557 = load i32* %556, align... (idx: 0) -> main_test_result_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_preheader
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_0
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_1
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_2
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_3
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_4
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_5
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_6
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_7
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_8
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_9
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_10
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_11
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_12
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_13
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_14
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_15
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_16
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_17
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %.main_result.2 = add nsw i3... (idx: 0)        -1300                         -240                          -110                          -40                           -40                           -40                           -38                           -40                           -40                           -40                           -40                           -40                           -100                          -60                           -20                           -40                           -40                           -360                          -710                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %.main_result.2 = add nsw i3... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.main_result.2 = add nsw i3... (idx: 0) -> main_signed_add_32_0 (mux inputs: 132)


//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sun Jun 23 10:27:53 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 23
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @dec_del_bph = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_bph `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_dec_del_bph_a {`TAG_g_dec_del_bph, 23'd192}
// @dec_del_bpl = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_bpl `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_dec_del_bpl_a {`TAG_g_dec_del_bpl, 23'd128}
// @dec_del_dhx = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_dhx `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_dec_del_dhx_a {`TAG_g_dec_del_dhx, 23'd224}
// @dec_del_dltx = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_dltx `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_dec_del_dltx_a {`TAG_g_dec_del_dltx, 23'd160}
// @delay_bph = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_bph `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_bph_a {`TAG_g_delay_bph, 23'd64}
// @delay_bpl = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_bpl `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_bpl_a {`TAG_g_delay_bpl, 23'd0}
// @delay_dhx = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_dhx `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_dhx_a {`TAG_g_delay_dhx, 23'd96}
// @delay_dltx = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_dltx `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_dltx_a {`TAG_g_delay_dltx, 23'd32}
// @quant26bt_neg = internal unnamed_addr constant [31 x i32] [i32 63, i32 62, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 ...
`define TAG_g_quant26bt_neg `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_quant26bt_neg_a {`TAG_g_quant26bt_neg, 23'd128}
// @quant26bt_pos = internal unnamed_addr constant [31 x i32] [i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 ...
`define TAG_g_quant26bt_pos `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_quant26bt_pos_a {`TAG_g_quant26bt_pos, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [5:0] rom_32_address_a;
reg [5:0] rom_32_address_b;
reg rom_32_write_enable_a;
reg rom_32_write_enable_b;
reg [31:0] rom_32_in_a;
reg [31:0] rom_32_in_b;
wire [31:0] rom_32_out_a;
wire [31:0] rom_32_out_b;

// @quant26bt_pos = internal unnamed_addr constant [31 x i32] [i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 ...
rom_dual_port rom_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( rom_32_address_a ),
	.address_b( rom_32_address_b ),
	.q_a( rom_32_out_a ),
	.q_b( rom_32_out_b)
);
defparam rom_32.width_a = 32;
defparam rom_32.width_b = 32;
defparam rom_32.widthad_a = 6;
defparam rom_32.widthad_b = 6;
defparam rom_32.numwords_a = 63;
defparam rom_32.numwords_b = 63;
defparam rom_32.latency = ram_latency;
defparam rom_32.init_file = "rom_32.mif";

reg [5:0] ram_32_address_a;
reg [5:0] ram_32_address_b;
reg ram_32_write_enable_a;
reg ram_32_write_enable_b;
reg [31:0] ram_32_in_a;
reg [31:0] ram_32_in_b;
wire [31:0] ram_32_out_a;
wire [31:0] ram_32_out_b;

// @delay_bpl = internal global [6 x i32] zeroinitializer, align 4
ram_dual_port ram_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_32_address_a ),
	.address_b( ram_32_address_b ),
	.wren_a( ram_32_write_enable_a ),
	.wren_b( ram_32_write_enable_b ),
	.data_a( ram_32_in_a ),
	.data_b( ram_32_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_32_out_a ),
	.q_b( ram_32_out_b)
);
defparam ram_32.width_a = 32;
defparam ram_32.width_b = 32;
defparam ram_32.widthad_a = 6;
defparam ram_32.widthad_b = 6;
defparam ram_32.width_be_a = 1;
defparam ram_32.width_be_b = 1;
defparam ram_32.numwords_a = 62;
defparam ram_32.numwords_b = 62;
defparam ram_32.latency = ram_latency;
defparam ram_32.init_file = "ram_32.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_rom_32_a;
assign select_rom_32_a = (tag_a == 2);
reg [ram_latency:0] select_rom_32_reg_a;
wire [31:0] memory_controller_rom_32_out_a;
assign memory_controller_rom_32_out_a = {32{ select_rom_32_reg_a[ram_latency]}} & rom_32_out_a;

wire select_ram_32_a;
assign select_ram_32_a = (tag_a == 3);
reg [ram_latency:0] select_ram_32_reg_a;
wire [31:0] memory_controller_ram_32_out_a;
assign memory_controller_ram_32_out_a = {32{ select_ram_32_reg_a[ram_latency]}} & ram_32_out_a;

always @(*)
begin
	rom_32_address_a = memory_controller_address_a [6-1+2:2] & {6{select_rom_32_a}};
	rom_32_write_enable_a = memory_controller_write_enable_a & select_rom_32_a;
	rom_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	ram_32_address_a = memory_controller_address_a [6-1+2:2] & {6{select_ram_32_a}};
	ram_32_write_enable_a = memory_controller_write_enable_a & select_ram_32_a;
	ram_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_rom_32_reg_a[ram_latency]}} | {2{select_ram_32_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_rom_32_out_a | memory_controller_ram_32_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
end
always @(*)
begin
select_rom_32_reg_a[0] <= select_rom_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
end

reg [2:0] select_not_struct_b;

wire select_rom_32_b;
assign select_rom_32_b = (tag_b == 2);
reg [ram_latency:0] select_rom_32_reg_b;
wire [31:0] memory_controller_rom_32_out_b;
assign memory_controller_rom_32_out_b = {32{ select_rom_32_reg_b[ram_latency]}} & rom_32_out_b;

wire select_ram_32_b;
assign select_ram_32_b = (tag_b == 3);
reg [ram_latency:0] select_ram_32_reg_b;
wire [31:0] memory_controller_ram_32_out_b;
assign memory_controller_ram_32_out_b = {32{ select_ram_32_reg_b[ram_latency]}} & ram_32_out_b;

always @(*)
begin
	rom_32_address_b = memory_controller_address_b [6-1+2:2] & {6{select_rom_32_b}};
	rom_32_write_enable_b = memory_controller_write_enable_b & select_rom_32_b;
	rom_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	ram_32_address_b = memory_controller_address_b [6-1+2:2] & {6{select_ram_32_b}};
	ram_32_write_enable_b = memory_controller_write_enable_b & select_ram_32_b;
	ram_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_rom_32_reg_b[ram_latency]}} | {2{select_ram_32_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_rom_32_out_b | memory_controller_ram_32_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
end
always @(*)
begin
select_rom_32_reg_b[0] <= select_rom_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_main_BB__0_1 = 8'd1;
parameter [7:0] LEGUP_F_main_BB__0_2 = 8'd2;
parameter [7:0] LEGUP_F_main_BB__0_3 = 8'd3;
parameter [7:0] LEGUP_F_main_BB__0_4 = 8'd4;
parameter [7:0] LEGUP_F_main_BB__0_5 = 8'd5;
parameter [7:0] LEGUP_F_main_BB__0_6 = 8'd6;
parameter [7:0] LEGUP_F_main_BB__0_7 = 8'd7;
parameter [7:0] LEGUP_F_main_BB__0_8 = 8'd8;
parameter [7:0] LEGUP_F_main_BB__0_9 = 8'd9;
parameter [7:0] LEGUP_F_main_BB__0_10 = 8'd10;
parameter [7:0] LEGUP_F_main_BB__0_11 = 8'd11;
parameter [7:0] LEGUP_F_main_BB__0_12 = 8'd12;
parameter [7:0] LEGUP_F_main_BB__0_13 = 8'd13;
parameter [7:0] LEGUP_F_main_BB__0_14 = 8'd14;
parameter [7:0] LEGUP_F_main_BB__0_15 = 8'd15;
parameter [7:0] LEGUP_F_main_BB__0_16 = 8'd16;
parameter [7:0] LEGUP_F_main_BB__0_17 = 8'd17;
parameter [7:0] LEGUP_F_main_BB__0_18 = 8'd18;
parameter [7:0] LEGUP_F_main_BB__0_19 = 8'd19;
parameter [7:0] LEGUP_F_main_BB__0_20 = 8'd20;
parameter [7:0] LEGUP_F_main_BB__0_21 = 8'd21;
parameter [7:0] LEGUP_F_main_BB__0_22 = 8'd22;
parameter [7:0] LEGUP_F_main_BB__0_23 = 8'd23;
parameter [7:0] LEGUP_F_main_BB__0_24 = 8'd24;
parameter [7:0] LEGUP_F_main_BB__0_25 = 8'd25;
parameter [7:0] LEGUP_F_main_BB__1_26 = 8'd26;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27 = 8'd27;
parameter [7:0] LEGUP_F_main_BB__2_28 = 8'd28;
parameter [7:0] LEGUP_F_main_BB__2_29 = 8'd29;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_30 = 8'd30;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_31 = 8'd31;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_32 = 8'd32;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_33 = 8'd33;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_34 = 8'd34;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_35 = 8'd35;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_36 = 8'd36;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_37 = 8'd37;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_38 = 8'd38;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_39 = 8'd39;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_40 = 8'd40;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_41 = 8'd41;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_42 = 8'd42;
parameter [7:0] LEGUP_F_main_BB__133_43 = 8'd43;
parameter [7:0] LEGUP_F_main_BB__136_44 = 8'd44;
parameter [7:0] LEGUP_F_main_BB__136_45 = 8'd45;
parameter [7:0] LEGUP_F_main_BB__136_46 = 8'd46;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_47 = 8'd47;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_48 = 8'd48;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_49 = 8'd49;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_50 = 8'd50;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_51 = 8'd51;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_52 = 8'd52;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_53 = 8'd53;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_55 = 8'd55;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_56 = 8'd56;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_57 = 8'd57;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_58 = 8'd58;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_59 = 8'd59;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_60 = 8'd60;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_61 = 8'd61;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_62 = 8'd62;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_63 = 8'd63;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_64 = 8'd64;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_65 = 8'd65;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_66 = 8'd66;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_67 = 8'd67;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_68 = 8'd68;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_69 = 8'd69;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_70 = 8'd70;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_71 = 8'd71;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_72 = 8'd72;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_74 = 8'd74;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_75 = 8'd75;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_76 = 8'd76;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_77 = 8'd77;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_78 = 8'd78;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_79 = 8'd79;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_80 = 8'd80;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_81 = 8'd81;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_82 = 8'd82;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_83 = 8'd83;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_84 = 8'd84;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_85 = 8'd85;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_86 = 8'd86;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_87 = 8'd87;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_88 = 8'd88;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_89 = 8'd89;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_90 = 8'd90;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_91 = 8'd91;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_92 = 8'd92;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_93 = 8'd93;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_94 = 8'd94;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_95 = 8'd95;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_96 = 8'd96;
parameter [7:0] LEGUP_F_main_BB_preheaderipreheader_97 = 8'd97;
parameter [7:0] LEGUP_F_main_BB_preheaderipreheader_98 = 8'd98;
parameter [7:0] LEGUP_F_main_BB_preheaderi_99 = 8'd99;
parameter [7:0] LEGUP_F_main_BB_preheaderi_100 = 8'd100;
parameter [7:0] LEGUP_F_main_BB_preheaderi_101 = 8'd101;
parameter [7:0] LEGUP_F_main_BB_preheaderi_102 = 8'd102;
parameter [7:0] LEGUP_F_main_BB_preheaderi_103 = 8'd103;
parameter [7:0] LEGUP_F_main_BB_preheaderi_104 = 8'd104;
parameter [7:0] LEGUP_F_main_BB_preheaderi_105 = 8'd105;
parameter [7:0] LEGUP_F_main_BB_preheaderi_106 = 8'd106;
parameter [7:0] LEGUP_F_main_BB_preheaderi_107 = 8'd107;
parameter [7:0] LEGUP_F_main_BB_preheaderi_108 = 8'd108;
parameter [7:0] LEGUP_F_main_BB_preheaderi_109 = 8'd109;
parameter [7:0] LEGUP_F_main_BB_preheaderi_110 = 8'd110;
parameter [7:0] LEGUP_F_main_BB_preheaderi_111 = 8'd111;
parameter [7:0] LEGUP_F_main_BB_preheaderi_112 = 8'd112;
parameter [7:0] LEGUP_F_main_BB_preheaderi_113 = 8'd113;
parameter [7:0] LEGUP_F_main_BB_preheaderi_114 = 8'd114;
parameter [7:0] LEGUP_F_main_BB_preheaderi_115 = 8'd115;
parameter [7:0] LEGUP_F_main_BB_preheaderi_116 = 8'd116;
parameter [7:0] LEGUP_F_main_BB_preheaderi_117 = 8'd117;
parameter [7:0] LEGUP_F_main_BB_preheaderi_118 = 8'd118;
parameter [7:0] LEGUP_F_main_BB_preheaderi_119 = 8'd119;
parameter [7:0] LEGUP_F_main_BB_preheaderi_120 = 8'd120;
parameter [7:0] LEGUP_F_main_BB_preheaderi_121 = 8'd121;
parameter [7:0] LEGUP_F_main_BB_preheaderi_122 = 8'd122;
parameter [7:0] LEGUP_F_main_BB_preheaderi_123 = 8'd123;
parameter [7:0] LEGUP_F_main_BB_preheaderi_124 = 8'd124;
parameter [7:0] LEGUP_F_main_BB_preheaderi_125 = 8'd125;
parameter [7:0] LEGUP_F_main_BB_preheaderi_126 = 8'd126;
parameter [7:0] LEGUP_F_main_BB_preheaderi_127 = 8'd127;
parameter [7:0] LEGUP_F_main_BB_preheaderi_128 = 8'd128;
parameter [7:0] LEGUP_F_main_BB_preheaderi_129 = 8'd129;
parameter [7:0] LEGUP_F_main_BB_preheaderi_130 = 8'd130;
parameter [7:0] LEGUP_F_main_BB_preheaderi_131 = 8'd131;
parameter [7:0] LEGUP_F_main_BB_preheaderi_132 = 8'd132;
parameter [7:0] LEGUP_F_main_BB_preheaderi_133 = 8'd133;
parameter [7:0] LEGUP_F_main_BB_preheaderi_134 = 8'd134;
parameter [7:0] LEGUP_F_main_BB_preheaderi_135 = 8'd135;
parameter [7:0] LEGUP_F_main_BB_preheaderi_137 = 8'd137;
parameter [7:0] LEGUP_F_main_BB_preheaderi_138 = 8'd138;
parameter [7:0] LEGUP_F_main_BB_preheaderi_139 = 8'd139;
parameter [7:0] LEGUP_F_main_BB_preheaderi_140 = 8'd140;
parameter [7:0] LEGUP_F_main_BB_preheaderi_141 = 8'd141;
parameter [7:0] LEGUP_F_main_BB_preheaderi_142 = 8'd142;
parameter [7:0] LEGUP_F_main_BB_preheaderi_143 = 8'd143;
parameter [7:0] LEGUP_F_main_BB_preheaderi_144 = 8'd144;
parameter [7:0] LEGUP_F_main_BB_preheaderi_145 = 8'd145;
parameter [7:0] LEGUP_F_main_BB_preheaderi_146 = 8'd146;
parameter [7:0] LEGUP_F_main_BB_preheaderi_147 = 8'd147;
parameter [7:0] LEGUP_F_main_BB_preheaderi_148 = 8'd148;
parameter [7:0] LEGUP_F_main_BB_preheaderi_149 = 8'd149;
parameter [7:0] LEGUP_F_main_BB_preheaderi_151 = 8'd151;
parameter [7:0] LEGUP_F_main_BB_preheaderi_152 = 8'd152;
parameter [7:0] LEGUP_F_main_BB_preheaderi_153 = 8'd153;
parameter [7:0] LEGUP_F_main_BB_adpcm_mainexitpreheader_154 = 8'd154;
parameter [7:0] LEGUP_F_main_BB_adpcm_mainexit_155 = 8'd155;
parameter [7:0] LEGUP_F_main_BB_adpcm_mainexit_156 = 8'd156;
parameter [7:0] LEGUP_F_main_BB_preheaderpreheader_157 = 8'd157;
parameter [7:0] LEGUP_F_main_BB_preheader_158 = 8'd158;
parameter [7:0] LEGUP_F_main_BB_preheader_159 = 8'd159;
parameter [7:0] LEGUP_F_main_BB__548_160 = 8'd160;
parameter [7:0] LEGUP_F_main_BB__551_161 = 8'd161;
parameter [7:0] LEGUP_F_main_BB__553_162 = 8'd162;
parameter [7:0] LEGUP_F_main_BB__555_163 = 8'd163;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [7:0] LEGUP_function_call_54 = 8'd54;
parameter [7:0] LEGUP_function_call_73 = 8'd73;
parameter [7:0] LEGUP_function_call_136 = 8'd136;
parameter [7:0] LEGUP_function_call_150 = 8'd150;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [63:0] main_1_indvar13;
reg [63:0] main_1_indvar13_reg;
reg  main_1_exitcond15;
reg  main_1_exitcond15_reg;
reg [63:0] main_2_3;
reg [63:0] main_2_3_reg;
reg [63:0] main_2_4;
reg [63:0] main_2_4_reg;
reg [31:0] main_2_5;
reg [31:0] main_2_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_si0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_si0_reg;
reg [63:0] main_2_indvarnext14;
reg [63:0] main_2_indvarnext14_reg;
reg [31:0] main_legup_memset_4_i64exit_indvar9;
reg [31:0] main_legup_memset_4_i64exit_indvar9_reg;
reg [31:0] main_legup_memset_4_i64exit_6;
reg [31:0] main_legup_memset_4_i64exit_6_reg;
reg [31:0] main_legup_memset_4_i64exit_7;
reg [31:0] main_legup_memset_4_i64exit_7_reg;
reg [31:0] main_legup_memset_4_i64exit_8;
reg [31:0] main_legup_memset_4_i64exit_8_reg;
reg [31:0] main_legup_memset_4_i64exit_9;
reg [31:0] main_legup_memset_4_i64exit_9_reg;
reg [31:0] main_legup_memset_4_i64exit_10;
reg [31:0] main_legup_memset_4_i64exit_10_reg;
reg [31:0] main_legup_memset_4_i64exit_11;
reg [31:0] main_legup_memset_4_i64exit_11_reg;
reg [31:0] main_legup_memset_4_i64exit_12;
reg [31:0] main_legup_memset_4_i64exit_12_reg;
reg [31:0] main_legup_memset_4_i64exit_13;
reg [31:0] main_legup_memset_4_i64exit_13_reg;
reg [31:0] main_legup_memset_4_i64exit_14;
reg [31:0] main_legup_memset_4_i64exit_14_reg;
reg [31:0] main_legup_memset_4_i64exit_15;
reg [31:0] main_legup_memset_4_i64exit_15_reg;
reg [31:0] main_legup_memset_4_i64exit_16;
reg [31:0] main_legup_memset_4_i64exit_16_reg;
reg [31:0] main_legup_memset_4_i64exit_17;
reg [31:0] main_legup_memset_4_i64exit_17_reg;
reg [31:0] main_legup_memset_4_i64exit_18;
reg [31:0] main_legup_memset_4_i64exit_18_reg;
reg [31:0] main_legup_memset_4_i64exit_19;
reg [31:0] main_legup_memset_4_i64exit_19_reg;
reg [31:0] main_legup_memset_4_i64exit_20;
reg [31:0] main_legup_memset_4_i64exit_20_reg;
reg [31:0] main_legup_memset_4_i64exit_21;
reg [31:0] main_legup_memset_4_i64exit_21_reg;
reg [31:0] main_legup_memset_4_i64exit_22;
reg [31:0] main_legup_memset_4_i64exit_22_reg;
reg [31:0] main_legup_memset_4_i64exit_23;
reg [31:0] main_legup_memset_4_i64exit_23_reg;
reg [31:0] main_legup_memset_4_i64exit_24;
reg [31:0] main_legup_memset_4_i64exit_24_reg;
reg [31:0] main_legup_memset_4_i64exit_25;
reg [31:0] main_legup_memset_4_i64exit_25_reg;
reg [31:0] main_legup_memset_4_i64exit_26;
reg [31:0] main_legup_memset_4_i64exit_26_reg;
reg [31:0] main_legup_memset_4_i64exit_27;
reg [31:0] main_legup_memset_4_i64exit_27_reg;
reg [31:0] main_legup_memset_4_i64exit_28;
reg [31:0] main_legup_memset_4_i64exit_28_reg;
reg [31:0] main_legup_memset_4_i64exit_29;
reg [31:0] main_legup_memset_4_i64exit_29_reg;
reg [31:0] main_legup_memset_4_i64exit_ph20;
reg [31:0] main_legup_memset_4_i64exit_ph20_reg;
reg [31:0] main_legup_memset_4_i64exit_ph10;
reg [31:0] main_legup_memset_4_i64exit_ph10_reg;
reg [31:0] main_legup_memset_4_i64exit_nbh0;
reg [31:0] main_legup_memset_4_i64exit_nbh0_reg;
reg [31:0] main_legup_memset_4_i64exit_deth0;
reg [31:0] main_legup_memset_4_i64exit_deth0_reg;
reg [31:0] main_legup_memset_4_i64exit_ah20;
reg [31:0] main_legup_memset_4_i64exit_ah20_reg;
reg [31:0] main_legup_memset_4_i64exit_rh20;
reg [31:0] main_legup_memset_4_i64exit_rh20_reg;
reg [31:0] main_legup_memset_4_i64exit_ah10;
reg [31:0] main_legup_memset_4_i64exit_ah10_reg;
reg [31:0] main_legup_memset_4_i64exit_rh10;
reg [31:0] main_legup_memset_4_i64exit_rh10_reg;
reg [31:0] main_legup_memset_4_i64exit_plt20;
reg [31:0] main_legup_memset_4_i64exit_plt20_reg;
reg [31:0] main_legup_memset_4_i64exit_plt10;
reg [31:0] main_legup_memset_4_i64exit_plt10_reg;
reg [31:0] main_legup_memset_4_i64exit_nbl0;
reg [31:0] main_legup_memset_4_i64exit_nbl0_reg;
reg [31:0] main_legup_memset_4_i64exit_detl0;
reg [31:0] main_legup_memset_4_i64exit_detl0_reg;
reg [31:0] main_legup_memset_4_i64exit_al20;
reg [31:0] main_legup_memset_4_i64exit_al20_reg;
reg [31:0] main_legup_memset_4_i64exit_rlt20;
reg [31:0] main_legup_memset_4_i64exit_rlt20_reg;
reg [31:0] main_legup_memset_4_i64exit_al10;
reg [31:0] main_legup_memset_4_i64exit_al10_reg;
reg [31:0] main_legup_memset_4_i64exit_rlt10;
reg [31:0] main_legup_memset_4_i64exit_rlt10_reg;
reg [31:0] main_legup_memset_4_i64exit_i02i;
reg [31:0] main_legup_memset_4_i64exit_i02i_reg;
reg [31:0] main_legup_memset_4_i64exit_30;
reg [31:0] main_legup_memset_4_i64exit_30_reg;
reg [31:0] main_legup_memset_4_i64exit_31;
reg [31:0] main_legup_memset_4_i64exit_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep12_reg;
reg [31:0] main_legup_memset_4_i64exit_32;
reg [31:0] main_legup_memset_4_i64exit_32_reg;
reg [31:0] main_legup_memset_4_i64exit_33;
reg [31:0] main_legup_memset_4_i64exit_33_reg;
reg [31:0] main_legup_memset_4_i64exit_34;
reg [31:0] main_legup_memset_4_i64exit_34_reg;
reg [31:0] main_legup_memset_4_i64exit_35;
reg [31:0] main_legup_memset_4_i64exit_35_reg;
reg [31:0] main_legup_memset_4_i64exit_36;
reg [31:0] main_legup_memset_4_i64exit_36_reg;
reg [31:0] main_legup_memset_4_i64exit_37;
reg [31:0] main_legup_memset_4_i64exit_37_reg;
reg [31:0] main_legup_memset_4_i64exit_38;
reg [31:0] main_legup_memset_4_i64exit_38_reg;
reg [31:0] main_legup_memset_4_i64exit_39;
reg [31:0] main_legup_memset_4_i64exit_39_reg;
reg [31:0] main_legup_memset_4_i64exit_40;
reg [31:0] main_legup_memset_4_i64exit_40_reg;
reg [31:0] main_legup_memset_4_i64exit_41;
reg [31:0] main_legup_memset_4_i64exit_41_reg;
reg [31:0] main_legup_memset_4_i64exit_42;
reg [31:0] main_legup_memset_4_i64exit_42_reg;
reg [31:0] main_legup_memset_4_i64exit_43;
reg [31:0] main_legup_memset_4_i64exit_43_reg;
reg [31:0] main_legup_memset_4_i64exit_44;
reg [31:0] main_legup_memset_4_i64exit_44_reg;
reg [31:0] main_legup_memset_4_i64exit_45;
reg [31:0] main_legup_memset_4_i64exit_45_reg;
reg [31:0] main_legup_memset_4_i64exit_46;
reg [31:0] main_legup_memset_4_i64exit_46_reg;
reg [31:0] main_legup_memset_4_i64exit_47;
reg [31:0] main_legup_memset_4_i64exit_47_reg;
reg [31:0] main_legup_memset_4_i64exit_48;
reg [31:0] main_legup_memset_4_i64exit_48_reg;
reg [31:0] main_legup_memset_4_i64exit_49;
reg [31:0] main_legup_memset_4_i64exit_49_reg;
reg [31:0] main_legup_memset_4_i64exit_50;
reg [31:0] main_legup_memset_4_i64exit_50_reg;
reg [31:0] main_legup_memset_4_i64exit_51;
reg [31:0] main_legup_memset_4_i64exit_51_reg;
reg [31:0] main_legup_memset_4_i64exit_52;
reg [31:0] main_legup_memset_4_i64exit_52_reg;
reg [31:0] main_legup_memset_4_i64exit_53;
reg [31:0] main_legup_memset_4_i64exit_53_reg;
reg [31:0] main_legup_memset_4_i64exit_54;
reg [31:0] main_legup_memset_4_i64exit_54_reg;
reg [31:0] main_legup_memset_4_i64exit_55;
reg [31:0] main_legup_memset_4_i64exit_55_reg;
reg [31:0] main_legup_memset_4_i64exit_56;
reg [31:0] main_legup_memset_4_i64exit_56_reg;
reg [31:0] main_legup_memset_4_i64exit_57;
reg [31:0] main_legup_memset_4_i64exit_57_reg;
reg [31:0] main_legup_memset_4_i64exit_58;
reg [31:0] main_legup_memset_4_i64exit_58_reg;
reg [31:0] main_legup_memset_4_i64exit_59;
reg [31:0] main_legup_memset_4_i64exit_59_reg;
reg [31:0] main_legup_memset_4_i64exit_60;
reg [31:0] main_legup_memset_4_i64exit_60_reg;
reg [31:0] main_legup_memset_4_i64exit_61;
reg [31:0] main_legup_memset_4_i64exit_61_reg;
reg [31:0] main_legup_memset_4_i64exit_62;
reg [31:0] main_legup_memset_4_i64exit_62_reg;
reg [31:0] main_legup_memset_4_i64exit_63;
reg [31:0] main_legup_memset_4_i64exit_63_reg;
reg [31:0] main_legup_memset_4_i64exit_64;
reg [31:0] main_legup_memset_4_i64exit_64_reg;
reg [31:0] main_legup_memset_4_i64exit_65;
reg [31:0] main_legup_memset_4_i64exit_65_reg;
reg [31:0] main_legup_memset_4_i64exit_66;
reg [31:0] main_legup_memset_4_i64exit_66_reg;
reg [31:0] main_legup_memset_4_i64exit_67;
reg [31:0] main_legup_memset_4_i64exit_67_reg;
reg [31:0] main_legup_memset_4_i64exit_68;
reg [31:0] main_legup_memset_4_i64exit_68_reg;
reg [31:0] main_legup_memset_4_i64exit_69;
reg [31:0] main_legup_memset_4_i64exit_69_reg;
reg [31:0] main_legup_memset_4_i64exit_70;
reg [31:0] main_legup_memset_4_i64exit_70_reg;
reg [31:0] main_legup_memset_4_i64exit_71;
reg [31:0] main_legup_memset_4_i64exit_71_reg;
reg [31:0] main_legup_memset_4_i64exit_72;
reg [31:0] main_legup_memset_4_i64exit_72_reg;
reg [31:0] main_legup_memset_4_i64exit_73;
reg [31:0] main_legup_memset_4_i64exit_73_reg;
reg [31:0] main_legup_memset_4_i64exit_74;
reg [31:0] main_legup_memset_4_i64exit_74_reg;
reg [31:0] main_legup_memset_4_i64exit_75;
reg [31:0] main_legup_memset_4_i64exit_75_reg;
reg [31:0] main_legup_memset_4_i64exit_76;
reg [31:0] main_legup_memset_4_i64exit_76_reg;
reg [31:0] main_legup_memset_4_i64exit_77;
reg [31:0] main_legup_memset_4_i64exit_77_reg;
reg [31:0] main_legup_memset_4_i64exit_78;
reg [31:0] main_legup_memset_4_i64exit_78_reg;
reg [31:0] main_legup_memset_4_i64exit_79;
reg [31:0] main_legup_memset_4_i64exit_79_reg;
reg [31:0] main_legup_memset_4_i64exit_80;
reg [31:0] main_legup_memset_4_i64exit_80_reg;
reg [31:0] main_legup_memset_4_i64exit_81;
reg [31:0] main_legup_memset_4_i64exit_81_reg;
reg [31:0] main_legup_memset_4_i64exit_82;
reg [31:0] main_legup_memset_4_i64exit_82_reg;
reg [31:0] main_legup_memset_4_i64exit_83;
reg [31:0] main_legup_memset_4_i64exit_83_reg;
reg [31:0] main_legup_memset_4_i64exit_84;
reg [31:0] main_legup_memset_4_i64exit_84_reg;
reg [31:0] main_legup_memset_4_i64exit_85;
reg [31:0] main_legup_memset_4_i64exit_85_reg;
reg [31:0] main_legup_memset_4_i64exit_86;
reg [31:0] main_legup_memset_4_i64exit_86_reg;
reg [31:0] main_legup_memset_4_i64exit_87;
reg [31:0] main_legup_memset_4_i64exit_87_reg;
reg [31:0] main_legup_memset_4_i64exit_88;
reg [31:0] main_legup_memset_4_i64exit_88_reg;
reg [31:0] main_legup_memset_4_i64exit_89;
reg [31:0] main_legup_memset_4_i64exit_89_reg;
reg [31:0] main_legup_memset_4_i64exit_90;
reg [31:0] main_legup_memset_4_i64exit_90_reg;
reg [31:0] main_legup_memset_4_i64exit_91;
reg [31:0] main_legup_memset_4_i64exit_91_reg;
reg [31:0] main_legup_memset_4_i64exit_92;
reg [31:0] main_legup_memset_4_i64exit_92_reg;
reg [31:0] main_legup_memset_4_i64exit_93;
reg [31:0] main_legup_memset_4_i64exit_93_reg;
reg [31:0] main_legup_memset_4_i64exit_94;
reg [31:0] main_legup_memset_4_i64exit_94_reg;
reg [31:0] main_legup_memset_4_i64exit_95;
reg [31:0] main_legup_memset_4_i64exit_95_reg;
reg [31:0] main_legup_memset_4_i64exit_96;
reg [31:0] main_legup_memset_4_i64exit_96_reg;
reg [31:0] main_legup_memset_4_i64exit_97;
reg [31:0] main_legup_memset_4_i64exit_97_reg;
reg [31:0] main_legup_memset_4_i64exit_98;
reg [31:0] main_legup_memset_4_i64exit_98_reg;
reg [31:0] main_legup_memset_4_i64exit_99;
reg [31:0] main_legup_memset_4_i64exit_99_reg;
reg [31:0] main_legup_memset_4_i64exit_100;
reg [31:0] main_legup_memset_4_i64exit_100_reg;
reg [31:0] main_legup_memset_4_i64exit_101;
reg [31:0] main_legup_memset_4_i64exit_101_reg;
reg [31:0] main_legup_memset_4_i64exit_102;
reg [31:0] main_legup_memset_4_i64exit_102_reg;
reg [31:0] main_legup_memset_4_i64exit_103;
reg [31:0] main_legup_memset_4_i64exit_103_reg;
reg [31:0] main_legup_memset_4_i64exit_104;
reg [31:0] main_legup_memset_4_i64exit_104_reg;
reg [31:0] main_legup_memset_4_i64exit_105;
reg [31:0] main_legup_memset_4_i64exit_105_reg;
reg [31:0] main_legup_memset_4_i64exit_106;
reg [31:0] main_legup_memset_4_i64exit_106_reg;
reg [31:0] main_legup_memset_4_i64exit_107;
reg [31:0] main_legup_memset_4_i64exit_107_reg;
reg [31:0] main_legup_memset_4_i64exit_108;
reg [31:0] main_legup_memset_4_i64exit_108_reg;
reg [31:0] main_legup_memset_4_i64exit_109;
reg [31:0] main_legup_memset_4_i64exit_109_reg;
reg [31:0] main_legup_memset_4_i64exit_110;
reg [31:0] main_legup_memset_4_i64exit_110_reg;
reg [31:0] main_legup_memset_4_i64exit_111;
reg [31:0] main_legup_memset_4_i64exit_111_reg;
reg [31:0] main_legup_memset_4_i64exit_112;
reg [31:0] main_legup_memset_4_i64exit_112_reg;
reg [31:0] main_legup_memset_4_i64exit_113;
reg [31:0] main_legup_memset_4_i64exit_113_reg;
reg [31:0] main_legup_memset_4_i64exit_114;
reg [31:0] main_legup_memset_4_i64exit_114_reg;
reg [31:0] main_legup_memset_4_i64exit_115;
reg [31:0] main_legup_memset_4_i64exit_115_reg;
reg [31:0] main_legup_memset_4_i64exit_116;
reg [31:0] main_legup_memset_4_i64exit_116_reg;
reg [31:0] main_legup_memset_4_i64exit_117;
reg [31:0] main_legup_memset_4_i64exit_117_reg;
reg [31:0] main_legup_memset_4_i64exit_118;
reg [31:0] main_legup_memset_4_i64exit_118_reg;
reg [31:0] main_legup_memset_4_i64exit_119;
reg [31:0] main_legup_memset_4_i64exit_119_reg;
reg [31:0] main_legup_memset_4_i64exit_120;
reg [31:0] main_legup_memset_4_i64exit_120_reg;
reg [31:0] main_legup_memset_4_i64exit_121;
reg [31:0] main_legup_memset_4_i64exit_121_reg;
reg [31:0] main_legup_memset_4_i64exit_122;
reg [31:0] main_legup_memset_4_i64exit_122_reg;
reg [31:0] main_legup_memset_4_i64exit_123;
reg [31:0] main_legup_memset_4_i64exit_123_reg;
reg [31:0] main_legup_memset_4_i64exit_124;
reg [31:0] main_legup_memset_4_i64exit_124_reg;
reg [31:0] main_legup_memset_4_i64exit_125;
reg [31:0] main_legup_memset_4_i64exit_125_reg;
reg [31:0] main_legup_memset_4_i64exit_126;
reg [31:0] main_legup_memset_4_i64exit_126_reg;
reg [31:0] main_legup_memset_4_i64exit_127;
reg [31:0] main_legup_memset_4_i64exit_127_reg;
reg [31:0] main_legup_memset_4_i64exit_128;
reg [31:0] main_legup_memset_4_i64exit_128_reg;
reg [31:0] main_legup_memset_4_i64exit_129;
reg [31:0] main_legup_memset_4_i64exit_129_reg;
reg [31:0] main_legup_memset_4_i64exit_130;
reg [31:0] main_legup_memset_4_i64exit_130_reg;
reg  main_legup_memset_4_i64exit_131;
reg  main_legup_memset_4_i64exit_131_reg;
reg [31:0] main_legup_memset_4_i64exit_132;
reg [31:0] main_legup_memset_4_i64exit_132_reg;
reg [31:0] main_legup_memset_4_i64exit_m0iii;
reg [31:0] main_legup_memset_4_i64exit_m0iii_reg;
reg [31:0] main_133_134;
reg [31:0] main_133_134_reg;
reg  main_133_135;
reg  main_133_135_reg;
reg [31:0] main_136_137;
reg [31:0] main_136_137_reg;
reg [31:0] main_136_138;
reg [31:0] main_136_138_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_136_scevgep8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_136_scevgep8_reg;
reg [31:0] main_136_139;
reg [31:0] main_136_139_reg;
reg [31:0] main_136_140;
reg [31:0] main_136_140_reg;
reg [31:0] main_136_141;
reg [31:0] main_136_141_reg;
reg  main_136_142;
reg  main_136_142_reg;
reg [31:0] main_quantlexiti_mil0lcssaii;
reg [31:0] main_quantlexiti_mil0lcssaii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_quant26bt_posquant26bt_negii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_quant26bt_posquant26bt_negii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_ril0inii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_ril0inii_reg;
reg [31:0] main_quantlexiti_ril0ii;
reg [31:0] main_quantlexiti_ril0ii_reg;
reg [31:0] main_quantlexiti_143;
reg [31:0] main_quantlexiti_143_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_144;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_144_reg;
reg [31:0] main_quantlexiti_145;
reg [31:0] main_quantlexiti_145_reg;
reg [31:0] main_quantlexiti_146;
reg [31:0] main_quantlexiti_146_reg;
reg [31:0] main_quantlexiti_147;
reg [31:0] main_quantlexiti_147_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_148;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_148_reg;
reg [31:0] main_quantlexiti_149;
reg [31:0] main_quantlexiti_149_reg;
reg [31:0] main_quantlexiti_150;
reg [31:0] main_quantlexiti_150_reg;
reg  main_quantlexiti_151;
reg  main_quantlexiti_151_reg;
reg [31:0] main_quantlexiti_i11i;
reg [31:0] main_quantlexiti_i11i_reg;
reg  main_quantlexiti_152;
reg  main_quantlexiti_152_reg;
reg [31:0] main_quantlexiti_i12i;
reg [31:0] main_quantlexiti_i12i_reg;
reg [31:0] main_quantlexiti_153;
reg [31:0] main_quantlexiti_153_reg;
reg [31:0] main_quantlexiti_154;
reg [31:0] main_quantlexiti_154_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_155;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_155_reg;
reg [31:0] main_quantlexiti_156;
reg [31:0] main_quantlexiti_156_reg;
reg [31:0] main_quantlexiti_157;
reg [31:0] main_quantlexiti_157_reg;
reg [31:0] main_quantlexiti_158;
reg [31:0] main_quantlexiti_158_reg;
reg [31:0] main_quantlexiti_159;
reg [31:0] main_quantlexiti_159_reg;
reg  main_quantlexiti_160;
reg  main_quantlexiti_160_reg;
reg [31:0] main_quantlexiti_161;
reg [31:0] main_quantlexiti_161_reg;
reg [31:0] main_quantlexiti_1i7i;
reg [31:0] main_quantlexiti_1i7i_reg;
reg [31:0] main_quantlexiti_162;
reg [31:0] main_quantlexiti_162_reg;
reg [31:0] main_quantlexiti_163;
reg [31:0] main_quantlexiti_163_reg;
reg [31:0] main_quantlexiti_164;
reg [31:0] main_quantlexiti_164_reg;
reg [31:0] main_quantlexiti_165;
reg [31:0] main_quantlexiti_165_reg;
reg [31:0] main_quantlexiti_166;
reg [31:0] main_quantlexiti_166_reg;
reg [31:0] main_quantlexiti_167;
reg [31:0] main_quantlexiti_167_reg;
reg [31:0] main_quantlexiti_168;
reg [31:0] main_quantlexiti_168_reg;
reg [31:0] main_quantlexiti_wd40i8i;
reg [31:0] main_quantlexiti_wd40i8i_reg;
reg [31:0] main_quantlexiti_169;
reg [31:0] main_quantlexiti_169_reg;
reg  main_quantlexiti_170;
reg  main_quantlexiti_170_reg;
reg [31:0] main_quantlexiti_i9i;
reg [31:0] main_quantlexiti_i9i_reg;
reg  main_quantlexiti_171;
reg  main_quantlexiti_171_reg;
reg [31:0] main_quantlexiti_i10i;
reg [31:0] main_quantlexiti_i10i_reg;
reg [31:0] main_quantlexiti_172;
reg [31:0] main_quantlexiti_172_reg;
reg [31:0] main_quantlexiti_173;
reg [31:0] main_quantlexiti_173_reg;
reg [31:0] main_quantlexiti_174;
reg [31:0] main_quantlexiti_174_reg;
reg [31:0] main_quantlexiti_175;
reg [31:0] main_quantlexiti_175_reg;
reg [31:0] main_quantlexiti_176;
reg [31:0] main_quantlexiti_176_reg;
reg [31:0] main_quantlexiti_apl10i4i;
reg [31:0] main_quantlexiti_apl10i4i_reg;
reg [31:0] main_quantlexiti_177;
reg [31:0] main_quantlexiti_177_reg;
reg  main_quantlexiti_178;
reg  main_quantlexiti_178_reg;
reg [31:0] main_quantlexiti_apl10i5i;
reg [31:0] main_quantlexiti_apl10i5i_reg;
reg [31:0] main_quantlexiti_179;
reg [31:0] main_quantlexiti_179_reg;
reg [31:0] main_quantlexiti_180;
reg [31:0] main_quantlexiti_180_reg;
reg [31:0] main_quantlexiti_181;
reg [31:0] main_quantlexiti_181_reg;
reg [31:0] main_quantlexiti_182;
reg [31:0] main_quantlexiti_182_reg;
reg [31:0] main_quantlexiti_183;
reg [31:0] main_quantlexiti_183_reg;
reg [31:0] main_quantlexiti_184;
reg [31:0] main_quantlexiti_184_reg;
reg [31:0] main_quantlexiti_185;
reg [31:0] main_quantlexiti_185_reg;
reg [31:0] main_quantlexiti_186;
reg [31:0] main_quantlexiti_186_reg;
reg [31:0] main_quantlexiti_187;
reg [31:0] main_quantlexiti_187_reg;
reg [31:0] main_quantlexiti_188;
reg [31:0] main_quantlexiti_188_reg;
reg [31:0] main_quantlexiti_189;
reg [31:0] main_quantlexiti_189_reg;
reg [31:0] main_quantlexiti_190;
reg [31:0] main_quantlexiti_190_reg;
reg [31:0] main_quantlexiti_191;
reg [31:0] main_quantlexiti_191_reg;
reg [31:0] main_quantlexiti_192;
reg [31:0] main_quantlexiti_192_reg;
reg [31:0] main_quantlexiti_193;
reg [31:0] main_quantlexiti_193_reg;
reg [31:0] main_quantlexiti_194;
reg [31:0] main_quantlexiti_194_reg;
reg [31:0] main_quantlexiti_195;
reg [31:0] main_quantlexiti_195_reg;
reg [31:0] main_quantlexiti_196;
reg [31:0] main_quantlexiti_196_reg;
reg [31:0] main_quantlexiti_197;
reg [31:0] main_quantlexiti_197_reg;
reg [31:0] main_quantlexiti_198;
reg [31:0] main_quantlexiti_198_reg;
reg [31:0] main_quantlexiti_199;
reg [31:0] main_quantlexiti_199_reg;
reg [31:0] main_quantlexiti_200;
reg [31:0] main_quantlexiti_200_reg;
reg [31:0] main_quantlexiti_201;
reg [31:0] main_quantlexiti_201_reg;
reg [31:0] main_quantlexiti_202;
reg [31:0] main_quantlexiti_202_reg;
reg [31:0] main_quantlexiti_203;
reg [31:0] main_quantlexiti_203_reg;
reg [31:0] main_quantlexiti_204;
reg [31:0] main_quantlexiti_204_reg;
reg [31:0] main_quantlexiti_205;
reg [31:0] main_quantlexiti_205_reg;
reg [31:0] main_quantlexiti_206;
reg [31:0] main_quantlexiti_206_reg;
reg [31:0] main_quantlexiti_207;
reg [31:0] main_quantlexiti_207_reg;
reg [31:0] main_quantlexiti_208;
reg [31:0] main_quantlexiti_208_reg;
reg [31:0] main_quantlexiti_209;
reg [31:0] main_quantlexiti_209_reg;
reg [31:0] main_quantlexiti_210;
reg [31:0] main_quantlexiti_210_reg;
reg [31:0] main_quantlexiti_211;
reg [31:0] main_quantlexiti_211_reg;
reg [31:0] main_quantlexiti_212;
reg [31:0] main_quantlexiti_212_reg;
reg [31:0] main_quantlexiti_213;
reg [31:0] main_quantlexiti_213_reg;
reg [31:0] main_quantlexiti_214;
reg [31:0] main_quantlexiti_214_reg;
reg [31:0] main_quantlexiti_215;
reg [31:0] main_quantlexiti_215_reg;
reg [31:0] main_quantlexiti_216;
reg [31:0] main_quantlexiti_216_reg;
reg [31:0] main_quantlexiti_217;
reg [31:0] main_quantlexiti_217_reg;
reg [31:0] main_quantlexiti_218;
reg [31:0] main_quantlexiti_218_reg;
reg [31:0] main_quantlexiti_219;
reg [31:0] main_quantlexiti_219_reg;
reg [31:0] main_quantlexiti_220;
reg [31:0] main_quantlexiti_220_reg;
reg [31:0] main_quantlexiti_221;
reg [31:0] main_quantlexiti_221_reg;
reg [31:0] main_quantlexiti_222;
reg [31:0] main_quantlexiti_222_reg;
reg [31:0] main_quantlexiti_223;
reg [31:0] main_quantlexiti_223_reg;
reg [31:0] main_quantlexiti_224;
reg [31:0] main_quantlexiti_224_reg;
reg [31:0] main_quantlexiti_225;
reg [31:0] main_quantlexiti_225_reg;
reg [31:0] main_quantlexiti_226;
reg [31:0] main_quantlexiti_226_reg;
reg [31:0] main_quantlexiti_227;
reg [31:0] main_quantlexiti_227_reg;
reg [31:0] main_quantlexiti_228;
reg [31:0] main_quantlexiti_228_reg;
reg [31:0] main_quantlexiti_229;
reg [31:0] main_quantlexiti_229_reg;
reg [31:0] main_quantlexiti_230;
reg [31:0] main_quantlexiti_230_reg;
reg [31:0] main_quantlexiti_231;
reg [31:0] main_quantlexiti_231_reg;
reg [31:0] main_quantlexiti_232;
reg [31:0] main_quantlexiti_232_reg;
reg  main_quantlexiti_233;
reg  main_quantlexiti_233_reg;
reg [31:0] main_quantlexiti_234;
reg [31:0] main_quantlexiti_234_reg;
reg [31:0] main_quantlexiti_m0i3i;
reg [31:0] main_quantlexiti_m0i3i_reg;
reg  main_quantlexiti_235;
reg  main_quantlexiti_235_reg;
reg [31:0] main_quantlexiti_v;
reg [31:0] main_quantlexiti_v_reg;
reg [31:0] main_quantlexiti_;
reg [31:0] main_quantlexiti__reg;
reg [31:0] main_quantlexiti_236;
reg [31:0] main_quantlexiti_236_reg;
reg  main_quantlexiti_237;
reg  main_quantlexiti_237_reg;
reg [31:0] main_quantlexiti_238;
reg [31:0] main_quantlexiti_238_reg;
reg [31:0] main_quantlexiti_ih1;
reg [31:0] main_quantlexiti_ih1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_239;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_239_reg;
reg [31:0] main_quantlexiti_240;
reg [31:0] main_quantlexiti_240_reg;
reg [31:0] main_quantlexiti_241;
reg [31:0] main_quantlexiti_241_reg;
reg [31:0] main_quantlexiti_242;
reg [31:0] main_quantlexiti_242_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_243;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_243_reg;
reg [31:0] main_quantlexiti_244;
reg [31:0] main_quantlexiti_244_reg;
reg [31:0] main_quantlexiti_245;
reg [31:0] main_quantlexiti_245_reg;
reg  main_quantlexiti_246;
reg  main_quantlexiti_246_reg;
reg [31:0] main_quantlexiti_i1i1;
reg [31:0] main_quantlexiti_i1i1_reg;
reg  main_quantlexiti_247;
reg  main_quantlexiti_247_reg;
reg [31:0] main_quantlexiti_i2i2;
reg [31:0] main_quantlexiti_i2i2_reg;
reg [31:0] main_quantlexiti_248;
reg [31:0] main_quantlexiti_248_reg;
reg [31:0] main_quantlexiti_249;
reg [31:0] main_quantlexiti_249_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_250;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_250_reg;
reg [31:0] main_quantlexiti_251;
reg [31:0] main_quantlexiti_251_reg;
reg [31:0] main_quantlexiti_252;
reg [31:0] main_quantlexiti_252_reg;
reg [31:0] main_quantlexiti_253;
reg [31:0] main_quantlexiti_253_reg;
reg [31:0] main_quantlexiti_254;
reg [31:0] main_quantlexiti_254_reg;
reg  main_quantlexiti_255;
reg  main_quantlexiti_255_reg;
reg [31:0] main_quantlexiti_256;
reg [31:0] main_quantlexiti_256_reg;
reg [31:0] main_quantlexiti_1ii3;
reg [31:0] main_quantlexiti_1ii3_reg;
reg [31:0] main_quantlexiti_257;
reg [31:0] main_quantlexiti_257_reg;
reg [31:0] main_quantlexiti_258;
reg [31:0] main_quantlexiti_258_reg;
reg [31:0] main_quantlexiti_259;
reg [31:0] main_quantlexiti_259_reg;
reg [31:0] main_quantlexiti_260;
reg [31:0] main_quantlexiti_260_reg;
reg [31:0] main_quantlexiti_261;
reg [31:0] main_quantlexiti_261_reg;
reg [31:0] main_quantlexiti_262;
reg [31:0] main_quantlexiti_262_reg;
reg [31:0] main_quantlexiti_263;
reg [31:0] main_quantlexiti_263_reg;
reg [31:0] main_quantlexiti_wd40ii4;
reg [31:0] main_quantlexiti_wd40ii4_reg;
reg [31:0] main_quantlexiti_264;
reg [31:0] main_quantlexiti_264_reg;
reg  main_quantlexiti_265;
reg  main_quantlexiti_265_reg;
reg [31:0] main_quantlexiti_ii5;
reg [31:0] main_quantlexiti_ii5_reg;
reg  main_quantlexiti_266;
reg  main_quantlexiti_266_reg;
reg [31:0] main_quantlexiti_ii6;
reg [31:0] main_quantlexiti_ii6_reg;
reg [31:0] main_quantlexiti_267;
reg [31:0] main_quantlexiti_267_reg;
reg [31:0] main_quantlexiti_268;
reg [31:0] main_quantlexiti_268_reg;
reg [31:0] main_quantlexiti_269;
reg [31:0] main_quantlexiti_269_reg;
reg [31:0] main_quantlexiti_270;
reg [31:0] main_quantlexiti_270_reg;
reg [31:0] main_quantlexiti_271;
reg [31:0] main_quantlexiti_271_reg;
reg [31:0] main_quantlexiti_apl10ii7;
reg [31:0] main_quantlexiti_apl10ii7_reg;
reg [31:0] main_quantlexiti_272;
reg [31:0] main_quantlexiti_272_reg;
reg  main_quantlexiti_273;
reg  main_quantlexiti_273_reg;
reg [31:0] main_quantlexiti_apl10ii8;
reg [31:0] main_quantlexiti_apl10ii8_reg;
reg [31:0] main_quantlexiti_274;
reg [31:0] main_quantlexiti_274_reg;
reg [31:0] main_quantlexiti_275;
reg [31:0] main_quantlexiti_275_reg;
reg [31:0] main_quantlexiti_276;
reg [31:0] main_quantlexiti_276_reg;
reg [31:0] main_quantlexiti_277;
reg [31:0] main_quantlexiti_277_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_278;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_278_reg;
reg  main_quantlexiti_279;
reg  main_quantlexiti_279_reg;
reg [31:0] main_encodeexit_crit_edge_280;
reg [31:0] main_encodeexit_crit_edge_280_reg;
reg  main_encodeexit_crit_edge_281;
reg  main_encodeexit_crit_edge_281_reg;
reg [31:0] main_encodeexit_crit_edge_apl12ii9;
reg [31:0] main_encodeexit_crit_edge_apl12ii9_reg;
reg [31:0] main_encodeexit_crit_edge_282;
reg [31:0] main_encodeexit_crit_edge_282_reg;
reg [31:0] main_encodeexit_crit_edge_283;
reg [31:0] main_encodeexit_crit_edge_283_reg;
reg [31:0] main_encodeexit_crit_edge_284;
reg [31:0] main_encodeexit_crit_edge_284_reg;
reg [31:0] main_encodeexit_crit_edge_285;
reg [31:0] main_encodeexit_crit_edge_285_reg;
reg [31:0] main_encodeexit_crit_edge_286;
reg [31:0] main_encodeexit_crit_edge_286_reg;
reg  main_encodeexit_crit_edge_287;
reg  main_encodeexit_crit_edge_287_reg;
reg [31:0] main_encodeexit_crit_edge_apl12i6i;
reg [31:0] main_encodeexit_crit_edge_apl12i6i_reg;
reg [31:0] main_encodeexit_crit_edge_288;
reg [31:0] main_encodeexit_crit_edge_288_reg;
reg [31:0] main_encodeexit_crit_edge_289;
reg [31:0] main_encodeexit_crit_edge_289_reg;
reg [31:0] main_encodeexit_crit_edge_290;
reg [31:0] main_encodeexit_crit_edge_290_reg;
reg [31:0] main_encodeexit_crit_edge_291;
reg [31:0] main_encodeexit_crit_edge_291_reg;
reg [31:0] main_encodeexit_crit_edge_pre;
reg [31:0] main_encodeexit_crit_edge_pre_reg;
reg [31:0] main_encodeexit_crit_edge_pre16;
reg [31:0] main_encodeexit_crit_edge_pre16_reg;
reg [31:0] main_encodeexit_crit_edge_pre17;
reg [31:0] main_encodeexit_crit_edge_pre17_reg;
reg [31:0] main_encodeexit_crit_edge_pre18;
reg [31:0] main_encodeexit_crit_edge_pre18_reg;
reg [31:0] main_encodeexit_crit_edge_pre19;
reg [31:0] main_encodeexit_crit_edge_pre19_reg;
reg [31:0] main_encodeexit_crit_edge_pre20;
reg [31:0] main_encodeexit_crit_edge_pre20_reg;
reg [31:0] main_encodeexit_crit_edge_pre21;
reg [31:0] main_encodeexit_crit_edge_pre21_reg;
reg [31:0] main_encodeexit_crit_edge_pre22;
reg [31:0] main_encodeexit_crit_edge_pre22_reg;
reg [31:0] main_encodeexit_crit_edge_pre23;
reg [31:0] main_encodeexit_crit_edge_pre23_reg;
reg [31:0] main_encodeexit_crit_edge_pre24;
reg [31:0] main_encodeexit_crit_edge_pre24_reg;
reg [31:0] main_encodeexit_crit_edge_pre25;
reg [31:0] main_encodeexit_crit_edge_pre25_reg;
reg [31:0] main_encodeexit_crit_edge_pre26;
reg [31:0] main_encodeexit_crit_edge_pre26_reg;
reg [31:0] main_encodeexit_crit_edge_pre27;
reg [31:0] main_encodeexit_crit_edge_pre27_reg;
reg [31:0] main_encodeexit_crit_edge_pre28;
reg [31:0] main_encodeexit_crit_edge_pre28_reg;
reg [31:0] main_encodeexit_crit_edge_pre29;
reg [31:0] main_encodeexit_crit_edge_pre29_reg;
reg [31:0] main_encodeexit_crit_edge_pre30;
reg [31:0] main_encodeexit_crit_edge_pre30_reg;
reg [31:0] main_encodeexit_crit_edge_pre31;
reg [31:0] main_encodeexit_crit_edge_pre31_reg;
reg [31:0] main_encodeexit_crit_edge_pre32;
reg [31:0] main_encodeexit_crit_edge_pre32_reg;
reg [31:0] main_encodeexit_crit_edge_pre33;
reg [31:0] main_encodeexit_crit_edge_pre33_reg;
reg [31:0] main_encodeexit_crit_edge_pre34;
reg [31:0] main_encodeexit_crit_edge_pre34_reg;
reg [31:0] main_encodeexit_crit_edge_pre35;
reg [31:0] main_encodeexit_crit_edge_pre35_reg;
reg [31:0] main_encodeexit_crit_edge_pre36;
reg [31:0] main_encodeexit_crit_edge_pre36_reg;
reg [31:0] main_encodeexit_crit_edge_pre37;
reg [31:0] main_encodeexit_crit_edge_pre37_reg;
reg [31:0] main_encodeexit_crit_edge_pre38;
reg [31:0] main_encodeexit_crit_edge_pre38_reg;
reg [31:0] main_encodeexit_crit_edge_phitmp;
reg [31:0] main_encodeexit_crit_edge_phitmp_reg;
reg [31:0] main_encodeexit_crit_edge_phitmp1;
reg [31:0] main_encodeexit_crit_edge_phitmp1_reg;
reg [31:0] main_encodeexit_crit_edge_phitmp2;
reg [31:0] main_encodeexit_crit_edge_phitmp2_reg;
reg [31:0] main_encodeexit_crit_edge_phitmp3;
reg [31:0] main_encodeexit_crit_edge_phitmp3_reg;
reg [31:0] main_encodeexit_crit_edge_phitmp4;
reg [31:0] main_encodeexit_crit_edge_phitmp4_reg;
reg [31:0] main_encodeexit_crit_edge_phitmp5;
reg [31:0] main_encodeexit_crit_edge_phitmp5_reg;
reg [31:0] main_encodeexit_crit_edge_indvarnext10;
reg [31:0] main_encodeexit_crit_edge_indvarnext10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderipreheader_292;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderipreheader_292_reg;
reg [31:0] main_preheaderipreheader_293;
reg [31:0] main_preheaderipreheader_293_reg;
reg [31:0] main_preheaderi_indvar;
reg [31:0] main_preheaderi_indvar_reg;
reg [31:0] main_preheaderi_accumd100;
reg [31:0] main_preheaderi_accumd100_reg;
reg [31:0] main_preheaderi_accumd90;
reg [31:0] main_preheaderi_accumd90_reg;
reg [31:0] main_preheaderi_accumd80;
reg [31:0] main_preheaderi_accumd80_reg;
reg [31:0] main_preheaderi_accumd70;
reg [31:0] main_preheaderi_accumd70_reg;
reg [31:0] main_preheaderi_accumd60;
reg [31:0] main_preheaderi_accumd60_reg;
reg [31:0] main_preheaderi_accumd50;
reg [31:0] main_preheaderi_accumd50_reg;
reg [31:0] main_preheaderi_accumd40;
reg [31:0] main_preheaderi_accumd40_reg;
reg [31:0] main_preheaderi_accumd30;
reg [31:0] main_preheaderi_accumd30_reg;
reg [31:0] main_preheaderi_accumd20;
reg [31:0] main_preheaderi_accumd20_reg;
reg [31:0] main_preheaderi_accumd10;
reg [31:0] main_preheaderi_accumd10_reg;
reg [31:0] main_preheaderi_accumd00;
reg [31:0] main_preheaderi_accumd00_reg;
reg [31:0] main_preheaderi_accumc100;
reg [31:0] main_preheaderi_accumc100_reg;
reg [31:0] main_preheaderi_accumc90;
reg [31:0] main_preheaderi_accumc90_reg;
reg [31:0] main_preheaderi_accumc80;
reg [31:0] main_preheaderi_accumc80_reg;
reg [31:0] main_preheaderi_accumc70;
reg [31:0] main_preheaderi_accumc70_reg;
reg [31:0] main_preheaderi_accumc60;
reg [31:0] main_preheaderi_accumc60_reg;
reg [31:0] main_preheaderi_accumc50;
reg [31:0] main_preheaderi_accumc50_reg;
reg [31:0] main_preheaderi_accumc40;
reg [31:0] main_preheaderi_accumc40_reg;
reg [31:0] main_preheaderi_accumc30;
reg [31:0] main_preheaderi_accumc30_reg;
reg [31:0] main_preheaderi_accumc20;
reg [31:0] main_preheaderi_accumc20_reg;
reg [31:0] main_preheaderi_accumc10;
reg [31:0] main_preheaderi_accumc10_reg;
reg [31:0] main_preheaderi_accumc00;
reg [31:0] main_preheaderi_accumc00_reg;
reg [31:0] main_preheaderi_dec_ph20;
reg [31:0] main_preheaderi_dec_ph20_reg;
reg [31:0] main_preheaderi_dec_ph10;
reg [31:0] main_preheaderi_dec_ph10_reg;
reg [31:0] main_preheaderi_dec_nbh0;
reg [31:0] main_preheaderi_dec_nbh0_reg;
reg [31:0] main_preheaderi_dec_deth0;
reg [31:0] main_preheaderi_dec_deth0_reg;
reg [31:0] main_preheaderi_dec_ah20;
reg [31:0] main_preheaderi_dec_ah20_reg;
reg [31:0] main_preheaderi_dec_rh20;
reg [31:0] main_preheaderi_dec_rh20_reg;
reg [31:0] main_preheaderi_dec_ah10;
reg [31:0] main_preheaderi_dec_ah10_reg;
reg [31:0] main_preheaderi_dec_rh10;
reg [31:0] main_preheaderi_dec_rh10_reg;
reg [31:0] main_preheaderi_dec_plt20;
reg [31:0] main_preheaderi_dec_plt20_reg;
reg [31:0] main_preheaderi_dec_plt10;
reg [31:0] main_preheaderi_dec_plt10_reg;
reg [31:0] main_preheaderi_dec_nbl0;
reg [31:0] main_preheaderi_dec_nbl0_reg;
reg [31:0] main_preheaderi_dec_detl0;
reg [31:0] main_preheaderi_dec_detl0_reg;
reg [31:0] main_preheaderi_dec_al20;
reg [31:0] main_preheaderi_dec_al20_reg;
reg [31:0] main_preheaderi_dec_rlt20;
reg [31:0] main_preheaderi_dec_rlt20_reg;
reg [31:0] main_preheaderi_dec_al10;
reg [31:0] main_preheaderi_dec_al10_reg;
reg [31:0] main_preheaderi_dec_rlt10;
reg [31:0] main_preheaderi_dec_rlt10_reg;
reg [31:0] main_preheaderi_i11i;
reg [31:0] main_preheaderi_i11i_reg;
reg [31:0] main_preheaderi_294;
reg [31:0] main_preheaderi_294_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep7_reg;
reg [31:0] main_preheaderi_295;
reg [31:0] main_preheaderi_295_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_296;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_296_reg;
reg [31:0] main_preheaderi_297;
reg [31:0] main_preheaderi_297_reg;
reg [31:0] main_preheaderi_298;
reg [31:0] main_preheaderi_298_reg;
reg [31:0] main_preheaderi_299;
reg [31:0] main_preheaderi_299_reg;
reg [31:0] main_preheaderi_300;
reg [31:0] main_preheaderi_300_reg;
reg [31:0] main_preheaderi_301;
reg [31:0] main_preheaderi_301_reg;
reg [31:0] main_preheaderi_302;
reg [31:0] main_preheaderi_302_reg;
reg [31:0] main_preheaderi_303;
reg [31:0] main_preheaderi_303_reg;
reg [31:0] main_preheaderi_304;
reg [31:0] main_preheaderi_304_reg;
reg [31:0] main_preheaderi_305;
reg [31:0] main_preheaderi_305_reg;
reg [31:0] main_preheaderi_306;
reg [31:0] main_preheaderi_306_reg;
reg [31:0] main_preheaderi_307;
reg [31:0] main_preheaderi_307_reg;
reg [31:0] main_preheaderi_308;
reg [31:0] main_preheaderi_308_reg;
reg [31:0] main_preheaderi_309;
reg [31:0] main_preheaderi_309_reg;
reg [31:0] main_preheaderi_310;
reg [31:0] main_preheaderi_310_reg;
reg [31:0] main_preheaderi_311;
reg [31:0] main_preheaderi_311_reg;
reg [31:0] main_preheaderi_312;
reg [31:0] main_preheaderi_312_reg;
reg [31:0] main_preheaderi_313;
reg [31:0] main_preheaderi_313_reg;
reg [31:0] main_preheaderi_314;
reg [31:0] main_preheaderi_314_reg;
reg [31:0] main_preheaderi_315;
reg [31:0] main_preheaderi_315_reg;
reg [31:0] main_preheaderi_316;
reg [31:0] main_preheaderi_316_reg;
reg [31:0] main_preheaderi_317;
reg [31:0] main_preheaderi_317_reg;
reg [31:0] main_preheaderi_318;
reg [31:0] main_preheaderi_318_reg;
reg [31:0] main_preheaderi_319;
reg [31:0] main_preheaderi_319_reg;
reg [31:0] main_preheaderi_320;
reg [31:0] main_preheaderi_320_reg;
reg [31:0] main_preheaderi_321;
reg [31:0] main_preheaderi_321_reg;
reg [31:0] main_preheaderi_322;
reg [31:0] main_preheaderi_322_reg;
reg [31:0] main_preheaderi_323;
reg [31:0] main_preheaderi_323_reg;
reg [31:0] main_preheaderi_324;
reg [31:0] main_preheaderi_324_reg;
reg [31:0] main_preheaderi_325;
reg [31:0] main_preheaderi_325_reg;
reg [31:0] main_preheaderi_326;
reg [31:0] main_preheaderi_326_reg;
reg [31:0] main_preheaderi_327;
reg [31:0] main_preheaderi_327_reg;
reg [31:0] main_preheaderi_328;
reg [31:0] main_preheaderi_328_reg;
reg [31:0] main_preheaderi_329;
reg [31:0] main_preheaderi_329_reg;
reg [31:0] main_preheaderi_330;
reg [31:0] main_preheaderi_330_reg;
reg [31:0] main_preheaderi_331;
reg [31:0] main_preheaderi_331_reg;
reg [31:0] main_preheaderi_332;
reg [31:0] main_preheaderi_332_reg;
reg [31:0] main_preheaderi_333;
reg [31:0] main_preheaderi_333_reg;
reg [31:0] main_preheaderi_334;
reg [31:0] main_preheaderi_334_reg;
reg [31:0] main_preheaderi_335;
reg [31:0] main_preheaderi_335_reg;
reg [31:0] main_preheaderi_336;
reg [31:0] main_preheaderi_336_reg;
reg [31:0] main_preheaderi_337;
reg [31:0] main_preheaderi_337_reg;
reg [31:0] main_preheaderi_338;
reg [31:0] main_preheaderi_338_reg;
reg [31:0] main_preheaderi_339;
reg [31:0] main_preheaderi_339_reg;
reg [31:0] main_preheaderi_340;
reg [31:0] main_preheaderi_340_reg;
reg [31:0] main_preheaderi_341;
reg [31:0] main_preheaderi_341_reg;
reg [31:0] main_preheaderi_342;
reg [31:0] main_preheaderi_342_reg;
reg [31:0] main_preheaderi_343;
reg [31:0] main_preheaderi_343_reg;
reg [31:0] main_preheaderi_344;
reg [31:0] main_preheaderi_344_reg;
reg [31:0] main_preheaderi_345;
reg [31:0] main_preheaderi_345_reg;
reg [31:0] main_preheaderi_346;
reg [31:0] main_preheaderi_346_reg;
reg [31:0] main_preheaderi_347;
reg [31:0] main_preheaderi_347_reg;
reg [31:0] main_preheaderi_348;
reg [31:0] main_preheaderi_348_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_349;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_349_reg;
reg [31:0] main_preheaderi_350;
reg [31:0] main_preheaderi_350_reg;
reg [31:0] main_preheaderi_351;
reg [31:0] main_preheaderi_351_reg;
reg [31:0] main_preheaderi_352;
reg [31:0] main_preheaderi_352_reg;
reg [31:0] main_preheaderi_353;
reg [31:0] main_preheaderi_353_reg;
reg [31:0] main_preheaderi_354;
reg [31:0] main_preheaderi_354_reg;
reg [31:0] main_preheaderi_355;
reg [31:0] main_preheaderi_355_reg;
reg [31:0] main_preheaderi_356;
reg [31:0] main_preheaderi_356_reg;
reg [31:0] main_preheaderi_357;
reg [31:0] main_preheaderi_357_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_358;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_358_reg;
reg [31:0] main_preheaderi_359;
reg [31:0] main_preheaderi_359_reg;
reg [31:0] main_preheaderi_360;
reg [31:0] main_preheaderi_360_reg;
reg  main_preheaderi_361;
reg  main_preheaderi_361_reg;
reg [31:0] main_preheaderi_i10i;
reg [31:0] main_preheaderi_i10i_reg;
reg  main_preheaderi_362;
reg  main_preheaderi_362_reg;
reg [31:0] main_preheaderi_i11i_var0;
reg [31:0] main_preheaderi_i11i_var0_reg;
reg [31:0] main_preheaderi_363;
reg [31:0] main_preheaderi_363_reg;
reg [31:0] main_preheaderi_364;
reg [31:0] main_preheaderi_364_reg;
reg [31:0] main_preheaderi_365;
reg [31:0] main_preheaderi_365_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_366;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_366_reg;
reg [31:0] main_preheaderi_367;
reg [31:0] main_preheaderi_367_reg;
reg [31:0] main_preheaderi_368;
reg [31:0] main_preheaderi_368_reg;
reg [31:0] main_preheaderi_369;
reg [31:0] main_preheaderi_369_reg;
reg [31:0] main_preheaderi_370;
reg [31:0] main_preheaderi_370_reg;
reg [31:0] main_preheaderi_371;
reg [31:0] main_preheaderi_371_reg;
reg [31:0] main_preheaderi_372;
reg [31:0] main_preheaderi_372_reg;
reg [31:0] main_preheaderi_373;
reg [31:0] main_preheaderi_373_reg;
reg  main_preheaderi_374;
reg  main_preheaderi_374_reg;
reg [31:0] main_preheaderi_375;
reg [31:0] main_preheaderi_375_reg;
reg [31:0] main_preheaderi_1i6i;
reg [31:0] main_preheaderi_1i6i_reg;
reg [31:0] main_preheaderi_376;
reg [31:0] main_preheaderi_376_reg;
reg [31:0] main_preheaderi_377;
reg [31:0] main_preheaderi_377_reg;
reg [31:0] main_preheaderi_378;
reg [31:0] main_preheaderi_378_reg;
reg [31:0] main_preheaderi_379;
reg [31:0] main_preheaderi_379_reg;
reg [31:0] main_preheaderi_380;
reg [31:0] main_preheaderi_380_reg;
reg [31:0] main_preheaderi_381;
reg [31:0] main_preheaderi_381_reg;
reg [31:0] main_preheaderi_382;
reg [31:0] main_preheaderi_382_reg;
reg [31:0] main_preheaderi_wd40i7i;
reg [31:0] main_preheaderi_wd40i7i_reg;
reg [31:0] main_preheaderi_383;
reg [31:0] main_preheaderi_383_reg;
reg  main_preheaderi_384;
reg  main_preheaderi_384_reg;
reg [31:0] main_preheaderi_i8i;
reg [31:0] main_preheaderi_i8i_reg;
reg  main_preheaderi_385;
reg  main_preheaderi_385_reg;
reg [31:0] main_preheaderi_i9i;
reg [31:0] main_preheaderi_i9i_reg;
reg [31:0] main_preheaderi_386;
reg [31:0] main_preheaderi_386_reg;
reg [31:0] main_preheaderi_387;
reg [31:0] main_preheaderi_387_reg;
reg [31:0] main_preheaderi_388;
reg [31:0] main_preheaderi_388_reg;
reg [31:0] main_preheaderi_389;
reg [31:0] main_preheaderi_389_reg;
reg [31:0] main_preheaderi_390;
reg [31:0] main_preheaderi_390_reg;
reg [31:0] main_preheaderi_apl10i3i;
reg [31:0] main_preheaderi_apl10i3i_reg;
reg [31:0] main_preheaderi_391;
reg [31:0] main_preheaderi_391_reg;
reg  main_preheaderi_392;
reg  main_preheaderi_392_reg;
reg [31:0] main_preheaderi_apl10i4i;
reg [31:0] main_preheaderi_apl10i4i_reg;
reg [31:0] main_preheaderi_393;
reg [31:0] main_preheaderi_393_reg;
reg  main_preheaderi_394;
reg  main_preheaderi_394_reg;
reg [31:0] main_preheaderi_apl12i5i;
reg [31:0] main_preheaderi_apl12i5i_reg;
reg [31:0] main_preheaderi_395;
reg [31:0] main_preheaderi_395_reg;
reg [31:0] main_preheaderi_396;
reg [31:0] main_preheaderi_396_reg;
reg [31:0] main_preheaderi_397;
reg [31:0] main_preheaderi_397_reg;
reg [31:0] main_preheaderi_398;
reg [31:0] main_preheaderi_398_reg;
reg [31:0] main_preheaderi_399;
reg [31:0] main_preheaderi_399_reg;
reg [31:0] main_preheaderi_400;
reg [31:0] main_preheaderi_400_reg;
reg [31:0] main_preheaderi_401;
reg [31:0] main_preheaderi_401_reg;
reg [31:0] main_preheaderi_402;
reg [31:0] main_preheaderi_402_reg;
reg [31:0] main_preheaderi_403;
reg [31:0] main_preheaderi_403_reg;
reg [31:0] main_preheaderi_404;
reg [31:0] main_preheaderi_404_reg;
reg [31:0] main_preheaderi_405;
reg [31:0] main_preheaderi_405_reg;
reg [31:0] main_preheaderi_406;
reg [31:0] main_preheaderi_406_reg;
reg [31:0] main_preheaderi_407;
reg [31:0] main_preheaderi_407_reg;
reg [31:0] main_preheaderi_408;
reg [31:0] main_preheaderi_408_reg;
reg [31:0] main_preheaderi_409;
reg [31:0] main_preheaderi_409_reg;
reg [31:0] main_preheaderi_410;
reg [31:0] main_preheaderi_410_reg;
reg [31:0] main_preheaderi_411;
reg [31:0] main_preheaderi_411_reg;
reg [31:0] main_preheaderi_412;
reg [31:0] main_preheaderi_412_reg;
reg [31:0] main_preheaderi_413;
reg [31:0] main_preheaderi_413_reg;
reg [31:0] main_preheaderi_414;
reg [31:0] main_preheaderi_414_reg;
reg [31:0] main_preheaderi_415;
reg [31:0] main_preheaderi_415_reg;
reg [31:0] main_preheaderi_416;
reg [31:0] main_preheaderi_416_reg;
reg [31:0] main_preheaderi_417;
reg [31:0] main_preheaderi_417_reg;
reg [31:0] main_preheaderi_418;
reg [31:0] main_preheaderi_418_reg;
reg [31:0] main_preheaderi_419;
reg [31:0] main_preheaderi_419_reg;
reg [31:0] main_preheaderi_420;
reg [31:0] main_preheaderi_420_reg;
reg [31:0] main_preheaderi_421;
reg [31:0] main_preheaderi_421_reg;
reg [31:0] main_preheaderi_422;
reg [31:0] main_preheaderi_422_reg;
reg [31:0] main_preheaderi_423;
reg [31:0] main_preheaderi_423_reg;
reg [31:0] main_preheaderi_424;
reg [31:0] main_preheaderi_424_reg;
reg [31:0] main_preheaderi_425;
reg [31:0] main_preheaderi_425_reg;
reg [31:0] main_preheaderi_426;
reg [31:0] main_preheaderi_426_reg;
reg [31:0] main_preheaderi_427;
reg [31:0] main_preheaderi_427_reg;
reg [31:0] main_preheaderi_428;
reg [31:0] main_preheaderi_428_reg;
reg [31:0] main_preheaderi_429;
reg [31:0] main_preheaderi_429_reg;
reg [31:0] main_preheaderi_430;
reg [31:0] main_preheaderi_430_reg;
reg [31:0] main_preheaderi_431;
reg [31:0] main_preheaderi_431_reg;
reg [31:0] main_preheaderi_432;
reg [31:0] main_preheaderi_432_reg;
reg [31:0] main_preheaderi_433;
reg [31:0] main_preheaderi_433_reg;
reg [31:0] main_preheaderi_434;
reg [31:0] main_preheaderi_434_reg;
reg [31:0] main_preheaderi_435;
reg [31:0] main_preheaderi_435_reg;
reg [31:0] main_preheaderi_436;
reg [31:0] main_preheaderi_436_reg;
reg [31:0] main_preheaderi_437;
reg [31:0] main_preheaderi_437_reg;
reg [31:0] main_preheaderi_438;
reg [31:0] main_preheaderi_438_reg;
reg [31:0] main_preheaderi_439;
reg [31:0] main_preheaderi_439_reg;
reg [31:0] main_preheaderi_440;
reg [31:0] main_preheaderi_440_reg;
reg [31:0] main_preheaderi_441;
reg [31:0] main_preheaderi_441_reg;
reg [31:0] main_preheaderi_442;
reg [31:0] main_preheaderi_442_reg;
reg [31:0] main_preheaderi_443;
reg [31:0] main_preheaderi_443_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_444;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_444_reg;
reg [31:0] main_preheaderi_445;
reg [31:0] main_preheaderi_445_reg;
reg [31:0] main_preheaderi_446;
reg [31:0] main_preheaderi_446_reg;
reg [31:0] main_preheaderi_447;
reg [31:0] main_preheaderi_447_reg;
reg [31:0] main_preheaderi_448;
reg [31:0] main_preheaderi_448_reg;
reg [31:0] main_preheaderi_449;
reg [31:0] main_preheaderi_449_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_450;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_450_reg;
reg [31:0] main_preheaderi_451;
reg [31:0] main_preheaderi_451_reg;
reg [31:0] main_preheaderi_452;
reg [31:0] main_preheaderi_452_reg;
reg  main_preheaderi_453;
reg  main_preheaderi_453_reg;
reg [31:0] main_preheaderi_i1i;
reg [31:0] main_preheaderi_i1i_reg;
reg  main_preheaderi_454;
reg  main_preheaderi_454_reg;
reg [31:0] main_preheaderi_i2i;
reg [31:0] main_preheaderi_i2i_reg;
reg [31:0] main_preheaderi_455;
reg [31:0] main_preheaderi_455_reg;
reg [31:0] main_preheaderi_456;
reg [31:0] main_preheaderi_456_reg;
reg [31:0] main_preheaderi_457;
reg [31:0] main_preheaderi_457_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_458;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_458_reg;
reg [31:0] main_preheaderi_459;
reg [31:0] main_preheaderi_459_reg;
reg [31:0] main_preheaderi_460;
reg [31:0] main_preheaderi_460_reg;
reg [31:0] main_preheaderi_461;
reg [31:0] main_preheaderi_461_reg;
reg [31:0] main_preheaderi_462;
reg [31:0] main_preheaderi_462_reg;
reg [31:0] main_preheaderi_463;
reg [31:0] main_preheaderi_463_reg;
reg [31:0] main_preheaderi_464;
reg [31:0] main_preheaderi_464_reg;
reg [31:0] main_preheaderi_465;
reg [31:0] main_preheaderi_465_reg;
reg  main_preheaderi_466;
reg  main_preheaderi_466_reg;
reg [31:0] main_preheaderi_467;
reg [31:0] main_preheaderi_467_reg;
reg [31:0] main_preheaderi_1ii;
reg [31:0] main_preheaderi_1ii_reg;
reg [31:0] main_preheaderi_468;
reg [31:0] main_preheaderi_468_reg;
reg [31:0] main_preheaderi_469;
reg [31:0] main_preheaderi_469_reg;
reg [31:0] main_preheaderi_470;
reg [31:0] main_preheaderi_470_reg;
reg [31:0] main_preheaderi_471;
reg [31:0] main_preheaderi_471_reg;
reg [31:0] main_preheaderi_472;
reg [31:0] main_preheaderi_472_reg;
reg [31:0] main_preheaderi_473;
reg [31:0] main_preheaderi_473_reg;
reg [31:0] main_preheaderi_474;
reg [31:0] main_preheaderi_474_reg;
reg [31:0] main_preheaderi_wd40ii;
reg [31:0] main_preheaderi_wd40ii_reg;
reg [31:0] main_preheaderi_475;
reg [31:0] main_preheaderi_475_reg;
reg  main_preheaderi_476;
reg  main_preheaderi_476_reg;
reg [31:0] main_preheaderi_ii;
reg [31:0] main_preheaderi_ii_reg;
reg  main_preheaderi_477;
reg  main_preheaderi_477_reg;
reg [31:0] main_preheaderi_ii_var1;
reg [31:0] main_preheaderi_ii_var1_reg;
reg [31:0] main_preheaderi_478;
reg [31:0] main_preheaderi_478_reg;
reg [31:0] main_preheaderi_479;
reg [31:0] main_preheaderi_479_reg;
reg [31:0] main_preheaderi_480;
reg [31:0] main_preheaderi_480_reg;
reg [31:0] main_preheaderi_481;
reg [31:0] main_preheaderi_481_reg;
reg [31:0] main_preheaderi_482;
reg [31:0] main_preheaderi_482_reg;
reg [31:0] main_preheaderi_apl10ii;
reg [31:0] main_preheaderi_apl10ii_reg;
reg [31:0] main_preheaderi_483;
reg [31:0] main_preheaderi_483_reg;
reg  main_preheaderi_484;
reg  main_preheaderi_484_reg;
reg [31:0] main_preheaderi_apl10ii_var2;
reg [31:0] main_preheaderi_apl10ii_var2_reg;
reg [31:0] main_preheaderi_485;
reg [31:0] main_preheaderi_485_reg;
reg  main_preheaderi_486;
reg  main_preheaderi_486_reg;
reg [31:0] main_preheaderi_apl12ii;
reg [31:0] main_preheaderi_apl12ii_reg;
reg [31:0] main_preheaderi_487;
reg [31:0] main_preheaderi_487_reg;
reg [31:0] main_preheaderi_488;
reg [31:0] main_preheaderi_488_reg;
reg [31:0] main_preheaderi_489;
reg [31:0] main_preheaderi_489_reg;
reg [31:0] main_preheaderi_490;
reg [31:0] main_preheaderi_490_reg;
reg [31:0] main_preheaderi_491;
reg [31:0] main_preheaderi_491_reg;
reg [31:0] main_preheaderi_492;
reg [31:0] main_preheaderi_492_reg;
reg [31:0] main_preheaderi_493;
reg [31:0] main_preheaderi_493_reg;
reg [31:0] main_preheaderi_494;
reg [31:0] main_preheaderi_494_reg;
reg [31:0] main_preheaderi_495;
reg [31:0] main_preheaderi_495_reg;
reg [31:0] main_preheaderi_496;
reg [31:0] main_preheaderi_496_reg;
reg [31:0] main_preheaderi_497;
reg [31:0] main_preheaderi_497_reg;
reg [31:0] main_preheaderi_498;
reg [31:0] main_preheaderi_498_reg;
reg [31:0] main_preheaderi_499;
reg [31:0] main_preheaderi_499_reg;
reg [31:0] main_preheaderi_500;
reg [31:0] main_preheaderi_500_reg;
reg [31:0] main_preheaderi_501;
reg [31:0] main_preheaderi_501_reg;
reg [31:0] main_preheaderi_502;
reg [31:0] main_preheaderi_502_reg;
reg [31:0] main_preheaderi_503;
reg [31:0] main_preheaderi_503_reg;
reg [31:0] main_preheaderi_504;
reg [31:0] main_preheaderi_504_reg;
reg [31:0] main_preheaderi_505;
reg [31:0] main_preheaderi_505_reg;
reg [31:0] main_preheaderi_506;
reg [31:0] main_preheaderi_506_reg;
reg [31:0] main_preheaderi_507;
reg [31:0] main_preheaderi_507_reg;
reg [31:0] main_preheaderi_508;
reg [31:0] main_preheaderi_508_reg;
reg [31:0] main_preheaderi_509;
reg [31:0] main_preheaderi_509_reg;
reg [31:0] main_preheaderi_510;
reg [31:0] main_preheaderi_510_reg;
reg [31:0] main_preheaderi_511;
reg [31:0] main_preheaderi_511_reg;
reg [31:0] main_preheaderi_512;
reg [31:0] main_preheaderi_512_reg;
reg [31:0] main_preheaderi_513;
reg [31:0] main_preheaderi_513_reg;
reg [31:0] main_preheaderi_514;
reg [31:0] main_preheaderi_514_reg;
reg [31:0] main_preheaderi_515;
reg [31:0] main_preheaderi_515_reg;
reg [31:0] main_preheaderi_516;
reg [31:0] main_preheaderi_516_reg;
reg [31:0] main_preheaderi_517;
reg [31:0] main_preheaderi_517_reg;
reg [31:0] main_preheaderi_518;
reg [31:0] main_preheaderi_518_reg;
reg [31:0] main_preheaderi_519;
reg [31:0] main_preheaderi_519_reg;
reg [31:0] main_preheaderi_520;
reg [31:0] main_preheaderi_520_reg;
reg [31:0] main_preheaderi_521;
reg [31:0] main_preheaderi_521_reg;
reg [31:0] main_preheaderi_522;
reg [31:0] main_preheaderi_522_reg;
reg [31:0] main_preheaderi_523;
reg [31:0] main_preheaderi_523_reg;
reg [31:0] main_preheaderi_524;
reg [31:0] main_preheaderi_524_reg;
reg [31:0] main_preheaderi_525;
reg [31:0] main_preheaderi_525_reg;
reg [31:0] main_preheaderi_526;
reg [31:0] main_preheaderi_526_reg;
reg [31:0] main_preheaderi_527;
reg [31:0] main_preheaderi_527_reg;
reg [31:0] main_preheaderi_528;
reg [31:0] main_preheaderi_528_reg;
reg [31:0] main_preheaderi_529;
reg [31:0] main_preheaderi_529_reg;
reg [31:0] main_preheaderi_530;
reg [31:0] main_preheaderi_530_reg;
reg [31:0] main_preheaderi_531;
reg [31:0] main_preheaderi_531_reg;
reg [31:0] main_preheaderi_532;
reg [31:0] main_preheaderi_532_reg;
reg [31:0] main_preheaderi_533;
reg [31:0] main_preheaderi_533_reg;
reg [31:0] main_preheaderi_534;
reg [31:0] main_preheaderi_534_reg;
reg [31:0] main_preheaderi_535;
reg [31:0] main_preheaderi_535_reg;
reg [31:0] main_preheaderi_536;
reg [31:0] main_preheaderi_536_reg;
reg [31:0] main_preheaderi_537;
reg [31:0] main_preheaderi_537_reg;
reg [31:0] main_preheaderi_indvarnext;
reg [31:0] main_preheaderi_indvarnext_reg;
reg  main_preheaderi_exitcond5;
reg  main_preheaderi_exitcond5_reg;
reg [31:0] main_adpcm_mainexit_main_result04;
reg [31:0] main_adpcm_mainexit_main_result04_reg;
reg [31:0] main_adpcm_mainexit_i03;
reg [31:0] main_adpcm_mainexit_i03_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_scevgep3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_scevgep3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_scevgep4_reg;
reg [31:0] main_adpcm_mainexit_538;
reg [31:0] main_adpcm_mainexit_538_reg;
reg [31:0] main_adpcm_mainexit_539;
reg [31:0] main_adpcm_mainexit_539_reg;
reg  main_adpcm_mainexit_540;
reg  main_adpcm_mainexit_540_reg;
reg [31:0] main_adpcm_mainexit_541;
reg [31:0] main_adpcm_mainexit_541_reg;
reg [31:0] main_adpcm_mainexit_main_result0;
reg [31:0] main_adpcm_mainexit_main_result0_reg;
reg [31:0] main_adpcm_mainexit_542;
reg [31:0] main_adpcm_mainexit_542_reg;
reg  main_adpcm_mainexit_exitcond;
reg  main_adpcm_mainexit_exitcond_reg;
reg [31:0] main_preheader_main_result22;
reg [31:0] main_preheader_main_result22_reg;
reg [31:0] main_preheader_i11;
reg [31:0] main_preheader_i11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep2_reg;
reg [31:0] main_preheader_543;
reg [31:0] main_preheader_543_reg;
reg [31:0] main_preheader_544;
reg [31:0] main_preheader_544_reg;
reg  main_preheader_545;
reg  main_preheader_545_reg;
reg [31:0] main_preheader_546;
reg [31:0] main_preheader_546_reg;
reg [31:0] main_preheader_main_result2;
reg [31:0] main_preheader_main_result2_reg;
reg [31:0] main_preheader_547;
reg [31:0] main_preheader_547_reg;
reg  main_preheader_exitcond1;
reg  main_preheader_exitcond1_reg;
reg  main_548_550;
reg  main_548_550_reg;
reg [3:0] qq4_code4_table_address_a;
reg  qq4_code4_table_write_enable_a;
wire [31:0] qq4_code4_table_in_a;
wire [31:0] qq4_code4_table_out_a;
wire [3:0] qq4_code4_table_address_b;
wire  qq4_code4_table_write_enable_b;
wire [31:0] qq4_code4_table_in_b;
wire [31:0] qq4_code4_table_out_b;
reg [5:0] qq6_code6_table_address_a;
reg  qq6_code6_table_write_enable_a;
wire [31:0] qq6_code6_table_in_a;
wire [31:0] qq6_code6_table_out_a;
wire [5:0] qq6_code6_table_address_b;
wire  qq6_code6_table_write_enable_b;
wire [31:0] qq6_code6_table_in_b;
wire [31:0] qq6_code6_table_out_b;
reg [3:0] wl_code_table_address_a;
reg  wl_code_table_write_enable_a;
wire [31:0] wl_code_table_in_a;
wire [31:0] wl_code_table_out_a;
wire [3:0] wl_code_table_address_b;
wire  wl_code_table_write_enable_b;
wire [31:0] wl_code_table_in_b;
wire [31:0] wl_code_table_out_b;
reg [4:0] ilb_table_address_a;
reg  ilb_table_write_enable_a;
wire [31:0] ilb_table_in_a;
wire [31:0] ilb_table_out_a;
wire [4:0] ilb_table_address_b;
wire  ilb_table_write_enable_b;
wire [31:0] ilb_table_in_b;
wire [31:0] ilb_table_out_b;
reg [4:0] decis_levl_address_a;
reg  decis_levl_write_enable_a;
wire [31:0] decis_levl_in_a;
wire [31:0] decis_levl_out_a;
wire [4:0] decis_levl_address_b;
wire  decis_levl_write_enable_b;
wire [31:0] decis_levl_in_b;
wire [31:0] decis_levl_out_b;
wire [4:0] rom_32_address_a;
wire  rom_32_write_enable_a;
wire [31:0] rom_32_in_a;
wire [31:0] rom_32_out_a;
wire [4:0] rom_32_address_b;
wire  rom_32_write_enable_b;
wire [31:0] rom_32_in_b;
wire [31:0] rom_32_out_b;
reg [1:0] qq2_code2_table_address_a;
reg  qq2_code2_table_write_enable_a;
wire [31:0] qq2_code2_table_in_a;
wire [31:0] qq2_code2_table_out_a;
wire [1:0] qq2_code2_table_address_b;
wire  qq2_code2_table_write_enable_b;
wire [31:0] qq2_code2_table_in_b;
wire [31:0] qq2_code2_table_out_b;
reg [1:0] wh_code_table_address_a;
reg  wh_code_table_write_enable_a;
wire [31:0] wh_code_table_in_a;
wire [31:0] wh_code_table_out_a;
wire [1:0] wh_code_table_address_b;
wire  wh_code_table_write_enable_b;
wire [31:0] wh_code_table_in_b;
wire [31:0] wh_code_table_out_b;
reg [4:0] tqmf_address_a;
reg  tqmf_write_enable_a;
reg [31:0] tqmf_in_a;
wire [31:0] tqmf_out_a;
reg [4:0] tqmf_address_b;
reg  tqmf_write_enable_b;
reg [31:0] tqmf_in_b;
wire [31:0] tqmf_out_b;
wire [2:0] ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire [2:0] ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
reg [6:0] test_data_address_a;
reg  test_data_write_enable_a;
wire [31:0] test_data_in_a;
wire [31:0] test_data_out_a;
reg [6:0] test_data_address_b;
reg  test_data_write_enable_b;
wire [31:0] test_data_in_b;
wire [31:0] test_data_out_b;
reg [6:0] test_compressed_address_a;
reg  test_compressed_write_enable_a;
wire [31:0] test_compressed_in_a;
wire [31:0] test_compressed_out_a;
wire [6:0] test_compressed_address_b;
wire  test_compressed_write_enable_b;
wire [31:0] test_compressed_in_b;
wire [31:0] test_compressed_out_b;
reg [6:0] test_result_address_a;
reg  test_result_write_enable_a;
wire [31:0] test_result_in_a;
wire [31:0] test_result_out_a;
wire [6:0] test_result_address_b;
wire  test_result_write_enable_b;
wire [31:0] test_result_in_b;
wire [31:0] test_result_out_b;
reg [6:0] compressed_address_a;
reg  compressed_write_enable_a;
reg [31:0] compressed_in_a;
wire [31:0] compressed_out_a;
wire [6:0] compressed_address_b;
wire  compressed_write_enable_b;
wire [31:0] compressed_in_b;
wire [31:0] compressed_out_b;
reg [6:0] result_address_a;
reg  result_write_enable_a;
reg [31:0] result_in_a;
wire [31:0] result_out_a;
reg [6:0] result_address_b;
reg  result_write_enable_b;
reg [31:0] result_in_b;
wire [31:0] result_out_b;
reg  upzero_start;
reg [31:0] upzero_arg_dlt;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_arg_dlti;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_arg_bli;
reg  upzero_finish_final;
reg  upzero_finish_reg;
wire  upzero_finish;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;
reg [31:0] main_signed_divide_32_0_op0;
reg [31:0] main_signed_divide_32_0_op1;
wire [31:0] lpm_divide_main_preheaderi_295_temp_out;
wire [31:0] main_preheaderi_295_unused;
reg  lpm_divide_main_preheaderi_295_en;
reg [31:0] lpm_divide_main_preheaderi_295_out;
reg [31:0] main_signed_divide_32_0;
reg  lpm_mult_main_legup_memset_4_i64exit_34_en;
reg [31:0] main_legup_memset_4_i64exit_34_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_35_en;
reg [31:0] main_legup_memset_4_i64exit_35_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_36_en;
reg [31:0] main_legup_memset_4_i64exit_36_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_38_en;
reg [31:0] main_legup_memset_4_i64exit_38_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_40_en;
reg [31:0] main_legup_memset_4_i64exit_40_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_42_en;
reg [31:0] main_legup_memset_4_i64exit_42_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_46_en;
reg [31:0] main_legup_memset_4_i64exit_46_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_48_en;
reg [31:0] main_legup_memset_4_i64exit_48_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_50_en;
reg [31:0] main_legup_memset_4_i64exit_50_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_52_en;
reg [31:0] main_legup_memset_4_i64exit_52_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_54_en;
reg [31:0] main_legup_memset_4_i64exit_54_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_56_en;
reg [31:0] main_legup_memset_4_i64exit_56_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_58_en;
reg [31:0] main_legup_memset_4_i64exit_58_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_60_en;
reg [31:0] main_legup_memset_4_i64exit_60_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_62_en;
reg [31:0] main_legup_memset_4_i64exit_62_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_64_en;
reg [31:0] main_legup_memset_4_i64exit_64_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_68_en;
reg [31:0] main_legup_memset_4_i64exit_68_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_70_en;
reg [31:0] main_legup_memset_4_i64exit_70_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_72_en;
reg [31:0] main_legup_memset_4_i64exit_72_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_74_en;
reg [31:0] main_legup_memset_4_i64exit_74_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_127_en;
reg [31:0] main_legup_memset_4_i64exit_127_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_84_en;
reg [31:0] main_legup_memset_4_i64exit_84_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_87_en;
reg [31:0] main_legup_memset_4_i64exit_87_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_91_en;
reg [31:0] main_legup_memset_4_i64exit_91_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_95_en;
reg [31:0] main_legup_memset_4_i64exit_95_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_99_en;
reg [31:0] main_legup_memset_4_i64exit_99_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_103_en;
reg [31:0] main_legup_memset_4_i64exit_103_stage0_reg;
reg  lpm_mult_main_136_140_en;
reg [31:0] main_136_140_stage0_reg;
reg  lpm_mult_main_quantlexiti_167_en;
reg [31:0] main_quantlexiti_167_stage0_reg;
reg  lpm_mult_main_quantlexiti_172_en;
reg [31:0] main_quantlexiti_172_stage0_reg;
reg  lpm_mult_main_quantlexiti_225_en;
reg [31:0] main_quantlexiti_225_stage0_reg;
reg  lpm_mult_main_quantlexiti_231_en;
reg [31:0] main_quantlexiti_231_stage0_reg;
reg  lpm_mult_main_quantlexiti_262_en;
reg [31:0] main_quantlexiti_262_stage0_reg;
reg  lpm_mult_main_quantlexiti_267_en;
reg [31:0] main_quantlexiti_267_stage0_reg;
reg  lpm_divide_main_quantlexiti_277_en;
reg  lpm_mult_main_quantlexiti_146_en;
reg [31:0] main_quantlexiti_146_stage0_reg;
reg  lpm_mult_main_quantlexiti_159_en;
reg [31:0] main_quantlexiti_159_stage0_reg;
reg  lpm_mult_main_quantlexiti_163_en;
reg [31:0] main_quantlexiti_163_stage0_reg;
reg  lpm_mult_main_quantlexiti_182_en;
reg [31:0] main_quantlexiti_182_stage0_reg;
reg  lpm_mult_main_quantlexiti_185_en;
reg [31:0] main_quantlexiti_185_stage0_reg;
reg  lpm_mult_main_quantlexiti_189_en;
reg [31:0] main_quantlexiti_189_stage0_reg;
reg  lpm_mult_main_quantlexiti_193_en;
reg [31:0] main_quantlexiti_193_stage0_reg;
reg  lpm_mult_main_quantlexiti_197_en;
reg [31:0] main_quantlexiti_197_stage0_reg;
reg  lpm_mult_main_quantlexiti_201_en;
reg [31:0] main_quantlexiti_201_stage0_reg;
reg  lpm_mult_main_quantlexiti_241_en;
reg [31:0] main_quantlexiti_241_stage0_reg;
reg  lpm_mult_main_quantlexiti_254_en;
reg [31:0] main_quantlexiti_254_stage0_reg;
reg  lpm_mult_main_quantlexiti_258_en;
reg [31:0] main_quantlexiti_258_stage0_reg;
reg  lpm_mult_main_encodeexit_crit_edge_phitmp2_en;
reg [31:0] main_encodeexit_crit_edge_phitmp2_stage0_reg;
reg  lpm_mult_main_encodeexit_crit_edge_phitmp4_en;
reg [31:0] main_encodeexit_crit_edge_phitmp4_stage0_reg;
reg  lpm_mult_main_encodeexit_crit_edge_phitmp_en;
reg [31:0] main_encodeexit_crit_edge_phitmp_stage0_reg;
reg  lpm_mult_main_encodeexit_crit_edge_phitmp1_en;
reg [31:0] main_encodeexit_crit_edge_phitmp1_stage0_reg;
reg  lpm_mult_main_preheaderi_344_en;
reg [31:0] main_preheaderi_344_stage0_reg;
reg  lpm_mult_main_preheaderi_353_en;
reg [31:0] main_preheaderi_353_stage0_reg;
reg  lpm_mult_main_preheaderi_356_en;
reg [31:0] main_preheaderi_356_stage0_reg;
reg  lpm_mult_main_preheaderi_381_en;
reg [31:0] main_preheaderi_381_stage0_reg;
reg  lpm_mult_main_preheaderi_386_en;
reg [31:0] main_preheaderi_386_stage0_reg;
reg  lpm_mult_main_preheaderi_441_en;
reg [31:0] main_preheaderi_441_stage0_reg;
reg  lpm_mult_main_preheaderi_448_en;
reg [31:0] main_preheaderi_448_stage0_reg;
reg  lpm_mult_main_preheaderi_473_en;
reg [31:0] main_preheaderi_473_stage0_reg;
reg  lpm_mult_main_preheaderi_478_en;
reg [31:0] main_preheaderi_478_stage0_reg;
reg  lpm_mult_main_preheaderi_492_en;
reg [31:0] main_preheaderi_492_stage0_reg;
reg  lpm_mult_main_preheaderi_494_en;
reg [31:0] main_preheaderi_494_stage0_reg;
reg  lpm_mult_main_preheaderi_496_en;
reg [31:0] main_preheaderi_496_stage0_reg;
reg  lpm_mult_main_preheaderi_498_en;
reg [31:0] main_preheaderi_498_stage0_reg;
reg  lpm_mult_main_preheaderi_502_en;
reg [31:0] main_preheaderi_502_stage0_reg;
reg  lpm_mult_main_preheaderi_504_en;
reg [31:0] main_preheaderi_504_stage0_reg;
reg  lpm_mult_main_preheaderi_506_en;
reg [31:0] main_preheaderi_506_stage0_reg;
reg  lpm_mult_main_preheaderi_508_en;
reg [31:0] main_preheaderi_508_stage0_reg;
reg  lpm_mult_main_preheaderi_510_en;
reg [31:0] main_preheaderi_510_stage0_reg;
reg  lpm_mult_main_preheaderi_512_en;
reg [31:0] main_preheaderi_512_stage0_reg;
reg  lpm_mult_main_preheaderi_514_en;
reg [31:0] main_preheaderi_514_stage0_reg;
reg  lpm_mult_main_preheaderi_516_en;
reg [31:0] main_preheaderi_516_stage0_reg;
reg  lpm_mult_main_preheaderi_518_en;
reg [31:0] main_preheaderi_518_stage0_reg;
reg  lpm_mult_main_preheaderi_520_en;
reg [31:0] main_preheaderi_520_stage0_reg;
reg  lpm_mult_main_preheaderi_524_en;
reg [31:0] main_preheaderi_524_stage0_reg;
reg  lpm_mult_main_preheaderi_526_en;
reg [31:0] main_preheaderi_526_stage0_reg;
reg  lpm_mult_main_preheaderi_528_en;
reg [31:0] main_preheaderi_528_stage0_reg;
reg  lpm_mult_main_preheaderi_530_en;
reg [31:0] main_preheaderi_530_stage0_reg;
reg  lpm_mult_main_preheaderi_532_en;
reg [31:0] main_preheaderi_532_stage0_reg;
reg  lpm_mult_main_preheaderi_534_en;
reg [31:0] main_preheaderi_534_stage0_reg;
reg  lpm_mult_main_preheaderi_301_en;
reg [31:0] main_preheaderi_301_stage0_reg;
reg  lpm_mult_main_preheaderi_304_en;
reg [31:0] main_preheaderi_304_stage0_reg;
reg  lpm_mult_main_preheaderi_308_en;
reg [31:0] main_preheaderi_308_stage0_reg;
reg  lpm_mult_main_preheaderi_312_en;
reg [31:0] main_preheaderi_312_stage0_reg;
reg  lpm_mult_main_preheaderi_316_en;
reg [31:0] main_preheaderi_316_stage0_reg;
reg  lpm_mult_main_preheaderi_320_en;
reg [31:0] main_preheaderi_320_stage0_reg;
reg  lpm_mult_main_preheaderi_351_en;
reg [31:0] main_preheaderi_351_stage0_reg;
reg  lpm_mult_main_preheaderi_373_en;
reg [31:0] main_preheaderi_373_stage0_reg;
reg  lpm_mult_main_preheaderi_377_en;
reg [31:0] main_preheaderi_377_stage0_reg;
reg  lpm_mult_main_preheaderi_446_en;
reg [31:0] main_preheaderi_446_stage0_reg;
reg  lpm_mult_main_preheaderi_398_en;
reg [31:0] main_preheaderi_398_stage0_reg;
reg  lpm_mult_main_preheaderi_401_en;
reg [31:0] main_preheaderi_401_stage0_reg;
reg  lpm_mult_main_preheaderi_405_en;
reg [31:0] main_preheaderi_405_stage0_reg;
reg  lpm_mult_main_preheaderi_409_en;
reg [31:0] main_preheaderi_409_stage0_reg;
reg  lpm_mult_main_preheaderi_413_en;
reg [31:0] main_preheaderi_413_stage0_reg;
reg  lpm_mult_main_preheaderi_417_en;
reg [31:0] main_preheaderi_417_stage0_reg;
reg  lpm_mult_main_preheaderi_465_en;
reg [31:0] main_preheaderi_465_stage0_reg;
reg  lpm_mult_main_preheaderi_469_en;
reg [31:0] main_preheaderi_469_stage0_reg;
reg  lpm_mult_main_preheaderi_490_en;
reg [31:0] main_preheaderi_490_stage0_reg;
reg  lpm_mult_main_preheaderi_491_en;
reg [31:0] main_preheaderi_491_stage0_reg;

/*   %295 = sdiv i32 %i.11.i, 2*/
lpm_divide lpm_divide_main_preheaderi_295 (
	.quotient (lpm_divide_main_preheaderi_295_temp_out),
	.remain (main_preheaderi_295_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_preheaderi_295_en),
	.numer (main_signed_divide_32_0_op0),
	.denom (main_signed_divide_32_0_op1)
);

defparam
	lpm_divide_main_preheaderi_295.lpm_pipeline = 32,
	lpm_divide_main_preheaderi_295.lpm_widthn = 32,
	lpm_divide_main_preheaderi_295.lpm_widthd = 32,
	lpm_divide_main_preheaderi_295.lpm_drepresentation = "SIGNED",
	lpm_divide_main_preheaderi_295.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_preheaderi_295.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


upzero upzero (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (upzero_start),
	.finish (upzero_finish),
	.arg_dlt (upzero_arg_dlt),
	.arg_dlti (upzero_arg_dlti),
	.arg_bli (upzero_arg_bli)
);

defparam
	upzero.tag_offset = tag_offset;

// Local Rams


// @qq4_code4_table = internal unnamed_addr constant [16 x i32] [i32 0, i32 -20456, i32 -12896, i32 -8968, i32 -6288, i32 -4240, i32 -2584, i32 -1200, i32 20456, i32 12896, i32 8968, i32 6288, i32 4240, ...
rom_dual_port qq4_code4_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( qq4_code4_table_address_a ),
	.address_b( qq4_code4_table_address_b ),
	.q_a( qq4_code4_table_out_a ),
	.q_b( qq4_code4_table_out_b)
);
defparam qq4_code4_table.width_a = 32;
defparam qq4_code4_table.width_b = 32;
defparam qq4_code4_table.widthad_a = 4;
defparam qq4_code4_table.widthad_b = 4;
defparam qq4_code4_table.numwords_a = 16;
defparam qq4_code4_table.numwords_b = 16;
defparam qq4_code4_table.latency = 1;
defparam qq4_code4_table.init_file = "qq4_code4_table.mif";


// @qq6_code6_table = internal unnamed_addr constant [64 x i32] [i32 -136, i32 -136, i32 -136, i32 -136, i32 -24808, i32 -21904, i32 -19008, i32 -16704, i32 -14984, i32 -13512, i32 -12280, i32 -11192, i3...
rom_dual_port qq6_code6_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( qq6_code6_table_address_a ),
	.address_b( qq6_code6_table_address_b ),
	.q_a( qq6_code6_table_out_a ),
	.q_b( qq6_code6_table_out_b)
);
defparam qq6_code6_table.width_a = 32;
defparam qq6_code6_table.width_b = 32;
defparam qq6_code6_table.widthad_a = 6;
defparam qq6_code6_table.widthad_b = 6;
defparam qq6_code6_table.numwords_a = 64;
defparam qq6_code6_table.numwords_b = 64;
defparam qq6_code6_table.latency = 1;
defparam qq6_code6_table.init_file = "qq6_code6_table.mif";


// @wl_code_table = internal unnamed_addr constant [16 x i32] [i32 -60, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32...
rom_dual_port wl_code_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( wl_code_table_address_a ),
	.address_b( wl_code_table_address_b ),
	.q_a( wl_code_table_out_a ),
	.q_b( wl_code_table_out_b)
);
defparam wl_code_table.width_a = 32;
defparam wl_code_table.width_b = 32;
defparam wl_code_table.widthad_a = 4;
defparam wl_code_table.widthad_b = 4;
defparam wl_code_table.numwords_a = 16;
defparam wl_code_table.numwords_b = 16;
defparam wl_code_table.latency = 1;
defparam wl_code_table.init_file = "wl_code_table.mif";


// @ilb_table = internal unnamed_addr constant [32 x i32] [i32 2048, i32 2093, i32 2139, i32 2186, i32 2233, i32 2282, i32 2332, i32 2383, i32 2435, i32 2489, i32 2543, i32 2599, i32 2656, i32 2714, i32 ...
rom_dual_port ilb_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ilb_table_address_a ),
	.address_b( ilb_table_address_b ),
	.q_a( ilb_table_out_a ),
	.q_b( ilb_table_out_b)
);
defparam ilb_table.width_a = 32;
defparam ilb_table.width_b = 32;
defparam ilb_table.widthad_a = 5;
defparam ilb_table.widthad_b = 5;
defparam ilb_table.numwords_a = 32;
defparam ilb_table.numwords_b = 32;
defparam ilb_table.latency = 1;
defparam ilb_table.init_file = "ilb_table.mif";


// @decis_levl = internal unnamed_addr constant [30 x i32] [i32 280, i32 576, i32 880, i32 1200, i32 1520, i32 1864, i32 2208, i32 2584, i32 2960, i32 3376, i32 3784, i32 4240, i32 4696, i32 5200, i32 57...
rom_dual_port decis_levl (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( decis_levl_address_a ),
	.address_b( decis_levl_address_b ),
	.q_a( decis_levl_out_a ),
	.q_b( decis_levl_out_b)
);
defparam decis_levl.width_a = 32;
defparam decis_levl.width_b = 32;
defparam decis_levl.widthad_a = 5;
defparam decis_levl.widthad_b = 5;
defparam decis_levl.numwords_a = 30;
defparam decis_levl.numwords_b = 30;
defparam decis_levl.latency = 1;
defparam decis_levl.init_file = "decis_levl.mif";


// @qq2_code2_table = internal unnamed_addr constant [4 x i32] [i32 -7408, i32 -1616, i32 7408, i32 1616], align 4
rom_dual_port qq2_code2_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( qq2_code2_table_address_a ),
	.address_b( qq2_code2_table_address_b ),
	.q_a( qq2_code2_table_out_a ),
	.q_b( qq2_code2_table_out_b)
);
defparam qq2_code2_table.width_a = 32;
defparam qq2_code2_table.width_b = 32;
defparam qq2_code2_table.widthad_a = 2;
defparam qq2_code2_table.widthad_b = 2;
defparam qq2_code2_table.numwords_a = 4;
defparam qq2_code2_table.numwords_b = 4;
defparam qq2_code2_table.latency = 1;
defparam qq2_code2_table.init_file = "qq2_code2_table.mif";


// @wh_code_table = internal unnamed_addr constant [4 x i32] [i32 798, i32 -214, i32 798, i32 -214], align 4
rom_dual_port wh_code_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( wh_code_table_address_a ),
	.address_b( wh_code_table_address_b ),
	.q_a( wh_code_table_out_a ),
	.q_b( wh_code_table_out_b)
);
defparam wh_code_table.width_a = 32;
defparam wh_code_table.width_b = 32;
defparam wh_code_table.widthad_a = 2;
defparam wh_code_table.widthad_b = 2;
defparam wh_code_table.numwords_a = 4;
defparam wh_code_table.numwords_b = 4;
defparam wh_code_table.latency = 1;
defparam wh_code_table.init_file = "wh_code_table.mif";


// @tqmf = internal unnamed_addr global [24 x i32] zeroinitializer, align 4
ram_dual_port tqmf (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( tqmf_address_a ),
	.address_b( tqmf_address_b ),
	.wren_a( tqmf_write_enable_a ),
	.wren_b( tqmf_write_enable_b ),
	.data_a( tqmf_in_a ),
	.data_b( tqmf_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( tqmf_out_a ),
	.q_b( tqmf_out_b)
);
defparam tqmf.width_a = 32;
defparam tqmf.width_b = 32;
defparam tqmf.widthad_a = 5;
defparam tqmf.widthad_b = 5;
defparam tqmf.width_be_a = 1;
defparam tqmf.width_be_b = 1;
defparam tqmf.numwords_a = 24;
defparam tqmf.numwords_b = 24;
defparam tqmf.latency = 1;
defparam tqmf.init_file = "tqmf.mif";


// @test_data = internal unnamed_addr constant [100 x i32] [i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 67,...
rom_dual_port test_data (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_data_address_a ),
	.address_b( test_data_address_b ),
	.q_a( test_data_out_a ),
	.q_b( test_data_out_b)
);
defparam test_data.width_a = 32;
defparam test_data.width_b = 32;
defparam test_data.widthad_a = 7;
defparam test_data.widthad_b = 7;
defparam test_data.numwords_a = 100;
defparam test_data.numwords_b = 100;
defparam test_data.latency = 1;
defparam test_data.init_file = "test_data.mif";


// @test_compressed = internal unnamed_addr constant [100 x i32] [i32 253, i32 222, i32 119, i32 186, i32 244, i32 146, i32 32, i32 160, i32 236, i32 237, i32 238, i32 240, i32 241, i32 241, i32 242, i32...
rom_dual_port test_compressed (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_compressed_address_a ),
	.address_b( test_compressed_address_b ),
	.q_a( test_compressed_out_a ),
	.q_b( test_compressed_out_b)
);
defparam test_compressed.width_a = 32;
defparam test_compressed.width_b = 32;
defparam test_compressed.widthad_a = 7;
defparam test_compressed.widthad_b = 7;
defparam test_compressed.numwords_a = 100;
defparam test_compressed.numwords_b = 100;
defparam test_compressed.latency = 1;
defparam test_compressed.init_file = "test_compressed.mif";


// @test_result = internal unnamed_addr constant [100 x i32] [i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 1, i32 1, i32 0, i32 -2, i32 -1, i32 -2, i32 0, ...
rom_dual_port test_result (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_result_address_a ),
	.address_b( test_result_address_b ),
	.q_a( test_result_out_a ),
	.q_b( test_result_out_b)
);
defparam test_result.width_a = 32;
defparam test_result.width_b = 32;
defparam test_result.widthad_a = 7;
defparam test_result.widthad_b = 7;
defparam test_result.numwords_a = 100;
defparam test_result.numwords_b = 100;
defparam test_result.latency = 1;
defparam test_result.init_file = "test_result.mif";


// @compressed = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
ram_dual_port compressed (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( compressed_address_a ),
	.address_b( compressed_address_b ),
	.wren_a( compressed_write_enable_a ),
	.wren_b( compressed_write_enable_b ),
	.data_a( compressed_in_a ),
	.data_b( compressed_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( compressed_out_a ),
	.q_b( compressed_out_b)
);
defparam compressed.width_a = 32;
defparam compressed.width_b = 32;
defparam compressed.widthad_a = 7;
defparam compressed.widthad_b = 7;
defparam compressed.width_be_a = 1;
defparam compressed.width_be_b = 1;
defparam compressed.numwords_a = 100;
defparam compressed.numwords_b = 100;
defparam compressed.latency = 1;
defparam compressed.init_file = "compressed.mif";


// @result = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
ram_dual_port result (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( result_address_a ),
	.address_b( result_address_b ),
	.wren_a( result_write_enable_a ),
	.wren_b( result_write_enable_b ),
	.data_a( result_in_a ),
	.data_b( result_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( result_out_a ),
	.q_b( result_out_b)
);
defparam result.width_a = 32;
defparam result.width_b = 32;
defparam result.widthad_a = 7;
defparam result.widthad_b = 7;
defparam result.width_be_a = 1;
defparam result.width_be_b = 1;
defparam result.numwords_a = 100;
defparam result.numwords_b = 100;
defparam result.latency = 1;
defparam result.init_file = "result.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %548*/
	/*   %549 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str, i32 0, i32 0), i32 %.main_result.2) #2*/
	if ((cur_state == LEGUP_F_main_BB__548_160)) begin
		$write("Result: %d\n", $signed(main_preheader_main_result2_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_preheader_main_result2_reg) === 1'bX) finish <= 0;
	end
	/* main: %551*/
	/*   %552 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__551_161)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %553*/
	/*   %554 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__553_162)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__0_2;
LEGUP_F_main_BB__0_10:
		next_state = LEGUP_F_main_BB__0_11;
LEGUP_F_main_BB__0_11:
		next_state = LEGUP_F_main_BB__0_12;
LEGUP_F_main_BB__0_12:
		next_state = LEGUP_F_main_BB__0_13;
LEGUP_F_main_BB__0_13:
		next_state = LEGUP_F_main_BB__0_14;
LEGUP_F_main_BB__0_14:
		next_state = LEGUP_F_main_BB__0_15;
LEGUP_F_main_BB__0_15:
		next_state = LEGUP_F_main_BB__0_16;
LEGUP_F_main_BB__0_16:
		next_state = LEGUP_F_main_BB__0_17;
LEGUP_F_main_BB__0_17:
		next_state = LEGUP_F_main_BB__0_18;
LEGUP_F_main_BB__0_18:
		next_state = LEGUP_F_main_BB__0_19;
LEGUP_F_main_BB__0_19:
		next_state = LEGUP_F_main_BB__0_20;
LEGUP_F_main_BB__0_2:
		next_state = LEGUP_F_main_BB__0_3;
LEGUP_F_main_BB__0_20:
		next_state = LEGUP_F_main_BB__0_21;
LEGUP_F_main_BB__0_21:
		next_state = LEGUP_F_main_BB__0_22;
LEGUP_F_main_BB__0_22:
		next_state = LEGUP_F_main_BB__0_23;
LEGUP_F_main_BB__0_23:
		next_state = LEGUP_F_main_BB__0_24;
LEGUP_F_main_BB__0_24:
		next_state = LEGUP_F_main_BB__0_25;
LEGUP_F_main_BB__0_25:
		next_state = LEGUP_F_main_BB__1_26;
LEGUP_F_main_BB__0_3:
		next_state = LEGUP_F_main_BB__0_4;
LEGUP_F_main_BB__0_4:
		next_state = LEGUP_F_main_BB__0_5;
LEGUP_F_main_BB__0_5:
		next_state = LEGUP_F_main_BB__0_6;
LEGUP_F_main_BB__0_6:
		next_state = LEGUP_F_main_BB__0_7;
LEGUP_F_main_BB__0_7:
		next_state = LEGUP_F_main_BB__0_8;
LEGUP_F_main_BB__0_8:
		next_state = LEGUP_F_main_BB__0_9;
LEGUP_F_main_BB__0_9:
		next_state = LEGUP_F_main_BB__0_10;
LEGUP_F_main_BB__133_43:
	if ((main_133_135 == 1'd1))
		next_state = LEGUP_F_main_BB__136_44;
	else if ((main_133_135 == 1'd0))
		next_state = LEGUP_F_main_BB_quantlexiti_47;
LEGUP_F_main_BB__136_44:
		next_state = LEGUP_F_main_BB__136_45;
LEGUP_F_main_BB__136_45:
		next_state = LEGUP_F_main_BB__136_46;
LEGUP_F_main_BB__136_46:
	if ((main_136_142 == 1'd1))
		next_state = LEGUP_F_main_BB__133_43;
	else if ((main_136_142 == 1'd0))
		next_state = LEGUP_F_main_BB_quantlexiti_47;
LEGUP_F_main_BB__1_26:
	if ((main_1_exitcond15 == 1'd1))
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27;
	else if ((main_1_exitcond15 == 1'd0))
		next_state = LEGUP_F_main_BB__2_28;
LEGUP_F_main_BB__2_28:
		next_state = LEGUP_F_main_BB__2_29;
LEGUP_F_main_BB__2_29:
		next_state = LEGUP_F_main_BB__1_26;
LEGUP_F_main_BB__548_160:
	if ((main_548_550 == 1'd1))
		next_state = LEGUP_F_main_BB__551_161;
	else if ((main_548_550 == 1'd0))
		next_state = LEGUP_F_main_BB__553_162;
LEGUP_F_main_BB__551_161:
		next_state = LEGUP_F_main_BB__555_163;
LEGUP_F_main_BB__553_162:
		next_state = LEGUP_F_main_BB__555_163;
LEGUP_F_main_BB__555_163:
		next_state = LEGUP_0;
LEGUP_F_main_BB_adpcm_mainexit_155:
		next_state = LEGUP_F_main_BB_adpcm_mainexit_156;
LEGUP_F_main_BB_adpcm_mainexit_156:
	if ((main_adpcm_mainexit_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderpreheader_157;
	else if ((main_adpcm_mainexit_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB_adpcm_mainexit_155;
LEGUP_F_main_BB_adpcm_mainexitpreheader_154:
		next_state = LEGUP_F_main_BB_adpcm_mainexit_155;
LEGUP_F_main_BB_encodeexit_crit_edge_83:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_84;
LEGUP_F_main_BB_encodeexit_crit_edge_84:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_85;
LEGUP_F_main_BB_encodeexit_crit_edge_85:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_86;
LEGUP_F_main_BB_encodeexit_crit_edge_86:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_87;
LEGUP_F_main_BB_encodeexit_crit_edge_87:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_88;
LEGUP_F_main_BB_encodeexit_crit_edge_88:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_89;
LEGUP_F_main_BB_encodeexit_crit_edge_89:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_90;
LEGUP_F_main_BB_encodeexit_crit_edge_90:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_91;
LEGUP_F_main_BB_encodeexit_crit_edge_91:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_92;
LEGUP_F_main_BB_encodeexit_crit_edge_92:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_93;
LEGUP_F_main_BB_encodeexit_crit_edge_93:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_94;
LEGUP_F_main_BB_encodeexit_crit_edge_94:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_95;
LEGUP_F_main_BB_encodeexit_crit_edge_95:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_96;
LEGUP_F_main_BB_encodeexit_crit_edge_96:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_30;
LEGUP_F_main_BB_legup_memset_4_i64exit_30:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_31;
LEGUP_F_main_BB_legup_memset_4_i64exit_31:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_32;
LEGUP_F_main_BB_legup_memset_4_i64exit_32:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_33;
LEGUP_F_main_BB_legup_memset_4_i64exit_33:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_34;
LEGUP_F_main_BB_legup_memset_4_i64exit_34:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_35;
LEGUP_F_main_BB_legup_memset_4_i64exit_35:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_36;
LEGUP_F_main_BB_legup_memset_4_i64exit_36:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_37;
LEGUP_F_main_BB_legup_memset_4_i64exit_37:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_38;
LEGUP_F_main_BB_legup_memset_4_i64exit_38:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_39;
LEGUP_F_main_BB_legup_memset_4_i64exit_39:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_40;
LEGUP_F_main_BB_legup_memset_4_i64exit_40:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_41;
LEGUP_F_main_BB_legup_memset_4_i64exit_41:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_42;
LEGUP_F_main_BB_legup_memset_4_i64exit_42:
		next_state = LEGUP_F_main_BB__136_44;
LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_30;
LEGUP_F_main_BB_preheader_158:
		next_state = LEGUP_F_main_BB_preheader_159;
LEGUP_F_main_BB_preheader_159:
	if ((main_preheader_exitcond1_reg == 1'd1))
		next_state = LEGUP_F_main_BB__548_160;
	else if ((main_preheader_exitcond1_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader_158;
LEGUP_F_main_BB_preheaderi_100:
		next_state = LEGUP_F_main_BB_preheaderi_101;
LEGUP_F_main_BB_preheaderi_101:
		next_state = LEGUP_F_main_BB_preheaderi_102;
LEGUP_F_main_BB_preheaderi_102:
		next_state = LEGUP_F_main_BB_preheaderi_103;
LEGUP_F_main_BB_preheaderi_103:
		next_state = LEGUP_F_main_BB_preheaderi_104;
LEGUP_F_main_BB_preheaderi_104:
		next_state = LEGUP_F_main_BB_preheaderi_105;
LEGUP_F_main_BB_preheaderi_105:
		next_state = LEGUP_F_main_BB_preheaderi_106;
LEGUP_F_main_BB_preheaderi_106:
		next_state = LEGUP_F_main_BB_preheaderi_107;
LEGUP_F_main_BB_preheaderi_107:
		next_state = LEGUP_F_main_BB_preheaderi_108;
LEGUP_F_main_BB_preheaderi_108:
		next_state = LEGUP_F_main_BB_preheaderi_109;
LEGUP_F_main_BB_preheaderi_109:
		next_state = LEGUP_F_main_BB_preheaderi_110;
LEGUP_F_main_BB_preheaderi_110:
		next_state = LEGUP_F_main_BB_preheaderi_111;
LEGUP_F_main_BB_preheaderi_111:
		next_state = LEGUP_F_main_BB_preheaderi_112;
LEGUP_F_main_BB_preheaderi_112:
		next_state = LEGUP_F_main_BB_preheaderi_113;
LEGUP_F_main_BB_preheaderi_113:
		next_state = LEGUP_F_main_BB_preheaderi_114;
LEGUP_F_main_BB_preheaderi_114:
		next_state = LEGUP_F_main_BB_preheaderi_115;
LEGUP_F_main_BB_preheaderi_115:
		next_state = LEGUP_F_main_BB_preheaderi_116;
LEGUP_F_main_BB_preheaderi_116:
		next_state = LEGUP_F_main_BB_preheaderi_117;
LEGUP_F_main_BB_preheaderi_117:
		next_state = LEGUP_F_main_BB_preheaderi_118;
LEGUP_F_main_BB_preheaderi_118:
		next_state = LEGUP_F_main_BB_preheaderi_119;
LEGUP_F_main_BB_preheaderi_119:
		next_state = LEGUP_F_main_BB_preheaderi_120;
LEGUP_F_main_BB_preheaderi_120:
		next_state = LEGUP_F_main_BB_preheaderi_121;
LEGUP_F_main_BB_preheaderi_121:
		next_state = LEGUP_F_main_BB_preheaderi_122;
LEGUP_F_main_BB_preheaderi_122:
		next_state = LEGUP_F_main_BB_preheaderi_123;
LEGUP_F_main_BB_preheaderi_123:
		next_state = LEGUP_F_main_BB_preheaderi_124;
LEGUP_F_main_BB_preheaderi_124:
		next_state = LEGUP_F_main_BB_preheaderi_125;
LEGUP_F_main_BB_preheaderi_125:
		next_state = LEGUP_F_main_BB_preheaderi_126;
LEGUP_F_main_BB_preheaderi_126:
		next_state = LEGUP_F_main_BB_preheaderi_127;
LEGUP_F_main_BB_preheaderi_127:
		next_state = LEGUP_F_main_BB_preheaderi_128;
LEGUP_F_main_BB_preheaderi_128:
		next_state = LEGUP_F_main_BB_preheaderi_129;
LEGUP_F_main_BB_preheaderi_129:
		next_state = LEGUP_F_main_BB_preheaderi_130;
LEGUP_F_main_BB_preheaderi_130:
		next_state = LEGUP_F_main_BB_preheaderi_131;
LEGUP_F_main_BB_preheaderi_131:
		next_state = LEGUP_F_main_BB_preheaderi_132;
LEGUP_F_main_BB_preheaderi_132:
		next_state = LEGUP_F_main_BB_preheaderi_133;
LEGUP_F_main_BB_preheaderi_133:
		next_state = LEGUP_F_main_BB_preheaderi_134;
LEGUP_F_main_BB_preheaderi_134:
		next_state = LEGUP_F_main_BB_preheaderi_135;
LEGUP_F_main_BB_preheaderi_135:
		next_state = LEGUP_function_call_136;
LEGUP_F_main_BB_preheaderi_137:
		next_state = LEGUP_F_main_BB_preheaderi_138;
LEGUP_F_main_BB_preheaderi_138:
		next_state = LEGUP_F_main_BB_preheaderi_139;
LEGUP_F_main_BB_preheaderi_139:
		next_state = LEGUP_F_main_BB_preheaderi_140;
LEGUP_F_main_BB_preheaderi_140:
		next_state = LEGUP_F_main_BB_preheaderi_141;
LEGUP_F_main_BB_preheaderi_141:
		next_state = LEGUP_F_main_BB_preheaderi_142;
LEGUP_F_main_BB_preheaderi_142:
		next_state = LEGUP_F_main_BB_preheaderi_143;
LEGUP_F_main_BB_preheaderi_143:
		next_state = LEGUP_F_main_BB_preheaderi_144;
LEGUP_F_main_BB_preheaderi_144:
		next_state = LEGUP_F_main_BB_preheaderi_145;
LEGUP_F_main_BB_preheaderi_145:
		next_state = LEGUP_F_main_BB_preheaderi_146;
LEGUP_F_main_BB_preheaderi_146:
		next_state = LEGUP_F_main_BB_preheaderi_147;
LEGUP_F_main_BB_preheaderi_147:
		next_state = LEGUP_F_main_BB_preheaderi_148;
LEGUP_F_main_BB_preheaderi_148:
		next_state = LEGUP_F_main_BB_preheaderi_149;
LEGUP_F_main_BB_preheaderi_149:
		next_state = LEGUP_function_call_150;
LEGUP_F_main_BB_preheaderi_151:
		next_state = LEGUP_F_main_BB_preheaderi_152;
LEGUP_F_main_BB_preheaderi_152:
		next_state = LEGUP_F_main_BB_preheaderi_153;
LEGUP_F_main_BB_preheaderi_153:
	if ((main_preheaderi_exitcond5_reg == 1'd1))
		next_state = LEGUP_F_main_BB_adpcm_mainexitpreheader_154;
	else if ((main_preheaderi_exitcond5_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderi_99;
LEGUP_F_main_BB_preheaderi_99:
		next_state = LEGUP_F_main_BB_preheaderi_100;
LEGUP_F_main_BB_preheaderipreheader_97:
		next_state = LEGUP_F_main_BB_preheaderipreheader_98;
LEGUP_F_main_BB_preheaderipreheader_98:
		next_state = LEGUP_F_main_BB_preheaderi_99;
LEGUP_F_main_BB_preheaderpreheader_157:
		next_state = LEGUP_F_main_BB_preheader_158;
LEGUP_F_main_BB_quantlexiti_47:
		next_state = LEGUP_F_main_BB_quantlexiti_48;
LEGUP_F_main_BB_quantlexiti_48:
		next_state = LEGUP_F_main_BB_quantlexiti_49;
LEGUP_F_main_BB_quantlexiti_49:
		next_state = LEGUP_F_main_BB_quantlexiti_50;
LEGUP_F_main_BB_quantlexiti_50:
		next_state = LEGUP_F_main_BB_quantlexiti_51;
LEGUP_F_main_BB_quantlexiti_51:
		next_state = LEGUP_F_main_BB_quantlexiti_52;
LEGUP_F_main_BB_quantlexiti_52:
		next_state = LEGUP_F_main_BB_quantlexiti_53;
LEGUP_F_main_BB_quantlexiti_53:
		next_state = LEGUP_function_call_54;
LEGUP_F_main_BB_quantlexiti_55:
		next_state = LEGUP_F_main_BB_quantlexiti_56;
LEGUP_F_main_BB_quantlexiti_56:
		next_state = LEGUP_F_main_BB_quantlexiti_57;
LEGUP_F_main_BB_quantlexiti_57:
		next_state = LEGUP_F_main_BB_quantlexiti_58;
LEGUP_F_main_BB_quantlexiti_58:
		next_state = LEGUP_F_main_BB_quantlexiti_59;
LEGUP_F_main_BB_quantlexiti_59:
		next_state = LEGUP_F_main_BB_quantlexiti_60;
LEGUP_F_main_BB_quantlexiti_60:
		next_state = LEGUP_F_main_BB_quantlexiti_61;
LEGUP_F_main_BB_quantlexiti_61:
		next_state = LEGUP_F_main_BB_quantlexiti_62;
LEGUP_F_main_BB_quantlexiti_62:
		next_state = LEGUP_F_main_BB_quantlexiti_63;
LEGUP_F_main_BB_quantlexiti_63:
		next_state = LEGUP_F_main_BB_quantlexiti_64;
LEGUP_F_main_BB_quantlexiti_64:
		next_state = LEGUP_F_main_BB_quantlexiti_65;
LEGUP_F_main_BB_quantlexiti_65:
		next_state = LEGUP_F_main_BB_quantlexiti_66;
LEGUP_F_main_BB_quantlexiti_66:
		next_state = LEGUP_F_main_BB_quantlexiti_67;
LEGUP_F_main_BB_quantlexiti_67:
		next_state = LEGUP_F_main_BB_quantlexiti_68;
LEGUP_F_main_BB_quantlexiti_68:
		next_state = LEGUP_F_main_BB_quantlexiti_69;
LEGUP_F_main_BB_quantlexiti_69:
		next_state = LEGUP_F_main_BB_quantlexiti_70;
LEGUP_F_main_BB_quantlexiti_70:
		next_state = LEGUP_F_main_BB_quantlexiti_71;
LEGUP_F_main_BB_quantlexiti_71:
		next_state = LEGUP_F_main_BB_quantlexiti_72;
LEGUP_F_main_BB_quantlexiti_72:
		next_state = LEGUP_function_call_73;
LEGUP_F_main_BB_quantlexiti_74:
		next_state = LEGUP_F_main_BB_quantlexiti_75;
LEGUP_F_main_BB_quantlexiti_75:
		next_state = LEGUP_F_main_BB_quantlexiti_76;
LEGUP_F_main_BB_quantlexiti_76:
		next_state = LEGUP_F_main_BB_quantlexiti_77;
LEGUP_F_main_BB_quantlexiti_77:
		next_state = LEGUP_F_main_BB_quantlexiti_78;
LEGUP_F_main_BB_quantlexiti_78:
		next_state = LEGUP_F_main_BB_quantlexiti_79;
LEGUP_F_main_BB_quantlexiti_79:
		next_state = LEGUP_F_main_BB_quantlexiti_80;
LEGUP_F_main_BB_quantlexiti_80:
		next_state = LEGUP_F_main_BB_quantlexiti_81;
LEGUP_F_main_BB_quantlexiti_81:
		next_state = LEGUP_F_main_BB_quantlexiti_82;
LEGUP_F_main_BB_quantlexiti_82:
	if ((main_quantlexiti_279_reg == 1'd1))
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_83;
	else if ((main_quantlexiti_279_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderipreheader_97;
LEGUP_function_call_136:
	if ((upzero_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi_137;
LEGUP_function_call_150:
	if ((upzero_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi_151;
LEGUP_function_call_54:
	if ((upzero_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_quantlexiti_55;
LEGUP_function_call_73:
	if ((upzero_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_quantlexiti_74;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %indvar13 = phi i64 [ %indvar.next14, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar13 = 64'd0;
	end
	/* main: %1*/
	/*   %indvar13 = phi i64 [ %indvar.next14, %2 ], [ 0, %0 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__2_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_indvar13 = main_2_indvarnext14_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %indvar13 = phi i64 [ %indvar.next14, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar13_reg <= main_1_indvar13;
		if (start == 1'b0 && ^(main_1_indvar13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvar13_reg"); $finish; end
	end
	/* main: %1*/
	/*   %indvar13 = phi i64 [ %indvar.next14, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__2_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar13_reg <= main_1_indvar13;
		if (start == 1'b0 && ^(main_1_indvar13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvar13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond15 = icmp eq i64 %indvar13, 24*/
		main_1_exitcond15 = (main_1_indvar13_reg == 64'd24);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %exitcond15 = icmp eq i64 %indvar13, 24*/
	if ((cur_state == LEGUP_F_main_BB__1_26)) begin
		main_1_exitcond15_reg <= main_1_exitcond15;
		if (start == 1'b0 && ^(main_1_exitcond15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_exitcond15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %3 = shl i64 %indvar13, 2*/
		main_2_3 = (main_1_indvar13_reg <<< (64'd2 % 64'd64));
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %3 = shl i64 %indvar13, 2*/
	if ((cur_state == LEGUP_F_main_BB__2_28)) begin
		main_2_3_reg <= main_2_3;
		if (start == 1'b0 && ^(main_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %4 = add i64 %3, zext (i32 ptrtoint ([24 x i32]* @tqmf to i32) to i64)*/
		main_2_4 = (main_2_3 + 1'd0);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %4 = add i64 %3, zext (i32 ptrtoint ([24 x i32]* @tqmf to i32) to i64)*/
	if ((cur_state == LEGUP_F_main_BB__2_28)) begin
		main_2_4_reg <= main_2_4;
		if (start == 1'b0 && ^(main_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %5 = trunc i64 %4 to i32*/
		main_2_5 = main_2_4[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %5 = trunc i64 %4 to i32*/
	if ((cur_state == LEGUP_F_main_BB__2_28)) begin
		main_2_5_reg <= main_2_5;
		if (start == 1'b0 && ^(main_2_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %s.i.0 = inttoptr i32 %5 to i32**/
		main_2_si0 = main_2_5;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %s.i.0 = inttoptr i32 %5 to i32**/
	if ((cur_state == LEGUP_F_main_BB__2_28)) begin
		main_2_si0_reg <= main_2_si0;
		if (start == 1'b0 && ^(main_2_si0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_si0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %indvar.next14 = add i64 %indvar13, 1*/
		main_2_indvarnext14 = (main_1_indvar13_reg + 64'd1);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %indvar.next14 = add i64 %indvar13, 1*/
	if ((cur_state == LEGUP_F_main_BB__2_28)) begin
		main_2_indvarnext14_reg <= main_2_indvarnext14;
		if (start == 1'b0 && ^(main_2_indvarnext14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_indvarnext14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next10, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_indvar9 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next10, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_indvar9 = main_encodeexit_crit_edge_indvarnext10_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next10, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_indvar9_reg <= main_legup_memset_4_i64exit_indvar9;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_indvar9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_indvar9_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next10, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_indvar9_reg <= main_legup_memset_4_i64exit_indvar9;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_indvar9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_indvar9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %6 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp1, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_6 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %6 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp1, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_6 = main_encodeexit_crit_edge_phitmp1;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %6 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp1, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_6_reg <= main_legup_memset_4_i64exit_6;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_6_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %6 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp1, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_6_reg <= main_legup_memset_4_i64exit_6;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %7 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_7 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %7 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_7 = main_encodeexit_crit_edge_phitmp;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %7 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_7_reg <= main_legup_memset_4_i64exit_7;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_7_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %7 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_7_reg <= main_legup_memset_4_i64exit_7;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre36, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_8 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre36, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_8 = main_encodeexit_crit_edge_pre36_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre36, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_8_reg <= main_legup_memset_4_i64exit_8;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_8_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre36, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_8_reg <= main_legup_memset_4_i64exit_8;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre35, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_9 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre35, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_9 = main_encodeexit_crit_edge_pre35_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre35, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_9_reg <= main_legup_memset_4_i64exit_9;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_9_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre35, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_9_reg <= main_legup_memset_4_i64exit_9;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %10 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre34, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_10 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %10 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre34, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_10 = main_encodeexit_crit_edge_pre34_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %10 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre34, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_10_reg <= main_legup_memset_4_i64exit_10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_10_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %10 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre34, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_10_reg <= main_legup_memset_4_i64exit_10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %11 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre33, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_11 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %11 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre33, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_11 = main_encodeexit_crit_edge_pre33_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %11 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre33, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_11_reg <= main_legup_memset_4_i64exit_11;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_11_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %11 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre33, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_11_reg <= main_legup_memset_4_i64exit_11;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %12 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre32, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_12 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %12 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre32, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_12 = main_encodeexit_crit_edge_pre32_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %12 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre32, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_12_reg <= main_legup_memset_4_i64exit_12;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_12_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %12 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre32, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_12_reg <= main_legup_memset_4_i64exit_12;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %13 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre31, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_13 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %13 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre31, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_13 = main_encodeexit_crit_edge_pre31_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %13 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre31, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_13_reg <= main_legup_memset_4_i64exit_13;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_13_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %13 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre31, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_13_reg <= main_legup_memset_4_i64exit_13;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %14 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre30, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_14 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %14 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre30, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_14 = main_encodeexit_crit_edge_pre30_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %14 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre30, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_14_reg <= main_legup_memset_4_i64exit_14;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_14_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %14 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre30, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_14_reg <= main_legup_memset_4_i64exit_14;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %15 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre29, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_15 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %15 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre29, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_15 = main_encodeexit_crit_edge_pre29_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %15 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre29, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_15_reg <= main_legup_memset_4_i64exit_15;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_15_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %15 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre29, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_15_reg <= main_legup_memset_4_i64exit_15;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %16 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre28, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_16 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %16 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre28, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_16 = main_encodeexit_crit_edge_pre28_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %16 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre28, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_16_reg <= main_legup_memset_4_i64exit_16;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_16_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %16 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre28, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_16_reg <= main_legup_memset_4_i64exit_16;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %17 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre27, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_17 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %17 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre27, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_17 = main_encodeexit_crit_edge_pre27_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %17 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre27, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_17_reg <= main_legup_memset_4_i64exit_17;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_17_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %17 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre27, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_17_reg <= main_legup_memset_4_i64exit_17;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %18 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre26, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_18 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %18 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre26, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_18 = main_encodeexit_crit_edge_pre26_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %18 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre26, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_18_reg <= main_legup_memset_4_i64exit_18;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_18_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %18 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre26, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_18_reg <= main_legup_memset_4_i64exit_18;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %19 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre25, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_19 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %19 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre25, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_19 = main_encodeexit_crit_edge_pre25_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %19 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre25, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_19_reg <= main_legup_memset_4_i64exit_19;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_19_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %19 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre25, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_19_reg <= main_legup_memset_4_i64exit_19;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %20 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre24, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_20 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %20 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre24, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_20 = main_encodeexit_crit_edge_pre24_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %20 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre24, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_20_reg <= main_legup_memset_4_i64exit_20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_20_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %20 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre24, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_20_reg <= main_legup_memset_4_i64exit_20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %21 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre23, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_21 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %21 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre23, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_21 = main_encodeexit_crit_edge_pre23_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %21 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre23, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_21_reg <= main_legup_memset_4_i64exit_21;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_21_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %21 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre23, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_21_reg <= main_legup_memset_4_i64exit_21;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %22 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre22, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_22 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %22 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre22, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_22 = main_encodeexit_crit_edge_pre22_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %22 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre22, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_22_reg <= main_legup_memset_4_i64exit_22;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_22_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %22 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre22, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_22_reg <= main_legup_memset_4_i64exit_22;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %23 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre21, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_23 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %23 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre21, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_23 = main_encodeexit_crit_edge_pre21_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %23 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre21, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_23_reg <= main_legup_memset_4_i64exit_23;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_23_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %23 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre21, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_23_reg <= main_legup_memset_4_i64exit_23;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %24 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre20, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_24 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %24 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre20, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_24 = main_encodeexit_crit_edge_pre20_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %24 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre20, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_24_reg <= main_legup_memset_4_i64exit_24;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_24_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %24 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre20, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_24_reg <= main_legup_memset_4_i64exit_24;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %25 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre19, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_25 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %25 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre19, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_25 = main_encodeexit_crit_edge_pre19_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %25 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre19, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_25_reg <= main_legup_memset_4_i64exit_25;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_25_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %25 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre19, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_25_reg <= main_legup_memset_4_i64exit_25;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %26 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre18, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_26 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %26 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre18, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_26 = main_encodeexit_crit_edge_pre18_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %26 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre18, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_26_reg <= main_legup_memset_4_i64exit_26;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_26_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %26 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre18, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_26_reg <= main_legup_memset_4_i64exit_26;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %27 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre17, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_27 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %27 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre17, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_27 = main_encodeexit_crit_edge_pre17_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %27 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre17, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_27_reg <= main_legup_memset_4_i64exit_27;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_27_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %27 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre17, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_27_reg <= main_legup_memset_4_i64exit_27;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %28 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre16, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_28 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %28 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre16, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_28 = main_encodeexit_crit_edge_pre16_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %28 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre16, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_28_reg <= main_legup_memset_4_i64exit_28;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_28_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %28 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre16, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_28_reg <= main_legup_memset_4_i64exit_28;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %29 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_29 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %29 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_29 = main_encodeexit_crit_edge_pre_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %29 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_29_reg <= main_legup_memset_4_i64exit_29;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_29_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %29 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_29_reg <= main_legup_memset_4_i64exit_29;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %ph1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph20 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %ph1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_ph20 = main_legup_memset_4_i64exit_ph10_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %ph1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph20_reg <= main_legup_memset_4_i64exit_ph20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ph20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ph20_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %ph1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph20_reg <= main_legup_memset_4_i64exit_ph20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ph20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ph20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %252, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph10 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %252, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_ph10 = main_quantlexiti_252_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %252, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph10_reg <= main_legup_memset_4_i64exit_ph10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ph10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ph10_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %252, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph10_reg <= main_legup_memset_4_i64exit_ph10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ph10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ph10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbh.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp5, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbh0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbh.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp5, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_nbh0 = main_encodeexit_crit_edge_phitmp5_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbh.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp5, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbh0_reg <= main_legup_memset_4_i64exit_nbh0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_nbh0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_nbh0_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbh.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp5, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbh0_reg <= main_legup_memset_4_i64exit_nbh0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_nbh0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_nbh0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %deth.0 = phi i32 [ 8, %legup_memset_4_i64.exit.preheader ], [ %285, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_deth0 = 32'd8;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %deth.0 = phi i32 [ 8, %legup_memset_4_i64.exit.preheader ], [ %285, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_deth0 = main_encodeexit_crit_edge_285_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %deth.0 = phi i32 [ 8, %legup_memset_4_i64.exit.preheader ], [ %285, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_deth0_reg <= main_legup_memset_4_i64exit_deth0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_deth0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_deth0_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %deth.0 = phi i32 [ 8, %legup_memset_4_i64.exit.preheader ], [ %285, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_deth0_reg <= main_legup_memset_4_i64exit_deth0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_deth0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_deth0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i.i6, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah20 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i.i6, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_ah20 = main_quantlexiti_ii6_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i.i6, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah20_reg <= main_legup_memset_4_i64exit_ah20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ah20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ah20_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i.i6, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah20_reg <= main_legup_memset_4_i64exit_ah20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ah20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ah20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rh1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh20 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rh1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_rh20 = main_legup_memset_4_i64exit_rh10_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rh1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh20_reg <= main_legup_memset_4_i64exit_rh20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rh20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rh20_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rh1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh20_reg <= main_legup_memset_4_i64exit_rh20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rh20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rh20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i.i9, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah10 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i.i9, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_ah10 = main_encodeexit_crit_edge_apl12ii9_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i.i9, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah10_reg <= main_legup_memset_4_i64exit_ah10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ah10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ah10_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i.i9, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah10_reg <= main_legup_memset_4_i64exit_ah10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ah10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ah10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %280, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh10 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %280, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_rh10 = main_encodeexit_crit_edge_280_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %280, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh10_reg <= main_legup_memset_4_i64exit_rh10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rh10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rh10_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %280, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh10_reg <= main_legup_memset_4_i64exit_rh10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rh10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rh10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %plt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt20 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %plt1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_plt20 = main_legup_memset_4_i64exit_plt10_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %plt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt20_reg <= main_legup_memset_4_i64exit_plt20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_plt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_plt20_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %plt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt20_reg <= main_legup_memset_4_i64exit_plt20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_plt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_plt20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %157, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt10 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %157, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_plt10 = main_quantlexiti_157_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %157, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt10_reg <= main_legup_memset_4_i64exit_plt10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_plt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_plt10_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %157, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt10_reg <= main_legup_memset_4_i64exit_plt10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_plt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_plt10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbl.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp3, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbl0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbl.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp3, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_nbl0 = main_encodeexit_crit_edge_phitmp3_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbl.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp3, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbl0_reg <= main_legup_memset_4_i64exit_nbl0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_nbl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_nbl0_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbl.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp3, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbl0_reg <= main_legup_memset_4_i64exit_nbl0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_nbl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_nbl0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %detl.0 = phi i32 [ 32, %legup_memset_4_i64.exit.preheader ], [ %291, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_detl0 = 32'd32;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %detl.0 = phi i32 [ 32, %legup_memset_4_i64.exit.preheader ], [ %291, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_detl0 = main_encodeexit_crit_edge_291_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %detl.0 = phi i32 [ 32, %legup_memset_4_i64.exit.preheader ], [ %291, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_detl0_reg <= main_legup_memset_4_i64exit_detl0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_detl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_detl0_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %detl.0 = phi i32 [ 32, %legup_memset_4_i64.exit.preheader ], [ %291, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_detl0_reg <= main_legup_memset_4_i64exit_detl0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_detl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_detl0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %al2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i10.i, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al20 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %al2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i10.i, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_al20 = main_quantlexiti_i10i_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %al2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i10.i, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al20_reg <= main_legup_memset_4_i64exit_al20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_al20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_al20_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %al2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i10.i, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al20_reg <= main_legup_memset_4_i64exit_al20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_al20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_al20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt20 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_rlt20 = main_legup_memset_4_i64exit_rlt10_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt20_reg <= main_legup_memset_4_i64exit_rlt20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rlt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rlt20_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt20_reg <= main_legup_memset_4_i64exit_rlt20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rlt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rlt20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %al1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i6.i, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al10 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %al1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i6.i, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_al10 = main_encodeexit_crit_edge_apl12i6i_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %al1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i6.i, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al10_reg <= main_legup_memset_4_i64exit_al10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_al10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_al10_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %al1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i6.i, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al10_reg <= main_legup_memset_4_i64exit_al10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_al10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_al10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %286, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt10 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %286, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_rlt10 = main_encodeexit_crit_edge_286_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %286, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt10_reg <= main_legup_memset_4_i64exit_rlt10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rlt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rlt10_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %286, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt10_reg <= main_legup_memset_4_i64exit_rlt10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rlt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rlt10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %i.02.i = shl i32 %indvar9, 1*/
		main_legup_memset_4_i64exit_i02i = (main_legup_memset_4_i64exit_indvar9_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %i.02.i = shl i32 %indvar9, 1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_i02i_reg <= main_legup_memset_4_i64exit_i02i;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_i02i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_i02i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %30 = add i32 %i.02.i, 2*/
		main_legup_memset_4_i64exit_30 = (main_legup_memset_4_i64exit_i02i + 32'd2);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %30 = add i32 %i.02.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_30_reg <= main_legup_memset_4_i64exit_30;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %31 = or i32 %i.02.i, 1*/
		main_legup_memset_4_i64exit_31 = (main_legup_memset_4_i64exit_i02i | 32'd1);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %31 = or i32 %i.02.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_31_reg <= main_legup_memset_4_i64exit_31;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep11 = getelementptr [100 x i32]* @test_data, i32 0, i32 %31*/
		main_legup_memset_4_i64exit_scevgep11 = (1'd0 | (4 * main_legup_memset_4_i64exit_31));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep11 = getelementptr [100 x i32]* @test_data, i32 0, i32 %31*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_scevgep11_reg <= main_legup_memset_4_i64exit_scevgep11;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep12 = getelementptr [100 x i32]* @test_data, i32 0, i32 %i.02.i*/
		main_legup_memset_4_i64exit_scevgep12 = (1'd0 | (4 * main_legup_memset_4_i64exit_i02i));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep12 = getelementptr [100 x i32]* @test_data, i32 0, i32 %i.02.i*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_scevgep12_reg <= main_legup_memset_4_i64exit_scevgep12;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %32 = load i32* %scevgep12, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_32 = test_data_out_a;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %32 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_32_reg <= main_legup_memset_4_i64exit_32;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %33 = load i32* %scevgep11, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_33 = test_data_out_b;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %33 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_33_reg <= main_legup_memset_4_i64exit_33;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_33_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_34 = main_legup_memset_4_i64exit_34_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %34 = mul nsw i32 %29, 12*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_34_reg <= main_legup_memset_4_i64exit_34;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_34_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %34 = mul nsw i32 %29, 12*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_34_reg <= main_legup_memset_4_i64exit_34;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_34_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_35 = main_legup_memset_4_i64exit_35_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %35 = mul nsw i32 %28, -44*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_35_reg <= main_legup_memset_4_i64exit_35;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_35_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %35 = mul nsw i32 %28, -44*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_35_reg <= main_legup_memset_4_i64exit_35;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_35_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_36 = main_legup_memset_4_i64exit_36_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = mul nsw i32 %27, -44*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_36_reg <= main_legup_memset_4_i64exit_36;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_36_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = mul nsw i32 %27, -44*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_36_reg <= main_legup_memset_4_i64exit_36;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %37 = add nsw i32 %36, %34*/
		main_legup_memset_4_i64exit_37 = (main_legup_memset_4_i64exit_36 + main_legup_memset_4_i64exit_34);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %37 = add nsw i32 %36, %34*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_37_reg <= main_legup_memset_4_i64exit_37;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_37_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_38 = main_legup_memset_4_i64exit_38_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %38 = mul nsw i32 %26, 212*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_38_reg <= main_legup_memset_4_i64exit_38;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_38_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %38 = mul nsw i32 %26, 212*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_38_reg <= main_legup_memset_4_i64exit_38;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = add nsw i32 %38, %35*/
		main_legup_memset_4_i64exit_39 = (main_legup_memset_4_i64exit_38 + main_legup_memset_4_i64exit_35);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = add nsw i32 %38, %35*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_39_reg <= main_legup_memset_4_i64exit_39;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_39_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_40 = main_legup_memset_4_i64exit_40_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %40 = mul nsw i32 %25, 48*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_40_reg <= main_legup_memset_4_i64exit_40;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_40_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %40 = mul nsw i32 %25, 48*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_40_reg <= main_legup_memset_4_i64exit_40;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %41 = add nsw i32 %40, %37*/
		main_legup_memset_4_i64exit_41 = (main_legup_memset_4_i64exit_40 + main_legup_memset_4_i64exit_37);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %41 = add nsw i32 %40, %37*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_41_reg <= main_legup_memset_4_i64exit_41;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_41_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_42 = main_legup_memset_4_i64exit_42_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = mul nsw i32 %24, -624*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_42_reg <= main_legup_memset_4_i64exit_42;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_42_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = mul nsw i32 %24, -624*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_42_reg <= main_legup_memset_4_i64exit_42;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %43 = add nsw i32 %42, %39*/
		main_legup_memset_4_i64exit_43 = (main_legup_memset_4_i64exit_42 + main_legup_memset_4_i64exit_39);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %43 = add nsw i32 %42, %39*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_43_reg <= main_legup_memset_4_i64exit_43;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %44 = shl nsw i32 %23, 7*/
		main_legup_memset_4_i64exit_44 = (main_legup_memset_4_i64exit_23_reg <<< (32'd7 % 32));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %44 = shl nsw i32 %23, 7*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_44_reg <= main_legup_memset_4_i64exit_44;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = add nsw i32 %44, %41*/
		main_legup_memset_4_i64exit_45 = (main_legup_memset_4_i64exit_44_reg + main_legup_memset_4_i64exit_41);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = add nsw i32 %44, %41*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_45_reg <= main_legup_memset_4_i64exit_45;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_45_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_46 = main_legup_memset_4_i64exit_46_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %46 = mul nsw i32 %22, 1448*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_46_reg <= main_legup_memset_4_i64exit_46;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_46_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %46 = mul nsw i32 %22, 1448*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_46_reg <= main_legup_memset_4_i64exit_46;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %47 = add nsw i32 %46, %43*/
		main_legup_memset_4_i64exit_47 = (main_legup_memset_4_i64exit_46 + main_legup_memset_4_i64exit_43);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %47 = add nsw i32 %46, %43*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_47_reg <= main_legup_memset_4_i64exit_47;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_47_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_48 = main_legup_memset_4_i64exit_48_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = mul nsw i32 %21, -840*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_48_reg <= main_legup_memset_4_i64exit_48;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_48_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = mul nsw i32 %21, -840*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_48_reg <= main_legup_memset_4_i64exit_48;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %49 = add nsw i32 %48, %45*/
		main_legup_memset_4_i64exit_49 = (main_legup_memset_4_i64exit_48 + main_legup_memset_4_i64exit_45);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %49 = add nsw i32 %48, %45*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_49_reg <= main_legup_memset_4_i64exit_49;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_49_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_50 = main_legup_memset_4_i64exit_50_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %50 = mul nsw i32 %20, -3220*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_50_reg <= main_legup_memset_4_i64exit_50;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_50_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %50 = mul nsw i32 %20, -3220*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_50_reg <= main_legup_memset_4_i64exit_50;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = add nsw i32 %50, %47*/
		main_legup_memset_4_i64exit_51 = (main_legup_memset_4_i64exit_50 + main_legup_memset_4_i64exit_47);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = add nsw i32 %50, %47*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_51_reg <= main_legup_memset_4_i64exit_51;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_51_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_52 = main_legup_memset_4_i64exit_52_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %52 = mul nsw i32 %19, 3804*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_52_reg <= main_legup_memset_4_i64exit_52;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_52_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %52 = mul nsw i32 %19, 3804*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_52_reg <= main_legup_memset_4_i64exit_52;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %53 = add nsw i32 %52, %49*/
		main_legup_memset_4_i64exit_53 = (main_legup_memset_4_i64exit_52 + main_legup_memset_4_i64exit_49);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %53 = add nsw i32 %52, %49*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_53_reg <= main_legup_memset_4_i64exit_53;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_53_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_54 = main_legup_memset_4_i64exit_54_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = mul nsw i32 %18, 15504*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_54_reg <= main_legup_memset_4_i64exit_54;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_54_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = mul nsw i32 %18, 15504*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_54_reg <= main_legup_memset_4_i64exit_54;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %55 = add nsw i32 %54, %51*/
		main_legup_memset_4_i64exit_55 = (main_legup_memset_4_i64exit_54 + main_legup_memset_4_i64exit_51);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %55 = add nsw i32 %54, %51*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_55_reg <= main_legup_memset_4_i64exit_55;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_56 = main_legup_memset_4_i64exit_56_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %56 = mul nsw i32 %17, 15504*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_56_reg <= main_legup_memset_4_i64exit_56;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_56_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %56 = mul nsw i32 %17, 15504*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_56_reg <= main_legup_memset_4_i64exit_56;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = add nsw i32 %56, %53*/
		main_legup_memset_4_i64exit_57 = (main_legup_memset_4_i64exit_56 + main_legup_memset_4_i64exit_53);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = add nsw i32 %56, %53*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_57_reg <= main_legup_memset_4_i64exit_57;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_58 = main_legup_memset_4_i64exit_58_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %58 = mul nsw i32 %16, 3804*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_58_reg <= main_legup_memset_4_i64exit_58;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_58_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %58 = mul nsw i32 %16, 3804*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_58_reg <= main_legup_memset_4_i64exit_58;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %59 = add nsw i32 %58, %55*/
		main_legup_memset_4_i64exit_59 = (main_legup_memset_4_i64exit_58 + main_legup_memset_4_i64exit_55);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %59 = add nsw i32 %58, %55*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_59_reg <= main_legup_memset_4_i64exit_59;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_60 = main_legup_memset_4_i64exit_60_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %60 = mul nsw i32 %15, -3220*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_60_reg <= main_legup_memset_4_i64exit_60;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_60_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %60 = mul nsw i32 %15, -3220*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_60_reg <= main_legup_memset_4_i64exit_60;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %61 = add nsw i32 %60, %57*/
		main_legup_memset_4_i64exit_61 = (main_legup_memset_4_i64exit_60 + main_legup_memset_4_i64exit_57);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %61 = add nsw i32 %60, %57*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_61_reg <= main_legup_memset_4_i64exit_61;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_62 = main_legup_memset_4_i64exit_62_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %62 = mul nsw i32 %14, -840*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_62_reg <= main_legup_memset_4_i64exit_62;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_62_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %62 = mul nsw i32 %14, -840*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_62_reg <= main_legup_memset_4_i64exit_62;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %63 = add nsw i32 %62, %59*/
		main_legup_memset_4_i64exit_63 = (main_legup_memset_4_i64exit_62 + main_legup_memset_4_i64exit_59);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %63 = add nsw i32 %62, %59*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_63_reg <= main_legup_memset_4_i64exit_63;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_63_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_64 = main_legup_memset_4_i64exit_64_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %64 = mul nsw i32 %13, 1448*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_64_reg <= main_legup_memset_4_i64exit_64;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_64_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %64 = mul nsw i32 %13, 1448*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_64_reg <= main_legup_memset_4_i64exit_64;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %65 = add nsw i32 %64, %61*/
		main_legup_memset_4_i64exit_65 = (main_legup_memset_4_i64exit_64 + main_legup_memset_4_i64exit_61);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %65 = add nsw i32 %64, %61*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_65_reg <= main_legup_memset_4_i64exit_65;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %66 = shl nsw i32 %12, 7*/
		main_legup_memset_4_i64exit_66 = (main_legup_memset_4_i64exit_12_reg <<< (32'd7 % 32));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %66 = shl nsw i32 %12, 7*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_66_reg <= main_legup_memset_4_i64exit_66;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %67 = add nsw i32 %66, %63*/
		main_legup_memset_4_i64exit_67 = (main_legup_memset_4_i64exit_66_reg + main_legup_memset_4_i64exit_63);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %67 = add nsw i32 %66, %63*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_67_reg <= main_legup_memset_4_i64exit_67;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_67_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_68 = main_legup_memset_4_i64exit_68_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %68 = mul nsw i32 %11, -624*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_68_reg <= main_legup_memset_4_i64exit_68;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_68_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %68 = mul nsw i32 %11, -624*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_68_reg <= main_legup_memset_4_i64exit_68;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %69 = add nsw i32 %68, %65*/
		main_legup_memset_4_i64exit_69 = (main_legup_memset_4_i64exit_68_reg + main_legup_memset_4_i64exit_65_reg);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %69 = add nsw i32 %68, %65*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_69_reg <= main_legup_memset_4_i64exit_69;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_69_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_70 = main_legup_memset_4_i64exit_70_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %70 = mul nsw i32 %10, 48*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_70_reg <= main_legup_memset_4_i64exit_70;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_70_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %70 = mul nsw i32 %10, 48*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_70_reg <= main_legup_memset_4_i64exit_70;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %71 = add nsw i32 %70, %67*/
		main_legup_memset_4_i64exit_71 = (main_legup_memset_4_i64exit_70_reg + main_legup_memset_4_i64exit_67_reg);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %71 = add nsw i32 %70, %67*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_71_reg <= main_legup_memset_4_i64exit_71;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_71_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_72 = main_legup_memset_4_i64exit_72_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %72 = mul nsw i32 %9, 212*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_72_reg <= main_legup_memset_4_i64exit_72;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_72_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %72 = mul nsw i32 %9, 212*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_72_reg <= main_legup_memset_4_i64exit_72;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %73 = add nsw i32 %72, %69*/
		main_legup_memset_4_i64exit_73 = (main_legup_memset_4_i64exit_72_reg + main_legup_memset_4_i64exit_69);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %73 = add nsw i32 %72, %69*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_73_reg <= main_legup_memset_4_i64exit_73;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_73_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_74 = main_legup_memset_4_i64exit_74_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %74 = mul nsw i32 %8, -44*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_74_reg <= main_legup_memset_4_i64exit_74;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_74_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %74 = mul nsw i32 %8, -44*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_74_reg <= main_legup_memset_4_i64exit_74;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %75 = add nsw i32 %74, %71*/
		main_legup_memset_4_i64exit_75 = (main_legup_memset_4_i64exit_74_reg + main_legup_memset_4_i64exit_71);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %75 = add nsw i32 %74, %71*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_75_reg <= main_legup_memset_4_i64exit_75;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %76 = add nsw i32 %7, %73*/
		main_legup_memset_4_i64exit_76 = (main_legup_memset_4_i64exit_7_reg + main_legup_memset_4_i64exit_73);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %76 = add nsw i32 %7, %73*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_76_reg <= main_legup_memset_4_i64exit_76;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %77 = add nsw i32 %6, %75*/
		main_legup_memset_4_i64exit_77 = (main_legup_memset_4_i64exit_6_reg + main_legup_memset_4_i64exit_75);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %77 = add nsw i32 %6, %75*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_77_reg <= main_legup_memset_4_i64exit_77;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %78 = add nsw i32 %77, %76*/
		main_legup_memset_4_i64exit_78 = (main_legup_memset_4_i64exit_77 + main_legup_memset_4_i64exit_76);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %78 = add nsw i32 %77, %76*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_78_reg <= main_legup_memset_4_i64exit_78;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %79 = ashr i32 %78, 15*/
		main_legup_memset_4_i64exit_79 = ($signed(main_legup_memset_4_i64exit_78) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %79 = ashr i32 %78, 15*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_79_reg <= main_legup_memset_4_i64exit_79;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %80 = sub nsw i32 %76, %77*/
		main_legup_memset_4_i64exit_80 = (main_legup_memset_4_i64exit_76 - main_legup_memset_4_i64exit_77);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %80 = sub nsw i32 %76, %77*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_80_reg <= main_legup_memset_4_i64exit_80;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %81 = ashr i32 %80, 15*/
		main_legup_memset_4_i64exit_81 = ($signed(main_legup_memset_4_i64exit_80) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %81 = ashr i32 %80, 15*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_81_reg <= main_legup_memset_4_i64exit_81;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %82 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_82 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %82 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_82_reg <= main_legup_memset_4_i64exit_82;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_83 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_83_reg <= main_legup_memset_4_i64exit_83;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_83_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_84 = main_legup_memset_4_i64exit_84_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %84 = mul nsw i32 %83, %82*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_legup_memset_4_i64exit_84_reg <= main_legup_memset_4_i64exit_84;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_84_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %84 = mul nsw i32 %83, %82*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_legup_memset_4_i64exit_84_reg <= main_legup_memset_4_i64exit_84;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %85 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_85 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %85 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_legup_memset_4_i64exit_85_reg <= main_legup_memset_4_i64exit_85;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_86 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_legup_memset_4_i64exit_86_reg <= main_legup_memset_4_i64exit_86;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_86_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_87 = main_legup_memset_4_i64exit_87_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %87 = mul nsw i32 %86, %85*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_legup_memset_4_i64exit_87_reg <= main_legup_memset_4_i64exit_87;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_87_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %87 = mul nsw i32 %86, %85*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_legup_memset_4_i64exit_87_reg <= main_legup_memset_4_i64exit_87;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %88 = add nsw i32 %87, %84*/
		main_legup_memset_4_i64exit_88 = (main_legup_memset_4_i64exit_87 + main_legup_memset_4_i64exit_84_reg);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %88 = add nsw i32 %87, %84*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_legup_memset_4_i64exit_88_reg <= main_legup_memset_4_i64exit_88;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %89 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_89 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %89 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_legup_memset_4_i64exit_89_reg <= main_legup_memset_4_i64exit_89;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_90 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_legup_memset_4_i64exit_90_reg <= main_legup_memset_4_i64exit_90;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_90_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_91 = main_legup_memset_4_i64exit_91_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %91 = mul nsw i32 %90, %89*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_legup_memset_4_i64exit_91_reg <= main_legup_memset_4_i64exit_91;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_91_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %91 = mul nsw i32 %90, %89*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_legup_memset_4_i64exit_91_reg <= main_legup_memset_4_i64exit_91;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %92 = add nsw i32 %88, %91*/
		main_legup_memset_4_i64exit_92 = (main_legup_memset_4_i64exit_88_reg + main_legup_memset_4_i64exit_91);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %92 = add nsw i32 %88, %91*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_legup_memset_4_i64exit_92_reg <= main_legup_memset_4_i64exit_92;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %93 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_93 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %93 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_legup_memset_4_i64exit_93_reg <= main_legup_memset_4_i64exit_93;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_94 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_legup_memset_4_i64exit_94_reg <= main_legup_memset_4_i64exit_94;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_94_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_95 = main_legup_memset_4_i64exit_95_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %95 = mul nsw i32 %94, %93*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_legup_memset_4_i64exit_95_reg <= main_legup_memset_4_i64exit_95;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_95_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %95 = mul nsw i32 %94, %93*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_legup_memset_4_i64exit_95_reg <= main_legup_memset_4_i64exit_95;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %96 = add nsw i32 %92, %95*/
		main_legup_memset_4_i64exit_96 = (main_legup_memset_4_i64exit_92_reg + main_legup_memset_4_i64exit_95);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %96 = add nsw i32 %92, %95*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_legup_memset_4_i64exit_96_reg <= main_legup_memset_4_i64exit_96;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %97 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_97 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %97 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_legup_memset_4_i64exit_97_reg <= main_legup_memset_4_i64exit_97;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %98 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_98 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %98 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_legup_memset_4_i64exit_98_reg <= main_legup_memset_4_i64exit_98;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_98_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_99 = main_legup_memset_4_i64exit_99_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %99 = mul nsw i32 %98, %97*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_legup_memset_4_i64exit_99_reg <= main_legup_memset_4_i64exit_99;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_99_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %99 = mul nsw i32 %98, %97*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_legup_memset_4_i64exit_99_reg <= main_legup_memset_4_i64exit_99;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %100 = add nsw i32 %96, %99*/
		main_legup_memset_4_i64exit_100 = (main_legup_memset_4_i64exit_96_reg + main_legup_memset_4_i64exit_99);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %100 = add nsw i32 %96, %99*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_legup_memset_4_i64exit_100_reg <= main_legup_memset_4_i64exit_100;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %101 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_101 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %101 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_legup_memset_4_i64exit_101_reg <= main_legup_memset_4_i64exit_101;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %102 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_102 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %102 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_legup_memset_4_i64exit_102_reg <= main_legup_memset_4_i64exit_102;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_102_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_103 = main_legup_memset_4_i64exit_103_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %103 = mul nsw i32 %102, %101*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_103_reg <= main_legup_memset_4_i64exit_103;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_103_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %103 = mul nsw i32 %102, %101*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_103_reg <= main_legup_memset_4_i64exit_103;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %104 = add nsw i32 %100, %103*/
		main_legup_memset_4_i64exit_104 = (main_legup_memset_4_i64exit_100_reg + main_legup_memset_4_i64exit_103);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %104 = add nsw i32 %100, %103*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_104_reg <= main_legup_memset_4_i64exit_104;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %105 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 1, i32 0), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_105 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %105 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_105_reg <= main_legup_memset_4_i64exit_105;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %106 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 1, i32 0), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_106 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %106 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_106_reg <= main_legup_memset_4_i64exit_106;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %107 = add i32 %104, %105*/
		main_legup_memset_4_i64exit_107 = (main_legup_memset_4_i64exit_104 + main_legup_memset_4_i64exit_105);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %107 = add i32 %104, %105*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_107_reg <= main_legup_memset_4_i64exit_107;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %108 = add i32 %107, %106*/
		main_legup_memset_4_i64exit_108 = (main_legup_memset_4_i64exit_107 + main_legup_memset_4_i64exit_106);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %108 = add i32 %107, %106*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_108_reg <= main_legup_memset_4_i64exit_108;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %109 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 1), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_109 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %109 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		main_legup_memset_4_i64exit_109_reg <= main_legup_memset_4_i64exit_109;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %110 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 1), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_110 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %110 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		main_legup_memset_4_i64exit_110_reg <= main_legup_memset_4_i64exit_110;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %111 = add i32 %108, %109*/
		main_legup_memset_4_i64exit_111 = (main_legup_memset_4_i64exit_108_reg + main_legup_memset_4_i64exit_109);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %111 = add i32 %108, %109*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		main_legup_memset_4_i64exit_111_reg <= main_legup_memset_4_i64exit_111;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %112 = add i32 %111, %110*/
		main_legup_memset_4_i64exit_112 = (main_legup_memset_4_i64exit_111 + main_legup_memset_4_i64exit_110);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %112 = add i32 %111, %110*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		main_legup_memset_4_i64exit_112_reg <= main_legup_memset_4_i64exit_112;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %113 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 2), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_113 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %113 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		main_legup_memset_4_i64exit_113_reg <= main_legup_memset_4_i64exit_113;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %114 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 2), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_114 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %114 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		main_legup_memset_4_i64exit_114_reg <= main_legup_memset_4_i64exit_114;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %115 = add i32 %112, %113*/
		main_legup_memset_4_i64exit_115 = (main_legup_memset_4_i64exit_112_reg + main_legup_memset_4_i64exit_113);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %115 = add i32 %112, %113*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		main_legup_memset_4_i64exit_115_reg <= main_legup_memset_4_i64exit_115;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %116 = add i32 %115, %114*/
		main_legup_memset_4_i64exit_116 = (main_legup_memset_4_i64exit_115 + main_legup_memset_4_i64exit_114);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %116 = add i32 %115, %114*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		main_legup_memset_4_i64exit_116_reg <= main_legup_memset_4_i64exit_116;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %117 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 3), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_117 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %117 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		main_legup_memset_4_i64exit_117_reg <= main_legup_memset_4_i64exit_117;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %118 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 3), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_118 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %118 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		main_legup_memset_4_i64exit_118_reg <= main_legup_memset_4_i64exit_118;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %119 = add i32 %116, %117*/
		main_legup_memset_4_i64exit_119 = (main_legup_memset_4_i64exit_116_reg + main_legup_memset_4_i64exit_117);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %119 = add i32 %116, %117*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		main_legup_memset_4_i64exit_119_reg <= main_legup_memset_4_i64exit_119;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %120 = add i32 %119, %118*/
		main_legup_memset_4_i64exit_120 = (main_legup_memset_4_i64exit_119 + main_legup_memset_4_i64exit_118);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %120 = add i32 %119, %118*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		main_legup_memset_4_i64exit_120_reg <= main_legup_memset_4_i64exit_120;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %121 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 4), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_121 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %121 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_legup_memset_4_i64exit_121_reg <= main_legup_memset_4_i64exit_121;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %122 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 4), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_122 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %122 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_legup_memset_4_i64exit_122_reg <= main_legup_memset_4_i64exit_122;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %123 = add i32 %120, %121*/
		main_legup_memset_4_i64exit_123 = (main_legup_memset_4_i64exit_120_reg + main_legup_memset_4_i64exit_121);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %123 = add i32 %120, %121*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_legup_memset_4_i64exit_123_reg <= main_legup_memset_4_i64exit_123;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %124 = add i32 %123, %122*/
		main_legup_memset_4_i64exit_124 = (main_legup_memset_4_i64exit_123 + main_legup_memset_4_i64exit_122);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %124 = add i32 %123, %122*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_legup_memset_4_i64exit_124_reg <= main_legup_memset_4_i64exit_124;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %125 = ashr i32 %124, 14*/
		main_legup_memset_4_i64exit_125 = ($signed(main_legup_memset_4_i64exit_124) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %125 = ashr i32 %124, 14*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_legup_memset_4_i64exit_125_reg <= main_legup_memset_4_i64exit_125;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %126 = shl nsw i32 %rlt2.0, 1*/
		main_legup_memset_4_i64exit_126 = (main_legup_memset_4_i64exit_rlt20_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %126 = shl nsw i32 %rlt2.0, 1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_126_reg <= main_legup_memset_4_i64exit_126;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_126_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_127 = main_legup_memset_4_i64exit_127_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %127 = mul nsw i32 %126, %al2.0*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_127_reg <= main_legup_memset_4_i64exit_127;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_127_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %127 = mul nsw i32 %126, %al2.0*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_127_reg <= main_legup_memset_4_i64exit_127;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %128 = ashr i32 %127, 15*/
		main_legup_memset_4_i64exit_128 = ($signed(main_legup_memset_4_i64exit_127) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %128 = ashr i32 %127, 15*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_128_reg <= main_legup_memset_4_i64exit_128;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %129 = add nsw i32 %128, %125*/
		main_legup_memset_4_i64exit_129 = (main_legup_memset_4_i64exit_128_reg + main_legup_memset_4_i64exit_125);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %129 = add nsw i32 %128, %125*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_legup_memset_4_i64exit_129_reg <= main_legup_memset_4_i64exit_129;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %130 = sub nsw i32 %79, %129*/
		main_legup_memset_4_i64exit_130 = (main_legup_memset_4_i64exit_79_reg - main_legup_memset_4_i64exit_129);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %130 = sub nsw i32 %79, %129*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_legup_memset_4_i64exit_130_reg <= main_legup_memset_4_i64exit_130;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %131 = icmp sgt i32 %130, -1*/
		main_legup_memset_4_i64exit_131 = ($signed(main_legup_memset_4_i64exit_130) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %131 = icmp sgt i32 %130, -1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_legup_memset_4_i64exit_131_reg <= main_legup_memset_4_i64exit_131;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %132 = sub nsw i32 0, %130*/
		main_legup_memset_4_i64exit_132 = (32'd0 - main_legup_memset_4_i64exit_130);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %132 = sub nsw i32 0, %130*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_legup_memset_4_i64exit_132_reg <= main_legup_memset_4_i64exit_132;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %m.0.i.i.i = select i1 %131, i32 %130, i32 %132*/
		main_legup_memset_4_i64exit_m0iii = (main_legup_memset_4_i64exit_131 ? main_legup_memset_4_i64exit_130 : main_legup_memset_4_i64exit_132);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %m.0.i.i.i = select i1 %131, i32 %130, i32 %132*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_legup_memset_4_i64exit_m0iii_reg <= main_legup_memset_4_i64exit_m0iii;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_m0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_m0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %133*/
	/*   %134 = add nsw i32 %137, 1*/
		main_133_134 = (main_136_137_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %133*/
	/*   %134 = add nsw i32 %137, 1*/
	if ((cur_state == LEGUP_F_main_BB__133_43)) begin
		main_133_134_reg <= main_133_134;
		if (start == 1'b0 && ^(main_133_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_133_134_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %133*/
	/*   %135 = icmp slt i32 %138, 30*/
		main_133_135 = ($signed(main_136_138_reg) < $signed(32'd30));
end
always @(posedge clk) begin
	/* main: %133*/
	/*   %135 = icmp slt i32 %138, 30*/
	if ((cur_state == LEGUP_F_main_BB__133_43)) begin
		main_133_135_reg <= main_133_135;
		if (start == 1'b0 && ^(main_133_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_133_135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %136*/
	/*   %137 = phi i32 [ 0, %legup_memset_4_i64.exit ], [ %134, %133 ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_42) & (memory_controller_waitrequest == 1'd0))) begin
		main_136_137 = 32'd0;
	end
	/* main: %136*/
	/*   %137 = phi i32 [ 0, %legup_memset_4_i64.exit ], [ %134, %133 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__133_43) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd1))) */ begin
		main_136_137 = main_133_134;
	end
end
always @(posedge clk) begin
	/* main: %136*/
	/*   %137 = phi i32 [ 0, %legup_memset_4_i64.exit ], [ %134, %133 ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_42) & (memory_controller_waitrequest == 1'd0))) begin
		main_136_137_reg <= main_136_137;
		if (start == 1'b0 && ^(main_136_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_137_reg"); $finish; end
	end
	/* main: %136*/
	/*   %137 = phi i32 [ 0, %legup_memset_4_i64.exit ], [ %134, %133 ]*/
	if ((((cur_state == LEGUP_F_main_BB__133_43) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd1))) begin
		main_136_137_reg <= main_136_137;
		if (start == 1'b0 && ^(main_136_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %136*/
	/*   %138 = add i32 %137, 1*/
		main_136_138 = (main_136_137_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %136*/
	/*   %138 = add i32 %137, 1*/
	if ((cur_state == LEGUP_F_main_BB__136_44)) begin
		main_136_138_reg <= main_136_138;
		if (start == 1'b0 && ^(main_136_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %136*/
	/*   %scevgep8 = getelementptr [30 x i32]* @decis_levl, i32 0, i32 %137*/
		main_136_scevgep8 = (1'd0 | (4 * main_136_137_reg));
end
always @(posedge clk) begin
	/* main: %136*/
	/*   %scevgep8 = getelementptr [30 x i32]* @decis_levl, i32 0, i32 %137*/
	if ((cur_state == LEGUP_F_main_BB__136_44)) begin
		main_136_scevgep8_reg <= main_136_scevgep8;
		if (start == 1'b0 && ^(main_136_scevgep8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_scevgep8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %136*/
	/*   %139 = load i32* %scevgep8, align 4, !tbaa !1*/
		main_136_139 = decis_levl_out_a;
end
always @(posedge clk) begin
	/* main: %136*/
	/*   %139 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__136_45)) begin
		main_136_139_reg <= main_136_139;
		if (start == 1'b0 && ^(main_136_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_139_reg"); $finish; end
	end
end
always @(*) begin
	main_136_140 = main_136_140_stage0_reg;
end
always @(posedge clk) begin
	/* main: %136*/
	/*   %140 = mul nsw i32 %139, %detl.0*/
	if ((cur_state == LEGUP_F_main_BB__136_46)) begin
		main_136_140_reg <= main_136_140;
		if (start == 1'b0 && ^(main_136_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_140_reg"); $finish; end
	end
	/* main: %136*/
	/*   %140 = mul nsw i32 %139, %detl.0*/
	if ((cur_state == LEGUP_F_main_BB__136_46)) begin
		main_136_140_reg <= main_136_140;
		if (start == 1'b0 && ^(main_136_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %136*/
	/*   %141 = ashr i32 %140, 15*/
		main_136_141 = ($signed(main_136_140) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %136*/
	/*   %141 = ashr i32 %140, 15*/
	if ((cur_state == LEGUP_F_main_BB__136_46)) begin
		main_136_141_reg <= main_136_141;
		if (start == 1'b0 && ^(main_136_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %136*/
	/*   %142 = icmp sgt i32 %m.0.i.i.i, %141*/
		main_136_142 = ($signed(main_legup_memset_4_i64exit_m0iii_reg) > $signed(main_136_141));
end
always @(posedge clk) begin
	/* main: %136*/
	/*   %142 = icmp sgt i32 %m.0.i.i.i, %141*/
	if ((cur_state == LEGUP_F_main_BB__136_46)) begin
		main_136_142_reg <= main_136_142;
		if (start == 1'b0 && ^(main_136_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %137, %136 ], [ %138, %133 ]*/
	if ((((cur_state == LEGUP_F_main_BB__133_43) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd0))) begin
		main_quantlexiti_mil0lcssaii = main_136_138_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %137, %136 ], [ %138, %133 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__136_46) & (memory_controller_waitrequest == 1'd0)) & (main_136_142 == 1'd0))) */ begin
		main_quantlexiti_mil0lcssaii = main_136_137_reg;
	end
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %137, %136 ], [ %138, %133 ]*/
	if ((((cur_state == LEGUP_F_main_BB__133_43) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd0))) begin
		main_quantlexiti_mil0lcssaii_reg <= main_quantlexiti_mil0lcssaii;
		if (start == 1'b0 && ^(main_quantlexiti_mil0lcssaii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_mil0lcssaii_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %137, %136 ], [ %138, %133 ]*/
	if ((((cur_state == LEGUP_F_main_BB__136_46) & (memory_controller_waitrequest == 1'd0)) & (main_136_142 == 1'd0))) begin
		main_quantlexiti_mil0lcssaii_reg <= main_quantlexiti_mil0lcssaii;
		if (start == 1'b0 && ^(main_quantlexiti_mil0lcssaii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_mil0lcssaii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %quant26bt_pos.quant26bt_neg.i.i = select i1 %131, [31 x i32]* @quant26bt_pos, [31 x i32]* @quant26bt_neg*/
		main_quantlexiti_quant26bt_posquant26bt_negii = (main_legup_memset_4_i64exit_131_reg ? `TAG_g_quant26bt_pos_a : `TAG_g_quant26bt_neg_a);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %quant26bt_pos.quant26bt_neg.i.i = select i1 %131, [31 x i32]* @quant26bt_pos, [31 x i32]* @quant26bt_neg*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_47)) begin
		main_quantlexiti_quant26bt_posquant26bt_negii_reg <= main_quantlexiti_quant26bt_posquant26bt_negii;
		if (start == 1'b0 && ^(main_quantlexiti_quant26bt_posquant26bt_negii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_quant26bt_posquant26bt_negii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %ril.0.in.i.i = getelementptr inbounds [31 x i32]* %quant26bt_pos.quant26bt_neg.i.i, i32 0, i32 %mil.0.lcssa.i.i*/
		main_quantlexiti_ril0inii = (main_quantlexiti_quant26bt_posquant26bt_negii_reg + (4 * main_quantlexiti_mil0lcssaii_reg));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %ril.0.in.i.i = getelementptr inbounds [31 x i32]* %quant26bt_pos.quant26bt_neg.i.i, i32 0, i32 %mil.0.lcssa.i.i*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_ril0inii_reg <= main_quantlexiti_ril0inii;
		if (start == 1'b0 && ^(main_quantlexiti_ril0inii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_ril0inii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
		main_quantlexiti_ril0ii = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_50)) begin
		main_quantlexiti_ril0ii_reg <= main_quantlexiti_ril0ii;
		if (start == 1'b0 && ^(main_quantlexiti_ril0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_ril0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %143 = ashr i32 %ril.0.i.i, 2*/
		main_quantlexiti_143 = ($signed(main_quantlexiti_ril0ii) >>> 32'd2);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %143 = ashr i32 %ril.0.i.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_50)) begin
		main_quantlexiti_143_reg <= main_quantlexiti_143;
		if (start == 1'b0 && ^(main_quantlexiti_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %144 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %143*/
		main_quantlexiti_144 = (1'd0 | (4 * main_quantlexiti_143));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %144 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %143*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_50)) begin
		main_quantlexiti_144_reg <= main_quantlexiti_144;
		if (start == 1'b0 && ^(main_quantlexiti_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %145 = load i32* %144, align 4, !tbaa !1*/
		main_quantlexiti_145 = qq4_code4_table_out_a;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %145 = load i32* %144, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_51)) begin
		main_quantlexiti_145_reg <= main_quantlexiti_145;
		if (start == 1'b0 && ^(main_quantlexiti_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_145_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_146 = main_quantlexiti_146_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %146 = mul nsw i32 %145, %detl.0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_52)) begin
		main_quantlexiti_146_reg <= main_quantlexiti_146;
		if (start == 1'b0 && ^(main_quantlexiti_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_146_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %146 = mul nsw i32 %145, %detl.0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_52)) begin
		main_quantlexiti_146_reg <= main_quantlexiti_146;
		if (start == 1'b0 && ^(main_quantlexiti_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %147 = ashr i32 %146, 15*/
		main_quantlexiti_147 = ($signed(main_quantlexiti_146) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %147 = ashr i32 %146, 15*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_52)) begin
		main_quantlexiti_147_reg <= main_quantlexiti_147;
		if (start == 1'b0 && ^(main_quantlexiti_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %148 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %143*/
		main_quantlexiti_148 = (1'd0 | (4 * main_quantlexiti_143));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %148 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %143*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_50)) begin
		main_quantlexiti_148_reg <= main_quantlexiti_148;
		if (start == 1'b0 && ^(main_quantlexiti_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %149 = load i32* %148, align 4, !tbaa !1*/
		main_quantlexiti_149 = wl_code_table_out_a;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %149 = load i32* %148, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_51)) begin
		main_quantlexiti_149_reg <= main_quantlexiti_149;
		if (start == 1'b0 && ^(main_quantlexiti_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %150 = add nsw i32 %nbl.0, %149*/
		main_quantlexiti_150 = (main_legup_memset_4_i64exit_nbl0_reg + main_quantlexiti_149);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %150 = add nsw i32 %nbl.0, %149*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_51)) begin
		main_quantlexiti_150_reg <= main_quantlexiti_150;
		if (start == 1'b0 && ^(main_quantlexiti_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %151 = icmp slt i32 %150, 0*/
		main_quantlexiti_151 = ($signed(main_quantlexiti_150) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %151 = icmp slt i32 %150, 0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_51)) begin
		main_quantlexiti_151_reg <= main_quantlexiti_151;
		if (start == 1'b0 && ^(main_quantlexiti_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i11.i = select i1 %151, i32 0, i32 %150*/
		main_quantlexiti_i11i = (main_quantlexiti_151 ? 32'd0 : main_quantlexiti_150);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %..i11.i = select i1 %151, i32 0, i32 %150*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_51)) begin
		main_quantlexiti_i11i_reg <= main_quantlexiti_i11i;
		if (start == 1'b0 && ^(main_quantlexiti_i11i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i11i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %152 = icmp sgt i32 %..i11.i, 18432*/
		main_quantlexiti_152 = ($signed(main_quantlexiti_i11i) > $signed(32'd18432));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %152 = icmp sgt i32 %..i11.i, 18432*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_51)) begin
		main_quantlexiti_152_reg <= main_quantlexiti_152;
		if (start == 1'b0 && ^(main_quantlexiti_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i12.i = select i1 %152, i32 18432, i32 %..i11.i*/
		main_quantlexiti_i12i = (main_quantlexiti_152 ? 32'd18432 : main_quantlexiti_i11i);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %...i12.i = select i1 %152, i32 18432, i32 %..i11.i*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_51)) begin
		main_quantlexiti_i12i_reg <= main_quantlexiti_i12i;
		if (start == 1'b0 && ^(main_quantlexiti_i12i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i12i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %153 = lshr i32 %...i12.i, 6*/
		main_quantlexiti_153 = (main_quantlexiti_i12i >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %153 = lshr i32 %...i12.i, 6*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_51)) begin
		main_quantlexiti_153_reg <= main_quantlexiti_153;
		if (start == 1'b0 && ^(main_quantlexiti_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %154 = and i32 %153, 31*/
		main_quantlexiti_154 = (main_quantlexiti_153 & 32'd31);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %154 = and i32 %153, 31*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_51)) begin
		main_quantlexiti_154_reg <= main_quantlexiti_154;
		if (start == 1'b0 && ^(main_quantlexiti_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %155 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %154*/
		main_quantlexiti_155 = (1'd0 | (4 * main_quantlexiti_154_reg));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %155 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %154*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_52)) begin
		main_quantlexiti_155_reg <= main_quantlexiti_155;
		if (start == 1'b0 && ^(main_quantlexiti_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %156 = load i32* %155, align 4, !tbaa !1*/
		main_quantlexiti_156 = ilb_table_out_a;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %156 = load i32* %155, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_156_reg <= main_quantlexiti_156;
		if (start == 1'b0 && ^(main_quantlexiti_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %157 = add nsw i32 %125, %147*/
		main_quantlexiti_157 = (main_legup_memset_4_i64exit_125_reg + main_quantlexiti_147);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %157 = add nsw i32 %125, %147*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_52)) begin
		main_quantlexiti_157_reg <= main_quantlexiti_157;
		if (start == 1'b0 && ^(main_quantlexiti_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %158 = shl nsw i32 %al1.0, 2*/
		main_quantlexiti_158 = (main_legup_memset_4_i64exit_al10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %158 = shl nsw i32 %al1.0, 2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_47)) begin
		main_quantlexiti_158_reg <= main_quantlexiti_158;
		if (start == 1'b0 && ^(main_quantlexiti_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_158_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_159 = main_quantlexiti_159_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %159 = mul nsw i32 %plt1.0, %157*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_159_reg <= main_quantlexiti_159;
		if (start == 1'b0 && ^(main_quantlexiti_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_159_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %159 = mul nsw i32 %plt1.0, %157*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_159_reg <= main_quantlexiti_159;
		if (start == 1'b0 && ^(main_quantlexiti_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %160 = icmp sgt i32 %159, -1*/
		main_quantlexiti_160 = ($signed(main_quantlexiti_159) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %160 = icmp sgt i32 %159, -1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_160_reg <= main_quantlexiti_160;
		if (start == 1'b0 && ^(main_quantlexiti_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %161 = sub nsw i32 0, %158*/
		main_quantlexiti_161 = (32'd0 - main_quantlexiti_158);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %161 = sub nsw i32 0, %158*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_47)) begin
		main_quantlexiti_161_reg <= main_quantlexiti_161;
		if (start == 1'b0 && ^(main_quantlexiti_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.1.i7.i = select i1 %160, i32 %161, i32 %158*/
		main_quantlexiti_1i7i = (main_quantlexiti_160 ? main_quantlexiti_161_reg : main_quantlexiti_158_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %.1.i7.i = select i1 %160, i32 %161, i32 %158*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_1i7i_reg <= main_quantlexiti_1i7i;
		if (start == 1'b0 && ^(main_quantlexiti_1i7i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_1i7i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %162 = ashr i32 %.1.i7.i, 7*/
		main_quantlexiti_162 = ($signed(main_quantlexiti_1i7i) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %162 = ashr i32 %.1.i7.i, 7*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_162_reg <= main_quantlexiti_162;
		if (start == 1'b0 && ^(main_quantlexiti_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_162_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_163 = main_quantlexiti_163_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %163 = mul nsw i32 %plt2.0, %157*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_163_reg <= main_quantlexiti_163;
		if (start == 1'b0 && ^(main_quantlexiti_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_163_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %163 = mul nsw i32 %plt2.0, %157*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_163_reg <= main_quantlexiti_163;
		if (start == 1'b0 && ^(main_quantlexiti_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %164 = ashr i32 %163, 31*/
		main_quantlexiti_164 = ($signed(main_quantlexiti_163) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %164 = ashr i32 %163, 31*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_164_reg <= main_quantlexiti_164;
		if (start == 1'b0 && ^(main_quantlexiti_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_164_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %165 = and i32 %164, -256*/
		main_quantlexiti_165 = (main_quantlexiti_164 & -32'd256);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %165 = and i32 %164, -256*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_165_reg <= main_quantlexiti_165;
		if (start == 1'b0 && ^(main_quantlexiti_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %166 = or i32 %165, 128*/
		main_quantlexiti_166 = (main_quantlexiti_165 | 32'd128);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %166 = or i32 %165, 128*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_166_reg <= main_quantlexiti_166;
		if (start == 1'b0 && ^(main_quantlexiti_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_166_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_167 = main_quantlexiti_167_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %167 = mul nsw i32 %al2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_167_reg <= main_quantlexiti_167;
		if (start == 1'b0 && ^(main_quantlexiti_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_167_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %167 = mul nsw i32 %al2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_167_reg <= main_quantlexiti_167;
		if (start == 1'b0 && ^(main_quantlexiti_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_167_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %168 = ashr i32 %167, 7*/
		main_quantlexiti_168 = ($signed(main_quantlexiti_167) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %168 = ashr i32 %167, 7*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_168_reg <= main_quantlexiti_168;
		if (start == 1'b0 && ^(main_quantlexiti_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_168_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i8.i = add nsw i32 %162, %168*/
		main_quantlexiti_wd40i8i = (main_quantlexiti_162 + main_quantlexiti_168_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i8.i = add nsw i32 %162, %168*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_wd40i8i_reg <= main_quantlexiti_wd40i8i;
		if (start == 1'b0 && ^(main_quantlexiti_wd40i8i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_wd40i8i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %169 = add nsw i32 %wd4.0.i8.i, %166*/
		main_quantlexiti_169 = (main_quantlexiti_wd40i8i + main_quantlexiti_166);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %169 = add nsw i32 %wd4.0.i8.i, %166*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_169_reg <= main_quantlexiti_169;
		if (start == 1'b0 && ^(main_quantlexiti_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %170 = icmp sgt i32 %169, 12288*/
		main_quantlexiti_170 = ($signed(main_quantlexiti_169) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %170 = icmp sgt i32 %169, 12288*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_170_reg <= main_quantlexiti_170;
		if (start == 1'b0 && ^(main_quantlexiti_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i9.i = select i1 %170, i32 12288, i32 %169*/
		main_quantlexiti_i9i = (main_quantlexiti_170 ? 32'd12288 : main_quantlexiti_169);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %..i9.i = select i1 %170, i32 12288, i32 %169*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_i9i_reg <= main_quantlexiti_i9i;
		if (start == 1'b0 && ^(main_quantlexiti_i9i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i9i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %171 = icmp slt i32 %..i9.i, -12288*/
		main_quantlexiti_171 = ($signed(main_quantlexiti_i9i_reg) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %171 = icmp slt i32 %..i9.i, -12288*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_quantlexiti_171_reg <= main_quantlexiti_171;
		if (start == 1'b0 && ^(main_quantlexiti_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i10.i = select i1 %171, i32 -12288, i32 %..i9.i*/
		main_quantlexiti_i10i = (main_quantlexiti_171 ? -32'd12288 : main_quantlexiti_i9i_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %...i10.i = select i1 %171, i32 -12288, i32 %..i9.i*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_quantlexiti_i10i_reg <= main_quantlexiti_i10i;
		if (start == 1'b0 && ^(main_quantlexiti_i10i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i10i_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_172 = main_quantlexiti_172_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %172 = mul nsw i32 %al1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_172_reg <= main_quantlexiti_172;
		if (start == 1'b0 && ^(main_quantlexiti_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_172_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %172 = mul nsw i32 %al1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_172_reg <= main_quantlexiti_172;
		if (start == 1'b0 && ^(main_quantlexiti_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %173 = ashr i32 %172, 8*/
		main_quantlexiti_173 = ($signed(main_quantlexiti_172) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %173 = ashr i32 %172, 8*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_173_reg <= main_quantlexiti_173;
		if (start == 1'b0 && ^(main_quantlexiti_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %174 = ashr i32 %159, 31*/
		main_quantlexiti_174 = ($signed(main_quantlexiti_159) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %174 = ashr i32 %159, 31*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_174_reg <= main_quantlexiti_174;
		if (start == 1'b0 && ^(main_quantlexiti_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %175 = and i32 %174, -384*/
		main_quantlexiti_175 = (main_quantlexiti_174 & -32'd384);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %175 = and i32 %174, -384*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_175_reg <= main_quantlexiti_175;
		if (start == 1'b0 && ^(main_quantlexiti_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %176 = add nsw i32 %173, 192*/
		main_quantlexiti_176 = (main_quantlexiti_173 + 32'd192);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %176 = add nsw i32 %173, 192*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_176_reg <= main_quantlexiti_176;
		if (start == 1'b0 && ^(main_quantlexiti_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_176_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i4.i = add nsw i32 %176, %175*/
		main_quantlexiti_apl10i4i = (main_quantlexiti_176_reg + main_quantlexiti_175);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i4.i = add nsw i32 %176, %175*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_apl10i4i_reg <= main_quantlexiti_apl10i4i;
		if (start == 1'b0 && ^(main_quantlexiti_apl10i4i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_apl10i4i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %177 = sub nsw i32 15360, %...i10.i*/
		main_quantlexiti_177 = (32'd15360 - main_quantlexiti_i10i);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %177 = sub nsw i32 15360, %...i10.i*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_quantlexiti_177_reg <= main_quantlexiti_177;
		if (start == 1'b0 && ^(main_quantlexiti_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %178 = icmp sgt i32 %apl1.0.i4.i, %177*/
		main_quantlexiti_178 = ($signed(main_quantlexiti_apl10i4i_reg) > $signed(main_quantlexiti_177));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %178 = icmp sgt i32 %apl1.0.i4.i, %177*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_quantlexiti_178_reg <= main_quantlexiti_178;
		if (start == 1'b0 && ^(main_quantlexiti_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i5.i = select i1 %178, i32 %177, i32 %apl1.0.i4.i*/
		main_quantlexiti_apl10i5i = (main_quantlexiti_178 ? main_quantlexiti_177 : main_quantlexiti_apl10i4i_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i5.i = select i1 %178, i32 %177, i32 %apl1.0.i4.i*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_quantlexiti_apl10i5i_reg <= main_quantlexiti_apl10i5i;
		if (start == 1'b0 && ^(main_quantlexiti_apl10i5i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_apl10i5i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %179 = sub nsw i32 0, %177*/
		main_quantlexiti_179 = (32'd0 - main_quantlexiti_177);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %179 = sub nsw i32 0, %177*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_quantlexiti_179_reg <= main_quantlexiti_179;
		if (start == 1'b0 && ^(main_quantlexiti_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
		main_quantlexiti_180 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_57)) begin
		main_quantlexiti_180_reg <= main_quantlexiti_180;
		if (start == 1'b0 && ^(main_quantlexiti_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %181 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
		main_quantlexiti_181 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %181 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_57)) begin
		main_quantlexiti_181_reg <= main_quantlexiti_181;
		if (start == 1'b0 && ^(main_quantlexiti_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_181_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_182 = main_quantlexiti_182_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %182 = mul nsw i32 %181, %180*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_58)) begin
		main_quantlexiti_182_reg <= main_quantlexiti_182;
		if (start == 1'b0 && ^(main_quantlexiti_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_182_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %182 = mul nsw i32 %181, %180*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_58)) begin
		main_quantlexiti_182_reg <= main_quantlexiti_182;
		if (start == 1'b0 && ^(main_quantlexiti_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %183 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
		main_quantlexiti_183 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %183 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_58)) begin
		main_quantlexiti_183_reg <= main_quantlexiti_183;
		if (start == 1'b0 && ^(main_quantlexiti_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %184 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
		main_quantlexiti_184 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %184 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_58)) begin
		main_quantlexiti_184_reg <= main_quantlexiti_184;
		if (start == 1'b0 && ^(main_quantlexiti_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_184_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_185 = main_quantlexiti_185_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %185 = mul nsw i32 %184, %183*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_59)) begin
		main_quantlexiti_185_reg <= main_quantlexiti_185;
		if (start == 1'b0 && ^(main_quantlexiti_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_185_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %185 = mul nsw i32 %184, %183*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_59)) begin
		main_quantlexiti_185_reg <= main_quantlexiti_185;
		if (start == 1'b0 && ^(main_quantlexiti_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %186 = add nsw i32 %185, %182*/
		main_quantlexiti_186 = (main_quantlexiti_185 + main_quantlexiti_182_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %186 = add nsw i32 %185, %182*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_59)) begin
		main_quantlexiti_186_reg <= main_quantlexiti_186;
		if (start == 1'b0 && ^(main_quantlexiti_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %187 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
		main_quantlexiti_187 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %187 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_59)) begin
		main_quantlexiti_187_reg <= main_quantlexiti_187;
		if (start == 1'b0 && ^(main_quantlexiti_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %188 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
		main_quantlexiti_188 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %188 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_59)) begin
		main_quantlexiti_188_reg <= main_quantlexiti_188;
		if (start == 1'b0 && ^(main_quantlexiti_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_188_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_189 = main_quantlexiti_189_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %189 = mul nsw i32 %188, %187*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		main_quantlexiti_189_reg <= main_quantlexiti_189;
		if (start == 1'b0 && ^(main_quantlexiti_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_189_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %189 = mul nsw i32 %188, %187*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		main_quantlexiti_189_reg <= main_quantlexiti_189;
		if (start == 1'b0 && ^(main_quantlexiti_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %190 = add nsw i32 %186, %189*/
		main_quantlexiti_190 = (main_quantlexiti_186_reg + main_quantlexiti_189);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %190 = add nsw i32 %186, %189*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		main_quantlexiti_190_reg <= main_quantlexiti_190;
		if (start == 1'b0 && ^(main_quantlexiti_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %191 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
		main_quantlexiti_191 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %191 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		main_quantlexiti_191_reg <= main_quantlexiti_191;
		if (start == 1'b0 && ^(main_quantlexiti_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %192 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
		main_quantlexiti_192 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %192 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		main_quantlexiti_192_reg <= main_quantlexiti_192;
		if (start == 1'b0 && ^(main_quantlexiti_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_192_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_193 = main_quantlexiti_193_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %193 = mul nsw i32 %192, %191*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		main_quantlexiti_193_reg <= main_quantlexiti_193;
		if (start == 1'b0 && ^(main_quantlexiti_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_193_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %193 = mul nsw i32 %192, %191*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		main_quantlexiti_193_reg <= main_quantlexiti_193;
		if (start == 1'b0 && ^(main_quantlexiti_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %194 = add nsw i32 %190, %193*/
		main_quantlexiti_194 = (main_quantlexiti_190_reg + main_quantlexiti_193);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %194 = add nsw i32 %190, %193*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		main_quantlexiti_194_reg <= main_quantlexiti_194;
		if (start == 1'b0 && ^(main_quantlexiti_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_194_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %195 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
		main_quantlexiti_195 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %195 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		main_quantlexiti_195_reg <= main_quantlexiti_195;
		if (start == 1'b0 && ^(main_quantlexiti_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %196 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
		main_quantlexiti_196 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %196 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		main_quantlexiti_196_reg <= main_quantlexiti_196;
		if (start == 1'b0 && ^(main_quantlexiti_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_196_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_197 = main_quantlexiti_197_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %197 = mul nsw i32 %196, %195*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		main_quantlexiti_197_reg <= main_quantlexiti_197;
		if (start == 1'b0 && ^(main_quantlexiti_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_197_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %197 = mul nsw i32 %196, %195*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		main_quantlexiti_197_reg <= main_quantlexiti_197;
		if (start == 1'b0 && ^(main_quantlexiti_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_197_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %198 = add nsw i32 %194, %197*/
		main_quantlexiti_198 = (main_quantlexiti_194_reg + main_quantlexiti_197);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %198 = add nsw i32 %194, %197*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		main_quantlexiti_198_reg <= main_quantlexiti_198;
		if (start == 1'b0 && ^(main_quantlexiti_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_198_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %199 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
		main_quantlexiti_199 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %199 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		main_quantlexiti_199_reg <= main_quantlexiti_199;
		if (start == 1'b0 && ^(main_quantlexiti_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %200 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
		main_quantlexiti_200 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %200 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		main_quantlexiti_200_reg <= main_quantlexiti_200;
		if (start == 1'b0 && ^(main_quantlexiti_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_200_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_201 = main_quantlexiti_201_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %201 = mul nsw i32 %200, %199*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		main_quantlexiti_201_reg <= main_quantlexiti_201;
		if (start == 1'b0 && ^(main_quantlexiti_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_201_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %201 = mul nsw i32 %200, %199*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		main_quantlexiti_201_reg <= main_quantlexiti_201;
		if (start == 1'b0 && ^(main_quantlexiti_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %202 = add nsw i32 %198, %201*/
		main_quantlexiti_202 = (main_quantlexiti_198_reg + main_quantlexiti_201);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %202 = add nsw i32 %198, %201*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		main_quantlexiti_202_reg <= main_quantlexiti_202;
		if (start == 1'b0 && ^(main_quantlexiti_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %203 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 1, i32 0), align 4, !tbaa !1*/
		main_quantlexiti_203 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %203 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		main_quantlexiti_203_reg <= main_quantlexiti_203;
		if (start == 1'b0 && ^(main_quantlexiti_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %204 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 1, i32 0), align 4, !tbaa !1*/
		main_quantlexiti_204 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %204 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		main_quantlexiti_204_reg <= main_quantlexiti_204;
		if (start == 1'b0 && ^(main_quantlexiti_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %205 = add i32 %202, %203*/
		main_quantlexiti_205 = (main_quantlexiti_202 + main_quantlexiti_203);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %205 = add i32 %202, %203*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		main_quantlexiti_205_reg <= main_quantlexiti_205;
		if (start == 1'b0 && ^(main_quantlexiti_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %206 = add i32 %205, %204*/
		main_quantlexiti_206 = (main_quantlexiti_205 + main_quantlexiti_204);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %206 = add i32 %205, %204*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		main_quantlexiti_206_reg <= main_quantlexiti_206;
		if (start == 1'b0 && ^(main_quantlexiti_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_206_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %207 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 1), align 4, !tbaa !1*/
		main_quantlexiti_207 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %207 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		main_quantlexiti_207_reg <= main_quantlexiti_207;
		if (start == 1'b0 && ^(main_quantlexiti_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %208 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 1), align 4, !tbaa !1*/
		main_quantlexiti_208 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %208 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		main_quantlexiti_208_reg <= main_quantlexiti_208;
		if (start == 1'b0 && ^(main_quantlexiti_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %209 = add i32 %206, %207*/
		main_quantlexiti_209 = (main_quantlexiti_206_reg + main_quantlexiti_207);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %209 = add i32 %206, %207*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		main_quantlexiti_209_reg <= main_quantlexiti_209;
		if (start == 1'b0 && ^(main_quantlexiti_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_209_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %210 = add i32 %209, %208*/
		main_quantlexiti_210 = (main_quantlexiti_209 + main_quantlexiti_208);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %210 = add i32 %209, %208*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		main_quantlexiti_210_reg <= main_quantlexiti_210;
		if (start == 1'b0 && ^(main_quantlexiti_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %211 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 2), align 4, !tbaa !1*/
		main_quantlexiti_211 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %211 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		main_quantlexiti_211_reg <= main_quantlexiti_211;
		if (start == 1'b0 && ^(main_quantlexiti_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %212 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 2), align 4, !tbaa !1*/
		main_quantlexiti_212 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %212 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		main_quantlexiti_212_reg <= main_quantlexiti_212;
		if (start == 1'b0 && ^(main_quantlexiti_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_212_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %213 = add i32 %210, %211*/
		main_quantlexiti_213 = (main_quantlexiti_210_reg + main_quantlexiti_211);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %213 = add i32 %210, %211*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		main_quantlexiti_213_reg <= main_quantlexiti_213;
		if (start == 1'b0 && ^(main_quantlexiti_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_213_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %214 = add i32 %213, %212*/
		main_quantlexiti_214 = (main_quantlexiti_213 + main_quantlexiti_212);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %214 = add i32 %213, %212*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		main_quantlexiti_214_reg <= main_quantlexiti_214;
		if (start == 1'b0 && ^(main_quantlexiti_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_214_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %215 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 3), align 4, !tbaa !1*/
		main_quantlexiti_215 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %215 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		main_quantlexiti_215_reg <= main_quantlexiti_215;
		if (start == 1'b0 && ^(main_quantlexiti_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_215_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %216 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 3), align 4, !tbaa !1*/
		main_quantlexiti_216 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %216 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		main_quantlexiti_216_reg <= main_quantlexiti_216;
		if (start == 1'b0 && ^(main_quantlexiti_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %217 = add i32 %214, %215*/
		main_quantlexiti_217 = (main_quantlexiti_214_reg + main_quantlexiti_215);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %217 = add i32 %214, %215*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		main_quantlexiti_217_reg <= main_quantlexiti_217;
		if (start == 1'b0 && ^(main_quantlexiti_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_217_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %218 = add i32 %217, %216*/
		main_quantlexiti_218 = (main_quantlexiti_217 + main_quantlexiti_216);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %218 = add i32 %217, %216*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		main_quantlexiti_218_reg <= main_quantlexiti_218;
		if (start == 1'b0 && ^(main_quantlexiti_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_218_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %219 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 4), align 4, !tbaa !1*/
		main_quantlexiti_219 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %219 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_219_reg <= main_quantlexiti_219;
		if (start == 1'b0 && ^(main_quantlexiti_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_219_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %220 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 4), align 4, !tbaa !1*/
		main_quantlexiti_220 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %220 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_220_reg <= main_quantlexiti_220;
		if (start == 1'b0 && ^(main_quantlexiti_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_220_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %221 = add i32 %218, %219*/
		main_quantlexiti_221 = (main_quantlexiti_218_reg + main_quantlexiti_219);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %221 = add i32 %218, %219*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_221_reg <= main_quantlexiti_221;
		if (start == 1'b0 && ^(main_quantlexiti_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_221_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %222 = add i32 %221, %220*/
		main_quantlexiti_222 = (main_quantlexiti_221 + main_quantlexiti_220);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %222 = add i32 %221, %220*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_222_reg <= main_quantlexiti_222;
		if (start == 1'b0 && ^(main_quantlexiti_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_222_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %223 = ashr i32 %222, 14*/
		main_quantlexiti_223 = ($signed(main_quantlexiti_222) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %223 = ashr i32 %222, 14*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_223_reg <= main_quantlexiti_223;
		if (start == 1'b0 && ^(main_quantlexiti_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %224 = shl nsw i32 %rh2.0, 1*/
		main_quantlexiti_224 = (main_legup_memset_4_i64exit_rh20_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %224 = shl nsw i32 %rh2.0, 1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_47)) begin
		main_quantlexiti_224_reg <= main_quantlexiti_224;
		if (start == 1'b0 && ^(main_quantlexiti_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_224_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_225 = main_quantlexiti_225_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %225 = mul nsw i32 %224, %ah2.0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_225_reg <= main_quantlexiti_225;
		if (start == 1'b0 && ^(main_quantlexiti_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_225_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %225 = mul nsw i32 %224, %ah2.0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_225_reg <= main_quantlexiti_225;
		if (start == 1'b0 && ^(main_quantlexiti_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_225_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %226 = ashr i32 %225, 15*/
		main_quantlexiti_226 = ($signed(main_quantlexiti_225) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %226 = ashr i32 %225, 15*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_226_reg <= main_quantlexiti_226;
		if (start == 1'b0 && ^(main_quantlexiti_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_226_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %227 = add nsw i32 %226, %223*/
		main_quantlexiti_227 = (main_quantlexiti_226_reg + main_quantlexiti_223);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %227 = add nsw i32 %226, %223*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_227_reg <= main_quantlexiti_227;
		if (start == 1'b0 && ^(main_quantlexiti_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_227_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %228 = sub nsw i32 %81, %227*/
		main_quantlexiti_228 = (main_legup_memset_4_i64exit_81_reg - main_quantlexiti_227);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %228 = sub nsw i32 %81, %227*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_228_reg <= main_quantlexiti_228;
		if (start == 1'b0 && ^(main_quantlexiti_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_228_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %229 = ashr i32 %228, 31*/
		main_quantlexiti_229 = ($signed(main_quantlexiti_228) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %229 = ashr i32 %228, 31*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_229_reg <= main_quantlexiti_229;
		if (start == 1'b0 && ^(main_quantlexiti_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %230 = and i32 %229, -2*/
		main_quantlexiti_230 = (main_quantlexiti_229 & -32'd2);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %230 = and i32 %229, -2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_230_reg <= main_quantlexiti_230;
		if (start == 1'b0 && ^(main_quantlexiti_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_230_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_231 = main_quantlexiti_231_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %231 = mul nsw i32 %deth.0, 564*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_231_reg <= main_quantlexiti_231;
		if (start == 1'b0 && ^(main_quantlexiti_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_231_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %231 = mul nsw i32 %deth.0, 564*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_231_reg <= main_quantlexiti_231;
		if (start == 1'b0 && ^(main_quantlexiti_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_231_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %232 = ashr i32 %231, 12*/
		main_quantlexiti_232 = ($signed(main_quantlexiti_231) >>> 32'd12);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %232 = ashr i32 %231, 12*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_232_reg <= main_quantlexiti_232;
		if (start == 1'b0 && ^(main_quantlexiti_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_232_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %233 = icmp sgt i32 %228, -1*/
		main_quantlexiti_233 = ($signed(main_quantlexiti_228) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %233 = icmp sgt i32 %228, -1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_233_reg <= main_quantlexiti_233;
		if (start == 1'b0 && ^(main_quantlexiti_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_233_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %234 = sub nsw i32 0, %228*/
		main_quantlexiti_234 = (32'd0 - main_quantlexiti_228);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %234 = sub nsw i32 0, %228*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_234_reg <= main_quantlexiti_234;
		if (start == 1'b0 && ^(main_quantlexiti_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_234_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %m.0.i3.i = select i1 %233, i32 %228, i32 %234*/
		main_quantlexiti_m0i3i = (main_quantlexiti_233 ? main_quantlexiti_228 : main_quantlexiti_234);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %m.0.i3.i = select i1 %233, i32 %228, i32 %234*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_m0i3i_reg <= main_quantlexiti_m0i3i;
		if (start == 1'b0 && ^(main_quantlexiti_m0i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_m0i3i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %235 = icmp sgt i32 %m.0.i3.i, %232*/
		main_quantlexiti_235 = ($signed(main_quantlexiti_m0i3i_reg) > $signed(main_quantlexiti_232_reg));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %235 = icmp sgt i32 %m.0.i3.i, %232*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_235_reg <= main_quantlexiti_235;
		if (start == 1'b0 && ^(main_quantlexiti_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_235_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..v = select i1 %235, i32 2, i32 3*/
		main_quantlexiti_v = (main_quantlexiti_235 ? 32'd2 : 32'd3);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %..v = select i1 %235, i32 2, i32 3*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_v_reg <= main_quantlexiti_v;
		if (start == 1'b0 && ^(main_quantlexiti_v) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_v_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %. = add nsw i32 %230, %..v*/
		main_quantlexiti_ = (main_quantlexiti_230_reg + main_quantlexiti_v);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %. = add nsw i32 %230, %..v*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti__reg <= main_quantlexiti_;
		if (start == 1'b0 && ^(main_quantlexiti_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti__reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %236 = shl nsw i32 %232, 1*/
		main_quantlexiti_236 = (main_quantlexiti_232 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %236 = shl nsw i32 %232, 1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_236_reg <= main_quantlexiti_236;
		if (start == 1'b0 && ^(main_quantlexiti_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_236_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %237 = icmp sgt i32 %m.0.i3.i, %236*/
		main_quantlexiti_237 = ($signed(main_quantlexiti_m0i3i_reg) > $signed(main_quantlexiti_236_reg));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %237 = icmp sgt i32 %m.0.i3.i, %236*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_237_reg <= main_quantlexiti_237;
		if (start == 1'b0 && ^(main_quantlexiti_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_237_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %238 = add nsw i32 %., -2*/
		main_quantlexiti_238 = (main_quantlexiti_ + -32'd2);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %238 = add nsw i32 %., -2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_238_reg <= main_quantlexiti_238;
		if (start == 1'b0 && ^(main_quantlexiti_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_238_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %ih.1 = select i1 %237, i32 %238, i32 %.*/
		main_quantlexiti_ih1 = (main_quantlexiti_237 ? main_quantlexiti_238 : main_quantlexiti_);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %ih.1 = select i1 %237, i32 %238, i32 %.*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_ih1_reg <= main_quantlexiti_ih1;
		if (start == 1'b0 && ^(main_quantlexiti_ih1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_ih1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %239 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %ih.1*/
		main_quantlexiti_239 = (1'd0 | (4 * main_quantlexiti_ih1_reg));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %239 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %ih.1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_69)) begin
		main_quantlexiti_239_reg <= main_quantlexiti_239;
		if (start == 1'b0 && ^(main_quantlexiti_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_239_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %240 = load i32* %239, align 4, !tbaa !1*/
		main_quantlexiti_240 = qq2_code2_table_out_a;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %240 = load i32* %239, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_quantlexiti_240_reg <= main_quantlexiti_240;
		if (start == 1'b0 && ^(main_quantlexiti_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_240_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_241 = main_quantlexiti_241_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %241 = mul nsw i32 %240, %deth.0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_quantlexiti_241_reg <= main_quantlexiti_241;
		if (start == 1'b0 && ^(main_quantlexiti_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_241_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %241 = mul nsw i32 %240, %deth.0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_quantlexiti_241_reg <= main_quantlexiti_241;
		if (start == 1'b0 && ^(main_quantlexiti_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_241_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %242 = ashr i32 %241, 15*/
		main_quantlexiti_242 = ($signed(main_quantlexiti_241) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %242 = ashr i32 %241, 15*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_quantlexiti_242_reg <= main_quantlexiti_242;
		if (start == 1'b0 && ^(main_quantlexiti_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_242_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %243 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %ih.1*/
		main_quantlexiti_243 = (1'd0 | (4 * main_quantlexiti_ih1_reg));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %243 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %ih.1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_69)) begin
		main_quantlexiti_243_reg <= main_quantlexiti_243;
		if (start == 1'b0 && ^(main_quantlexiti_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_243_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %244 = load i32* %243, align 4, !tbaa !1*/
		main_quantlexiti_244 = wh_code_table_out_a;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %244 = load i32* %243, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_quantlexiti_244_reg <= main_quantlexiti_244;
		if (start == 1'b0 && ^(main_quantlexiti_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_244_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %245 = add nsw i32 %nbh.0, %244*/
		main_quantlexiti_245 = (main_legup_memset_4_i64exit_nbh0_reg + main_quantlexiti_244);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %245 = add nsw i32 %nbh.0, %244*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_quantlexiti_245_reg <= main_quantlexiti_245;
		if (start == 1'b0 && ^(main_quantlexiti_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_245_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %246 = icmp slt i32 %245, 0*/
		main_quantlexiti_246 = ($signed(main_quantlexiti_245) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %246 = icmp slt i32 %245, 0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_quantlexiti_246_reg <= main_quantlexiti_246;
		if (start == 1'b0 && ^(main_quantlexiti_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_246_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i1.i1 = select i1 %246, i32 0, i32 %245*/
		main_quantlexiti_i1i1 = (main_quantlexiti_246 ? 32'd0 : main_quantlexiti_245);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %..i1.i1 = select i1 %246, i32 0, i32 %245*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_quantlexiti_i1i1_reg <= main_quantlexiti_i1i1;
		if (start == 1'b0 && ^(main_quantlexiti_i1i1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i1i1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %247 = icmp sgt i32 %..i1.i1, 22528*/
		main_quantlexiti_247 = ($signed(main_quantlexiti_i1i1) > $signed(32'd22528));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %247 = icmp sgt i32 %..i1.i1, 22528*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_quantlexiti_247_reg <= main_quantlexiti_247;
		if (start == 1'b0 && ^(main_quantlexiti_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i2.i2 = select i1 %247, i32 22528, i32 %..i1.i1*/
		main_quantlexiti_i2i2 = (main_quantlexiti_247 ? 32'd22528 : main_quantlexiti_i1i1);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %...i2.i2 = select i1 %247, i32 22528, i32 %..i1.i1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_quantlexiti_i2i2_reg <= main_quantlexiti_i2i2;
		if (start == 1'b0 && ^(main_quantlexiti_i2i2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i2i2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %248 = lshr i32 %...i2.i2, 6*/
		main_quantlexiti_248 = (main_quantlexiti_i2i2 >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %248 = lshr i32 %...i2.i2, 6*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_quantlexiti_248_reg <= main_quantlexiti_248;
		if (start == 1'b0 && ^(main_quantlexiti_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_248_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %249 = and i32 %248, 31*/
		main_quantlexiti_249 = (main_quantlexiti_248 & 32'd31);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %249 = and i32 %248, 31*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_quantlexiti_249_reg <= main_quantlexiti_249;
		if (start == 1'b0 && ^(main_quantlexiti_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_249_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %250 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %249*/
		main_quantlexiti_250 = (1'd0 | (4 * main_quantlexiti_249_reg));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %250 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %249*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_quantlexiti_250_reg <= main_quantlexiti_250;
		if (start == 1'b0 && ^(main_quantlexiti_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_250_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %251 = load i32* %250, align 4, !tbaa !1*/
		main_quantlexiti_251 = ilb_table_out_a;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %251 = load i32* %250, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_251_reg <= main_quantlexiti_251;
		if (start == 1'b0 && ^(main_quantlexiti_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_251_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %252 = add nsw i32 %223, %242*/
		main_quantlexiti_252 = (main_quantlexiti_223_reg + main_quantlexiti_242);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %252 = add nsw i32 %223, %242*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_quantlexiti_252_reg <= main_quantlexiti_252;
		if (start == 1'b0 && ^(main_quantlexiti_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_252_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %253 = shl nsw i32 %ah1.0, 2*/
		main_quantlexiti_253 = (main_legup_memset_4_i64exit_ah10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %253 = shl nsw i32 %ah1.0, 2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_47)) begin
		main_quantlexiti_253_reg <= main_quantlexiti_253;
		if (start == 1'b0 && ^(main_quantlexiti_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_253_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_254 = main_quantlexiti_254_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %254 = mul nsw i32 %ph1.0, %252*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_254_reg <= main_quantlexiti_254;
		if (start == 1'b0 && ^(main_quantlexiti_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_254_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %254 = mul nsw i32 %ph1.0, %252*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_254_reg <= main_quantlexiti_254;
		if (start == 1'b0 && ^(main_quantlexiti_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_254_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %255 = icmp sgt i32 %254, -1*/
		main_quantlexiti_255 = ($signed(main_quantlexiti_254) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %255 = icmp sgt i32 %254, -1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_255_reg <= main_quantlexiti_255;
		if (start == 1'b0 && ^(main_quantlexiti_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_255_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %256 = sub nsw i32 0, %253*/
		main_quantlexiti_256 = (32'd0 - main_quantlexiti_253);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %256 = sub nsw i32 0, %253*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_47)) begin
		main_quantlexiti_256_reg <= main_quantlexiti_256;
		if (start == 1'b0 && ^(main_quantlexiti_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_256_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.1.i.i3 = select i1 %255, i32 %256, i32 %253*/
		main_quantlexiti_1ii3 = (main_quantlexiti_255 ? main_quantlexiti_256_reg : main_quantlexiti_253_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %.1.i.i3 = select i1 %255, i32 %256, i32 %253*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_1ii3_reg <= main_quantlexiti_1ii3;
		if (start == 1'b0 && ^(main_quantlexiti_1ii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_1ii3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %257 = ashr i32 %.1.i.i3, 7*/
		main_quantlexiti_257 = ($signed(main_quantlexiti_1ii3) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %257 = ashr i32 %.1.i.i3, 7*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_257_reg <= main_quantlexiti_257;
		if (start == 1'b0 && ^(main_quantlexiti_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_257_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_258 = main_quantlexiti_258_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %258 = mul nsw i32 %ph2.0, %252*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_258_reg <= main_quantlexiti_258;
		if (start == 1'b0 && ^(main_quantlexiti_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_258_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %258 = mul nsw i32 %ph2.0, %252*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_258_reg <= main_quantlexiti_258;
		if (start == 1'b0 && ^(main_quantlexiti_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_258_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %259 = ashr i32 %258, 31*/
		main_quantlexiti_259 = ($signed(main_quantlexiti_258) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %259 = ashr i32 %258, 31*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_259_reg <= main_quantlexiti_259;
		if (start == 1'b0 && ^(main_quantlexiti_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_259_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %260 = and i32 %259, -256*/
		main_quantlexiti_260 = (main_quantlexiti_259 & -32'd256);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %260 = and i32 %259, -256*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_260_reg <= main_quantlexiti_260;
		if (start == 1'b0 && ^(main_quantlexiti_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_260_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %261 = or i32 %260, 128*/
		main_quantlexiti_261 = (main_quantlexiti_260 | 32'd128);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %261 = or i32 %260, 128*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_261_reg <= main_quantlexiti_261;
		if (start == 1'b0 && ^(main_quantlexiti_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_261_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_262 = main_quantlexiti_262_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %262 = mul nsw i32 %ah2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_262_reg <= main_quantlexiti_262;
		if (start == 1'b0 && ^(main_quantlexiti_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_262_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %262 = mul nsw i32 %ah2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_262_reg <= main_quantlexiti_262;
		if (start == 1'b0 && ^(main_quantlexiti_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_262_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %263 = ashr i32 %262, 7*/
		main_quantlexiti_263 = ($signed(main_quantlexiti_262) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %263 = ashr i32 %262, 7*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_263_reg <= main_quantlexiti_263;
		if (start == 1'b0 && ^(main_quantlexiti_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_263_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i.i4 = add nsw i32 %257, %263*/
		main_quantlexiti_wd40ii4 = (main_quantlexiti_257 + main_quantlexiti_263_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i.i4 = add nsw i32 %257, %263*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_wd40ii4_reg <= main_quantlexiti_wd40ii4;
		if (start == 1'b0 && ^(main_quantlexiti_wd40ii4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_wd40ii4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %264 = add nsw i32 %wd4.0.i.i4, %261*/
		main_quantlexiti_264 = (main_quantlexiti_wd40ii4 + main_quantlexiti_261);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %264 = add nsw i32 %wd4.0.i.i4, %261*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_264_reg <= main_quantlexiti_264;
		if (start == 1'b0 && ^(main_quantlexiti_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_264_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %265 = icmp sgt i32 %264, 12288*/
		main_quantlexiti_265 = ($signed(main_quantlexiti_264) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %265 = icmp sgt i32 %264, 12288*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_265_reg <= main_quantlexiti_265;
		if (start == 1'b0 && ^(main_quantlexiti_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_265_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i.i5 = select i1 %265, i32 12288, i32 %264*/
		main_quantlexiti_ii5 = (main_quantlexiti_265 ? 32'd12288 : main_quantlexiti_264);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %..i.i5 = select i1 %265, i32 12288, i32 %264*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_ii5_reg <= main_quantlexiti_ii5;
		if (start == 1'b0 && ^(main_quantlexiti_ii5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_ii5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %266 = icmp slt i32 %..i.i5, -12288*/
		main_quantlexiti_266 = ($signed(main_quantlexiti_ii5_reg) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %266 = icmp slt i32 %..i.i5, -12288*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_quantlexiti_266_reg <= main_quantlexiti_266;
		if (start == 1'b0 && ^(main_quantlexiti_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_266_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i.i6 = select i1 %266, i32 -12288, i32 %..i.i5*/
		main_quantlexiti_ii6 = (main_quantlexiti_266 ? -32'd12288 : main_quantlexiti_ii5_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %...i.i6 = select i1 %266, i32 -12288, i32 %..i.i5*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_quantlexiti_ii6_reg <= main_quantlexiti_ii6;
		if (start == 1'b0 && ^(main_quantlexiti_ii6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_ii6_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_267 = main_quantlexiti_267_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %267 = mul nsw i32 %ah1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_267_reg <= main_quantlexiti_267;
		if (start == 1'b0 && ^(main_quantlexiti_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_267_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %267 = mul nsw i32 %ah1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_267_reg <= main_quantlexiti_267;
		if (start == 1'b0 && ^(main_quantlexiti_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_267_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %268 = ashr i32 %267, 8*/
		main_quantlexiti_268 = ($signed(main_quantlexiti_267) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %268 = ashr i32 %267, 8*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_268_reg <= main_quantlexiti_268;
		if (start == 1'b0 && ^(main_quantlexiti_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_268_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %269 = ashr i32 %254, 31*/
		main_quantlexiti_269 = ($signed(main_quantlexiti_254) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %269 = ashr i32 %254, 31*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_269_reg <= main_quantlexiti_269;
		if (start == 1'b0 && ^(main_quantlexiti_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_269_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %270 = and i32 %269, -384*/
		main_quantlexiti_270 = (main_quantlexiti_269 & -32'd384);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %270 = and i32 %269, -384*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_270_reg <= main_quantlexiti_270;
		if (start == 1'b0 && ^(main_quantlexiti_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_270_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %271 = add nsw i32 %268, 192*/
		main_quantlexiti_271 = (main_quantlexiti_268 + 32'd192);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %271 = add nsw i32 %268, 192*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_271_reg <= main_quantlexiti_271;
		if (start == 1'b0 && ^(main_quantlexiti_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_271_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i.i7 = add nsw i32 %271, %270*/
		main_quantlexiti_apl10ii7 = (main_quantlexiti_271_reg + main_quantlexiti_270);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i.i7 = add nsw i32 %271, %270*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_apl10ii7_reg <= main_quantlexiti_apl10ii7;
		if (start == 1'b0 && ^(main_quantlexiti_apl10ii7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_apl10ii7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %272 = sub nsw i32 15360, %...i.i6*/
		main_quantlexiti_272 = (32'd15360 - main_quantlexiti_ii6);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %272 = sub nsw i32 15360, %...i.i6*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_quantlexiti_272_reg <= main_quantlexiti_272;
		if (start == 1'b0 && ^(main_quantlexiti_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_272_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %273 = icmp sgt i32 %apl1.0.i.i7, %272*/
		main_quantlexiti_273 = ($signed(main_quantlexiti_apl10ii7_reg) > $signed(main_quantlexiti_272));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %273 = icmp sgt i32 %apl1.0.i.i7, %272*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_quantlexiti_273_reg <= main_quantlexiti_273;
		if (start == 1'b0 && ^(main_quantlexiti_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_273_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i.i8 = select i1 %273, i32 %272, i32 %apl1.0.i.i7*/
		main_quantlexiti_apl10ii8 = (main_quantlexiti_273 ? main_quantlexiti_272 : main_quantlexiti_apl10ii7_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i.i8 = select i1 %273, i32 %272, i32 %apl1.0.i.i7*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_quantlexiti_apl10ii8_reg <= main_quantlexiti_apl10ii8;
		if (start == 1'b0 && ^(main_quantlexiti_apl10ii8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_apl10ii8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %274 = sub nsw i32 0, %272*/
		main_quantlexiti_274 = (32'd0 - main_quantlexiti_272);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %274 = sub nsw i32 0, %272*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_quantlexiti_274_reg <= main_quantlexiti_274;
		if (start == 1'b0 && ^(main_quantlexiti_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_274_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %275 = shl nsw i32 %ih.1, 6*/
		main_quantlexiti_275 = (main_quantlexiti_ih1 <<< (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %275 = shl nsw i32 %ih.1, 6*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_275_reg <= main_quantlexiti_275;
		if (start == 1'b0 && ^(main_quantlexiti_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_275_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %276 = or i32 %275, %ril.0.i.i*/
		main_quantlexiti_276 = (main_quantlexiti_275 | main_quantlexiti_ril0ii_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %276 = or i32 %275, %ril.0.i.i*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_276_reg <= main_quantlexiti_276;
		if (start == 1'b0 && ^(main_quantlexiti_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_276_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_277 = main_signed_divide_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %277 = sdiv i32 %i.02.i, 2*/
	main_quantlexiti_277_reg = main_preheaderi_295_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %278 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %277*/
		main_quantlexiti_278 = (1'd0 | (4 * main_quantlexiti_277));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %278 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %277*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_quantlexiti_278_reg <= main_quantlexiti_278;
		if (start == 1'b0 && ^(main_quantlexiti_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_278_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %279 = icmp slt i32 %30, 100*/
		main_quantlexiti_279 = ($signed(main_legup_memset_4_i64exit_30_reg) < $signed(32'd100));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %279 = icmp slt i32 %30, 100*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_47)) begin
		main_quantlexiti_279_reg <= main_quantlexiti_279;
		if (start == 1'b0 && ^(main_quantlexiti_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_279_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %280 = add nsw i32 %242, %227*/
		main_encodeexit_crit_edge_280 = (main_quantlexiti_242_reg + main_quantlexiti_227_reg);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %280 = add nsw i32 %242, %227*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_83)) begin
		main_encodeexit_crit_edge_280_reg <= main_encodeexit_crit_edge_280;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_280_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %281 = icmp slt i32 %.apl1.0.i.i8, %274*/
		main_encodeexit_crit_edge_281 = ($signed(main_quantlexiti_apl10ii8_reg) < $signed(main_quantlexiti_274_reg));
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %281 = icmp slt i32 %.apl1.0.i.i8, %274*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_83)) begin
		main_encodeexit_crit_edge_281_reg <= main_encodeexit_crit_edge_281;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_281_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %apl1.2.i.i9 = select i1 %281, i32 %274, i32 %.apl1.0.i.i8*/
		main_encodeexit_crit_edge_apl12ii9 = (main_encodeexit_crit_edge_281 ? main_quantlexiti_274_reg : main_quantlexiti_apl10ii8_reg);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %apl1.2.i.i9 = select i1 %281, i32 %274, i32 %.apl1.0.i.i8*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_83)) begin
		main_encodeexit_crit_edge_apl12ii9_reg <= main_encodeexit_crit_edge_apl12ii9;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_apl12ii9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_apl12ii9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %282 = ashr i32 %...i2.i2, 11*/
		main_encodeexit_crit_edge_282 = ($signed(main_quantlexiti_i2i2_reg) >>> 32'd11);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %282 = ashr i32 %...i2.i2, 11*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_83)) begin
		main_encodeexit_crit_edge_282_reg <= main_encodeexit_crit_edge_282;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_282_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %283 = sub i32 11, %282*/
		main_encodeexit_crit_edge_283 = (32'd11 - main_encodeexit_crit_edge_282);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %283 = sub i32 11, %282*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_83)) begin
		main_encodeexit_crit_edge_283_reg <= main_encodeexit_crit_edge_283;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_283_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %284 = ashr i32 %251, %283*/
		main_encodeexit_crit_edge_284 = ($signed(main_quantlexiti_251_reg) >>> main_encodeexit_crit_edge_283);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %284 = ashr i32 %251, %283*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_83)) begin
		main_encodeexit_crit_edge_284_reg <= main_encodeexit_crit_edge_284;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_284_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %285 = shl i32 %284, 3*/
		main_encodeexit_crit_edge_285 = (main_encodeexit_crit_edge_284 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %285 = shl i32 %284, 3*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_83)) begin
		main_encodeexit_crit_edge_285_reg <= main_encodeexit_crit_edge_285;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_285_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %286 = add nsw i32 %147, %129*/
		main_encodeexit_crit_edge_286 = (main_quantlexiti_147_reg + main_legup_memset_4_i64exit_129_reg);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %286 = add nsw i32 %147, %129*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_83)) begin
		main_encodeexit_crit_edge_286_reg <= main_encodeexit_crit_edge_286;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_286_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %287 = icmp slt i32 %.apl1.0.i5.i, %179*/
		main_encodeexit_crit_edge_287 = ($signed(main_quantlexiti_apl10i5i_reg) < $signed(main_quantlexiti_179_reg));
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %287 = icmp slt i32 %.apl1.0.i5.i, %179*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_83)) begin
		main_encodeexit_crit_edge_287_reg <= main_encodeexit_crit_edge_287;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_287_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %apl1.2.i6.i = select i1 %287, i32 %179, i32 %.apl1.0.i5.i*/
		main_encodeexit_crit_edge_apl12i6i = (main_encodeexit_crit_edge_287 ? main_quantlexiti_179_reg : main_quantlexiti_apl10i5i_reg);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %apl1.2.i6.i = select i1 %287, i32 %179, i32 %.apl1.0.i5.i*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_83)) begin
		main_encodeexit_crit_edge_apl12i6i_reg <= main_encodeexit_crit_edge_apl12i6i;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_apl12i6i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_apl12i6i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %288 = ashr i32 %...i12.i, 11*/
		main_encodeexit_crit_edge_288 = ($signed(main_quantlexiti_i12i_reg) >>> 32'd11);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %288 = ashr i32 %...i12.i, 11*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_83)) begin
		main_encodeexit_crit_edge_288_reg <= main_encodeexit_crit_edge_288;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_288_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %289 = sub i32 9, %288*/
		main_encodeexit_crit_edge_289 = (32'd9 - main_encodeexit_crit_edge_288);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %289 = sub i32 9, %288*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_83)) begin
		main_encodeexit_crit_edge_289_reg <= main_encodeexit_crit_edge_289;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_289_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %290 = ashr i32 %156, %289*/
		main_encodeexit_crit_edge_290 = ($signed(main_quantlexiti_156_reg) >>> main_encodeexit_crit_edge_289);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %290 = ashr i32 %156, %289*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_83)) begin
		main_encodeexit_crit_edge_290_reg <= main_encodeexit_crit_edge_290;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_290_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %291 = shl i32 %290, 3*/
		main_encodeexit_crit_edge_291 = (main_encodeexit_crit_edge_290 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %291 = shl i32 %290, 3*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_83)) begin
		main_encodeexit_crit_edge_291_reg <= main_encodeexit_crit_edge_291;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_291_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_84)) begin
		main_encodeexit_crit_edge_pre_reg <= main_encodeexit_crit_edge_pre;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre16 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre16 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre16 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_84)) begin
		main_encodeexit_crit_edge_pre16_reg <= main_encodeexit_crit_edge_pre16;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre17 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre17 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre17 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_85)) begin
		main_encodeexit_crit_edge_pre17_reg <= main_encodeexit_crit_edge_pre17;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre18 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre18 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre18 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_85)) begin
		main_encodeexit_crit_edge_pre18_reg <= main_encodeexit_crit_edge_pre18;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre19 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre19 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre19 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_86)) begin
		main_encodeexit_crit_edge_pre19_reg <= main_encodeexit_crit_edge_pre19;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre20 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre20 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre20 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_86)) begin
		main_encodeexit_crit_edge_pre20_reg <= main_encodeexit_crit_edge_pre20;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre21 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre21 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre21 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_87)) begin
		main_encodeexit_crit_edge_pre21_reg <= main_encodeexit_crit_edge_pre21;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre22 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre22 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre22 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_87)) begin
		main_encodeexit_crit_edge_pre22_reg <= main_encodeexit_crit_edge_pre22;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre23 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre23 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre23 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_88)) begin
		main_encodeexit_crit_edge_pre23_reg <= main_encodeexit_crit_edge_pre23;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre24 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre24 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre24 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_88)) begin
		main_encodeexit_crit_edge_pre24_reg <= main_encodeexit_crit_edge_pre24;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre25 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre25 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre25 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_89)) begin
		main_encodeexit_crit_edge_pre25_reg <= main_encodeexit_crit_edge_pre25;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre26 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre26 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre26 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_89)) begin
		main_encodeexit_crit_edge_pre26_reg <= main_encodeexit_crit_edge_pre26;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre27 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre27 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre27 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_pre27_reg <= main_encodeexit_crit_edge_pre27;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre28 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre28 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre28 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_pre28_reg <= main_encodeexit_crit_edge_pre28;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre29 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre29 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre29 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		main_encodeexit_crit_edge_pre29_reg <= main_encodeexit_crit_edge_pre29;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre30 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre30 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre30 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		main_encodeexit_crit_edge_pre30_reg <= main_encodeexit_crit_edge_pre30;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre31 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre31 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre31 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_pre31_reg <= main_encodeexit_crit_edge_pre31;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre32 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre32 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre32 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_pre32_reg <= main_encodeexit_crit_edge_pre32;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre33 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre33 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre33 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		main_encodeexit_crit_edge_pre33_reg <= main_encodeexit_crit_edge_pre33;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre34 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre34 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre34 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		main_encodeexit_crit_edge_pre34_reg <= main_encodeexit_crit_edge_pre34;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre35 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre35 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre35 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		main_encodeexit_crit_edge_pre35_reg <= main_encodeexit_crit_edge_pre35;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre36 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre36 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre36 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		main_encodeexit_crit_edge_pre36_reg <= main_encodeexit_crit_edge_pre36;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre37 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre37 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre37 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		main_encodeexit_crit_edge_pre37_reg <= main_encodeexit_crit_edge_pre37;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre38 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		main_encodeexit_crit_edge_pre38_reg <= main_encodeexit_crit_edge_pre38;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre38_reg"); $finish; end
	end
end
always @(*) begin
	main_encodeexit_crit_edge_phitmp = main_encodeexit_crit_edge_phitmp_stage0_reg;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp = mul i32 %.pre37, -44*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		main_encodeexit_crit_edge_phitmp_reg <= main_encodeexit_crit_edge_phitmp;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp_reg"); $finish; end
	end
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp = mul i32 %.pre37, -44*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		main_encodeexit_crit_edge_phitmp_reg <= main_encodeexit_crit_edge_phitmp;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp_reg"); $finish; end
	end
end
always @(*) begin
	main_encodeexit_crit_edge_phitmp1 = main_encodeexit_crit_edge_phitmp1_stage0_reg;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp1 = mul i32 %.pre38, 12*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		main_encodeexit_crit_edge_phitmp1_reg <= main_encodeexit_crit_edge_phitmp1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp1_reg"); $finish; end
	end
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp1 = mul i32 %.pre38, 12*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		main_encodeexit_crit_edge_phitmp1_reg <= main_encodeexit_crit_edge_phitmp1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp1_reg"); $finish; end
	end
end
always @(*) begin
	main_encodeexit_crit_edge_phitmp2 = main_encodeexit_crit_edge_phitmp2_stage0_reg;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp2 = mul i32 %...i12.i, 127*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_84)) begin
		main_encodeexit_crit_edge_phitmp2_reg <= main_encodeexit_crit_edge_phitmp2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp2_reg"); $finish; end
	end
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp2 = mul i32 %...i12.i, 127*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_84)) begin
		main_encodeexit_crit_edge_phitmp2_reg <= main_encodeexit_crit_edge_phitmp2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp3 = ashr i32 %phitmp2, 7*/
		main_encodeexit_crit_edge_phitmp3 = ($signed(main_encodeexit_crit_edge_phitmp2) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp3 = ashr i32 %phitmp2, 7*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_84)) begin
		main_encodeexit_crit_edge_phitmp3_reg <= main_encodeexit_crit_edge_phitmp3;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp3_reg"); $finish; end
	end
end
always @(*) begin
	main_encodeexit_crit_edge_phitmp4 = main_encodeexit_crit_edge_phitmp4_stage0_reg;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp4 = mul i32 %...i2.i2, 127*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_84)) begin
		main_encodeexit_crit_edge_phitmp4_reg <= main_encodeexit_crit_edge_phitmp4;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp4_reg"); $finish; end
	end
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp4 = mul i32 %...i2.i2, 127*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_84)) begin
		main_encodeexit_crit_edge_phitmp4_reg <= main_encodeexit_crit_edge_phitmp4;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp5 = ashr i32 %phitmp4, 7*/
		main_encodeexit_crit_edge_phitmp5 = ($signed(main_encodeexit_crit_edge_phitmp4) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp5 = ashr i32 %phitmp4, 7*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_84)) begin
		main_encodeexit_crit_edge_phitmp5_reg <= main_encodeexit_crit_edge_phitmp5;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %indvar.next10 = add i32 %indvar9, 1*/
		main_encodeexit_crit_edge_indvarnext10 = (main_legup_memset_4_i64exit_indvar9_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %indvar.next10 = add i32 %indvar9, 1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_83)) begin
		main_encodeexit_crit_edge_indvarnext10_reg <= main_encodeexit_crit_edge_indvarnext10;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_indvarnext10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_indvarnext10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.preheader*/
	/*   %292 = getelementptr inbounds [64 x i32]* @qq6_code6_table, i32 0, i32 %ril.0.i.i*/
		main_preheaderipreheader_292 = (1'd0 | (4 * main_quantlexiti_ril0ii_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i.preheader*/
	/*   %292 = getelementptr inbounds [64 x i32]* @qq6_code6_table, i32 0, i32 %ril.0.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_97)) begin
		main_preheaderipreheader_292_reg <= main_preheaderipreheader_292;
		if (start == 1'b0 && ^(main_preheaderipreheader_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderipreheader_292_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.preheader*/
	/*   %293 = load i32* %292, align 4, !tbaa !1*/
		main_preheaderipreheader_293 = qq6_code6_table_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i.preheader*/
	/*   %293 = load i32* %292, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_98)) begin
		main_preheaderipreheader_293_reg <= main_preheaderipreheader_293;
		if (start == 1'b0 && ^(main_preheaderipreheader_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderipreheader_293_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_indvar = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_indvar = main_preheaderi_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_indvar_reg <= main_preheaderi_indvar;
		if (start == 1'b0 && ^(main_preheaderi_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_indvar_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_indvar_reg <= main_preheaderi_indvar;
		if (start == 1'b0 && ^(main_preheaderi_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd100 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumd100 = main_preheaderi_accumd90_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd100_reg <= main_preheaderi_accumd100;
		if (start == 1'b0 && ^(main_preheaderi_accumd100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd100_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumd100_reg <= main_preheaderi_accumd100;
		if (start == 1'b0 && ^(main_preheaderi_accumd100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd90 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumd90 = main_preheaderi_accumd80_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd90_reg <= main_preheaderi_accumd90;
		if (start == 1'b0 && ^(main_preheaderi_accumd90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumd90_reg <= main_preheaderi_accumd90;
		if (start == 1'b0 && ^(main_preheaderi_accumd90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd80 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumd80 = main_preheaderi_accumd70_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd80_reg <= main_preheaderi_accumd80;
		if (start == 1'b0 && ^(main_preheaderi_accumd80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd80_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumd80_reg <= main_preheaderi_accumd80;
		if (start == 1'b0 && ^(main_preheaderi_accumd80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd70 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumd70 = main_preheaderi_accumd60_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd70_reg <= main_preheaderi_accumd70;
		if (start == 1'b0 && ^(main_preheaderi_accumd70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd70_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumd70_reg <= main_preheaderi_accumd70;
		if (start == 1'b0 && ^(main_preheaderi_accumd70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd60 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumd60 = main_preheaderi_accumd50_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd60_reg <= main_preheaderi_accumd60;
		if (start == 1'b0 && ^(main_preheaderi_accumd60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd60_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumd60_reg <= main_preheaderi_accumd60;
		if (start == 1'b0 && ^(main_preheaderi_accumd60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd50 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumd50 = main_preheaderi_accumd40_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd50_reg <= main_preheaderi_accumd50;
		if (start == 1'b0 && ^(main_preheaderi_accumd50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd50_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumd50_reg <= main_preheaderi_accumd50;
		if (start == 1'b0 && ^(main_preheaderi_accumd50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd40 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumd40 = main_preheaderi_accumd30_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd40_reg <= main_preheaderi_accumd40;
		if (start == 1'b0 && ^(main_preheaderi_accumd40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd40_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumd40_reg <= main_preheaderi_accumd40;
		if (start == 1'b0 && ^(main_preheaderi_accumd40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd30 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumd30 = main_preheaderi_accumd20_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd30_reg <= main_preheaderi_accumd30;
		if (start == 1'b0 && ^(main_preheaderi_accumd30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd30_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumd30_reg <= main_preheaderi_accumd30;
		if (start == 1'b0 && ^(main_preheaderi_accumd30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumd20 = main_preheaderi_accumd10_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd20_reg <= main_preheaderi_accumd20;
		if (start == 1'b0 && ^(main_preheaderi_accumd20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumd20_reg <= main_preheaderi_accumd20;
		if (start == 1'b0 && ^(main_preheaderi_accumd20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumd10 = main_preheaderi_accumd00_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd10_reg <= main_preheaderi_accumd10;
		if (start == 1'b0 && ^(main_preheaderi_accumd10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumd10_reg <= main_preheaderi_accumd10;
		if (start == 1'b0 && ^(main_preheaderi_accumd10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %489, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd00 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %489, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumd00 = main_preheaderi_489_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %489, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd00_reg <= main_preheaderi_accumd00;
		if (start == 1'b0 && ^(main_preheaderi_accumd00) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd00_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %489, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumd00_reg <= main_preheaderi_accumd00;
		if (start == 1'b0 && ^(main_preheaderi_accumd00) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd00_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc100 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumc100 = main_preheaderi_accumc90_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc100_reg <= main_preheaderi_accumc100;
		if (start == 1'b0 && ^(main_preheaderi_accumc100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc100_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumc100_reg <= main_preheaderi_accumc100;
		if (start == 1'b0 && ^(main_preheaderi_accumc100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc90 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumc90 = main_preheaderi_accumc80_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc90_reg <= main_preheaderi_accumc90;
		if (start == 1'b0 && ^(main_preheaderi_accumc90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumc90_reg <= main_preheaderi_accumc90;
		if (start == 1'b0 && ^(main_preheaderi_accumc90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc80 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumc80 = main_preheaderi_accumc70_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc80_reg <= main_preheaderi_accumc80;
		if (start == 1'b0 && ^(main_preheaderi_accumc80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc80_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumc80_reg <= main_preheaderi_accumc80;
		if (start == 1'b0 && ^(main_preheaderi_accumc80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc70 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumc70 = main_preheaderi_accumc60_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc70_reg <= main_preheaderi_accumc70;
		if (start == 1'b0 && ^(main_preheaderi_accumc70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc70_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumc70_reg <= main_preheaderi_accumc70;
		if (start == 1'b0 && ^(main_preheaderi_accumc70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc60 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumc60 = main_preheaderi_accumc50_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc60_reg <= main_preheaderi_accumc60;
		if (start == 1'b0 && ^(main_preheaderi_accumc60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc60_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumc60_reg <= main_preheaderi_accumc60;
		if (start == 1'b0 && ^(main_preheaderi_accumc60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc50 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumc50 = main_preheaderi_accumc40_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc50_reg <= main_preheaderi_accumc50;
		if (start == 1'b0 && ^(main_preheaderi_accumc50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc50_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumc50_reg <= main_preheaderi_accumc50;
		if (start == 1'b0 && ^(main_preheaderi_accumc50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc40 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumc40 = main_preheaderi_accumc30_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc40_reg <= main_preheaderi_accumc40;
		if (start == 1'b0 && ^(main_preheaderi_accumc40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc40_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumc40_reg <= main_preheaderi_accumc40;
		if (start == 1'b0 && ^(main_preheaderi_accumc40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc30 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumc30 = main_preheaderi_accumc20_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc30_reg <= main_preheaderi_accumc30;
		if (start == 1'b0 && ^(main_preheaderi_accumc30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc30_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumc30_reg <= main_preheaderi_accumc30;
		if (start == 1'b0 && ^(main_preheaderi_accumc30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumc20 = main_preheaderi_accumc10_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc20_reg <= main_preheaderi_accumc20;
		if (start == 1'b0 && ^(main_preheaderi_accumc20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumc20_reg <= main_preheaderi_accumc20;
		if (start == 1'b0 && ^(main_preheaderi_accumc20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumc10 = main_preheaderi_accumc00_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc10_reg <= main_preheaderi_accumc10;
		if (start == 1'b0 && ^(main_preheaderi_accumc10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumc10_reg <= main_preheaderi_accumc10;
		if (start == 1'b0 && ^(main_preheaderi_accumc10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %488, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc00 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %488, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumc00 = main_preheaderi_488_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %488, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc00_reg <= main_preheaderi_accumc00;
		if (start == 1'b0 && ^(main_preheaderi_accumc00) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc00_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %488, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumc00_reg <= main_preheaderi_accumc00;
		if (start == 1'b0 && ^(main_preheaderi_accumc00) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc00_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ph20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_ph20 = main_preheaderi_dec_ph10_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ph20_reg <= main_preheaderi_dec_ph20;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_ph20_reg <= main_preheaderi_dec_ph20;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %463, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ph10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %463, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_ph10 = main_preheaderi_463_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %463, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ph10_reg <= main_preheaderi_dec_ph10;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %463, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_ph10_reg <= main_preheaderi_dec_ph10;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_nbh0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_nbh0 = main_preheaderi_i2i_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_nbh0_reg <= main_preheaderi_dec_nbh0;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbh0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbh0_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_nbh0_reg <= main_preheaderi_dec_nbh0;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbh0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbh0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %462, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_deth0 = 32'd8;
	end
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %462, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_deth0 = main_preheaderi_462_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %462, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_deth0_reg <= main_preheaderi_dec_deth0;
		if (start == 1'b0 && ^(main_preheaderi_dec_deth0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_deth0_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %462, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_deth0_reg <= main_preheaderi_dec_deth0;
		if (start == 1'b0 && ^(main_preheaderi_dec_deth0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_deth0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ah20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_ah20 = main_preheaderi_ii_var1_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ah20_reg <= main_preheaderi_dec_ah20;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_ah20_reg <= main_preheaderi_dec_ah20;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rh20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_rh20 = main_preheaderi_dec_rh10_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rh20_reg <= main_preheaderi_dec_rh20;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_rh20_reg <= main_preheaderi_dec_rh20;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ah10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_ah10 = main_preheaderi_apl12ii;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ah10_reg <= main_preheaderi_dec_ah10;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_ah10_reg <= main_preheaderi_dec_ah10;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %487, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rh10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %487, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_rh10 = main_preheaderi_487_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %487, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rh10_reg <= main_preheaderi_dec_rh10;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %487, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_rh10_reg <= main_preheaderi_dec_rh10;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_plt20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_plt20 = main_preheaderi_dec_plt10_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_plt20_reg <= main_preheaderi_dec_plt20;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_plt20_reg <= main_preheaderi_dec_plt20;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %371, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_plt10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %371, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_plt10 = main_preheaderi_371_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %371, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_plt10_reg <= main_preheaderi_dec_plt10;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %371, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_plt10_reg <= main_preheaderi_dec_plt10;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_nbl0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_nbl0 = main_preheaderi_i11i_var0_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_nbl0_reg <= main_preheaderi_dec_nbl0;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbl0_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_nbl0_reg <= main_preheaderi_dec_nbl0;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbl0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %370, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_detl0 = 32'd32;
	end
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %370, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_detl0 = main_preheaderi_370_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %370, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_detl0_reg <= main_preheaderi_dec_detl0;
		if (start == 1'b0 && ^(main_preheaderi_dec_detl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_detl0_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %370, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_detl0_reg <= main_preheaderi_dec_detl0;
		if (start == 1'b0 && ^(main_preheaderi_dec_detl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_detl0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i9.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_al20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i9.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_al20 = main_preheaderi_i9i_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i9.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_al20_reg <= main_preheaderi_dec_al20;
		if (start == 1'b0 && ^(main_preheaderi_dec_al20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i9.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_al20_reg <= main_preheaderi_dec_al20;
		if (start == 1'b0 && ^(main_preheaderi_dec_al20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rlt20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_rlt20 = main_preheaderi_dec_rlt10_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rlt20_reg <= main_preheaderi_dec_rlt20;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_rlt20_reg <= main_preheaderi_dec_rlt20;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i5.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_al10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i5.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_al10 = main_preheaderi_apl12i5i_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i5.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_al10_reg <= main_preheaderi_dec_al10;
		if (start == 1'b0 && ^(main_preheaderi_dec_al10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i5.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_al10_reg <= main_preheaderi_dec_al10;
		if (start == 1'b0 && ^(main_preheaderi_dec_al10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %395, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rlt10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %395, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_rlt10 = main_preheaderi_395_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %395, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rlt10_reg <= main_preheaderi_dec_rlt10;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %395, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_153) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_rlt10_reg <= main_preheaderi_dec_rlt10;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %i.11.i = shl i32 %indvar, 1*/
		main_preheaderi_i11i = (main_preheaderi_indvar_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %i.11.i = shl i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) begin
		main_preheaderi_i11i_reg <= main_preheaderi_i11i;
		if (start == 1'b0 && ^(main_preheaderi_i11i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i11i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %294 = or i32 %i.11.i, 1*/
		main_preheaderi_294 = (main_preheaderi_i11i | 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %294 = or i32 %i.11.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) begin
		main_preheaderi_294_reg <= main_preheaderi_294;
		if (start == 1'b0 && ^(main_preheaderi_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_294_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %scevgep6 = getelementptr [100 x i32]* @result, i32 0, i32 %294*/
		main_preheaderi_scevgep6 = (1'd0 | (4 * main_preheaderi_294));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %scevgep6 = getelementptr [100 x i32]* @result, i32 0, i32 %294*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) begin
		main_preheaderi_scevgep6_reg <= main_preheaderi_scevgep6;
		if (start == 1'b0 && ^(main_preheaderi_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_scevgep6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %scevgep7 = getelementptr [100 x i32]* @result, i32 0, i32 %i.11.i*/
		main_preheaderi_scevgep7 = (1'd0 | (4 * main_preheaderi_i11i));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %scevgep7 = getelementptr [100 x i32]* @result, i32 0, i32 %i.11.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) begin
		main_preheaderi_scevgep7_reg <= main_preheaderi_scevgep7;
		if (start == 1'b0 && ^(main_preheaderi_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_scevgep7_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_295 = main_signed_divide_32_0;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %295 = sdiv i32 %i.11.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_131)) begin
		main_preheaderi_295_reg <= main_preheaderi_295;
		if (start == 1'b0 && ^(main_preheaderi_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_295_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %295 = sdiv i32 %i.11.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_131)) begin
		main_preheaderi_295_reg <= main_preheaderi_295;
		if (start == 1'b0 && ^(main_preheaderi_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_295_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %277 = sdiv i32 %i.02.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_preheaderi_295_reg <= main_quantlexiti_277;
		if (start == 1'b0 && ^(main_quantlexiti_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_295_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %296 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %295*/
		main_preheaderi_296 = (1'd0 | (4 * main_preheaderi_295));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %296 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %295*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_131)) begin
		main_preheaderi_296_reg <= main_preheaderi_296;
		if (start == 1'b0 && ^(main_preheaderi_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_296_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
		main_preheaderi_297 = compressed_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_132)) begin
		main_preheaderi_297_reg <= main_preheaderi_297;
		if (start == 1'b0 && ^(main_preheaderi_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_297_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %298 = ashr i32 %297, 6*/
		main_preheaderi_298 = ($signed(main_preheaderi_297) >>> 32'd6);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %298 = ashr i32 %297, 6*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_132)) begin
		main_preheaderi_298_reg <= main_preheaderi_298;
		if (start == 1'b0 && ^(main_preheaderi_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_298_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %299 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_299 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %299 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_preheaderi_299_reg <= main_preheaderi_299;
		if (start == 1'b0 && ^(main_preheaderi_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_299_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %300 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_300 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %300 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_preheaderi_300_reg <= main_preheaderi_300;
		if (start == 1'b0 && ^(main_preheaderi_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_300_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_301 = main_preheaderi_301_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %301 = mul nsw i32 %300, %299*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_301_reg <= main_preheaderi_301;
		if (start == 1'b0 && ^(main_preheaderi_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_301_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %301 = mul nsw i32 %300, %299*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_301_reg <= main_preheaderi_301;
		if (start == 1'b0 && ^(main_preheaderi_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_301_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %302 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_302 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %302 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_302_reg <= main_preheaderi_302;
		if (start == 1'b0 && ^(main_preheaderi_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_302_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %303 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_303 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %303 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_303_reg <= main_preheaderi_303;
		if (start == 1'b0 && ^(main_preheaderi_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_303_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_304 = main_preheaderi_304_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %304 = mul nsw i32 %303, %302*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		main_preheaderi_304_reg <= main_preheaderi_304;
		if (start == 1'b0 && ^(main_preheaderi_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_304_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %304 = mul nsw i32 %303, %302*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		main_preheaderi_304_reg <= main_preheaderi_304;
		if (start == 1'b0 && ^(main_preheaderi_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_304_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %305 = add nsw i32 %304, %301*/
		main_preheaderi_305 = (main_preheaderi_304 + main_preheaderi_301_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %305 = add nsw i32 %304, %301*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		main_preheaderi_305_reg <= main_preheaderi_305;
		if (start == 1'b0 && ^(main_preheaderi_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_305_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %306 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_306 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %306 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		main_preheaderi_306_reg <= main_preheaderi_306;
		if (start == 1'b0 && ^(main_preheaderi_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_306_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %307 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_307 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %307 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		main_preheaderi_307_reg <= main_preheaderi_307;
		if (start == 1'b0 && ^(main_preheaderi_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_307_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_308 = main_preheaderi_308_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %308 = mul nsw i32 %307, %306*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		main_preheaderi_308_reg <= main_preheaderi_308;
		if (start == 1'b0 && ^(main_preheaderi_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_308_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %308 = mul nsw i32 %307, %306*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		main_preheaderi_308_reg <= main_preheaderi_308;
		if (start == 1'b0 && ^(main_preheaderi_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_308_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %309 = add nsw i32 %305, %308*/
		main_preheaderi_309 = (main_preheaderi_305_reg + main_preheaderi_308);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %309 = add nsw i32 %305, %308*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		main_preheaderi_309_reg <= main_preheaderi_309;
		if (start == 1'b0 && ^(main_preheaderi_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_309_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %310 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_310 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %310 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		main_preheaderi_310_reg <= main_preheaderi_310;
		if (start == 1'b0 && ^(main_preheaderi_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_310_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %311 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_311 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %311 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		main_preheaderi_311_reg <= main_preheaderi_311;
		if (start == 1'b0 && ^(main_preheaderi_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_311_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_312 = main_preheaderi_312_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %312 = mul nsw i32 %311, %310*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		main_preheaderi_312_reg <= main_preheaderi_312;
		if (start == 1'b0 && ^(main_preheaderi_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_312_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %312 = mul nsw i32 %311, %310*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		main_preheaderi_312_reg <= main_preheaderi_312;
		if (start == 1'b0 && ^(main_preheaderi_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_312_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %313 = add nsw i32 %309, %312*/
		main_preheaderi_313 = (main_preheaderi_309_reg + main_preheaderi_312);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %313 = add nsw i32 %309, %312*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		main_preheaderi_313_reg <= main_preheaderi_313;
		if (start == 1'b0 && ^(main_preheaderi_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_313_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %314 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_314 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %314 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		main_preheaderi_314_reg <= main_preheaderi_314;
		if (start == 1'b0 && ^(main_preheaderi_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_314_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %315 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_315 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %315 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		main_preheaderi_315_reg <= main_preheaderi_315;
		if (start == 1'b0 && ^(main_preheaderi_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_315_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_316 = main_preheaderi_316_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %316 = mul nsw i32 %315, %314*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		main_preheaderi_316_reg <= main_preheaderi_316;
		if (start == 1'b0 && ^(main_preheaderi_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_316_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %316 = mul nsw i32 %315, %314*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		main_preheaderi_316_reg <= main_preheaderi_316;
		if (start == 1'b0 && ^(main_preheaderi_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_316_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %317 = add nsw i32 %313, %316*/
		main_preheaderi_317 = (main_preheaderi_313_reg + main_preheaderi_316);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %317 = add nsw i32 %313, %316*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		main_preheaderi_317_reg <= main_preheaderi_317;
		if (start == 1'b0 && ^(main_preheaderi_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_317_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %318 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_318 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %318 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		main_preheaderi_318_reg <= main_preheaderi_318;
		if (start == 1'b0 && ^(main_preheaderi_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_318_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %319 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_319 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %319 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		main_preheaderi_319_reg <= main_preheaderi_319;
		if (start == 1'b0 && ^(main_preheaderi_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_319_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_320 = main_preheaderi_320_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %320 = mul nsw i32 %319, %318*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_320_reg <= main_preheaderi_320;
		if (start == 1'b0 && ^(main_preheaderi_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_320_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %320 = mul nsw i32 %319, %318*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_320_reg <= main_preheaderi_320;
		if (start == 1'b0 && ^(main_preheaderi_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_320_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %321 = add nsw i32 %317, %320*/
		main_preheaderi_321 = (main_preheaderi_317_reg + main_preheaderi_320);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %321 = add nsw i32 %317, %320*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_321_reg <= main_preheaderi_321;
		if (start == 1'b0 && ^(main_preheaderi_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_321_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %322 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 1, i32 0), align 4, !tbaa !1*/
		main_preheaderi_322 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %322 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_322_reg <= main_preheaderi_322;
		if (start == 1'b0 && ^(main_preheaderi_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_322_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %323 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 1, i32 0), align 4, !tbaa !1*/
		main_preheaderi_323 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %323 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_323_reg <= main_preheaderi_323;
		if (start == 1'b0 && ^(main_preheaderi_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_323_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %324 = add i32 %321, %322*/
		main_preheaderi_324 = (main_preheaderi_321 + main_preheaderi_322);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %324 = add i32 %321, %322*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_324_reg <= main_preheaderi_324;
		if (start == 1'b0 && ^(main_preheaderi_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_324_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %325 = add i32 %324, %323*/
		main_preheaderi_325 = (main_preheaderi_324 + main_preheaderi_323);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %325 = add i32 %324, %323*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_325_reg <= main_preheaderi_325;
		if (start == 1'b0 && ^(main_preheaderi_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_325_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %326 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 1), align 4, !tbaa !1*/
		main_preheaderi_326 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %326 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_preheaderi_326_reg <= main_preheaderi_326;
		if (start == 1'b0 && ^(main_preheaderi_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_326_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %327 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 1), align 4, !tbaa !1*/
		main_preheaderi_327 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %327 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_preheaderi_327_reg <= main_preheaderi_327;
		if (start == 1'b0 && ^(main_preheaderi_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_327_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %328 = add i32 %325, %326*/
		main_preheaderi_328 = (main_preheaderi_325_reg + main_preheaderi_326);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %328 = add i32 %325, %326*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_preheaderi_328_reg <= main_preheaderi_328;
		if (start == 1'b0 && ^(main_preheaderi_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_328_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %329 = add i32 %328, %327*/
		main_preheaderi_329 = (main_preheaderi_328 + main_preheaderi_327);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %329 = add i32 %328, %327*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_preheaderi_329_reg <= main_preheaderi_329;
		if (start == 1'b0 && ^(main_preheaderi_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_329_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %330 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 2), align 4, !tbaa !1*/
		main_preheaderi_330 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %330 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_330_reg <= main_preheaderi_330;
		if (start == 1'b0 && ^(main_preheaderi_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_330_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %331 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 2), align 4, !tbaa !1*/
		main_preheaderi_331 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %331 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_331_reg <= main_preheaderi_331;
		if (start == 1'b0 && ^(main_preheaderi_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_331_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %332 = add i32 %329, %330*/
		main_preheaderi_332 = (main_preheaderi_329_reg + main_preheaderi_330);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %332 = add i32 %329, %330*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_332_reg <= main_preheaderi_332;
		if (start == 1'b0 && ^(main_preheaderi_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_332_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %333 = add i32 %332, %331*/
		main_preheaderi_333 = (main_preheaderi_332 + main_preheaderi_331);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %333 = add i32 %332, %331*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_333_reg <= main_preheaderi_333;
		if (start == 1'b0 && ^(main_preheaderi_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_333_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %334 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 3), align 4, !tbaa !1*/
		main_preheaderi_334 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %334 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		main_preheaderi_334_reg <= main_preheaderi_334;
		if (start == 1'b0 && ^(main_preheaderi_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_334_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %335 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 3), align 4, !tbaa !1*/
		main_preheaderi_335 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %335 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		main_preheaderi_335_reg <= main_preheaderi_335;
		if (start == 1'b0 && ^(main_preheaderi_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_335_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %336 = add i32 %333, %334*/
		main_preheaderi_336 = (main_preheaderi_333_reg + main_preheaderi_334);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %336 = add i32 %333, %334*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		main_preheaderi_336_reg <= main_preheaderi_336;
		if (start == 1'b0 && ^(main_preheaderi_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_336_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %337 = add i32 %336, %335*/
		main_preheaderi_337 = (main_preheaderi_336 + main_preheaderi_335);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %337 = add i32 %336, %335*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		main_preheaderi_337_reg <= main_preheaderi_337;
		if (start == 1'b0 && ^(main_preheaderi_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_337_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %338 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 4), align 4, !tbaa !1*/
		main_preheaderi_338 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %338 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		main_preheaderi_338_reg <= main_preheaderi_338;
		if (start == 1'b0 && ^(main_preheaderi_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_338_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %339 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 4), align 4, !tbaa !1*/
		main_preheaderi_339 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %339 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		main_preheaderi_339_reg <= main_preheaderi_339;
		if (start == 1'b0 && ^(main_preheaderi_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_339_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %340 = add i32 %337, %338*/
		main_preheaderi_340 = (main_preheaderi_337_reg + main_preheaderi_338);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %340 = add i32 %337, %338*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		main_preheaderi_340_reg <= main_preheaderi_340;
		if (start == 1'b0 && ^(main_preheaderi_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_340_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %341 = add i32 %340, %339*/
		main_preheaderi_341 = (main_preheaderi_340 + main_preheaderi_339);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %341 = add i32 %340, %339*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		main_preheaderi_341_reg <= main_preheaderi_341;
		if (start == 1'b0 && ^(main_preheaderi_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_341_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %342 = ashr i32 %341, 14*/
		main_preheaderi_342 = ($signed(main_preheaderi_341) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %342 = ashr i32 %341, 14*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		main_preheaderi_342_reg <= main_preheaderi_342;
		if (start == 1'b0 && ^(main_preheaderi_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_342_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %343 = shl nsw i32 %dec_rlt2.0, 1*/
		main_preheaderi_343 = (main_preheaderi_dec_rlt20_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %343 = shl nsw i32 %dec_rlt2.0, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) begin
		main_preheaderi_343_reg <= main_preheaderi_343;
		if (start == 1'b0 && ^(main_preheaderi_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_343_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_344 = main_preheaderi_344_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %344 = mul nsw i32 %343, %dec_al2.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_344_reg <= main_preheaderi_344;
		if (start == 1'b0 && ^(main_preheaderi_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_344_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %344 = mul nsw i32 %343, %dec_al2.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_344_reg <= main_preheaderi_344;
		if (start == 1'b0 && ^(main_preheaderi_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_344_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %345 = ashr i32 %344, 15*/
		main_preheaderi_345 = ($signed(main_preheaderi_344) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %345 = ashr i32 %344, 15*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_345_reg <= main_preheaderi_345;
		if (start == 1'b0 && ^(main_preheaderi_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_345_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %346 = add nsw i32 %345, %342*/
		main_preheaderi_346 = (main_preheaderi_345_reg + main_preheaderi_342);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %346 = add nsw i32 %345, %342*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		main_preheaderi_346_reg <= main_preheaderi_346;
		if (start == 1'b0 && ^(main_preheaderi_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_346_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %347 = lshr i32 %297, 2*/
		main_preheaderi_347 = (main_preheaderi_297 >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %347 = lshr i32 %297, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_132)) begin
		main_preheaderi_347_reg <= main_preheaderi_347;
		if (start == 1'b0 && ^(main_preheaderi_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_347_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %348 = and i32 %347, 15*/
		main_preheaderi_348 = (main_preheaderi_347 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %348 = and i32 %347, 15*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_132)) begin
		main_preheaderi_348_reg <= main_preheaderi_348;
		if (start == 1'b0 && ^(main_preheaderi_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_348_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %349 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %348*/
		main_preheaderi_349 = (1'd0 | (4 * main_preheaderi_348));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %349 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %348*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_132)) begin
		main_preheaderi_349_reg <= main_preheaderi_349;
		if (start == 1'b0 && ^(main_preheaderi_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_349_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %350 = load i32* %349, align 4, !tbaa !1*/
		main_preheaderi_350 = qq4_code4_table_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %350 = load i32* %349, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_133)) begin
		main_preheaderi_350_reg <= main_preheaderi_350;
		if (start == 1'b0 && ^(main_preheaderi_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_350_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_351 = main_preheaderi_351_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %351 = mul nsw i32 %350, %dec_detl.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_134)) begin
		main_preheaderi_351_reg <= main_preheaderi_351;
		if (start == 1'b0 && ^(main_preheaderi_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_351_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %351 = mul nsw i32 %350, %dec_detl.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_134)) begin
		main_preheaderi_351_reg <= main_preheaderi_351;
		if (start == 1'b0 && ^(main_preheaderi_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_351_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %352 = ashr i32 %351, 15*/
		main_preheaderi_352 = ($signed(main_preheaderi_351) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %352 = ashr i32 %351, 15*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_134)) begin
		main_preheaderi_352_reg <= main_preheaderi_352;
		if (start == 1'b0 && ^(main_preheaderi_352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_352_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_353 = main_preheaderi_353_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %353 = mul nsw i32 %293, %dec_detl.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_353_reg <= main_preheaderi_353;
		if (start == 1'b0 && ^(main_preheaderi_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_353_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %353 = mul nsw i32 %293, %dec_detl.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_353_reg <= main_preheaderi_353;
		if (start == 1'b0 && ^(main_preheaderi_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_353_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %354 = ashr i32 %353, 15*/
		main_preheaderi_354 = ($signed(main_preheaderi_353) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %354 = ashr i32 %353, 15*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_354_reg <= main_preheaderi_354;
		if (start == 1'b0 && ^(main_preheaderi_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_354_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %355 = add nsw i32 %354, %346*/
		main_preheaderi_355 = (main_preheaderi_354_reg + main_preheaderi_346);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %355 = add nsw i32 %354, %346*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		main_preheaderi_355_reg <= main_preheaderi_355;
		if (start == 1'b0 && ^(main_preheaderi_355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_355_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_356 = main_preheaderi_356_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %356 = mul nsw i32 %dec_nbl.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_356_reg <= main_preheaderi_356;
		if (start == 1'b0 && ^(main_preheaderi_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_356_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %356 = mul nsw i32 %dec_nbl.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_356_reg <= main_preheaderi_356;
		if (start == 1'b0 && ^(main_preheaderi_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_356_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %357 = ashr i32 %356, 7*/
		main_preheaderi_357 = ($signed(main_preheaderi_356) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %357 = ashr i32 %356, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_357_reg <= main_preheaderi_357;
		if (start == 1'b0 && ^(main_preheaderi_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_357_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %358 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %348*/
		main_preheaderi_358 = (1'd0 | (4 * main_preheaderi_348));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %358 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %348*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_132)) begin
		main_preheaderi_358_reg <= main_preheaderi_358;
		if (start == 1'b0 && ^(main_preheaderi_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_358_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %359 = load i32* %358, align 4, !tbaa !1*/
		main_preheaderi_359 = wl_code_table_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %359 = load i32* %358, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_133)) begin
		main_preheaderi_359_reg <= main_preheaderi_359;
		if (start == 1'b0 && ^(main_preheaderi_359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_359_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %360 = add nsw i32 %357, %359*/
		main_preheaderi_360 = (main_preheaderi_357_reg + main_preheaderi_359);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %360 = add nsw i32 %357, %359*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_133)) begin
		main_preheaderi_360_reg <= main_preheaderi_360;
		if (start == 1'b0 && ^(main_preheaderi_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_360_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %361 = icmp slt i32 %360, 0*/
		main_preheaderi_361 = ($signed(main_preheaderi_360) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %361 = icmp slt i32 %360, 0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_133)) begin
		main_preheaderi_361_reg <= main_preheaderi_361;
		if (start == 1'b0 && ^(main_preheaderi_361) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_361_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i10.i = select i1 %361, i32 0, i32 %360*/
		main_preheaderi_i10i = (main_preheaderi_361 ? 32'd0 : main_preheaderi_360);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %..i10.i = select i1 %361, i32 0, i32 %360*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_133)) begin
		main_preheaderi_i10i_reg <= main_preheaderi_i10i;
		if (start == 1'b0 && ^(main_preheaderi_i10i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i10i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %362 = icmp sgt i32 %..i10.i, 18432*/
		main_preheaderi_362 = ($signed(main_preheaderi_i10i) > $signed(32'd18432));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %362 = icmp sgt i32 %..i10.i, 18432*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_133)) begin
		main_preheaderi_362_reg <= main_preheaderi_362;
		if (start == 1'b0 && ^(main_preheaderi_362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_362_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i11.i = select i1 %362, i32 18432, i32 %..i10.i*/
		main_preheaderi_i11i_var0 = (main_preheaderi_362 ? 32'd18432 : main_preheaderi_i10i);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %...i11.i = select i1 %362, i32 18432, i32 %..i10.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_133)) begin
		main_preheaderi_i11i_var0_reg <= main_preheaderi_i11i_var0;
		if (start == 1'b0 && ^(main_preheaderi_i11i_var0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i11i_var0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %363 = lshr i32 %...i11.i, 6*/
		main_preheaderi_363 = (main_preheaderi_i11i_var0 >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %363 = lshr i32 %...i11.i, 6*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_133)) begin
		main_preheaderi_363_reg <= main_preheaderi_363;
		if (start == 1'b0 && ^(main_preheaderi_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_363_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %364 = and i32 %363, 31*/
		main_preheaderi_364 = (main_preheaderi_363 & 32'd31);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %364 = and i32 %363, 31*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_133)) begin
		main_preheaderi_364_reg <= main_preheaderi_364;
		if (start == 1'b0 && ^(main_preheaderi_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_364_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %365 = ashr i32 %...i11.i, 11*/
		main_preheaderi_365 = ($signed(main_preheaderi_i11i_var0) >>> 32'd11);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %365 = ashr i32 %...i11.i, 11*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_133)) begin
		main_preheaderi_365_reg <= main_preheaderi_365;
		if (start == 1'b0 && ^(main_preheaderi_365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_365_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %366 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %364*/
		main_preheaderi_366 = (1'd0 | (4 * main_preheaderi_364_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %366 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %364*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_134)) begin
		main_preheaderi_366_reg <= main_preheaderi_366;
		if (start == 1'b0 && ^(main_preheaderi_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_366_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %367 = load i32* %366, align 4, !tbaa !1*/
		main_preheaderi_367 = ilb_table_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %367 = load i32* %366, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_367_reg <= main_preheaderi_367;
		if (start == 1'b0 && ^(main_preheaderi_367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_367_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %368 = sub i32 9, %365*/
		main_preheaderi_368 = (32'd9 - main_preheaderi_365);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %368 = sub i32 9, %365*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_133)) begin
		main_preheaderi_368_reg <= main_preheaderi_368;
		if (start == 1'b0 && ^(main_preheaderi_368) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_368_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %369 = ashr i32 %367, %368*/
		main_preheaderi_369 = ($signed(main_preheaderi_367) >>> main_preheaderi_368_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %369 = ashr i32 %367, %368*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_369_reg <= main_preheaderi_369;
		if (start == 1'b0 && ^(main_preheaderi_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_369_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %370 = shl i32 %369, 3*/
		main_preheaderi_370 = (main_preheaderi_369 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %370 = shl i32 %369, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_370_reg <= main_preheaderi_370;
		if (start == 1'b0 && ^(main_preheaderi_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_370_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %371 = add nsw i32 %342, %352*/
		main_preheaderi_371 = (main_preheaderi_342_reg + main_preheaderi_352);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %371 = add nsw i32 %342, %352*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_134)) begin
		main_preheaderi_371_reg <= main_preheaderi_371;
		if (start == 1'b0 && ^(main_preheaderi_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_371_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %372 = shl nsw i32 %dec_al1.0, 2*/
		main_preheaderi_372 = (main_preheaderi_dec_al10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %372 = shl nsw i32 %dec_al1.0, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) begin
		main_preheaderi_372_reg <= main_preheaderi_372;
		if (start == 1'b0 && ^(main_preheaderi_372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_372_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_373 = main_preheaderi_373_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %373 = mul nsw i32 %dec_plt1.0, %371*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_373_reg <= main_preheaderi_373;
		if (start == 1'b0 && ^(main_preheaderi_373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_373_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %373 = mul nsw i32 %dec_plt1.0, %371*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_373_reg <= main_preheaderi_373;
		if (start == 1'b0 && ^(main_preheaderi_373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_373_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %374 = icmp sgt i32 %373, -1*/
		main_preheaderi_374 = ($signed(main_preheaderi_373) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %374 = icmp sgt i32 %373, -1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_374_reg <= main_preheaderi_374;
		if (start == 1'b0 && ^(main_preheaderi_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_374_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %375 = sub nsw i32 0, %372*/
		main_preheaderi_375 = (32'd0 - main_preheaderi_372);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %375 = sub nsw i32 0, %372*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) begin
		main_preheaderi_375_reg <= main_preheaderi_375;
		if (start == 1'b0 && ^(main_preheaderi_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_375_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.1.i6.i = select i1 %374, i32 %375, i32 %372*/
		main_preheaderi_1i6i = (main_preheaderi_374 ? main_preheaderi_375_reg : main_preheaderi_372_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %.1.i6.i = select i1 %374, i32 %375, i32 %372*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_1i6i_reg <= main_preheaderi_1i6i;
		if (start == 1'b0 && ^(main_preheaderi_1i6i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_1i6i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %376 = ashr i32 %.1.i6.i, 7*/
		main_preheaderi_376 = ($signed(main_preheaderi_1i6i) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %376 = ashr i32 %.1.i6.i, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_376_reg <= main_preheaderi_376;
		if (start == 1'b0 && ^(main_preheaderi_376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_376_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_377 = main_preheaderi_377_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %377 = mul nsw i32 %dec_plt2.0, %371*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_377_reg <= main_preheaderi_377;
		if (start == 1'b0 && ^(main_preheaderi_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_377_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %377 = mul nsw i32 %dec_plt2.0, %371*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_377_reg <= main_preheaderi_377;
		if (start == 1'b0 && ^(main_preheaderi_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_377_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %378 = ashr i32 %377, 31*/
		main_preheaderi_378 = ($signed(main_preheaderi_377) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %378 = ashr i32 %377, 31*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_378_reg <= main_preheaderi_378;
		if (start == 1'b0 && ^(main_preheaderi_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_378_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %379 = and i32 %378, -256*/
		main_preheaderi_379 = (main_preheaderi_378 & -32'd256);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %379 = and i32 %378, -256*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_379_reg <= main_preheaderi_379;
		if (start == 1'b0 && ^(main_preheaderi_379) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_379_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %380 = or i32 %379, 128*/
		main_preheaderi_380 = (main_preheaderi_379 | 32'd128);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %380 = or i32 %379, 128*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_380_reg <= main_preheaderi_380;
		if (start == 1'b0 && ^(main_preheaderi_380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_380_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_381 = main_preheaderi_381_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %381 = mul nsw i32 %dec_al2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_381_reg <= main_preheaderi_381;
		if (start == 1'b0 && ^(main_preheaderi_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_381_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %381 = mul nsw i32 %dec_al2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_381_reg <= main_preheaderi_381;
		if (start == 1'b0 && ^(main_preheaderi_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_381_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %382 = ashr i32 %381, 7*/
		main_preheaderi_382 = ($signed(main_preheaderi_381) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %382 = ashr i32 %381, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_382_reg <= main_preheaderi_382;
		if (start == 1'b0 && ^(main_preheaderi_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_382_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %wd4.0.i7.i = add nsw i32 %376, %382*/
		main_preheaderi_wd40i7i = (main_preheaderi_376 + main_preheaderi_382_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %wd4.0.i7.i = add nsw i32 %376, %382*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_wd40i7i_reg <= main_preheaderi_wd40i7i;
		if (start == 1'b0 && ^(main_preheaderi_wd40i7i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_wd40i7i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %383 = add nsw i32 %wd4.0.i7.i, %380*/
		main_preheaderi_383 = (main_preheaderi_wd40i7i + main_preheaderi_380);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %383 = add nsw i32 %wd4.0.i7.i, %380*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_383_reg <= main_preheaderi_383;
		if (start == 1'b0 && ^(main_preheaderi_383) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_383_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %384 = icmp sgt i32 %383, 12288*/
		main_preheaderi_384 = ($signed(main_preheaderi_383) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %384 = icmp sgt i32 %383, 12288*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_384_reg <= main_preheaderi_384;
		if (start == 1'b0 && ^(main_preheaderi_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_384_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i8.i = select i1 %384, i32 12288, i32 %383*/
		main_preheaderi_i8i = (main_preheaderi_384 ? 32'd12288 : main_preheaderi_383);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %..i8.i = select i1 %384, i32 12288, i32 %383*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_i8i_reg <= main_preheaderi_i8i;
		if (start == 1'b0 && ^(main_preheaderi_i8i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i8i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %385 = icmp slt i32 %..i8.i, -12288*/
		main_preheaderi_385 = ($signed(main_preheaderi_i8i_reg) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %385 = icmp slt i32 %..i8.i, -12288*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		main_preheaderi_385_reg <= main_preheaderi_385;
		if (start == 1'b0 && ^(main_preheaderi_385) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_385_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i9.i = select i1 %385, i32 -12288, i32 %..i8.i*/
		main_preheaderi_i9i = (main_preheaderi_385 ? -32'd12288 : main_preheaderi_i8i_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %...i9.i = select i1 %385, i32 -12288, i32 %..i8.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		main_preheaderi_i9i_reg <= main_preheaderi_i9i;
		if (start == 1'b0 && ^(main_preheaderi_i9i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i9i_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_386 = main_preheaderi_386_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %386 = mul nsw i32 %dec_al1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_386_reg <= main_preheaderi_386;
		if (start == 1'b0 && ^(main_preheaderi_386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_386_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %386 = mul nsw i32 %dec_al1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_386_reg <= main_preheaderi_386;
		if (start == 1'b0 && ^(main_preheaderi_386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_386_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %387 = ashr i32 %386, 8*/
		main_preheaderi_387 = ($signed(main_preheaderi_386) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %387 = ashr i32 %386, 8*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_387_reg <= main_preheaderi_387;
		if (start == 1'b0 && ^(main_preheaderi_387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_387_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %388 = ashr i32 %373, 31*/
		main_preheaderi_388 = ($signed(main_preheaderi_373) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %388 = ashr i32 %373, 31*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_388_reg <= main_preheaderi_388;
		if (start == 1'b0 && ^(main_preheaderi_388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_388_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %389 = and i32 %388, -384*/
		main_preheaderi_389 = (main_preheaderi_388 & -32'd384);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %389 = and i32 %388, -384*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_389_reg <= main_preheaderi_389;
		if (start == 1'b0 && ^(main_preheaderi_389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_389_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %390 = add nsw i32 %387, 192*/
		main_preheaderi_390 = (main_preheaderi_387 + 32'd192);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %390 = add nsw i32 %387, 192*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_390_reg <= main_preheaderi_390;
		if (start == 1'b0 && ^(main_preheaderi_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_390_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.0.i3.i = add nsw i32 %390, %389*/
		main_preheaderi_apl10i3i = (main_preheaderi_390_reg + main_preheaderi_389);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %apl1.0.i3.i = add nsw i32 %390, %389*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_apl10i3i_reg <= main_preheaderi_apl10i3i;
		if (start == 1'b0 && ^(main_preheaderi_apl10i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl10i3i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %391 = sub nsw i32 15360, %...i9.i*/
		main_preheaderi_391 = (32'd15360 - main_preheaderi_i9i);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %391 = sub nsw i32 15360, %...i9.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		main_preheaderi_391_reg <= main_preheaderi_391;
		if (start == 1'b0 && ^(main_preheaderi_391) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_391_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %392 = icmp sgt i32 %apl1.0.i3.i, %391*/
		main_preheaderi_392 = ($signed(main_preheaderi_apl10i3i_reg) > $signed(main_preheaderi_391));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %392 = icmp sgt i32 %apl1.0.i3.i, %391*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		main_preheaderi_392_reg <= main_preheaderi_392;
		if (start == 1'b0 && ^(main_preheaderi_392) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_392_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.apl1.0.i4.i = select i1 %392, i32 %391, i32 %apl1.0.i3.i*/
		main_preheaderi_apl10i4i = (main_preheaderi_392 ? main_preheaderi_391 : main_preheaderi_apl10i3i_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %.apl1.0.i4.i = select i1 %392, i32 %391, i32 %apl1.0.i3.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		main_preheaderi_apl10i4i_reg <= main_preheaderi_apl10i4i;
		if (start == 1'b0 && ^(main_preheaderi_apl10i4i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl10i4i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %393 = sub nsw i32 0, %391*/
		main_preheaderi_393 = (32'd0 - main_preheaderi_391);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %393 = sub nsw i32 0, %391*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		main_preheaderi_393_reg <= main_preheaderi_393;
		if (start == 1'b0 && ^(main_preheaderi_393) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_393_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %394 = icmp slt i32 %.apl1.0.i4.i, %393*/
		main_preheaderi_394 = ($signed(main_preheaderi_apl10i4i_reg) < $signed(main_preheaderi_393_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %394 = icmp slt i32 %.apl1.0.i4.i, %393*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_preheaderi_394_reg <= main_preheaderi_394;
		if (start == 1'b0 && ^(main_preheaderi_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_394_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.2.i5.i = select i1 %394, i32 %393, i32 %.apl1.0.i4.i*/
		main_preheaderi_apl12i5i = (main_preheaderi_394 ? main_preheaderi_393_reg : main_preheaderi_apl10i4i_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %apl1.2.i5.i = select i1 %394, i32 %393, i32 %.apl1.0.i4.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_preheaderi_apl12i5i_reg <= main_preheaderi_apl12i5i;
		if (start == 1'b0 && ^(main_preheaderi_apl12i5i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl12i5i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %395 = add nsw i32 %352, %346*/
		main_preheaderi_395 = (main_preheaderi_352 + main_preheaderi_346_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %395 = add nsw i32 %352, %346*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_134)) begin
		main_preheaderi_395_reg <= main_preheaderi_395;
		if (start == 1'b0 && ^(main_preheaderi_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_395_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %396 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_396 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %396 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_preheaderi_396_reg <= main_preheaderi_396;
		if (start == 1'b0 && ^(main_preheaderi_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_396_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %397 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_397 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %397 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_preheaderi_397_reg <= main_preheaderi_397;
		if (start == 1'b0 && ^(main_preheaderi_397) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_397_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_398 = main_preheaderi_398_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %398 = mul nsw i32 %397, %396*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		main_preheaderi_398_reg <= main_preheaderi_398;
		if (start == 1'b0 && ^(main_preheaderi_398) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_398_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %398 = mul nsw i32 %397, %396*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		main_preheaderi_398_reg <= main_preheaderi_398;
		if (start == 1'b0 && ^(main_preheaderi_398) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_398_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %399 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_399 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %399 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		main_preheaderi_399_reg <= main_preheaderi_399;
		if (start == 1'b0 && ^(main_preheaderi_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_399_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %400 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_400 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %400 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		main_preheaderi_400_reg <= main_preheaderi_400;
		if (start == 1'b0 && ^(main_preheaderi_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_400_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_401 = main_preheaderi_401_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %401 = mul nsw i32 %400, %399*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		main_preheaderi_401_reg <= main_preheaderi_401;
		if (start == 1'b0 && ^(main_preheaderi_401) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_401_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %401 = mul nsw i32 %400, %399*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		main_preheaderi_401_reg <= main_preheaderi_401;
		if (start == 1'b0 && ^(main_preheaderi_401) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_401_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %402 = add nsw i32 %401, %398*/
		main_preheaderi_402 = (main_preheaderi_401 + main_preheaderi_398_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %402 = add nsw i32 %401, %398*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		main_preheaderi_402_reg <= main_preheaderi_402;
		if (start == 1'b0 && ^(main_preheaderi_402) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_402_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %403 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_403 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %403 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		main_preheaderi_403_reg <= main_preheaderi_403;
		if (start == 1'b0 && ^(main_preheaderi_403) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_403_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %404 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_404 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %404 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		main_preheaderi_404_reg <= main_preheaderi_404;
		if (start == 1'b0 && ^(main_preheaderi_404) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_404_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_405 = main_preheaderi_405_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %405 = mul nsw i32 %404, %403*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		main_preheaderi_405_reg <= main_preheaderi_405;
		if (start == 1'b0 && ^(main_preheaderi_405) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_405_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %405 = mul nsw i32 %404, %403*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		main_preheaderi_405_reg <= main_preheaderi_405;
		if (start == 1'b0 && ^(main_preheaderi_405) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_405_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %406 = add nsw i32 %402, %405*/
		main_preheaderi_406 = (main_preheaderi_402_reg + main_preheaderi_405);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %406 = add nsw i32 %402, %405*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		main_preheaderi_406_reg <= main_preheaderi_406;
		if (start == 1'b0 && ^(main_preheaderi_406) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_406_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %407 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_407 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %407 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		main_preheaderi_407_reg <= main_preheaderi_407;
		if (start == 1'b0 && ^(main_preheaderi_407) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_407_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %408 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_408 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %408 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		main_preheaderi_408_reg <= main_preheaderi_408;
		if (start == 1'b0 && ^(main_preheaderi_408) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_408_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_409 = main_preheaderi_409_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %409 = mul nsw i32 %408, %407*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_409_reg <= main_preheaderi_409;
		if (start == 1'b0 && ^(main_preheaderi_409) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_409_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %409 = mul nsw i32 %408, %407*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_409_reg <= main_preheaderi_409;
		if (start == 1'b0 && ^(main_preheaderi_409) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_409_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %410 = add nsw i32 %406, %409*/
		main_preheaderi_410 = (main_preheaderi_406_reg + main_preheaderi_409);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %410 = add nsw i32 %406, %409*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_410_reg <= main_preheaderi_410;
		if (start == 1'b0 && ^(main_preheaderi_410) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_410_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %411 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_411 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %411 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_411_reg <= main_preheaderi_411;
		if (start == 1'b0 && ^(main_preheaderi_411) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_411_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %412 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_412 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %412 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_412_reg <= main_preheaderi_412;
		if (start == 1'b0 && ^(main_preheaderi_412) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_412_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_413 = main_preheaderi_413_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %413 = mul nsw i32 %412, %411*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_413_reg <= main_preheaderi_413;
		if (start == 1'b0 && ^(main_preheaderi_413) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_413_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %413 = mul nsw i32 %412, %411*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_413_reg <= main_preheaderi_413;
		if (start == 1'b0 && ^(main_preheaderi_413) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_413_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %414 = add nsw i32 %410, %413*/
		main_preheaderi_414 = (main_preheaderi_410_reg + main_preheaderi_413);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %414 = add nsw i32 %410, %413*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_414_reg <= main_preheaderi_414;
		if (start == 1'b0 && ^(main_preheaderi_414) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_414_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %415 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_415 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %415 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_415_reg <= main_preheaderi_415;
		if (start == 1'b0 && ^(main_preheaderi_415) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_415_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %416 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_416 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %416 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_416_reg <= main_preheaderi_416;
		if (start == 1'b0 && ^(main_preheaderi_416) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_416_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_417 = main_preheaderi_417_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %417 = mul nsw i32 %416, %415*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		main_preheaderi_417_reg <= main_preheaderi_417;
		if (start == 1'b0 && ^(main_preheaderi_417) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_417_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %417 = mul nsw i32 %416, %415*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		main_preheaderi_417_reg <= main_preheaderi_417;
		if (start == 1'b0 && ^(main_preheaderi_417) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_417_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %418 = add nsw i32 %414, %417*/
		main_preheaderi_418 = (main_preheaderi_414_reg + main_preheaderi_417);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %418 = add nsw i32 %414, %417*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		main_preheaderi_418_reg <= main_preheaderi_418;
		if (start == 1'b0 && ^(main_preheaderi_418) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_418_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %419 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 1, i32 0), align 4, !tbaa !1*/
		main_preheaderi_419 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %419 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		main_preheaderi_419_reg <= main_preheaderi_419;
		if (start == 1'b0 && ^(main_preheaderi_419) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_419_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %420 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 1, i32 0), align 4, !tbaa !1*/
		main_preheaderi_420 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %420 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		main_preheaderi_420_reg <= main_preheaderi_420;
		if (start == 1'b0 && ^(main_preheaderi_420) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_420_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %421 = add i32 %418, %419*/
		main_preheaderi_421 = (main_preheaderi_418 + main_preheaderi_419);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %421 = add i32 %418, %419*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		main_preheaderi_421_reg <= main_preheaderi_421;
		if (start == 1'b0 && ^(main_preheaderi_421) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_421_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %422 = add i32 %421, %420*/
		main_preheaderi_422 = (main_preheaderi_421 + main_preheaderi_420);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %422 = add i32 %421, %420*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		main_preheaderi_422_reg <= main_preheaderi_422;
		if (start == 1'b0 && ^(main_preheaderi_422) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_422_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %423 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 1), align 4, !tbaa !1*/
		main_preheaderi_423 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %423 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		main_preheaderi_423_reg <= main_preheaderi_423;
		if (start == 1'b0 && ^(main_preheaderi_423) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_423_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %424 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 1), align 4, !tbaa !1*/
		main_preheaderi_424 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %424 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		main_preheaderi_424_reg <= main_preheaderi_424;
		if (start == 1'b0 && ^(main_preheaderi_424) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_424_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %425 = add i32 %422, %423*/
		main_preheaderi_425 = (main_preheaderi_422_reg + main_preheaderi_423);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %425 = add i32 %422, %423*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		main_preheaderi_425_reg <= main_preheaderi_425;
		if (start == 1'b0 && ^(main_preheaderi_425) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_425_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %426 = add i32 %425, %424*/
		main_preheaderi_426 = (main_preheaderi_425 + main_preheaderi_424);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %426 = add i32 %425, %424*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		main_preheaderi_426_reg <= main_preheaderi_426;
		if (start == 1'b0 && ^(main_preheaderi_426) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_426_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %427 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 2), align 4, !tbaa !1*/
		main_preheaderi_427 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %427 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_preheaderi_427_reg <= main_preheaderi_427;
		if (start == 1'b0 && ^(main_preheaderi_427) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_427_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %428 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 2), align 4, !tbaa !1*/
		main_preheaderi_428 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %428 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_preheaderi_428_reg <= main_preheaderi_428;
		if (start == 1'b0 && ^(main_preheaderi_428) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_428_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %429 = add i32 %426, %427*/
		main_preheaderi_429 = (main_preheaderi_426_reg + main_preheaderi_427);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %429 = add i32 %426, %427*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_preheaderi_429_reg <= main_preheaderi_429;
		if (start == 1'b0 && ^(main_preheaderi_429) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_429_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %430 = add i32 %429, %428*/
		main_preheaderi_430 = (main_preheaderi_429 + main_preheaderi_428);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %430 = add i32 %429, %428*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_preheaderi_430_reg <= main_preheaderi_430;
		if (start == 1'b0 && ^(main_preheaderi_430) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_430_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %431 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 3), align 4, !tbaa !1*/
		main_preheaderi_431 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %431 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		main_preheaderi_431_reg <= main_preheaderi_431;
		if (start == 1'b0 && ^(main_preheaderi_431) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_431_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %432 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 3), align 4, !tbaa !1*/
		main_preheaderi_432 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %432 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		main_preheaderi_432_reg <= main_preheaderi_432;
		if (start == 1'b0 && ^(main_preheaderi_432) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_432_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %433 = add i32 %430, %431*/
		main_preheaderi_433 = (main_preheaderi_430_reg + main_preheaderi_431);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %433 = add i32 %430, %431*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		main_preheaderi_433_reg <= main_preheaderi_433;
		if (start == 1'b0 && ^(main_preheaderi_433) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_433_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %434 = add i32 %433, %432*/
		main_preheaderi_434 = (main_preheaderi_433 + main_preheaderi_432);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %434 = add i32 %433, %432*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		main_preheaderi_434_reg <= main_preheaderi_434;
		if (start == 1'b0 && ^(main_preheaderi_434) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_434_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %435 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 4), align 4, !tbaa !1*/
		main_preheaderi_435 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %435 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_435_reg <= main_preheaderi_435;
		if (start == 1'b0 && ^(main_preheaderi_435) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_435_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %436 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 4), align 4, !tbaa !1*/
		main_preheaderi_436 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %436 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_436_reg <= main_preheaderi_436;
		if (start == 1'b0 && ^(main_preheaderi_436) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_436_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %437 = add i32 %434, %435*/
		main_preheaderi_437 = (main_preheaderi_434_reg + main_preheaderi_435);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %437 = add i32 %434, %435*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_437_reg <= main_preheaderi_437;
		if (start == 1'b0 && ^(main_preheaderi_437) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_437_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %438 = add i32 %437, %436*/
		main_preheaderi_438 = (main_preheaderi_437 + main_preheaderi_436);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %438 = add i32 %437, %436*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_438_reg <= main_preheaderi_438;
		if (start == 1'b0 && ^(main_preheaderi_438) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_438_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %439 = ashr i32 %438, 14*/
		main_preheaderi_439 = ($signed(main_preheaderi_438) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %439 = ashr i32 %438, 14*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_439_reg <= main_preheaderi_439;
		if (start == 1'b0 && ^(main_preheaderi_439) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_439_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %440 = shl nsw i32 %dec_rh2.0, 1*/
		main_preheaderi_440 = (main_preheaderi_dec_rh20_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %440 = shl nsw i32 %dec_rh2.0, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) begin
		main_preheaderi_440_reg <= main_preheaderi_440;
		if (start == 1'b0 && ^(main_preheaderi_440) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_440_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_441 = main_preheaderi_441_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %441 = mul nsw i32 %440, %dec_ah2.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_441_reg <= main_preheaderi_441;
		if (start == 1'b0 && ^(main_preheaderi_441) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_441_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %441 = mul nsw i32 %440, %dec_ah2.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_441_reg <= main_preheaderi_441;
		if (start == 1'b0 && ^(main_preheaderi_441) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_441_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %442 = ashr i32 %441, 15*/
		main_preheaderi_442 = ($signed(main_preheaderi_441) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %442 = ashr i32 %441, 15*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_442_reg <= main_preheaderi_442;
		if (start == 1'b0 && ^(main_preheaderi_442) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_442_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %443 = add nsw i32 %442, %439*/
		main_preheaderi_443 = (main_preheaderi_442_reg + main_preheaderi_439);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %443 = add nsw i32 %442, %439*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_443_reg <= main_preheaderi_443;
		if (start == 1'b0 && ^(main_preheaderi_443) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_443_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %444 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %298*/
		main_preheaderi_444 = (1'd0 | (4 * main_preheaderi_298));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %444 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %298*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_132)) begin
		main_preheaderi_444_reg <= main_preheaderi_444;
		if (start == 1'b0 && ^(main_preheaderi_444) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_444_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %445 = load i32* %444, align 4, !tbaa !1*/
		main_preheaderi_445 = qq2_code2_table_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %445 = load i32* %444, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_preheaderi_445_reg <= main_preheaderi_445;
		if (start == 1'b0 && ^(main_preheaderi_445) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_445_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_446 = main_preheaderi_446_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %446 = mul nsw i32 %445, %dec_deth.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_preheaderi_446_reg <= main_preheaderi_446;
		if (start == 1'b0 && ^(main_preheaderi_446) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_446_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %446 = mul nsw i32 %445, %dec_deth.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_preheaderi_446_reg <= main_preheaderi_446;
		if (start == 1'b0 && ^(main_preheaderi_446) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_446_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %447 = ashr i32 %446, 15*/
		main_preheaderi_447 = ($signed(main_preheaderi_446) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %447 = ashr i32 %446, 15*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_preheaderi_447_reg <= main_preheaderi_447;
		if (start == 1'b0 && ^(main_preheaderi_447) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_447_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_448 = main_preheaderi_448_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %448 = mul nsw i32 %dec_nbh.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_448_reg <= main_preheaderi_448;
		if (start == 1'b0 && ^(main_preheaderi_448) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_448_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %448 = mul nsw i32 %dec_nbh.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_448_reg <= main_preheaderi_448;
		if (start == 1'b0 && ^(main_preheaderi_448) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_448_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %449 = ashr i32 %448, 7*/
		main_preheaderi_449 = ($signed(main_preheaderi_448) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %449 = ashr i32 %448, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_449_reg <= main_preheaderi_449;
		if (start == 1'b0 && ^(main_preheaderi_449) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_449_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %450 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %298*/
		main_preheaderi_450 = (1'd0 | (4 * main_preheaderi_298));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %450 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %298*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_132)) begin
		main_preheaderi_450_reg <= main_preheaderi_450;
		if (start == 1'b0 && ^(main_preheaderi_450) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_450_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %451 = load i32* %450, align 4, !tbaa !1*/
		main_preheaderi_451 = wh_code_table_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %451 = load i32* %450, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_preheaderi_451_reg <= main_preheaderi_451;
		if (start == 1'b0 && ^(main_preheaderi_451) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_451_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %452 = add nsw i32 %449, %451*/
		main_preheaderi_452 = (main_preheaderi_449_reg + main_preheaderi_451);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %452 = add nsw i32 %449, %451*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_preheaderi_452_reg <= main_preheaderi_452;
		if (start == 1'b0 && ^(main_preheaderi_452) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_452_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %453 = icmp slt i32 %452, 0*/
		main_preheaderi_453 = ($signed(main_preheaderi_452) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %453 = icmp slt i32 %452, 0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_preheaderi_453_reg <= main_preheaderi_453;
		if (start == 1'b0 && ^(main_preheaderi_453) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_453_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i1.i = select i1 %453, i32 0, i32 %452*/
		main_preheaderi_i1i = (main_preheaderi_453 ? 32'd0 : main_preheaderi_452);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %..i1.i = select i1 %453, i32 0, i32 %452*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_preheaderi_i1i_reg <= main_preheaderi_i1i;
		if (start == 1'b0 && ^(main_preheaderi_i1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %454 = icmp sgt i32 %..i1.i, 22528*/
		main_preheaderi_454 = ($signed(main_preheaderi_i1i) > $signed(32'd22528));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %454 = icmp sgt i32 %..i1.i, 22528*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_preheaderi_454_reg <= main_preheaderi_454;
		if (start == 1'b0 && ^(main_preheaderi_454) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_454_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i2.i = select i1 %454, i32 22528, i32 %..i1.i*/
		main_preheaderi_i2i = (main_preheaderi_454 ? 32'd22528 : main_preheaderi_i1i);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %...i2.i = select i1 %454, i32 22528, i32 %..i1.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_preheaderi_i2i_reg <= main_preheaderi_i2i;
		if (start == 1'b0 && ^(main_preheaderi_i2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i2i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %455 = lshr i32 %...i2.i, 6*/
		main_preheaderi_455 = (main_preheaderi_i2i >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %455 = lshr i32 %...i2.i, 6*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_preheaderi_455_reg <= main_preheaderi_455;
		if (start == 1'b0 && ^(main_preheaderi_455) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_455_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %456 = and i32 %455, 31*/
		main_preheaderi_456 = (main_preheaderi_455 & 32'd31);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %456 = and i32 %455, 31*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_preheaderi_456_reg <= main_preheaderi_456;
		if (start == 1'b0 && ^(main_preheaderi_456) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_456_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %457 = ashr i32 %...i2.i, 11*/
		main_preheaderi_457 = ($signed(main_preheaderi_i2i) >>> 32'd11);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %457 = ashr i32 %...i2.i, 11*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_preheaderi_457_reg <= main_preheaderi_457;
		if (start == 1'b0 && ^(main_preheaderi_457) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_457_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %458 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %456*/
		main_preheaderi_458 = (1'd0 | (4 * main_preheaderi_456_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %458 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %456*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_preheaderi_458_reg <= main_preheaderi_458;
		if (start == 1'b0 && ^(main_preheaderi_458) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_458_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %459 = load i32* %458, align 4, !tbaa !1*/
		main_preheaderi_459 = ilb_table_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %459 = load i32* %458, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		main_preheaderi_459_reg <= main_preheaderi_459;
		if (start == 1'b0 && ^(main_preheaderi_459) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_459_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %460 = sub i32 11, %457*/
		main_preheaderi_460 = (32'd11 - main_preheaderi_457);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %460 = sub i32 11, %457*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_preheaderi_460_reg <= main_preheaderi_460;
		if (start == 1'b0 && ^(main_preheaderi_460) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_460_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %461 = ashr i32 %459, %460*/
		main_preheaderi_461 = ($signed(main_preheaderi_459) >>> main_preheaderi_460_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %461 = ashr i32 %459, %460*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		main_preheaderi_461_reg <= main_preheaderi_461;
		if (start == 1'b0 && ^(main_preheaderi_461) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_461_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %462 = shl i32 %461, 3*/
		main_preheaderi_462 = (main_preheaderi_461 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %462 = shl i32 %461, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		main_preheaderi_462_reg <= main_preheaderi_462;
		if (start == 1'b0 && ^(main_preheaderi_462) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_462_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %463 = add nsw i32 %439, %447*/
		main_preheaderi_463 = (main_preheaderi_439 + main_preheaderi_447_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %463 = add nsw i32 %439, %447*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_463_reg <= main_preheaderi_463;
		if (start == 1'b0 && ^(main_preheaderi_463) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_463_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %464 = shl nsw i32 %dec_ah1.0, 2*/
		main_preheaderi_464 = (main_preheaderi_dec_ah10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %464 = shl nsw i32 %dec_ah1.0, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) begin
		main_preheaderi_464_reg <= main_preheaderi_464;
		if (start == 1'b0 && ^(main_preheaderi_464) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_464_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_465 = main_preheaderi_465_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %465 = mul nsw i32 %dec_ph1.0, %463*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_465_reg <= main_preheaderi_465;
		if (start == 1'b0 && ^(main_preheaderi_465) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_465_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %465 = mul nsw i32 %dec_ph1.0, %463*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_465_reg <= main_preheaderi_465;
		if (start == 1'b0 && ^(main_preheaderi_465) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_465_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %466 = icmp sgt i32 %465, -1*/
		main_preheaderi_466 = ($signed(main_preheaderi_465) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %466 = icmp sgt i32 %465, -1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_466_reg <= main_preheaderi_466;
		if (start == 1'b0 && ^(main_preheaderi_466) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_466_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %467 = sub nsw i32 0, %464*/
		main_preheaderi_467 = (32'd0 - main_preheaderi_464);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %467 = sub nsw i32 0, %464*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) begin
		main_preheaderi_467_reg <= main_preheaderi_467;
		if (start == 1'b0 && ^(main_preheaderi_467) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_467_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.1.i.i = select i1 %466, i32 %467, i32 %464*/
		main_preheaderi_1ii = (main_preheaderi_466 ? main_preheaderi_467_reg : main_preheaderi_464_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %.1.i.i = select i1 %466, i32 %467, i32 %464*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_1ii_reg <= main_preheaderi_1ii;
		if (start == 1'b0 && ^(main_preheaderi_1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %468 = ashr i32 %.1.i.i, 7*/
		main_preheaderi_468 = ($signed(main_preheaderi_1ii) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %468 = ashr i32 %.1.i.i, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_468_reg <= main_preheaderi_468;
		if (start == 1'b0 && ^(main_preheaderi_468) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_468_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_469 = main_preheaderi_469_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %469 = mul nsw i32 %dec_ph2.0, %463*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_469_reg <= main_preheaderi_469;
		if (start == 1'b0 && ^(main_preheaderi_469) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_469_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %469 = mul nsw i32 %dec_ph2.0, %463*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_469_reg <= main_preheaderi_469;
		if (start == 1'b0 && ^(main_preheaderi_469) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_469_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %470 = ashr i32 %469, 31*/
		main_preheaderi_470 = ($signed(main_preheaderi_469) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %470 = ashr i32 %469, 31*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_470_reg <= main_preheaderi_470;
		if (start == 1'b0 && ^(main_preheaderi_470) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_470_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %471 = and i32 %470, -256*/
		main_preheaderi_471 = (main_preheaderi_470 & -32'd256);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %471 = and i32 %470, -256*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_471_reg <= main_preheaderi_471;
		if (start == 1'b0 && ^(main_preheaderi_471) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_471_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %472 = or i32 %471, 128*/
		main_preheaderi_472 = (main_preheaderi_471 | 32'd128);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %472 = or i32 %471, 128*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_472_reg <= main_preheaderi_472;
		if (start == 1'b0 && ^(main_preheaderi_472) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_472_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_473 = main_preheaderi_473_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %473 = mul nsw i32 %dec_ah2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_473_reg <= main_preheaderi_473;
		if (start == 1'b0 && ^(main_preheaderi_473) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_473_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %473 = mul nsw i32 %dec_ah2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_473_reg <= main_preheaderi_473;
		if (start == 1'b0 && ^(main_preheaderi_473) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_473_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %474 = ashr i32 %473, 7*/
		main_preheaderi_474 = ($signed(main_preheaderi_473) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %474 = ashr i32 %473, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_474_reg <= main_preheaderi_474;
		if (start == 1'b0 && ^(main_preheaderi_474) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_474_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %wd4.0.i.i = add nsw i32 %468, %474*/
		main_preheaderi_wd40ii = (main_preheaderi_468 + main_preheaderi_474_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %wd4.0.i.i = add nsw i32 %468, %474*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_wd40ii_reg <= main_preheaderi_wd40ii;
		if (start == 1'b0 && ^(main_preheaderi_wd40ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_wd40ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %475 = add nsw i32 %wd4.0.i.i, %472*/
		main_preheaderi_475 = (main_preheaderi_wd40ii + main_preheaderi_472);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %475 = add nsw i32 %wd4.0.i.i, %472*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_475_reg <= main_preheaderi_475;
		if (start == 1'b0 && ^(main_preheaderi_475) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_475_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %476 = icmp sgt i32 %475, 12288*/
		main_preheaderi_476 = ($signed(main_preheaderi_475) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %476 = icmp sgt i32 %475, 12288*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_476_reg <= main_preheaderi_476;
		if (start == 1'b0 && ^(main_preheaderi_476) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_476_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i.i = select i1 %476, i32 12288, i32 %475*/
		main_preheaderi_ii = (main_preheaderi_476 ? 32'd12288 : main_preheaderi_475);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %..i.i = select i1 %476, i32 12288, i32 %475*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_ii_reg <= main_preheaderi_ii;
		if (start == 1'b0 && ^(main_preheaderi_ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %477 = icmp slt i32 %..i.i, -12288*/
		main_preheaderi_477 = ($signed(main_preheaderi_ii_reg) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %477 = icmp slt i32 %..i.i, -12288*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_477_reg <= main_preheaderi_477;
		if (start == 1'b0 && ^(main_preheaderi_477) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_477_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i.i = select i1 %477, i32 -12288, i32 %..i.i*/
		main_preheaderi_ii_var1 = (main_preheaderi_477 ? -32'd12288 : main_preheaderi_ii_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %...i.i = select i1 %477, i32 -12288, i32 %..i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_ii_var1_reg <= main_preheaderi_ii_var1;
		if (start == 1'b0 && ^(main_preheaderi_ii_var1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_ii_var1_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_478 = main_preheaderi_478_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %478 = mul nsw i32 %dec_ah1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_478_reg <= main_preheaderi_478;
		if (start == 1'b0 && ^(main_preheaderi_478) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_478_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %478 = mul nsw i32 %dec_ah1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_478_reg <= main_preheaderi_478;
		if (start == 1'b0 && ^(main_preheaderi_478) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_478_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %479 = ashr i32 %478, 8*/
		main_preheaderi_479 = ($signed(main_preheaderi_478) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %479 = ashr i32 %478, 8*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_479_reg <= main_preheaderi_479;
		if (start == 1'b0 && ^(main_preheaderi_479) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_479_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %480 = ashr i32 %465, 31*/
		main_preheaderi_480 = ($signed(main_preheaderi_465) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %480 = ashr i32 %465, 31*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_480_reg <= main_preheaderi_480;
		if (start == 1'b0 && ^(main_preheaderi_480) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_480_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %481 = and i32 %480, -384*/
		main_preheaderi_481 = (main_preheaderi_480 & -32'd384);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %481 = and i32 %480, -384*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_481_reg <= main_preheaderi_481;
		if (start == 1'b0 && ^(main_preheaderi_481) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_481_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %482 = add nsw i32 %479, 192*/
		main_preheaderi_482 = (main_preheaderi_479 + 32'd192);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %482 = add nsw i32 %479, 192*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_482_reg <= main_preheaderi_482;
		if (start == 1'b0 && ^(main_preheaderi_482) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_482_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.0.i.i = add nsw i32 %482, %481*/
		main_preheaderi_apl10ii = (main_preheaderi_482_reg + main_preheaderi_481);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %apl1.0.i.i = add nsw i32 %482, %481*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_apl10ii_reg <= main_preheaderi_apl10ii;
		if (start == 1'b0 && ^(main_preheaderi_apl10ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl10ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %483 = sub nsw i32 15360, %...i.i*/
		main_preheaderi_483 = (32'd15360 - main_preheaderi_ii_var1);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %483 = sub nsw i32 15360, %...i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_483_reg <= main_preheaderi_483;
		if (start == 1'b0 && ^(main_preheaderi_483) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_483_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %484 = icmp sgt i32 %apl1.0.i.i, %483*/
		main_preheaderi_484 = ($signed(main_preheaderi_apl10ii_reg) > $signed(main_preheaderi_483));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %484 = icmp sgt i32 %apl1.0.i.i, %483*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_484_reg <= main_preheaderi_484;
		if (start == 1'b0 && ^(main_preheaderi_484) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_484_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.apl1.0.i.i = select i1 %484, i32 %483, i32 %apl1.0.i.i*/
		main_preheaderi_apl10ii_var2 = (main_preheaderi_484 ? main_preheaderi_483 : main_preheaderi_apl10ii_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %.apl1.0.i.i = select i1 %484, i32 %483, i32 %apl1.0.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_apl10ii_var2_reg <= main_preheaderi_apl10ii_var2;
		if (start == 1'b0 && ^(main_preheaderi_apl10ii_var2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl10ii_var2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %485 = sub nsw i32 0, %483*/
		main_preheaderi_485 = (32'd0 - main_preheaderi_483);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %485 = sub nsw i32 0, %483*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_485_reg <= main_preheaderi_485;
		if (start == 1'b0 && ^(main_preheaderi_485) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_485_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %486 = icmp slt i32 %.apl1.0.i.i, %485*/
		main_preheaderi_486 = ($signed(main_preheaderi_apl10ii_var2_reg) < $signed(main_preheaderi_485_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %486 = icmp slt i32 %.apl1.0.i.i, %485*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		main_preheaderi_486_reg <= main_preheaderi_486;
		if (start == 1'b0 && ^(main_preheaderi_486) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_486_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.2.i.i = select i1 %486, i32 %485, i32 %.apl1.0.i.i*/
		main_preheaderi_apl12ii = (main_preheaderi_486 ? main_preheaderi_485_reg : main_preheaderi_apl10ii_var2_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %apl1.2.i.i = select i1 %486, i32 %485, i32 %.apl1.0.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		main_preheaderi_apl12ii_reg <= main_preheaderi_apl12ii;
		if (start == 1'b0 && ^(main_preheaderi_apl12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl12ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %487 = add nsw i32 %447, %443*/
		main_preheaderi_487 = (main_preheaderi_447_reg + main_preheaderi_443);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %487 = add nsw i32 %447, %443*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_487_reg <= main_preheaderi_487;
		if (start == 1'b0 && ^(main_preheaderi_487) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_487_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %488 = sub nsw i32 %355, %487*/
		main_preheaderi_488 = (main_preheaderi_355_reg - main_preheaderi_487);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %488 = sub nsw i32 %355, %487*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_488_reg <= main_preheaderi_488;
		if (start == 1'b0 && ^(main_preheaderi_488) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_488_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %489 = add nsw i32 %487, %355*/
		main_preheaderi_489 = (main_preheaderi_487 + main_preheaderi_355_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %489 = add nsw i32 %487, %355*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_489_reg <= main_preheaderi_489;
		if (start == 1'b0 && ^(main_preheaderi_489) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_489_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_490 = main_preheaderi_490_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %490 = mul nsw i32 %488, 12*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_490_reg <= main_preheaderi_490;
		if (start == 1'b0 && ^(main_preheaderi_490) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_490_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %490 = mul nsw i32 %488, 12*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_490_reg <= main_preheaderi_490;
		if (start == 1'b0 && ^(main_preheaderi_490) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_490_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_491 = main_preheaderi_491_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %491 = mul nsw i32 %489, -44*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_491_reg <= main_preheaderi_491;
		if (start == 1'b0 && ^(main_preheaderi_491) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_491_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %491 = mul nsw i32 %489, -44*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_491_reg <= main_preheaderi_491;
		if (start == 1'b0 && ^(main_preheaderi_491) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_491_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_492 = main_preheaderi_492_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %492 = mul nsw i32 %accumc.0.0, -44*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_492_reg <= main_preheaderi_492;
		if (start == 1'b0 && ^(main_preheaderi_492) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_492_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %492 = mul nsw i32 %accumc.0.0, -44*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_492_reg <= main_preheaderi_492;
		if (start == 1'b0 && ^(main_preheaderi_492) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_492_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %493 = add nsw i32 %492, %490*/
		main_preheaderi_493 = (main_preheaderi_492_reg + main_preheaderi_490);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %493 = add nsw i32 %492, %490*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_493_reg <= main_preheaderi_493;
		if (start == 1'b0 && ^(main_preheaderi_493) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_493_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_494 = main_preheaderi_494_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %494 = mul nsw i32 %accumd.0.0, 212*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_494_reg <= main_preheaderi_494;
		if (start == 1'b0 && ^(main_preheaderi_494) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_494_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %494 = mul nsw i32 %accumd.0.0, 212*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_494_reg <= main_preheaderi_494;
		if (start == 1'b0 && ^(main_preheaderi_494) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_494_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %495 = add nsw i32 %494, %491*/
		main_preheaderi_495 = (main_preheaderi_494_reg + main_preheaderi_491);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %495 = add nsw i32 %494, %491*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_495_reg <= main_preheaderi_495;
		if (start == 1'b0 && ^(main_preheaderi_495) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_495_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_496 = main_preheaderi_496_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %496 = mul nsw i32 %accumc.1.0, 48*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_496_reg <= main_preheaderi_496;
		if (start == 1'b0 && ^(main_preheaderi_496) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_496_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %496 = mul nsw i32 %accumc.1.0, 48*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_496_reg <= main_preheaderi_496;
		if (start == 1'b0 && ^(main_preheaderi_496) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_496_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %497 = add nsw i32 %496, %493*/
		main_preheaderi_497 = (main_preheaderi_496_reg + main_preheaderi_493);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %497 = add nsw i32 %496, %493*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_497_reg <= main_preheaderi_497;
		if (start == 1'b0 && ^(main_preheaderi_497) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_497_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_498 = main_preheaderi_498_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %498 = mul nsw i32 %accumd.1.0, -624*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_498_reg <= main_preheaderi_498;
		if (start == 1'b0 && ^(main_preheaderi_498) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_498_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %498 = mul nsw i32 %accumd.1.0, -624*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_498_reg <= main_preheaderi_498;
		if (start == 1'b0 && ^(main_preheaderi_498) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_498_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %499 = add nsw i32 %498, %495*/
		main_preheaderi_499 = (main_preheaderi_498_reg + main_preheaderi_495);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %499 = add nsw i32 %498, %495*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_499_reg <= main_preheaderi_499;
		if (start == 1'b0 && ^(main_preheaderi_499) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_499_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %500 = shl nsw i32 %accumc.2.0, 7*/
		main_preheaderi_500 = (main_preheaderi_accumc20_reg <<< (32'd7 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %500 = shl nsw i32 %accumc.2.0, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) begin
		main_preheaderi_500_reg <= main_preheaderi_500;
		if (start == 1'b0 && ^(main_preheaderi_500) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_500_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %501 = add nsw i32 %500, %497*/
		main_preheaderi_501 = (main_preheaderi_500_reg + main_preheaderi_497);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %501 = add nsw i32 %500, %497*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_501_reg <= main_preheaderi_501;
		if (start == 1'b0 && ^(main_preheaderi_501) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_501_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_502 = main_preheaderi_502_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %502 = mul nsw i32 %accumd.2.0, 1448*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_502_reg <= main_preheaderi_502;
		if (start == 1'b0 && ^(main_preheaderi_502) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_502_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %502 = mul nsw i32 %accumd.2.0, 1448*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_502_reg <= main_preheaderi_502;
		if (start == 1'b0 && ^(main_preheaderi_502) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_502_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %503 = add nsw i32 %502, %499*/
		main_preheaderi_503 = (main_preheaderi_502_reg + main_preheaderi_499);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %503 = add nsw i32 %502, %499*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_503_reg <= main_preheaderi_503;
		if (start == 1'b0 && ^(main_preheaderi_503) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_503_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_504 = main_preheaderi_504_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %504 = mul nsw i32 %accumc.3.0, -840*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_504_reg <= main_preheaderi_504;
		if (start == 1'b0 && ^(main_preheaderi_504) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_504_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %504 = mul nsw i32 %accumc.3.0, -840*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_504_reg <= main_preheaderi_504;
		if (start == 1'b0 && ^(main_preheaderi_504) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_504_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %505 = add nsw i32 %504, %501*/
		main_preheaderi_505 = (main_preheaderi_504_reg + main_preheaderi_501);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %505 = add nsw i32 %504, %501*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_505_reg <= main_preheaderi_505;
		if (start == 1'b0 && ^(main_preheaderi_505) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_505_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_506 = main_preheaderi_506_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %506 = mul nsw i32 %accumd.3.0, -3220*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_506_reg <= main_preheaderi_506;
		if (start == 1'b0 && ^(main_preheaderi_506) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_506_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %506 = mul nsw i32 %accumd.3.0, -3220*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_506_reg <= main_preheaderi_506;
		if (start == 1'b0 && ^(main_preheaderi_506) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_506_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %507 = add nsw i32 %506, %503*/
		main_preheaderi_507 = (main_preheaderi_506_reg + main_preheaderi_503);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %507 = add nsw i32 %506, %503*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_507_reg <= main_preheaderi_507;
		if (start == 1'b0 && ^(main_preheaderi_507) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_507_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_508 = main_preheaderi_508_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %508 = mul nsw i32 %accumc.4.0, 3804*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_508_reg <= main_preheaderi_508;
		if (start == 1'b0 && ^(main_preheaderi_508) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_508_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %508 = mul nsw i32 %accumc.4.0, 3804*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_508_reg <= main_preheaderi_508;
		if (start == 1'b0 && ^(main_preheaderi_508) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_508_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %509 = add nsw i32 %508, %505*/
		main_preheaderi_509 = (main_preheaderi_508_reg + main_preheaderi_505);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %509 = add nsw i32 %508, %505*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_509_reg <= main_preheaderi_509;
		if (start == 1'b0 && ^(main_preheaderi_509) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_509_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_510 = main_preheaderi_510_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %510 = mul nsw i32 %accumd.4.0, 15504*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_510_reg <= main_preheaderi_510;
		if (start == 1'b0 && ^(main_preheaderi_510) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_510_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %510 = mul nsw i32 %accumd.4.0, 15504*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_510_reg <= main_preheaderi_510;
		if (start == 1'b0 && ^(main_preheaderi_510) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_510_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %511 = add nsw i32 %510, %507*/
		main_preheaderi_511 = (main_preheaderi_510_reg + main_preheaderi_507);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %511 = add nsw i32 %510, %507*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_511_reg <= main_preheaderi_511;
		if (start == 1'b0 && ^(main_preheaderi_511) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_511_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_512 = main_preheaderi_512_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %512 = mul nsw i32 %accumc.5.0, 15504*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_512_reg <= main_preheaderi_512;
		if (start == 1'b0 && ^(main_preheaderi_512) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_512_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %512 = mul nsw i32 %accumc.5.0, 15504*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_512_reg <= main_preheaderi_512;
		if (start == 1'b0 && ^(main_preheaderi_512) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_512_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %513 = add nsw i32 %512, %509*/
		main_preheaderi_513 = (main_preheaderi_512_reg + main_preheaderi_509);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %513 = add nsw i32 %512, %509*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_513_reg <= main_preheaderi_513;
		if (start == 1'b0 && ^(main_preheaderi_513) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_513_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_514 = main_preheaderi_514_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %514 = mul nsw i32 %accumd.5.0, 3804*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_514_reg <= main_preheaderi_514;
		if (start == 1'b0 && ^(main_preheaderi_514) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_514_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %514 = mul nsw i32 %accumd.5.0, 3804*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_514_reg <= main_preheaderi_514;
		if (start == 1'b0 && ^(main_preheaderi_514) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_514_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %515 = add nsw i32 %514, %511*/
		main_preheaderi_515 = (main_preheaderi_514_reg + main_preheaderi_511);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %515 = add nsw i32 %514, %511*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_515_reg <= main_preheaderi_515;
		if (start == 1'b0 && ^(main_preheaderi_515) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_515_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_516 = main_preheaderi_516_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %516 = mul nsw i32 %accumc.6.0, -3220*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_516_reg <= main_preheaderi_516;
		if (start == 1'b0 && ^(main_preheaderi_516) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_516_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %516 = mul nsw i32 %accumc.6.0, -3220*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_516_reg <= main_preheaderi_516;
		if (start == 1'b0 && ^(main_preheaderi_516) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_516_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %517 = add nsw i32 %516, %513*/
		main_preheaderi_517 = (main_preheaderi_516_reg + main_preheaderi_513);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %517 = add nsw i32 %516, %513*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_517_reg <= main_preheaderi_517;
		if (start == 1'b0 && ^(main_preheaderi_517) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_517_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_518 = main_preheaderi_518_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %518 = mul nsw i32 %accumd.6.0, -840*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_518_reg <= main_preheaderi_518;
		if (start == 1'b0 && ^(main_preheaderi_518) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_518_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %518 = mul nsw i32 %accumd.6.0, -840*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_518_reg <= main_preheaderi_518;
		if (start == 1'b0 && ^(main_preheaderi_518) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_518_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %519 = add nsw i32 %518, %515*/
		main_preheaderi_519 = (main_preheaderi_518_reg + main_preheaderi_515);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %519 = add nsw i32 %518, %515*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_519_reg <= main_preheaderi_519;
		if (start == 1'b0 && ^(main_preheaderi_519) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_519_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_520 = main_preheaderi_520_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %520 = mul nsw i32 %accumc.7.0, 1448*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_520_reg <= main_preheaderi_520;
		if (start == 1'b0 && ^(main_preheaderi_520) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_520_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %520 = mul nsw i32 %accumc.7.0, 1448*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_520_reg <= main_preheaderi_520;
		if (start == 1'b0 && ^(main_preheaderi_520) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_520_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %521 = add nsw i32 %520, %517*/
		main_preheaderi_521 = (main_preheaderi_520_reg + main_preheaderi_517);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %521 = add nsw i32 %520, %517*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_521_reg <= main_preheaderi_521;
		if (start == 1'b0 && ^(main_preheaderi_521) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_521_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %522 = shl nsw i32 %accumd.7.0, 7*/
		main_preheaderi_522 = (main_preheaderi_accumd70_reg <<< (32'd7 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %522 = shl nsw i32 %accumd.7.0, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) begin
		main_preheaderi_522_reg <= main_preheaderi_522;
		if (start == 1'b0 && ^(main_preheaderi_522) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_522_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %523 = add nsw i32 %522, %519*/
		main_preheaderi_523 = (main_preheaderi_522_reg + main_preheaderi_519);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %523 = add nsw i32 %522, %519*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_523_reg <= main_preheaderi_523;
		if (start == 1'b0 && ^(main_preheaderi_523) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_523_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_524 = main_preheaderi_524_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %524 = mul nsw i32 %accumc.8.0, -624*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_524_reg <= main_preheaderi_524;
		if (start == 1'b0 && ^(main_preheaderi_524) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_524_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %524 = mul nsw i32 %accumc.8.0, -624*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_524_reg <= main_preheaderi_524;
		if (start == 1'b0 && ^(main_preheaderi_524) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_524_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %525 = add nsw i32 %524, %521*/
		main_preheaderi_525 = (main_preheaderi_524_reg + main_preheaderi_521_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %525 = add nsw i32 %524, %521*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_525_reg <= main_preheaderi_525;
		if (start == 1'b0 && ^(main_preheaderi_525) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_525_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_526 = main_preheaderi_526_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %526 = mul nsw i32 %accumd.8.0, 48*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_526_reg <= main_preheaderi_526;
		if (start == 1'b0 && ^(main_preheaderi_526) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_526_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %526 = mul nsw i32 %accumd.8.0, 48*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_526_reg <= main_preheaderi_526;
		if (start == 1'b0 && ^(main_preheaderi_526) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_526_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %527 = add nsw i32 %526, %523*/
		main_preheaderi_527 = (main_preheaderi_526_reg + main_preheaderi_523_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %527 = add nsw i32 %526, %523*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_527_reg <= main_preheaderi_527;
		if (start == 1'b0 && ^(main_preheaderi_527) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_527_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_528 = main_preheaderi_528_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %528 = mul nsw i32 %accumc.9.0, 212*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_528_reg <= main_preheaderi_528;
		if (start == 1'b0 && ^(main_preheaderi_528) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_528_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %528 = mul nsw i32 %accumc.9.0, 212*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_528_reg <= main_preheaderi_528;
		if (start == 1'b0 && ^(main_preheaderi_528) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_528_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %529 = add nsw i32 %528, %525*/
		main_preheaderi_529 = (main_preheaderi_528_reg + main_preheaderi_525);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %529 = add nsw i32 %528, %525*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_529_reg <= main_preheaderi_529;
		if (start == 1'b0 && ^(main_preheaderi_529) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_529_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_530 = main_preheaderi_530_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %530 = mul nsw i32 %accumd.9.0, -44*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_530_reg <= main_preheaderi_530;
		if (start == 1'b0 && ^(main_preheaderi_530) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_530_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %530 = mul nsw i32 %accumd.9.0, -44*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_530_reg <= main_preheaderi_530;
		if (start == 1'b0 && ^(main_preheaderi_530) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_530_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %531 = add nsw i32 %530, %527*/
		main_preheaderi_531 = (main_preheaderi_530_reg + main_preheaderi_527);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %531 = add nsw i32 %530, %527*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_531_reg <= main_preheaderi_531;
		if (start == 1'b0 && ^(main_preheaderi_531) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_531_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_532 = main_preheaderi_532_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %532 = mul nsw i32 %accumc.10.0, -44*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_532_reg <= main_preheaderi_532;
		if (start == 1'b0 && ^(main_preheaderi_532) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_532_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %532 = mul nsw i32 %accumc.10.0, -44*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_532_reg <= main_preheaderi_532;
		if (start == 1'b0 && ^(main_preheaderi_532) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_532_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %533 = add nsw i32 %532, %529*/
		main_preheaderi_533 = (main_preheaderi_532_reg + main_preheaderi_529);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %533 = add nsw i32 %532, %529*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_533_reg <= main_preheaderi_533;
		if (start == 1'b0 && ^(main_preheaderi_533) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_533_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_534 = main_preheaderi_534_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %534 = mul nsw i32 %accumd.10.0, 12*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_534_reg <= main_preheaderi_534;
		if (start == 1'b0 && ^(main_preheaderi_534) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_534_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %534 = mul nsw i32 %accumd.10.0, 12*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		main_preheaderi_534_reg <= main_preheaderi_534;
		if (start == 1'b0 && ^(main_preheaderi_534) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_534_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %535 = add nsw i32 %534, %531*/
		main_preheaderi_535 = (main_preheaderi_534_reg + main_preheaderi_531);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %535 = add nsw i32 %534, %531*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_535_reg <= main_preheaderi_535;
		if (start == 1'b0 && ^(main_preheaderi_535) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_535_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %536 = ashr i32 %533, 14*/
		main_preheaderi_536 = ($signed(main_preheaderi_533) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %536 = ashr i32 %533, 14*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_536_reg <= main_preheaderi_536;
		if (start == 1'b0 && ^(main_preheaderi_536) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_536_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %537 = ashr i32 %535, 14*/
		main_preheaderi_537 = ($signed(main_preheaderi_535) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %537 = ashr i32 %535, 14*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_537_reg <= main_preheaderi_537;
		if (start == 1'b0 && ^(main_preheaderi_537) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_537_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_preheaderi_indvarnext = (main_preheaderi_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) begin
		main_preheaderi_indvarnext_reg <= main_preheaderi_indvarnext;
		if (start == 1'b0 && ^(main_preheaderi_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %exitcond5 = icmp eq i32 %indvar.next, 50*/
		main_preheaderi_exitcond5 = (main_preheaderi_indvarnext == 32'd50);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %exitcond5 = icmp eq i32 %indvar.next, 50*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) begin
		main_preheaderi_exitcond5_reg <= main_preheaderi_exitcond5;
		if (start == 1'b0 && ^(main_preheaderi_exitcond5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_exitcond5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_154) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_main_result04 = 32'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_156) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg == 1'd0))) */ begin
		main_adpcm_mainexit_main_result04 = main_adpcm_mainexit_main_result0;
	end
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_154) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_main_result04_reg <= main_adpcm_mainexit_main_result04;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result04_reg"); $finish; end
	end
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_156) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg == 1'd0))) begin
		main_adpcm_mainexit_main_result04_reg <= main_adpcm_mainexit_main_result04;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result04_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %542, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_154) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_i03 = 32'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %542, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_156) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg == 1'd0))) */ begin
		main_adpcm_mainexit_i03 = main_adpcm_mainexit_542_reg;
	end
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %542, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_154) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_i03_reg <= main_adpcm_mainexit_i03;
		if (start == 1'b0 && ^(main_adpcm_mainexit_i03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_i03_reg"); $finish; end
	end
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %542, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_156) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg == 1'd0))) begin
		main_adpcm_mainexit_i03_reg <= main_adpcm_mainexit_i03;
		if (start == 1'b0 && ^(main_adpcm_mainexit_i03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_i03_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %scevgep3 = getelementptr [100 x i32]* @test_compressed, i32 0, i32 %i.03*/
		main_adpcm_mainexit_scevgep3 = (1'd0 | (4 * main_adpcm_mainexit_i03_reg));
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %scevgep3 = getelementptr [100 x i32]* @test_compressed, i32 0, i32 %i.03*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_155)) begin
		main_adpcm_mainexit_scevgep3_reg <= main_adpcm_mainexit_scevgep3;
		if (start == 1'b0 && ^(main_adpcm_mainexit_scevgep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_scevgep3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %scevgep4 = getelementptr [100 x i32]* @compressed, i32 0, i32 %i.03*/
		main_adpcm_mainexit_scevgep4 = (1'd0 | (4 * main_adpcm_mainexit_i03_reg));
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %scevgep4 = getelementptr [100 x i32]* @compressed, i32 0, i32 %i.03*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_155)) begin
		main_adpcm_mainexit_scevgep4_reg <= main_adpcm_mainexit_scevgep4;
		if (start == 1'b0 && ^(main_adpcm_mainexit_scevgep4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_scevgep4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %538 = load i32* %scevgep4, align 4, !tbaa !1*/
		main_adpcm_mainexit_538 = compressed_out_a;
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %538 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_156)) begin
		main_adpcm_mainexit_538_reg <= main_adpcm_mainexit_538;
		if (start == 1'b0 && ^(main_adpcm_mainexit_538) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_538_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %539 = load i32* %scevgep3, align 4, !tbaa !1*/
		main_adpcm_mainexit_539 = test_compressed_out_a;
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %539 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_156)) begin
		main_adpcm_mainexit_539_reg <= main_adpcm_mainexit_539;
		if (start == 1'b0 && ^(main_adpcm_mainexit_539) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_539_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %540 = icmp eq i32 %538, %539*/
		main_adpcm_mainexit_540 = (main_adpcm_mainexit_538 == main_adpcm_mainexit_539);
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %540 = icmp eq i32 %538, %539*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_156)) begin
		main_adpcm_mainexit_540_reg <= main_adpcm_mainexit_540;
		if (start == 1'b0 && ^(main_adpcm_mainexit_540) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_540_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %541 = zext i1 %540 to i32*/
		main_adpcm_mainexit_541 = main_adpcm_mainexit_540;
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %541 = zext i1 %540 to i32*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_156)) begin
		main_adpcm_mainexit_541_reg <= main_adpcm_mainexit_541;
		if (start == 1'b0 && ^(main_adpcm_mainexit_541) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_541_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %541, %main_result.04*/
		main_adpcm_mainexit_main_result0 = (main_adpcm_mainexit_541 + main_adpcm_mainexit_main_result04_reg);
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %541, %main_result.04*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_156)) begin
		main_adpcm_mainexit_main_result0_reg <= main_adpcm_mainexit_main_result0;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %542 = add nsw i32 %i.03, 1*/
		main_adpcm_mainexit_542 = (main_adpcm_mainexit_i03_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %542 = add nsw i32 %i.03, 1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_155)) begin
		main_adpcm_mainexit_542_reg <= main_adpcm_mainexit_542;
		if (start == 1'b0 && ^(main_adpcm_mainexit_542) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_542_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %exitcond = icmp eq i32 %542, 50*/
		main_adpcm_mainexit_exitcond = (main_adpcm_mainexit_542 == 32'd50);
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %exitcond = icmp eq i32 %542, 50*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_155)) begin
		main_adpcm_mainexit_exitcond_reg <= main_adpcm_mainexit_exitcond;
		if (start == 1'b0 && ^(main_adpcm_mainexit_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_157) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_main_result22 = main_adpcm_mainexit_main_result0_reg;
	end
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheader_159) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg == 1'd0))) */ begin
		main_preheader_main_result22 = main_preheader_main_result2;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_157) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_main_result22_reg <= main_preheader_main_result22;
		if (start == 1'b0 && ^(main_preheader_main_result22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result22_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader_159) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg == 1'd0))) begin
		main_preheader_main_result22_reg <= main_preheader_main_result22;
		if (start == 1'b0 && ^(main_preheader_main_result22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %547, %.preheader ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_157) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_i11 = 32'd0;
	end
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %547, %.preheader ], [ 0, %.preheader.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheader_159) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg == 1'd0))) */ begin
		main_preheader_i11 = main_preheader_547_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %547, %.preheader ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_157) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_i11_reg <= main_preheader_i11;
		if (start == 1'b0 && ^(main_preheader_i11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_i11_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %547, %.preheader ], [ 0, %.preheader.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader_159) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg == 1'd0))) begin
		main_preheader_i11_reg <= main_preheader_i11;
		if (start == 1'b0 && ^(main_preheader_i11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_i11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep = getelementptr [100 x i32]* @test_result, i32 0, i32 %i.11*/
		main_preheader_scevgep = (1'd0 | (4 * main_preheader_i11_reg));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep = getelementptr [100 x i32]* @test_result, i32 0, i32 %i.11*/
	if ((cur_state == LEGUP_F_main_BB_preheader_158)) begin
		main_preheader_scevgep_reg <= main_preheader_scevgep;
		if (start == 1'b0 && ^(main_preheader_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep2 = getelementptr [100 x i32]* @result, i32 0, i32 %i.11*/
		main_preheader_scevgep2 = (1'd0 | (4 * main_preheader_i11_reg));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep2 = getelementptr [100 x i32]* @result, i32 0, i32 %i.11*/
	if ((cur_state == LEGUP_F_main_BB_preheader_158)) begin
		main_preheader_scevgep2_reg <= main_preheader_scevgep2;
		if (start == 1'b0 && ^(main_preheader_scevgep2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %543 = load i32* %scevgep2, align 4, !tbaa !1*/
		main_preheader_543 = result_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %543 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_159)) begin
		main_preheader_543_reg <= main_preheader_543;
		if (start == 1'b0 && ^(main_preheader_543) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_543_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %544 = load i32* %scevgep, align 4, !tbaa !1*/
		main_preheader_544 = test_result_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %544 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_159)) begin
		main_preheader_544_reg <= main_preheader_544;
		if (start == 1'b0 && ^(main_preheader_544) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_544_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %545 = icmp eq i32 %543, %544*/
		main_preheader_545 = (main_preheader_543 == main_preheader_544);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %545 = icmp eq i32 %543, %544*/
	if ((cur_state == LEGUP_F_main_BB_preheader_159)) begin
		main_preheader_545_reg <= main_preheader_545;
		if (start == 1'b0 && ^(main_preheader_545) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_545_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %546 = zext i1 %545 to i32*/
		main_preheader_546 = main_preheader_545;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %546 = zext i1 %545 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_159)) begin
		main_preheader_546_reg <= main_preheader_546;
		if (start == 1'b0 && ^(main_preheader_546) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_546_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %546, %main_result.22*/
		main_preheader_main_result2 = (main_preheader_546 + main_preheader_main_result22_reg);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %546, %main_result.22*/
	if ((cur_state == LEGUP_F_main_BB_preheader_159)) begin
		main_preheader_main_result2_reg <= main_preheader_main_result2;
		if (start == 1'b0 && ^(main_preheader_main_result2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %547 = add nsw i32 %i.11, 1*/
		main_preheader_547 = (main_preheader_i11_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %547 = add nsw i32 %i.11, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_158)) begin
		main_preheader_547_reg <= main_preheader_547;
		if (start == 1'b0 && ^(main_preheader_547) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_547_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %exitcond1 = icmp eq i32 %547, 100*/
		main_preheader_exitcond1 = (main_preheader_547 == 32'd100);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %exitcond1 = icmp eq i32 %547, 100*/
	if ((cur_state == LEGUP_F_main_BB_preheader_158)) begin
		main_preheader_exitcond1_reg <= main_preheader_exitcond1;
		if (start == 1'b0 && ^(main_preheader_exitcond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_exitcond1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %548*/
	/*   %550 = icmp eq i32 %.main_result.2, 150*/
		main_548_550 = (main_preheader_main_result2_reg == 32'd150);
end
always @(posedge clk) begin
	/* main: %548*/
	/*   %550 = icmp eq i32 %.main_result.2, 150*/
	if ((cur_state == LEGUP_F_main_BB__548_160)) begin
		main_548_550_reg <= main_548_550;
		if (start == 1'b0 && ^(main_548_550) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_548_550_reg"); $finish; end
	end
end
always @(*) begin
	qq4_code4_table_address_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   %145 = load i32* %144, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_50)) begin
		qq4_code4_table_address_a = (main_quantlexiti_144 >>> 3'd2);
	end
	/* main: %.preheader.i*/
	/*   %350 = load i32* %349, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_132)) begin
		qq4_code4_table_address_a = (main_preheaderi_349 >>> 3'd2);
	end
end
always @(*) begin
	qq4_code4_table_write_enable_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   %145 = load i32* %144, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_50)) begin
		qq4_code4_table_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %350 = load i32* %349, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_132)) begin
		qq4_code4_table_write_enable_a = 1'd0;
	end
end
always @(*) begin
	qq6_code6_table_address_a = 1'd0;
	/* main: %.preheader.i.preheader*/
	/*   %293 = load i32* %292, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_97)) begin
		qq6_code6_table_address_a = (main_preheaderipreheader_292 >>> 3'd2);
	end
end
always @(*) begin
	qq6_code6_table_write_enable_a = 1'd0;
	/* main: %.preheader.i.preheader*/
	/*   %293 = load i32* %292, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_97)) begin
		qq6_code6_table_write_enable_a = 1'd0;
	end
end
always @(*) begin
	wl_code_table_address_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   %149 = load i32* %148, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_50)) begin
		wl_code_table_address_a = (main_quantlexiti_148 >>> 3'd2);
	end
	/* main: %.preheader.i*/
	/*   %359 = load i32* %358, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_132)) begin
		wl_code_table_address_a = (main_preheaderi_358 >>> 3'd2);
	end
end
always @(*) begin
	wl_code_table_write_enable_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   %149 = load i32* %148, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_50)) begin
		wl_code_table_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %359 = load i32* %358, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_132)) begin
		wl_code_table_write_enable_a = 1'd0;
	end
end
always @(*) begin
	ilb_table_address_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   %156 = load i32* %155, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_52)) begin
		ilb_table_address_a = (main_quantlexiti_155 >>> 3'd2);
	end
	/* main: %quantl.exit.i*/
	/*   %251 = load i32* %250, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		ilb_table_address_a = (main_quantlexiti_250 >>> 3'd2);
	end
	/* main: %.preheader.i*/
	/*   %367 = load i32* %366, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_134)) begin
		ilb_table_address_a = (main_preheaderi_366 >>> 3'd2);
	end
	/* main: %.preheader.i*/
	/*   %459 = load i32* %458, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		ilb_table_address_a = (main_preheaderi_458 >>> 3'd2);
	end
end
always @(*) begin
	ilb_table_write_enable_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   %156 = load i32* %155, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_52)) begin
		ilb_table_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %251 = load i32* %250, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		ilb_table_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %367 = load i32* %366, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_134)) begin
		ilb_table_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %459 = load i32* %458, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		ilb_table_write_enable_a = 1'd0;
	end
end
always @(*) begin
	decis_levl_address_a = 1'd0;
	/* main: %136*/
	/*   %139 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__136_44)) begin
		decis_levl_address_a = (main_136_scevgep8 >>> 3'd2);
	end
end
always @(*) begin
	decis_levl_write_enable_a = 1'd0;
	/* main: %136*/
	/*   %139 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__136_44)) begin
		decis_levl_write_enable_a = 1'd0;
	end
end
always @(*) begin
	qq2_code2_table_address_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   %240 = load i32* %239, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_69)) begin
		qq2_code2_table_address_a = (main_quantlexiti_239 >>> 3'd2);
	end
	/* main: %.preheader.i*/
	/*   %445 = load i32* %444, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		qq2_code2_table_address_a = (main_preheaderi_444_reg >>> 3'd2);
	end
end
always @(*) begin
	qq2_code2_table_write_enable_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   %240 = load i32* %239, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_69)) begin
		qq2_code2_table_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %445 = load i32* %444, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		qq2_code2_table_write_enable_a = 1'd0;
	end
end
always @(*) begin
	wh_code_table_address_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   %244 = load i32* %243, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_69)) begin
		wh_code_table_address_a = (main_quantlexiti_243 >>> 3'd2);
	end
	/* main: %.preheader.i*/
	/*   %451 = load i32* %450, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		wh_code_table_address_a = (main_preheaderi_450_reg >>> 3'd2);
	end
end
always @(*) begin
	wh_code_table_write_enable_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   %244 = load i32* %243, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_69)) begin
		wh_code_table_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %451 = load i32* %450, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		wh_code_table_write_enable_a = 1'd0;
	end
end
always @(*) begin
	tqmf_address_a = 1'd0;
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_28)) begin
		tqmf_address_a = (main_2_si0 >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %8, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd23)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %10, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd21)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %12, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd19)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %14, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd17)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %16, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd15)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %18, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd13)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %20, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd11)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %22, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd9)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %24, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd7)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %26, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd5)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %28, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd3)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %32, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd1)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_83)) begin
		tqmf_address_a = (1'd0 >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre17 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_84)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd2)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre19 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_85)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd4)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre21 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_86)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd6)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre23 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_87)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd8)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre25 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_88)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd10)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre27 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_89)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd12)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre29 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd14)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre31 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd16)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre33 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd18)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre35 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd20)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre37 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd22)) >>> 3'd2);
	end
end
always @(*) begin
	tqmf_write_enable_a = 1'd0;
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_28)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %8, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %10, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %12, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %14, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %16, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %18, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %20, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %22, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %24, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %26, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %28, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %32, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_83)) begin
		tqmf_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre17 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_84)) begin
		tqmf_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre19 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_85)) begin
		tqmf_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre21 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_86)) begin
		tqmf_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre23 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_87)) begin
		tqmf_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre25 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_88)) begin
		tqmf_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre27 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_89)) begin
		tqmf_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre29 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		tqmf_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre31 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		tqmf_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre33 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		tqmf_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre35 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		tqmf_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre37 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		tqmf_write_enable_a = 1'd0;
	end
end
always @(*) begin
	tqmf_in_a = 1'd0;
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_28)) begin
		tqmf_in_a = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %8, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_8_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %10, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_10_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %12, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_12_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %14, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_14_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %16, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_16_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %18, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_18_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %20, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_20_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %22, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_22_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %24, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_24_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %26, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_26_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %28, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_28_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %32, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_32_reg;
	end
end
always @(*) begin
	tqmf_address_b = 1'd0;
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %9, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd22)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %11, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd20)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %13, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd18)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %15, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd16)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd14)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %19, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd12)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %21, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd10)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %23, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd8)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %25, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd6)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %27, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd4)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %29, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd2)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %33, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		tqmf_address_b = (1'd0 >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre16 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_83)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd1)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre18 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_84)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd3)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre20 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_85)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd5)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre22 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_86)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd7)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre24 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_87)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd9)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre26 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_88)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd11)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre28 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_89)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd13)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre30 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd15)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre32 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd17)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre34 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd19)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre36 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd21)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd23)) >>> 3'd2);
	end
end
always @(*) begin
	tqmf_write_enable_b = 1'd0;
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %9, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %11, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %13, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %15, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %19, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %21, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %23, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %25, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %27, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %29, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %33, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre16 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_83)) begin
		tqmf_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre18 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_84)) begin
		tqmf_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre20 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_85)) begin
		tqmf_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre22 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_86)) begin
		tqmf_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre24 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_87)) begin
		tqmf_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre26 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_88)) begin
		tqmf_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre28 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_89)) begin
		tqmf_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre30 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		tqmf_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre32 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		tqmf_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre34 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		tqmf_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre36 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		tqmf_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		tqmf_write_enable_b = 1'd0;
	end
end
always @(*) begin
	tqmf_in_b = 1'd0;
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %9, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_9_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %11, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_11_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %13, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_13_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %15, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_15_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_17_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %19, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_19_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %21, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_21_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %23, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_23_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %25, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_25_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %27, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_27_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %29, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_29_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %33, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_33_reg;
	end
end
always @(*) begin
	test_data_address_a = 1'd0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %32 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		test_data_address_a = (main_legup_memset_4_i64exit_scevgep12 >>> 3'd2);
	end
end
always @(*) begin
	test_data_write_enable_a = 1'd0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %32 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		test_data_write_enable_a = 1'd0;
	end
end
always @(*) begin
	test_data_address_b = 1'd0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %33 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		test_data_address_b = (main_legup_memset_4_i64exit_scevgep11 >>> 3'd2);
	end
end
always @(*) begin
	test_data_write_enable_b = 1'd0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %33 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		test_data_write_enable_b = 1'd0;
	end
end
always @(*) begin
	test_compressed_address_a = 1'd0;
	/* main: %adpcm_main.exit*/
	/*   %539 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_155)) begin
		test_compressed_address_a = (main_adpcm_mainexit_scevgep3 >>> 3'd2);
	end
end
always @(*) begin
	test_compressed_write_enable_a = 1'd0;
	/* main: %adpcm_main.exit*/
	/*   %539 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_155)) begin
		test_compressed_write_enable_a = 1'd0;
	end
end
always @(*) begin
	test_result_address_a = 1'd0;
	/* main: %.preheader*/
	/*   %544 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_158)) begin
		test_result_address_a = (main_preheader_scevgep >>> 3'd2);
	end
end
always @(*) begin
	test_result_write_enable_a = 1'd0;
	/* main: %.preheader*/
	/*   %544 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_158)) begin
		test_result_write_enable_a = 1'd0;
	end
end
always @(*) begin
	compressed_address_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   store i32 %276, i32* %278, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_81)) begin
		compressed_address_a = (main_quantlexiti_278 >>> 3'd2);
	end
	/* main: %.preheader.i*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_131)) begin
		compressed_address_a = (main_preheaderi_296 >>> 3'd2);
	end
	/* main: %adpcm_main.exit*/
	/*   %538 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_155)) begin
		compressed_address_a = (main_adpcm_mainexit_scevgep4 >>> 3'd2);
	end
end
always @(*) begin
	compressed_write_enable_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   store i32 %276, i32* %278, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_81)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_131)) begin
		compressed_write_enable_a = 1'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %538 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_155)) begin
		compressed_write_enable_a = 1'd0;
	end
end
always @(*) begin
	compressed_in_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   store i32 %276, i32* %278, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_81)) begin
		compressed_in_a = main_quantlexiti_276_reg;
	end
end
always @(*) begin
	result_address_a = 1'd0;
	/* main: %.preheader.i*/
	/*   store i32 %536, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		result_address_a = (main_preheaderi_scevgep7_reg >>> 3'd2);
	end
	/* main: %.preheader*/
	/*   %543 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_158)) begin
		result_address_a = (main_preheader_scevgep2 >>> 3'd2);
	end
end
always @(*) begin
	result_write_enable_a = 1'd0;
	/* main: %.preheader.i*/
	/*   store i32 %536, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		result_write_enable_a = 1'd1;
	end
	/* main: %.preheader*/
	/*   %543 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_158)) begin
		result_write_enable_a = 1'd0;
	end
end
always @(*) begin
	result_in_a = 1'd0;
	/* main: %.preheader.i*/
	/*   store i32 %536, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		result_in_a = main_preheaderi_536;
	end
end
always @(*) begin
	result_address_b = 1'd0;
	/* main: %.preheader.i*/
	/*   store i32 %537, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		result_address_b = (main_preheaderi_scevgep6_reg >>> 3'd2);
	end
end
always @(*) begin
	result_write_enable_b = 1'd0;
	/* main: %.preheader.i*/
	/*   store i32 %537, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		result_write_enable_b = 1'd1;
	end
end
always @(*) begin
	result_in_b = 1'd0;
	/* main: %.preheader.i*/
	/*   store i32 %537, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		result_in_b = main_preheaderi_537;
	end
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   tail call void @upzero(i32 %147, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		upzero_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_54)) begin
		upzero_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call void @upzero(i32 %242, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		upzero_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_73)) begin
		upzero_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call void @upzero(i32 %352, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		upzero_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_136)) begin
		upzero_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call void @upzero(i32 %447, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		upzero_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_150)) begin
		upzero_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   tail call void @upzero(i32 %147, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		upzero_arg_dlt <= main_quantlexiti_147_reg;
		if (start == 1'b0 && ^(main_quantlexiti_147_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call void @upzero(i32 %242, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		upzero_arg_dlt <= main_quantlexiti_242_reg;
		if (start == 1'b0 && ^(main_quantlexiti_242_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call void @upzero(i32 %352, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		upzero_arg_dlt <= main_preheaderi_352_reg;
		if (start == 1'b0 && ^(main_preheaderi_352_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call void @upzero(i32 %447, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		upzero_arg_dlt <= main_preheaderi_447_reg;
		if (start == 1'b0 && ^(main_preheaderi_447_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   tail call void @upzero(i32 %147, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		upzero_arg_dlti <= `TAG_g_delay_dltx_a;
		if (start == 1'b0 && ^(`TAG_g_delay_dltx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call void @upzero(i32 %242, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		upzero_arg_dlti <= `TAG_g_delay_dhx_a;
		if (start == 1'b0 && ^(`TAG_g_delay_dhx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call void @upzero(i32 %352, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		upzero_arg_dlti <= `TAG_g_dec_del_dltx_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_dltx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call void @upzero(i32 %447, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		upzero_arg_dlti <= `TAG_g_dec_del_dhx_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_dhx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   tail call void @upzero(i32 %147, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		upzero_arg_bli <= `TAG_g_delay_bpl_a;
		if (start == 1'b0 && ^(`TAG_g_delay_bpl_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call void @upzero(i32 %242, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		upzero_arg_bli <= `TAG_g_delay_bph_a;
		if (start == 1'b0 && ^(`TAG_g_delay_bph_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call void @upzero(i32 %352, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		upzero_arg_bli <= `TAG_g_dec_del_bpl_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_bpl_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call void @upzero(i32 %447, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		upzero_arg_bli <= `TAG_g_dec_del_bph_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_bph_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli"); $finish; end
	end
end
always @(*) begin
	upzero_finish_final = upzero_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_quantlexiti_53))) begin
		upzero_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if (upzero_finish) begin
		upzero_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_quantlexiti_72))) begin
		upzero_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if (upzero_finish) begin
		upzero_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_preheaderi_135))) begin
		upzero_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if (upzero_finish) begin
		upzero_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_preheaderi_149))) begin
		upzero_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if (upzero_finish) begin
		upzero_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %quantl.exit.i*/
	/*   tail call void @upzero(i32 %147, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_54)) begin
		legup_function_call = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   tail call void @upzero(i32 %242, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_73)) begin
		legup_function_call = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   tail call void @upzero(i32 %352, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_136)) begin
		legup_function_call = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   tail call void @upzero(i32 %447, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_150)) begin
		legup_function_call = 1'd1;
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %277 = sdiv i32 %i.02.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_47)) begin
		main_signed_divide_32_0_op0 = main_legup_memset_4_i64exit_i02i_reg;
	end
	/* main: %.preheader.i*/
	/*   %295 = sdiv i32 %i.11.i, 2*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) */ begin
		main_signed_divide_32_0_op0 = main_preheaderi_i11i;
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %277 = sdiv i32 %i.02.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_47)) begin
		main_signed_divide_32_0_op1 = 32'd2;
	end
	/* main: %.preheader.i*/
	/*   %295 = sdiv i32 %i.11.i, 2*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) */ begin
		main_signed_divide_32_0_op1 = 32'd2;
	end
end
always @(*) begin
	lpm_divide_main_preheaderi_295_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_divide_main_preheaderi_295_out = lpm_divide_main_preheaderi_295_temp_out;
end
always @(*) begin
	main_signed_divide_32_0 = lpm_divide_main_preheaderi_295_out;
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_34_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %34 = mul nsw i32 %29, 12*/
	if ((lpm_mult_main_legup_memset_4_i64exit_34_en == 1'd1)) begin
		main_legup_memset_4_i64exit_34_stage0_reg <= (main_legup_memset_4_i64exit_29_reg * 32'd12);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_35_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %35 = mul nsw i32 %28, -44*/
	if ((lpm_mult_main_legup_memset_4_i64exit_35_en == 1'd1)) begin
		main_legup_memset_4_i64exit_35_stage0_reg <= (main_legup_memset_4_i64exit_28_reg * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_36_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = mul nsw i32 %27, -44*/
	if ((lpm_mult_main_legup_memset_4_i64exit_36_en == 1'd1)) begin
		main_legup_memset_4_i64exit_36_stage0_reg <= (main_legup_memset_4_i64exit_27_reg * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_38_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %38 = mul nsw i32 %26, 212*/
	if ((lpm_mult_main_legup_memset_4_i64exit_38_en == 1'd1)) begin
		main_legup_memset_4_i64exit_38_stage0_reg <= (main_legup_memset_4_i64exit_26_reg * 32'd212);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_40_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %40 = mul nsw i32 %25, 48*/
	if ((lpm_mult_main_legup_memset_4_i64exit_40_en == 1'd1)) begin
		main_legup_memset_4_i64exit_40_stage0_reg <= (main_legup_memset_4_i64exit_25_reg * 32'd48);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_42_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = mul nsw i32 %24, -624*/
	if ((lpm_mult_main_legup_memset_4_i64exit_42_en == 1'd1)) begin
		main_legup_memset_4_i64exit_42_stage0_reg <= (main_legup_memset_4_i64exit_24_reg * -32'd624);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_46_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %46 = mul nsw i32 %22, 1448*/
	if ((lpm_mult_main_legup_memset_4_i64exit_46_en == 1'd1)) begin
		main_legup_memset_4_i64exit_46_stage0_reg <= (main_legup_memset_4_i64exit_22_reg * 32'd1448);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_48_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = mul nsw i32 %21, -840*/
	if ((lpm_mult_main_legup_memset_4_i64exit_48_en == 1'd1)) begin
		main_legup_memset_4_i64exit_48_stage0_reg <= (main_legup_memset_4_i64exit_21_reg * -32'd840);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_50_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %50 = mul nsw i32 %20, -3220*/
	if ((lpm_mult_main_legup_memset_4_i64exit_50_en == 1'd1)) begin
		main_legup_memset_4_i64exit_50_stage0_reg <= (main_legup_memset_4_i64exit_20_reg * -32'd3220);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_52_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %52 = mul nsw i32 %19, 3804*/
	if ((lpm_mult_main_legup_memset_4_i64exit_52_en == 1'd1)) begin
		main_legup_memset_4_i64exit_52_stage0_reg <= (main_legup_memset_4_i64exit_19_reg * 32'd3804);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_54_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = mul nsw i32 %18, 15504*/
	if ((lpm_mult_main_legup_memset_4_i64exit_54_en == 1'd1)) begin
		main_legup_memset_4_i64exit_54_stage0_reg <= (main_legup_memset_4_i64exit_18_reg * 32'd15504);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_56_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %56 = mul nsw i32 %17, 15504*/
	if ((lpm_mult_main_legup_memset_4_i64exit_56_en == 1'd1)) begin
		main_legup_memset_4_i64exit_56_stage0_reg <= (main_legup_memset_4_i64exit_17_reg * 32'd15504);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_58_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %58 = mul nsw i32 %16, 3804*/
	if ((lpm_mult_main_legup_memset_4_i64exit_58_en == 1'd1)) begin
		main_legup_memset_4_i64exit_58_stage0_reg <= (main_legup_memset_4_i64exit_16_reg * 32'd3804);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_60_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %60 = mul nsw i32 %15, -3220*/
	if ((lpm_mult_main_legup_memset_4_i64exit_60_en == 1'd1)) begin
		main_legup_memset_4_i64exit_60_stage0_reg <= (main_legup_memset_4_i64exit_15_reg * -32'd3220);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_62_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %62 = mul nsw i32 %14, -840*/
	if ((lpm_mult_main_legup_memset_4_i64exit_62_en == 1'd1)) begin
		main_legup_memset_4_i64exit_62_stage0_reg <= (main_legup_memset_4_i64exit_14_reg * -32'd840);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_64_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %64 = mul nsw i32 %13, 1448*/
	if ((lpm_mult_main_legup_memset_4_i64exit_64_en == 1'd1)) begin
		main_legup_memset_4_i64exit_64_stage0_reg <= (main_legup_memset_4_i64exit_13_reg * 32'd1448);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_68_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %68 = mul nsw i32 %11, -624*/
	if ((lpm_mult_main_legup_memset_4_i64exit_68_en == 1'd1)) begin
		main_legup_memset_4_i64exit_68_stage0_reg <= (main_legup_memset_4_i64exit_11_reg * -32'd624);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_70_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %70 = mul nsw i32 %10, 48*/
	if ((lpm_mult_main_legup_memset_4_i64exit_70_en == 1'd1)) begin
		main_legup_memset_4_i64exit_70_stage0_reg <= (main_legup_memset_4_i64exit_10_reg * 32'd48);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_72_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %72 = mul nsw i32 %9, 212*/
	if ((lpm_mult_main_legup_memset_4_i64exit_72_en == 1'd1)) begin
		main_legup_memset_4_i64exit_72_stage0_reg <= (main_legup_memset_4_i64exit_9_reg * 32'd212);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_74_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %74 = mul nsw i32 %8, -44*/
	if ((lpm_mult_main_legup_memset_4_i64exit_74_en == 1'd1)) begin
		main_legup_memset_4_i64exit_74_stage0_reg <= (main_legup_memset_4_i64exit_8_reg * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_127_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %127 = mul nsw i32 %126, %al2.0*/
	if ((lpm_mult_main_legup_memset_4_i64exit_127_en == 1'd1)) begin
		main_legup_memset_4_i64exit_127_stage0_reg <= (main_legup_memset_4_i64exit_126 * main_legup_memset_4_i64exit_al20_reg);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_84_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %84 = mul nsw i32 %83, %82*/
	if ((lpm_mult_main_legup_memset_4_i64exit_84_en == 1'd1)) begin
		main_legup_memset_4_i64exit_84_stage0_reg <= (main_legup_memset_4_i64exit_83 * main_legup_memset_4_i64exit_82);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_87_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %87 = mul nsw i32 %86, %85*/
	if ((lpm_mult_main_legup_memset_4_i64exit_87_en == 1'd1)) begin
		main_legup_memset_4_i64exit_87_stage0_reg <= (main_legup_memset_4_i64exit_86 * main_legup_memset_4_i64exit_85);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_91_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %91 = mul nsw i32 %90, %89*/
	if ((lpm_mult_main_legup_memset_4_i64exit_91_en == 1'd1)) begin
		main_legup_memset_4_i64exit_91_stage0_reg <= (main_legup_memset_4_i64exit_90 * main_legup_memset_4_i64exit_89);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_95_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %95 = mul nsw i32 %94, %93*/
	if ((lpm_mult_main_legup_memset_4_i64exit_95_en == 1'd1)) begin
		main_legup_memset_4_i64exit_95_stage0_reg <= (main_legup_memset_4_i64exit_94 * main_legup_memset_4_i64exit_93);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_99_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %99 = mul nsw i32 %98, %97*/
	if ((lpm_mult_main_legup_memset_4_i64exit_99_en == 1'd1)) begin
		main_legup_memset_4_i64exit_99_stage0_reg <= (main_legup_memset_4_i64exit_98 * main_legup_memset_4_i64exit_97);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_103_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %103 = mul nsw i32 %102, %101*/
	if ((lpm_mult_main_legup_memset_4_i64exit_103_en == 1'd1)) begin
		main_legup_memset_4_i64exit_103_stage0_reg <= (main_legup_memset_4_i64exit_102 * main_legup_memset_4_i64exit_101);
	end
end
always @(*) begin
	lpm_mult_main_136_140_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %136*/
	/*   %140 = mul nsw i32 %139, %detl.0*/
	if ((lpm_mult_main_136_140_en == 1'd1)) begin
		main_136_140_stage0_reg <= (main_136_139 * main_legup_memset_4_i64exit_detl0_reg);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_167_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %167 = mul nsw i32 %al2.0, 127*/
	if ((lpm_mult_main_quantlexiti_167_en == 1'd1)) begin
		main_quantlexiti_167_stage0_reg <= (main_legup_memset_4_i64exit_al20_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_172_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %172 = mul nsw i32 %al1.0, 255*/
	if ((lpm_mult_main_quantlexiti_172_en == 1'd1)) begin
		main_quantlexiti_172_stage0_reg <= (main_legup_memset_4_i64exit_al10_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_225_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %225 = mul nsw i32 %224, %ah2.0*/
	if ((lpm_mult_main_quantlexiti_225_en == 1'd1)) begin
		main_quantlexiti_225_stage0_reg <= (main_quantlexiti_224 * main_legup_memset_4_i64exit_ah20_reg);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_231_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %231 = mul nsw i32 %deth.0, 564*/
	if ((lpm_mult_main_quantlexiti_231_en == 1'd1)) begin
		main_quantlexiti_231_stage0_reg <= (main_legup_memset_4_i64exit_deth0_reg * 32'd564);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_262_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %262 = mul nsw i32 %ah2.0, 127*/
	if ((lpm_mult_main_quantlexiti_262_en == 1'd1)) begin
		main_quantlexiti_262_stage0_reg <= (main_legup_memset_4_i64exit_ah20_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_267_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %267 = mul nsw i32 %ah1.0, 255*/
	if ((lpm_mult_main_quantlexiti_267_en == 1'd1)) begin
		main_quantlexiti_267_stage0_reg <= (main_legup_memset_4_i64exit_ah10_reg * 32'd255);
	end
end
always @(*) begin
	lpm_divide_main_quantlexiti_277_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_quantlexiti_146_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %146 = mul nsw i32 %145, %detl.0*/
	if ((lpm_mult_main_quantlexiti_146_en == 1'd1)) begin
		main_quantlexiti_146_stage0_reg <= (main_quantlexiti_145 * main_legup_memset_4_i64exit_detl0_reg);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_159_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %159 = mul nsw i32 %plt1.0, %157*/
	if ((lpm_mult_main_quantlexiti_159_en == 1'd1)) begin
		main_quantlexiti_159_stage0_reg <= (main_legup_memset_4_i64exit_plt10_reg * main_quantlexiti_157);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_163_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %163 = mul nsw i32 %plt2.0, %157*/
	if ((lpm_mult_main_quantlexiti_163_en == 1'd1)) begin
		main_quantlexiti_163_stage0_reg <= (main_legup_memset_4_i64exit_plt20_reg * main_quantlexiti_157);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_182_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %182 = mul nsw i32 %181, %180*/
	if ((lpm_mult_main_quantlexiti_182_en == 1'd1)) begin
		main_quantlexiti_182_stage0_reg <= (main_quantlexiti_181 * main_quantlexiti_180);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_185_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %185 = mul nsw i32 %184, %183*/
	if ((lpm_mult_main_quantlexiti_185_en == 1'd1)) begin
		main_quantlexiti_185_stage0_reg <= (main_quantlexiti_184 * main_quantlexiti_183);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_189_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %189 = mul nsw i32 %188, %187*/
	if ((lpm_mult_main_quantlexiti_189_en == 1'd1)) begin
		main_quantlexiti_189_stage0_reg <= (main_quantlexiti_188 * main_quantlexiti_187);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_193_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %193 = mul nsw i32 %192, %191*/
	if ((lpm_mult_main_quantlexiti_193_en == 1'd1)) begin
		main_quantlexiti_193_stage0_reg <= (main_quantlexiti_192 * main_quantlexiti_191);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_197_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %197 = mul nsw i32 %196, %195*/
	if ((lpm_mult_main_quantlexiti_197_en == 1'd1)) begin
		main_quantlexiti_197_stage0_reg <= (main_quantlexiti_196 * main_quantlexiti_195);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_201_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %201 = mul nsw i32 %200, %199*/
	if ((lpm_mult_main_quantlexiti_201_en == 1'd1)) begin
		main_quantlexiti_201_stage0_reg <= (main_quantlexiti_200 * main_quantlexiti_199);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_241_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %241 = mul nsw i32 %240, %deth.0*/
	if ((lpm_mult_main_quantlexiti_241_en == 1'd1)) begin
		main_quantlexiti_241_stage0_reg <= (main_quantlexiti_240 * main_legup_memset_4_i64exit_deth0_reg);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_254_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %254 = mul nsw i32 %ph1.0, %252*/
	if ((lpm_mult_main_quantlexiti_254_en == 1'd1)) begin
		main_quantlexiti_254_stage0_reg <= (main_legup_memset_4_i64exit_ph10_reg * main_quantlexiti_252);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_258_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %258 = mul nsw i32 %ph2.0, %252*/
	if ((lpm_mult_main_quantlexiti_258_en == 1'd1)) begin
		main_quantlexiti_258_stage0_reg <= (main_legup_memset_4_i64exit_ph20_reg * main_quantlexiti_252);
	end
end
always @(*) begin
	lpm_mult_main_encodeexit_crit_edge_phitmp2_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp2 = mul i32 %...i12.i, 127*/
	if ((lpm_mult_main_encodeexit_crit_edge_phitmp2_en == 1'd1)) begin
		main_encodeexit_crit_edge_phitmp2_stage0_reg <= (main_quantlexiti_i12i_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_encodeexit_crit_edge_phitmp4_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp4 = mul i32 %...i2.i2, 127*/
	if ((lpm_mult_main_encodeexit_crit_edge_phitmp4_en == 1'd1)) begin
		main_encodeexit_crit_edge_phitmp4_stage0_reg <= (main_quantlexiti_i2i2_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_encodeexit_crit_edge_phitmp_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp = mul i32 %.pre37, -44*/
	if ((lpm_mult_main_encodeexit_crit_edge_phitmp_en == 1'd1)) begin
		main_encodeexit_crit_edge_phitmp_stage0_reg <= (main_encodeexit_crit_edge_pre37 * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_encodeexit_crit_edge_phitmp1_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp1 = mul i32 %.pre38, 12*/
	if ((lpm_mult_main_encodeexit_crit_edge_phitmp1_en == 1'd1)) begin
		main_encodeexit_crit_edge_phitmp1_stage0_reg <= (main_encodeexit_crit_edge_pre38 * 32'd12);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_344_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %344 = mul nsw i32 %343, %dec_al2.0*/
	if ((lpm_mult_main_preheaderi_344_en == 1'd1)) begin
		main_preheaderi_344_stage0_reg <= (main_preheaderi_343 * main_preheaderi_dec_al20_reg);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_353_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %353 = mul nsw i32 %293, %dec_detl.0*/
	if ((lpm_mult_main_preheaderi_353_en == 1'd1)) begin
		main_preheaderi_353_stage0_reg <= (main_preheaderipreheader_293_reg * main_preheaderi_dec_detl0_reg);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_356_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %356 = mul nsw i32 %dec_nbl.0, 127*/
	if ((lpm_mult_main_preheaderi_356_en == 1'd1)) begin
		main_preheaderi_356_stage0_reg <= (main_preheaderi_dec_nbl0_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_381_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %381 = mul nsw i32 %dec_al2.0, 127*/
	if ((lpm_mult_main_preheaderi_381_en == 1'd1)) begin
		main_preheaderi_381_stage0_reg <= (main_preheaderi_dec_al20_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_386_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %386 = mul nsw i32 %dec_al1.0, 255*/
	if ((lpm_mult_main_preheaderi_386_en == 1'd1)) begin
		main_preheaderi_386_stage0_reg <= (main_preheaderi_dec_al10_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_441_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %441 = mul nsw i32 %440, %dec_ah2.0*/
	if ((lpm_mult_main_preheaderi_441_en == 1'd1)) begin
		main_preheaderi_441_stage0_reg <= (main_preheaderi_440 * main_preheaderi_dec_ah20_reg);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_448_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %448 = mul nsw i32 %dec_nbh.0, 127*/
	if ((lpm_mult_main_preheaderi_448_en == 1'd1)) begin
		main_preheaderi_448_stage0_reg <= (main_preheaderi_dec_nbh0_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_473_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %473 = mul nsw i32 %dec_ah2.0, 127*/
	if ((lpm_mult_main_preheaderi_473_en == 1'd1)) begin
		main_preheaderi_473_stage0_reg <= (main_preheaderi_dec_ah20_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_478_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %478 = mul nsw i32 %dec_ah1.0, 255*/
	if ((lpm_mult_main_preheaderi_478_en == 1'd1)) begin
		main_preheaderi_478_stage0_reg <= (main_preheaderi_dec_ah10_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_492_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %492 = mul nsw i32 %accumc.0.0, -44*/
	if ((lpm_mult_main_preheaderi_492_en == 1'd1)) begin
		main_preheaderi_492_stage0_reg <= (main_preheaderi_accumc00_reg * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_494_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %494 = mul nsw i32 %accumd.0.0, 212*/
	if ((lpm_mult_main_preheaderi_494_en == 1'd1)) begin
		main_preheaderi_494_stage0_reg <= (main_preheaderi_accumd00_reg * 32'd212);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_496_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %496 = mul nsw i32 %accumc.1.0, 48*/
	if ((lpm_mult_main_preheaderi_496_en == 1'd1)) begin
		main_preheaderi_496_stage0_reg <= (main_preheaderi_accumc10_reg * 32'd48);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_498_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %498 = mul nsw i32 %accumd.1.0, -624*/
	if ((lpm_mult_main_preheaderi_498_en == 1'd1)) begin
		main_preheaderi_498_stage0_reg <= (main_preheaderi_accumd10_reg * -32'd624);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_502_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %502 = mul nsw i32 %accumd.2.0, 1448*/
	if ((lpm_mult_main_preheaderi_502_en == 1'd1)) begin
		main_preheaderi_502_stage0_reg <= (main_preheaderi_accumd20_reg * 32'd1448);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_504_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %504 = mul nsw i32 %accumc.3.0, -840*/
	if ((lpm_mult_main_preheaderi_504_en == 1'd1)) begin
		main_preheaderi_504_stage0_reg <= (main_preheaderi_accumc30_reg * -32'd840);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_506_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %506 = mul nsw i32 %accumd.3.0, -3220*/
	if ((lpm_mult_main_preheaderi_506_en == 1'd1)) begin
		main_preheaderi_506_stage0_reg <= (main_preheaderi_accumd30_reg * -32'd3220);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_508_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %508 = mul nsw i32 %accumc.4.0, 3804*/
	if ((lpm_mult_main_preheaderi_508_en == 1'd1)) begin
		main_preheaderi_508_stage0_reg <= (main_preheaderi_accumc40_reg * 32'd3804);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_510_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %510 = mul nsw i32 %accumd.4.0, 15504*/
	if ((lpm_mult_main_preheaderi_510_en == 1'd1)) begin
		main_preheaderi_510_stage0_reg <= (main_preheaderi_accumd40_reg * 32'd15504);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_512_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %512 = mul nsw i32 %accumc.5.0, 15504*/
	if ((lpm_mult_main_preheaderi_512_en == 1'd1)) begin
		main_preheaderi_512_stage0_reg <= (main_preheaderi_accumc50_reg * 32'd15504);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_514_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %514 = mul nsw i32 %accumd.5.0, 3804*/
	if ((lpm_mult_main_preheaderi_514_en == 1'd1)) begin
		main_preheaderi_514_stage0_reg <= (main_preheaderi_accumd50_reg * 32'd3804);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_516_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %516 = mul nsw i32 %accumc.6.0, -3220*/
	if ((lpm_mult_main_preheaderi_516_en == 1'd1)) begin
		main_preheaderi_516_stage0_reg <= (main_preheaderi_accumc60_reg * -32'd3220);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_518_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %518 = mul nsw i32 %accumd.6.0, -840*/
	if ((lpm_mult_main_preheaderi_518_en == 1'd1)) begin
		main_preheaderi_518_stage0_reg <= (main_preheaderi_accumd60_reg * -32'd840);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_520_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %520 = mul nsw i32 %accumc.7.0, 1448*/
	if ((lpm_mult_main_preheaderi_520_en == 1'd1)) begin
		main_preheaderi_520_stage0_reg <= (main_preheaderi_accumc70_reg * 32'd1448);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_524_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %524 = mul nsw i32 %accumc.8.0, -624*/
	if ((lpm_mult_main_preheaderi_524_en == 1'd1)) begin
		main_preheaderi_524_stage0_reg <= (main_preheaderi_accumc80_reg * -32'd624);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_526_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %526 = mul nsw i32 %accumd.8.0, 48*/
	if ((lpm_mult_main_preheaderi_526_en == 1'd1)) begin
		main_preheaderi_526_stage0_reg <= (main_preheaderi_accumd80_reg * 32'd48);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_528_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %528 = mul nsw i32 %accumc.9.0, 212*/
	if ((lpm_mult_main_preheaderi_528_en == 1'd1)) begin
		main_preheaderi_528_stage0_reg <= (main_preheaderi_accumc90_reg * 32'd212);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_530_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %530 = mul nsw i32 %accumd.9.0, -44*/
	if ((lpm_mult_main_preheaderi_530_en == 1'd1)) begin
		main_preheaderi_530_stage0_reg <= (main_preheaderi_accumd90_reg * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_532_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %532 = mul nsw i32 %accumc.10.0, -44*/
	if ((lpm_mult_main_preheaderi_532_en == 1'd1)) begin
		main_preheaderi_532_stage0_reg <= (main_preheaderi_accumc100_reg * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_534_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %534 = mul nsw i32 %accumd.10.0, 12*/
	if ((lpm_mult_main_preheaderi_534_en == 1'd1)) begin
		main_preheaderi_534_stage0_reg <= (main_preheaderi_accumd100_reg * 32'd12);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_301_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %301 = mul nsw i32 %300, %299*/
	if ((lpm_mult_main_preheaderi_301_en == 1'd1)) begin
		main_preheaderi_301_stage0_reg <= (main_preheaderi_300 * main_preheaderi_299);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_304_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %304 = mul nsw i32 %303, %302*/
	if ((lpm_mult_main_preheaderi_304_en == 1'd1)) begin
		main_preheaderi_304_stage0_reg <= (main_preheaderi_303 * main_preheaderi_302);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_308_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %308 = mul nsw i32 %307, %306*/
	if ((lpm_mult_main_preheaderi_308_en == 1'd1)) begin
		main_preheaderi_308_stage0_reg <= (main_preheaderi_307 * main_preheaderi_306);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_312_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %312 = mul nsw i32 %311, %310*/
	if ((lpm_mult_main_preheaderi_312_en == 1'd1)) begin
		main_preheaderi_312_stage0_reg <= (main_preheaderi_311 * main_preheaderi_310);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_316_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %316 = mul nsw i32 %315, %314*/
	if ((lpm_mult_main_preheaderi_316_en == 1'd1)) begin
		main_preheaderi_316_stage0_reg <= (main_preheaderi_315 * main_preheaderi_314);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_320_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %320 = mul nsw i32 %319, %318*/
	if ((lpm_mult_main_preheaderi_320_en == 1'd1)) begin
		main_preheaderi_320_stage0_reg <= (main_preheaderi_319 * main_preheaderi_318);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_351_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %351 = mul nsw i32 %350, %dec_detl.0*/
	if ((lpm_mult_main_preheaderi_351_en == 1'd1)) begin
		main_preheaderi_351_stage0_reg <= (main_preheaderi_350 * main_preheaderi_dec_detl0_reg);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_373_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %373 = mul nsw i32 %dec_plt1.0, %371*/
	if ((lpm_mult_main_preheaderi_373_en == 1'd1)) begin
		main_preheaderi_373_stage0_reg <= (main_preheaderi_dec_plt10_reg * main_preheaderi_371);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_377_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %377 = mul nsw i32 %dec_plt2.0, %371*/
	if ((lpm_mult_main_preheaderi_377_en == 1'd1)) begin
		main_preheaderi_377_stage0_reg <= (main_preheaderi_dec_plt20_reg * main_preheaderi_371);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_446_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %446 = mul nsw i32 %445, %dec_deth.0*/
	if ((lpm_mult_main_preheaderi_446_en == 1'd1)) begin
		main_preheaderi_446_stage0_reg <= (main_preheaderi_445 * main_preheaderi_dec_deth0_reg);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_398_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %398 = mul nsw i32 %397, %396*/
	if ((lpm_mult_main_preheaderi_398_en == 1'd1)) begin
		main_preheaderi_398_stage0_reg <= (main_preheaderi_397 * main_preheaderi_396);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_401_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %401 = mul nsw i32 %400, %399*/
	if ((lpm_mult_main_preheaderi_401_en == 1'd1)) begin
		main_preheaderi_401_stage0_reg <= (main_preheaderi_400 * main_preheaderi_399);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_405_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %405 = mul nsw i32 %404, %403*/
	if ((lpm_mult_main_preheaderi_405_en == 1'd1)) begin
		main_preheaderi_405_stage0_reg <= (main_preheaderi_404 * main_preheaderi_403);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_409_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %409 = mul nsw i32 %408, %407*/
	if ((lpm_mult_main_preheaderi_409_en == 1'd1)) begin
		main_preheaderi_409_stage0_reg <= (main_preheaderi_408 * main_preheaderi_407);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_413_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %413 = mul nsw i32 %412, %411*/
	if ((lpm_mult_main_preheaderi_413_en == 1'd1)) begin
		main_preheaderi_413_stage0_reg <= (main_preheaderi_412 * main_preheaderi_411);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_417_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %417 = mul nsw i32 %416, %415*/
	if ((lpm_mult_main_preheaderi_417_en == 1'd1)) begin
		main_preheaderi_417_stage0_reg <= (main_preheaderi_416 * main_preheaderi_415);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_465_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %465 = mul nsw i32 %dec_ph1.0, %463*/
	if ((lpm_mult_main_preheaderi_465_en == 1'd1)) begin
		main_preheaderi_465_stage0_reg <= (main_preheaderi_dec_ph10_reg * main_preheaderi_463);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_469_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %469 = mul nsw i32 %dec_ph2.0, %463*/
	if ((lpm_mult_main_preheaderi_469_en == 1'd1)) begin
		main_preheaderi_469_stage0_reg <= (main_preheaderi_dec_ph20_reg * main_preheaderi_463);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_490_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %490 = mul nsw i32 %488, 12*/
	if ((lpm_mult_main_preheaderi_490_en == 1'd1)) begin
		main_preheaderi_490_stage0_reg <= (main_preheaderi_488 * 32'd12);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_491_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %491 = mul nsw i32 %489, -44*/
	if ((lpm_mult_main_preheaderi_491_en == 1'd1)) begin
		main_preheaderi_491_stage0_reg <= (main_preheaderi_489 * -32'd44);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %555*/
	/*   ret i32 %.main_result.2*/
	if ((cur_state == LEGUP_F_main_BB__555_163)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %82 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %85 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %89 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %93 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %97 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %101 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %105 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %109 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %113 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %117 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %121 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %183 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %187 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_57)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %191 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_58)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %195 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_59)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %199 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %203 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %207 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %211 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %215 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %219 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %299 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %302 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %306 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %310 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %314 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %318 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %322 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %326 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %330 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %334 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %338 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %396 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %399 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %403 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %407 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %411 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %415 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %419 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %423 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %427 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %431 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %435 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_delay_dltx_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_a = `TAG_g_dec_del_dltx_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_address_a = `TAG_g_delay_bpl_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_address_a = `TAG_g_dec_del_bpl_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd5));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %82 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_address_a = `TAG_g_delay_bpl_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %85 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd1));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %89 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd2));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %93 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd3));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %97 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd4));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %101 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd5));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %105 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (24 * 32'd1));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %109 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %113 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | ((24 * 32'd1) + (4 * 32'd2)));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %117 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | ((24 * 32'd1) + (4 * 32'd3)));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %121 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | ((24 * 32'd1) + (4 * 32'd4)));
	end
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		memory_controller_address_a = main_quantlexiti_ril0inii;
	end
	/* main: %quantl.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		memory_controller_address_a = `TAG_g_delay_bph_a;
	end
	/* main: %quantl.exit.i*/
	/*   %183 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | (4 * 32'd1));
	end
	/* main: %quantl.exit.i*/
	/*   %187 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_57)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | (4 * 32'd2));
	end
	/* main: %quantl.exit.i*/
	/*   %191 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_58)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | (4 * 32'd3));
	end
	/* main: %quantl.exit.i*/
	/*   %195 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_59)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | (4 * 32'd4));
	end
	/* main: %quantl.exit.i*/
	/*   %199 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | (4 * 32'd5));
	end
	/* main: %quantl.exit.i*/
	/*   %203 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | (24 * 32'd1));
	end
	/* main: %quantl.exit.i*/
	/*   %207 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* main: %quantl.exit.i*/
	/*   %211 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | ((24 * 32'd1) + (4 * 32'd2)));
	end
	/* main: %quantl.exit.i*/
	/*   %215 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | ((24 * 32'd1) + (4 * 32'd3)));
	end
	/* main: %quantl.exit.i*/
	/*   %219 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | ((24 * 32'd1) + (4 * 32'd4)));
	end
	/* main: %.preheader.i*/
	/*   %299 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) begin
		memory_controller_address_a = `TAG_g_dec_del_bpl_a;
	end
	/* main: %.preheader.i*/
	/*   %302 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %306 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd2));
	end
	/* main: %.preheader.i*/
	/*   %310 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd3));
	end
	/* main: %.preheader.i*/
	/*   %314 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd4));
	end
	/* main: %.preheader.i*/
	/*   %318 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd5));
	end
	/* main: %.preheader.i*/
	/*   %322 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (24 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %326 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* main: %.preheader.i*/
	/*   %330 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | ((24 * 32'd1) + (4 * 32'd2)));
	end
	/* main: %.preheader.i*/
	/*   %334 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | ((24 * 32'd1) + (4 * 32'd3)));
	end
	/* main: %.preheader.i*/
	/*   %338 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | ((24 * 32'd1) + (4 * 32'd4)));
	end
	/* main: %.preheader.i*/
	/*   %396 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		memory_controller_address_a = `TAG_g_dec_del_bph_a;
	end
	/* main: %.preheader.i*/
	/*   %399 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | (4 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %403 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | (4 * 32'd2));
	end
	/* main: %.preheader.i*/
	/*   %407 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | (4 * 32'd3));
	end
	/* main: %.preheader.i*/
	/*   %411 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | (4 * 32'd4));
	end
	/* main: %.preheader.i*/
	/*   %415 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | (4 * 32'd5));
	end
	/* main: %.preheader.i*/
	/*   %419 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | (24 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %423 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* main: %.preheader.i*/
	/*   %427 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | ((24 * 32'd1) + (4 * 32'd2)));
	end
	/* main: %.preheader.i*/
	/*   %431 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | ((24 * 32'd1) + (4 * 32'd3)));
	end
	/* main: %.preheader.i*/
	/*   %435 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | ((24 * 32'd1) + (4 * 32'd4)));
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %82 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %85 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %89 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %93 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %97 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %101 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %105 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %109 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %113 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %117 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %121 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %183 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %187 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_57)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %191 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_58)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %195 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_59)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %199 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %203 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %207 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %211 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %215 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %219 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %299 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %302 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %306 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %310 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %314 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %318 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %322 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %326 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %330 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %334 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %338 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %396 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %399 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %403 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %407 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %411 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %415 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %419 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %423 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %427 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %431 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %435 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_in_a = 32'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %82 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %85 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %89 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %93 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %97 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %101 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %105 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %109 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %113 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %117 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %121 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %183 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %187 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_57)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %191 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_58)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %195 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_59)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %199 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %203 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %207 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %211 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %215 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %219 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %299 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %302 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %306 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %310 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %314 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %318 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %322 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %326 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %330 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %334 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %338 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %396 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %399 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %403 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %407 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %411 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %415 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %419 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %423 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %427 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %431 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %435 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %98 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %102 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %106 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %110 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %114 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %118 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %122 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %181 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %184 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %188 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_57)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %192 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_58)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %196 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_59)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %200 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %204 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %208 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %212 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %216 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %220 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %300 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %303 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %307 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %311 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %315 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %319 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %323 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %327 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %331 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %335 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %339 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %397 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %400 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %404 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %408 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %412 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %416 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %420 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %424 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %428 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %432 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %436 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_b = `TAG_g_delay_dhx_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_b = `TAG_g_dec_del_dhx_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_address_b = `TAG_g_delay_bph_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_address_b = `TAG_g_dec_del_bph_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd5));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_address_b = `TAG_g_delay_dltx_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd1));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd2));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd3));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %98 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd4));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %102 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd5));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %106 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (24 * 32'd1));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %110 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %114 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | ((24 * 32'd1) + (4 * 32'd2)));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %118 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | ((24 * 32'd1) + (4 * 32'd3)));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %122 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | ((24 * 32'd1) + (4 * 32'd4)));
	end
	/* main: %quantl.exit.i*/
	/*   %181 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		memory_controller_address_b = `TAG_g_delay_dhx_a;
	end
	/* main: %quantl.exit.i*/
	/*   %184 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd1));
	end
	/* main: %quantl.exit.i*/
	/*   %188 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_57)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd2));
	end
	/* main: %quantl.exit.i*/
	/*   %192 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_58)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd3));
	end
	/* main: %quantl.exit.i*/
	/*   %196 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_59)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd4));
	end
	/* main: %quantl.exit.i*/
	/*   %200 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd5));
	end
	/* main: %quantl.exit.i*/
	/*   %204 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (24 * 32'd1));
	end
	/* main: %quantl.exit.i*/
	/*   %208 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* main: %quantl.exit.i*/
	/*   %212 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | ((24 * 32'd1) + (4 * 32'd2)));
	end
	/* main: %quantl.exit.i*/
	/*   %216 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | ((24 * 32'd1) + (4 * 32'd3)));
	end
	/* main: %quantl.exit.i*/
	/*   %220 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | ((24 * 32'd1) + (4 * 32'd4)));
	end
	/* main: %.preheader.i*/
	/*   %300 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) begin
		memory_controller_address_b = `TAG_g_dec_del_dltx_a;
	end
	/* main: %.preheader.i*/
	/*   %303 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | (4 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %307 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | (4 * 32'd2));
	end
	/* main: %.preheader.i*/
	/*   %311 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | (4 * 32'd3));
	end
	/* main: %.preheader.i*/
	/*   %315 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | (4 * 32'd4));
	end
	/* main: %.preheader.i*/
	/*   %319 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | (4 * 32'd5));
	end
	/* main: %.preheader.i*/
	/*   %323 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | (24 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %327 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* main: %.preheader.i*/
	/*   %331 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | ((24 * 32'd1) + (4 * 32'd2)));
	end
	/* main: %.preheader.i*/
	/*   %335 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | ((24 * 32'd1) + (4 * 32'd3)));
	end
	/* main: %.preheader.i*/
	/*   %339 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | ((24 * 32'd1) + (4 * 32'd4)));
	end
	/* main: %.preheader.i*/
	/*   %397 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		memory_controller_address_b = `TAG_g_dec_del_dhx_a;
	end
	/* main: %.preheader.i*/
	/*   %400 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %404 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd2));
	end
	/* main: %.preheader.i*/
	/*   %408 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd3));
	end
	/* main: %.preheader.i*/
	/*   %412 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd4));
	end
	/* main: %.preheader.i*/
	/*   %416 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd5));
	end
	/* main: %.preheader.i*/
	/*   %420 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (24 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %424 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* main: %.preheader.i*/
	/*   %428 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | ((24 * 32'd1) + (4 * 32'd2)));
	end
	/* main: %.preheader.i*/
	/*   %432 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | ((24 * 32'd1) + (4 * 32'd3)));
	end
	/* main: %.preheader.i*/
	/*   %436 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | ((24 * 32'd1) + (4 * 32'd4)));
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %98 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %102 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %106 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %110 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %114 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %118 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %122 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %181 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %184 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %188 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_57)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %192 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_58)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %196 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_59)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %200 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %204 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %208 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %212 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %216 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %220 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %300 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %303 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %307 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %311 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %315 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %319 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %323 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %327 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %331 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %335 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %339 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %397 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %400 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %404 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %408 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %412 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %416 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %420 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %424 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %428 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %432 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %436 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_in_b = 32'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %98 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %102 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %106 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %110 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %114 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %118 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %122 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %181 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %184 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %188 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_57)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %192 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_58)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %196 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_59)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %200 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %204 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %208 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %212 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %216 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %220 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %300 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_99)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %303 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_100)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %307 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %311 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %315 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %319 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %323 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %327 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %331 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %335 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %339 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %397 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %400 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %404 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %408 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %412 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %416 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %420 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %424 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %428 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %432 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %436 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %555*/
	/*   ret i32 %.main_result.2*/
	if ((cur_state == LEGUP_F_main_BB__555_163)) begin
		return_val <= main_preheader_main_result2_reg;
		if (start == 1'b0 && ^(main_preheader_main_result2_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 

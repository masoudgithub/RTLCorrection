//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Tue Jun 18 03:11:52 2019
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sun Jun 23 10:18:41 2019
//----------------------------------------------------------------------------//

--------------------------------------------------------------------------------
Function: main
--------------------------------------------------------------------------------
Function unit type:           Number Required               
decis_levl_local_mem_dual_port1                             
ilb_table_local_mem_dual_port 1                             
mem_dual_port                 2                             
qq2_code2_table_local_mem_dual_port1                             
qq4_code4_table_local_mem_dual_port1                             
qq6_code6_table_local_mem_dual_port1                             
result_local_mem_dual_port    1                             
signed_add_32                 19                            
signed_divide_32              1                             
signed_multiply_32            31                            
signed_subtract_32            2                             
test_data_local_mem_dual_port 2                             
test_result_local_mem_dual_port1                             
tqmf_local_mem_dual_port      2                             
wh_code_table_local_mem_dual_port1                             
wl_code_table_local_mem_dual_port1                             
--------------------------------------------------------------------------------
Function: legup_memset_4_i64
--------------------------------------------------------------------------------
Function unit type:           Number Required               
legup_memset_4_i64_0_1_local_mem_dual_port1                             
legup_memset_4_i64_0_2_local_mem_dual_port1                             
legup_memset_4_i64_0_3_local_mem_dual_port1                             
legup_memset_4_i64_0_c_local_mem_dual_port2                             
legup_memset_4_i64_0_s_local_mem_dual_port2                             
signed_add_32                 1                             
signed_add_64                 1                             

Running Bipartite Weighted Matching on function: legup_memset_4_i64
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_1_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0
  store i8* %m, i8** %1, align... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0
  store i8* %m, i8** %1, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8* %m, i8** %1, align... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_2_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0
  store i8 %c1, i8* %2, align ... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0
  store i8 %c1, i8* %2, align ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8 %c1, i8* %2, align ... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %n, i64* %3, align... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %n, i64* %3, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i64 %n, i64* %3, align... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_1_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %14 = load i8** %1, align 4 can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0
  %14 = load i8** %1, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0
  %14 = load i8** %1, align 4 (idx: 0)            0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0
  %14 = load i8** %1, align 4 (idx: 0)            1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %14 = load i8** %1, align 4 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_2_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %4 = load i8* %2, align 1 can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0
  %4 = load i8* %2, align 1 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0
  %4 = load i8* %2, align 1 (idx: 0)              0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0
  %4 = load i8* %2, align 1 (idx: 0)              1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %4 = load i8* %2, align 1 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %16 = load i64* %3, align 8 can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  %16 = load i64* %3, align 8 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  %16 = load i64* %3, align 8 (idx: 0)            0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  %16 = load i64* %3, align 8 (idx: 0)            1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %16 = load i64* %3, align 8 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i64 %17, i64* %3, alig... can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %17, i64* %3, alig... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %17, i64* %3, alig... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %17, i64* %3, alig... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i64 %17, i64* %3, alig... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %5, i32* %c, align... (idx: 0)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %5, i32* %c, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %5, i32* %c, align... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_s_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_1
  store i32* %15, i32** %s, al... (idx: 0)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_1
  store i32* %15, i32** %s, al... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32* %15, i32** %s, al... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %6 = load i32* %c, align 4 can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %6 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %8 = load i32* %c, align 4 can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %8 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %6 = load i32* %c, align 4 (idx: 0)             -10                           -5                            
  %8 = load i32* %c, align 4 (idx: 1)             -10                           -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %6 = load i32* %c, align 4 (idx: 0)             1                             0                             
  %8 = load i32* %c, align 4 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %6 = load i32* %c, align 4 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0 (mux inputs: 2)
  %8 = load i32* %c, align 4 (idx: 1) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %9, i32* %c, align... can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  store i32 %9, i32* %c, align... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  store i32 %9, i32* %c, align... can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %9, i32* %c, align... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %9, i32* %c, align... (idx: 0)        -15                           -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %9, i32* %c, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %9, i32* %c, align... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %10 = load i32* %c, align 4 can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %10 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %10 = load i32* %c, align 4 can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %10 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %12 = load i32* %c, align 4 can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %12 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %12 = load i32* %c, align 4 can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %12 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %10 = load i32* %c, align 4 (idx: 0)            -20                           0                             
  %12 = load i32* %c, align 4 (idx: 1)            -20                           0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %10 = load i32* %c, align 4 (idx: 0)            1                             0                             
  %12 = load i32* %c, align 4 (idx: 1)            0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %10 = load i32* %c, align 4 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0 (mux inputs: 3)
  %12 = load i32* %c, align 4 (idx: 1) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %13, i32* %c, alig... can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  store i32 %13, i32* %c, alig... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  store i32 %13, i32* %c, alig... can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %13, i32* %c, alig... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %13, i32* %c, alig... (idx: 0)        -25                           -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %13, i32* %c, alig... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %13, i32* %c, alig... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_legup_memset_4_i64_BB__18
Binding functional unit type: legup_memset_4_i64_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %19 = load i64* %3, align 8 can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  %19 = load i64* %3, align 8 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  %19 = load i64* %3, align 8 (idx: 0)            -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  %19 = load i64* %3, align 8 (idx: 0)            1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %19 = load i64* %3, align 8 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_i64_BB__18
Binding functional unit type: legup_memset_4_i64_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i64 %20, i64* %3, alig... can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %20, i64* %3, alig... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %20, i64* %3, alig... (idx: 0)        -15                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %20, i64* %3, alig... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i64 %20, i64* %3, alig... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_legup_memset_4_i64_BB__18
Binding functional unit type: signed_add_64
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_i64_signed_add_64_0
  %20 = add i64 %19, -1 (idx: 0)                  -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_signed_add_64_0
  %20 = add i64 %19, -1 (idx: 0)                  1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %20 = add i64 %19, -1 (idx: 0) -> legup_memset_4_i64_signed_add_64_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__22
Binding functional unit type: legup_memset_4_i64_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %23 = load i32* %c, align 4 can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %23 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %23 = load i32* %c, align 4 can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %23 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %23 = load i32* %c, align 4 (idx: 0)            -30                           0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %23 = load i32* %c, align 4 (idx: 0)            1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %23 = load i32* %c, align 4 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_legup_memset_4_i64_BB__22
Binding functional unit type: legup_memset_4_i64_0_s_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %24 = load i32** %s, align 4 can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0
  %24 = load i32** %s, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_1
  %24 = load i32** %s, align 4 (idx: 0)           -10                           -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_1
  %24 = load i32** %s, align 4 (idx: 0)           1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %24 = load i32** %s, align 4 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_i64_BB__22
Binding functional unit type: legup_memset_4_i64_0_s_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32* %25, i32** %s, al... can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0
  store i32* %25, i32** %s, al... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0
  store i32 %23, i32* %24, ali... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_1
  store i32* %25, i32** %s, al... (idx: 0)        -15                           -10                           
  store i32 %23, i32* %24, ali... (idx: 1)        -20                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_1
  store i32* %25, i32** %s, al... (idx: 0)        0                             1                             
  store i32 %23, i32* %24, ali... (idx: 1)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %23, i32* %24, ali... (idx: 1) -> legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0 (mux inputs: 4)
  store i32* %25, i32** %s, al... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_i64_BB__22
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_i64_signed_add_32_0
  %gep = add i32 %gep_int, 4 (idx: 0)             -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_signed_add_32_0
  %gep = add i32 %gep_int, 4 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep = add i32 %gep_int, 4 (idx: 0) -> legup_memset_4_i64_signed_add_32_0 (mux inputs: 1)

Running Bipartite Weighted Matching on function: main
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        0                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        10                            10                            
  store i32 0, i32* getelement... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        10                            10                            
  store i32 0, i32* getelement... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        10                            10                            
  store i32 0, i32* getelement... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        10                            10                            
  store i32 0, i32* getelement... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        10                            10                            
  store i32 0, i32* getelement... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        10                            10                            
  store i32 0, i32* getelement... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        10                            10                            
  store i32 0, i32* getelement... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        10                            10                            
  store i32 0, i32* getelement... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        10                            10                            
  store i32 0, i32* getelement... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        10                            10                            
  store i32 0, i32* getelement... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        10                            10                            
  store i32 0, i32* getelement... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        10                            10                            
  store i32 0, i32* getelement... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        10                            10                            
  store i32 0, i32* getelement... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        10                            10                            
  store i32 0, i32* getelement... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        10                            10                            
  store i32 0, i32* getelement... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        10                            10                            
  store i32 0, i32* getelement... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        10                            10                            
  store i32 0, i32* getelement... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        10                            10                            
  store i32 0, i32* getelement... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        10                            10                            
  store i32 0, i32* getelement... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        10                            10                            
  store i32 0, i32* getelement... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        10                            10                            
  store i32 0, i32* getelement... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        10                            10                            
  store i32 0, i32* getelement... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        10                            10                            
  store i32 0, i32* getelement... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %81 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %81 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
  %82 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %82 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %81 = load i32* getelementpt... (idx: 0)        10                            10                            
  %82 = load i32* getelementpt... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %81 = load i32* getelementpt... (idx: 0)        1                             0                             
  %82 = load i32* getelementpt... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %81 = load i32* getelementpt... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  %82 = load i32* getelementpt... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %31 = mul nsw i32 %25, 12 (idx
  %32 = mul nsw i32 %24, -44 (idx
  %33 = mul nsw i32 %23, -44 (idx: 2)             -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            
  %35 = mul nsw i32 %22, 212 (idx
  %37 = mul nsw i32 %21, 48 (idx
  %39 = mul nsw i32 %20, -624 (idx
  %43 = mul nsw i32 %18, 1448 (idx
  %45 = mul nsw i32 %17, -840 (idx
  %47 = mul nsw i32 %16, -3220 (idx
  %49 = mul nsw i32 %15, 3804 (idx: 9)            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            
  %51 = mul nsw i32 %14, 15504 (idx
  %53 = mul nsw i32 %13, 15504 (idx: 11)          -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            
  %55 = mul nsw i32 %12, 3804 (idx
  %57 = mul nsw i32 %11, -3220 (idx
  %59 = mul nsw i32 %10, -840 (idx
  %61 = mul nsw i32 %9, 1448 (idx
  %65 = mul nsw i32 %7, -624 (idx
  %67 = mul nsw i32 %6, 48 (idx: 17)              -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            
  %69 = mul nsw i32 %5, 212 (idx
  %71 = mul nsw i32 %4, -44 (idx
  %73 = mul nsw i32 %3, -44 (idx
  %75 = mul nsw i32 %2, 12 (idx
  %105 = mul i32 %al1.0, %rlt1... (idx: 22)       -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %106 = mul i32 %al2.0, %rlt2... (idx: 23)       -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %31 = mul nsw i32 %25, 12 (idx: 0)              1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %32 = mul nsw i32 %24, -44 (idx
  %33 = mul nsw i32 %23, -44 (idx
  %35 = mul nsw i32 %22, 212 (idx
  %37 = mul nsw i32 %21, 48 (idx
  %39 = mul nsw i32 %20, -624 (idx
  %43 = mul nsw i32 %18, 1448 (idx
  %45 = mul nsw i32 %17, -840 (idx
  %47 = mul nsw i32 %16, -3220 (idx
  %49 = mul nsw i32 %15, 3804 (idx
  %51 = mul nsw i32 %14, 15504 (idx
  %53 = mul nsw i32 %13, 15504 (idx
  %55 = mul nsw i32 %12, 3804 (idx
  %57 = mul nsw i32 %11, -3220 (idx: 13)          0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %59 = mul nsw i32 %10, -840 (idx
  %61 = mul nsw i32 %9, 1448 (idx
  %65 = mul nsw i32 %7, -624 (idx
  %67 = mul nsw i32 %6, 48 (idx
  %69 = mul nsw i32 %5, 212 (idx
  %71 = mul nsw i32 %4, -44 (idx
  %73 = mul nsw i32 %3, -44 (idx
  %75 = mul nsw i32 %2, 12 (idx: 21)              0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %105 = mul i32 %al1.0, %rlt1... (idx
  %106 = mul i32 %al2.0, %rlt2... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %31 = mul nsw i32 %25, 12 (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 1)
  %32 = mul nsw i32 %24, -44 (idx: 1) -> main_signed_multiply_32_1 (mux inputs: 1)
  %33 = mul nsw i32 %23, -44 (idx: 2) -> main_signed_multiply_32_2 (mux inputs: 1)
  %35 = mul nsw i32 %22, 212 (idx: 3) -> main_signed_multiply_32_3 (mux inputs: 1)
  %37 = mul nsw i32 %21, 48 (idx: 4) -> main_signed_multiply_32_4 (mux inputs: 1)
  %39 = mul nsw i32 %20, -624 (idx: 5) -> main_signed_multiply_32_5 (mux inputs: 1)
  %43 = mul nsw i32 %18, 1448 (idx: 6) -> main_signed_multiply_32_6 (mux inputs: 1)
  %45 = mul nsw i32 %17, -840 (idx: 7) -> main_signed_multiply_32_7 (mux inputs: 1)
  %47 = mul nsw i32 %16, -3220 (idx: 8) -> main_signed_multiply_32_8 (mux inputs: 1)
  %49 = mul nsw i32 %15, 3804 (idx: 9) -> main_signed_multiply_32_9 (mux inputs: 1)
  %51 = mul nsw i32 %14, 15504 (idx: 10) -> main_signed_multiply_32_10 (mux inputs: 1)
  %53 = mul nsw i32 %13, 15504 (idx: 11) -> main_signed_multiply_32_11 (mux inputs: 1)
  %55 = mul nsw i32 %12, 3804 (idx: 12) -> main_signed_multiply_32_12 (mux inputs: 1)
  %57 = mul nsw i32 %11, -3220 (idx: 13) -> main_signed_multiply_32_13 (mux inputs: 1)
  %59 = mul nsw i32 %10, -840 (idx: 14) -> main_signed_multiply_32_14 (mux inputs: 1)
  %61 = mul nsw i32 %9, 1448 (idx: 15) -> main_signed_multiply_32_15 (mux inputs: 1)
  %65 = mul nsw i32 %7, -624 (idx: 16) -> main_signed_multiply_32_16 (mux inputs: 1)
  %67 = mul nsw i32 %6, 48 (idx: 17) -> main_signed_multiply_32_17 (mux inputs: 1)
  %69 = mul nsw i32 %5, 212 (idx: 18) -> main_signed_multiply_32_18 (mux inputs: 1)
  %71 = mul nsw i32 %4, -44 (idx: 19) -> main_signed_multiply_32_19 (mux inputs: 1)
  %73 = mul nsw i32 %3, -44 (idx: 20) -> main_signed_multiply_32_20 (mux inputs: 1)
  %75 = mul nsw i32 %2, 12 (idx: 21) -> main_signed_multiply_32_21 (mux inputs: 1)
  %105 = mul i32 %al1.0, %rlt1... (idx: 22) -> main_signed_multiply_32_22 (mux inputs: 2)
  %106 = mul i32 %al2.0, %rlt2... (idx: 23) -> main_signed_multiply_32_23 (mux inputs: 2)
State: LEGUP_F_main_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %84 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %84 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
  %85 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %85 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %84 = load i32* getelementpt... (idx: 0)        10                            10                            
  %85 = load i32* getelementpt... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %84 = load i32* getelementpt... (idx: 0)        1                             0                             
  %85 = load i32* getelementpt... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %84 = load i32* getelementpt... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  %85 = load i32* getelementpt... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep = add i32 %gep_int, %ge... (idx: 0)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %gep3 = add i32 %gep_int1, %... (idx: 1)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %34 = add nsw i32 %33, %31 (idx: 2)             -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %36 = add nsw i32 %35, %32 (idx: 3)             -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %38 = add nsw i32 %37, %34 (idx: 4)             -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %40 = add nsw i32 %39, %36 (idx: 5)             -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %42 = add nsw i32 %41, %38 (idx: 6)             -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %44 = add nsw i32 %43, %40 (idx: 7)             -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %46 = add nsw i32 %45, %42 (idx: 8)             -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %48 = add nsw i32 %47, %44 (idx: 9)             -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %50 = add nsw i32 %49, %46 (idx: 10)            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %52 = add nsw i32 %51, %48 (idx: 11)            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %54 = add nsw i32 %53, %50 (idx: 12)            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %56 = add nsw i32 %55, %52 (idx: 13)            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %58 = add nsw i32 %57, %54 (idx: 14)            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %60 = add nsw i32 %59, %56 (idx: 15)            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %62 = add nsw i32 %61, %58 (idx: 16)            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %64 = add nsw i32 %63, %60 (idx: 17)            -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %tmp.i.i1 = add i32 %106, %1... (idx: 18)       -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep = add i32 %gep_int, %ge... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep3 = add i32 %gep_int1, %... (idx
  %34 = add nsw i32 %33, %31 (idx
  %36 = add nsw i32 %35, %32 (idx
  %38 = add nsw i32 %37, %34 (idx
  %40 = add nsw i32 %39, %36 (idx
  %42 = add nsw i32 %41, %38 (idx
  %44 = add nsw i32 %43, %40 (idx
  %46 = add nsw i32 %45, %42 (idx
  %48 = add nsw i32 %47, %44 (idx
  %50 = add nsw i32 %49, %46 (idx
  %52 = add nsw i32 %51, %48 (idx
  %54 = add nsw i32 %53, %50 (idx
  %56 = add nsw i32 %55, %52 (idx
  %58 = add nsw i32 %57, %54 (idx
  %60 = add nsw i32 %59, %56 (idx
  %62 = add nsw i32 %61, %58 (idx
  %64 = add nsw i32 %63, %60 (idx: 17)            0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             
  %tmp.i.i1 = add i32 %106, %1... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep = add i32 %gep_int, %ge... (idx: 0) -> main_signed_add_32_0 (mux inputs: 2)
  %gep3 = add i32 %gep_int1, %... (idx: 1) -> main_signed_add_32_1 (mux inputs: 2)
  %34 = add nsw i32 %33, %31 (idx: 2) -> main_signed_add_32_2 (mux inputs: 2)
  %36 = add nsw i32 %35, %32 (idx: 3) -> main_signed_add_32_3 (mux inputs: 2)
  %38 = add nsw i32 %37, %34 (idx: 4) -> main_signed_add_32_4 (mux inputs: 2)
  %40 = add nsw i32 %39, %36 (idx: 5) -> main_signed_add_32_5 (mux inputs: 2)
  %42 = add nsw i32 %41, %38 (idx: 6) -> main_signed_add_32_6 (mux inputs: 2)
  %44 = add nsw i32 %43, %40 (idx: 7) -> main_signed_add_32_7 (mux inputs: 2)
  %46 = add nsw i32 %45, %42 (idx: 8) -> main_signed_add_32_8 (mux inputs: 2)
  %48 = add nsw i32 %47, %44 (idx: 9) -> main_signed_add_32_9 (mux inputs: 2)
  %50 = add nsw i32 %49, %46 (idx: 10) -> main_signed_add_32_10 (mux inputs: 2)
  %52 = add nsw i32 %51, %48 (idx: 11) -> main_signed_add_32_11 (mux inputs: 2)
  %54 = add nsw i32 %53, %50 (idx: 12) -> main_signed_add_32_12 (mux inputs: 2)
  %56 = add nsw i32 %55, %52 (idx: 13) -> main_signed_add_32_13 (mux inputs: 2)
  %58 = add nsw i32 %57, %54 (idx: 14) -> main_signed_add_32_14 (mux inputs: 2)
  %60 = add nsw i32 %59, %56 (idx: 15) -> main_signed_add_32_15 (mux inputs: 2)
  %62 = add nsw i32 %61, %58 (idx: 16) -> main_signed_add_32_16 (mux inputs: 2)
  %64 = add nsw i32 %63, %60 (idx: 17) -> main_signed_add_32_17 (mux inputs: 2)
  %tmp.i.i1 = add i32 %106, %1... (idx: 18) -> main_signed_add_32_18 (mux inputs: 2)
State: LEGUP_F_main_BB__1
Binding functional unit type: test_data_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_test_data_local_mem_dual_port_0main_test_data_local_mem_dual_port_1
  %27 = load i32* %26, align 4... (idx: 0)        -5                            -5                            
  %30 = load i32* %29, align 4... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_test_data_local_mem_dual_port_0main_test_data_local_mem_dual_port_1
  %27 = load i32* %26, align 4... (idx: 0)        1                             0                             
  %30 = load i32* %29, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %27 = load i32* %26, align 4... (idx: 0) -> main_test_data_local_mem_dual_port_0 (mux inputs: 1)
  %30 = load i32* %29, align 4... (idx: 1) -> main_test_data_local_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_main_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %88 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %88 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
  %89 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %89 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %88 = load i32* getelementpt... (idx: 0)        10                            10                            
  %89 = load i32* getelementpt... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %88 = load i32* getelementpt... (idx: 0)        1                             0                             
  %89 = load i32* getelementpt... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %88 = load i32* getelementpt... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  %89 = load i32* getelementpt... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_0
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_1
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_2
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_3
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_4
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_5
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_6
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_7
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_8
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_9
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_10
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_11
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_12
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_13
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_14
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_15
  %66 = add nsw i32 %65, %62 can share an output register with another operation already assigned to main_signed_add_32_18
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_0
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_1
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_2
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_3
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_4
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_5
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_6
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_7
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_8
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_9
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_10
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_11
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_12
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_13
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_14
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_15
  %68 = add nsw i32 %67, %64 can share an output register with another operation already assigned to main_signed_add_32_18
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_0
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_1
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_2
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_3
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_4
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_5
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_6
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_7
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_8
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_9
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_10
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_11
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_12
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_13
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_14
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_15
  %70 = add nsw i32 %69, %66 can share an output register with another operation already assigned to main_signed_add_32_18
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_0
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_1
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_2
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_3
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_4
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_5
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_6
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_7
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_8
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_9
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_10
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_11
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_12
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_13
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_14
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_15
  %72 = add nsw i32 %71, %68 can share an output register with another operation already assigned to main_signed_add_32_18
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_0
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_1
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_2
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_3
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_4
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_5
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_6
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_7
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_8
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_9
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_10
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_11
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_12
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_13
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_14
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_15
  %74 = add nsw i32 %73, %70 can share an output register with another operation already assigned to main_signed_add_32_18
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_0
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_1
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_2
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_3
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_4
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_5
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_6
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_7
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_8
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_9
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_10
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_11
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_12
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_13
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_14
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_15
  %76 = add nsw i32 %75, %72 can share an output register with another operation already assigned to main_signed_add_32_18
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_0
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_1
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_2
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_3
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_4
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_5
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_6
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_7
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_8
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_9
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_10
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_11
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_12
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_13
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_14
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_15
  %77 = add nsw i32 %76, %74 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %66 = add nsw i32 %65, %62 (idx: 0)             -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -30                           -30                           -20                           
  %68 = add nsw i32 %67, %64 (idx: 1)             -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -30                           -30                           -20                           
  %70 = add nsw i32 %69, %66 (idx: 2)             -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -30                           -30                           -20                           
  %72 = add nsw i32 %71, %68 (idx: 3)             -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -30                           -30                           -20                           
  %74 = add nsw i32 %73, %70 (idx: 4)             -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -30                           -30                           -20                           
  %76 = add nsw i32 %75, %72 (idx: 5)             -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -30                           -30                           -20                           
  %77 = add nsw i32 %76, %74 (idx: 6)             -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -30                           -30                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %66 = add nsw i32 %65, %62 (idx
  %68 = add nsw i32 %67, %64 (idx: 1)             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             
  %70 = add nsw i32 %69, %66 (idx
  %72 = add nsw i32 %71, %68 (idx
  %74 = add nsw i32 %73, %70 (idx
  %76 = add nsw i32 %75, %72 (idx
  %77 = add nsw i32 %76, %74 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %70 = add nsw i32 %69, %66 (idx: 2) -> main_signed_add_32_12 (mux inputs: 4)
  %72 = add nsw i32 %71, %68 (idx: 3) -> main_signed_add_32_13 (mux inputs: 4)
  %74 = add nsw i32 %73, %70 (idx: 4) -> main_signed_add_32_14 (mux inputs: 4)
  %76 = add nsw i32 %75, %72 (idx: 5) -> main_signed_add_32_15 (mux inputs: 4)
  %66 = add nsw i32 %65, %62 (idx: 0) -> main_signed_add_32_16 (mux inputs: 4)
  %68 = add nsw i32 %67, %64 (idx: 1) -> main_signed_add_32_17 (mux inputs: 4)
  %77 = add nsw i32 %76, %74 (idx: 6) -> main_signed_add_32_18 (mux inputs: 4)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_14
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_15
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_16
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_17
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_18
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_19
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_20
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_21
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_22
  %83 = mul nsw i32 %82, %81 can share an output register with another operation already assigned to main_signed_multiply_32_23
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %83 = mul nsw i32 %82, %81 (idx: 0)             -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -20                           -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %83 = mul nsw i32 %82, %81 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %83 = mul nsw i32 %82, %81 (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 4)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %79 = sub nsw i32 %74, %76 (idx: 0)             -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %79 = sub nsw i32 %74, %76 (idx: 0)             1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %79 = sub nsw i32 %74, %76 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 2)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %4, i32* getelemen... (idx: 0)        -5                            -5                            
  store i32 %5, i32* getelemen... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %4, i32* getelemen... (idx: 0)        1                             0                             
  store i32 %5, i32* getelemen... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %4, i32* getelemen... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 1)
  store i32 %5, i32* getelemen... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_main_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %92 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %92 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
  %93 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %93 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %92 = load i32* getelementpt... (idx: 0)        10                            10                            
  %93 = load i32* getelementpt... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %92 = load i32* getelementpt... (idx: 0)        1                             0                             
  %93 = load i32* getelementpt... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %92 = load i32* getelementpt... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  %93 = load i32* getelementpt... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_14
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_15
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_16
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_17
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_18
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_19
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_20
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_21
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_22
  %86 = mul nsw i32 %85, %84 can share an output register with another operation already assigned to main_signed_multiply_32_23
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %86 = mul nsw i32 %85, %84 (idx: 0)             -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -40                           -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %86 = mul nsw i32 %85, %84 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %86 = mul nsw i32 %85, %84 (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 6)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %6, i32* getelemen... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %6, i32* getelemen... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %7, i32* getelemen... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %7, i32* getelemen... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %6, i32* getelemen... (idx: 0)        -5                            -5                            
  store i32 %7, i32* getelemen... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %6, i32* getelemen... (idx: 0)        1                             0                             
  store i32 %7, i32* getelemen... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %6, i32* getelemen... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 2)
  store i32 %7, i32* getelemen... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_main_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %96 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %96 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
  %97 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %97 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %96 = load i32* getelementpt... (idx: 0)        10                            10                            
  %97 = load i32* getelementpt... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %96 = load i32* getelementpt... (idx: 0)        1                             0                             
  %97 = load i32* getelementpt... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %96 = load i32* getelementpt... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  %97 = load i32* getelementpt... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_0
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_1
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_2
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_3
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_4
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_5
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_6
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_7
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_8
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_9
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_10
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_11
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_12
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_13
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_14
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_15
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_16
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_17
  %87 = add nsw i32 %86, %83 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %87 = add nsw i32 %86, %83 (idx: 0)             -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %87 = add nsw i32 %86, %83 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %87 = add nsw i32 %86, %83 (idx: 0) -> main_signed_add_32_12 (mux inputs: 6)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_14
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_15
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_16
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_17
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_18
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_19
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_20
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_21
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_22
  %90 = mul nsw i32 %89, %88 can share an output register with another operation already assigned to main_signed_multiply_32_23
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %90 = mul nsw i32 %89, %88 (idx: 0)             -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -60                           -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %90 = mul nsw i32 %89, %88 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %90 = mul nsw i32 %89, %88 (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 8)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %8, i32* getelemen... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %8, i32* getelemen... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %9, i32* getelemen... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %9, i32* getelemen... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %8, i32* getelemen... (idx: 0)        -15                           -15                           
  store i32 %9, i32* getelemen... (idx: 1)        -15                           -15                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %8, i32* getelemen... (idx: 0)        1                             0                             
  store i32 %9, i32* getelemen... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %8, i32* getelemen... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 3)
  store i32 %9, i32* getelemen... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 3)
State: LEGUP_F_main_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %100 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %100 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %101 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %101 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %100 = load i32* getelementp... (idx: 0)        10                            10                            
  %101 = load i32* getelementp... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %100 = load i32* getelementp... (idx: 0)        1                             0                             
  %101 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %100 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  %101 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_0
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_1
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_2
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_3
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_4
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_5
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_6
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_7
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_8
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_9
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_10
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_11
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_12
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_13
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_14
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_15
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_16
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_17
  %91 = add nsw i32 %87, %90 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %91 = add nsw i32 %87, %90 (idx: 0)             -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -60                           -40                           -40                           -40                           -40                           -40                           -40                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %91 = add nsw i32 %87, %90 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %91 = add nsw i32 %87, %90 (idx: 0) -> main_signed_add_32_12 (mux inputs: 8)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_14
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_15
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_16
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_17
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_18
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_19
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_20
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_21
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_22
  %94 = mul nsw i32 %93, %92 can share an output register with another operation already assigned to main_signed_multiply_32_23
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %94 = mul nsw i32 %93, %92 (idx: 0)             -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -80                           -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %94 = mul nsw i32 %93, %92 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %94 = mul nsw i32 %93, %92 (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 10)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %10, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %10, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %11, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %11, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %10, i32* geteleme... (idx: 0)        -25                           -25                           
  store i32 %11, i32* geteleme... (idx: 1)        -25                           -25                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %10, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %11, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %10, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 4)
  store i32 %11, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 4)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_0
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_1
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_2
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_3
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_4
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_5
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_6
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_7
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_8
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_9
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_10
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_11
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_12
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_13
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_14
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_15
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_16
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_17
  %95 = add nsw i32 %91, %94 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %95 = add nsw i32 %91, %94 (idx: 0)             -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -80                           -40                           -40                           -40                           -40                           -40                           -40                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %95 = add nsw i32 %91, %94 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %95 = add nsw i32 %91, %94 (idx: 0) -> main_signed_add_32_12 (mux inputs: 10)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_14
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_15
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_16
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_17
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_18
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_19
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_20
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_21
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_22
  %98 = mul nsw i32 %97, %96 can share an output register with another operation already assigned to main_signed_multiply_32_23
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %98 = mul nsw i32 %97, %96 (idx: 0)             -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -100                          -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %98 = mul nsw i32 %97, %96 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %98 = mul nsw i32 %97, %96 (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 12)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %12, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %12, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %13, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %13, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %12, i32* geteleme... (idx: 0)        -35                           -35                           
  store i32 %13, i32* geteleme... (idx: 1)        -35                           -35                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %12, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %13, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %12, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 5)
  store i32 %13, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 5)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_0
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_1
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_2
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_3
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_4
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_5
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_6
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_7
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_8
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_9
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_10
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_11
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_12
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_13
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_14
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_15
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_16
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_17
  %99 = add nsw i32 %95, %98 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %99 = add nsw i32 %95, %98 (idx: 0)             -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -100                          -40                           -40                           -40                           -40                           -40                           -40                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %99 = add nsw i32 %95, %98 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %99 = add nsw i32 %95, %98 (idx: 0) -> main_signed_add_32_12 (mux inputs: 12)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %102 = mul nsw i32 %101, %10... can share an output register with another operation already assigned to main_signed_multiply_32_23
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %102 = mul nsw i32 %101, %10... (idx: 0)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -120                          -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %102 = mul nsw i32 %101, %10... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %102 = mul nsw i32 %101, %10... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 14)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %14, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %14, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %15, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %15, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %14, i32* geteleme... (idx: 0)        -45                           -45                           
  store i32 %15, i32* geteleme... (idx: 1)        -45                           -45                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %14, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %15, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %14, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 6)
  store i32 %15, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 6)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_0
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_1
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_2
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_3
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_4
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_5
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_6
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_7
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_8
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_9
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_10
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_11
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_12
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_13
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_14
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_15
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_16
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_17
  %103 = add nsw i32 %99, %102 can share an output register with another operation already assigned to main_signed_add_32_18
  %108 = add nsw i32 %107, %10... can share an output register with another operation already assigned to main_signed_add_32_0
  %108 = add nsw i32 %107, %10... can share an output register with another operation already assigned to main_signed_add_32_1
  %108 = add nsw i32 %107, %10... can share an output register with another operation already assigned to main_signed_add_32_2
  %108 = add nsw i32 %107, %10... can share an output register with another operation already assigned to main_signed_add_32_3
  %108 = add nsw i32 %107, %10... can share an output register with another operation already assigned to main_signed_add_32_4
  %108 = add nsw i32 %107, %10... can share an output register with another operation already assigned to main_signed_add_32_5
  %108 = add nsw i32 %107, %10... can share an output register with another operation already assigned to main_signed_add_32_6
  %108 = add nsw i32 %107, %10... can share an output register with another operation already assigned to main_signed_add_32_7
  %108 = add nsw i32 %107, %10... can share an output register with another operation already assigned to main_signed_add_32_8
  %108 = add nsw i32 %107, %10... can share an output register with another operation already assigned to main_signed_add_32_9
  %108 = add nsw i32 %107, %10... can share an output register with another operation already assigned to main_signed_add_32_10
  %108 = add nsw i32 %107, %10... can share an output register with another operation already assigned to main_signed_add_32_11
  %108 = add nsw i32 %107, %10... can share an output register with another operation already assigned to main_signed_add_32_12
  %108 = add nsw i32 %107, %10... can share an output register with another operation already assigned to main_signed_add_32_13
  %108 = add nsw i32 %107, %10... can share an output register with another operation already assigned to main_signed_add_32_14
  %108 = add nsw i32 %107, %10... can share an output register with another operation already assigned to main_signed_add_32_15
  %108 = add nsw i32 %107, %10... can share an output register with another operation already assigned to main_signed_add_32_16
  %108 = add nsw i32 %107, %10... can share an output register with another operation already assigned to main_signed_add_32_17
  %108 = add nsw i32 %107, %10... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %103 = add nsw i32 %99, %102 (idx: 0)           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -120                          -40                           -40                           -40                           -40                           -40                           -40                           
  %108 = add nsw i32 %107, %10... (idx: 1)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -120                          -40                           -40                           -40                           -40                           -40                           -40                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %103 = add nsw i32 %99, %102 (idx
  %108 = add nsw i32 %107, %10... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %103 = add nsw i32 %99, %102 (idx: 0) -> main_signed_add_32_12 (mux inputs: 14)
  %108 = add nsw i32 %107, %10... (idx: 1) -> main_signed_add_32_18 (mux inputs: 6)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %109 = sub nsw i32 %78, %108 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %111 = sub nsw i32 0, %109 can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %109 = sub nsw i32 %78, %108 (idx: 0)           -20                           -10                           
  %111 = sub nsw i32 0, %109 (idx: 1)             -15                           -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %109 = sub nsw i32 %78, %108 (idx: 0)           1                             0                             
  %111 = sub nsw i32 0, %109 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %109 = sub nsw i32 %78, %108 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 4)
  %111 = sub nsw i32 0, %109 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 1)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %16, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %16, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %17, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %17, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %16, i32* geteleme... (idx: 0)        -55                           -55                           
  store i32 %17, i32* geteleme... (idx: 1)        -55                           -55                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %16, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %17, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %16, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 7)
  store i32 %17, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 7)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %18, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %18, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %19, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %19, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %18, i32* geteleme... (idx: 0)        -65                           -65                           
  store i32 %19, i32* geteleme... (idx: 1)        -65                           -65                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %18, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %19, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %18, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 8)
  store i32 %19, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 8)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %20, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %20, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %21, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %21, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %20, i32* geteleme... (idx: 0)        -75                           -75                           
  store i32 %21, i32* geteleme... (idx: 1)        -75                           -75                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %20, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %21, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %20, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 9)
  store i32 %21, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 9)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %22, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %22, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %23, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %23, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %22, i32* geteleme... (idx: 0)        -85                           -85                           
  store i32 %23, i32* geteleme... (idx: 1)        -85                           -85                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %22, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %23, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %22, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 10)
  store i32 %23, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 10)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %24, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %24, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %25, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %25, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %24, i32* geteleme... (idx: 0)        -95                           -95                           
  store i32 %25, i32* geteleme... (idx: 1)        -95                           -95                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %24, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %25, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %24, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 11)
  store i32 %25, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 11)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %27, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %27, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %30, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %30, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %27, i32* geteleme... (idx: 0)        -105                          -105                          
  store i32 %30, i32* geteleme... (idx: 1)        -105                          -105                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %27, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %30, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %27, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  store i32 %30, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB__114
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %120 = add nsw i32 %mil.01.i... (idx: 0)        -25                           -25                           -25                           -25                           -25                           -25                           -25                           -25                           -25                           -25                           -25                           -25                           -145                          -45                           -45                           -45                           -45                           -45                           -65                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %120 = add nsw i32 %mil.01.i... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %120 = add nsw i32 %mil.01.i... (idx: 0) -> main_signed_add_32_12 (mux inputs: 15)
State: LEGUP_F_main_BB__114
Binding functional unit type: decis_levl_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_decis_levl_local_mem_dual_port_0
  %116 = load i32* %115, align... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_decis_levl_local_mem_dual_port_0
  %116 = load i32* %115, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %116 = load i32* %115, align... (idx: 0) -> main_decis_levl_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB__114
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep6 = add i32 %gep_int4, %... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -150                          -40                           -40                           -40                           -40                           -40                           -60                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep6 = add i32 %gep_int4, %... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep6 = add i32 %gep_int4, %... (idx: 0) -> main_signed_add_32_12 (mux inputs: 17)
State: LEGUP_F_main_BB__114
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %117 = mul nsw i32 %116, %de... can share an output register with another operation already assigned to main_signed_multiply_32_23
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %117 = mul nsw i32 %116, %de... (idx: 0)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -140                          -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %117 = mul nsw i32 %116, %de... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %117 = mul nsw i32 %116, %de... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 16)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %252 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_0
  %252 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_1
  %252 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_2
  %252 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_3
  %252 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_4
  %252 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_5
  %252 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_6
  %252 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_7
  %252 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_8
  %252 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_9
  %252 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_10
  %252 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_11
  %252 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_12
  %252 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_13
  %252 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_14
  %252 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_15
  %252 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_16
  %252 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_17
  %252 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %252 = add nsw i32 %i.02.i, ... (idx: 0)        -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -165                          -35                           -35                           -35                           -35                           -35                           -55                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %252 = add nsw i32 %i.02.i, ... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %252 = add nsw i32 %i.02.i, ... (idx: 0) -> main_signed_add_32_12 (mux inputs: 18)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_divide_32
Weight matrix for operation/function unit matching:
                                                  main_signed_divide_32_0       
  %250 = sdiv i32 %i.02.i, 2 (idx: 0)             -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_divide_32_0       
  %250 = sdiv i32 %i.02.i, 2 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %250 = sdiv i32 %i.02.i, 2 (idx: 0) -> main_signed_divide_32_0 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %126 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %151 = mul nsw i32 %al2.0, 1... can share an input with another operation already assigned to main_signed_multiply_32_23
  %151 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %156 = mul nsw i32 %al1.0, 2... can share an input with another operation already assigned to main_signed_multiply_32_22
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %156 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %190 = mul i32 %ah1.0, %rh1.... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %191 = mul i32 %ah2.0, %rh2.... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %198 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %208 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %233 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %238 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_23
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %126 = mul nsw i32 %nbl.0, 1... (idx: 0)        -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -155                          -15                           -5                            -5                            -5                            -5                            -5                            -5                            -5                            
  %151 = mul nsw i32 %al2.0, 1... (idx
  %156 = mul nsw i32 %al1.0, 2... (idx
  %190 = mul i32 %ah1.0, %rh1.... (idx: 3)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -160                          -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %191 = mul i32 %ah2.0, %rh2.... (idx: 4)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -160                          -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %198 = mul nsw i32 %deth.0, ... (idx
  %208 = mul nsw i32 %nbh.0, 1... (idx
  %233 = mul nsw i32 %ah2.0, 1... (idx
  %238 = mul nsw i32 %ah1.0, 2... (idx
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %126 = mul nsw i32 %nbl.0, 1... (idx
  %151 = mul nsw i32 %al2.0, 1... (idx
  %156 = mul nsw i32 %al1.0, 2... (idx
  %190 = mul i32 %ah1.0, %rh1.... (idx: 3)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             
  %191 = mul i32 %ah2.0, %rh2.... (idx
  %198 = mul nsw i32 %deth.0, ... (idx
  %208 = mul nsw i32 %nbh.0, 1... (idx
  %233 = mul nsw i32 %ah2.0, 1... (idx
  %238 = mul nsw i32 %ah1.0, 2... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %126 = mul nsw i32 %nbl.0, 1... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 17)
  %156 = mul nsw i32 %al1.0, 2... (idx: 2) -> main_signed_multiply_32_23 (mux inputs: 3)
  %151 = mul nsw i32 %al2.0, 1... (idx: 1) -> main_signed_multiply_32_24 (mux inputs: 1)
  %190 = mul i32 %ah1.0, %rh1.... (idx: 3) -> main_signed_multiply_32_25 (mux inputs: 2)
  %191 = mul i32 %ah2.0, %rh2.... (idx: 4) -> main_signed_multiply_32_26 (mux inputs: 2)
  %198 = mul nsw i32 %deth.0, ... (idx: 5) -> main_signed_multiply_32_27 (mux inputs: 1)
  %208 = mul nsw i32 %nbh.0, 1... (idx: 6) -> main_signed_multiply_32_28 (mux inputs: 1)
  %233 = mul nsw i32 %ah2.0, 1... (idx: 7) -> main_signed_multiply_32_29 (mux inputs: 1)
  %238 = mul nsw i32 %ah1.0, 2... (idx: 8) -> main_signed_multiply_32_30 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %145 = sub nsw i32 0, %142 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %145 = sub nsw i32 0, %142 can share an output register with another operation already assigned to main_signed_subtract_32_1
  %227 = sub nsw i32 0, %224 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %227 = sub nsw i32 0, %224 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %145 = sub nsw i32 0, %142 (idx: 0)             -35                           -5                            
  %227 = sub nsw i32 0, %224 (idx: 1)             -35                           -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %145 = sub nsw i32 0, %142 (idx: 0)             1                             0                             
  %227 = sub nsw i32 0, %224 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %145 = sub nsw i32 0, %142 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 5)
  %227 = sub nsw i32 0, %224 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 2)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %ril.0.i.i = load i32* %ril.... can share an output register with another operation already assigned to main_mem_dual_port_0
  %ril.0.i.i = load i32* %ril.... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %ril.0.i.i = load i32* %ril.... (idx: 0)        5                             5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %ril.0.i.i = load i32* %ril.... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %ril.0.i.i = load i32* %ril.... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_18
  %160 = add nsw i32 %157, 192 can share an output register with another operation already assigned to main_signed_add_32_0
  %160 = add nsw i32 %157, 192 can share an output register with another operation already assigned to main_signed_add_32_1
  %160 = add nsw i32 %157, 192 can share an output register with another operation already assigned to main_signed_add_32_2
  %160 = add nsw i32 %157, 192 can share an output register with another operation already assigned to main_signed_add_32_3
  %160 = add nsw i32 %157, 192 can share an output register with another operation already assigned to main_signed_add_32_4
  %160 = add nsw i32 %157, 192 can share an output register with another operation already assigned to main_signed_add_32_5
  %160 = add nsw i32 %157, 192 can share an output register with another operation already assigned to main_signed_add_32_6
  %160 = add nsw i32 %157, 192 can share an output register with another operation already assigned to main_signed_add_32_7
  %160 = add nsw i32 %157, 192 can share an output register with another operation already assigned to main_signed_add_32_8
  %160 = add nsw i32 %157, 192 can share an output register with another operation already assigned to main_signed_add_32_9
  %160 = add nsw i32 %157, 192 can share an output register with another operation already assigned to main_signed_add_32_10
  %160 = add nsw i32 %157, 192 can share an output register with another operation already assigned to main_signed_add_32_11
  %160 = add nsw i32 %157, 192 can share an output register with another operation already assigned to main_signed_add_32_12
  %160 = add nsw i32 %157, 192 can share an output register with another operation already assigned to main_signed_add_32_13
  %160 = add nsw i32 %157, 192 can share an output register with another operation already assigned to main_signed_add_32_14
  %160 = add nsw i32 %157, 192 can share an output register with another operation already assigned to main_signed_add_32_15
  %160 = add nsw i32 %157, 192 can share an output register with another operation already assigned to main_signed_add_32_16
  %160 = add nsw i32 %157, 192 can share an output register with another operation already assigned to main_signed_add_32_17
  %160 = add nsw i32 %157, 192 can share an output register with another operation already assigned to main_signed_add_32_18
  %tmp.i3.i12 = add i32 %191, ... can share an output register with another operation already assigned to main_signed_add_32_0
  %tmp.i3.i12 = add i32 %191, ... can share an output register with another operation already assigned to main_signed_add_32_1
  %tmp.i3.i12 = add i32 %191, ... can share an output register with another operation already assigned to main_signed_add_32_2
  %tmp.i3.i12 = add i32 %191, ... can share an output register with another operation already assigned to main_signed_add_32_3
  %tmp.i3.i12 = add i32 %191, ... can share an output register with another operation already assigned to main_signed_add_32_4
  %tmp.i3.i12 = add i32 %191, ... can share an output register with another operation already assigned to main_signed_add_32_5
  %tmp.i3.i12 = add i32 %191, ... can share an output register with another operation already assigned to main_signed_add_32_6
  %tmp.i3.i12 = add i32 %191, ... can share an output register with another operation already assigned to main_signed_add_32_7
  %tmp.i3.i12 = add i32 %191, ... can share an output register with another operation already assigned to main_signed_add_32_8
  %tmp.i3.i12 = add i32 %191, ... can share an output register with another operation already assigned to main_signed_add_32_9
  %tmp.i3.i12 = add i32 %191, ... can share an output register with another operation already assigned to main_signed_add_32_10
  %tmp.i3.i12 = add i32 %191, ... can share an output register with another operation already assigned to main_signed_add_32_11
  %tmp.i3.i12 = add i32 %191, ... can share an output register with another operation already assigned to main_signed_add_32_12
  %tmp.i3.i12 = add i32 %191, ... can share an output register with another operation already assigned to main_signed_add_32_13
  %tmp.i3.i12 = add i32 %191, ... can share an output register with another operation already assigned to main_signed_add_32_14
  %tmp.i3.i12 = add i32 %191, ... can share an output register with another operation already assigned to main_signed_add_32_15
  %tmp.i3.i12 = add i32 %191, ... can share an output register with another operation already assigned to main_signed_add_32_16
  %tmp.i3.i12 = add i32 %191, ... can share an output register with another operation already assigned to main_signed_add_32_17
  %tmp.i3.i12 = add i32 %191, ... can share an output register with another operation already assigned to main_signed_add_32_18
  %242 = add nsw i32 %239, 192 can share an output register with another operation already assigned to main_signed_add_32_0
  %242 = add nsw i32 %239, 192 can share an output register with another operation already assigned to main_signed_add_32_1
  %242 = add nsw i32 %239, 192 can share an output register with another operation already assigned to main_signed_add_32_2
  %242 = add nsw i32 %239, 192 can share an output register with another operation already assigned to main_signed_add_32_3
  %242 = add nsw i32 %239, 192 can share an output register with another operation already assigned to main_signed_add_32_4
  %242 = add nsw i32 %239, 192 can share an output register with another operation already assigned to main_signed_add_32_5
  %242 = add nsw i32 %239, 192 can share an output register with another operation already assigned to main_signed_add_32_6
  %242 = add nsw i32 %239, 192 can share an output register with another operation already assigned to main_signed_add_32_7
  %242 = add nsw i32 %239, 192 can share an output register with another operation already assigned to main_signed_add_32_8
  %242 = add nsw i32 %239, 192 can share an output register with another operation already assigned to main_signed_add_32_9
  %242 = add nsw i32 %239, 192 can share an output register with another operation already assigned to main_signed_add_32_10
  %242 = add nsw i32 %239, 192 can share an output register with another operation already assigned to main_signed_add_32_11
  %242 = add nsw i32 %239, 192 can share an output register with another operation already assigned to main_signed_add_32_12
  %242 = add nsw i32 %239, 192 can share an output register with another operation already assigned to main_signed_add_32_13
  %242 = add nsw i32 %239, 192 can share an output register with another operation already assigned to main_signed_add_32_14
  %242 = add nsw i32 %239, 192 can share an output register with another operation already assigned to main_signed_add_32_15
  %242 = add nsw i32 %239, 192 can share an output register with another operation already assigned to main_signed_add_32_16
  %242 = add nsw i32 %239, 192 can share an output register with another operation already assigned to main_signed_add_32_17
  %242 = add nsw i32 %239, 192 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep9 = add i32 %gep_int7, %... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -180                          -40                           -40                           -40                           -40                           -40                           -60                           
  %160 = add nsw i32 %157, 192 (idx: 1)           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -175                          -35                           -35                           -35                           -35                           -35                           -55                           
  %tmp.i3.i12 = add i32 %191, ... (idx: 2)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -180                          -40                           -40                           -40                           -40                           -40                           -60                           
  %242 = add nsw i32 %239, 192 (idx: 3)           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -175                          -35                           -35                           -35                           -35                           -35                           -55                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep9 = add i32 %gep_int7, %... (idx
  %160 = add nsw i32 %157, 192 (idx
  %tmp.i3.i12 = add i32 %191, ... (idx
  %242 = add nsw i32 %239, 192 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep9 = add i32 %gep_int7, %... (idx: 0) -> main_signed_add_32_12 (mux inputs: 20)
  %tmp.i3.i12 = add i32 %191, ... (idx: 2) -> main_signed_add_32_16 (mux inputs: 6)
  %242 = add nsw i32 %239, 192 (idx: 3) -> main_signed_add_32_17 (mux inputs: 5)
  %160 = add nsw i32 %157, 192 (idx: 1) -> main_signed_add_32_18 (mux inputs: 7)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: qq4_code4_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_qq4_code4_table_local_mem_dual_port_0
  %123 = load i32* %122, align... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_qq4_code4_table_local_mem_dual_port_0
  %123 = load i32* %122, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %123 = load i32* %122, align... (idx: 0) -> main_qq4_code4_table_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_18
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep12 = add i32 %gep_int10,... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -200                          -40                           -40                           -40                           -60                           -50                           -70                           
  %gep15 = add i32 %gep_int13,... (idx: 1)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -200                          -40                           -40                           -40                           -60                           -50                           -70                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep12 = add i32 %gep_int10,... (idx
  %gep15 = add i32 %gep_int13,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep12 = add i32 %gep_int10,... (idx: 0) -> main_signed_add_32_12 (mux inputs: 22)
  %gep15 = add i32 %gep_int13,... (idx: 1) -> main_signed_add_32_18 (mux inputs: 9)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: wl_code_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_wl_code_table_local_mem_dual_port_0
  %129 = load i32* %128, align... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_wl_code_table_local_mem_dual_port_0
  %129 = load i32* %128, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %129 = load i32* %128, align... (idx: 0) -> main_wl_code_table_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %130 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_0
  %130 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_1
  %130 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_2
  %130 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_3
  %130 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_4
  %130 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_5
  %130 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_6
  %130 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_7
  %130 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_8
  %130 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_9
  %130 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_10
  %130 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_11
  %130 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_12
  %130 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_13
  %130 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_14
  %130 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_15
  %130 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_16
  %130 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_17
  %130 = add nsw i32 %127, %12... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %130 = add nsw i32 %127, %12... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -220                          -40                           -40                           -40                           -60                           -50                           -90                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %130 = add nsw i32 %127, %12... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %130 = add nsw i32 %127, %12... (idx: 0) -> main_signed_add_32_12 (mux inputs: 24)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %124 = mul nsw i32 %123, %de... can share an input with another operation already assigned to main_signed_multiply_32_22
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %124 = mul nsw i32 %123, %de... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %124 = mul nsw i32 %123, %de... (idx: 0)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -165                          -30                           -10                           -20                           -20                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %124 = mul nsw i32 %123, %de... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %124 = mul nsw i32 %123, %de... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 18)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %138 = sub i32 9, %135 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %138 = sub i32 9, %135 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %138 = sub i32 9, %135 (idx: 0)                 -45                           -15                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %138 = sub i32 9, %135 (idx: 0)                 1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %138 = sub i32 9, %135 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 6)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %141 = add nsw i32 %104, %12... can share an output register with another operation already assigned to main_signed_add_32_12
  %141 = add nsw i32 %104, %12... can share an input with another operation already assigned to main_signed_add_32_18
  %165 = add nsw i32 %125, %10... can share an output register with another operation already assigned to main_signed_add_32_0
  %165 = add nsw i32 %125, %10... can share an output register with another operation already assigned to main_signed_add_32_1
  %165 = add nsw i32 %125, %10... can share an output register with another operation already assigned to main_signed_add_32_2
  %165 = add nsw i32 %125, %10... can share an output register with another operation already assigned to main_signed_add_32_3
  %165 = add nsw i32 %125, %10... can share an output register with another operation already assigned to main_signed_add_32_4
  %165 = add nsw i32 %125, %10... can share an output register with another operation already assigned to main_signed_add_32_5
  %165 = add nsw i32 %125, %10... can share an output register with another operation already assigned to main_signed_add_32_6
  %165 = add nsw i32 %125, %10... can share an output register with another operation already assigned to main_signed_add_32_7
  %165 = add nsw i32 %125, %10... can share an output register with another operation already assigned to main_signed_add_32_8
  %165 = add nsw i32 %125, %10... can share an output register with another operation already assigned to main_signed_add_32_9
  %165 = add nsw i32 %125, %10... can share an output register with another operation already assigned to main_signed_add_32_10
  %165 = add nsw i32 %125, %10... can share an output register with another operation already assigned to main_signed_add_32_11
  %165 = add nsw i32 %125, %10... can share an output register with another operation already assigned to main_signed_add_32_12
  %165 = add nsw i32 %125, %10... can share an output register with another operation already assigned to main_signed_add_32_13
  %165 = add nsw i32 %125, %10... can share an output register with another operation already assigned to main_signed_add_32_14
  %165 = add nsw i32 %125, %10... can share an output register with another operation already assigned to main_signed_add_32_15
  %165 = add nsw i32 %125, %10... can share an output register with another operation already assigned to main_signed_add_32_16
  %165 = add nsw i32 %125, %10... can share an output register with another operation already assigned to main_signed_add_32_17
  %165 = add nsw i32 %125, %10... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %141 = add nsw i32 %104, %12... (idx: 0)        -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -240                          -50                           -50                           -50                           -70                           -60                           -95                           
  %165 = add nsw i32 %125, %10... (idx: 1)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -240                          -40                           -40                           -40                           -60                           -50                           -90                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %141 = add nsw i32 %104, %12... (idx
  %165 = add nsw i32 %125, %10... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %165 = add nsw i32 %125, %10... (idx: 1) -> main_signed_add_32_12 (mux inputs: 26)
  %141 = add nsw i32 %104, %12... (idx: 0) -> main_signed_add_32_18 (mux inputs: 10)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %143 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %147 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %143 = mul nsw i32 %plt1.0, ... (idx: 0)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -180                          -30                           -10                           -20                           -20                           -10                           -10                           -10                           -10                           
  %147 = mul nsw i32 %plt2.0, ... (idx: 1)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -180                          -30                           -10                           -20                           -20                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %143 = mul nsw i32 %plt1.0, ... (idx
  %147 = mul nsw i32 %plt2.0, ... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %143 = mul nsw i32 %plt1.0, ... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 20)
  %147 = mul nsw i32 %plt2.0, ... (idx: 1) -> main_signed_multiply_32_23 (mux inputs: 5)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: ilb_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_ilb_table_local_mem_dual_port_0
  %137 = load i32* %136, align... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_ilb_table_local_mem_dual_port_0
  %137 = load i32* %136, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %137 = load i32* %136, align... (idx: 0) -> main_ilb_table_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_18
  %wd4.0.i9.i6 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_0
  %wd4.0.i9.i6 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_1
  %wd4.0.i9.i6 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_2
  %wd4.0.i9.i6 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_3
  %wd4.0.i9.i6 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_4
  %wd4.0.i9.i6 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_5
  %wd4.0.i9.i6 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_6
  %wd4.0.i9.i6 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_7
  %wd4.0.i9.i6 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_8
  %wd4.0.i9.i6 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_9
  %wd4.0.i9.i6 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_10
  %wd4.0.i9.i6 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_11
  %wd4.0.i9.i6 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_12
  %wd4.0.i9.i6 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_13
  %wd4.0.i9.i6 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_14
  %wd4.0.i9.i6 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_15
  %wd4.0.i9.i6 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_16
  %wd4.0.i9.i6 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_17
  %wd4.0.i9.i6 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_18
  %153 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_0
  %153 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_1
  %153 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_2
  %153 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_3
  %153 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_4
  %153 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_5
  %153 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_6
  %153 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_7
  %153 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_8
  %153 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_9
  %153 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_10
  %153 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_11
  %153 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_12
  %153 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_13
  %153 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_14
  %153 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_15
  %153 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_16
  %153 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_17
  %153 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_18
  %apl1.0.i5.i9 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_0
  %apl1.0.i5.i9 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_1
  %apl1.0.i5.i9 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_2
  %apl1.0.i5.i9 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_3
  %apl1.0.i5.i9 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_4
  %apl1.0.i5.i9 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_5
  %apl1.0.i5.i9 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_6
  %apl1.0.i5.i9 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_7
  %apl1.0.i5.i9 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_8
  %apl1.0.i5.i9 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_9
  %apl1.0.i5.i9 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_10
  %apl1.0.i5.i9 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_11
  %apl1.0.i5.i9 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_12
  %apl1.0.i5.i9 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_13
  %apl1.0.i5.i9 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_14
  %apl1.0.i5.i9 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_15
  %apl1.0.i5.i9 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_16
  %apl1.0.i5.i9 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_17
  %apl1.0.i5.i9 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep18 = add i32 %gep_int16,... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -260                          -40                           -40                           -40                           -60                           -50                           -100                          
  %wd4.0.i9.i6 = add nsw i32 %... (idx: 1)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -260                          -40                           -40                           -40                           -60                           -50                           -100                          
  %153 = add nsw i32 %wd4.0.i9... (idx: 2)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -260                          -40                           -40                           -40                           -60                           -50                           -100                          
  %apl1.0.i5.i9 = add nsw i32 ... (idx: 3)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -260                          -40                           -40                           -40                           -60                           -50                           -100                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep18 = add i32 %gep_int16,... (idx
  %wd4.0.i9.i6 = add nsw i32 %... (idx
  %153 = add nsw i32 %wd4.0.i9... (idx
  %apl1.0.i5.i9 = add nsw i32 ... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep18 = add i32 %gep_int16,... (idx: 0) -> main_signed_add_32_12 (mux inputs: 28)
  %153 = add nsw i32 %wd4.0.i9... (idx: 2) -> main_signed_add_32_16 (mux inputs: 8)
  %apl1.0.i5.i9 = add nsw i32 ... (idx: 3) -> main_signed_add_32_17 (mux inputs: 7)
  %wd4.0.i9.i6 = add nsw i32 %... (idx: 1) -> main_signed_add_32_18 (mux inputs: 12)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %161 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_0
  %161 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_1
  %163 = sub nsw i32 0, %161 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %163 = sub nsw i32 0, %161 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %161 = sub nsw i32 15360, %.... (idx: 0)        -55                           -15                           
  %163 = sub nsw i32 0, %161 (idx: 1)             -55                           -15                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %161 = sub nsw i32 15360, %.... (idx: 0)        1                             0                             
  %163 = sub nsw i32 0, %161 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %161 = sub nsw i32 15360, %.... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 7)
  %163 = sub nsw i32 0, %161 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 3)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %166 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %166 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %167 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %167 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %166 = load i32* getelementp... (idx: 0)        0                             10                            
  %167 = load i32* getelementp... (idx: 1)        0                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %166 = load i32* getelementp... (idx: 0)        1                             0                             
  %167 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %166 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %167 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %169 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %169 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %170 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %170 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %169 = load i32* getelementp... (idx: 0)        0                             10                            
  %170 = load i32* getelementp... (idx: 1)        0                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %169 = load i32* getelementp... (idx: 0)        1                             0                             
  %170 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %169 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %170 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %173 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %173 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %174 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %174 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %173 = load i32* getelementp... (idx: 0)        0                             10                            
  %174 = load i32* getelementp... (idx: 1)        0                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %173 = load i32* getelementp... (idx: 0)        1                             0                             
  %174 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %173 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %174 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %168 = mul nsw i32 %167, %16... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %168 = mul nsw i32 %167, %16... (idx: 0)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -200                          -50                           -10                           -20                           -20                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %168 = mul nsw i32 %167, %16... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %168 = mul nsw i32 %167, %16... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 22)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %177 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %177 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %178 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %178 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %177 = load i32* getelementp... (idx: 0)        0                             10                            
  %178 = load i32* getelementp... (idx: 1)        0                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %177 = load i32* getelementp... (idx: 0)        1                             0                             
  %178 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %177 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %178 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %171 = mul nsw i32 %170, %16... (idx: 0)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -220                          -50                           -10                           -20                           -20                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %171 = mul nsw i32 %170, %16... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %171 = mul nsw i32 %170, %16... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 24)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %181 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %181 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %182 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %182 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %181 = load i32* getelementp... (idx: 0)        0                             10                            
  %182 = load i32* getelementp... (idx: 1)        0                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %181 = load i32* getelementp... (idx: 0)        1                             0                             
  %182 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %181 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %182 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %172 = add nsw i32 %171, %16... can share an output register with another operation already assigned to main_signed_add_32_0
  %172 = add nsw i32 %171, %16... can share an output register with another operation already assigned to main_signed_add_32_1
  %172 = add nsw i32 %171, %16... can share an output register with another operation already assigned to main_signed_add_32_2
  %172 = add nsw i32 %171, %16... can share an output register with another operation already assigned to main_signed_add_32_3
  %172 = add nsw i32 %171, %16... can share an output register with another operation already assigned to main_signed_add_32_4
  %172 = add nsw i32 %171, %16... can share an output register with another operation already assigned to main_signed_add_32_5
  %172 = add nsw i32 %171, %16... can share an output register with another operation already assigned to main_signed_add_32_6
  %172 = add nsw i32 %171, %16... can share an output register with another operation already assigned to main_signed_add_32_7
  %172 = add nsw i32 %171, %16... can share an output register with another operation already assigned to main_signed_add_32_8
  %172 = add nsw i32 %171, %16... can share an output register with another operation already assigned to main_signed_add_32_9
  %172 = add nsw i32 %171, %16... can share an output register with another operation already assigned to main_signed_add_32_10
  %172 = add nsw i32 %171, %16... can share an output register with another operation already assigned to main_signed_add_32_11
  %172 = add nsw i32 %171, %16... can share an output register with another operation already assigned to main_signed_add_32_12
  %172 = add nsw i32 %171, %16... can share an output register with another operation already assigned to main_signed_add_32_13
  %172 = add nsw i32 %171, %16... can share an output register with another operation already assigned to main_signed_add_32_14
  %172 = add nsw i32 %171, %16... can share an output register with another operation already assigned to main_signed_add_32_15
  %172 = add nsw i32 %171, %16... can share an output register with another operation already assigned to main_signed_add_32_16
  %172 = add nsw i32 %171, %16... can share an output register with another operation already assigned to main_signed_add_32_17
  %172 = add nsw i32 %171, %16... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %172 = add nsw i32 %171, %16... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -280                          -40                           -40                           -40                           -80                           -70                           -120                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %172 = add nsw i32 %171, %16... (idx: 0)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %172 = add nsw i32 %171, %16... (idx: 0) -> main_signed_add_32_12 (mux inputs: 30)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %175 = mul nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %175 = mul nsw i32 %174, %17... (idx: 0)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -240                          -50                           -10                           -20                           -20                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %175 = mul nsw i32 %174, %17... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %175 = mul nsw i32 %174, %17... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 26)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %185 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %185 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %186 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %186 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %185 = load i32* getelementp... (idx: 0)        0                             10                            
  %186 = load i32* getelementp... (idx: 1)        0                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %185 = load i32* getelementp... (idx: 0)        1                             0                             
  %186 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %185 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %186 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %176 = add nsw i32 %172, %17... can share an output register with another operation already assigned to main_signed_add_32_0
  %176 = add nsw i32 %172, %17... can share an output register with another operation already assigned to main_signed_add_32_1
  %176 = add nsw i32 %172, %17... can share an output register with another operation already assigned to main_signed_add_32_2
  %176 = add nsw i32 %172, %17... can share an output register with another operation already assigned to main_signed_add_32_3
  %176 = add nsw i32 %172, %17... can share an output register with another operation already assigned to main_signed_add_32_4
  %176 = add nsw i32 %172, %17... can share an output register with another operation already assigned to main_signed_add_32_5
  %176 = add nsw i32 %172, %17... can share an output register with another operation already assigned to main_signed_add_32_6
  %176 = add nsw i32 %172, %17... can share an output register with another operation already assigned to main_signed_add_32_7
  %176 = add nsw i32 %172, %17... can share an output register with another operation already assigned to main_signed_add_32_8
  %176 = add nsw i32 %172, %17... can share an output register with another operation already assigned to main_signed_add_32_9
  %176 = add nsw i32 %172, %17... can share an output register with another operation already assigned to main_signed_add_32_10
  %176 = add nsw i32 %172, %17... can share an output register with another operation already assigned to main_signed_add_32_11
  %176 = add nsw i32 %172, %17... can share an output register with another operation already assigned to main_signed_add_32_12
  %176 = add nsw i32 %172, %17... can share an output register with another operation already assigned to main_signed_add_32_13
  %176 = add nsw i32 %172, %17... can share an output register with another operation already assigned to main_signed_add_32_14
  %176 = add nsw i32 %172, %17... can share an output register with another operation already assigned to main_signed_add_32_15
  %176 = add nsw i32 %172, %17... can share an output register with another operation already assigned to main_signed_add_32_16
  %176 = add nsw i32 %172, %17... can share an output register with another operation already assigned to main_signed_add_32_17
  %176 = add nsw i32 %172, %17... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %176 = add nsw i32 %172, %17... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -300                          -40                           -40                           -40                           -80                           -70                           -120                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %176 = add nsw i32 %172, %17... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %176 = add nsw i32 %172, %17... (idx: 0) -> main_signed_add_32_12 (mux inputs: 32)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %179 = mul nsw i32 %178, %17... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %179 = mul nsw i32 %178, %17... (idx: 0)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -260                          -50                           -10                           -20                           -20                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %179 = mul nsw i32 %178, %17... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %179 = mul nsw i32 %178, %17... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 28)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %180 = add nsw i32 %176, %17... can share an output register with another operation already assigned to main_signed_add_32_0
  %180 = add nsw i32 %176, %17... can share an output register with another operation already assigned to main_signed_add_32_1
  %180 = add nsw i32 %176, %17... can share an output register with another operation already assigned to main_signed_add_32_2
  %180 = add nsw i32 %176, %17... can share an output register with another operation already assigned to main_signed_add_32_3
  %180 = add nsw i32 %176, %17... can share an output register with another operation already assigned to main_signed_add_32_4
  %180 = add nsw i32 %176, %17... can share an output register with another operation already assigned to main_signed_add_32_5
  %180 = add nsw i32 %176, %17... can share an output register with another operation already assigned to main_signed_add_32_6
  %180 = add nsw i32 %176, %17... can share an output register with another operation already assigned to main_signed_add_32_7
  %180 = add nsw i32 %176, %17... can share an output register with another operation already assigned to main_signed_add_32_8
  %180 = add nsw i32 %176, %17... can share an output register with another operation already assigned to main_signed_add_32_9
  %180 = add nsw i32 %176, %17... can share an output register with another operation already assigned to main_signed_add_32_10
  %180 = add nsw i32 %176, %17... can share an output register with another operation already assigned to main_signed_add_32_11
  %180 = add nsw i32 %176, %17... can share an output register with another operation already assigned to main_signed_add_32_12
  %180 = add nsw i32 %176, %17... can share an output register with another operation already assigned to main_signed_add_32_13
  %180 = add nsw i32 %176, %17... can share an output register with another operation already assigned to main_signed_add_32_14
  %180 = add nsw i32 %176, %17... can share an output register with another operation already assigned to main_signed_add_32_15
  %180 = add nsw i32 %176, %17... can share an output register with another operation already assigned to main_signed_add_32_16
  %180 = add nsw i32 %176, %17... can share an output register with another operation already assigned to main_signed_add_32_17
  %180 = add nsw i32 %176, %17... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %180 = add nsw i32 %176, %17... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -320                          -40                           -40                           -40                           -80                           -70                           -120                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %180 = add nsw i32 %176, %17... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %180 = add nsw i32 %176, %17... (idx: 0) -> main_signed_add_32_12 (mux inputs: 34)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %183 = mul nsw i32 %182, %18... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %183 = mul nsw i32 %182, %18... (idx: 0)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -280                          -50                           -10                           -20                           -20                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %183 = mul nsw i32 %182, %18... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %183 = mul nsw i32 %182, %18... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 30)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %184 = add nsw i32 %180, %18... can share an output register with another operation already assigned to main_signed_add_32_0
  %184 = add nsw i32 %180, %18... can share an output register with another operation already assigned to main_signed_add_32_1
  %184 = add nsw i32 %180, %18... can share an output register with another operation already assigned to main_signed_add_32_2
  %184 = add nsw i32 %180, %18... can share an output register with another operation already assigned to main_signed_add_32_3
  %184 = add nsw i32 %180, %18... can share an output register with another operation already assigned to main_signed_add_32_4
  %184 = add nsw i32 %180, %18... can share an output register with another operation already assigned to main_signed_add_32_5
  %184 = add nsw i32 %180, %18... can share an output register with another operation already assigned to main_signed_add_32_6
  %184 = add nsw i32 %180, %18... can share an output register with another operation already assigned to main_signed_add_32_7
  %184 = add nsw i32 %180, %18... can share an output register with another operation already assigned to main_signed_add_32_8
  %184 = add nsw i32 %180, %18... can share an output register with another operation already assigned to main_signed_add_32_9
  %184 = add nsw i32 %180, %18... can share an output register with another operation already assigned to main_signed_add_32_10
  %184 = add nsw i32 %180, %18... can share an output register with another operation already assigned to main_signed_add_32_11
  %184 = add nsw i32 %180, %18... can share an output register with another operation already assigned to main_signed_add_32_12
  %184 = add nsw i32 %180, %18... can share an output register with another operation already assigned to main_signed_add_32_13
  %184 = add nsw i32 %180, %18... can share an output register with another operation already assigned to main_signed_add_32_14
  %184 = add nsw i32 %180, %18... can share an output register with another operation already assigned to main_signed_add_32_15
  %184 = add nsw i32 %180, %18... can share an output register with another operation already assigned to main_signed_add_32_16
  %184 = add nsw i32 %180, %18... can share an output register with another operation already assigned to main_signed_add_32_17
  %184 = add nsw i32 %180, %18... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %184 = add nsw i32 %180, %18... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -340                          -40                           -40                           -40                           -80                           -70                           -120                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %184 = add nsw i32 %180, %18... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %184 = add nsw i32 %180, %18... (idx: 0) -> main_signed_add_32_12 (mux inputs: 36)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %187 = mul nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %187 = mul nsw i32 %186, %18... (idx: 0)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -300                          -50                           -10                           -20                           -20                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %187 = mul nsw i32 %186, %18... (idx: 0)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %187 = mul nsw i32 %186, %18... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 32)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %188 = add nsw i32 %184, %18... can share an output register with another operation already assigned to main_signed_add_32_0
  %188 = add nsw i32 %184, %18... can share an output register with another operation already assigned to main_signed_add_32_1
  %188 = add nsw i32 %184, %18... can share an output register with another operation already assigned to main_signed_add_32_2
  %188 = add nsw i32 %184, %18... can share an output register with another operation already assigned to main_signed_add_32_3
  %188 = add nsw i32 %184, %18... can share an output register with another operation already assigned to main_signed_add_32_4
  %188 = add nsw i32 %184, %18... can share an output register with another operation already assigned to main_signed_add_32_5
  %188 = add nsw i32 %184, %18... can share an output register with another operation already assigned to main_signed_add_32_6
  %188 = add nsw i32 %184, %18... can share an output register with another operation already assigned to main_signed_add_32_7
  %188 = add nsw i32 %184, %18... can share an output register with another operation already assigned to main_signed_add_32_8
  %188 = add nsw i32 %184, %18... can share an output register with another operation already assigned to main_signed_add_32_9
  %188 = add nsw i32 %184, %18... can share an output register with another operation already assigned to main_signed_add_32_10
  %188 = add nsw i32 %184, %18... can share an output register with another operation already assigned to main_signed_add_32_11
  %188 = add nsw i32 %184, %18... can share an output register with another operation already assigned to main_signed_add_32_12
  %188 = add nsw i32 %184, %18... can share an output register with another operation already assigned to main_signed_add_32_13
  %188 = add nsw i32 %184, %18... can share an output register with another operation already assigned to main_signed_add_32_14
  %188 = add nsw i32 %184, %18... can share an output register with another operation already assigned to main_signed_add_32_15
  %188 = add nsw i32 %184, %18... can share an output register with another operation already assigned to main_signed_add_32_16
  %188 = add nsw i32 %184, %18... can share an output register with another operation already assigned to main_signed_add_32_17
  %188 = add nsw i32 %184, %18... can share an output register with another operation already assigned to main_signed_add_32_18
  %193 = add nsw i32 %192, %18... can share an output register with another operation already assigned to main_signed_add_32_0
  %193 = add nsw i32 %192, %18... can share an output register with another operation already assigned to main_signed_add_32_1
  %193 = add nsw i32 %192, %18... can share an output register with another operation already assigned to main_signed_add_32_2
  %193 = add nsw i32 %192, %18... can share an output register with another operation already assigned to main_signed_add_32_3
  %193 = add nsw i32 %192, %18... can share an output register with another operation already assigned to main_signed_add_32_4
  %193 = add nsw i32 %192, %18... can share an output register with another operation already assigned to main_signed_add_32_5
  %193 = add nsw i32 %192, %18... can share an output register with another operation already assigned to main_signed_add_32_6
  %193 = add nsw i32 %192, %18... can share an output register with another operation already assigned to main_signed_add_32_7
  %193 = add nsw i32 %192, %18... can share an output register with another operation already assigned to main_signed_add_32_8
  %193 = add nsw i32 %192, %18... can share an output register with another operation already assigned to main_signed_add_32_9
  %193 = add nsw i32 %192, %18... can share an output register with another operation already assigned to main_signed_add_32_10
  %193 = add nsw i32 %192, %18... can share an output register with another operation already assigned to main_signed_add_32_11
  %193 = add nsw i32 %192, %18... can share an output register with another operation already assigned to main_signed_add_32_12
  %193 = add nsw i32 %192, %18... can share an output register with another operation already assigned to main_signed_add_32_13
  %193 = add nsw i32 %192, %18... can share an output register with another operation already assigned to main_signed_add_32_14
  %193 = add nsw i32 %192, %18... can share an output register with another operation already assigned to main_signed_add_32_15
  %193 = add nsw i32 %192, %18... can share an output register with another operation already assigned to main_signed_add_32_16
  %193 = add nsw i32 %192, %18... can share an output register with another operation already assigned to main_signed_add_32_17
  %193 = add nsw i32 %192, %18... can share an output register with another operation already assigned to main_signed_add_32_18
  %197 = add nsw i32 %196, 3 can share an output register with another operation already assigned to main_signed_add_32_0
  %197 = add nsw i32 %196, 3 can share an output register with another operation already assigned to main_signed_add_32_1
  %197 = add nsw i32 %196, 3 can share an output register with another operation already assigned to main_signed_add_32_2
  %197 = add nsw i32 %196, 3 can share an output register with another operation already assigned to main_signed_add_32_3
  %197 = add nsw i32 %196, 3 can share an output register with another operation already assigned to main_signed_add_32_4
  %197 = add nsw i32 %196, 3 can share an output register with another operation already assigned to main_signed_add_32_5
  %197 = add nsw i32 %196, 3 can share an output register with another operation already assigned to main_signed_add_32_6
  %197 = add nsw i32 %196, 3 can share an output register with another operation already assigned to main_signed_add_32_7
  %197 = add nsw i32 %196, 3 can share an output register with another operation already assigned to main_signed_add_32_8
  %197 = add nsw i32 %196, 3 can share an output register with another operation already assigned to main_signed_add_32_9
  %197 = add nsw i32 %196, 3 can share an output register with another operation already assigned to main_signed_add_32_10
  %197 = add nsw i32 %196, 3 can share an output register with another operation already assigned to main_signed_add_32_11
  %197 = add nsw i32 %196, 3 can share an output register with another operation already assigned to main_signed_add_32_12
  %197 = add nsw i32 %196, 3 can share an output register with another operation already assigned to main_signed_add_32_13
  %197 = add nsw i32 %196, 3 can share an output register with another operation already assigned to main_signed_add_32_14
  %197 = add nsw i32 %196, 3 can share an output register with another operation already assigned to main_signed_add_32_15
  %197 = add nsw i32 %196, 3 can share an output register with another operation already assigned to main_signed_add_32_16
  %197 = add nsw i32 %196, 3 can share an output register with another operation already assigned to main_signed_add_32_17
  %197 = add nsw i32 %196, 3 can share an output register with another operation already assigned to main_signed_add_32_18
  %203 = add nsw i32 %196, 2 can share an output register with another operation already assigned to main_signed_add_32_0
  %203 = add nsw i32 %196, 2 can share an output register with another operation already assigned to main_signed_add_32_1
  %203 = add nsw i32 %196, 2 can share an output register with another operation already assigned to main_signed_add_32_2
  %203 = add nsw i32 %196, 2 can share an output register with another operation already assigned to main_signed_add_32_3
  %203 = add nsw i32 %196, 2 can share an output register with another operation already assigned to main_signed_add_32_4
  %203 = add nsw i32 %196, 2 can share an output register with another operation already assigned to main_signed_add_32_5
  %203 = add nsw i32 %196, 2 can share an output register with another operation already assigned to main_signed_add_32_6
  %203 = add nsw i32 %196, 2 can share an output register with another operation already assigned to main_signed_add_32_7
  %203 = add nsw i32 %196, 2 can share an output register with another operation already assigned to main_signed_add_32_8
  %203 = add nsw i32 %196, 2 can share an output register with another operation already assigned to main_signed_add_32_9
  %203 = add nsw i32 %196, 2 can share an output register with another operation already assigned to main_signed_add_32_10
  %203 = add nsw i32 %196, 2 can share an output register with another operation already assigned to main_signed_add_32_11
  %203 = add nsw i32 %196, 2 can share an output register with another operation already assigned to main_signed_add_32_12
  %203 = add nsw i32 %196, 2 can share an output register with another operation already assigned to main_signed_add_32_13
  %203 = add nsw i32 %196, 2 can share an output register with another operation already assigned to main_signed_add_32_14
  %203 = add nsw i32 %196, 2 can share an output register with another operation already assigned to main_signed_add_32_15
  %203 = add nsw i32 %196, 2 can share an output register with another operation already assigned to main_signed_add_32_16
  %203 = add nsw i32 %196, 2 can share an output register with another operation already assigned to main_signed_add_32_17
  %203 = add nsw i32 %196, 2 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %188 = add nsw i32 %184, %18... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -360                          -40                           -40                           -40                           -80                           -70                           -120                          
  %193 = add nsw i32 %192, %18... (idx: 1)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -360                          -40                           -40                           -40                           -80                           -70                           -120                          
  %197 = add nsw i32 %196, 3 (idx: 2)             -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -355                          -35                           -35                           -35                           -75                           -65                           -115                          
  %203 = add nsw i32 %196, 2 (idx: 3)             -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -355                          -35                           -35                           -35                           -75                           -65                           -115                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %188 = add nsw i32 %184, %18... (idx
  %193 = add nsw i32 %192, %18... (idx
  %197 = add nsw i32 %196, 3 (idx
  %203 = add nsw i32 %196, 2 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %188 = add nsw i32 %184, %18... (idx: 0) -> main_signed_add_32_12 (mux inputs: 38)
  %197 = add nsw i32 %196, 3 (idx: 2) -> main_signed_add_32_16 (mux inputs: 9)
  %203 = add nsw i32 %196, 2 (idx: 3) -> main_signed_add_32_17 (mux inputs: 8)
  %193 = add nsw i32 %192, %18... (idx: 1) -> main_signed_add_32_18 (mux inputs: 14)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %194 = sub nsw i32 %80, %193 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %194 = sub nsw i32 %80, %193 can share an output register with another operation already assigned to main_signed_subtract_32_1
  %201 = sub nsw i32 0, %194 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %201 = sub nsw i32 0, %194 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %194 = sub nsw i32 %80, %193 (idx: 0)           -70                           -30                           
  %201 = sub nsw i32 0, %194 (idx: 1)             -65                           -25                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %194 = sub nsw i32 %80, %193 (idx: 0)           1                             0                             
  %201 = sub nsw i32 0, %194 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %194 = sub nsw i32 %80, %193 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 9)
  %201 = sub nsw i32 0, %194 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 4)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: qq2_code2_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_qq2_code2_table_local_mem_dual_port_0
  %205 = load i32* %204, align... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_qq2_code2_table_local_mem_dual_port_0
  %205 = load i32* %204, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %205 = load i32* %204, align... (idx: 0) -> main_qq2_code2_table_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_18
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep21 = add i32 %gep_int19,... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -380                          -40                           -40                           -40                           -90                           -80                           -140                          
  %gep24 = add i32 %gep_int22,... (idx: 1)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -380                          -40                           -40                           -40                           -90                           -80                           -140                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep21 = add i32 %gep_int19,... (idx
  %gep24 = add i32 %gep_int22,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep21 = add i32 %gep_int19,... (idx: 0) -> main_signed_add_32_12 (mux inputs: 40)
  %gep24 = add i32 %gep_int22,... (idx: 1) -> main_signed_add_32_18 (mux inputs: 16)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: wh_code_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_wh_code_table_local_mem_dual_port_0
  %211 = load i32* %210, align... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_wh_code_table_local_mem_dual_port_0
  %211 = load i32* %210, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %211 = load i32* %210, align... (idx: 0) -> main_wh_code_table_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %212 = add nsw i32 %209, %21... can share an output register with another operation already assigned to main_signed_add_32_0
  %212 = add nsw i32 %209, %21... can share an output register with another operation already assigned to main_signed_add_32_1
  %212 = add nsw i32 %209, %21... can share an output register with another operation already assigned to main_signed_add_32_2
  %212 = add nsw i32 %209, %21... can share an output register with another operation already assigned to main_signed_add_32_3
  %212 = add nsw i32 %209, %21... can share an output register with another operation already assigned to main_signed_add_32_4
  %212 = add nsw i32 %209, %21... can share an output register with another operation already assigned to main_signed_add_32_5
  %212 = add nsw i32 %209, %21... can share an output register with another operation already assigned to main_signed_add_32_6
  %212 = add nsw i32 %209, %21... can share an output register with another operation already assigned to main_signed_add_32_7
  %212 = add nsw i32 %209, %21... can share an output register with another operation already assigned to main_signed_add_32_8
  %212 = add nsw i32 %209, %21... can share an output register with another operation already assigned to main_signed_add_32_9
  %212 = add nsw i32 %209, %21... can share an output register with another operation already assigned to main_signed_add_32_10
  %212 = add nsw i32 %209, %21... can share an output register with another operation already assigned to main_signed_add_32_11
  %212 = add nsw i32 %209, %21... can share an output register with another operation already assigned to main_signed_add_32_12
  %212 = add nsw i32 %209, %21... can share an output register with another operation already assigned to main_signed_add_32_13
  %212 = add nsw i32 %209, %21... can share an output register with another operation already assigned to main_signed_add_32_14
  %212 = add nsw i32 %209, %21... can share an output register with another operation already assigned to main_signed_add_32_15
  %212 = add nsw i32 %209, %21... can share an output register with another operation already assigned to main_signed_add_32_16
  %212 = add nsw i32 %209, %21... can share an output register with another operation already assigned to main_signed_add_32_17
  %212 = add nsw i32 %209, %21... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %212 = add nsw i32 %209, %21... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -400                          -40                           -40                           -40                           -90                           -80                           -160                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %212 = add nsw i32 %209, %21... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %212 = add nsw i32 %209, %21... (idx: 0) -> main_signed_add_32_12 (mux inputs: 42)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %206 = mul nsw i32 %205, %de... can share an input with another operation already assigned to main_signed_multiply_32_27
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %206 = mul nsw i32 %205, %de... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %206 = mul nsw i32 %205, %de... (idx: 0)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -320                          -50                           -10                           -20                           -20                           -5                            -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %206 = mul nsw i32 %205, %de... (idx: 0)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %206 = mul nsw i32 %205, %de... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 34)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %220 = sub i32 11, %217 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %220 = sub i32 11, %217 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %220 = sub i32 11, %217 (idx: 0)                -85                           -35                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %220 = sub i32 11, %217 (idx: 0)                1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %220 = sub i32 11, %217 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 10)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %223 = add nsw i32 %189, %20... can share an output register with another operation already assigned to main_signed_add_32_12
  %223 = add nsw i32 %189, %20... can share an input with another operation already assigned to main_signed_add_32_18
  %247 = add nsw i32 %207, %19... can share an output register with another operation already assigned to main_signed_add_32_0
  %247 = add nsw i32 %207, %19... can share an output register with another operation already assigned to main_signed_add_32_1
  %247 = add nsw i32 %207, %19... can share an output register with another operation already assigned to main_signed_add_32_2
  %247 = add nsw i32 %207, %19... can share an output register with another operation already assigned to main_signed_add_32_3
  %247 = add nsw i32 %207, %19... can share an output register with another operation already assigned to main_signed_add_32_4
  %247 = add nsw i32 %207, %19... can share an output register with another operation already assigned to main_signed_add_32_5
  %247 = add nsw i32 %207, %19... can share an output register with another operation already assigned to main_signed_add_32_6
  %247 = add nsw i32 %207, %19... can share an output register with another operation already assigned to main_signed_add_32_7
  %247 = add nsw i32 %207, %19... can share an output register with another operation already assigned to main_signed_add_32_8
  %247 = add nsw i32 %207, %19... can share an output register with another operation already assigned to main_signed_add_32_9
  %247 = add nsw i32 %207, %19... can share an output register with another operation already assigned to main_signed_add_32_10
  %247 = add nsw i32 %207, %19... can share an output register with another operation already assigned to main_signed_add_32_11
  %247 = add nsw i32 %207, %19... can share an output register with another operation already assigned to main_signed_add_32_12
  %247 = add nsw i32 %207, %19... can share an output register with another operation already assigned to main_signed_add_32_13
  %247 = add nsw i32 %207, %19... can share an output register with another operation already assigned to main_signed_add_32_14
  %247 = add nsw i32 %207, %19... can share an output register with another operation already assigned to main_signed_add_32_15
  %247 = add nsw i32 %207, %19... can share an output register with another operation already assigned to main_signed_add_32_16
  %247 = add nsw i32 %207, %19... can share an output register with another operation already assigned to main_signed_add_32_17
  %247 = add nsw i32 %207, %19... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %223 = add nsw i32 %189, %20... (idx: 0)        -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -420                          -50                           -50                           -50                           -100                          -90                           -165                          
  %247 = add nsw i32 %207, %19... (idx: 1)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -420                          -40                           -40                           -40                           -90                           -80                           -160                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %223 = add nsw i32 %189, %20... (idx
  %247 = add nsw i32 %207, %19... (idx: 1)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %247 = add nsw i32 %207, %19... (idx: 1) -> main_signed_add_32_12 (mux inputs: 44)
  %223 = add nsw i32 %189, %20... (idx: 0) -> main_signed_add_32_18 (mux inputs: 17)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %225 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %229 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %225 = mul nsw i32 %ph1.0, %... (idx: 0)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -340                          -50                           -10                           -20                           -20                           -10                           -10                           -10                           -10                           
  %229 = mul nsw i32 %ph2.0, %... (idx: 1)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -340                          -50                           -10                           -20                           -20                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %225 = mul nsw i32 %ph1.0, %... (idx
  %229 = mul nsw i32 %ph2.0, %... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %225 = mul nsw i32 %ph1.0, %... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 36)
  %229 = mul nsw i32 %ph2.0, %... (idx: 1) -> main_signed_multiply_32_23 (mux inputs: 7)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: ilb_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %219 = load i32* %218, align... can share an output register with another operation already assigned to main_ilb_table_local_mem_dual_port_0
                                                  main_ilb_table_local_mem_dual_port_0
  %219 = load i32* %218, align... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_ilb_table_local_mem_dual_port_0
  %219 = load i32* %218, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %219 = load i32* %218, align... (idx: 0) -> main_ilb_table_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_18
  %wd4.0.i.i17 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_0
  %wd4.0.i.i17 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_1
  %wd4.0.i.i17 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_2
  %wd4.0.i.i17 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_3
  %wd4.0.i.i17 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_4
  %wd4.0.i.i17 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_5
  %wd4.0.i.i17 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_6
  %wd4.0.i.i17 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_7
  %wd4.0.i.i17 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_8
  %wd4.0.i.i17 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_9
  %wd4.0.i.i17 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_10
  %wd4.0.i.i17 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_11
  %wd4.0.i.i17 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_12
  %wd4.0.i.i17 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_13
  %wd4.0.i.i17 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_14
  %wd4.0.i.i17 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_15
  %wd4.0.i.i17 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_16
  %wd4.0.i.i17 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_17
  %wd4.0.i.i17 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_18
  %235 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_0
  %235 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_1
  %235 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_2
  %235 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_3
  %235 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_4
  %235 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_5
  %235 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_6
  %235 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_7
  %235 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_8
  %235 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_9
  %235 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_10
  %235 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_11
  %235 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_12
  %235 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_13
  %235 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_14
  %235 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_15
  %235 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_16
  %235 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_17
  %235 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_18
  %apl1.0.i.i20 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_0
  %apl1.0.i.i20 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_1
  %apl1.0.i.i20 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_2
  %apl1.0.i.i20 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_3
  %apl1.0.i.i20 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_4
  %apl1.0.i.i20 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_5
  %apl1.0.i.i20 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_6
  %apl1.0.i.i20 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_7
  %apl1.0.i.i20 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_8
  %apl1.0.i.i20 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_9
  %apl1.0.i.i20 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_10
  %apl1.0.i.i20 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_11
  %apl1.0.i.i20 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_12
  %apl1.0.i.i20 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_13
  %apl1.0.i.i20 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_14
  %apl1.0.i.i20 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_15
  %apl1.0.i.i20 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_16
  %apl1.0.i.i20 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_17
  %apl1.0.i.i20 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep27 = add i32 %gep_int25,... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -440                          -40                           -40                           -40                           -90                           -80                           -170                          
  %wd4.0.i.i17 = add nsw i32 %... (idx: 1)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -440                          -40                           -40                           -40                           -90                           -80                           -170                          
  %235 = add nsw i32 %wd4.0.i.... (idx: 2)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -440                          -40                           -40                           -40                           -90                           -80                           -170                          
  %apl1.0.i.i20 = add nsw i32 ... (idx: 3)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -440                          -40                           -40                           -40                           -90                           -80                           -170                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep27 = add i32 %gep_int25,... (idx
  %wd4.0.i.i17 = add nsw i32 %... (idx
  %235 = add nsw i32 %wd4.0.i.... (idx
  %apl1.0.i.i20 = add nsw i32 ... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep27 = add i32 %gep_int25,... (idx: 0) -> main_signed_add_32_12 (mux inputs: 46)
  %235 = add nsw i32 %wd4.0.i.... (idx: 2) -> main_signed_add_32_16 (mux inputs: 11)
  %apl1.0.i.i20 = add nsw i32 ... (idx: 3) -> main_signed_add_32_17 (mux inputs: 10)
  %wd4.0.i.i17 = add nsw i32 %... (idx: 1) -> main_signed_add_32_18 (mux inputs: 19)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %243 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_0
  %243 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_1
  %245 = sub nsw i32 0, %243 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %245 = sub nsw i32 0, %243 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %243 = sub nsw i32 15360, %.... (idx: 0)        -95                           -35                           
  %245 = sub nsw i32 0, %243 (idx: 1)             -95                           -35                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %243 = sub nsw i32 15360, %.... (idx: 0)        1                             0                             
  %245 = sub nsw i32 0, %243 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %243 = sub nsw i32 15360, %.... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 11)
  %245 = sub nsw i32 0, %243 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 5)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep30 = add i32 %gep_int28,... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -460                          -40                           -40                           -40                           -110                          -100                          -190                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep30 = add i32 %gep_int28,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep30 = add i32 %gep_int28,... (idx: 0) -> main_signed_add_32_12 (mux inputs: 48)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre = load i32* getelement... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre = load i32* getelement... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre37 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre37 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre = load i32* getelement... (idx: 0)        -110                          -110                          
  %.pre37 = load i32* geteleme... (idx: 1)        -110                          -110                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre = load i32* getelement... (idx: 0)        1                             0                             
  %.pre37 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre = load i32* getelement... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre37 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre38 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre38 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre39 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre39 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre38 = load i32* geteleme... (idx: 0)        -110                          -110                          
  %.pre39 = load i32* geteleme... (idx: 1)        -110                          -110                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre38 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre39 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre38 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre39 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre40 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre40 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre41 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre41 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre40 = load i32* geteleme... (idx: 0)        -110                          -110                          
  %.pre41 = load i32* geteleme... (idx: 1)        -110                          -110                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre40 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre41 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre40 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre41 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre42 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre42 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre43 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre43 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre42 = load i32* geteleme... (idx: 0)        -110                          -110                          
  %.pre43 = load i32* geteleme... (idx: 1)        -110                          -110                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre42 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre43 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre42 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre43 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre44 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre44 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre45 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre45 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre44 = load i32* geteleme... (idx: 0)        -110                          -110                          
  %.pre45 = load i32* geteleme... (idx: 1)        -110                          -110                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre44 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre45 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre44 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre45 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre46 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre46 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre47 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre47 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre46 = load i32* geteleme... (idx: 0)        -110                          -110                          
  %.pre47 = load i32* geteleme... (idx: 1)        -110                          -110                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre46 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre47 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre46 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre47 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre48 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre48 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre49 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre49 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre48 = load i32* geteleme... (idx: 0)        -110                          -110                          
  %.pre49 = load i32* geteleme... (idx: 1)        -110                          -110                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre48 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre49 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre48 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre49 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre50 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre50 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre51 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre51 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre50 = load i32* geteleme... (idx: 0)        -110                          -110                          
  %.pre51 = load i32* geteleme... (idx: 1)        -110                          -110                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre50 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre51 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre50 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre51 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre52 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre52 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre53 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre53 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre52 = load i32* geteleme... (idx: 0)        -110                          -110                          
  %.pre53 = load i32* geteleme... (idx: 1)        -110                          -110                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre52 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre53 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre52 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre53 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre54 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre54 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre55 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre55 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre54 = load i32* geteleme... (idx: 0)        -110                          -110                          
  %.pre55 = load i32* geteleme... (idx: 1)        -110                          -110                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre54 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre55 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre54 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre55 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre56 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre56 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre57 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre57 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre56 = load i32* geteleme... (idx: 0)        -110                          -110                          
  %.pre57 = load i32* geteleme... (idx: 1)        -110                          -110                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre56 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre57 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre56 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre57 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre58 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre58 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre59 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre59 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre58 = load i32* geteleme... (idx: 0)        -110                          -110                          
  %.pre59 = load i32* geteleme... (idx: 1)        -110                          -110                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre58 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre59 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre58 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre59 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_preheaderipreheader
Binding functional unit type: qq6_code6_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_qq6_code6_table_local_mem_dual_port_0
  %255 = load i32* %254, align... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_qq6_code6_table_local_mem_dual_port_0
  %255 = load i32* %254, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %255 = load i32* %254, align... (idx: 0) -> main_qq6_code6_table_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_preheaderipreheader
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep33 = add i32 %gep_int31,... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -480                          -40                           -40                           -40                           -110                          -100                          -190                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep33 = add i32 %gep_int31,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep33 = add i32 %gep_int31,... (idx: 0) -> main_signed_add_32_12 (mux inputs: 50)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %261 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %261 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %262 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %262 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %261 = load i32* getelementp... (idx: 0)        0                             10                            
  %262 = load i32* getelementp... (idx: 1)        0                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %261 = load i32* getelementp... (idx: 0)        1                             0                             
  %262 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %261 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %262 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %462 = add nsw i32 %i.11.i, ... (idx: 0)        -25                           -25                           -25                           -25                           -25                           -25                           -25                           -25                           -25                           -25                           -25                           -25                           -505                          -45                           -45                           -45                           -115                          -105                          -195                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %462 = add nsw i32 %i.11.i, ... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %462 = add nsw i32 %i.11.i, ... (idx: 0) -> main_signed_add_32_12 (mux inputs: 51)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_divide_32
Weight matrix for operation/function unit matching:
  %256 = sdiv i32 %i.11.i, 2 can share an output register with another operation already assigned to main_signed_divide_32_0
                                                  main_signed_divide_32_0       
  %256 = sdiv i32 %i.11.i, 2 (idx: 0)             -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_divide_32_0       
  %256 = sdiv i32 %i.11.i, 2 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %256 = sdiv i32 %i.11.i, 2 (idx: 0) -> main_signed_divide_32_0 (mux inputs: 2)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %285 = mul i32 %dec_al1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %286 = mul i32 %dec_al2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %294 = mul nsw i32 %255, %de... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %297 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %322 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %327 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %361 = mul i32 %dec_ah1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %362 = mul i32 %dec_ah2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %369 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %394 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %399 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %413 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %415 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %417 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %419 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %423 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %425 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %427 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %429 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %431 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %433 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %435 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %437 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %439 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %441 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %445 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %447 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %449 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %451 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %453 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %455 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %285 = mul i32 %dec_al1.0, %... (idx: 0)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -360                          -70                           -10                           -20                           -20                           -10                           -10                           -10                           -10                           
  %286 = mul i32 %dec_al2.0, %... (idx: 1)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -360                          -70                           -10                           -20                           -20                           -10                           -10                           -10                           -10                           
  %294 = mul nsw i32 %255, %de... (idx: 2)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -360                          -70                           -10                           -20                           -20                           -10                           -10                           -10                           -10                           
  %297 = mul nsw i32 %dec_nbl.... (idx
  %322 = mul nsw i32 %dec_al2.... (idx
  %327 = mul nsw i32 %dec_al1.... (idx: 5)        -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -355                          -65                           -5                            -15                           -15                           -5                            -5                            -5                            -5                            
  %361 = mul i32 %dec_ah1.0, %... (idx: 6)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -360                          -70                           -10                           -20                           -20                           -10                           -10                           -10                           -10                           
  %362 = mul i32 %dec_ah2.0, %... (idx: 7)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -360                          -70                           -10                           -20                           -20                           -10                           -10                           -10                           -10                           
  %369 = mul nsw i32 %dec_nbh.... (idx
  %394 = mul nsw i32 %dec_ah2.... (idx: 9)        -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -5                            -355                          -65                           -5                            -15                           -15                           -5                            -5                            -5                            -5                            
  %399 = mul nsw i32 %dec_ah1.... (idx
  %413 = mul nsw i32 %accumc.0... (idx
  %415 = mul nsw i32 %accumd.0... (idx
  %417 = mul nsw i32 %accumc.1... (idx
  %419 = mul nsw i32 %accumd.1... (idx
  %423 = mul nsw i32 %accumd.2... (idx
  %425 = mul nsw i32 %accumc.3... (idx
  %427 = mul nsw i32 %accumd.3... (idx
  %429 = mul nsw i32 %accumc.4... (idx
  %431 = mul nsw i32 %accumd.4... (idx
  %433 = mul nsw i32 %accumc.5... (idx
  %435 = mul nsw i32 %accumd.5... (idx
  %437 = mul nsw i32 %accumc.6... (idx
  %439 = mul nsw i32 %accumd.6... (idx
  %441 = mul nsw i32 %accumc.7... (idx
  %445 = mul nsw i32 %accumc.8... (idx
  %447 = mul nsw i32 %accumd.8... (idx
  %449 = mul nsw i32 %accumc.9... (idx
  %451 = mul nsw i32 %accumd.9... (idx
  %453 = mul nsw i32 %accumc.1... (idx
  %455 = mul nsw i32 %accumd.1... (idx
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %285 = mul i32 %dec_al1.0, %... (idx
  %286 = mul i32 %dec_al2.0, %... (idx
  %294 = mul nsw i32 %255, %de... (idx
  %297 = mul nsw i32 %dec_nbl.... (idx
  %322 = mul nsw i32 %dec_al2.... (idx
  %327 = mul nsw i32 %dec_al1.... (idx
  %361 = mul i32 %dec_ah1.0, %... (idx
  %362 = mul i32 %dec_ah2.0, %... (idx
  %369 = mul nsw i32 %dec_nbh.... (idx
  %394 = mul nsw i32 %dec_ah2.... (idx
  %399 = mul nsw i32 %dec_ah1.... (idx
  %413 = mul nsw i32 %accumc.0... (idx
  %415 = mul nsw i32 %accumd.0... (idx
  %417 = mul nsw i32 %accumc.1... (idx: 13)       0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %419 = mul nsw i32 %accumd.1... (idx
  %423 = mul nsw i32 %accumd.2... (idx
  %425 = mul nsw i32 %accumc.3... (idx
  %427 = mul nsw i32 %accumd.3... (idx
  %429 = mul nsw i32 %accumc.4... (idx
  %431 = mul nsw i32 %accumd.4... (idx
  %433 = mul nsw i32 %accumc.5... (idx: 20)       0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %435 = mul nsw i32 %accumd.5... (idx
  %437 = mul nsw i32 %accumc.6... (idx
  %439 = mul nsw i32 %accumd.6... (idx
  %441 = mul nsw i32 %accumc.7... (idx
  %445 = mul nsw i32 %accumc.8... (idx
  %447 = mul nsw i32 %accumd.8... (idx
  %449 = mul nsw i32 %accumc.9... (idx
  %451 = mul nsw i32 %accumd.9... (idx
  %453 = mul nsw i32 %accumc.1... (idx
  %455 = mul nsw i32 %accumd.1... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %285 = mul i32 %dec_al1.0, %... (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 3)
  %286 = mul i32 %dec_al2.0, %... (idx: 1) -> main_signed_multiply_32_1 (mux inputs: 3)
  %294 = mul nsw i32 %255, %de... (idx: 2) -> main_signed_multiply_32_2 (mux inputs: 3)
  %297 = mul nsw i32 %dec_nbl.... (idx: 3) -> main_signed_multiply_32_3 (mux inputs: 2)
  %322 = mul nsw i32 %dec_al2.... (idx: 4) -> main_signed_multiply_32_4 (mux inputs: 2)
  %327 = mul nsw i32 %dec_al1.... (idx: 5) -> main_signed_multiply_32_5 (mux inputs: 2)
  %361 = mul i32 %dec_ah1.0, %... (idx: 6) -> main_signed_multiply_32_6 (mux inputs: 3)
  %362 = mul i32 %dec_ah2.0, %... (idx: 7) -> main_signed_multiply_32_7 (mux inputs: 3)
  %369 = mul nsw i32 %dec_nbh.... (idx: 8) -> main_signed_multiply_32_8 (mux inputs: 2)
  %394 = mul nsw i32 %dec_ah2.... (idx: 9) -> main_signed_multiply_32_9 (mux inputs: 2)
  %399 = mul nsw i32 %dec_ah1.... (idx: 10) -> main_signed_multiply_32_10 (mux inputs: 2)
  %413 = mul nsw i32 %accumc.0... (idx: 11) -> main_signed_multiply_32_11 (mux inputs: 2)
  %415 = mul nsw i32 %accumd.0... (idx: 12) -> main_signed_multiply_32_12 (mux inputs: 2)
  %417 = mul nsw i32 %accumc.1... (idx: 13) -> main_signed_multiply_32_13 (mux inputs: 2)
  %419 = mul nsw i32 %accumd.1... (idx: 14) -> main_signed_multiply_32_14 (mux inputs: 2)
  %423 = mul nsw i32 %accumd.2... (idx: 15) -> main_signed_multiply_32_15 (mux inputs: 2)
  %425 = mul nsw i32 %accumc.3... (idx: 16) -> main_signed_multiply_32_16 (mux inputs: 2)
  %427 = mul nsw i32 %accumd.3... (idx: 17) -> main_signed_multiply_32_17 (mux inputs: 2)
  %429 = mul nsw i32 %accumc.4... (idx: 18) -> main_signed_multiply_32_18 (mux inputs: 2)
  %431 = mul nsw i32 %accumd.4... (idx: 19) -> main_signed_multiply_32_19 (mux inputs: 2)
  %433 = mul nsw i32 %accumc.5... (idx: 20) -> main_signed_multiply_32_20 (mux inputs: 2)
  %435 = mul nsw i32 %accumd.5... (idx: 21) -> main_signed_multiply_32_21 (mux inputs: 2)
  %437 = mul nsw i32 %accumc.6... (idx: 22) -> main_signed_multiply_32_22 (mux inputs: 37)
  %439 = mul nsw i32 %accumd.6... (idx: 23) -> main_signed_multiply_32_23 (mux inputs: 8)
  %441 = mul nsw i32 %accumc.7... (idx: 24) -> main_signed_multiply_32_24 (mux inputs: 2)
  %445 = mul nsw i32 %accumc.8... (idx: 25) -> main_signed_multiply_32_25 (mux inputs: 3)
  %447 = mul nsw i32 %accumd.8... (idx: 26) -> main_signed_multiply_32_26 (mux inputs: 3)
  %449 = mul nsw i32 %accumc.9... (idx: 27) -> main_signed_multiply_32_27 (mux inputs: 2)
  %451 = mul nsw i32 %accumd.9... (idx: 28) -> main_signed_multiply_32_28 (mux inputs: 2)
  %453 = mul nsw i32 %accumc.1... (idx: 29) -> main_signed_multiply_32_29 (mux inputs: 2)
  %455 = mul nsw i32 %accumd.1... (idx: 30) -> main_signed_multiply_32_30 (mux inputs: 2)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %316 = sub nsw i32 0, %313 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %316 = sub nsw i32 0, %313 can share an output register with another operation already assigned to main_signed_subtract_32_1
  %388 = sub nsw i32 0, %385 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %388 = sub nsw i32 0, %385 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %316 = sub nsw i32 0, %313 (idx: 0)             -105                          -45                           
  %388 = sub nsw i32 0, %385 (idx: 1)             -105                          -45                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %316 = sub nsw i32 0, %313 (idx: 0)             1                             0                             
  %388 = sub nsw i32 0, %385 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %316 = sub nsw i32 0, %313 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 12)
  %388 = sub nsw i32 0, %385 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 6)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %264 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %264 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %265 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %265 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %264 = load i32* getelementp... (idx: 0)        0                             10                            
  %265 = load i32* getelementp... (idx: 1)        0                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %264 = load i32* getelementp... (idx: 0)        1                             0                             
  %265 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %264 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %265 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %tmp.i.i = add i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_0
  %tmp.i.i = add i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_1
  %tmp.i.i = add i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_2
  %tmp.i.i = add i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_3
  %tmp.i.i = add i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_4
  %tmp.i.i = add i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_5
  %tmp.i.i = add i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_6
  %tmp.i.i = add i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_7
  %tmp.i.i = add i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_8
  %tmp.i.i = add i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_9
  %tmp.i.i = add i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_10
  %tmp.i.i = add i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_11
  %tmp.i.i = add i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_12
  %tmp.i.i = add i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_13
  %tmp.i.i = add i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_14
  %tmp.i.i = add i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_15
  %tmp.i.i = add i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_16
  %tmp.i.i = add i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_17
  %tmp.i.i = add i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_18
  %331 = add nsw i32 %328, 192 can share an output register with another operation already assigned to main_signed_add_32_0
  %331 = add nsw i32 %328, 192 can share an output register with another operation already assigned to main_signed_add_32_1
  %331 = add nsw i32 %328, 192 can share an output register with another operation already assigned to main_signed_add_32_2
  %331 = add nsw i32 %328, 192 can share an output register with another operation already assigned to main_signed_add_32_3
  %331 = add nsw i32 %328, 192 can share an output register with another operation already assigned to main_signed_add_32_4
  %331 = add nsw i32 %328, 192 can share an output register with another operation already assigned to main_signed_add_32_5
  %331 = add nsw i32 %328, 192 can share an output register with another operation already assigned to main_signed_add_32_6
  %331 = add nsw i32 %328, 192 can share an output register with another operation already assigned to main_signed_add_32_7
  %331 = add nsw i32 %328, 192 can share an output register with another operation already assigned to main_signed_add_32_8
  %331 = add nsw i32 %328, 192 can share an output register with another operation already assigned to main_signed_add_32_9
  %331 = add nsw i32 %328, 192 can share an output register with another operation already assigned to main_signed_add_32_10
  %331 = add nsw i32 %328, 192 can share an output register with another operation already assigned to main_signed_add_32_11
  %331 = add nsw i32 %328, 192 can share an output register with another operation already assigned to main_signed_add_32_12
  %331 = add nsw i32 %328, 192 can share an output register with another operation already assigned to main_signed_add_32_13
  %331 = add nsw i32 %328, 192 can share an output register with another operation already assigned to main_signed_add_32_14
  %331 = add nsw i32 %328, 192 can share an output register with another operation already assigned to main_signed_add_32_15
  %331 = add nsw i32 %328, 192 can share an output register with another operation already assigned to main_signed_add_32_16
  %331 = add nsw i32 %328, 192 can share an output register with another operation already assigned to main_signed_add_32_17
  %331 = add nsw i32 %328, 192 can share an output register with another operation already assigned to main_signed_add_32_18
  %tmp.i3.i = add i32 %362, %3... can share an output register with another operation already assigned to main_signed_add_32_0
  %tmp.i3.i = add i32 %362, %3... can share an output register with another operation already assigned to main_signed_add_32_1
  %tmp.i3.i = add i32 %362, %3... can share an output register with another operation already assigned to main_signed_add_32_2
  %tmp.i3.i = add i32 %362, %3... can share an output register with another operation already assigned to main_signed_add_32_3
  %tmp.i3.i = add i32 %362, %3... can share an output register with another operation already assigned to main_signed_add_32_4
  %tmp.i3.i = add i32 %362, %3... can share an output register with another operation already assigned to main_signed_add_32_5
  %tmp.i3.i = add i32 %362, %3... can share an output register with another operation already assigned to main_signed_add_32_6
  %tmp.i3.i = add i32 %362, %3... can share an output register with another operation already assigned to main_signed_add_32_7
  %tmp.i3.i = add i32 %362, %3... can share an output register with another operation already assigned to main_signed_add_32_8
  %tmp.i3.i = add i32 %362, %3... can share an output register with another operation already assigned to main_signed_add_32_9
  %tmp.i3.i = add i32 %362, %3... can share an output register with another operation already assigned to main_signed_add_32_10
  %tmp.i3.i = add i32 %362, %3... can share an output register with another operation already assigned to main_signed_add_32_11
  %tmp.i3.i = add i32 %362, %3... can share an output register with another operation already assigned to main_signed_add_32_12
  %tmp.i3.i = add i32 %362, %3... can share an output register with another operation already assigned to main_signed_add_32_13
  %tmp.i3.i = add i32 %362, %3... can share an output register with another operation already assigned to main_signed_add_32_14
  %tmp.i3.i = add i32 %362, %3... can share an output register with another operation already assigned to main_signed_add_32_15
  %tmp.i3.i = add i32 %362, %3... can share an output register with another operation already assigned to main_signed_add_32_16
  %tmp.i3.i = add i32 %362, %3... can share an output register with another operation already assigned to main_signed_add_32_17
  %tmp.i3.i = add i32 %362, %3... can share an output register with another operation already assigned to main_signed_add_32_18
  %403 = add nsw i32 %400, 192 can share an output register with another operation already assigned to main_signed_add_32_0
  %403 = add nsw i32 %400, 192 can share an output register with another operation already assigned to main_signed_add_32_1
  %403 = add nsw i32 %400, 192 can share an output register with another operation already assigned to main_signed_add_32_2
  %403 = add nsw i32 %400, 192 can share an output register with another operation already assigned to main_signed_add_32_3
  %403 = add nsw i32 %400, 192 can share an output register with another operation already assigned to main_signed_add_32_4
  %403 = add nsw i32 %400, 192 can share an output register with another operation already assigned to main_signed_add_32_5
  %403 = add nsw i32 %400, 192 can share an output register with another operation already assigned to main_signed_add_32_6
  %403 = add nsw i32 %400, 192 can share an output register with another operation already assigned to main_signed_add_32_7
  %403 = add nsw i32 %400, 192 can share an output register with another operation already assigned to main_signed_add_32_8
  %403 = add nsw i32 %400, 192 can share an output register with another operation already assigned to main_signed_add_32_9
  %403 = add nsw i32 %400, 192 can share an output register with another operation already assigned to main_signed_add_32_10
  %403 = add nsw i32 %400, 192 can share an output register with another operation already assigned to main_signed_add_32_11
  %403 = add nsw i32 %400, 192 can share an output register with another operation already assigned to main_signed_add_32_12
  %403 = add nsw i32 %400, 192 can share an output register with another operation already assigned to main_signed_add_32_13
  %403 = add nsw i32 %400, 192 can share an output register with another operation already assigned to main_signed_add_32_14
  %403 = add nsw i32 %400, 192 can share an output register with another operation already assigned to main_signed_add_32_15
  %403 = add nsw i32 %400, 192 can share an output register with another operation already assigned to main_signed_add_32_16
  %403 = add nsw i32 %400, 192 can share an output register with another operation already assigned to main_signed_add_32_17
  %403 = add nsw i32 %400, 192 can share an output register with another operation already assigned to main_signed_add_32_18
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_18
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %tmp.i.i = add i32 %286, %28... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -510                          -40                           -40                           -40                           -110                          -100                          -190                          
  %331 = add nsw i32 %328, 192 (idx: 1)           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -505                          -35                           -35                           -35                           -105                          -95                           -185                          
  %tmp.i3.i = add i32 %362, %3... (idx: 2)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -510                          -40                           -40                           -40                           -110                          -100                          -190                          
  %403 = add nsw i32 %400, 192 (idx: 3)           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -505                          -35                           -35                           -35                           -105                          -95                           -185                          
  %gep57 = add i32 %gep_int55,... (idx: 4)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -510                          -40                           -40                           -40                           -110                          -100                          -190                          
  %gep60 = add i32 %gep_int58,... (idx: 5)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -510                          -40                           -40                           -40                           -110                          -100                          -190                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %tmp.i.i = add i32 %286, %28... (idx
  %331 = add nsw i32 %328, 192 (idx
  %tmp.i3.i = add i32 %362, %3... (idx
  %403 = add nsw i32 %400, 192 (idx
  %gep57 = add i32 %gep_int55,... (idx
  %gep60 = add i32 %gep_int58,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %tmp.i.i = add i32 %286, %28... (idx: 0) -> main_signed_add_32_12 (mux inputs: 53)
  %gep57 = add i32 %gep_int55,... (idx: 4) -> main_signed_add_32_14 (mux inputs: 6)
  %gep60 = add i32 %gep_int58,... (idx: 5) -> main_signed_add_32_15 (mux inputs: 6)
  %tmp.i3.i = add i32 %362, %3... (idx: 2) -> main_signed_add_32_16 (mux inputs: 13)
  %403 = add nsw i32 %400, 192 (idx: 3) -> main_signed_add_32_17 (mux inputs: 11)
  %331 = add nsw i32 %328, 192 (idx: 1) -> main_signed_add_32_18 (mux inputs: 20)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %268 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %268 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %269 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %269 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %268 = load i32* getelementp... (idx: 0)        0                             10                            
  %269 = load i32* getelementp... (idx: 1)        0                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %268 = load i32* getelementp... (idx: 0)        1                             0                             
  %269 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %268 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %269 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %263 = mul nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %263 = mul nsw i32 %262, %26... (idx: 0)        -30                           -30                           -30                           -20                           -20                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -370                          -80                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %263 = mul nsw i32 %262, %26... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %263 = mul nsw i32 %262, %26... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 39)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %272 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %272 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %273 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %273 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %272 = load i32* getelementp... (idx: 0)        0                             10                            
  %273 = load i32* getelementp... (idx: 1)        0                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %272 = load i32* getelementp... (idx: 0)        1                             0                             
  %273 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %272 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %273 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %266 = mul nsw i32 %265, %26... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %266 = mul nsw i32 %265, %26... (idx: 0)        -30                           -30                           -30                           -20                           -20                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -390                          -80                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %266 = mul nsw i32 %265, %26... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %266 = mul nsw i32 %265, %26... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 41)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %276 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %276 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %277 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %277 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %276 = load i32* getelementp... (idx: 0)        0                             10                            
  %277 = load i32* getelementp... (idx: 1)        0                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %276 = load i32* getelementp... (idx: 0)        1                             0                             
  %277 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %276 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %277 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %267 = add nsw i32 %266, %26... can share an output register with another operation already assigned to main_signed_add_32_0
  %267 = add nsw i32 %266, %26... can share an output register with another operation already assigned to main_signed_add_32_1
  %267 = add nsw i32 %266, %26... can share an output register with another operation already assigned to main_signed_add_32_2
  %267 = add nsw i32 %266, %26... can share an output register with another operation already assigned to main_signed_add_32_3
  %267 = add nsw i32 %266, %26... can share an output register with another operation already assigned to main_signed_add_32_4
  %267 = add nsw i32 %266, %26... can share an output register with another operation already assigned to main_signed_add_32_5
  %267 = add nsw i32 %266, %26... can share an output register with another operation already assigned to main_signed_add_32_6
  %267 = add nsw i32 %266, %26... can share an output register with another operation already assigned to main_signed_add_32_7
  %267 = add nsw i32 %266, %26... can share an output register with another operation already assigned to main_signed_add_32_8
  %267 = add nsw i32 %266, %26... can share an output register with another operation already assigned to main_signed_add_32_9
  %267 = add nsw i32 %266, %26... can share an output register with another operation already assigned to main_signed_add_32_10
  %267 = add nsw i32 %266, %26... can share an output register with another operation already assigned to main_signed_add_32_11
  %267 = add nsw i32 %266, %26... can share an output register with another operation already assigned to main_signed_add_32_12
  %267 = add nsw i32 %266, %26... can share an output register with another operation already assigned to main_signed_add_32_13
  %267 = add nsw i32 %266, %26... can share an output register with another operation already assigned to main_signed_add_32_14
  %267 = add nsw i32 %266, %26... can share an output register with another operation already assigned to main_signed_add_32_15
  %267 = add nsw i32 %266, %26... can share an output register with another operation already assigned to main_signed_add_32_16
  %267 = add nsw i32 %266, %26... can share an output register with another operation already assigned to main_signed_add_32_17
  %267 = add nsw i32 %266, %26... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %267 = add nsw i32 %266, %26... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -530                          -40                           -60                           -60                           -130                          -110                          -200                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %267 = add nsw i32 %266, %26... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %267 = add nsw i32 %266, %26... (idx: 0) -> main_signed_add_32_12 (mux inputs: 55)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %270 = mul nsw i32 %269, %26... (idx: 0)        -30                           -30                           -30                           -20                           -20                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -410                          -80                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %270 = mul nsw i32 %269, %26... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %270 = mul nsw i32 %269, %26... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 43)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %280 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %280 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %281 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %281 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %280 = load i32* getelementp... (idx: 0)        0                             10                            
  %281 = load i32* getelementp... (idx: 1)        0                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %280 = load i32* getelementp... (idx: 0)        1                             0                             
  %281 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %280 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %281 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %271 = add nsw i32 %267, %27... can share an output register with another operation already assigned to main_signed_add_32_0
  %271 = add nsw i32 %267, %27... can share an output register with another operation already assigned to main_signed_add_32_1
  %271 = add nsw i32 %267, %27... can share an output register with another operation already assigned to main_signed_add_32_2
  %271 = add nsw i32 %267, %27... can share an output register with another operation already assigned to main_signed_add_32_3
  %271 = add nsw i32 %267, %27... can share an output register with another operation already assigned to main_signed_add_32_4
  %271 = add nsw i32 %267, %27... can share an output register with another operation already assigned to main_signed_add_32_5
  %271 = add nsw i32 %267, %27... can share an output register with another operation already assigned to main_signed_add_32_6
  %271 = add nsw i32 %267, %27... can share an output register with another operation already assigned to main_signed_add_32_7
  %271 = add nsw i32 %267, %27... can share an output register with another operation already assigned to main_signed_add_32_8
  %271 = add nsw i32 %267, %27... can share an output register with another operation already assigned to main_signed_add_32_9
  %271 = add nsw i32 %267, %27... can share an output register with another operation already assigned to main_signed_add_32_10
  %271 = add nsw i32 %267, %27... can share an output register with another operation already assigned to main_signed_add_32_11
  %271 = add nsw i32 %267, %27... can share an output register with another operation already assigned to main_signed_add_32_12
  %271 = add nsw i32 %267, %27... can share an output register with another operation already assigned to main_signed_add_32_13
  %271 = add nsw i32 %267, %27... can share an output register with another operation already assigned to main_signed_add_32_14
  %271 = add nsw i32 %267, %27... can share an output register with another operation already assigned to main_signed_add_32_15
  %271 = add nsw i32 %267, %27... can share an output register with another operation already assigned to main_signed_add_32_16
  %271 = add nsw i32 %267, %27... can share an output register with another operation already assigned to main_signed_add_32_17
  %271 = add nsw i32 %267, %27... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %271 = add nsw i32 %267, %27... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -550                          -40                           -60                           -60                           -130                          -110                          -200                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %271 = add nsw i32 %267, %27... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %271 = add nsw i32 %267, %27... (idx: 0) -> main_signed_add_32_12 (mux inputs: 57)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %274 = mul nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %274 = mul nsw i32 %273, %27... (idx: 0)        -30                           -30                           -30                           -20                           -20                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -430                          -80                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %274 = mul nsw i32 %273, %27... (idx: 0)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %274 = mul nsw i32 %273, %27... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 45)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %275 = add nsw i32 %271, %27... can share an output register with another operation already assigned to main_signed_add_32_0
  %275 = add nsw i32 %271, %27... can share an output register with another operation already assigned to main_signed_add_32_1
  %275 = add nsw i32 %271, %27... can share an output register with another operation already assigned to main_signed_add_32_2
  %275 = add nsw i32 %271, %27... can share an output register with another operation already assigned to main_signed_add_32_3
  %275 = add nsw i32 %271, %27... can share an output register with another operation already assigned to main_signed_add_32_4
  %275 = add nsw i32 %271, %27... can share an output register with another operation already assigned to main_signed_add_32_5
  %275 = add nsw i32 %271, %27... can share an output register with another operation already assigned to main_signed_add_32_6
  %275 = add nsw i32 %271, %27... can share an output register with another operation already assigned to main_signed_add_32_7
  %275 = add nsw i32 %271, %27... can share an output register with another operation already assigned to main_signed_add_32_8
  %275 = add nsw i32 %271, %27... can share an output register with another operation already assigned to main_signed_add_32_9
  %275 = add nsw i32 %271, %27... can share an output register with another operation already assigned to main_signed_add_32_10
  %275 = add nsw i32 %271, %27... can share an output register with another operation already assigned to main_signed_add_32_11
  %275 = add nsw i32 %271, %27... can share an output register with another operation already assigned to main_signed_add_32_12
  %275 = add nsw i32 %271, %27... can share an output register with another operation already assigned to main_signed_add_32_13
  %275 = add nsw i32 %271, %27... can share an output register with another operation already assigned to main_signed_add_32_14
  %275 = add nsw i32 %271, %27... can share an output register with another operation already assigned to main_signed_add_32_15
  %275 = add nsw i32 %271, %27... can share an output register with another operation already assigned to main_signed_add_32_16
  %275 = add nsw i32 %271, %27... can share an output register with another operation already assigned to main_signed_add_32_17
  %275 = add nsw i32 %271, %27... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %275 = add nsw i32 %271, %27... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -570                          -40                           -60                           -60                           -130                          -110                          -200                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %275 = add nsw i32 %271, %27... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %275 = add nsw i32 %271, %27... (idx: 0) -> main_signed_add_32_12 (mux inputs: 59)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %278 = mul nsw i32 %277, %27... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %278 = mul nsw i32 %277, %27... (idx: 0)        -30                           -30                           -30                           -20                           -20                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -450                          -80                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %278 = mul nsw i32 %277, %27... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %278 = mul nsw i32 %277, %27... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 47)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %279 = add nsw i32 %275, %27... can share an output register with another operation already assigned to main_signed_add_32_0
  %279 = add nsw i32 %275, %27... can share an output register with another operation already assigned to main_signed_add_32_1
  %279 = add nsw i32 %275, %27... can share an output register with another operation already assigned to main_signed_add_32_2
  %279 = add nsw i32 %275, %27... can share an output register with another operation already assigned to main_signed_add_32_3
  %279 = add nsw i32 %275, %27... can share an output register with another operation already assigned to main_signed_add_32_4
  %279 = add nsw i32 %275, %27... can share an output register with another operation already assigned to main_signed_add_32_5
  %279 = add nsw i32 %275, %27... can share an output register with another operation already assigned to main_signed_add_32_6
  %279 = add nsw i32 %275, %27... can share an output register with another operation already assigned to main_signed_add_32_7
  %279 = add nsw i32 %275, %27... can share an output register with another operation already assigned to main_signed_add_32_8
  %279 = add nsw i32 %275, %27... can share an output register with another operation already assigned to main_signed_add_32_9
  %279 = add nsw i32 %275, %27... can share an output register with another operation already assigned to main_signed_add_32_10
  %279 = add nsw i32 %275, %27... can share an output register with another operation already assigned to main_signed_add_32_11
  %279 = add nsw i32 %275, %27... can share an output register with another operation already assigned to main_signed_add_32_12
  %279 = add nsw i32 %275, %27... can share an output register with another operation already assigned to main_signed_add_32_13
  %279 = add nsw i32 %275, %27... can share an output register with another operation already assigned to main_signed_add_32_14
  %279 = add nsw i32 %275, %27... can share an output register with another operation already assigned to main_signed_add_32_15
  %279 = add nsw i32 %275, %27... can share an output register with another operation already assigned to main_signed_add_32_16
  %279 = add nsw i32 %275, %27... can share an output register with another operation already assigned to main_signed_add_32_17
  %279 = add nsw i32 %275, %27... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %279 = add nsw i32 %275, %27... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -590                          -40                           -60                           -60                           -130                          -110                          -200                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %279 = add nsw i32 %275, %27... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %279 = add nsw i32 %275, %27... (idx: 0) -> main_signed_add_32_12 (mux inputs: 61)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %282 = mul nsw i32 %281, %28... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %282 = mul nsw i32 %281, %28... (idx: 0)        -30                           -30                           -30                           -20                           -20                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -470                          -80                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %282 = mul nsw i32 %281, %28... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %282 = mul nsw i32 %281, %28... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 49)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %283 = add nsw i32 %279, %28... can share an output register with another operation already assigned to main_signed_add_32_0
  %283 = add nsw i32 %279, %28... can share an output register with another operation already assigned to main_signed_add_32_1
  %283 = add nsw i32 %279, %28... can share an output register with another operation already assigned to main_signed_add_32_2
  %283 = add nsw i32 %279, %28... can share an output register with another operation already assigned to main_signed_add_32_3
  %283 = add nsw i32 %279, %28... can share an output register with another operation already assigned to main_signed_add_32_4
  %283 = add nsw i32 %279, %28... can share an output register with another operation already assigned to main_signed_add_32_5
  %283 = add nsw i32 %279, %28... can share an output register with another operation already assigned to main_signed_add_32_6
  %283 = add nsw i32 %279, %28... can share an output register with another operation already assigned to main_signed_add_32_7
  %283 = add nsw i32 %279, %28... can share an output register with another operation already assigned to main_signed_add_32_8
  %283 = add nsw i32 %279, %28... can share an output register with another operation already assigned to main_signed_add_32_9
  %283 = add nsw i32 %279, %28... can share an output register with another operation already assigned to main_signed_add_32_10
  %283 = add nsw i32 %279, %28... can share an output register with another operation already assigned to main_signed_add_32_11
  %283 = add nsw i32 %279, %28... can share an output register with another operation already assigned to main_signed_add_32_12
  %283 = add nsw i32 %279, %28... can share an output register with another operation already assigned to main_signed_add_32_13
  %283 = add nsw i32 %279, %28... can share an output register with another operation already assigned to main_signed_add_32_14
  %283 = add nsw i32 %279, %28... can share an output register with another operation already assigned to main_signed_add_32_15
  %283 = add nsw i32 %279, %28... can share an output register with another operation already assigned to main_signed_add_32_16
  %283 = add nsw i32 %279, %28... can share an output register with another operation already assigned to main_signed_add_32_17
  %283 = add nsw i32 %279, %28... can share an output register with another operation already assigned to main_signed_add_32_18
  %288 = add nsw i32 %287, %28... can share an output register with another operation already assigned to main_signed_add_32_0
  %288 = add nsw i32 %287, %28... can share an output register with another operation already assigned to main_signed_add_32_1
  %288 = add nsw i32 %287, %28... can share an output register with another operation already assigned to main_signed_add_32_2
  %288 = add nsw i32 %287, %28... can share an output register with another operation already assigned to main_signed_add_32_3
  %288 = add nsw i32 %287, %28... can share an output register with another operation already assigned to main_signed_add_32_4
  %288 = add nsw i32 %287, %28... can share an output register with another operation already assigned to main_signed_add_32_5
  %288 = add nsw i32 %287, %28... can share an output register with another operation already assigned to main_signed_add_32_6
  %288 = add nsw i32 %287, %28... can share an output register with another operation already assigned to main_signed_add_32_7
  %288 = add nsw i32 %287, %28... can share an output register with another operation already assigned to main_signed_add_32_8
  %288 = add nsw i32 %287, %28... can share an output register with another operation already assigned to main_signed_add_32_9
  %288 = add nsw i32 %287, %28... can share an output register with another operation already assigned to main_signed_add_32_10
  %288 = add nsw i32 %287, %28... can share an output register with another operation already assigned to main_signed_add_32_11
  %288 = add nsw i32 %287, %28... can share an output register with another operation already assigned to main_signed_add_32_12
  %288 = add nsw i32 %287, %28... can share an output register with another operation already assigned to main_signed_add_32_13
  %288 = add nsw i32 %287, %28... can share an output register with another operation already assigned to main_signed_add_32_14
  %288 = add nsw i32 %287, %28... can share an output register with another operation already assigned to main_signed_add_32_15
  %288 = add nsw i32 %287, %28... can share an output register with another operation already assigned to main_signed_add_32_16
  %288 = add nsw i32 %287, %28... can share an output register with another operation already assigned to main_signed_add_32_17
  %288 = add nsw i32 %287, %28... can share an output register with another operation already assigned to main_signed_add_32_18
  %296 = add nsw i32 %295, %28... can share an output register with another operation already assigned to main_signed_add_32_0
  %296 = add nsw i32 %295, %28... can share an output register with another operation already assigned to main_signed_add_32_1
  %296 = add nsw i32 %295, %28... can share an output register with another operation already assigned to main_signed_add_32_2
  %296 = add nsw i32 %295, %28... can share an output register with another operation already assigned to main_signed_add_32_3
  %296 = add nsw i32 %295, %28... can share an output register with another operation already assigned to main_signed_add_32_4
  %296 = add nsw i32 %295, %28... can share an output register with another operation already assigned to main_signed_add_32_5
  %296 = add nsw i32 %295, %28... can share an output register with another operation already assigned to main_signed_add_32_6
  %296 = add nsw i32 %295, %28... can share an output register with another operation already assigned to main_signed_add_32_7
  %296 = add nsw i32 %295, %28... can share an output register with another operation already assigned to main_signed_add_32_8
  %296 = add nsw i32 %295, %28... can share an output register with another operation already assigned to main_signed_add_32_9
  %296 = add nsw i32 %295, %28... can share an output register with another operation already assigned to main_signed_add_32_10
  %296 = add nsw i32 %295, %28... can share an output register with another operation already assigned to main_signed_add_32_11
  %296 = add nsw i32 %295, %28... can share an output register with another operation already assigned to main_signed_add_32_12
  %296 = add nsw i32 %295, %28... can share an output register with another operation already assigned to main_signed_add_32_13
  %296 = add nsw i32 %295, %28... can share an output register with another operation already assigned to main_signed_add_32_14
  %296 = add nsw i32 %295, %28... can share an output register with another operation already assigned to main_signed_add_32_15
  %296 = add nsw i32 %295, %28... can share an output register with another operation already assigned to main_signed_add_32_16
  %296 = add nsw i32 %295, %28... can share an output register with another operation already assigned to main_signed_add_32_17
  %296 = add nsw i32 %295, %28... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %283 = add nsw i32 %279, %28... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -610                          -40                           -60                           -60                           -130                          -110                          -200                          
  %288 = add nsw i32 %287, %28... (idx: 1)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -610                          -40                           -60                           -60                           -130                          -110                          -200                          
  %296 = add nsw i32 %295, %28... (idx: 2)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -610                          -40                           -60                           -60                           -130                          -110                          -200                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %283 = add nsw i32 %279, %28... (idx
  %288 = add nsw i32 %287, %28... (idx
  %296 = add nsw i32 %295, %28... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %283 = add nsw i32 %279, %28... (idx: 0) -> main_signed_add_32_12 (mux inputs: 63)
  %296 = add nsw i32 %295, %28... (idx: 2) -> main_signed_add_32_16 (mux inputs: 15)
  %288 = add nsw i32 %287, %28... (idx: 1) -> main_signed_add_32_18 (mux inputs: 22)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep36 = add i32 %gep_int34,... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -630                          -40                           -60                           -60                           -150                          -110                          -220                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep36 = add i32 %gep_int34,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep36 = add i32 %gep_int34,... (idx: 0) -> main_signed_add_32_12 (mux inputs: 65)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: qq4_code4_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %291 = load i32* %290, align... can share an output register with another operation already assigned to main_qq4_code4_table_local_mem_dual_port_0
                                                  main_qq4_code4_table_local_mem_dual_port_0
  %291 = load i32* %290, align... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_qq4_code4_table_local_mem_dual_port_0
  %291 = load i32* %290, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %291 = load i32* %290, align... (idx: 0) -> main_qq4_code4_table_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_18
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_18
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_18
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep39 = add i32 %gep_int37,... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -650                          -40                           -60                           -60                           -150                          -110                          -220                          
  %gep42 = add i32 %gep_int40,... (idx: 1)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -650                          -40                           -60                           -60                           -150                          -110                          -220                          
  %gep48 = add i32 %gep_int46,... (idx: 2)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -650                          -40                           -60                           -60                           -150                          -110                          -220                          
  %gep51 = add i32 %gep_int49,... (idx: 3)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -650                          -40                           -60                           -60                           -150                          -110                          -220                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep39 = add i32 %gep_int37,... (idx
  %gep42 = add i32 %gep_int40,... (idx
  %gep48 = add i32 %gep_int46,... (idx
  %gep51 = add i32 %gep_int49,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep39 = add i32 %gep_int37,... (idx: 0) -> main_signed_add_32_12 (mux inputs: 67)
  %gep48 = add i32 %gep_int46,... (idx: 2) -> main_signed_add_32_16 (mux inputs: 17)
  %gep51 = add i32 %gep_int49,... (idx: 3) -> main_signed_add_32_17 (mux inputs: 13)
  %gep42 = add i32 %gep_int40,... (idx: 1) -> main_signed_add_32_18 (mux inputs: 24)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: wl_code_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %300 = load i32* %299, align... can share an output register with another operation already assigned to main_wl_code_table_local_mem_dual_port_0
                                                  main_wl_code_table_local_mem_dual_port_0
  %300 = load i32* %299, align... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_wl_code_table_local_mem_dual_port_0
  %300 = load i32* %299, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %300 = load i32* %299, align... (idx: 0) -> main_wl_code_table_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %301 = add nsw i32 %298, %30... can share an output register with another operation already assigned to main_signed_add_32_0
  %301 = add nsw i32 %298, %30... can share an output register with another operation already assigned to main_signed_add_32_1
  %301 = add nsw i32 %298, %30... can share an output register with another operation already assigned to main_signed_add_32_2
  %301 = add nsw i32 %298, %30... can share an output register with another operation already assigned to main_signed_add_32_3
  %301 = add nsw i32 %298, %30... can share an output register with another operation already assigned to main_signed_add_32_4
  %301 = add nsw i32 %298, %30... can share an output register with another operation already assigned to main_signed_add_32_5
  %301 = add nsw i32 %298, %30... can share an output register with another operation already assigned to main_signed_add_32_6
  %301 = add nsw i32 %298, %30... can share an output register with another operation already assigned to main_signed_add_32_7
  %301 = add nsw i32 %298, %30... can share an output register with another operation already assigned to main_signed_add_32_8
  %301 = add nsw i32 %298, %30... can share an output register with another operation already assigned to main_signed_add_32_9
  %301 = add nsw i32 %298, %30... can share an output register with another operation already assigned to main_signed_add_32_10
  %301 = add nsw i32 %298, %30... can share an output register with another operation already assigned to main_signed_add_32_11
  %301 = add nsw i32 %298, %30... can share an output register with another operation already assigned to main_signed_add_32_12
  %301 = add nsw i32 %298, %30... can share an output register with another operation already assigned to main_signed_add_32_13
  %301 = add nsw i32 %298, %30... can share an output register with another operation already assigned to main_signed_add_32_14
  %301 = add nsw i32 %298, %30... can share an output register with another operation already assigned to main_signed_add_32_15
  %301 = add nsw i32 %298, %30... can share an output register with another operation already assigned to main_signed_add_32_16
  %301 = add nsw i32 %298, %30... can share an output register with another operation already assigned to main_signed_add_32_17
  %301 = add nsw i32 %298, %30... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %301 = add nsw i32 %298, %30... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -670                          -40                           -60                           -60                           -170                          -130                          -240                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %301 = add nsw i32 %298, %30... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %301 = add nsw i32 %298, %30... (idx: 0) -> main_signed_add_32_12 (mux inputs: 69)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %292 = mul nsw i32 %291, %de... can share an input with another operation already assigned to main_signed_multiply_32_2
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %292 = mul nsw i32 %291, %de... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %292 = mul nsw i32 %291, %de... (idx: 0)        -30                           -30                           -25                           -20                           -20                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -490                          -80                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %292 = mul nsw i32 %291, %de... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %292 = mul nsw i32 %291, %de... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 51)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %309 = sub i32 9, %306 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %309 = sub i32 9, %306 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %309 = sub i32 9, %306 (idx: 0)                 -115                          -55                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %309 = sub i32 9, %306 (idx: 0)                 1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %309 = sub i32 9, %306 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 13)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %312 = add nsw i32 %284, %29... can share an input with another operation already assigned to main_signed_add_32_18
  %336 = add nsw i32 %293, %28... can share an input with another operation already assigned to main_signed_add_32_16
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %312 = add nsw i32 %284, %29... (idx: 0)        -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -700                          -50                           -70                           -70                           -180                          -140                          -245                          
  %336 = add nsw i32 %293, %28... (idx: 1)        -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -700                          -50                           -70                           -70                           -175                          -140                          -250                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %312 = add nsw i32 %284, %29... (idx
  %336 = add nsw i32 %293, %28... (idx: 1)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %312 = add nsw i32 %284, %29... (idx: 0) -> main_signed_add_32_12 (mux inputs: 71)
  %336 = add nsw i32 %293, %28... (idx: 1) -> main_signed_add_32_18 (mux inputs: 26)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %314 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %318 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %314 = mul nsw i32 %dec_plt1... (idx: 0)        -30                           -30                           -30                           -20                           -20                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -510                          -80                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           
  %318 = mul nsw i32 %dec_plt2... (idx: 1)        -30                           -30                           -30                           -20                           -20                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -510                          -80                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %314 = mul nsw i32 %dec_plt1... (idx
  %318 = mul nsw i32 %dec_plt2... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %314 = mul nsw i32 %dec_plt1... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 53)
  %318 = mul nsw i32 %dec_plt2... (idx: 1) -> main_signed_multiply_32_23 (mux inputs: 10)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: ilb_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %308 = load i32* %307, align... can share an output register with another operation already assigned to main_ilb_table_local_mem_dual_port_0
                                                  main_ilb_table_local_mem_dual_port_0
  %308 = load i32* %307, align... (idx: 0)        -15                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_ilb_table_local_mem_dual_port_0
  %308 = load i32* %307, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %308 = load i32* %307, align... (idx: 0) -> main_ilb_table_local_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_18
  %wd4.0.i9.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_0
  %wd4.0.i9.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_1
  %wd4.0.i9.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_2
  %wd4.0.i9.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_3
  %wd4.0.i9.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_4
  %wd4.0.i9.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_5
  %wd4.0.i9.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_6
  %wd4.0.i9.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_7
  %wd4.0.i9.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_8
  %wd4.0.i9.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_9
  %wd4.0.i9.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_10
  %wd4.0.i9.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_11
  %wd4.0.i9.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_12
  %wd4.0.i9.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_13
  %wd4.0.i9.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_14
  %wd4.0.i9.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_15
  %wd4.0.i9.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_16
  %wd4.0.i9.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_17
  %wd4.0.i9.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_18
  %324 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_0
  %324 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_1
  %324 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_2
  %324 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_3
  %324 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_4
  %324 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_5
  %324 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_6
  %324 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_7
  %324 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_8
  %324 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_9
  %324 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_10
  %324 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_11
  %324 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_12
  %324 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_13
  %324 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_14
  %324 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_15
  %324 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_16
  %324 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_17
  %324 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_18
  %apl1.0.i5.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_0
  %apl1.0.i5.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_1
  %apl1.0.i5.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_2
  %apl1.0.i5.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_3
  %apl1.0.i5.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_4
  %apl1.0.i5.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_5
  %apl1.0.i5.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_6
  %apl1.0.i5.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_7
  %apl1.0.i5.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_8
  %apl1.0.i5.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_9
  %apl1.0.i5.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_10
  %apl1.0.i5.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_11
  %apl1.0.i5.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_12
  %apl1.0.i5.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_13
  %apl1.0.i5.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_14
  %apl1.0.i5.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_15
  %apl1.0.i5.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_16
  %apl1.0.i5.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_17
  %apl1.0.i5.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep45 = add i32 %gep_int43,... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -710                          -40                           -60                           -60                           -170                          -130                          -260                          
  %wd4.0.i9.i = add nsw i32 %3... (idx: 1)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -710                          -40                           -60                           -60                           -170                          -130                          -260                          
  %324 = add nsw i32 %wd4.0.i9... (idx: 2)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -710                          -40                           -60                           -60                           -170                          -130                          -260                          
  %apl1.0.i5.i = add nsw i32 %... (idx: 3)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -710                          -40                           -60                           -60                           -170                          -130                          -260                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep45 = add i32 %gep_int43,... (idx
  %wd4.0.i9.i = add nsw i32 %3... (idx
  %324 = add nsw i32 %wd4.0.i9... (idx
  %apl1.0.i5.i = add nsw i32 %... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep45 = add i32 %gep_int43,... (idx: 0) -> main_signed_add_32_12 (mux inputs: 73)
  %324 = add nsw i32 %wd4.0.i9... (idx: 2) -> main_signed_add_32_16 (mux inputs: 19)
  %apl1.0.i5.i = add nsw i32 %... (idx: 3) -> main_signed_add_32_17 (mux inputs: 15)
  %wd4.0.i9.i = add nsw i32 %3... (idx: 1) -> main_signed_add_32_18 (mux inputs: 28)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %332 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_0
  %332 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_1
  %334 = sub nsw i32 0, %332 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %334 = sub nsw i32 0, %332 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %332 = sub nsw i32 15360, %.... (idx: 0)        -125                          -55                           
  %334 = sub nsw i32 0, %332 (idx: 1)             -125                          -55                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %332 = sub nsw i32 15360, %.... (idx: 0)        1                             0                             
  %334 = sub nsw i32 0, %332 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %332 = sub nsw i32 15360, %.... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 14)
  %334 = sub nsw i32 0, %332 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 7)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %337 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %337 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %338 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %338 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %337 = load i32* getelementp... (idx: 0)        0                             10                            
  %338 = load i32* getelementp... (idx: 1)        0                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %337 = load i32* getelementp... (idx: 0)        1                             0                             
  %338 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %337 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %338 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: qq2_code2_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %366 = load i32* %365, align... can share an output register with another operation already assigned to main_qq2_code2_table_local_mem_dual_port_0
                                                  main_qq2_code2_table_local_mem_dual_port_0
  %366 = load i32* %365, align... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_qq2_code2_table_local_mem_dual_port_0
  %366 = load i32* %365, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %366 = load i32* %365, align... (idx: 0) -> main_qq2_code2_table_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: wh_code_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %372 = load i32* %371, align... can share an output register with another operation already assigned to main_wh_code_table_local_mem_dual_port_0
                                                  main_wh_code_table_local_mem_dual_port_0
  %372 = load i32* %371, align... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_wh_code_table_local_mem_dual_port_0
  %372 = load i32* %371, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %372 = load i32* %371, align... (idx: 0) -> main_wh_code_table_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %340 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %340 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %341 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %341 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %340 = load i32* getelementp... (idx: 0)        0                             10                            
  %341 = load i32* getelementp... (idx: 1)        0                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %340 = load i32* getelementp... (idx: 0)        1                             0                             
  %341 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %340 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %341 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %373 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_0
  %373 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_1
  %373 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_2
  %373 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_3
  %373 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_4
  %373 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_5
  %373 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_6
  %373 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_7
  %373 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_8
  %373 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_9
  %373 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_10
  %373 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_11
  %373 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_12
  %373 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_13
  %373 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_14
  %373 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_15
  %373 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_16
  %373 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_17
  %373 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %373 = add nsw i32 %370, %37... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -730                          -40                           -60                           -60                           -190                          -150                          -280                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %373 = add nsw i32 %370, %37... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %373 = add nsw i32 %370, %37... (idx: 0) -> main_signed_add_32_12 (mux inputs: 75)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %367 = mul nsw i32 %366, %de... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %367 = mul nsw i32 %366, %de... (idx: 0)        -30                           -30                           -30                           -20                           -20                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -530                          -100                          -20                           -30                           -30                           -20                           -20                           -20                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %367 = mul nsw i32 %366, %de... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %367 = mul nsw i32 %366, %de... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 55)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %381 = sub i32 11, %378 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %381 = sub i32 11, %378 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %381 = sub i32 11, %378 (idx: 0)                -135                          -65                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %381 = sub i32 11, %378 (idx: 0)                1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %381 = sub i32 11, %378 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 15)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %344 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %344 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %345 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %345 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %344 = load i32* getelementp... (idx: 0)        0                             10                            
  %345 = load i32* getelementp... (idx: 1)        0                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %344 = load i32* getelementp... (idx: 0)        1                             0                             
  %345 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %344 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %345 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %339 = mul nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %339 = mul nsw i32 %338, %33... (idx: 0)        -30                           -30                           -30                           -20                           -20                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -550                          -100                          -20                           -30                           -30                           -20                           -20                           -20                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %339 = mul nsw i32 %338, %33... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %339 = mul nsw i32 %338, %33... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 57)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: ilb_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %380 = load i32* %379, align... can share an output register with another operation already assigned to main_ilb_table_local_mem_dual_port_0
                                                  main_ilb_table_local_mem_dual_port_0
  %380 = load i32* %379, align... (idx: 0)        -25                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_ilb_table_local_mem_dual_port_0
  %380 = load i32* %379, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %380 = load i32* %379, align... (idx: 0) -> main_ilb_table_local_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %348 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %348 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %349 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %349 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %348 = load i32* getelementp... (idx: 0)        0                             10                            
  %349 = load i32* getelementp... (idx: 1)        0                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %348 = load i32* getelementp... (idx: 0)        1                             0                             
  %349 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %348 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %349 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep54 = add i32 %gep_int52,... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -750                          -40                           -60                           -60                           -190                          -150                          -280                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep54 = add i32 %gep_int52,... (idx: 0)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep54 = add i32 %gep_int52,... (idx: 0) -> main_signed_add_32_12 (mux inputs: 77)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %342 = mul nsw i32 %341, %34... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %342 = mul nsw i32 %341, %34... (idx: 0)        -30                           -30                           -30                           -20                           -20                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -570                          -100                          -20                           -30                           -30                           -20                           -20                           -20                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %342 = mul nsw i32 %341, %34... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %342 = mul nsw i32 %341, %34... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 59)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %352 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %352 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %353 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %353 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %352 = load i32* getelementp... (idx: 0)        0                             10                            
  %353 = load i32* getelementp... (idx: 1)        0                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %352 = load i32* getelementp... (idx: 0)        1                             0                             
  %353 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %352 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %353 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %343 = add nsw i32 %342, %33... can share an output register with another operation already assigned to main_signed_add_32_0
  %343 = add nsw i32 %342, %33... can share an output register with another operation already assigned to main_signed_add_32_1
  %343 = add nsw i32 %342, %33... can share an output register with another operation already assigned to main_signed_add_32_2
  %343 = add nsw i32 %342, %33... can share an output register with another operation already assigned to main_signed_add_32_3
  %343 = add nsw i32 %342, %33... can share an output register with another operation already assigned to main_signed_add_32_4
  %343 = add nsw i32 %342, %33... can share an output register with another operation already assigned to main_signed_add_32_5
  %343 = add nsw i32 %342, %33... can share an output register with another operation already assigned to main_signed_add_32_6
  %343 = add nsw i32 %342, %33... can share an output register with another operation already assigned to main_signed_add_32_7
  %343 = add nsw i32 %342, %33... can share an output register with another operation already assigned to main_signed_add_32_8
  %343 = add nsw i32 %342, %33... can share an output register with another operation already assigned to main_signed_add_32_9
  %343 = add nsw i32 %342, %33... can share an output register with another operation already assigned to main_signed_add_32_10
  %343 = add nsw i32 %342, %33... can share an output register with another operation already assigned to main_signed_add_32_11
  %343 = add nsw i32 %342, %33... can share an output register with another operation already assigned to main_signed_add_32_12
  %343 = add nsw i32 %342, %33... can share an output register with another operation already assigned to main_signed_add_32_13
  %343 = add nsw i32 %342, %33... can share an output register with another operation already assigned to main_signed_add_32_14
  %343 = add nsw i32 %342, %33... can share an output register with another operation already assigned to main_signed_add_32_15
  %343 = add nsw i32 %342, %33... can share an output register with another operation already assigned to main_signed_add_32_16
  %343 = add nsw i32 %342, %33... can share an output register with another operation already assigned to main_signed_add_32_17
  %343 = add nsw i32 %342, %33... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %343 = add nsw i32 %342, %33... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -770                          -40                           -60                           -60                           -190                          -150                          -280                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %343 = add nsw i32 %342, %33... (idx: 0)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %343 = add nsw i32 %342, %33... (idx: 0) -> main_signed_add_32_12 (mux inputs: 79)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %346 = mul nsw i32 %345, %34... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %346 = mul nsw i32 %345, %34... (idx: 0)        -30                           -30                           -30                           -20                           -20                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -590                          -100                          -20                           -30                           -30                           -20                           -20                           -20                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %346 = mul nsw i32 %345, %34... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %346 = mul nsw i32 %345, %34... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 61)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %356 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %356 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %357 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %357 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %356 = load i32* getelementp... (idx: 0)        0                             10                            
  %357 = load i32* getelementp... (idx: 1)        0                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %356 = load i32* getelementp... (idx: 0)        1                             0                             
  %357 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %356 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %357 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %347 = add nsw i32 %343, %34... can share an output register with another operation already assigned to main_signed_add_32_0
  %347 = add nsw i32 %343, %34... can share an output register with another operation already assigned to main_signed_add_32_1
  %347 = add nsw i32 %343, %34... can share an output register with another operation already assigned to main_signed_add_32_2
  %347 = add nsw i32 %343, %34... can share an output register with another operation already assigned to main_signed_add_32_3
  %347 = add nsw i32 %343, %34... can share an output register with another operation already assigned to main_signed_add_32_4
  %347 = add nsw i32 %343, %34... can share an output register with another operation already assigned to main_signed_add_32_5
  %347 = add nsw i32 %343, %34... can share an output register with another operation already assigned to main_signed_add_32_6
  %347 = add nsw i32 %343, %34... can share an output register with another operation already assigned to main_signed_add_32_7
  %347 = add nsw i32 %343, %34... can share an output register with another operation already assigned to main_signed_add_32_8
  %347 = add nsw i32 %343, %34... can share an output register with another operation already assigned to main_signed_add_32_9
  %347 = add nsw i32 %343, %34... can share an output register with another operation already assigned to main_signed_add_32_10
  %347 = add nsw i32 %343, %34... can share an output register with another operation already assigned to main_signed_add_32_11
  %347 = add nsw i32 %343, %34... can share an output register with another operation already assigned to main_signed_add_32_12
  %347 = add nsw i32 %343, %34... can share an output register with another operation already assigned to main_signed_add_32_13
  %347 = add nsw i32 %343, %34... can share an output register with another operation already assigned to main_signed_add_32_14
  %347 = add nsw i32 %343, %34... can share an output register with another operation already assigned to main_signed_add_32_15
  %347 = add nsw i32 %343, %34... can share an output register with another operation already assigned to main_signed_add_32_16
  %347 = add nsw i32 %343, %34... can share an output register with another operation already assigned to main_signed_add_32_17
  %347 = add nsw i32 %343, %34... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %347 = add nsw i32 %343, %34... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -790                          -40                           -60                           -60                           -190                          -150                          -280                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %347 = add nsw i32 %343, %34... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %347 = add nsw i32 %343, %34... (idx: 0) -> main_signed_add_32_12 (mux inputs: 81)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %350 = mul nsw i32 %349, %34... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %350 = mul nsw i32 %349, %34... (idx: 0)        -30                           -30                           -30                           -20                           -20                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -610                          -100                          -20                           -30                           -30                           -20                           -20                           -20                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %350 = mul nsw i32 %349, %34... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %350 = mul nsw i32 %349, %34... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 63)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %351 = add nsw i32 %347, %35... can share an output register with another operation already assigned to main_signed_add_32_0
  %351 = add nsw i32 %347, %35... can share an output register with another operation already assigned to main_signed_add_32_1
  %351 = add nsw i32 %347, %35... can share an output register with another operation already assigned to main_signed_add_32_2
  %351 = add nsw i32 %347, %35... can share an output register with another operation already assigned to main_signed_add_32_3
  %351 = add nsw i32 %347, %35... can share an output register with another operation already assigned to main_signed_add_32_4
  %351 = add nsw i32 %347, %35... can share an output register with another operation already assigned to main_signed_add_32_5
  %351 = add nsw i32 %347, %35... can share an output register with another operation already assigned to main_signed_add_32_6
  %351 = add nsw i32 %347, %35... can share an output register with another operation already assigned to main_signed_add_32_7
  %351 = add nsw i32 %347, %35... can share an output register with another operation already assigned to main_signed_add_32_8
  %351 = add nsw i32 %347, %35... can share an output register with another operation already assigned to main_signed_add_32_9
  %351 = add nsw i32 %347, %35... can share an output register with another operation already assigned to main_signed_add_32_10
  %351 = add nsw i32 %347, %35... can share an output register with another operation already assigned to main_signed_add_32_11
  %351 = add nsw i32 %347, %35... can share an output register with another operation already assigned to main_signed_add_32_12
  %351 = add nsw i32 %347, %35... can share an output register with another operation already assigned to main_signed_add_32_13
  %351 = add nsw i32 %347, %35... can share an output register with another operation already assigned to main_signed_add_32_14
  %351 = add nsw i32 %347, %35... can share an output register with another operation already assigned to main_signed_add_32_15
  %351 = add nsw i32 %347, %35... can share an output register with another operation already assigned to main_signed_add_32_16
  %351 = add nsw i32 %347, %35... can share an output register with another operation already assigned to main_signed_add_32_17
  %351 = add nsw i32 %347, %35... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %351 = add nsw i32 %347, %35... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -810                          -40                           -60                           -60                           -190                          -150                          -280                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %351 = add nsw i32 %347, %35... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %351 = add nsw i32 %347, %35... (idx: 0) -> main_signed_add_32_12 (mux inputs: 83)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %354 = mul nsw i32 %353, %35... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %354 = mul nsw i32 %353, %35... (idx: 0)        -30                           -30                           -30                           -20                           -20                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -630                          -100                          -20                           -30                           -30                           -20                           -20                           -20                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %354 = mul nsw i32 %353, %35... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %354 = mul nsw i32 %353, %35... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 65)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %355 = add nsw i32 %351, %35... can share an output register with another operation already assigned to main_signed_add_32_0
  %355 = add nsw i32 %351, %35... can share an output register with another operation already assigned to main_signed_add_32_1
  %355 = add nsw i32 %351, %35... can share an output register with another operation already assigned to main_signed_add_32_2
  %355 = add nsw i32 %351, %35... can share an output register with another operation already assigned to main_signed_add_32_3
  %355 = add nsw i32 %351, %35... can share an output register with another operation already assigned to main_signed_add_32_4
  %355 = add nsw i32 %351, %35... can share an output register with another operation already assigned to main_signed_add_32_5
  %355 = add nsw i32 %351, %35... can share an output register with another operation already assigned to main_signed_add_32_6
  %355 = add nsw i32 %351, %35... can share an output register with another operation already assigned to main_signed_add_32_7
  %355 = add nsw i32 %351, %35... can share an output register with another operation already assigned to main_signed_add_32_8
  %355 = add nsw i32 %351, %35... can share an output register with another operation already assigned to main_signed_add_32_9
  %355 = add nsw i32 %351, %35... can share an output register with another operation already assigned to main_signed_add_32_10
  %355 = add nsw i32 %351, %35... can share an output register with another operation already assigned to main_signed_add_32_11
  %355 = add nsw i32 %351, %35... can share an output register with another operation already assigned to main_signed_add_32_12
  %355 = add nsw i32 %351, %35... can share an output register with another operation already assigned to main_signed_add_32_13
  %355 = add nsw i32 %351, %35... can share an output register with another operation already assigned to main_signed_add_32_14
  %355 = add nsw i32 %351, %35... can share an output register with another operation already assigned to main_signed_add_32_15
  %355 = add nsw i32 %351, %35... can share an output register with another operation already assigned to main_signed_add_32_16
  %355 = add nsw i32 %351, %35... can share an output register with another operation already assigned to main_signed_add_32_17
  %355 = add nsw i32 %351, %35... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %355 = add nsw i32 %351, %35... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -830                          -40                           -60                           -60                           -190                          -150                          -280                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %355 = add nsw i32 %351, %35... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %355 = add nsw i32 %351, %35... (idx: 0) -> main_signed_add_32_12 (mux inputs: 85)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %358 = mul nsw i32 %357, %35... can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %358 = mul nsw i32 %357, %35... (idx: 0)        -30                           -30                           -30                           -20                           -20                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -650                          -100                          -20                           -30                           -30                           -20                           -20                           -20                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %358 = mul nsw i32 %357, %35... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %358 = mul nsw i32 %357, %35... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 67)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %359 = add nsw i32 %355, %35... can share an output register with another operation already assigned to main_signed_add_32_0
  %359 = add nsw i32 %355, %35... can share an output register with another operation already assigned to main_signed_add_32_1
  %359 = add nsw i32 %355, %35... can share an output register with another operation already assigned to main_signed_add_32_2
  %359 = add nsw i32 %355, %35... can share an output register with another operation already assigned to main_signed_add_32_3
  %359 = add nsw i32 %355, %35... can share an output register with another operation already assigned to main_signed_add_32_4
  %359 = add nsw i32 %355, %35... can share an output register with another operation already assigned to main_signed_add_32_5
  %359 = add nsw i32 %355, %35... can share an output register with another operation already assigned to main_signed_add_32_6
  %359 = add nsw i32 %355, %35... can share an output register with another operation already assigned to main_signed_add_32_7
  %359 = add nsw i32 %355, %35... can share an output register with another operation already assigned to main_signed_add_32_8
  %359 = add nsw i32 %355, %35... can share an output register with another operation already assigned to main_signed_add_32_9
  %359 = add nsw i32 %355, %35... can share an output register with another operation already assigned to main_signed_add_32_10
  %359 = add nsw i32 %355, %35... can share an output register with another operation already assigned to main_signed_add_32_11
  %359 = add nsw i32 %355, %35... can share an output register with another operation already assigned to main_signed_add_32_12
  %359 = add nsw i32 %355, %35... can share an output register with another operation already assigned to main_signed_add_32_13
  %359 = add nsw i32 %355, %35... can share an output register with another operation already assigned to main_signed_add_32_14
  %359 = add nsw i32 %355, %35... can share an output register with another operation already assigned to main_signed_add_32_15
  %359 = add nsw i32 %355, %35... can share an output register with another operation already assigned to main_signed_add_32_16
  %359 = add nsw i32 %355, %35... can share an output register with another operation already assigned to main_signed_add_32_17
  %359 = add nsw i32 %355, %35... can share an output register with another operation already assigned to main_signed_add_32_18
  %364 = add nsw i32 %363, %36... can share an output register with another operation already assigned to main_signed_add_32_0
  %364 = add nsw i32 %363, %36... can share an output register with another operation already assigned to main_signed_add_32_1
  %364 = add nsw i32 %363, %36... can share an output register with another operation already assigned to main_signed_add_32_2
  %364 = add nsw i32 %363, %36... can share an output register with another operation already assigned to main_signed_add_32_3
  %364 = add nsw i32 %363, %36... can share an output register with another operation already assigned to main_signed_add_32_4
  %364 = add nsw i32 %363, %36... can share an output register with another operation already assigned to main_signed_add_32_5
  %364 = add nsw i32 %363, %36... can share an output register with another operation already assigned to main_signed_add_32_6
  %364 = add nsw i32 %363, %36... can share an output register with another operation already assigned to main_signed_add_32_7
  %364 = add nsw i32 %363, %36... can share an output register with another operation already assigned to main_signed_add_32_8
  %364 = add nsw i32 %363, %36... can share an output register with another operation already assigned to main_signed_add_32_9
  %364 = add nsw i32 %363, %36... can share an output register with another operation already assigned to main_signed_add_32_10
  %364 = add nsw i32 %363, %36... can share an output register with another operation already assigned to main_signed_add_32_11
  %364 = add nsw i32 %363, %36... can share an output register with another operation already assigned to main_signed_add_32_12
  %364 = add nsw i32 %363, %36... can share an output register with another operation already assigned to main_signed_add_32_13
  %364 = add nsw i32 %363, %36... can share an output register with another operation already assigned to main_signed_add_32_14
  %364 = add nsw i32 %363, %36... can share an output register with another operation already assigned to main_signed_add_32_15
  %364 = add nsw i32 %363, %36... can share an output register with another operation already assigned to main_signed_add_32_16
  %364 = add nsw i32 %363, %36... can share an output register with another operation already assigned to main_signed_add_32_17
  %364 = add nsw i32 %363, %36... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %359 = add nsw i32 %355, %35... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -850                          -40                           -60                           -60                           -190                          -150                          -280                          
  %364 = add nsw i32 %363, %36... (idx: 1)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -850                          -40                           -60                           -60                           -190                          -150                          -280                          
  %384 = add nsw i32 %360, %36... (idx: 2)        -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -860                          -50                           -70                           -70                           -200                          -160                          -290                          
  %408 = add nsw i32 %368, %36... (idx: 3)        -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -860                          -50                           -70                           -70                           -200                          -160                          -290                          
  %410 = add nsw i32 %408, %29... (idx: 4)        -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -30                           -860                          -50                           -70                           -70                           -200                          -160                          -290                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %359 = add nsw i32 %355, %35... (idx
  %364 = add nsw i32 %363, %36... (idx
  %384 = add nsw i32 %360, %36... (idx
  %408 = add nsw i32 %368, %36... (idx
  %410 = add nsw i32 %408, %29... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %359 = add nsw i32 %355, %35... (idx: 0) -> main_signed_add_32_12 (mux inputs: 87)
  %410 = add nsw i32 %408, %29... (idx: 4) -> main_signed_add_32_15 (mux inputs: 8)
  %384 = add nsw i32 %360, %36... (idx: 2) -> main_signed_add_32_16 (mux inputs: 21)
  %408 = add nsw i32 %368, %36... (idx: 3) -> main_signed_add_32_17 (mux inputs: 17)
  %364 = add nsw i32 %363, %36... (idx: 1) -> main_signed_add_32_18 (mux inputs: 30)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %386 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_15
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_16
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_17
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_18
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_19
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_20
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_21
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_22
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_23
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_25
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_26
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_28
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_29
  %390 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_30
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_14
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_15
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_16
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_17
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_18
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_19
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_20
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_21
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_22
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_23
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_24
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_25
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_26
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_27
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_28
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_29
  %411 = mul nsw i32 %409, 12 can share an output register with another operation already assigned to main_signed_multiply_32_30
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_14
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_15
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_16
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_17
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_18
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_19
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_20
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_21
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_22
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_23
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_24
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_25
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_26
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_27
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_28
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_29
  %412 = mul nsw i32 %410, -44 can share an output register with another operation already assigned to main_signed_multiply_32_30
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %386 = mul nsw i32 %dec_ph1.... (idx: 0)        -30                           -30                           -30                           -20                           -20                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -670                          -100                          -20                           -30                           -30                           -20                           -20                           -20                           -20                           
  %390 = mul nsw i32 %dec_ph2.... (idx: 1)        -30                           -30                           -30                           -20                           -20                           -20                           -30                           -30                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -670                          -100                          -20                           -30                           -30                           -20                           -20                           -20                           -20                           
  %411 = mul nsw i32 %409, 12 (idx: 2)            -25                           -25                           -25                           -15                           -15                           -15                           -25                           -25                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -665                          -95                           -15                           -25                           -25                           -15                           -15                           -15                           -15                           
  %412 = mul nsw i32 %410, -44 (idx: 3)           -25                           -25                           -25                           -15                           -15                           -15                           -25                           -25                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -15                           -665                          -95                           -15                           -25                           -25                           -15                           -15                           -15                           -15                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    main_signed_multiply_32_29    main_signed_multiply_32_30    
  %386 = mul nsw i32 %dec_ph1.... (idx
  %390 = mul nsw i32 %dec_ph2.... (idx
  %411 = mul nsw i32 %409, 12 (idx
  %412 = mul nsw i32 %410, -44 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %411 = mul nsw i32 %409, 12 (idx: 2) -> main_signed_multiply_32_0 (mux inputs: 4)
  %412 = mul nsw i32 %410, -44 (idx: 3) -> main_signed_multiply_32_1 (mux inputs: 4)
  %386 = mul nsw i32 %dec_ph1.... (idx: 0) -> main_signed_multiply_32_22 (mux inputs: 69)
  %390 = mul nsw i32 %dec_ph2.... (idx: 1) -> main_signed_multiply_32_23 (mux inputs: 12)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %409 = sub nsw i32 %296, %40... (idx: 0)        -160                          -80                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %409 = sub nsw i32 %296, %40... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %409 = sub nsw i32 %296, %40... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 17)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %wd4.0.i.i = add nsw i32 %38... can share an output register with another operation already assigned to main_signed_add_32_0
  %wd4.0.i.i = add nsw i32 %38... can share an output register with another operation already assigned to main_signed_add_32_1
  %wd4.0.i.i = add nsw i32 %38... can share an output register with another operation already assigned to main_signed_add_32_2
  %wd4.0.i.i = add nsw i32 %38... can share an output register with another operation already assigned to main_signed_add_32_3
  %wd4.0.i.i = add nsw i32 %38... can share an output register with another operation already assigned to main_signed_add_32_4
  %wd4.0.i.i = add nsw i32 %38... can share an output register with another operation already assigned to main_signed_add_32_5
  %wd4.0.i.i = add nsw i32 %38... can share an output register with another operation already assigned to main_signed_add_32_6
  %wd4.0.i.i = add nsw i32 %38... can share an output register with another operation already assigned to main_signed_add_32_7
  %wd4.0.i.i = add nsw i32 %38... can share an output register with another operation already assigned to main_signed_add_32_8
  %wd4.0.i.i = add nsw i32 %38... can share an output register with another operation already assigned to main_signed_add_32_9
  %wd4.0.i.i = add nsw i32 %38... can share an output register with another operation already assigned to main_signed_add_32_10
  %wd4.0.i.i = add nsw i32 %38... can share an output register with another operation already assigned to main_signed_add_32_11
  %wd4.0.i.i = add nsw i32 %38... can share an output register with another operation already assigned to main_signed_add_32_12
  %wd4.0.i.i = add nsw i32 %38... can share an output register with another operation already assigned to main_signed_add_32_13
  %wd4.0.i.i = add nsw i32 %38... can share an output register with another operation already assigned to main_signed_add_32_14
  %wd4.0.i.i = add nsw i32 %38... can share an output register with another operation already assigned to main_signed_add_32_15
  %wd4.0.i.i = add nsw i32 %38... can share an output register with another operation already assigned to main_signed_add_32_16
  %wd4.0.i.i = add nsw i32 %38... can share an output register with another operation already assigned to main_signed_add_32_17
  %wd4.0.i.i = add nsw i32 %38... can share an output register with another operation already assigned to main_signed_add_32_18
  %396 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_0
  %396 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_1
  %396 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_2
  %396 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_3
  %396 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_4
  %396 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_5
  %396 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_6
  %396 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_7
  %396 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_8
  %396 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_9
  %396 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_10
  %396 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_11
  %396 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_12
  %396 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_13
  %396 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_14
  %396 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_15
  %396 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_16
  %396 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_17
  %396 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_18
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_0
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_1
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_2
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_3
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_4
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_5
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_6
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_7
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_8
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_9
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_10
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_11
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_12
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_13
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_14
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_15
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_16
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_17
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_18
  %414 = add nsw i32 %413, %41... can share an output register with another operation already assigned to main_signed_add_32_0
  %414 = add nsw i32 %413, %41... can share an output register with another operation already assigned to main_signed_add_32_1
  %414 = add nsw i32 %413, %41... can share an output register with another operation already assigned to main_signed_add_32_2
  %414 = add nsw i32 %413, %41... can share an output register with another operation already assigned to main_signed_add_32_3
  %414 = add nsw i32 %413, %41... can share an output register with another operation already assigned to main_signed_add_32_4
  %414 = add nsw i32 %413, %41... can share an output register with another operation already assigned to main_signed_add_32_5
  %414 = add nsw i32 %413, %41... can share an output register with another operation already assigned to main_signed_add_32_6
  %414 = add nsw i32 %413, %41... can share an output register with another operation already assigned to main_signed_add_32_7
  %414 = add nsw i32 %413, %41... can share an output register with another operation already assigned to main_signed_add_32_8
  %414 = add nsw i32 %413, %41... can share an output register with another operation already assigned to main_signed_add_32_9
  %414 = add nsw i32 %413, %41... can share an output register with another operation already assigned to main_signed_add_32_10
  %414 = add nsw i32 %413, %41... can share an output register with another operation already assigned to main_signed_add_32_11
  %414 = add nsw i32 %413, %41... can share an output register with another operation already assigned to main_signed_add_32_12
  %414 = add nsw i32 %413, %41... can share an output register with another operation already assigned to main_signed_add_32_13
  %414 = add nsw i32 %413, %41... can share an output register with another operation already assigned to main_signed_add_32_14
  %414 = add nsw i32 %413, %41... can share an output register with another operation already assigned to main_signed_add_32_15
  %414 = add nsw i32 %413, %41... can share an output register with another operation already assigned to main_signed_add_32_16
  %414 = add nsw i32 %413, %41... can share an output register with another operation already assigned to main_signed_add_32_17
  %414 = add nsw i32 %413, %41... can share an output register with another operation already assigned to main_signed_add_32_18
  %416 = add nsw i32 %415, %41... can share an output register with another operation already assigned to main_signed_add_32_0
  %416 = add nsw i32 %415, %41... can share an output register with another operation already assigned to main_signed_add_32_1
  %416 = add nsw i32 %415, %41... can share an output register with another operation already assigned to main_signed_add_32_2
  %416 = add nsw i32 %415, %41... can share an output register with another operation already assigned to main_signed_add_32_3
  %416 = add nsw i32 %415, %41... can share an output register with another operation already assigned to main_signed_add_32_4
  %416 = add nsw i32 %415, %41... can share an output register with another operation already assigned to main_signed_add_32_5
  %416 = add nsw i32 %415, %41... can share an output register with another operation already assigned to main_signed_add_32_6
  %416 = add nsw i32 %415, %41... can share an output register with another operation already assigned to main_signed_add_32_7
  %416 = add nsw i32 %415, %41... can share an output register with another operation already assigned to main_signed_add_32_8
  %416 = add nsw i32 %415, %41... can share an output register with another operation already assigned to main_signed_add_32_9
  %416 = add nsw i32 %415, %41... can share an output register with another operation already assigned to main_signed_add_32_10
  %416 = add nsw i32 %415, %41... can share an output register with another operation already assigned to main_signed_add_32_11
  %416 = add nsw i32 %415, %41... can share an output register with another operation already assigned to main_signed_add_32_12
  %416 = add nsw i32 %415, %41... can share an output register with another operation already assigned to main_signed_add_32_13
  %416 = add nsw i32 %415, %41... can share an output register with another operation already assigned to main_signed_add_32_14
  %416 = add nsw i32 %415, %41... can share an output register with another operation already assigned to main_signed_add_32_15
  %416 = add nsw i32 %415, %41... can share an output register with another operation already assigned to main_signed_add_32_16
  %416 = add nsw i32 %415, %41... can share an output register with another operation already assigned to main_signed_add_32_17
  %416 = add nsw i32 %415, %41... can share an output register with another operation already assigned to main_signed_add_32_18
  %418 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_0
  %418 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_1
  %418 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_2
  %418 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_3
  %418 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_4
  %418 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_5
  %418 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_6
  %418 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_7
  %418 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_8
  %418 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_9
  %418 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_10
  %418 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_11
  %418 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_12
  %418 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_13
  %418 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_14
  %418 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_15
  %418 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_16
  %418 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_17
  %418 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_18
  %420 = add nsw i32 %419, %41... can share an output register with another operation already assigned to main_signed_add_32_0
  %420 = add nsw i32 %419, %41... can share an output register with another operation already assigned to main_signed_add_32_1
  %420 = add nsw i32 %419, %41... can share an output register with another operation already assigned to main_signed_add_32_2
  %420 = add nsw i32 %419, %41... can share an output register with another operation already assigned to main_signed_add_32_3
  %420 = add nsw i32 %419, %41... can share an output register with another operation already assigned to main_signed_add_32_4
  %420 = add nsw i32 %419, %41... can share an output register with another operation already assigned to main_signed_add_32_5
  %420 = add nsw i32 %419, %41... can share an output register with another operation already assigned to main_signed_add_32_6
  %420 = add nsw i32 %419, %41... can share an output register with another operation already assigned to main_signed_add_32_7
  %420 = add nsw i32 %419, %41... can share an output register with another operation already assigned to main_signed_add_32_8
  %420 = add nsw i32 %419, %41... can share an output register with another operation already assigned to main_signed_add_32_9
  %420 = add nsw i32 %419, %41... can share an output register with another operation already assigned to main_signed_add_32_10
  %420 = add nsw i32 %419, %41... can share an output register with another operation already assigned to main_signed_add_32_11
  %420 = add nsw i32 %419, %41... can share an output register with another operation already assigned to main_signed_add_32_12
  %420 = add nsw i32 %419, %41... can share an output register with another operation already assigned to main_signed_add_32_13
  %420 = add nsw i32 %419, %41... can share an output register with another operation already assigned to main_signed_add_32_14
  %420 = add nsw i32 %419, %41... can share an output register with another operation already assigned to main_signed_add_32_15
  %420 = add nsw i32 %419, %41... can share an output register with another operation already assigned to main_signed_add_32_16
  %420 = add nsw i32 %419, %41... can share an output register with another operation already assigned to main_signed_add_32_17
  %420 = add nsw i32 %419, %41... can share an output register with another operation already assigned to main_signed_add_32_18
  %422 = add nsw i32 %421, %41... can share an output register with another operation already assigned to main_signed_add_32_0
  %422 = add nsw i32 %421, %41... can share an output register with another operation already assigned to main_signed_add_32_1
  %422 = add nsw i32 %421, %41... can share an output register with another operation already assigned to main_signed_add_32_2
  %422 = add nsw i32 %421, %41... can share an output register with another operation already assigned to main_signed_add_32_3
  %422 = add nsw i32 %421, %41... can share an output register with another operation already assigned to main_signed_add_32_4
  %422 = add nsw i32 %421, %41... can share an output register with another operation already assigned to main_signed_add_32_5
  %422 = add nsw i32 %421, %41... can share an output register with another operation already assigned to main_signed_add_32_6
  %422 = add nsw i32 %421, %41... can share an output register with another operation already assigned to main_signed_add_32_7
  %422 = add nsw i32 %421, %41... can share an output register with another operation already assigned to main_signed_add_32_8
  %422 = add nsw i32 %421, %41... can share an output register with another operation already assigned to main_signed_add_32_9
  %422 = add nsw i32 %421, %41... can share an output register with another operation already assigned to main_signed_add_32_10
  %422 = add nsw i32 %421, %41... can share an output register with another operation already assigned to main_signed_add_32_11
  %422 = add nsw i32 %421, %41... can share an output register with another operation already assigned to main_signed_add_32_12
  %422 = add nsw i32 %421, %41... can share an output register with another operation already assigned to main_signed_add_32_13
  %422 = add nsw i32 %421, %41... can share an output register with another operation already assigned to main_signed_add_32_14
  %422 = add nsw i32 %421, %41... can share an output register with another operation already assigned to main_signed_add_32_15
  %422 = add nsw i32 %421, %41... can share an output register with another operation already assigned to main_signed_add_32_16
  %422 = add nsw i32 %421, %41... can share an output register with another operation already assigned to main_signed_add_32_17
  %422 = add nsw i32 %421, %41... can share an output register with another operation already assigned to main_signed_add_32_18
  %424 = add nsw i32 %423, %42... can share an output register with another operation already assigned to main_signed_add_32_0
  %424 = add nsw i32 %423, %42... can share an output register with another operation already assigned to main_signed_add_32_1
  %424 = add nsw i32 %423, %42... can share an output register with another operation already assigned to main_signed_add_32_2
  %424 = add nsw i32 %423, %42... can share an output register with another operation already assigned to main_signed_add_32_3
  %424 = add nsw i32 %423, %42... can share an output register with another operation already assigned to main_signed_add_32_4
  %424 = add nsw i32 %423, %42... can share an output register with another operation already assigned to main_signed_add_32_5
  %424 = add nsw i32 %423, %42... can share an output register with another operation already assigned to main_signed_add_32_6
  %424 = add nsw i32 %423, %42... can share an output register with another operation already assigned to main_signed_add_32_7
  %424 = add nsw i32 %423, %42... can share an output register with another operation already assigned to main_signed_add_32_8
  %424 = add nsw i32 %423, %42... can share an output register with another operation already assigned to main_signed_add_32_9
  %424 = add nsw i32 %423, %42... can share an output register with another operation already assigned to main_signed_add_32_10
  %424 = add nsw i32 %423, %42... can share an output register with another operation already assigned to main_signed_add_32_11
  %424 = add nsw i32 %423, %42... can share an output register with another operation already assigned to main_signed_add_32_12
  %424 = add nsw i32 %423, %42... can share an output register with another operation already assigned to main_signed_add_32_13
  %424 = add nsw i32 %423, %42... can share an output register with another operation already assigned to main_signed_add_32_14
  %424 = add nsw i32 %423, %42... can share an output register with another operation already assigned to main_signed_add_32_15
  %424 = add nsw i32 %423, %42... can share an output register with another operation already assigned to main_signed_add_32_16
  %424 = add nsw i32 %423, %42... can share an output register with another operation already assigned to main_signed_add_32_17
  %424 = add nsw i32 %423, %42... can share an output register with another operation already assigned to main_signed_add_32_18
  %426 = add nsw i32 %425, %42... can share an output register with another operation already assigned to main_signed_add_32_0
  %426 = add nsw i32 %425, %42... can share an output register with another operation already assigned to main_signed_add_32_1
  %426 = add nsw i32 %425, %42... can share an output register with another operation already assigned to main_signed_add_32_2
  %426 = add nsw i32 %425, %42... can share an output register with another operation already assigned to main_signed_add_32_3
  %426 = add nsw i32 %425, %42... can share an output register with another operation already assigned to main_signed_add_32_4
  %426 = add nsw i32 %425, %42... can share an output register with another operation already assigned to main_signed_add_32_5
  %426 = add nsw i32 %425, %42... can share an output register with another operation already assigned to main_signed_add_32_6
  %426 = add nsw i32 %425, %42... can share an output register with another operation already assigned to main_signed_add_32_7
  %426 = add nsw i32 %425, %42... can share an output register with another operation already assigned to main_signed_add_32_8
  %426 = add nsw i32 %425, %42... can share an output register with another operation already assigned to main_signed_add_32_9
  %426 = add nsw i32 %425, %42... can share an output register with another operation already assigned to main_signed_add_32_10
  %426 = add nsw i32 %425, %42... can share an output register with another operation already assigned to main_signed_add_32_11
  %426 = add nsw i32 %425, %42... can share an output register with another operation already assigned to main_signed_add_32_12
  %426 = add nsw i32 %425, %42... can share an output register with another operation already assigned to main_signed_add_32_13
  %426 = add nsw i32 %425, %42... can share an output register with another operation already assigned to main_signed_add_32_14
  %426 = add nsw i32 %425, %42... can share an output register with another operation already assigned to main_signed_add_32_15
  %426 = add nsw i32 %425, %42... can share an output register with another operation already assigned to main_signed_add_32_16
  %426 = add nsw i32 %425, %42... can share an output register with another operation already assigned to main_signed_add_32_17
  %426 = add nsw i32 %425, %42... can share an output register with another operation already assigned to main_signed_add_32_18
  %428 = add nsw i32 %427, %42... can share an output register with another operation already assigned to main_signed_add_32_0
  %428 = add nsw i32 %427, %42... can share an output register with another operation already assigned to main_signed_add_32_1
  %428 = add nsw i32 %427, %42... can share an output register with another operation already assigned to main_signed_add_32_2
  %428 = add nsw i32 %427, %42... can share an output register with another operation already assigned to main_signed_add_32_3
  %428 = add nsw i32 %427, %42... can share an output register with another operation already assigned to main_signed_add_32_4
  %428 = add nsw i32 %427, %42... can share an output register with another operation already assigned to main_signed_add_32_5
  %428 = add nsw i32 %427, %42... can share an output register with another operation already assigned to main_signed_add_32_6
  %428 = add nsw i32 %427, %42... can share an output register with another operation already assigned to main_signed_add_32_7
  %428 = add nsw i32 %427, %42... can share an output register with another operation already assigned to main_signed_add_32_8
  %428 = add nsw i32 %427, %42... can share an output register with another operation already assigned to main_signed_add_32_9
  %428 = add nsw i32 %427, %42... can share an output register with another operation already assigned to main_signed_add_32_10
  %428 = add nsw i32 %427, %42... can share an output register with another operation already assigned to main_signed_add_32_11
  %428 = add nsw i32 %427, %42... can share an output register with another operation already assigned to main_signed_add_32_12
  %428 = add nsw i32 %427, %42... can share an output register with another operation already assigned to main_signed_add_32_13
  %428 = add nsw i32 %427, %42... can share an output register with another operation already assigned to main_signed_add_32_14
  %428 = add nsw i32 %427, %42... can share an output register with another operation already assigned to main_signed_add_32_15
  %428 = add nsw i32 %427, %42... can share an output register with another operation already assigned to main_signed_add_32_16
  %428 = add nsw i32 %427, %42... can share an output register with another operation already assigned to main_signed_add_32_17
  %428 = add nsw i32 %427, %42... can share an output register with another operation already assigned to main_signed_add_32_18
  %430 = add nsw i32 %429, %42... can share an output register with another operation already assigned to main_signed_add_32_0
  %430 = add nsw i32 %429, %42... can share an output register with another operation already assigned to main_signed_add_32_1
  %430 = add nsw i32 %429, %42... can share an output register with another operation already assigned to main_signed_add_32_2
  %430 = add nsw i32 %429, %42... can share an output register with another operation already assigned to main_signed_add_32_3
  %430 = add nsw i32 %429, %42... can share an output register with another operation already assigned to main_signed_add_32_4
  %430 = add nsw i32 %429, %42... can share an output register with another operation already assigned to main_signed_add_32_5
  %430 = add nsw i32 %429, %42... can share an output register with another operation already assigned to main_signed_add_32_6
  %430 = add nsw i32 %429, %42... can share an output register with another operation already assigned to main_signed_add_32_7
  %430 = add nsw i32 %429, %42... can share an output register with another operation already assigned to main_signed_add_32_8
  %430 = add nsw i32 %429, %42... can share an output register with another operation already assigned to main_signed_add_32_9
  %430 = add nsw i32 %429, %42... can share an output register with another operation already assigned to main_signed_add_32_10
  %430 = add nsw i32 %429, %42... can share an output register with another operation already assigned to main_signed_add_32_11
  %430 = add nsw i32 %429, %42... can share an output register with another operation already assigned to main_signed_add_32_12
  %430 = add nsw i32 %429, %42... can share an output register with another operation already assigned to main_signed_add_32_13
  %430 = add nsw i32 %429, %42... can share an output register with another operation already assigned to main_signed_add_32_14
  %430 = add nsw i32 %429, %42... can share an output register with another operation already assigned to main_signed_add_32_15
  %430 = add nsw i32 %429, %42... can share an output register with another operation already assigned to main_signed_add_32_16
  %430 = add nsw i32 %429, %42... can share an output register with another operation already assigned to main_signed_add_32_17
  %430 = add nsw i32 %429, %42... can share an output register with another operation already assigned to main_signed_add_32_18
  %432 = add nsw i32 %431, %42... can share an output register with another operation already assigned to main_signed_add_32_0
  %432 = add nsw i32 %431, %42... can share an output register with another operation already assigned to main_signed_add_32_1
  %432 = add nsw i32 %431, %42... can share an output register with another operation already assigned to main_signed_add_32_2
  %432 = add nsw i32 %431, %42... can share an output register with another operation already assigned to main_signed_add_32_3
  %432 = add nsw i32 %431, %42... can share an output register with another operation already assigned to main_signed_add_32_4
  %432 = add nsw i32 %431, %42... can share an output register with another operation already assigned to main_signed_add_32_5
  %432 = add nsw i32 %431, %42... can share an output register with another operation already assigned to main_signed_add_32_6
  %432 = add nsw i32 %431, %42... can share an output register with another operation already assigned to main_signed_add_32_7
  %432 = add nsw i32 %431, %42... can share an output register with another operation already assigned to main_signed_add_32_8
  %432 = add nsw i32 %431, %42... can share an output register with another operation already assigned to main_signed_add_32_9
  %432 = add nsw i32 %431, %42... can share an output register with another operation already assigned to main_signed_add_32_10
  %432 = add nsw i32 %431, %42... can share an output register with another operation already assigned to main_signed_add_32_11
  %432 = add nsw i32 %431, %42... can share an output register with another operation already assigned to main_signed_add_32_12
  %432 = add nsw i32 %431, %42... can share an output register with another operation already assigned to main_signed_add_32_13
  %432 = add nsw i32 %431, %42... can share an output register with another operation already assigned to main_signed_add_32_14
  %432 = add nsw i32 %431, %42... can share an output register with another operation already assigned to main_signed_add_32_15
  %432 = add nsw i32 %431, %42... can share an output register with another operation already assigned to main_signed_add_32_16
  %432 = add nsw i32 %431, %42... can share an output register with another operation already assigned to main_signed_add_32_17
  %432 = add nsw i32 %431, %42... can share an output register with another operation already assigned to main_signed_add_32_18
  %434 = add nsw i32 %433, %43... can share an output register with another operation already assigned to main_signed_add_32_0
  %434 = add nsw i32 %433, %43... can share an output register with another operation already assigned to main_signed_add_32_1
  %434 = add nsw i32 %433, %43... can share an output register with another operation already assigned to main_signed_add_32_2
  %434 = add nsw i32 %433, %43... can share an output register with another operation already assigned to main_signed_add_32_3
  %434 = add nsw i32 %433, %43... can share an output register with another operation already assigned to main_signed_add_32_4
  %434 = add nsw i32 %433, %43... can share an output register with another operation already assigned to main_signed_add_32_5
  %434 = add nsw i32 %433, %43... can share an output register with another operation already assigned to main_signed_add_32_6
  %434 = add nsw i32 %433, %43... can share an output register with another operation already assigned to main_signed_add_32_7
  %434 = add nsw i32 %433, %43... can share an output register with another operation already assigned to main_signed_add_32_8
  %434 = add nsw i32 %433, %43... can share an output register with another operation already assigned to main_signed_add_32_9
  %434 = add nsw i32 %433, %43... can share an output register with another operation already assigned to main_signed_add_32_10
  %434 = add nsw i32 %433, %43... can share an output register with another operation already assigned to main_signed_add_32_11
  %434 = add nsw i32 %433, %43... can share an output register with another operation already assigned to main_signed_add_32_12
  %434 = add nsw i32 %433, %43... can share an output register with another operation already assigned to main_signed_add_32_13
  %434 = add nsw i32 %433, %43... can share an output register with another operation already assigned to main_signed_add_32_14
  %434 = add nsw i32 %433, %43... can share an output register with another operation already assigned to main_signed_add_32_15
  %434 = add nsw i32 %433, %43... can share an output register with another operation already assigned to main_signed_add_32_16
  %434 = add nsw i32 %433, %43... can share an output register with another operation already assigned to main_signed_add_32_17
  %434 = add nsw i32 %433, %43... can share an output register with another operation already assigned to main_signed_add_32_18
  %436 = add nsw i32 %435, %43... can share an output register with another operation already assigned to main_signed_add_32_0
  %436 = add nsw i32 %435, %43... can share an output register with another operation already assigned to main_signed_add_32_1
  %436 = add nsw i32 %435, %43... can share an output register with another operation already assigned to main_signed_add_32_2
  %436 = add nsw i32 %435, %43... can share an output register with another operation already assigned to main_signed_add_32_3
  %436 = add nsw i32 %435, %43... can share an output register with another operation already assigned to main_signed_add_32_4
  %436 = add nsw i32 %435, %43... can share an output register with another operation already assigned to main_signed_add_32_5
  %436 = add nsw i32 %435, %43... can share an output register with another operation already assigned to main_signed_add_32_6
  %436 = add nsw i32 %435, %43... can share an output register with another operation already assigned to main_signed_add_32_7
  %436 = add nsw i32 %435, %43... can share an output register with another operation already assigned to main_signed_add_32_8
  %436 = add nsw i32 %435, %43... can share an output register with another operation already assigned to main_signed_add_32_9
  %436 = add nsw i32 %435, %43... can share an output register with another operation already assigned to main_signed_add_32_10
  %436 = add nsw i32 %435, %43... can share an output register with another operation already assigned to main_signed_add_32_11
  %436 = add nsw i32 %435, %43... can share an output register with another operation already assigned to main_signed_add_32_12
  %436 = add nsw i32 %435, %43... can share an output register with another operation already assigned to main_signed_add_32_13
  %436 = add nsw i32 %435, %43... can share an output register with another operation already assigned to main_signed_add_32_14
  %436 = add nsw i32 %435, %43... can share an output register with another operation already assigned to main_signed_add_32_15
  %436 = add nsw i32 %435, %43... can share an output register with another operation already assigned to main_signed_add_32_16
  %436 = add nsw i32 %435, %43... can share an output register with another operation already assigned to main_signed_add_32_17
  %436 = add nsw i32 %435, %43... can share an output register with another operation already assigned to main_signed_add_32_18
  %438 = add nsw i32 %437, %43... can share an output register with another operation already assigned to main_signed_add_32_0
  %438 = add nsw i32 %437, %43... can share an output register with another operation already assigned to main_signed_add_32_1
  %438 = add nsw i32 %437, %43... can share an output register with another operation already assigned to main_signed_add_32_2
  %438 = add nsw i32 %437, %43... can share an output register with another operation already assigned to main_signed_add_32_3
  %438 = add nsw i32 %437, %43... can share an output register with another operation already assigned to main_signed_add_32_4
  %438 = add nsw i32 %437, %43... can share an output register with another operation already assigned to main_signed_add_32_5
  %438 = add nsw i32 %437, %43... can share an output register with another operation already assigned to main_signed_add_32_6
  %438 = add nsw i32 %437, %43... can share an output register with another operation already assigned to main_signed_add_32_7
  %438 = add nsw i32 %437, %43... can share an output register with another operation already assigned to main_signed_add_32_8
  %438 = add nsw i32 %437, %43... can share an output register with another operation already assigned to main_signed_add_32_9
  %438 = add nsw i32 %437, %43... can share an output register with another operation already assigned to main_signed_add_32_10
  %438 = add nsw i32 %437, %43... can share an output register with another operation already assigned to main_signed_add_32_11
  %438 = add nsw i32 %437, %43... can share an output register with another operation already assigned to main_signed_add_32_12
  %438 = add nsw i32 %437, %43... can share an output register with another operation already assigned to main_signed_add_32_13
  %438 = add nsw i32 %437, %43... can share an output register with another operation already assigned to main_signed_add_32_14
  %438 = add nsw i32 %437, %43... can share an output register with another operation already assigned to main_signed_add_32_15
  %438 = add nsw i32 %437, %43... can share an output register with another operation already assigned to main_signed_add_32_16
  %438 = add nsw i32 %437, %43... can share an output register with another operation already assigned to main_signed_add_32_17
  %438 = add nsw i32 %437, %43... can share an output register with another operation already assigned to main_signed_add_32_18
  %440 = add nsw i32 %439, %43... can share an output register with another operation already assigned to main_signed_add_32_0
  %440 = add nsw i32 %439, %43... can share an output register with another operation already assigned to main_signed_add_32_1
  %440 = add nsw i32 %439, %43... can share an output register with another operation already assigned to main_signed_add_32_2
  %440 = add nsw i32 %439, %43... can share an output register with another operation already assigned to main_signed_add_32_3
  %440 = add nsw i32 %439, %43... can share an output register with another operation already assigned to main_signed_add_32_4
  %440 = add nsw i32 %439, %43... can share an output register with another operation already assigned to main_signed_add_32_5
  %440 = add nsw i32 %439, %43... can share an output register with another operation already assigned to main_signed_add_32_6
  %440 = add nsw i32 %439, %43... can share an output register with another operation already assigned to main_signed_add_32_7
  %440 = add nsw i32 %439, %43... can share an output register with another operation already assigned to main_signed_add_32_8
  %440 = add nsw i32 %439, %43... can share an output register with another operation already assigned to main_signed_add_32_9
  %440 = add nsw i32 %439, %43... can share an output register with another operation already assigned to main_signed_add_32_10
  %440 = add nsw i32 %439, %43... can share an output register with another operation already assigned to main_signed_add_32_11
  %440 = add nsw i32 %439, %43... can share an output register with another operation already assigned to main_signed_add_32_12
  %440 = add nsw i32 %439, %43... can share an output register with another operation already assigned to main_signed_add_32_13
  %440 = add nsw i32 %439, %43... can share an output register with another operation already assigned to main_signed_add_32_14
  %440 = add nsw i32 %439, %43... can share an output register with another operation already assigned to main_signed_add_32_15
  %440 = add nsw i32 %439, %43... can share an output register with another operation already assigned to main_signed_add_32_16
  %440 = add nsw i32 %439, %43... can share an output register with another operation already assigned to main_signed_add_32_17
  %440 = add nsw i32 %439, %43... can share an output register with another operation already assigned to main_signed_add_32_18
  %442 = add nsw i32 %441, %43... can share an output register with another operation already assigned to main_signed_add_32_0
  %442 = add nsw i32 %441, %43... can share an output register with another operation already assigned to main_signed_add_32_1
  %442 = add nsw i32 %441, %43... can share an output register with another operation already assigned to main_signed_add_32_2
  %442 = add nsw i32 %441, %43... can share an output register with another operation already assigned to main_signed_add_32_3
  %442 = add nsw i32 %441, %43... can share an output register with another operation already assigned to main_signed_add_32_4
  %442 = add nsw i32 %441, %43... can share an output register with another operation already assigned to main_signed_add_32_5
  %442 = add nsw i32 %441, %43... can share an output register with another operation already assigned to main_signed_add_32_6
  %442 = add nsw i32 %441, %43... can share an output register with another operation already assigned to main_signed_add_32_7
  %442 = add nsw i32 %441, %43... can share an output register with another operation already assigned to main_signed_add_32_8
  %442 = add nsw i32 %441, %43... can share an output register with another operation already assigned to main_signed_add_32_9
  %442 = add nsw i32 %441, %43... can share an output register with another operation already assigned to main_signed_add_32_10
  %442 = add nsw i32 %441, %43... can share an output register with another operation already assigned to main_signed_add_32_11
  %442 = add nsw i32 %441, %43... can share an output register with another operation already assigned to main_signed_add_32_12
  %442 = add nsw i32 %441, %43... can share an output register with another operation already assigned to main_signed_add_32_13
  %442 = add nsw i32 %441, %43... can share an output register with another operation already assigned to main_signed_add_32_14
  %442 = add nsw i32 %441, %43... can share an output register with another operation already assigned to main_signed_add_32_15
  %442 = add nsw i32 %441, %43... can share an output register with another operation already assigned to main_signed_add_32_16
  %442 = add nsw i32 %441, %43... can share an output register with another operation already assigned to main_signed_add_32_17
  %442 = add nsw i32 %441, %43... can share an output register with another operation already assigned to main_signed_add_32_18
  %444 = add nsw i32 %443, %44... can share an output register with another operation already assigned to main_signed_add_32_0
  %444 = add nsw i32 %443, %44... can share an output register with another operation already assigned to main_signed_add_32_1
  %444 = add nsw i32 %443, %44... can share an output register with another operation already assigned to main_signed_add_32_2
  %444 = add nsw i32 %443, %44... can share an output register with another operation already assigned to main_signed_add_32_3
  %444 = add nsw i32 %443, %44... can share an output register with another operation already assigned to main_signed_add_32_4
  %444 = add nsw i32 %443, %44... can share an output register with another operation already assigned to main_signed_add_32_5
  %444 = add nsw i32 %443, %44... can share an output register with another operation already assigned to main_signed_add_32_6
  %444 = add nsw i32 %443, %44... can share an output register with another operation already assigned to main_signed_add_32_7
  %444 = add nsw i32 %443, %44... can share an output register with another operation already assigned to main_signed_add_32_8
  %444 = add nsw i32 %443, %44... can share an output register with another operation already assigned to main_signed_add_32_9
  %444 = add nsw i32 %443, %44... can share an output register with another operation already assigned to main_signed_add_32_10
  %444 = add nsw i32 %443, %44... can share an output register with another operation already assigned to main_signed_add_32_11
  %444 = add nsw i32 %443, %44... can share an output register with another operation already assigned to main_signed_add_32_12
  %444 = add nsw i32 %443, %44... can share an output register with another operation already assigned to main_signed_add_32_13
  %444 = add nsw i32 %443, %44... can share an output register with another operation already assigned to main_signed_add_32_14
  %444 = add nsw i32 %443, %44... can share an output register with another operation already assigned to main_signed_add_32_15
  %444 = add nsw i32 %443, %44... can share an output register with another operation already assigned to main_signed_add_32_16
  %444 = add nsw i32 %443, %44... can share an output register with another operation already assigned to main_signed_add_32_17
  %444 = add nsw i32 %443, %44... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %wd4.0.i.i = add nsw i32 %38... (idx: 0)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -870                          -40                           -60                           -80                           -210                          -170                          -300                          
  %396 = add nsw i32 %wd4.0.i.... (idx: 1)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -870                          -40                           -60                           -80                           -210                          -170                          -300                          
  %apl1.0.i.i = add nsw i32 %4... (idx: 2)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -870                          -40                           -60                           -80                           -210                          -170                          -300                          
  %414 = add nsw i32 %413, %41... (idx: 3)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -870                          -40                           -60                           -80                           -210                          -170                          -300                          
  %416 = add nsw i32 %415, %41... (idx: 4)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -870                          -40                           -60                           -80                           -210                          -170                          -300                          
  %418 = add nsw i32 %417, %41... (idx: 5)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -870                          -40                           -60                           -80                           -210                          -170                          -300                          
  %420 = add nsw i32 %419, %41... (idx: 6)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -870                          -40                           -60                           -80                           -210                          -170                          -300                          
  %422 = add nsw i32 %421, %41... (idx: 7)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -870                          -40                           -60                           -80                           -210                          -170                          -300                          
  %424 = add nsw i32 %423, %42... (idx: 8)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -870                          -40                           -60                           -80                           -210                          -170                          -300                          
  %426 = add nsw i32 %425, %42... (idx: 9)        -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -870                          -40                           -60                           -80                           -210                          -170                          -300                          
  %428 = add nsw i32 %427, %42... (idx: 10)       -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -870                          -40                           -60                           -80                           -210                          -170                          -300                          
  %430 = add nsw i32 %429, %42... (idx: 11)       -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -870                          -40                           -60                           -80                           -210                          -170                          -300                          
  %432 = add nsw i32 %431, %42... (idx: 12)       -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -870                          -40                           -60                           -80                           -210                          -170                          -300                          
  %434 = add nsw i32 %433, %43... (idx: 13)       -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -870                          -40                           -60                           -80                           -210                          -170                          -300                          
  %436 = add nsw i32 %435, %43... (idx: 14)       -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -870                          -40                           -60                           -80                           -210                          -170                          -300                          
  %438 = add nsw i32 %437, %43... (idx: 15)       -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -870                          -40                           -60                           -80                           -210                          -170                          -300                          
  %440 = add nsw i32 %439, %43... (idx: 16)       -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -870                          -40                           -60                           -80                           -210                          -170                          -300                          
  %442 = add nsw i32 %441, %43... (idx: 17)       -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -870                          -40                           -60                           -80                           -210                          -170                          -300                          
  %444 = add nsw i32 %443, %44... (idx: 18)       -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -870                          -40                           -60                           -80                           -210                          -170                          -300                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %wd4.0.i.i = add nsw i32 %38... (idx
  %396 = add nsw i32 %wd4.0.i.... (idx
  %apl1.0.i.i = add nsw i32 %4... (idx: 2)        0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %414 = add nsw i32 %413, %41... (idx
  %416 = add nsw i32 %415, %41... (idx
  %418 = add nsw i32 %417, %41... (idx
  %420 = add nsw i32 %419, %41... (idx
  %422 = add nsw i32 %421, %41... (idx
  %424 = add nsw i32 %423, %42... (idx
  %426 = add nsw i32 %425, %42... (idx
  %428 = add nsw i32 %427, %42... (idx
  %430 = add nsw i32 %429, %42... (idx
  %432 = add nsw i32 %431, %42... (idx
  %434 = add nsw i32 %433, %43... (idx: 13)       0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             
  %436 = add nsw i32 %435, %43... (idx
  %438 = add nsw i32 %437, %43... (idx
  %440 = add nsw i32 %439, %43... (idx
  %442 = add nsw i32 %441, %43... (idx
  %444 = add nsw i32 %443, %44... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %wd4.0.i.i = add nsw i32 %38... (idx: 0) -> main_signed_add_32_0 (mux inputs: 4)
  %396 = add nsw i32 %wd4.0.i.... (idx: 1) -> main_signed_add_32_1 (mux inputs: 4)
  %apl1.0.i.i = add nsw i32 %4... (idx: 2) -> main_signed_add_32_2 (mux inputs: 4)
  %414 = add nsw i32 %413, %41... (idx: 3) -> main_signed_add_32_3 (mux inputs: 4)
  %416 = add nsw i32 %415, %41... (idx: 4) -> main_signed_add_32_4 (mux inputs: 4)
  %418 = add nsw i32 %417, %41... (idx: 5) -> main_signed_add_32_5 (mux inputs: 4)
  %420 = add nsw i32 %419, %41... (idx: 6) -> main_signed_add_32_6 (mux inputs: 4)
  %422 = add nsw i32 %421, %41... (idx: 7) -> main_signed_add_32_7 (mux inputs: 4)
  %424 = add nsw i32 %423, %42... (idx: 8) -> main_signed_add_32_8 (mux inputs: 4)
  %426 = add nsw i32 %425, %42... (idx: 9) -> main_signed_add_32_9 (mux inputs: 4)
  %428 = add nsw i32 %427, %42... (idx: 10) -> main_signed_add_32_10 (mux inputs: 4)
  %430 = add nsw i32 %429, %42... (idx: 11) -> main_signed_add_32_11 (mux inputs: 4)
  %432 = add nsw i32 %431, %42... (idx: 12) -> main_signed_add_32_12 (mux inputs: 89)
  %434 = add nsw i32 %433, %43... (idx: 13) -> main_signed_add_32_13 (mux inputs: 6)
  %436 = add nsw i32 %435, %43... (idx: 14) -> main_signed_add_32_14 (mux inputs: 8)
  %438 = add nsw i32 %437, %43... (idx: 15) -> main_signed_add_32_15 (mux inputs: 10)
  %440 = add nsw i32 %439, %43... (idx: 16) -> main_signed_add_32_16 (mux inputs: 23)
  %442 = add nsw i32 %441, %43... (idx: 17) -> main_signed_add_32_17 (mux inputs: 19)
  %444 = add nsw i32 %443, %44... (idx: 18) -> main_signed_add_32_18 (mux inputs: 32)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: result_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_result_local_mem_dual_port_0
  store i32 %457, i32* %459, a... (idx: 0)        -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_result_local_mem_dual_port_0
  store i32 %457, i32* %459, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %457, i32* %459, a... (idx: 0) -> main_result_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %446 = add nsw i32 %445, %44... can share an output register with another operation already assigned to main_signed_add_32_0
  %446 = add nsw i32 %445, %44... can share an output register with another operation already assigned to main_signed_add_32_1
  %446 = add nsw i32 %445, %44... can share an output register with another operation already assigned to main_signed_add_32_2
  %446 = add nsw i32 %445, %44... can share an output register with another operation already assigned to main_signed_add_32_3
  %446 = add nsw i32 %445, %44... can share an output register with another operation already assigned to main_signed_add_32_4
  %446 = add nsw i32 %445, %44... can share an output register with another operation already assigned to main_signed_add_32_5
  %446 = add nsw i32 %445, %44... can share an output register with another operation already assigned to main_signed_add_32_6
  %446 = add nsw i32 %445, %44... can share an output register with another operation already assigned to main_signed_add_32_7
  %446 = add nsw i32 %445, %44... can share an output register with another operation already assigned to main_signed_add_32_8
  %446 = add nsw i32 %445, %44... can share an output register with another operation already assigned to main_signed_add_32_9
  %446 = add nsw i32 %445, %44... can share an output register with another operation already assigned to main_signed_add_32_10
  %446 = add nsw i32 %445, %44... can share an output register with another operation already assigned to main_signed_add_32_11
  %446 = add nsw i32 %445, %44... can share an output register with another operation already assigned to main_signed_add_32_12
  %446 = add nsw i32 %445, %44... can share an output register with another operation already assigned to main_signed_add_32_13
  %446 = add nsw i32 %445, %44... can share an output register with another operation already assigned to main_signed_add_32_14
  %446 = add nsw i32 %445, %44... can share an output register with another operation already assigned to main_signed_add_32_15
  %446 = add nsw i32 %445, %44... can share an output register with another operation already assigned to main_signed_add_32_16
  %446 = add nsw i32 %445, %44... can share an output register with another operation already assigned to main_signed_add_32_17
  %446 = add nsw i32 %445, %44... can share an output register with another operation already assigned to main_signed_add_32_18
  %448 = add nsw i32 %447, %44... can share an output register with another operation already assigned to main_signed_add_32_0
  %448 = add nsw i32 %447, %44... can share an output register with another operation already assigned to main_signed_add_32_1
  %448 = add nsw i32 %447, %44... can share an output register with another operation already assigned to main_signed_add_32_2
  %448 = add nsw i32 %447, %44... can share an output register with another operation already assigned to main_signed_add_32_3
  %448 = add nsw i32 %447, %44... can share an output register with another operation already assigned to main_signed_add_32_4
  %448 = add nsw i32 %447, %44... can share an output register with another operation already assigned to main_signed_add_32_5
  %448 = add nsw i32 %447, %44... can share an output register with another operation already assigned to main_signed_add_32_6
  %448 = add nsw i32 %447, %44... can share an output register with another operation already assigned to main_signed_add_32_7
  %448 = add nsw i32 %447, %44... can share an output register with another operation already assigned to main_signed_add_32_8
  %448 = add nsw i32 %447, %44... can share an output register with another operation already assigned to main_signed_add_32_9
  %448 = add nsw i32 %447, %44... can share an output register with another operation already assigned to main_signed_add_32_10
  %448 = add nsw i32 %447, %44... can share an output register with another operation already assigned to main_signed_add_32_11
  %448 = add nsw i32 %447, %44... can share an output register with another operation already assigned to main_signed_add_32_12
  %448 = add nsw i32 %447, %44... can share an output register with another operation already assigned to main_signed_add_32_13
  %448 = add nsw i32 %447, %44... can share an output register with another operation already assigned to main_signed_add_32_14
  %448 = add nsw i32 %447, %44... can share an output register with another operation already assigned to main_signed_add_32_15
  %448 = add nsw i32 %447, %44... can share an output register with another operation already assigned to main_signed_add_32_16
  %448 = add nsw i32 %447, %44... can share an output register with another operation already assigned to main_signed_add_32_17
  %448 = add nsw i32 %447, %44... can share an output register with another operation already assigned to main_signed_add_32_18
  %450 = add nsw i32 %449, %44... can share an output register with another operation already assigned to main_signed_add_32_0
  %450 = add nsw i32 %449, %44... can share an output register with another operation already assigned to main_signed_add_32_1
  %450 = add nsw i32 %449, %44... can share an output register with another operation already assigned to main_signed_add_32_2
  %450 = add nsw i32 %449, %44... can share an output register with another operation already assigned to main_signed_add_32_3
  %450 = add nsw i32 %449, %44... can share an output register with another operation already assigned to main_signed_add_32_4
  %450 = add nsw i32 %449, %44... can share an output register with another operation already assigned to main_signed_add_32_5
  %450 = add nsw i32 %449, %44... can share an output register with another operation already assigned to main_signed_add_32_6
  %450 = add nsw i32 %449, %44... can share an output register with another operation already assigned to main_signed_add_32_7
  %450 = add nsw i32 %449, %44... can share an output register with another operation already assigned to main_signed_add_32_8
  %450 = add nsw i32 %449, %44... can share an output register with another operation already assigned to main_signed_add_32_9
  %450 = add nsw i32 %449, %44... can share an output register with another operation already assigned to main_signed_add_32_10
  %450 = add nsw i32 %449, %44... can share an output register with another operation already assigned to main_signed_add_32_11
  %450 = add nsw i32 %449, %44... can share an output register with another operation already assigned to main_signed_add_32_12
  %450 = add nsw i32 %449, %44... can share an output register with another operation already assigned to main_signed_add_32_13
  %450 = add nsw i32 %449, %44... can share an output register with another operation already assigned to main_signed_add_32_14
  %450 = add nsw i32 %449, %44... can share an output register with another operation already assigned to main_signed_add_32_15
  %450 = add nsw i32 %449, %44... can share an output register with another operation already assigned to main_signed_add_32_16
  %450 = add nsw i32 %449, %44... can share an output register with another operation already assigned to main_signed_add_32_17
  %450 = add nsw i32 %449, %44... can share an output register with another operation already assigned to main_signed_add_32_18
  %452 = add nsw i32 %451, %44... can share an output register with another operation already assigned to main_signed_add_32_0
  %452 = add nsw i32 %451, %44... can share an output register with another operation already assigned to main_signed_add_32_1
  %452 = add nsw i32 %451, %44... can share an output register with another operation already assigned to main_signed_add_32_2
  %452 = add nsw i32 %451, %44... can share an output register with another operation already assigned to main_signed_add_32_3
  %452 = add nsw i32 %451, %44... can share an output register with another operation already assigned to main_signed_add_32_4
  %452 = add nsw i32 %451, %44... can share an output register with another operation already assigned to main_signed_add_32_5
  %452 = add nsw i32 %451, %44... can share an output register with another operation already assigned to main_signed_add_32_6
  %452 = add nsw i32 %451, %44... can share an output register with another operation already assigned to main_signed_add_32_7
  %452 = add nsw i32 %451, %44... can share an output register with another operation already assigned to main_signed_add_32_8
  %452 = add nsw i32 %451, %44... can share an output register with another operation already assigned to main_signed_add_32_9
  %452 = add nsw i32 %451, %44... can share an output register with another operation already assigned to main_signed_add_32_10
  %452 = add nsw i32 %451, %44... can share an output register with another operation already assigned to main_signed_add_32_11
  %452 = add nsw i32 %451, %44... can share an output register with another operation already assigned to main_signed_add_32_12
  %452 = add nsw i32 %451, %44... can share an output register with another operation already assigned to main_signed_add_32_13
  %452 = add nsw i32 %451, %44... can share an output register with another operation already assigned to main_signed_add_32_14
  %452 = add nsw i32 %451, %44... can share an output register with another operation already assigned to main_signed_add_32_15
  %452 = add nsw i32 %451, %44... can share an output register with another operation already assigned to main_signed_add_32_16
  %452 = add nsw i32 %451, %44... can share an output register with another operation already assigned to main_signed_add_32_17
  %452 = add nsw i32 %451, %44... can share an output register with another operation already assigned to main_signed_add_32_18
  %454 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_0
  %454 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_1
  %454 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_2
  %454 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_3
  %454 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_4
  %454 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_5
  %454 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_6
  %454 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_7
  %454 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_8
  %454 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_9
  %454 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_10
  %454 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_11
  %454 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_12
  %454 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_13
  %454 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_14
  %454 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_15
  %454 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_16
  %454 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_17
  %454 = add nsw i32 %453, %45... can share an output register with another operation already assigned to main_signed_add_32_18
  %456 = add nsw i32 %455, %45... can share an output register with another operation already assigned to main_signed_add_32_0
  %456 = add nsw i32 %455, %45... can share an output register with another operation already assigned to main_signed_add_32_1
  %456 = add nsw i32 %455, %45... can share an output register with another operation already assigned to main_signed_add_32_2
  %456 = add nsw i32 %455, %45... can share an output register with another operation already assigned to main_signed_add_32_3
  %456 = add nsw i32 %455, %45... can share an output register with another operation already assigned to main_signed_add_32_4
  %456 = add nsw i32 %455, %45... can share an output register with another operation already assigned to main_signed_add_32_5
  %456 = add nsw i32 %455, %45... can share an output register with another operation already assigned to main_signed_add_32_6
  %456 = add nsw i32 %455, %45... can share an output register with another operation already assigned to main_signed_add_32_7
  %456 = add nsw i32 %455, %45... can share an output register with another operation already assigned to main_signed_add_32_8
  %456 = add nsw i32 %455, %45... can share an output register with another operation already assigned to main_signed_add_32_9
  %456 = add nsw i32 %455, %45... can share an output register with another operation already assigned to main_signed_add_32_10
  %456 = add nsw i32 %455, %45... can share an output register with another operation already assigned to main_signed_add_32_11
  %456 = add nsw i32 %455, %45... can share an output register with another operation already assigned to main_signed_add_32_12
  %456 = add nsw i32 %455, %45... can share an output register with another operation already assigned to main_signed_add_32_13
  %456 = add nsw i32 %455, %45... can share an output register with another operation already assigned to main_signed_add_32_14
  %456 = add nsw i32 %455, %45... can share an output register with another operation already assigned to main_signed_add_32_15
  %456 = add nsw i32 %455, %45... can share an output register with another operation already assigned to main_signed_add_32_16
  %456 = add nsw i32 %455, %45... can share an output register with another operation already assigned to main_signed_add_32_17
  %456 = add nsw i32 %455, %45... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %446 = add nsw i32 %445, %44... (idx: 0)        -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -890                          -60                           -80                           -100                          -230                          -190                          -320                          
  %448 = add nsw i32 %447, %44... (idx: 1)        -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -890                          -60                           -80                           -100                          -230                          -190                          -320                          
  %450 = add nsw i32 %449, %44... (idx: 2)        -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -890                          -60                           -80                           -100                          -230                          -190                          -320                          
  %452 = add nsw i32 %451, %44... (idx: 3)        -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -890                          -60                           -80                           -100                          -230                          -190                          -320                          
  %454 = add nsw i32 %453, %45... (idx: 4)        -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -890                          -60                           -80                           -100                          -230                          -190                          -320                          
  %456 = add nsw i32 %455, %45... (idx: 5)        -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -890                          -60                           -80                           -100                          -230                          -190                          -320                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %446 = add nsw i32 %445, %44... (idx
  %448 = add nsw i32 %447, %44... (idx: 1)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             
  %450 = add nsw i32 %449, %44... (idx
  %452 = add nsw i32 %451, %44... (idx: 3)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             
  %454 = add nsw i32 %453, %45... (idx
  %456 = add nsw i32 %455, %45... (idx: 5)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %446 = add nsw i32 %445, %44... (idx: 0) -> main_signed_add_32_12 (mux inputs: 91)
  %456 = add nsw i32 %455, %45... (idx: 5) -> main_signed_add_32_14 (mux inputs: 10)
  %454 = add nsw i32 %453, %45... (idx: 4) -> main_signed_add_32_15 (mux inputs: 12)
  %450 = add nsw i32 %449, %44... (idx: 2) -> main_signed_add_32_16 (mux inputs: 25)
  %452 = add nsw i32 %451, %44... (idx: 3) -> main_signed_add_32_17 (mux inputs: 21)
  %448 = add nsw i32 %447, %44... (idx: 1) -> main_signed_add_32_18 (mux inputs: 34)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %404 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_0
  %404 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_1
  %406 = sub nsw i32 0, %404 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %406 = sub nsw i32 0, %404 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %404 = sub nsw i32 15360, %.... (idx: 0)        -165                          -65                           
  %406 = sub nsw i32 0, %404 (idx: 1)             -165                          -65                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %404 = sub nsw i32 15360, %.... (idx: 0)        1                             0                             
  %406 = sub nsw i32 0, %404 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %404 = sub nsw i32 15360, %.... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 18)
  %406 = sub nsw i32 0, %404 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 8)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: result_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %458, i32* %461, a... can share an output register with another operation already assigned to main_result_local_mem_dual_port_0
                                                  main_result_local_mem_dual_port_0
  store i32 %458, i32* %461, a... (idx: 0)        -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_result_local_mem_dual_port_0
  store i32 %458, i32* %461, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %458, i32* %461, a... (idx: 0) -> main_result_local_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB_adpcm_mainexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %470 = add nsw i32 %i.03, 1 (idx: 0)            -45                           -45                           -45                           -45                           -45                           -45                           -45                           -45                           -45                           -45                           -45                           -45                           -915                          -65                           -105                          -125                          -255                          -215                          -345                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %470 = add nsw i32 %i.03, 1 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %470 = add nsw i32 %i.03, 1 (idx: 0) -> main_signed_add_32_12 (mux inputs: 92)
State: LEGUP_F_main_BB_adpcm_mainexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_18
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep63 = add i32 %gep_int61,... (idx: 0)        -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -920                          -60                           -100                          -120                          -250                          -210                          -340                          
  %gep66 = add i32 %gep_int64,... (idx: 1)        -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -920                          -60                           -100                          -120                          -250                          -210                          -340                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep63 = add i32 %gep_int61,... (idx: 0)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             
  %gep66 = add i32 %gep_int64,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep63 = add i32 %gep_int61,... (idx: 0) -> main_signed_add_32_12 (mux inputs: 94)
  %gep66 = add i32 %gep_int64,... (idx: 1) -> main_signed_add_32_18 (mux inputs: 36)
State: LEGUP_F_main_BB_adpcm_mainexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %.main_result.0 = add nsw i3... (idx: 0)        -50                           -50                           -50                           -50                           -50                           -50                           -50                           -50                           -50                           -50                           -50                           -50                           -950                          -70                           -110                          -130                          -260                          -220                          -370                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %.main_result.0 = add nsw i3... (idx: 0)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.main_result.0 = add nsw i3... (idx: 0) -> main_signed_add_32_12 (mux inputs: 96)
State: LEGUP_F_main_BB_preheader
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %477 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_0
  %477 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_1
  %477 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_2
  %477 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_3
  %477 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_4
  %477 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_5
  %477 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_6
  %477 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_7
  %477 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_8
  %477 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_9
  %477 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_10
  %477 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_11
  %477 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_12
  %477 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_13
  %477 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_14
  %477 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_15
  %477 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_16
  %477 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_17
  %477 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %477 = add nsw i32 %i.11, 1 (idx: 0)            -35                           -35                           -35                           -35                           -35                           -35                           -35                           -35                           -35                           -35                           -35                           -35                           -955                          -55                           -95                           -115                          -245                          -205                          -355                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %477 = add nsw i32 %i.11, 1 (idx: 0)            0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %477 = add nsw i32 %i.11, 1 (idx: 0) -> main_signed_add_32_12 (mux inputs: 97)
State: LEGUP_F_main_BB_preheader
Binding functional unit type: result_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %472 = load i32* %471, align... can share an output register with another operation already assigned to main_result_local_mem_dual_port_0
                                                  main_result_local_mem_dual_port_0
  %472 = load i32* %471, align... (idx: 0)        -35                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_result_local_mem_dual_port_0
  %472 = load i32* %471, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %472 = load i32* %471, align... (idx: 0) -> main_result_local_mem_dual_port_0 (mux inputs: 5)
State: LEGUP_F_main_BB_preheader
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_18
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep69 = add i32 %gep_int67,... (idx: 0)        -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -970                          -60                           -100                          -120                          -250                          -210                          -360                          
  %gep72 = add i32 %gep_int70,... (idx: 1)        -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -970                          -60                           -100                          -120                          -250                          -210                          -360                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep69 = add i32 %gep_int67,... (idx
  %gep72 = add i32 %gep_int70,... (idx: 1)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep69 = add i32 %gep_int67,... (idx: 0) -> main_signed_add_32_12 (mux inputs: 99)
  %gep72 = add i32 %gep_int70,... (idx: 1) -> main_signed_add_32_18 (mux inputs: 38)
State: LEGUP_F_main_BB_preheader
Binding functional unit type: test_result_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_test_result_local_mem_dual_port_0
  %474 = load i32* %473, align... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_test_result_local_mem_dual_port_0
  %474 = load i32* %473, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %474 = load i32* %473, align... (idx: 0) -> main_test_result_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_preheader
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_0
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_1
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_2
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_3
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_4
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_5
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_6
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_7
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_8
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_9
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_10
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_11
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_12
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_13
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_14
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_15
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_16
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_17
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %.main_result.2 = add nsw i3... (idx: 0)        -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -40                           -990                          -60                           -100                          -120                          -250                          -210                          -380                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %.main_result.2 = add nsw i3... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.main_result.2 = add nsw i3... (idx: 0) -> main_signed_add_32_12 (mux inputs: 101)


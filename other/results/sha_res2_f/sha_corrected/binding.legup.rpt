//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Tue Jun 18 03:11:52 2019
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Jun 18 16:42:10 2019
//----------------------------------------------------------------------------//

--------------------------------------------------------------------------------
Function: main
--------------------------------------------------------------------------------
Function unit type:           Number Required               
indata_local_mem_dual_port    2                             
mem_dual_port                 2                             
signed_add_32                 6                             

Running Bipartite Weighted Matching on function: main
State: LEGUP_F_main_BB__crit_edge10i
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i1 true, i1* @sha_info... (idx: 0)        2                             2                             
  store i1 true, i1* @sha_info... (idx: 1)        2                             2                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i1 true, i1* @sha_info... (idx: 0)        1                             0                             
  store i1 true, i1* @sha_info... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i1 true, i1* @sha_info... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i1 true, i1* @sha_info... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__crit_edge10i
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i1 true, i1* @sha_info... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i1 true, i1* @sha_info... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i1 true, i1* @sha_info... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i1 true, i1* @sha_info... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i1 true, i1* @sha_info... (idx: 0)        12                            12                            
  store i1 true, i1* @sha_info... (idx: 1)        12                            12                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i1 true, i1* @sha_info... (idx: 0)        1                             0                             
  store i1 true, i1* @sha_info... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i1 true, i1* @sha_info... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i1 true, i1* @sha_info... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__crit_edge10i
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 -1009589776, i32* ... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 -1009589776, i32* ... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 -1009589776, i32* ... (idx: 0)        12                            12                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 -1009589776, i32* ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 -1009589776, i32* ... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: indata_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_indata_local_mem_dual_port_0main_indata_local_mem_dual_port_1
  %3 = load i8* %p2.01.i.i, al... (idx: 0)        95                            95                            
  %6 = load i8* %2, align 1, !... (idx: 1)        95                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_indata_local_mem_dual_port_0main_indata_local_mem_dual_port_1
  %3 = load i8* %p2.01.i.i, al... (idx: 0)        1                             0                             
  %6 = load i8* %2, align 1, !... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %3 = load i8* %p2.01.i.i, al... (idx: 0) -> main_indata_local_mem_dual_port_0 (mux inputs: 1)
  %6 = load i8* %2, align 1, !... (idx: 1) -> main_indata_local_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_main_BB__0
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          
  %1 = add nsw i32 %m.03.i.i, ... (idx: 0)        -3                            -4                            -3                            -3                            -3                            -3                            
  %gep = add i32 %gep_int, 1 (idx: 1)             -4                            -4                            -5                            -4                            -4                            -4                            
  %gep2 = add i32 %gep_int1, 2 (idx: 2)           -4                            -4                            -4                            -4                            -4                            -5                            
  %gep4 = add i32 %gep_int3, 3 (idx: 3)           -5                            -4                            -4                            -4                            -4                            -4                            
  %gep6 = add i32 %gep_int5, 4 (idx: 4)           -4                            -4                            -5                            -5                            -5                            -4                            
  %gep8 = add i32 %gep_int7, 4 (idx: 5)           -4                            -4                            -5                            -5                            -5                            -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          
  %1 = add nsw i32 %m.03.i.i, ... (idx: 0)        0                             1                             0                             0                             0                             0                             
  %gep = add i32 %gep_int, 1 (idx: 1)             0                             0                             1                             0                             0                             0                             
  %gep2 = add i32 %gep_int1, 2 (idx: 2)           0                             0                             0                             0                             0                             1                             
  %gep4 = add i32 %gep_int3, 3 (idx: 3)           1                             0                             0                             0                             0                             0                             
  %gep6 = add i32 %gep_int5, 4 (idx: 4)           0                             0                             0                             1                             0                             0                             
  %gep8 = add i32 %gep_int7, 4 (idx: 5)           0                             0                             0                             0                             1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep4 = add i32 %gep_int3, 3 (idx: 3) -> main_signed_add_32_0 (mux inputs: 1)
  %1 = add nsw i32 %m.03.i.i, ... (idx: 0) -> main_signed_add_32_1 (mux inputs: 1)
  %gep = add i32 %gep_int, 1 (idx: 1) -> main_signed_add_32_2 (mux inputs: 1)
  %gep6 = add i32 %gep_int5, 4 (idx: 4) -> main_signed_add_32_3 (mux inputs: 1)
  %gep8 = add i32 %gep_int7, 4 (idx: 5) -> main_signed_add_32_4 (mux inputs: 1)
  %gep2 = add i32 %gep_int1, 2 (idx: 2) -> main_signed_add_32_5 (mux inputs: 1)
State: LEGUP_F_main_BB__0
Binding functional unit type: indata_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %11 = load i8* %5, align 1, ... can share an output register with another operation already assigned to main_indata_local_mem_dual_port_0
  %11 = load i8* %5, align 1, ... can share an output register with another operation already assigned to main_indata_local_mem_dual_port_1
  %16 = load i8* %10, align 1,... can share an output register with another operation already assigned to main_indata_local_mem_dual_port_0
  %16 = load i8* %10, align 1,... can share an output register with another operation already assigned to main_indata_local_mem_dual_port_1
                                                  main_indata_local_mem_dual_port_0main_indata_local_mem_dual_port_1
  %11 = load i8* %5, align 1, ... (idx: 0)        95                            95                            
  %16 = load i8* %10, align 1,... (idx: 1)        95                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_indata_local_mem_dual_port_0main_indata_local_mem_dual_port_1
  %11 = load i8* %5, align 1, ... (idx: 0)        1                             0                             
  %16 = load i8* %10, align 1,... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %11 = load i8* %5, align 1, ... (idx: 0) -> main_indata_local_mem_dual_port_0 (mux inputs: 2)
  %16 = load i8* %10, align 1,... (idx: 1) -> main_indata_local_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %19, i32* %p1.02.i... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %19, i32* %p1.02.i... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %19, i32* %p1.02.i... (idx: 0)        1                             2                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %19, i32* %p1.02.i... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %19, i32* %p1.02.i... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_memcpyexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep10 = add i32 %gep_int9, ... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep10 = add i32 %gep_int9, ... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep10 = add i32 %gep_int9, ... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep10 = add i32 %gep_int9, ... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep10 = add i32 %gep_int9, ... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep10 = add i32 %gep_int9, ... can share an output register with another operation already assigned to main_signed_add_32_5
  %23 = add nsw i32 %.07.i, -6... can share an output register with another operation already assigned to main_signed_add_32_0
  %23 = add nsw i32 %.07.i, -6... can share an output register with another operation already assigned to main_signed_add_32_1
  %23 = add nsw i32 %.07.i, -6... can share an output register with another operation already assigned to main_signed_add_32_2
  %23 = add nsw i32 %.07.i, -6... can share an output register with another operation already assigned to main_signed_add_32_3
  %23 = add nsw i32 %.07.i, -6... can share an output register with another operation already assigned to main_signed_add_32_4
  %23 = add nsw i32 %.07.i, -6... can share an output register with another operation already assigned to main_signed_add_32_5
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          
  %gep10 = add i32 %gep_int9, ... (idx: 0)        -4                            -5                            -4                            -4                            -4                            -4                            
  %23 = add nsw i32 %.07.i, -6... (idx: 1)        -4                            -4                            -4                            -4                            -3                            -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          
  %gep10 = add i32 %gep_int9, ... (idx: 0)        0                             1                             0                             0                             0                             0                             
  %23 = add nsw i32 %.07.i, -6... (idx: 1)        1                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %23 = add nsw i32 %.07.i, -6... (idx: 1) -> main_signed_add_32_0 (mux inputs: 2)
  %gep10 = add i32 %gep_int9, ... (idx: 0) -> main_signed_add_32_1 (mux inputs: 2)
State: LEGUP_F_main_BB__25
Binding functional unit type: indata_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %28 = load i8* %p2.01.i.i11,... can share an output register with another operation already assigned to main_indata_local_mem_dual_port_0
  %28 = load i8* %p2.01.i.i11,... can share an output register with another operation already assigned to main_indata_local_mem_dual_port_1
  %31 = load i8* %27, align 1,... can share an output register with another operation already assigned to main_indata_local_mem_dual_port_0
  %31 = load i8* %27, align 1,... can share an output register with another operation already assigned to main_indata_local_mem_dual_port_1
                                                  main_indata_local_mem_dual_port_0main_indata_local_mem_dual_port_1
  %28 = load i8* %p2.01.i.i11,... (idx: 0)        85                            85                            
  %31 = load i8* %27, align 1,... (idx: 1)        85                            85                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_indata_local_mem_dual_port_0main_indata_local_mem_dual_port_1
  %28 = load i8* %p2.01.i.i11,... (idx: 0)        1                             0                             
  %31 = load i8* %27, align 1,... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %28 = load i8* %p2.01.i.i11,... (idx: 0) -> main_indata_local_mem_dual_port_0 (mux inputs: 3)
  %31 = load i8* %27, align 1,... (idx: 1) -> main_indata_local_mem_dual_port_1 (mux inputs: 3)
State: LEGUP_F_main_BB__25
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %26 = add nsw i32 %m.03.i.i9... can share an output register with another operation already assigned to main_signed_add_32_0
  %26 = add nsw i32 %m.03.i.i9... can share an output register with another operation already assigned to main_signed_add_32_1
  %26 = add nsw i32 %m.03.i.i9... can share an output register with another operation already assigned to main_signed_add_32_2
  %26 = add nsw i32 %m.03.i.i9... can share an output register with another operation already assigned to main_signed_add_32_3
  %26 = add nsw i32 %m.03.i.i9... can share an output register with another operation already assigned to main_signed_add_32_4
  %26 = add nsw i32 %m.03.i.i9... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep12 = add i32 %gep_int11,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep12 = add i32 %gep_int11,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep12 = add i32 %gep_int11,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep12 = add i32 %gep_int11,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep12 = add i32 %gep_int11,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep12 = add i32 %gep_int11,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep14 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep14 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep14 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep14 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep14 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep14 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep16 = add i32 %gep_int15,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep16 = add i32 %gep_int15,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep16 = add i32 %gep_int15,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep16 = add i32 %gep_int15,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep16 = add i32 %gep_int15,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep16 = add i32 %gep_int15,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep18 = add i32 %gep_int17,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep18 = add i32 %gep_int17,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep18 = add i32 %gep_int17,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep18 = add i32 %gep_int17,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep18 = add i32 %gep_int17,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep18 = add i32 %gep_int17,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep20 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep20 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep20 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep20 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep20 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep20 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_5
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          
  %26 = add nsw i32 %m.03.i.i9... (idx: 0)        -13                           -14                           -3                            -3                            -3                            -3                            
  %gep12 = add i32 %gep_int11,... (idx: 1)        -14                           -14                           -5                            -4                            -4                            -4                            
  %gep14 = add i32 %gep_int13,... (idx: 2)        -14                           -14                           -4                            -4                            -4                            -5                            
  %gep16 = add i32 %gep_int15,... (idx: 3)        -15                           -14                           -4                            -4                            -4                            -4                            
  %gep18 = add i32 %gep_int17,... (idx: 4)        -14                           -14                           -5                            -5                            -5                            -4                            
  %gep20 = add i32 %gep_int19,... (idx: 5)        -14                           -14                           -5                            -5                            -5                            -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          
  %26 = add nsw i32 %m.03.i.i9... (idx: 0)        0                             1                             0                             0                             0                             0                             
  %gep12 = add i32 %gep_int11,... (idx: 1)        0                             0                             1                             0                             0                             0                             
  %gep14 = add i32 %gep_int13,... (idx: 2)        0                             0                             0                             0                             0                             1                             
  %gep16 = add i32 %gep_int15,... (idx: 3)        1                             0                             0                             0                             0                             0                             
  %gep18 = add i32 %gep_int17,... (idx: 4)        0                             0                             0                             0                             1                             0                             
  %gep20 = add i32 %gep_int19,... (idx: 5)        0                             0                             0                             1                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep16 = add i32 %gep_int15,... (idx: 3) -> main_signed_add_32_0 (mux inputs: 3)
  %26 = add nsw i32 %m.03.i.i9... (idx: 0) -> main_signed_add_32_1 (mux inputs: 3)
  %gep12 = add i32 %gep_int11,... (idx: 1) -> main_signed_add_32_2 (mux inputs: 2)
  %gep20 = add i32 %gep_int19,... (idx: 5) -> main_signed_add_32_3 (mux inputs: 2)
  %gep18 = add i32 %gep_int17,... (idx: 4) -> main_signed_add_32_4 (mux inputs: 2)
  %gep14 = add i32 %gep_int13,... (idx: 2) -> main_signed_add_32_5 (mux inputs: 2)
State: LEGUP_F_main_BB__25
Binding functional unit type: indata_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %36 = load i8* %30, align 1,... can share an output register with another operation already assigned to main_indata_local_mem_dual_port_0
  %36 = load i8* %30, align 1,... can share an output register with another operation already assigned to main_indata_local_mem_dual_port_1
  %41 = load i8* %35, align 1,... can share an output register with another operation already assigned to main_indata_local_mem_dual_port_0
  %41 = load i8* %35, align 1,... can share an output register with another operation already assigned to main_indata_local_mem_dual_port_1
                                                  main_indata_local_mem_dual_port_0main_indata_local_mem_dual_port_1
  %36 = load i8* %30, align 1,... (idx: 0)        75                            75                            
  %41 = load i8* %35, align 1,... (idx: 1)        75                            75                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_indata_local_mem_dual_port_0main_indata_local_mem_dual_port_1
  %36 = load i8* %30, align 1,... (idx: 0)        1                             0                             
  %41 = load i8* %35, align 1,... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %36 = load i8* %30, align 1,... (idx: 0) -> main_indata_local_mem_dual_port_0 (mux inputs: 4)
  %41 = load i8* %35, align 1,... (idx: 1) -> main_indata_local_mem_dual_port_1 (mux inputs: 4)
State: LEGUP_F_main_BB__25
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %44, i32* %p1.02.i... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %44, i32* %p1.02.i... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %44, i32* %p1.02.i... (idx: 0)        -19                           1                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %44, i32* %p1.02.i... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %44, i32* %p1.02.i... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB_memcpyexiti12
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep22 = add i32 %gep_int21,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep22 = add i32 %gep_int21,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep22 = add i32 %gep_int21,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep22 = add i32 %gep_int21,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep22 = add i32 %gep_int21,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep22 = add i32 %gep_int21,... can share an output register with another operation already assigned to main_signed_add_32_5
  %48 = add nsw i32 %.07.i6, -... can share an output register with another operation already assigned to main_signed_add_32_0
  %48 = add nsw i32 %.07.i6, -... can share an output register with another operation already assigned to main_signed_add_32_1
  %48 = add nsw i32 %.07.i6, -... can share an output register with another operation already assigned to main_signed_add_32_2
  %48 = add nsw i32 %.07.i6, -... can share an output register with another operation already assigned to main_signed_add_32_3
  %48 = add nsw i32 %.07.i6, -... can share an output register with another operation already assigned to main_signed_add_32_4
  %48 = add nsw i32 %.07.i6, -... can share an output register with another operation already assigned to main_signed_add_32_5
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          
  %gep22 = add i32 %gep_int21,... (idx: 0)        -24                           -25                           -14                           -14                           -14                           -14                           
  %48 = add nsw i32 %.07.i6, -... (idx: 1)        -24                           -24                           -14                           -14                           -13                           -14                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          
  %gep22 = add i32 %gep_int21,... (idx: 0)        0                             1                             0                             0                             0                             0                             
  %48 = add nsw i32 %.07.i6, -... (idx: 1)        1                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %48 = add nsw i32 %.07.i6, -... (idx: 1) -> main_signed_add_32_0 (mux inputs: 4)
  %gep22 = add i32 %gep_int21,... (idx: 0) -> main_signed_add_32_1 (mux inputs: 4)
State: LEGUP_F_main_BB_lrphi8preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 128, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 128, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 128, i32* geteleme... (idx: 0)        -28                           12                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 128, i32* geteleme... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 128, i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB_lrphi8i
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* %p.11.i7.i... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* %p.11.i7.i... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* %p.11.i7.i... (idx: 0)        -34                           6                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* %p.11.i7.i... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* %p.11.i7.i... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 5)
State: LEGUP_F_main_BB_lrphi8i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep24 = add i32 %gep_int23,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep24 = add i32 %gep_int23,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep24 = add i32 %gep_int23,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep24 = add i32 %gep_int23,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep24 = add i32 %gep_int23,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep24 = add i32 %gep_int23,... can share an output register with another operation already assigned to main_signed_add_32_5
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          
  %50 = add nsw i32 %m.02.i6.i... (idx: 0)        -43                           -44                           -23                           -23                           -23                           -23                           
  %gep24 = add i32 %gep_int23,... (idx: 1)        -34                           -34                           -15                           -15                           -15                           -14                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          
  %50 = add nsw i32 %m.02.i6.i... (idx: 0)        0                             1                             0                             0                             0                             0                             
  %gep24 = add i32 %gep_int23,... (idx: 1)        1                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep24 = add i32 %gep_int23,... (idx: 1) -> main_signed_add_32_0 (mux inputs: 5)
  %50 = add nsw i32 %m.02.i6.i... (idx: 0) -> main_signed_add_32_1 (mux inputs: 5)
State: LEGUP_F_main_BB__53
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 131072, i32* getel... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 131072, i32* getel... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -39                           11                            
  store i32 131072, i32* getel... (idx: 1)        -38                           12                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 131072, i32* getel... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 5)
  store i32 131072, i32* getel... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__53
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %54 = load i32* @sha_info_di... can share an output register with another operation already assigned to main_mem_dual_port_0
  %54 = load i32* @sha_info_di... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %54 = load i32* @sha_info_di... (idx: 0)        -39                           11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %54 = load i32* @sha_info_di... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %54 = load i32* @sha_info_di... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 5)


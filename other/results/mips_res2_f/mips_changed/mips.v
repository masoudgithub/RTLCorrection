//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sun Jun 23 10:54:09 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 3
`define MEMORY_CONTROLLER_TAG_SIZE 9

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	return_val
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_main_BB__0_1 = 7'd1;
parameter [6:0] LEGUP_F_main_BB__1_2 = 7'd2;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4exitpreheader_3 = 7'd3;
parameter [6:0] LEGUP_F_main_BB__2_4 = 7'd4;
parameter [6:0] LEGUP_F_main_BB__2_5 = 7'd5;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4exit_6 = 7'd6;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4exit_7 = 7'd7;
parameter [6:0] LEGUP_F_main_BB_preheader14_8 = 7'd8;
parameter [6:0] LEGUP_F_main_BB_preheader14_9 = 7'd9;
parameter [6:0] LEGUP_F_main_BB_preheader14_10 = 7'd10;
parameter [6:0] LEGUP_F_main_BB_preheader14_11 = 7'd11;
parameter [6:0] LEGUP_F_main_BB_preheader14_12 = 7'd12;
parameter [6:0] LEGUP_F_main_BB__15_13 = 7'd13;
parameter [6:0] LEGUP_F_main_BB__15_14 = 7'd14;
parameter [6:0] LEGUP_F_main_BB__23_15 = 7'd15;
parameter [6:0] LEGUP_F_main_BB__33_16 = 7'd16;
parameter [6:0] LEGUP_F_main_BB__33_17 = 7'd17;
parameter [6:0] LEGUP_F_main_BB__33_18 = 7'd18;
parameter [6:0] LEGUP_F_main_BB__33_19 = 7'd19;
parameter [6:0] LEGUP_F_main_BB__42_20 = 7'd20;
parameter [6:0] LEGUP_F_main_BB__42_21 = 7'd21;
parameter [6:0] LEGUP_F_main_BB__42_22 = 7'd22;
parameter [6:0] LEGUP_F_main_BB__42_23 = 7'd23;
parameter [6:0] LEGUP_F_main_BB__51_24 = 7'd24;
parameter [6:0] LEGUP_F_main_BB__51_25 = 7'd25;
parameter [6:0] LEGUP_F_main_BB__51_26 = 7'd26;
parameter [6:0] LEGUP_F_main_BB__66_27 = 7'd27;
parameter [6:0] LEGUP_F_main_BB__66_28 = 7'd28;
parameter [6:0] LEGUP_F_main_BB__66_29 = 7'd29;
parameter [6:0] LEGUP_F_main_BB__77_30 = 7'd30;
parameter [6:0] LEGUP_F_main_BB__77_31 = 7'd31;
parameter [6:0] LEGUP_F_main_BB__79_32 = 7'd32;
parameter [6:0] LEGUP_F_main_BB__79_33 = 7'd33;
parameter [6:0] LEGUP_F_main_BB__81_34 = 7'd34;
parameter [6:0] LEGUP_F_main_BB__81_35 = 7'd35;
parameter [6:0] LEGUP_F_main_BB__81_36 = 7'd36;
parameter [6:0] LEGUP_F_main_BB__88_37 = 7'd37;
parameter [6:0] LEGUP_F_main_BB__88_38 = 7'd38;
parameter [6:0] LEGUP_F_main_BB__88_39 = 7'd39;
parameter [6:0] LEGUP_F_main_BB__95_40 = 7'd40;
parameter [6:0] LEGUP_F_main_BB__95_41 = 7'd41;
parameter [6:0] LEGUP_F_main_BB__95_42 = 7'd42;
parameter [6:0] LEGUP_F_main_BB__102_43 = 7'd43;
parameter [6:0] LEGUP_F_main_BB__102_44 = 7'd44;
parameter [6:0] LEGUP_F_main_BB__102_45 = 7'd45;
parameter [6:0] LEGUP_F_main_BB__107_46 = 7'd46;
parameter [6:0] LEGUP_F_main_BB__107_47 = 7'd47;
parameter [6:0] LEGUP_F_main_BB__107_48 = 7'd48;
parameter [6:0] LEGUP_F_main_BB__112_49 = 7'd49;
parameter [6:0] LEGUP_F_main_BB__112_50 = 7'd50;
parameter [6:0] LEGUP_F_main_BB__112_51 = 7'd51;
parameter [6:0] LEGUP_F_main_BB__119_52 = 7'd52;
parameter [6:0] LEGUP_F_main_BB__119_53 = 7'd53;
parameter [6:0] LEGUP_F_main_BB__119_54 = 7'd54;
parameter [6:0] LEGUP_F_main_BB__126_55 = 7'd55;
parameter [6:0] LEGUP_F_main_BB__126_56 = 7'd56;
parameter [6:0] LEGUP_F_main_BB__126_57 = 7'd57;
parameter [6:0] LEGUP_F_main_BB__134_58 = 7'd58;
parameter [6:0] LEGUP_F_main_BB__134_59 = 7'd59;
parameter [6:0] LEGUP_F_main_BB__134_60 = 7'd60;
parameter [6:0] LEGUP_F_main_BB__142_61 = 7'd61;
parameter [6:0] LEGUP_F_main_BB__142_62 = 7'd62;
parameter [6:0] LEGUP_F_main_BB__145_63 = 7'd63;
parameter [6:0] LEGUP_F_main_BB__148_64 = 7'd64;
parameter [6:0] LEGUP_F_main_BB__148_65 = 7'd65;
parameter [6:0] LEGUP_F_main_BB__151_66 = 7'd66;
parameter [6:0] LEGUP_F_main_BB__156_67 = 7'd67;
parameter [6:0] LEGUP_F_main_BB__156_68 = 7'd68;
parameter [6:0] LEGUP_F_main_BB__156_69 = 7'd69;
parameter [6:0] LEGUP_F_main_BB__162_70 = 7'd70;
parameter [6:0] LEGUP_F_main_BB__162_71 = 7'd71;
parameter [6:0] LEGUP_F_main_BB__162_72 = 7'd72;
parameter [6:0] LEGUP_F_main_BB__168_73 = 7'd73;
parameter [6:0] LEGUP_F_main_BB__168_74 = 7'd74;
parameter [6:0] LEGUP_F_main_BB__168_75 = 7'd75;
parameter [6:0] LEGUP_F_main_BB__174_76 = 7'd76;
parameter [6:0] LEGUP_F_main_BB__174_77 = 7'd77;
parameter [6:0] LEGUP_F_main_BB__174_78 = 7'd78;
parameter [6:0] LEGUP_F_main_BB__180_79 = 7'd79;
parameter [6:0] LEGUP_F_main_BB__180_80 = 7'd80;
parameter [6:0] LEGUP_F_main_BB__180_81 = 7'd81;
parameter [6:0] LEGUP_F_main_BB__180_82 = 7'd82;
parameter [6:0] LEGUP_F_main_BB__180_83 = 7'd83;
parameter [6:0] LEGUP_F_main_BB__189_84 = 7'd84;
parameter [6:0] LEGUP_F_main_BB__189_85 = 7'd85;
parameter [6:0] LEGUP_F_main_BB__189_86 = 7'd86;
parameter [6:0] LEGUP_F_main_BB__189_87 = 7'd87;
parameter [6:0] LEGUP_F_main_BB__198_88 = 7'd88;
parameter [6:0] LEGUP_F_main_BB__198_89 = 7'd89;
parameter [6:0] LEGUP_F_main_BB__200_90 = 7'd90;
parameter [6:0] LEGUP_F_main_BB__200_91 = 7'd91;
parameter [6:0] LEGUP_F_main_BB__206_92 = 7'd92;
parameter [6:0] LEGUP_F_main_BB__209_93 = 7'd93;
parameter [6:0] LEGUP_F_main_BB__209_94 = 7'd94;
parameter [6:0] LEGUP_F_main_BB__215_95 = 7'd95;
parameter [6:0] LEGUP_F_main_BB__218_96 = 7'd96;
parameter [6:0] LEGUP_F_main_BB__218_97 = 7'd97;
parameter [6:0] LEGUP_F_main_BB__222_98 = 7'd98;
parameter [6:0] LEGUP_F_main_BB__225_99 = 7'd99;
parameter [6:0] LEGUP_F_main_BB__225_100 = 7'd100;
parameter [6:0] LEGUP_F_main_BB__225_101 = 7'd101;
parameter [6:0] LEGUP_F_main_BB__232_102 = 7'd102;
parameter [6:0] LEGUP_F_main_BB__232_103 = 7'd103;
parameter [6:0] LEGUP_F_main_BB__232_104 = 7'd104;
parameter [6:0] LEGUP_F_main_BB_thread_105 = 7'd105;
parameter [6:0] LEGUP_F_main_BB_thread_106 = 7'd106;
parameter [6:0] LEGUP_F_main_BB__239_107 = 7'd107;
parameter [6:0] LEGUP_F_main_BB__239_108 = 7'd108;
parameter [6:0] LEGUP_F_main_BB_loopexitloopexit_109 = 7'd109;
parameter [6:0] LEGUP_F_main_BB_loopexit_110 = 7'd110;
parameter [6:0] LEGUP_F_main_BB_loopexit_111 = 7'd111;
parameter [6:0] LEGUP_F_main_BB_loopexit_112 = 7'd112;
parameter [6:0] LEGUP_F_main_BB_loopexit_113 = 7'd113;
parameter [6:0] LEGUP_F_main_BB_loopexit_114 = 7'd114;
parameter [6:0] LEGUP_F_main_BB__278_115 = 7'd115;
parameter [6:0] LEGUP_F_main_BB__280_116 = 7'd116;
parameter [6:0] LEGUP_F_main_BB__282_117 = 7'd117;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [6:0] cur_state;
reg [6:0] next_state;
reg [31:0] main_1_indvar;
reg [31:0] main_1_indvar_reg;
reg  main_1_exitcond;
reg  main_1_exitcond_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_si0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_si0_reg;
reg [31:0] main_2_indvarnext;
reg [31:0] main_2_indvarnext_reg;
reg [31:0] main_legup_memset_4exit_i012;
reg [31:0] main_legup_memset_4exit_i012_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_scevgep_reg;
reg [31:0] main_legup_memset_4exit_3;
reg [31:0] main_legup_memset_4exit_3_reg;
reg  main_legup_memset_4exit_exitcond1;
reg  main_legup_memset_4exit_exitcond1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14_14_reg;
reg [31:0] main_15_pc0;
reg [31:0] main_15_pc0_reg;
reg [31:0] main_15_Lo0;
reg [31:0] main_15_Lo0_reg;
reg [31:0] main_15_Hi0;
reg [31:0] main_15_Hi0_reg;
reg [31:0] main_15_16;
reg [31:0] main_15_16_reg;
reg [31:0] main_15_17;
reg [31:0] main_15_17_reg;
reg [31:0] main_15_18;
reg [31:0] main_15_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_15_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_15_19_reg;
reg [31:0] main_15_20;
reg [31:0] main_15_20_reg;
reg [31:0] main_15_21;
reg [31:0] main_15_21_reg;
reg [31:0] main_15_22;
reg [31:0] main_15_22_reg;
reg [31:0] main_23_24;
reg [31:0] main_23_24_reg;
reg [31:0] main_23_25;
reg [31:0] main_23_25_reg;
reg [31:0] main_23_26;
reg [31:0] main_23_26_reg;
reg [31:0] main_23_27;
reg [31:0] main_23_27_reg;
reg [31:0] main_23_28;
reg [31:0] main_23_28_reg;
reg [31:0] main_23_29;
reg [31:0] main_23_29_reg;
reg [31:0] main_23_30;
reg [31:0] main_23_30_reg;
reg [31:0] main_23_31;
reg [31:0] main_23_31_reg;
reg [31:0] main_23_32;
reg [31:0] main_23_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_34_reg;
reg [31:0] main_33_35;
reg [31:0] main_33_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_36_reg;
reg [31:0] main_33_37;
reg [31:0] main_33_37_reg;
reg [31:0] main_33_38;
reg [31:0] main_33_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_39_reg;
reg [31:0] main_33_40;
reg [31:0] main_33_40_reg;
reg [31:0] main_33_41;
reg [31:0] main_33_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_42_43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_42_43_reg;
reg [31:0] main_42_44;
reg [31:0] main_42_44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_42_45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_42_45_reg;
reg [31:0] main_42_46;
reg [31:0] main_42_46_reg;
reg [31:0] main_42_47;
reg [31:0] main_42_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_42_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_42_48_reg;
reg [31:0] main_42_49;
reg [31:0] main_42_49_reg;
reg [31:0] main_42_50;
reg [31:0] main_42_50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_51_52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_51_52_reg;
reg [31:0] main_51_53;
reg [31:0] main_51_53_reg;
reg [63:0] main_51_54;
reg [63:0] main_51_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_51_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_51_55_reg;
reg [31:0] main_51_56;
reg [31:0] main_51_56_reg;
reg [63:0] main_51_57;
reg [63:0] main_51_57_reg;
reg [63:0] main_51_58;
reg [63:0] main_51_58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_51_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_51_59_reg;
reg [31:0] main_51_60;
reg [31:0] main_51_60_reg;
reg [63:0] main_51_61;
reg [63:0] main_51_61_reg;
reg [63:0] main_51_62;
reg [63:0] main_51_62_reg;
reg [31:0] main_51_63;
reg [31:0] main_51_63_reg;
reg [63:0] main_51_64;
reg [63:0] main_51_64_reg;
reg [31:0] main_51_65;
reg [31:0] main_51_65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_66_67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_66_67_reg;
reg [31:0] main_66_68;
reg [31:0] main_66_68_reg;
reg [63:0] main_66_69;
reg [63:0] main_66_69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_66_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_66_70_reg;
reg [31:0] main_66_71;
reg [31:0] main_66_71_reg;
reg [63:0] main_66_72;
reg [63:0] main_66_72_reg;
reg [63:0] main_66_73;
reg [63:0] main_66_73_reg;
reg [31:0] main_66_74;
reg [31:0] main_66_74_reg;
reg [63:0] main_66_75;
reg [63:0] main_66_75_reg;
reg [31:0] main_66_76;
reg [31:0] main_66_76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_77_78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_77_78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_79_80;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_79_80_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_81_82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_81_82_reg;
reg [31:0] main_81_83;
reg [31:0] main_81_83_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_81_84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_81_84_reg;
reg [31:0] main_81_85;
reg [31:0] main_81_85_reg;
reg [31:0] main_81_86;
reg [31:0] main_81_86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_81_87;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_81_87_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_88_89;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_88_89_reg;
reg [31:0] main_88_90;
reg [31:0] main_88_90_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_88_91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_88_91_reg;
reg [31:0] main_88_92;
reg [31:0] main_88_92_reg;
reg [31:0] main_88_93;
reg [31:0] main_88_93_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_88_94;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_88_94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_95_96;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_95_96_reg;
reg [31:0] main_95_97;
reg [31:0] main_95_97_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_95_98;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_95_98_reg;
reg [31:0] main_95_99;
reg [31:0] main_95_99_reg;
reg [31:0] main_95_100;
reg [31:0] main_95_100_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_95_101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_95_101_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_102_103;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_102_103_reg;
reg [31:0] main_102_104;
reg [31:0] main_102_104_reg;
reg [31:0] main_102_105;
reg [31:0] main_102_105_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_102_106;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_102_106_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_107_108;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_107_108_reg;
reg [31:0] main_107_109;
reg [31:0] main_107_109_reg;
reg [31:0] main_107_110;
reg [31:0] main_107_110_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_107_111;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_107_111_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_112_113;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_112_113_reg;
reg [31:0] main_112_114;
reg [31:0] main_112_114_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_112_115;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_112_115_reg;
reg [31:0] main_112_116;
reg [31:0] main_112_116_reg;
reg [31:0] main_112_117;
reg [31:0] main_112_117_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_112_118;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_112_118_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_120;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_120_reg;
reg [31:0] main_119_121;
reg [31:0] main_119_121_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_122;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_122_reg;
reg [31:0] main_119_123;
reg [31:0] main_119_123_reg;
reg [31:0] main_119_124;
reg [31:0] main_119_124_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_125;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_125_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_126_127;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_126_127_reg;
reg [31:0] main_126_128;
reg [31:0] main_126_128_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_126_129;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_126_129_reg;
reg [31:0] main_126_130;
reg [31:0] main_126_130_reg;
reg  main_126_131;
reg  main_126_131_reg;
reg [31:0] main_126_132;
reg [31:0] main_126_132_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_126_133;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_126_133_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_134_135;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_134_135_reg;
reg [31:0] main_134_136;
reg [31:0] main_134_136_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_134_137;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_134_137_reg;
reg [31:0] main_134_138;
reg [31:0] main_134_138_reg;
reg  main_134_139;
reg  main_134_139_reg;
reg [31:0] main_134_140;
reg [31:0] main_134_140_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_134_141;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_134_141_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_142_143;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_142_143_reg;
reg [31:0] main_142_144;
reg [31:0] main_142_144_reg;
reg [31:0] main_145_146;
reg [31:0] main_145_146_reg;
reg [31:0] main_145_147;
reg [31:0] main_145_147_reg;
reg [31:0] main_148_149;
reg [31:0] main_148_149_reg;
reg [31:0] main_148_150;
reg [31:0] main_148_150_reg;
reg [31:0] main_151_152;
reg [31:0] main_151_152_reg;
reg [31:0] main_151_153;
reg [31:0] main_151_153_reg;
reg [31:0] main_151_154;
reg [31:0] main_151_154_reg;
reg [31:0] main_151_155;
reg [31:0] main_151_155_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_156_157;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_156_157_reg;
reg [31:0] main_156_158;
reg [31:0] main_156_158_reg;
reg [31:0] main_156_sext7;
reg [31:0] main_156_sext7_reg;
reg [31:0] main_156_159;
reg [31:0] main_156_159_reg;
reg [31:0] main_156_160;
reg [31:0] main_156_160_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_156_161;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_156_161_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_162_163;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_162_163_reg;
reg [31:0] main_162_164;
reg [31:0] main_162_164_reg;
reg [31:0] main_162_165;
reg [31:0] main_162_165_reg;
reg [31:0] main_162_166;
reg [31:0] main_162_166_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_162_167;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_162_167_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_168_169;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_168_169_reg;
reg [31:0] main_168_170;
reg [31:0] main_168_170_reg;
reg [31:0] main_168_171;
reg [31:0] main_168_171_reg;
reg [31:0] main_168_172;
reg [31:0] main_168_172_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_168_173;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_168_173_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_174_175;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_174_175_reg;
reg [31:0] main_174_176;
reg [31:0] main_174_176_reg;
reg [31:0] main_174_177;
reg [31:0] main_174_177_reg;
reg [31:0] main_174_178;
reg [31:0] main_174_178_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_174_179;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_174_179_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_180_181;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_180_181_reg;
reg [31:0] main_180_182;
reg [31:0] main_180_182_reg;
reg [31:0] main_180_183;
reg [31:0] main_180_183_reg;
reg [31:0] main_180_184;
reg [31:0] main_180_184_reg;
reg [31:0] main_180_185;
reg [31:0] main_180_185_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_180_186;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_180_186_reg;
reg [31:0] main_180_187;
reg [31:0] main_180_187_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_180_188;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_180_188_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_189_190;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_189_190_reg;
reg [31:0] main_189_191;
reg [31:0] main_189_191_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_189_192;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_189_192_reg;
reg [31:0] main_189_193;
reg [31:0] main_189_193_reg;
reg [31:0] main_189_194;
reg [31:0] main_189_194_reg;
reg [31:0] main_189_195;
reg [31:0] main_189_195_reg;
reg [31:0] main_189_196;
reg [31:0] main_189_196_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_189_197;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_189_197_reg;
reg [31:0] main_198_sext4;
reg [31:0] main_198_sext4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_198_199;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_198_199_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_200_201;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_200_201_reg;
reg [31:0] main_200_202;
reg [31:0] main_200_202_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_200_203;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_200_203_reg;
reg [31:0] main_200_204;
reg [31:0] main_200_204_reg;
reg  main_200_205;
reg  main_200_205_reg;
reg [31:0] main_206_sext3;
reg [31:0] main_206_sext3_reg;
reg [31:0] main_206_207;
reg [31:0] main_206_207_reg;
reg [31:0] main_206_208;
reg [31:0] main_206_208_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_209_210;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_209_210_reg;
reg [31:0] main_209_211;
reg [31:0] main_209_211_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_209_212;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_209_212_reg;
reg [31:0] main_209_213;
reg [31:0] main_209_213_reg;
reg  main_209_214;
reg  main_209_214_reg;
reg [31:0] main_215_sext2;
reg [31:0] main_215_sext2_reg;
reg [31:0] main_215_216;
reg [31:0] main_215_216_reg;
reg [31:0] main_215_217;
reg [31:0] main_215_217_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_218_219;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_218_219_reg;
reg [31:0] main_218_220;
reg [31:0] main_218_220_reg;
reg  main_218_221;
reg  main_218_221_reg;
reg [31:0] main_222_sext1;
reg [31:0] main_222_sext1_reg;
reg [31:0] main_222_223;
reg [31:0] main_222_223_reg;
reg [31:0] main_222_224;
reg [31:0] main_222_224_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_225_226;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_225_226_reg;
reg [31:0] main_225_227;
reg [31:0] main_225_227_reg;
reg [31:0] main_225_sext;
reg [31:0] main_225_sext_reg;
reg [31:0] main_225_228;
reg [31:0] main_225_228_reg;
reg  main_225_229;
reg  main_225_229_reg;
reg [31:0] main_225_230;
reg [31:0] main_225_230_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_225_231;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_225_231_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_232_233;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_232_233_reg;
reg [31:0] main_232_234;
reg [31:0] main_232_234_reg;
reg [31:0] main_232_235;
reg [31:0] main_232_235_reg;
reg  main_232_236;
reg  main_232_236_reg;
reg [31:0] main_232_237;
reg [31:0] main_232_237_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_232_238;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_232_238_reg;
reg [31:0] main_239_pc1;
reg [31:0] main_239_pc1_reg;
reg [31:0] main_239_Lo1;
reg [31:0] main_239_Lo1_reg;
reg [31:0] main_239_Hi1;
reg [31:0] main_239_Hi1_reg;
reg [31:0] main_239_240;
reg [31:0] main_239_240_reg;
reg  main_239_241;
reg  main_239_241_reg;
reg  main_loopexit_242;
reg  main_loopexit_242_reg;
reg [31:0] main_loopexit_243;
reg [31:0] main_loopexit_243_reg;
reg [31:0] main_loopexit_244;
reg [31:0] main_loopexit_244_reg;
reg  main_loopexit_245;
reg  main_loopexit_245_reg;
reg [31:0] main_loopexit_246;
reg [31:0] main_loopexit_246_reg;
reg [31:0] main_loopexit_247;
reg [31:0] main_loopexit_247_reg;
reg [31:0] main_loopexit_248;
reg [31:0] main_loopexit_248_reg;
reg  main_loopexit_249;
reg  main_loopexit_249_reg;
reg [31:0] main_loopexit_250;
reg [31:0] main_loopexit_250_reg;
reg [31:0] main_loopexit_251;
reg [31:0] main_loopexit_251_reg;
reg [31:0] main_loopexit_252;
reg [31:0] main_loopexit_252_reg;
reg  main_loopexit_253;
reg  main_loopexit_253_reg;
reg [31:0] main_loopexit_254;
reg [31:0] main_loopexit_254_reg;
reg [31:0] main_loopexit_255;
reg [31:0] main_loopexit_255_reg;
reg [31:0] main_loopexit_256;
reg [31:0] main_loopexit_256_reg;
reg  main_loopexit_257;
reg  main_loopexit_257_reg;
reg [31:0] main_loopexit_258;
reg [31:0] main_loopexit_258_reg;
reg [31:0] main_loopexit_259;
reg [31:0] main_loopexit_259_reg;
reg [31:0] main_loopexit_260;
reg [31:0] main_loopexit_260_reg;
reg  main_loopexit_261;
reg  main_loopexit_261_reg;
reg [31:0] main_loopexit_262;
reg [31:0] main_loopexit_262_reg;
reg [31:0] main_loopexit_263;
reg [31:0] main_loopexit_263_reg;
reg [31:0] main_loopexit_264;
reg [31:0] main_loopexit_264_reg;
reg  main_loopexit_265;
reg  main_loopexit_265_reg;
reg [31:0] main_loopexit_266;
reg [31:0] main_loopexit_266_reg;
reg [31:0] main_loopexit_267;
reg [31:0] main_loopexit_267_reg;
reg [31:0] main_loopexit_268;
reg [31:0] main_loopexit_268_reg;
reg  main_loopexit_269;
reg  main_loopexit_269_reg;
reg [31:0] main_loopexit_270;
reg [31:0] main_loopexit_270_reg;
reg [31:0] main_loopexit_271;
reg [31:0] main_loopexit_271_reg;
reg [31:0] main_loopexit_272;
reg [31:0] main_loopexit_272_reg;
reg  main_loopexit_273;
reg  main_loopexit_273_reg;
reg [31:0] main_loopexit_274;
reg [31:0] main_loopexit_274_reg;
reg [31:0] main_loopexit_275;
reg [31:0] main_loopexit_275_reg;
reg  main_loopexit_277;
reg  main_loopexit_277_reg;
reg [5:0] imem_address_a;
reg  imem_write_enable_a;
wire [31:0] imem_in_a;
wire [31:0] imem_out_a;
wire [5:0] imem_address_b;
wire  imem_write_enable_b;
wire [31:0] imem_in_b;
wire [31:0] imem_out_b;
reg [4:0] main_0_reg_address_a;
reg  main_0_reg_write_enable_a;
reg [31:0] main_0_reg_in_a;
wire [31:0] main_0_reg_out_a;
reg [4:0] main_0_reg_address_b;
reg  main_0_reg_write_enable_b;
reg [31:0] main_0_reg_in_b;
wire [31:0] main_0_reg_out_b;
reg [5:0] main_0_dmem_address_a;
reg  main_0_dmem_write_enable_a;
reg [31:0] main_0_dmem_in_a;
wire [31:0] main_0_dmem_out_a;
reg [5:0] main_0_dmem_address_b;
reg  main_0_dmem_write_enable_b;
reg [31:0] main_0_dmem_in_b;
wire [31:0] main_0_dmem_out_b;
reg  lpm_mult_main_51_58_en;
reg [63:0] main_51_58_stage0_reg;
reg  lpm_mult_main_66_73_en;
reg [63:0] main_66_73_stage0_reg;

// Local Rams


// @imem = internal unnamed_addr constant [44 x i32] [i32 -1885077504, i32 665124868, i32 614858756, i32 266368, i32 12726305, i32 202375190, i32 0, i32 872546314, i32 12, i32 1006702593, i32 875036672, ...
rom_dual_port imem (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( imem_address_a ),
	.address_b( imem_address_b ),
	.q_a( imem_out_a ),
	.q_b( imem_out_b)
);
defparam imem.width_a = 32;
defparam imem.width_b = 32;
defparam imem.widthad_a = 6;
defparam imem.widthad_b = 6;
defparam imem.numwords_a = 44;
defparam imem.numwords_b = 44;
defparam imem.latency = 1;
defparam imem.init_file = "imem.mif";


//   %reg = alloca [32 x i32], align 4
ram_dual_port main_0_reg (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_reg_address_a ),
	.address_b( main_0_reg_address_b ),
	.wren_a( main_0_reg_write_enable_a ),
	.wren_b( main_0_reg_write_enable_b ),
	.data_a( main_0_reg_in_a ),
	.data_b( main_0_reg_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_reg_out_a ),
	.q_b( main_0_reg_out_b)
);
defparam main_0_reg.width_a = 32;
defparam main_0_reg.width_b = 32;
defparam main_0_reg.widthad_a = 5;
defparam main_0_reg.widthad_b = 5;
defparam main_0_reg.width_be_a = 1;
defparam main_0_reg.width_be_b = 1;
defparam main_0_reg.numwords_a = 32;
defparam main_0_reg.numwords_b = 32;
defparam main_0_reg.latency = 1;


//   %dmem = alloca [64 x i32], align 4
ram_dual_port main_0_dmem (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_dmem_address_a ),
	.address_b( main_0_dmem_address_b ),
	.wren_a( main_0_dmem_write_enable_a ),
	.wren_b( main_0_dmem_write_enable_b ),
	.data_a( main_0_dmem_in_a ),
	.data_b( main_0_dmem_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_dmem_out_a ),
	.q_b( main_0_dmem_out_b)
);
defparam main_0_dmem.width_a = 32;
defparam main_0_dmem.width_b = 32;
defparam main_0_dmem.widthad_a = 6;
defparam main_0_dmem.widthad_b = 6;
defparam main_0_dmem.width_be_a = 1;
defparam main_0_dmem.width_be_b = 1;
defparam main_0_dmem.numwords_a = 64;
defparam main_0_dmem.numwords_b = 64;
defparam main_0_dmem.latency = 1;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %.loopexit*/
	/*   %276 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str1, i32 0, i32 0), i32 %275) #2*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_114)) begin
		$write("Result: %d\n", $signed(main_loopexit_275));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_loopexit_275) === 1'bX) finish <= 0;
	end
	/* main: %278*/
	/*   %279 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__278_115)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %280*/
	/*   %281 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str3, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__280_116)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__102_43:
		next_state = LEGUP_F_main_BB__102_44;
LEGUP_F_main_BB__102_44:
		next_state = LEGUP_F_main_BB__102_45;
LEGUP_F_main_BB__102_45:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__107_46:
		next_state = LEGUP_F_main_BB__107_47;
LEGUP_F_main_BB__107_47:
		next_state = LEGUP_F_main_BB__107_48;
LEGUP_F_main_BB__107_48:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__112_49:
		next_state = LEGUP_F_main_BB__112_50;
LEGUP_F_main_BB__112_50:
		next_state = LEGUP_F_main_BB__112_51;
LEGUP_F_main_BB__112_51:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__119_52:
		next_state = LEGUP_F_main_BB__119_53;
LEGUP_F_main_BB__119_53:
		next_state = LEGUP_F_main_BB__119_54;
LEGUP_F_main_BB__119_54:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__126_55:
		next_state = LEGUP_F_main_BB__126_56;
LEGUP_F_main_BB__126_56:
		next_state = LEGUP_F_main_BB__126_57;
LEGUP_F_main_BB__126_57:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__134_58:
		next_state = LEGUP_F_main_BB__134_59;
LEGUP_F_main_BB__134_59:
		next_state = LEGUP_F_main_BB__134_60;
LEGUP_F_main_BB__134_60:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__142_61:
		next_state = LEGUP_F_main_BB__142_62;
LEGUP_F_main_BB__142_62:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__145_63:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__148_64:
		next_state = LEGUP_F_main_BB__148_65;
LEGUP_F_main_BB__148_65:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__151_66:
	if ((main_15_22_reg == 32'd9))
		next_state = LEGUP_F_main_BB__156_67;
	else if ((main_15_22_reg == 32'd12))
		next_state = LEGUP_F_main_BB__162_70;
	else if ((main_15_22_reg == 32'd13))
		next_state = LEGUP_F_main_BB__168_73;
	else if ((main_15_22_reg == 32'd14))
		next_state = LEGUP_F_main_BB__174_76;
	else if ((main_15_22_reg == 32'd35))
		next_state = LEGUP_F_main_BB__180_79;
	else if ((main_15_22_reg == 32'd43))
		next_state = LEGUP_F_main_BB__189_84;
	else if ((main_15_22_reg == 32'd15))
		next_state = LEGUP_F_main_BB__198_88;
	else if ((main_15_22_reg == 32'd4))
		next_state = LEGUP_F_main_BB__200_90;
	else if ((main_15_22_reg == 32'd5))
		next_state = LEGUP_F_main_BB__209_93;
	else if ((main_15_22_reg == 32'd1))
		next_state = LEGUP_F_main_BB__218_96;
	else if ((main_15_22_reg == 32'd10))
		next_state = LEGUP_F_main_BB__225_99;
	else if ((main_15_22_reg == 32'd11))
		next_state = LEGUP_F_main_BB__232_102;
	else if ((main_15_22_reg != 32'd9) && (main_15_22_reg != 32'd12) && (main_15_22_reg != 32'd13) && (main_15_22_reg != 32'd14) && (main_15_22_reg != 32'd35) && (main_15_22_reg != 32'd43) && (main_15_22_reg != 32'd15) && (main_15_22_reg != 32'd4) && (main_15_22_reg != 32'd5) && (main_15_22_reg != 32'd1) && (main_15_22_reg != 32'd10) && (main_15_22_reg != 32'd11))
		next_state = LEGUP_F_main_BB_thread_105;
LEGUP_F_main_BB__156_67:
		next_state = LEGUP_F_main_BB__156_68;
LEGUP_F_main_BB__156_68:
		next_state = LEGUP_F_main_BB__156_69;
LEGUP_F_main_BB__156_69:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__15_13:
		next_state = LEGUP_F_main_BB__15_14;
LEGUP_F_main_BB__15_14:
	if ((main_15_22 == 32'd0))
		next_state = LEGUP_F_main_BB__23_15;
	else if ((main_15_22 == 32'd2))
		next_state = LEGUP_F_main_BB__145_63;
	else if ((main_15_22 == 32'd3))
		next_state = LEGUP_F_main_BB__148_64;
	else if ((main_15_22 != 32'd0) && (main_15_22 != 32'd2) && (main_15_22 != 32'd3))
		next_state = LEGUP_F_main_BB__151_66;
LEGUP_F_main_BB__162_70:
		next_state = LEGUP_F_main_BB__162_71;
LEGUP_F_main_BB__162_71:
		next_state = LEGUP_F_main_BB__162_72;
LEGUP_F_main_BB__162_72:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__168_73:
		next_state = LEGUP_F_main_BB__168_74;
LEGUP_F_main_BB__168_74:
		next_state = LEGUP_F_main_BB__168_75;
LEGUP_F_main_BB__168_75:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__174_76:
		next_state = LEGUP_F_main_BB__174_77;
LEGUP_F_main_BB__174_77:
		next_state = LEGUP_F_main_BB__174_78;
LEGUP_F_main_BB__174_78:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__180_79:
		next_state = LEGUP_F_main_BB__180_80;
LEGUP_F_main_BB__180_80:
		next_state = LEGUP_F_main_BB__180_81;
LEGUP_F_main_BB__180_81:
		next_state = LEGUP_F_main_BB__180_82;
LEGUP_F_main_BB__180_82:
		next_state = LEGUP_F_main_BB__180_83;
LEGUP_F_main_BB__180_83:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__189_84:
		next_state = LEGUP_F_main_BB__189_85;
LEGUP_F_main_BB__189_85:
		next_state = LEGUP_F_main_BB__189_86;
LEGUP_F_main_BB__189_86:
		next_state = LEGUP_F_main_BB__189_87;
LEGUP_F_main_BB__189_87:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__198_88:
		next_state = LEGUP_F_main_BB__198_89;
LEGUP_F_main_BB__198_89:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__1_2:
	if ((main_1_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB_legup_memset_4exitpreheader_3;
	else if ((main_1_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB__2_4;
LEGUP_F_main_BB__200_90:
		next_state = LEGUP_F_main_BB__200_91;
LEGUP_F_main_BB__200_91:
	if ((main_200_205 == 1'd1))
		next_state = LEGUP_F_main_BB__206_92;
	else if ((main_200_205 == 1'd0))
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__206_92:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__209_93:
		next_state = LEGUP_F_main_BB__209_94;
LEGUP_F_main_BB__209_94:
	if ((main_209_214 == 1'd1))
		next_state = LEGUP_F_main_BB__239_107;
	else if ((main_209_214 == 1'd0))
		next_state = LEGUP_F_main_BB__215_95;
LEGUP_F_main_BB__215_95:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__218_96:
		next_state = LEGUP_F_main_BB__218_97;
LEGUP_F_main_BB__218_97:
	if ((main_218_221 == 1'd1))
		next_state = LEGUP_F_main_BB__222_98;
	else if ((main_218_221 == 1'd0))
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__222_98:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__225_100:
		next_state = LEGUP_F_main_BB__225_101;
LEGUP_F_main_BB__225_101:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__225_99:
		next_state = LEGUP_F_main_BB__225_100;
LEGUP_F_main_BB__232_102:
		next_state = LEGUP_F_main_BB__232_103;
LEGUP_F_main_BB__232_103:
		next_state = LEGUP_F_main_BB__232_104;
LEGUP_F_main_BB__232_104:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__239_107:
		next_state = LEGUP_F_main_BB__239_108;
LEGUP_F_main_BB__239_108:
	if ((main_239_241_reg == 1'd1))
		next_state = LEGUP_F_main_BB_loopexitloopexit_109;
	else if ((main_239_241_reg == 1'd0))
		next_state = LEGUP_F_main_BB__15_13;
LEGUP_F_main_BB__23_15:
	if ((main_23_24 == 32'd33))
		next_state = LEGUP_F_main_BB__33_16;
	else if ((main_23_24 == 32'd35))
		next_state = LEGUP_F_main_BB__42_20;
	else if ((main_23_24 == 32'd24))
		next_state = LEGUP_F_main_BB__51_24;
	else if ((main_23_24 == 32'd25))
		next_state = LEGUP_F_main_BB__66_27;
	else if ((main_23_24 == 32'd16))
		next_state = LEGUP_F_main_BB__77_30;
	else if ((main_23_24 == 32'd18))
		next_state = LEGUP_F_main_BB__79_32;
	else if ((main_23_24 == 32'd36))
		next_state = LEGUP_F_main_BB__81_34;
	else if ((main_23_24 == 32'd37))
		next_state = LEGUP_F_main_BB__88_37;
	else if ((main_23_24 == 32'd38))
		next_state = LEGUP_F_main_BB__95_40;
	else if ((main_23_24 == 32'd0))
		next_state = LEGUP_F_main_BB__102_43;
	else if ((main_23_24 == 32'd2))
		next_state = LEGUP_F_main_BB__107_46;
	else if ((main_23_24 == 32'd4))
		next_state = LEGUP_F_main_BB__112_49;
	else if ((main_23_24 == 32'd6))
		next_state = LEGUP_F_main_BB__119_52;
	else if ((main_23_24 == 32'd42))
		next_state = LEGUP_F_main_BB__126_55;
	else if ((main_23_24 == 32'd43))
		next_state = LEGUP_F_main_BB__134_58;
	else if ((main_23_24 == 32'd8))
		next_state = LEGUP_F_main_BB__142_61;
	else if ((main_23_24 != 32'd33) && (main_23_24 != 32'd35) && (main_23_24 != 32'd24) && (main_23_24 != 32'd25) && (main_23_24 != 32'd16) && (main_23_24 != 32'd18) && (main_23_24 != 32'd36) && (main_23_24 != 32'd37) && (main_23_24 != 32'd38) && (main_23_24 != 32'd0) && (main_23_24 != 32'd2) && (main_23_24 != 32'd4) && (main_23_24 != 32'd6) && (main_23_24 != 32'd42) && (main_23_24 != 32'd43) && (main_23_24 != 32'd8))
		next_state = LEGUP_F_main_BB_thread_105;
LEGUP_F_main_BB__278_115:
		next_state = LEGUP_F_main_BB__282_117;
LEGUP_F_main_BB__280_116:
		next_state = LEGUP_F_main_BB__282_117;
LEGUP_F_main_BB__282_117:
		next_state = LEGUP_0;
LEGUP_F_main_BB__2_4:
		next_state = LEGUP_F_main_BB__2_5;
LEGUP_F_main_BB__2_5:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__33_16:
		next_state = LEGUP_F_main_BB__33_17;
LEGUP_F_main_BB__33_17:
		next_state = LEGUP_F_main_BB__33_18;
LEGUP_F_main_BB__33_18:
		next_state = LEGUP_F_main_BB__33_19;
LEGUP_F_main_BB__33_19:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__42_20:
		next_state = LEGUP_F_main_BB__42_21;
LEGUP_F_main_BB__42_21:
		next_state = LEGUP_F_main_BB__42_22;
LEGUP_F_main_BB__42_22:
		next_state = LEGUP_F_main_BB__42_23;
LEGUP_F_main_BB__42_23:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__51_24:
		next_state = LEGUP_F_main_BB__51_25;
LEGUP_F_main_BB__51_25:
		next_state = LEGUP_F_main_BB__51_26;
LEGUP_F_main_BB__51_26:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__66_27:
		next_state = LEGUP_F_main_BB__66_28;
LEGUP_F_main_BB__66_28:
		next_state = LEGUP_F_main_BB__66_29;
LEGUP_F_main_BB__66_29:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__77_30:
		next_state = LEGUP_F_main_BB__77_31;
LEGUP_F_main_BB__77_31:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__79_32:
		next_state = LEGUP_F_main_BB__79_33;
LEGUP_F_main_BB__79_33:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__81_34:
		next_state = LEGUP_F_main_BB__81_35;
LEGUP_F_main_BB__81_35:
		next_state = LEGUP_F_main_BB__81_36;
LEGUP_F_main_BB__81_36:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__88_37:
		next_state = LEGUP_F_main_BB__88_38;
LEGUP_F_main_BB__88_38:
		next_state = LEGUP_F_main_BB__88_39;
LEGUP_F_main_BB__88_39:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB__95_40:
		next_state = LEGUP_F_main_BB__95_41;
LEGUP_F_main_BB__95_41:
		next_state = LEGUP_F_main_BB__95_42;
LEGUP_F_main_BB__95_42:
		next_state = LEGUP_F_main_BB__239_107;
LEGUP_F_main_BB_legup_memset_4exit_6:
		next_state = LEGUP_F_main_BB_legup_memset_4exit_7;
LEGUP_F_main_BB_legup_memset_4exit_7:
	if ((main_legup_memset_4exit_exitcond1_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader14_8;
	else if ((main_legup_memset_4exit_exitcond1_reg == 1'd0))
		next_state = LEGUP_F_main_BB_legup_memset_4exit_6;
LEGUP_F_main_BB_legup_memset_4exitpreheader_3:
		next_state = LEGUP_F_main_BB_legup_memset_4exit_6;
LEGUP_F_main_BB_loopexit_110:
		next_state = LEGUP_F_main_BB_loopexit_111;
LEGUP_F_main_BB_loopexit_111:
		next_state = LEGUP_F_main_BB_loopexit_112;
LEGUP_F_main_BB_loopexit_112:
		next_state = LEGUP_F_main_BB_loopexit_113;
LEGUP_F_main_BB_loopexit_113:
		next_state = LEGUP_F_main_BB_loopexit_114;
LEGUP_F_main_BB_loopexit_114:
	if ((main_loopexit_277 == 1'd1))
		next_state = LEGUP_F_main_BB__278_115;
	else if ((main_loopexit_277 == 1'd0))
		next_state = LEGUP_F_main_BB__280_116;
LEGUP_F_main_BB_loopexitloopexit_109:
		next_state = LEGUP_F_main_BB_loopexit_110;
LEGUP_F_main_BB_preheader14_10:
		next_state = LEGUP_F_main_BB_preheader14_11;
LEGUP_F_main_BB_preheader14_11:
		next_state = LEGUP_F_main_BB_preheader14_12;
LEGUP_F_main_BB_preheader14_12:
		next_state = LEGUP_F_main_BB__15_13;
LEGUP_F_main_BB_preheader14_8:
		next_state = LEGUP_F_main_BB_preheader14_9;
LEGUP_F_main_BB_preheader14_9:
		next_state = LEGUP_F_main_BB_preheader14_10;
LEGUP_F_main_BB_thread_105:
		next_state = LEGUP_F_main_BB_thread_106;
LEGUP_F_main_BB_thread_106:
		next_state = LEGUP_F_main_BB_loopexit_110;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %indvar = phi i32 [ %indvar.next, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar = 32'd0;
	end
	/* main: %1*/
	/*   %indvar = phi i32 [ %indvar.next, %2 ], [ 0, %0 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__2_5) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_indvar = main_2_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %indvar = phi i32 [ %indvar.next, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar_reg <= main_1_indvar;
		if (start == 1'b0 && ^(main_1_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvar_reg"); $finish; end
	end
	/* main: %1*/
	/*   %indvar = phi i32 [ %indvar.next, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__2_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar_reg <= main_1_indvar;
		if (start == 1'b0 && ^(main_1_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond = icmp eq i32 %indvar, 64*/
		main_1_exitcond = (main_1_indvar_reg == 32'd64);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %exitcond = icmp eq i32 %indvar, 64*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_exitcond_reg <= main_1_exitcond;
		if (start == 1'b0 && ^(main_1_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %s.i.0 = getelementptr [64 x i32]* %dmem, i32 0, i32 %indvar*/
		main_2_si0 = (1'd0 | (4 * main_1_indvar_reg));
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %s.i.0 = getelementptr [64 x i32]* %dmem, i32 0, i32 %indvar*/
	if ((cur_state == LEGUP_F_main_BB__2_4)) begin
		main_2_si0_reg <= main_2_si0;
		if (start == 1'b0 && ^(main_2_si0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_si0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_2_indvarnext = (main_1_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB__2_4)) begin
		main_2_indvarnext_reg <= main_2_indvarnext;
		if (start == 1'b0 && ^(main_2_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %i.012 = phi i32 [ %3, %legup_memset_4.exit ], [ 0, %legup_memset_4.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exitpreheader_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4exit_i012 = 32'd0;
	end
	/* main: %legup_memset_4.exit*/
	/*   %i.012 = phi i32 [ %3, %legup_memset_4.exit ], [ 0, %legup_memset_4.exit.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_legup_memset_4exit_7) & (memory_controller_waitrequest == 1'd0)) & (main_legup_memset_4exit_exitcond1_reg == 1'd0))) */ begin
		main_legup_memset_4exit_i012 = main_legup_memset_4exit_3_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %i.012 = phi i32 [ %3, %legup_memset_4.exit ], [ 0, %legup_memset_4.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exitpreheader_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4exit_i012_reg <= main_legup_memset_4exit_i012;
		if (start == 1'b0 && ^(main_legup_memset_4exit_i012) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_i012_reg"); $finish; end
	end
	/* main: %legup_memset_4.exit*/
	/*   %i.012 = phi i32 [ %3, %legup_memset_4.exit ], [ 0, %legup_memset_4.exit.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_legup_memset_4exit_7) & (memory_controller_waitrequest == 1'd0)) & (main_legup_memset_4exit_exitcond1_reg == 1'd0))) begin
		main_legup_memset_4exit_i012_reg <= main_legup_memset_4exit_i012;
		if (start == 1'b0 && ^(main_legup_memset_4exit_i012) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_i012_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %scevgep = getelementptr [32 x i32]* %reg, i32 0, i32 %i.012*/
		main_legup_memset_4exit_scevgep = (1'd0 | (4 * main_legup_memset_4exit_i012_reg));
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %scevgep = getelementptr [32 x i32]* %reg, i32 0, i32 %i.012*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_6)) begin
		main_legup_memset_4exit_scevgep_reg <= main_legup_memset_4exit_scevgep;
		if (start == 1'b0 && ^(main_legup_memset_4exit_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %3 = add nsw i32 %i.012, 1*/
		main_legup_memset_4exit_3 = (main_legup_memset_4exit_i012_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %3 = add nsw i32 %i.012, 1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_6)) begin
		main_legup_memset_4exit_3_reg <= main_legup_memset_4exit_3;
		if (start == 1'b0 && ^(main_legup_memset_4exit_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %exitcond1 = icmp eq i32 %3, 32*/
		main_legup_memset_4exit_exitcond1 = (main_legup_memset_4exit_3 == 32'd32);
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %exitcond1 = icmp eq i32 %3, 32*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_6)) begin
		main_legup_memset_4exit_exitcond1_reg <= main_legup_memset_4exit_exitcond1;
		if (start == 1'b0 && ^(main_legup_memset_4exit_exitcond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_exitcond1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %4 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 29*/
if (reset) begin main_preheader14_4 = 0; end
		main_preheader14_4 = (1'd0 | (4 * 32'd29));
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %4 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 29*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		main_preheader14_4_reg <= main_preheader14_4;
		if (start == 1'b0 && ^(main_preheader14_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %5 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 0*/
if (reset) begin main_preheader14_5 = 0; end
		main_preheader14_5 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %5 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		main_preheader14_5_reg <= main_preheader14_5;
		if (start == 1'b0 && ^(main_preheader14_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %6 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 1*/
if (reset) begin main_preheader14_6 = 0; end
		main_preheader14_6 = (1'd0 | (4 * 32'd1));
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %6 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		main_preheader14_6_reg <= main_preheader14_6;
		if (start == 1'b0 && ^(main_preheader14_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %7 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 2*/
if (reset) begin main_preheader14_7 = 0; end
		main_preheader14_7 = (1'd0 | (4 * 32'd2));
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %7 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 2*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		main_preheader14_7_reg <= main_preheader14_7;
		if (start == 1'b0 && ^(main_preheader14_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %8 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 3*/
if (reset) begin main_preheader14_8 = 0; end
		main_preheader14_8 = (1'd0 | (4 * 32'd3));
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %8 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 3*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		main_preheader14_8_reg <= main_preheader14_8;
		if (start == 1'b0 && ^(main_preheader14_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %9 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 4*/
if (reset) begin main_preheader14_9 = 0; end
		main_preheader14_9 = (1'd0 | (4 * 32'd4));
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %9 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 4*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		main_preheader14_9_reg <= main_preheader14_9;
		if (start == 1'b0 && ^(main_preheader14_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %10 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 5*/
if (reset) begin main_preheader14_10 = 0; end
		main_preheader14_10 = (1'd0 | (4 * 32'd5));
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %10 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 5*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		main_preheader14_10_reg <= main_preheader14_10;
		if (start == 1'b0 && ^(main_preheader14_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %11 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 6*/
if (reset) begin main_preheader14_11 = 0; end
		main_preheader14_11 = (1'd0 | (4 * 32'd6));
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %11 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 6*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		main_preheader14_11_reg <= main_preheader14_11;
		if (start == 1'b0 && ^(main_preheader14_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %12 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 7*/
if (reset) begin main_preheader14_12 = 0; end
		main_preheader14_12 = (1'd0 | (4 * 32'd7));
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %12 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 7*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		main_preheader14_12_reg <= main_preheader14_12;
		if (start == 1'b0 && ^(main_preheader14_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %13 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 0*/
if (reset) begin main_preheader14_13 = 0; end
		main_preheader14_13 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %13 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		main_preheader14_13_reg <= main_preheader14_13;
		if (start == 1'b0 && ^(main_preheader14_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14*/
	/*   %14 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 31*/
if (reset) begin main_preheader14_14 = 0; end
		main_preheader14_14 = (1'd0 | (4 * 32'd31));
end
always @(posedge clk) begin
	/* main: %.preheader14*/
	/*   %14 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 31*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		main_preheader14_14_reg <= main_preheader14_14;
		if (start == 1'b0 && ^(main_preheader14_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %pc.0 = phi i32 [ %pc.1, %239 ], [ 4194304, %.preheader14 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader14_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_15_pc0 = 32'd4194304;
	end
	/* main: %15*/
	/*   %pc.0 = phi i32 [ %pc.1, %239 ], [ 4194304, %.preheader14 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__239_108) & (memory_controller_waitrequest == 1'd0)) & (main_239_241_reg == 1'd0))) */ begin
		main_15_pc0 = main_239_pc1_reg;
	end
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %pc.0 = phi i32 [ %pc.1, %239 ], [ 4194304, %.preheader14 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader14_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_15_pc0_reg <= main_15_pc0;
		if (start == 1'b0 && ^(main_15_pc0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_pc0_reg"); $finish; end
	end
	/* main: %15*/
	/*   %pc.0 = phi i32 [ %pc.1, %239 ], [ 4194304, %.preheader14 ]*/
	if ((((cur_state == LEGUP_F_main_BB__239_108) & (memory_controller_waitrequest == 1'd0)) & (main_239_241_reg == 1'd0))) begin
		main_15_pc0_reg <= main_15_pc0;
		if (start == 1'b0 && ^(main_15_pc0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_pc0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %Lo.0 = phi i32 [ %Lo.1, %239 ], [ 0, %.preheader14 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader14_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_15_Lo0 = 32'd0;
	end
	/* main: %15*/
	/*   %Lo.0 = phi i32 [ %Lo.1, %239 ], [ 0, %.preheader14 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__239_108) & (memory_controller_waitrequest == 1'd0)) & (main_239_241_reg == 1'd0))) */ begin
		main_15_Lo0 = main_239_Lo1_reg;
	end
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %Lo.0 = phi i32 [ %Lo.1, %239 ], [ 0, %.preheader14 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader14_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_15_Lo0_reg <= main_15_Lo0;
		if (start == 1'b0 && ^(main_15_Lo0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_Lo0_reg"); $finish; end
	end
	/* main: %15*/
	/*   %Lo.0 = phi i32 [ %Lo.1, %239 ], [ 0, %.preheader14 ]*/
	if ((((cur_state == LEGUP_F_main_BB__239_108) & (memory_controller_waitrequest == 1'd0)) & (main_239_241_reg == 1'd0))) begin
		main_15_Lo0_reg <= main_15_Lo0;
		if (start == 1'b0 && ^(main_15_Lo0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_Lo0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %Hi.0 = phi i32 [ %Hi.1, %239 ], [ 0, %.preheader14 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader14_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_15_Hi0 = 32'd0;
	end
	/* main: %15*/
	/*   %Hi.0 = phi i32 [ %Hi.1, %239 ], [ 0, %.preheader14 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__239_108) & (memory_controller_waitrequest == 1'd0)) & (main_239_241_reg == 1'd0))) */ begin
		main_15_Hi0 = main_239_Hi1_reg;
	end
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %Hi.0 = phi i32 [ %Hi.1, %239 ], [ 0, %.preheader14 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader14_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_15_Hi0_reg <= main_15_Hi0;
		if (start == 1'b0 && ^(main_15_Hi0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_Hi0_reg"); $finish; end
	end
	/* main: %15*/
	/*   %Hi.0 = phi i32 [ %Hi.1, %239 ], [ 0, %.preheader14 ]*/
	if ((((cur_state == LEGUP_F_main_BB__239_108) & (memory_controller_waitrequest == 1'd0)) & (main_239_241_reg == 1'd0))) begin
		main_15_Hi0_reg <= main_15_Hi0;
		if (start == 1'b0 && ^(main_15_Hi0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_Hi0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %16 = phi i32 [ %240, %239 ], [ 0, %.preheader14 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader14_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_15_16 = 32'd0;
	end
	/* main: %15*/
	/*   %16 = phi i32 [ %240, %239 ], [ 0, %.preheader14 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__239_108) & (memory_controller_waitrequest == 1'd0)) & (main_239_241_reg == 1'd0))) */ begin
		main_15_16 = main_239_240_reg;
	end
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %16 = phi i32 [ %240, %239 ], [ 0, %.preheader14 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader14_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_15_16_reg <= main_15_16;
		if (start == 1'b0 && ^(main_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_16_reg"); $finish; end
	end
	/* main: %15*/
	/*   %16 = phi i32 [ %240, %239 ], [ 0, %.preheader14 ]*/
	if ((((cur_state == LEGUP_F_main_BB__239_108) & (memory_controller_waitrequest == 1'd0)) & (main_239_241_reg == 1'd0))) begin
		main_15_16_reg <= main_15_16;
		if (start == 1'b0 && ^(main_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %17 = lshr i32 %pc.0, 2*/
		main_15_17 = (main_15_pc0_reg >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %17 = lshr i32 %pc.0, 2*/
	if ((cur_state == LEGUP_F_main_BB__15_13)) begin
		main_15_17_reg <= main_15_17;
		if (start == 1'b0 && ^(main_15_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %18 = and i32 %17, 63*/
		main_15_18 = (main_15_17 & 32'd63);
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %18 = and i32 %17, 63*/
	if ((cur_state == LEGUP_F_main_BB__15_13)) begin
		main_15_18_reg <= main_15_18;
		if (start == 1'b0 && ^(main_15_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %19 = getelementptr inbounds [44 x i32]* @imem, i32 0, i32 %18*/
		main_15_19 = (1'd0 | (4 * main_15_18));
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %19 = getelementptr inbounds [44 x i32]* @imem, i32 0, i32 %18*/
	if ((cur_state == LEGUP_F_main_BB__15_13)) begin
		main_15_19_reg <= main_15_19;
		if (start == 1'b0 && ^(main_15_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %20 = load i32* %19, align 4, !tbaa !5*/
		main_15_20 = imem_out_a;
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %20 = load i32* %19, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_14)) begin
		main_15_20_reg <= main_15_20;
		if (start == 1'b0 && ^(main_15_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %21 = add nsw i32 %pc.0, 4*/
		main_15_21 = (main_15_pc0_reg + 32'd4);
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %21 = add nsw i32 %pc.0, 4*/
	if ((cur_state == LEGUP_F_main_BB__15_13)) begin
		main_15_21_reg <= main_15_21;
		if (start == 1'b0 && ^(main_15_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %22 = lshr i32 %20, 26*/
		main_15_22 = (main_15_20 >>> (32'd26 % 32));
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %22 = lshr i32 %20, 26*/
	if ((cur_state == LEGUP_F_main_BB__15_14)) begin
		main_15_22_reg <= main_15_22;
		if (start == 1'b0 && ^(main_15_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %24 = and i32 %20, 63*/
		main_23_24 = (main_15_20_reg & 32'd63);
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %24 = and i32 %20, 63*/
	if ((cur_state == LEGUP_F_main_BB__23_15)) begin
		main_23_24_reg <= main_23_24;
		if (start == 1'b0 && ^(main_23_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %25 = lshr i32 %20, 6*/
		main_23_25 = (main_15_20_reg >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %25 = lshr i32 %20, 6*/
	if ((cur_state == LEGUP_F_main_BB__23_15)) begin
		main_23_25_reg <= main_23_25;
		if (start == 1'b0 && ^(main_23_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %26 = and i32 %25, 31*/
		main_23_26 = (main_23_25 & 32'd31);
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %26 = and i32 %25, 31*/
	if ((cur_state == LEGUP_F_main_BB__23_15)) begin
		main_23_26_reg <= main_23_26;
		if (start == 1'b0 && ^(main_23_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %27 = lshr i32 %20, 11*/
		main_23_27 = (main_15_20_reg >>> (32'd11 % 32));
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %27 = lshr i32 %20, 11*/
	if ((cur_state == LEGUP_F_main_BB__23_15)) begin
		main_23_27_reg <= main_23_27;
		if (start == 1'b0 && ^(main_23_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %28 = and i32 %27, 31*/
		main_23_28 = (main_23_27 & 32'd31);
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %28 = and i32 %27, 31*/
	if ((cur_state == LEGUP_F_main_BB__23_15)) begin
		main_23_28_reg <= main_23_28;
		if (start == 1'b0 && ^(main_23_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %29 = lshr i32 %20, 16*/
		main_23_29 = (main_15_20_reg >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %29 = lshr i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__23_15)) begin
		main_23_29_reg <= main_23_29;
		if (start == 1'b0 && ^(main_23_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %30 = and i32 %29, 31*/
		main_23_30 = (main_23_29 & 32'd31);
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %30 = and i32 %29, 31*/
	if ((cur_state == LEGUP_F_main_BB__23_15)) begin
		main_23_30_reg <= main_23_30;
		if (start == 1'b0 && ^(main_23_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %31 = lshr i32 %20, 21*/
		main_23_31 = (main_15_20_reg >>> (32'd21 % 32));
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %31 = lshr i32 %20, 21*/
	if ((cur_state == LEGUP_F_main_BB__23_15)) begin
		main_23_31_reg <= main_23_31;
		if (start == 1'b0 && ^(main_23_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %32 = and i32 %31, 31*/
		main_23_32 = (main_23_31 & 32'd31);
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %32 = and i32 %31, 31*/
	if ((cur_state == LEGUP_F_main_BB__23_15)) begin
		main_23_32_reg <= main_23_32;
		if (start == 1'b0 && ^(main_23_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %34 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_33_34 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %34 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__33_16)) begin
		main_33_34_reg <= main_33_34;
		if (start == 1'b0 && ^(main_33_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
		main_33_35 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_17)) begin
		main_33_35_reg <= main_33_35;
		if (start == 1'b0 && ^(main_33_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %36 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_33_36 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %36 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__33_16)) begin
		main_33_36_reg <= main_33_36;
		if (start == 1'b0 && ^(main_33_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
		main_33_37 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_17)) begin
		main_33_37_reg <= main_33_37;
		if (start == 1'b0 && ^(main_33_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %38 = add nsw i32 %37, %35*/
		main_33_38 = (main_33_37 + main_33_35);
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %38 = add nsw i32 %37, %35*/
	if ((cur_state == LEGUP_F_main_BB__33_17)) begin
		main_33_38_reg <= main_33_38;
		if (start == 1'b0 && ^(main_33_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %39 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_33_39 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %39 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__33_16)) begin
		main_33_39_reg <= main_33_39;
		if (start == 1'b0 && ^(main_33_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
		main_33_40 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_18)) begin
		main_33_40_reg <= main_33_40;
		if (start == 1'b0 && ^(main_33_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %41 = add nsw i32 %38, %40*/
		main_33_41 = (main_33_38_reg + main_33_40);
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %41 = add nsw i32 %38, %40*/
	if ((cur_state == LEGUP_F_main_BB__33_18)) begin
		main_33_41_reg <= main_33_41;
		if (start == 1'b0 && ^(main_33_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %43 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_42_43 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %43 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__42_20)) begin
		main_42_43_reg <= main_42_43;
		if (start == 1'b0 && ^(main_42_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
		main_42_44 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_21)) begin
		main_42_44_reg <= main_42_44;
		if (start == 1'b0 && ^(main_42_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %45 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_42_45 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %45 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__42_20)) begin
		main_42_45_reg <= main_42_45;
		if (start == 1'b0 && ^(main_42_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %46 = load i32* %45, align 4, !tbaa !1*/
		main_42_46 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %46 = load i32* %45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_21)) begin
		main_42_46_reg <= main_42_46;
		if (start == 1'b0 && ^(main_42_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %47 = sub i32 %44, %46*/
		main_42_47 = (main_42_44 - main_42_46);
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %47 = sub i32 %44, %46*/
	if ((cur_state == LEGUP_F_main_BB__42_21)) begin
		main_42_47_reg <= main_42_47;
		if (start == 1'b0 && ^(main_42_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %48 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_42_48 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %48 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__42_20)) begin
		main_42_48_reg <= main_42_48;
		if (start == 1'b0 && ^(main_42_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %49 = load i32* %48, align 4, !tbaa !1*/
		main_42_49 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %49 = load i32* %48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_22)) begin
		main_42_49_reg <= main_42_49;
		if (start == 1'b0 && ^(main_42_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %50 = sub i32 %47, %49*/
		main_42_50 = (main_42_47_reg - main_42_49);
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %50 = sub i32 %47, %49*/
	if ((cur_state == LEGUP_F_main_BB__42_22)) begin
		main_42_50_reg <= main_42_50;
		if (start == 1'b0 && ^(main_42_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %52 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_51_52 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %52 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__51_24)) begin
		main_51_52_reg <= main_51_52;
		if (start == 1'b0 && ^(main_51_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %53 = load i32* %52, align 4, !tbaa !1*/
		main_51_53 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %53 = load i32* %52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_25)) begin
		main_51_53_reg <= main_51_53;
		if (start == 1'b0 && ^(main_51_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %54 = sext i32 %53 to i64*/
		main_51_54 = $signed(main_51_53);
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %54 = sext i32 %53 to i64*/
	if ((cur_state == LEGUP_F_main_BB__51_25)) begin
		main_51_54_reg <= main_51_54;
		if (start == 1'b0 && ^(main_51_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %55 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_51_55 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %55 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__51_24)) begin
		main_51_55_reg <= main_51_55;
		if (start == 1'b0 && ^(main_51_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
		main_51_56 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_25)) begin
		main_51_56_reg <= main_51_56;
		if (start == 1'b0 && ^(main_51_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %57 = sext i32 %56 to i64*/
		main_51_57 = $signed(main_51_56);
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %57 = sext i32 %56 to i64*/
	if ((cur_state == LEGUP_F_main_BB__51_25)) begin
		main_51_57_reg <= main_51_57;
		if (start == 1'b0 && ^(main_51_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_57_reg"); $finish; end
	end
end
always @(*) begin
	main_51_58 = main_51_58_stage0_reg;
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %58 = mul nsw i64 %57, %54*/
	if ((cur_state == LEGUP_F_main_BB__51_26)) begin
		main_51_58_reg <= main_51_58;
		if (start == 1'b0 && ^(main_51_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_58_reg"); $finish; end
	end
	/* main: %51*/
	/*   %58 = mul nsw i64 %57, %54*/
	if ((cur_state == LEGUP_F_main_BB__51_26)) begin
		main_51_58_reg <= main_51_58;
		if (start == 1'b0 && ^(main_51_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %59 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_51_59 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %59 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__51_24)) begin
		main_51_59_reg <= main_51_59;
		if (start == 1'b0 && ^(main_51_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %60 = load i32* %59, align 4, !tbaa !1*/
		main_51_60 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %60 = load i32* %59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_26)) begin
		main_51_60_reg <= main_51_60;
		if (start == 1'b0 && ^(main_51_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %61 = sext i32 %60 to i64*/
		main_51_61 = $signed(main_51_60);
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %61 = sext i32 %60 to i64*/
	if ((cur_state == LEGUP_F_main_BB__51_26)) begin
		main_51_61_reg <= main_51_61;
		if (start == 1'b0 && ^(main_51_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %62 = add nsw i64 %58, %61*/
		main_51_62 = (main_51_58 + main_51_61);
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %62 = add nsw i64 %58, %61*/
	if ((cur_state == LEGUP_F_main_BB__51_26)) begin
		main_51_62_reg <= main_51_62;
		if (start == 1'b0 && ^(main_51_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %63 = trunc i64 %62 to i32*/
		main_51_63 = main_51_62[31:0];
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %63 = trunc i64 %62 to i32*/
	if ((cur_state == LEGUP_F_main_BB__51_26)) begin
		main_51_63_reg <= main_51_63;
		if (start == 1'b0 && ^(main_51_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %64 = lshr i64 %62, 32*/
		main_51_64 = (main_51_62 >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %64 = lshr i64 %62, 32*/
	if ((cur_state == LEGUP_F_main_BB__51_26)) begin
		main_51_64_reg <= main_51_64;
		if (start == 1'b0 && ^(main_51_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %65 = trunc i64 %64 to i32*/
		main_51_65 = main_51_64[31:0];
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %65 = trunc i64 %64 to i32*/
	if ((cur_state == LEGUP_F_main_BB__51_26)) begin
		main_51_65_reg <= main_51_65;
		if (start == 1'b0 && ^(main_51_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %67 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_66_67 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %67 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__66_27)) begin
		main_66_67_reg <= main_66_67;
		if (start == 1'b0 && ^(main_66_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %68 = load i32* %67, align 4, !tbaa !1*/
		main_66_68 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %68 = load i32* %67, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__66_28)) begin
		main_66_68_reg <= main_66_68;
		if (start == 1'b0 && ^(main_66_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %69 = sext i32 %68 to i64*/
		main_66_69 = $signed(main_66_68);
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %69 = sext i32 %68 to i64*/
	if ((cur_state == LEGUP_F_main_BB__66_28)) begin
		main_66_69_reg <= main_66_69;
		if (start == 1'b0 && ^(main_66_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %70 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_66_70 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %70 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__66_27)) begin
		main_66_70_reg <= main_66_70;
		if (start == 1'b0 && ^(main_66_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %71 = load i32* %70, align 4, !tbaa !1*/
		main_66_71 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %71 = load i32* %70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__66_28)) begin
		main_66_71_reg <= main_66_71;
		if (start == 1'b0 && ^(main_66_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %72 = sext i32 %71 to i64*/
		main_66_72 = $signed(main_66_71);
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %72 = sext i32 %71 to i64*/
	if ((cur_state == LEGUP_F_main_BB__66_28)) begin
		main_66_72_reg <= main_66_72;
		if (start == 1'b0 && ^(main_66_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_72_reg"); $finish; end
	end
end
always @(*) begin
	main_66_73 = main_66_73_stage0_reg;
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %73 = mul i64 %72, %69*/
	if ((cur_state == LEGUP_F_main_BB__66_29)) begin
		main_66_73_reg <= main_66_73;
		if (start == 1'b0 && ^(main_66_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_73_reg"); $finish; end
	end
	/* main: %66*/
	/*   %73 = mul i64 %72, %69*/
	if ((cur_state == LEGUP_F_main_BB__66_29)) begin
		main_66_73_reg <= main_66_73;
		if (start == 1'b0 && ^(main_66_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %74 = trunc i64 %73 to i32*/
		main_66_74 = main_66_73[31:0];
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %74 = trunc i64 %73 to i32*/
	if ((cur_state == LEGUP_F_main_BB__66_29)) begin
		main_66_74_reg <= main_66_74;
		if (start == 1'b0 && ^(main_66_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %75 = lshr i64 %73, 32*/
		main_66_75 = (main_66_73 >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %75 = lshr i64 %73, 32*/
	if ((cur_state == LEGUP_F_main_BB__66_29)) begin
		main_66_75_reg <= main_66_75;
		if (start == 1'b0 && ^(main_66_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %76 = trunc i64 %75 to i32*/
		main_66_76 = main_66_75[31:0];
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %76 = trunc i64 %75 to i32*/
	if ((cur_state == LEGUP_F_main_BB__66_29)) begin
		main_66_76_reg <= main_66_76;
		if (start == 1'b0 && ^(main_66_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %77*/
	/*   %78 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_77_78 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %77*/
	/*   %78 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__77_30)) begin
		main_77_78_reg <= main_77_78;
		if (start == 1'b0 && ^(main_77_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_77_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %79*/
	/*   %80 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_79_80 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %79*/
	/*   %80 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__79_32)) begin
		main_79_80_reg <= main_79_80;
		if (start == 1'b0 && ^(main_79_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_79_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %81*/
	/*   %82 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_81_82 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %81*/
	/*   %82 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__81_34)) begin
		main_81_82_reg <= main_81_82;
		if (start == 1'b0 && ^(main_81_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_81_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %81*/
	/*   %83 = load i32* %82, align 4, !tbaa !1*/
		main_81_83 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %81*/
	/*   %83 = load i32* %82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__81_35)) begin
		main_81_83_reg <= main_81_83;
		if (start == 1'b0 && ^(main_81_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_81_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %81*/
	/*   %84 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_81_84 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %81*/
	/*   %84 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__81_34)) begin
		main_81_84_reg <= main_81_84;
		if (start == 1'b0 && ^(main_81_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_81_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %81*/
	/*   %85 = load i32* %84, align 4, !tbaa !1*/
		main_81_85 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %81*/
	/*   %85 = load i32* %84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__81_35)) begin
		main_81_85_reg <= main_81_85;
		if (start == 1'b0 && ^(main_81_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_81_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %81*/
	/*   %86 = and i32 %85, %83*/
		main_81_86 = (main_81_85 & main_81_83);
end
always @(posedge clk) begin
	/* main: %81*/
	/*   %86 = and i32 %85, %83*/
	if ((cur_state == LEGUP_F_main_BB__81_35)) begin
		main_81_86_reg <= main_81_86;
		if (start == 1'b0 && ^(main_81_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_81_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %81*/
	/*   %87 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_81_87 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %81*/
	/*   %87 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__81_34)) begin
		main_81_87_reg <= main_81_87;
		if (start == 1'b0 && ^(main_81_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_81_87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %89 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_88_89 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %89 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__88_37)) begin
		main_88_89_reg <= main_88_89;
		if (start == 1'b0 && ^(main_88_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %90 = load i32* %89, align 4, !tbaa !1*/
		main_88_90 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %90 = load i32* %89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_38)) begin
		main_88_90_reg <= main_88_90;
		if (start == 1'b0 && ^(main_88_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %91 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_88_91 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %91 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__88_37)) begin
		main_88_91_reg <= main_88_91;
		if (start == 1'b0 && ^(main_88_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %92 = load i32* %91, align 4, !tbaa !1*/
		main_88_92 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %92 = load i32* %91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_38)) begin
		main_88_92_reg <= main_88_92;
		if (start == 1'b0 && ^(main_88_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %93 = or i32 %92, %90*/
		main_88_93 = (main_88_92 | main_88_90);
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %93 = or i32 %92, %90*/
	if ((cur_state == LEGUP_F_main_BB__88_38)) begin
		main_88_93_reg <= main_88_93;
		if (start == 1'b0 && ^(main_88_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %94 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_88_94 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %94 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__88_37)) begin
		main_88_94_reg <= main_88_94;
		if (start == 1'b0 && ^(main_88_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %95*/
	/*   %96 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_95_96 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %95*/
	/*   %96 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__95_40)) begin
		main_95_96_reg <= main_95_96;
		if (start == 1'b0 && ^(main_95_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_95_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %95*/
	/*   %97 = load i32* %96, align 4, !tbaa !1*/
		main_95_97 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %95*/
	/*   %97 = load i32* %96, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__95_41)) begin
		main_95_97_reg <= main_95_97;
		if (start == 1'b0 && ^(main_95_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_95_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %95*/
	/*   %98 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_95_98 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %95*/
	/*   %98 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__95_40)) begin
		main_95_98_reg <= main_95_98;
		if (start == 1'b0 && ^(main_95_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_95_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %95*/
	/*   %99 = load i32* %98, align 4, !tbaa !1*/
		main_95_99 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %95*/
	/*   %99 = load i32* %98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__95_41)) begin
		main_95_99_reg <= main_95_99;
		if (start == 1'b0 && ^(main_95_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_95_99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %95*/
	/*   %100 = xor i32 %99, %97*/
		main_95_100 = (main_95_99 ^ main_95_97);
end
always @(posedge clk) begin
	/* main: %95*/
	/*   %100 = xor i32 %99, %97*/
	if ((cur_state == LEGUP_F_main_BB__95_41)) begin
		main_95_100_reg <= main_95_100;
		if (start == 1'b0 && ^(main_95_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_95_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %95*/
	/*   %101 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_95_101 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %95*/
	/*   %101 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__95_40)) begin
		main_95_101_reg <= main_95_101;
		if (start == 1'b0 && ^(main_95_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_95_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %102*/
	/*   %103 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_102_103 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %102*/
	/*   %103 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__102_43)) begin
		main_102_103_reg <= main_102_103;
		if (start == 1'b0 && ^(main_102_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_102_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %102*/
	/*   %104 = load i32* %103, align 4, !tbaa !1*/
		main_102_104 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %102*/
	/*   %104 = load i32* %103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__102_44)) begin
		main_102_104_reg <= main_102_104;
		if (start == 1'b0 && ^(main_102_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_102_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %102*/
	/*   %105 = shl i32 %104, %26*/
		main_102_105 = (main_102_104 <<< (main_23_26_reg % 32));
end
always @(posedge clk) begin
	/* main: %102*/
	/*   %105 = shl i32 %104, %26*/
	if ((cur_state == LEGUP_F_main_BB__102_44)) begin
		main_102_105_reg <= main_102_105;
		if (start == 1'b0 && ^(main_102_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_102_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %102*/
	/*   %106 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_102_106 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %102*/
	/*   %106 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__102_43)) begin
		main_102_106_reg <= main_102_106;
		if (start == 1'b0 && ^(main_102_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_102_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %107*/
	/*   %108 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_107_108 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %107*/
	/*   %108 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__107_46)) begin
		main_107_108_reg <= main_107_108;
		if (start == 1'b0 && ^(main_107_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_107_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %107*/
	/*   %109 = load i32* %108, align 4, !tbaa !1*/
		main_107_109 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %107*/
	/*   %109 = load i32* %108, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__107_47)) begin
		main_107_109_reg <= main_107_109;
		if (start == 1'b0 && ^(main_107_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_107_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %107*/
	/*   %110 = ashr i32 %109, %26*/
		main_107_110 = ($signed(main_107_109) >>> main_23_26_reg);
end
always @(posedge clk) begin
	/* main: %107*/
	/*   %110 = ashr i32 %109, %26*/
	if ((cur_state == LEGUP_F_main_BB__107_47)) begin
		main_107_110_reg <= main_107_110;
		if (start == 1'b0 && ^(main_107_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_107_110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %107*/
	/*   %111 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_107_111 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %107*/
	/*   %111 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__107_46)) begin
		main_107_111_reg <= main_107_111;
		if (start == 1'b0 && ^(main_107_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_107_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %113 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_112_113 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %113 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__112_49)) begin
		main_112_113_reg <= main_112_113;
		if (start == 1'b0 && ^(main_112_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %114 = load i32* %113, align 4, !tbaa !1*/
		main_112_114 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %114 = load i32* %113, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__112_50)) begin
		main_112_114_reg <= main_112_114;
		if (start == 1'b0 && ^(main_112_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %115 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_112_115 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %115 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__112_49)) begin
		main_112_115_reg <= main_112_115;
		if (start == 1'b0 && ^(main_112_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %116 = load i32* %115, align 4, !tbaa !1*/
		main_112_116 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %116 = load i32* %115, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__112_50)) begin
		main_112_116_reg <= main_112_116;
		if (start == 1'b0 && ^(main_112_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %117 = shl i32 %114, %116*/
		main_112_117 = (main_112_114 <<< (main_112_116 % 32));
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %117 = shl i32 %114, %116*/
	if ((cur_state == LEGUP_F_main_BB__112_50)) begin
		main_112_117_reg <= main_112_117;
		if (start == 1'b0 && ^(main_112_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %118 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_112_118 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %118 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__112_49)) begin
		main_112_118_reg <= main_112_118;
		if (start == 1'b0 && ^(main_112_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %120 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_119_120 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %120 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__119_52)) begin
		main_119_120_reg <= main_119_120;
		if (start == 1'b0 && ^(main_119_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %121 = load i32* %120, align 4, !tbaa !1*/
		main_119_121 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %121 = load i32* %120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_53)) begin
		main_119_121_reg <= main_119_121;
		if (start == 1'b0 && ^(main_119_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %122 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_119_122 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %122 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__119_52)) begin
		main_119_122_reg <= main_119_122;
		if (start == 1'b0 && ^(main_119_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %123 = load i32* %122, align 4, !tbaa !1*/
		main_119_123 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %123 = load i32* %122, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_53)) begin
		main_119_123_reg <= main_119_123;
		if (start == 1'b0 && ^(main_119_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %124 = ashr i32 %121, %123*/
		main_119_124 = ($signed(main_119_121) >>> main_119_123);
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %124 = ashr i32 %121, %123*/
	if ((cur_state == LEGUP_F_main_BB__119_53)) begin
		main_119_124_reg <= main_119_124;
		if (start == 1'b0 && ^(main_119_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %125 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_119_125 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %125 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__119_52)) begin
		main_119_125_reg <= main_119_125;
		if (start == 1'b0 && ^(main_119_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %127 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_126_127 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %127 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__126_55)) begin
		main_126_127_reg <= main_126_127;
		if (start == 1'b0 && ^(main_126_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %128 = load i32* %127, align 4, !tbaa !1*/
		main_126_128 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %128 = load i32* %127, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_56)) begin
		main_126_128_reg <= main_126_128;
		if (start == 1'b0 && ^(main_126_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %129 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_126_129 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %129 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__126_55)) begin
		main_126_129_reg <= main_126_129;
		if (start == 1'b0 && ^(main_126_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
		main_126_130 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_56)) begin
		main_126_130_reg <= main_126_130;
		if (start == 1'b0 && ^(main_126_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %131 = icmp slt i32 %128, %130*/
		main_126_131 = ($signed(main_126_128) < $signed(main_126_130));
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %131 = icmp slt i32 %128, %130*/
	if ((cur_state == LEGUP_F_main_BB__126_56)) begin
		main_126_131_reg <= main_126_131;
		if (start == 1'b0 && ^(main_126_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %132 = zext i1 %131 to i32*/
		main_126_132 = main_126_131;
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %132 = zext i1 %131 to i32*/
	if ((cur_state == LEGUP_F_main_BB__126_56)) begin
		main_126_132_reg <= main_126_132;
		if (start == 1'b0 && ^(main_126_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %133 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_126_133 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %133 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__126_55)) begin
		main_126_133_reg <= main_126_133;
		if (start == 1'b0 && ^(main_126_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %135 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_134_135 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %135 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__134_58)) begin
		main_134_135_reg <= main_134_135;
		if (start == 1'b0 && ^(main_134_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
		main_134_136 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__134_59)) begin
		main_134_136_reg <= main_134_136;
		if (start == 1'b0 && ^(main_134_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %137 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_134_137 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %137 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__134_58)) begin
		main_134_137_reg <= main_134_137;
		if (start == 1'b0 && ^(main_134_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %138 = load i32* %137, align 4, !tbaa !1*/
		main_134_138 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %138 = load i32* %137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__134_59)) begin
		main_134_138_reg <= main_134_138;
		if (start == 1'b0 && ^(main_134_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %139 = icmp ult i32 %136, %138*/
		main_134_139 = (main_134_136 < main_134_138);
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %139 = icmp ult i32 %136, %138*/
	if ((cur_state == LEGUP_F_main_BB__134_59)) begin
		main_134_139_reg <= main_134_139;
		if (start == 1'b0 && ^(main_134_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %140 = zext i1 %139 to i32*/
		main_134_140 = main_134_139;
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %140 = zext i1 %139 to i32*/
	if ((cur_state == LEGUP_F_main_BB__134_59)) begin
		main_134_140_reg <= main_134_140;
		if (start == 1'b0 && ^(main_134_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %141 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_134_141 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %141 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__134_58)) begin
		main_134_141_reg <= main_134_141;
		if (start == 1'b0 && ^(main_134_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %142*/
	/*   %143 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_142_143 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %142*/
	/*   %143 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__142_61)) begin
		main_142_143_reg <= main_142_143;
		if (start == 1'b0 && ^(main_142_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_142_143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %142*/
	/*   %144 = load i32* %143, align 4, !tbaa !1*/
		main_142_144 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %142*/
	/*   %144 = load i32* %143, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__142_62)) begin
		main_142_144_reg <= main_142_144;
		if (start == 1'b0 && ^(main_142_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_142_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %145*/
	/*   %146 = shl i32 %20, 2*/
		main_145_146 = (main_15_20_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %145*/
	/*   %146 = shl i32 %20, 2*/
	if ((cur_state == LEGUP_F_main_BB__145_63)) begin
		main_145_146_reg <= main_145_146;
		if (start == 1'b0 && ^(main_145_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_145_146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %145*/
	/*   %147 = and i32 %146, 268435452*/
		main_145_147 = (main_145_146 & 32'd268435452);
end
always @(posedge clk) begin
	/* main: %145*/
	/*   %147 = and i32 %146, 268435452*/
	if ((cur_state == LEGUP_F_main_BB__145_63)) begin
		main_145_147_reg <= main_145_147;
		if (start == 1'b0 && ^(main_145_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_145_147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %148*/
	/*   %149 = shl i32 %20, 2*/
		main_148_149 = (main_15_20_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %148*/
	/*   %149 = shl i32 %20, 2*/
	if ((cur_state == LEGUP_F_main_BB__148_64)) begin
		main_148_149_reg <= main_148_149;
		if (start == 1'b0 && ^(main_148_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %148*/
	/*   %150 = and i32 %149, 268435452*/
		main_148_150 = (main_148_149 & 32'd268435452);
end
always @(posedge clk) begin
	/* main: %148*/
	/*   %150 = and i32 %149, 268435452*/
	if ((cur_state == LEGUP_F_main_BB__148_64)) begin
		main_148_150_reg <= main_148_150;
		if (start == 1'b0 && ^(main_148_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %151*/
	/*   %152 = lshr i32 %20, 16*/
		main_151_152 = (main_15_20_reg >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %151*/
	/*   %152 = lshr i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__151_66)) begin
		main_151_152_reg <= main_151_152;
		if (start == 1'b0 && ^(main_151_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %151*/
	/*   %153 = and i32 %152, 31*/
		main_151_153 = (main_151_152 & 32'd31);
end
always @(posedge clk) begin
	/* main: %151*/
	/*   %153 = and i32 %152, 31*/
	if ((cur_state == LEGUP_F_main_BB__151_66)) begin
		main_151_153_reg <= main_151_153;
		if (start == 1'b0 && ^(main_151_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %151*/
	/*   %154 = lshr i32 %20, 21*/
		main_151_154 = (main_15_20_reg >>> (32'd21 % 32));
end
always @(posedge clk) begin
	/* main: %151*/
	/*   %154 = lshr i32 %20, 21*/
	if ((cur_state == LEGUP_F_main_BB__151_66)) begin
		main_151_154_reg <= main_151_154;
		if (start == 1'b0 && ^(main_151_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %151*/
	/*   %155 = and i32 %154, 31*/
		main_151_155 = (main_151_154 & 32'd31);
end
always @(posedge clk) begin
	/* main: %151*/
	/*   %155 = and i32 %154, 31*/
	if ((cur_state == LEGUP_F_main_BB__151_66)) begin
		main_151_155_reg <= main_151_155;
		if (start == 1'b0 && ^(main_151_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %157 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %155*/
		main_156_157 = (1'd0 | (4 * main_151_155_reg));
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %157 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %155*/
	if ((cur_state == LEGUP_F_main_BB__156_67)) begin
		main_156_157_reg <= main_156_157;
		if (start == 1'b0 && ^(main_156_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %158 = load i32* %157, align 4, !tbaa !1*/
		main_156_158 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %158 = load i32* %157, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__156_68)) begin
		main_156_158_reg <= main_156_158;
		if (start == 1'b0 && ^(main_156_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %sext7 = shl i32 %20, 16*/
		main_156_sext7 = (main_15_20_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %sext7 = shl i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__156_67)) begin
		main_156_sext7_reg <= main_156_sext7;
		if (start == 1'b0 && ^(main_156_sext7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_sext7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %159 = ashr exact i32 %sext7, 16*/
		main_156_159 = ($signed(main_156_sext7) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %159 = ashr exact i32 %sext7, 16*/
	if ((cur_state == LEGUP_F_main_BB__156_67)) begin
		main_156_159_reg <= main_156_159;
		if (start == 1'b0 && ^(main_156_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %160 = add nsw i32 %158, %159*/
		main_156_160 = (main_156_158 + main_156_159_reg);
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %160 = add nsw i32 %158, %159*/
	if ((cur_state == LEGUP_F_main_BB__156_68)) begin
		main_156_160_reg <= main_156_160;
		if (start == 1'b0 && ^(main_156_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %161 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %153*/
		main_156_161 = (1'd0 | (4 * main_151_153_reg));
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %161 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %153*/
	if ((cur_state == LEGUP_F_main_BB__156_67)) begin
		main_156_161_reg <= main_156_161;
		if (start == 1'b0 && ^(main_156_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %163 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %155*/
		main_162_163 = (1'd0 | (4 * main_151_155_reg));
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %163 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %155*/
	if ((cur_state == LEGUP_F_main_BB__162_70)) begin
		main_162_163_reg <= main_162_163;
		if (start == 1'b0 && ^(main_162_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
		main_162_164 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__162_71)) begin
		main_162_164_reg <= main_162_164;
		if (start == 1'b0 && ^(main_162_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_164_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %165 = and i32 %20, 65535*/
		main_162_165 = (main_15_20_reg & 32'd65535);
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %165 = and i32 %20, 65535*/
	if ((cur_state == LEGUP_F_main_BB__162_70)) begin
		main_162_165_reg <= main_162_165;
		if (start == 1'b0 && ^(main_162_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %166 = and i32 %165, %164*/
		main_162_166 = (main_162_165_reg & main_162_164);
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %166 = and i32 %165, %164*/
	if ((cur_state == LEGUP_F_main_BB__162_71)) begin
		main_162_166_reg <= main_162_166;
		if (start == 1'b0 && ^(main_162_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_166_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %167 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %153*/
		main_162_167 = (1'd0 | (4 * main_151_153_reg));
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %167 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %153*/
	if ((cur_state == LEGUP_F_main_BB__162_70)) begin
		main_162_167_reg <= main_162_167;
		if (start == 1'b0 && ^(main_162_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_167_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %169 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %155*/
		main_168_169 = (1'd0 | (4 * main_151_155_reg));
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %169 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %155*/
	if ((cur_state == LEGUP_F_main_BB__168_73)) begin
		main_168_169_reg <= main_168_169;
		if (start == 1'b0 && ^(main_168_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %170 = load i32* %169, align 4, !tbaa !1*/
		main_168_170 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %170 = load i32* %169, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__168_74)) begin
		main_168_170_reg <= main_168_170;
		if (start == 1'b0 && ^(main_168_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %171 = and i32 %20, 65535*/
		main_168_171 = (main_15_20_reg & 32'd65535);
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %171 = and i32 %20, 65535*/
	if ((cur_state == LEGUP_F_main_BB__168_73)) begin
		main_168_171_reg <= main_168_171;
		if (start == 1'b0 && ^(main_168_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %172 = or i32 %170, %171*/
		main_168_172 = (main_168_170 | main_168_171_reg);
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %172 = or i32 %170, %171*/
	if ((cur_state == LEGUP_F_main_BB__168_74)) begin
		main_168_172_reg <= main_168_172;
		if (start == 1'b0 && ^(main_168_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %173 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %153*/
		main_168_173 = (1'd0 | (4 * main_151_153_reg));
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %173 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %153*/
	if ((cur_state == LEGUP_F_main_BB__168_73)) begin
		main_168_173_reg <= main_168_173;
		if (start == 1'b0 && ^(main_168_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %174*/
	/*   %175 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %155*/
		main_174_175 = (1'd0 | (4 * main_151_155_reg));
end
always @(posedge clk) begin
	/* main: %174*/
	/*   %175 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %155*/
	if ((cur_state == LEGUP_F_main_BB__174_76)) begin
		main_174_175_reg <= main_174_175;
		if (start == 1'b0 && ^(main_174_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_174_175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %174*/
	/*   %176 = load i32* %175, align 4, !tbaa !1*/
		main_174_176 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %174*/
	/*   %176 = load i32* %175, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__174_77)) begin
		main_174_176_reg <= main_174_176;
		if (start == 1'b0 && ^(main_174_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_174_176_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %174*/
	/*   %177 = and i32 %20, 65535*/
		main_174_177 = (main_15_20_reg & 32'd65535);
end
always @(posedge clk) begin
	/* main: %174*/
	/*   %177 = and i32 %20, 65535*/
	if ((cur_state == LEGUP_F_main_BB__174_76)) begin
		main_174_177_reg <= main_174_177;
		if (start == 1'b0 && ^(main_174_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_174_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %174*/
	/*   %178 = xor i32 %176, %177*/
		main_174_178 = (main_174_176 ^ main_174_177_reg);
end
always @(posedge clk) begin
	/* main: %174*/
	/*   %178 = xor i32 %176, %177*/
	if ((cur_state == LEGUP_F_main_BB__174_77)) begin
		main_174_178_reg <= main_174_178;
		if (start == 1'b0 && ^(main_174_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_174_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %174*/
	/*   %179 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %153*/
		main_174_179 = (1'd0 | (4 * main_151_153_reg));
end
always @(posedge clk) begin
	/* main: %174*/
	/*   %179 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %153*/
	if ((cur_state == LEGUP_F_main_BB__174_76)) begin
		main_174_179_reg <= main_174_179;
		if (start == 1'b0 && ^(main_174_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_174_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %180*/
	/*   %181 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %155*/
		main_180_181 = (1'd0 | (4 * main_151_155_reg));
end
always @(posedge clk) begin
	/* main: %180*/
	/*   %181 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %155*/
	if ((cur_state == LEGUP_F_main_BB__180_79)) begin
		main_180_181_reg <= main_180_181;
		if (start == 1'b0 && ^(main_180_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_180_181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %180*/
	/*   %182 = load i32* %181, align 4, !tbaa !1*/
		main_180_182 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %180*/
	/*   %182 = load i32* %181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__180_80)) begin
		main_180_182_reg <= main_180_182;
		if (start == 1'b0 && ^(main_180_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_180_182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %180*/
	/*   %183 = add nsw i32 %182, %20*/
		main_180_183 = (main_180_182 + main_15_20_reg);
end
always @(posedge clk) begin
	/* main: %180*/
	/*   %183 = add nsw i32 %182, %20*/
	if ((cur_state == LEGUP_F_main_BB__180_80)) begin
		main_180_183_reg <= main_180_183;
		if (start == 1'b0 && ^(main_180_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_180_183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %180*/
	/*   %184 = lshr i32 %183, 2*/
		main_180_184 = (main_180_183 >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %180*/
	/*   %184 = lshr i32 %183, 2*/
	if ((cur_state == LEGUP_F_main_BB__180_80)) begin
		main_180_184_reg <= main_180_184;
		if (start == 1'b0 && ^(main_180_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_180_184_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %180*/
	/*   %185 = and i32 %184, 63*/
		main_180_185 = (main_180_184 & 32'd63);
end
always @(posedge clk) begin
	/* main: %180*/
	/*   %185 = and i32 %184, 63*/
	if ((cur_state == LEGUP_F_main_BB__180_80)) begin
		main_180_185_reg <= main_180_185;
		if (start == 1'b0 && ^(main_180_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_180_185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %180*/
	/*   %186 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 %185*/
		main_180_186 = (1'd0 | (4 * main_180_185_reg));
end
always @(posedge clk) begin
	/* main: %180*/
	/*   %186 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 %185*/
	if ((cur_state == LEGUP_F_main_BB__180_81)) begin
		main_180_186_reg <= main_180_186;
		if (start == 1'b0 && ^(main_180_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_180_186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %180*/
	/*   %187 = load i32* %186, align 4, !tbaa !1*/
		main_180_187 = main_0_dmem_out_b;
end
always @(posedge clk) begin
	/* main: %180*/
	/*   %187 = load i32* %186, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__180_82)) begin
		main_180_187_reg <= main_180_187;
		if (start == 1'b0 && ^(main_180_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_180_187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %180*/
	/*   %188 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %153*/
		main_180_188 = (1'd0 | (4 * main_151_153_reg));
end
always @(posedge clk) begin
	/* main: %180*/
	/*   %188 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %153*/
	if ((cur_state == LEGUP_F_main_BB__180_79)) begin
		main_180_188_reg <= main_180_188;
		if (start == 1'b0 && ^(main_180_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_180_188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %190 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %153*/
		main_189_190 = (1'd0 | (4 * main_151_153_reg));
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %190 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %153*/
	if ((cur_state == LEGUP_F_main_BB__189_84)) begin
		main_189_190_reg <= main_189_190;
		if (start == 1'b0 && ^(main_189_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %191 = load i32* %190, align 4, !tbaa !1*/
		main_189_191 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %191 = load i32* %190, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_85)) begin
		main_189_191_reg <= main_189_191;
		if (start == 1'b0 && ^(main_189_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %192 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %155*/
		main_189_192 = (1'd0 | (4 * main_151_155_reg));
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %192 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %155*/
	if ((cur_state == LEGUP_F_main_BB__189_84)) begin
		main_189_192_reg <= main_189_192;
		if (start == 1'b0 && ^(main_189_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %193 = load i32* %192, align 4, !tbaa !1*/
		main_189_193 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %193 = load i32* %192, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_85)) begin
		main_189_193_reg <= main_189_193;
		if (start == 1'b0 && ^(main_189_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %194 = add nsw i32 %193, %20*/
		main_189_194 = (main_189_193 + main_15_20_reg);
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %194 = add nsw i32 %193, %20*/
	if ((cur_state == LEGUP_F_main_BB__189_85)) begin
		main_189_194_reg <= main_189_194;
		if (start == 1'b0 && ^(main_189_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_194_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %195 = lshr i32 %194, 2*/
		main_189_195 = (main_189_194 >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %195 = lshr i32 %194, 2*/
	if ((cur_state == LEGUP_F_main_BB__189_85)) begin
		main_189_195_reg <= main_189_195;
		if (start == 1'b0 && ^(main_189_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %196 = and i32 %195, 63*/
		main_189_196 = (main_189_195 & 32'd63);
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %196 = and i32 %195, 63*/
	if ((cur_state == LEGUP_F_main_BB__189_85)) begin
		main_189_196_reg <= main_189_196;
		if (start == 1'b0 && ^(main_189_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %197 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 %196*/
		main_189_197 = (1'd0 | (4 * main_189_196_reg));
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %197 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 %196*/
	if ((cur_state == LEGUP_F_main_BB__189_86)) begin
		main_189_197_reg <= main_189_197;
		if (start == 1'b0 && ^(main_189_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_197_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %sext4 = shl i32 %20, 16*/
		main_198_sext4 = (main_15_20_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %sext4 = shl i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__198_88)) begin
		main_198_sext4_reg <= main_198_sext4;
		if (start == 1'b0 && ^(main_198_sext4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_sext4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %199 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %153*/
		main_198_199 = (1'd0 | (4 * main_151_153_reg));
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %199 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %153*/
	if ((cur_state == LEGUP_F_main_BB__198_88)) begin
		main_198_199_reg <= main_198_199;
		if (start == 1'b0 && ^(main_198_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %200*/
	/*   %201 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %155*/
		main_200_201 = (1'd0 | (4 * main_151_155_reg));
end
always @(posedge clk) begin
	/* main: %200*/
	/*   %201 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %155*/
	if ((cur_state == LEGUP_F_main_BB__200_90)) begin
		main_200_201_reg <= main_200_201;
		if (start == 1'b0 && ^(main_200_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %200*/
	/*   %202 = load i32* %201, align 4, !tbaa !1*/
		main_200_202 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %200*/
	/*   %202 = load i32* %201, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__200_91)) begin
		main_200_202_reg <= main_200_202;
		if (start == 1'b0 && ^(main_200_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %200*/
	/*   %203 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %153*/
		main_200_203 = (1'd0 | (4 * main_151_153_reg));
end
always @(posedge clk) begin
	/* main: %200*/
	/*   %203 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %153*/
	if ((cur_state == LEGUP_F_main_BB__200_90)) begin
		main_200_203_reg <= main_200_203;
		if (start == 1'b0 && ^(main_200_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %200*/
	/*   %204 = load i32* %203, align 4, !tbaa !1*/
		main_200_204 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %200*/
	/*   %204 = load i32* %203, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__200_91)) begin
		main_200_204_reg <= main_200_204;
		if (start == 1'b0 && ^(main_200_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %200*/
	/*   %205 = icmp eq i32 %202, %204*/
		main_200_205 = (main_200_202 == main_200_204);
end
always @(posedge clk) begin
	/* main: %200*/
	/*   %205 = icmp eq i32 %202, %204*/
	if ((cur_state == LEGUP_F_main_BB__200_91)) begin
		main_200_205_reg <= main_200_205;
		if (start == 1'b0 && ^(main_200_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %206*/
	/*   %sext3 = shl i32 %20, 16*/
		main_206_sext3 = (main_15_20_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %206*/
	/*   %sext3 = shl i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__206_92)) begin
		main_206_sext3_reg <= main_206_sext3;
		if (start == 1'b0 && ^(main_206_sext3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_206_sext3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %206*/
	/*   %207 = ashr exact i32 %sext3, 14*/
		main_206_207 = ($signed(main_206_sext3) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %206*/
	/*   %207 = ashr exact i32 %sext3, 14*/
	if ((cur_state == LEGUP_F_main_BB__206_92)) begin
		main_206_207_reg <= main_206_207;
		if (start == 1'b0 && ^(main_206_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_206_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %206*/
	/*   %208 = add nsw i32 %207, %pc.0*/
		main_206_208 = (main_206_207 + main_15_pc0_reg);
end
always @(posedge clk) begin
	/* main: %206*/
	/*   %208 = add nsw i32 %207, %pc.0*/
	if ((cur_state == LEGUP_F_main_BB__206_92)) begin
		main_206_208_reg <= main_206_208;
		if (start == 1'b0 && ^(main_206_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_206_208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %210 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %155*/
		main_209_210 = (1'd0 | (4 * main_151_155_reg));
end
always @(posedge clk) begin
	/* main: %209*/
	/*   %210 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %155*/
	if ((cur_state == LEGUP_F_main_BB__209_93)) begin
		main_209_210_reg <= main_209_210;
		if (start == 1'b0 && ^(main_209_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %211 = load i32* %210, align 4, !tbaa !1*/
		main_209_211 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %209*/
	/*   %211 = load i32* %210, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__209_94)) begin
		main_209_211_reg <= main_209_211;
		if (start == 1'b0 && ^(main_209_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %212 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %153*/
		main_209_212 = (1'd0 | (4 * main_151_153_reg));
end
always @(posedge clk) begin
	/* main: %209*/
	/*   %212 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %153*/
	if ((cur_state == LEGUP_F_main_BB__209_93)) begin
		main_209_212_reg <= main_209_212;
		if (start == 1'b0 && ^(main_209_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_212_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
		main_209_213 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %209*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__209_94)) begin
		main_209_213_reg <= main_209_213;
		if (start == 1'b0 && ^(main_209_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_213_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %214 = icmp eq i32 %211, %213*/
		main_209_214 = (main_209_211 == main_209_213);
end
always @(posedge clk) begin
	/* main: %209*/
	/*   %214 = icmp eq i32 %211, %213*/
	if ((cur_state == LEGUP_F_main_BB__209_94)) begin
		main_209_214_reg <= main_209_214;
		if (start == 1'b0 && ^(main_209_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_214_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %215*/
	/*   %sext2 = shl i32 %20, 16*/
		main_215_sext2 = (main_15_20_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %215*/
	/*   %sext2 = shl i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__215_95)) begin
		main_215_sext2_reg <= main_215_sext2;
		if (start == 1'b0 && ^(main_215_sext2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_sext2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %215*/
	/*   %216 = ashr exact i32 %sext2, 14*/
		main_215_216 = ($signed(main_215_sext2) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %215*/
	/*   %216 = ashr exact i32 %sext2, 14*/
	if ((cur_state == LEGUP_F_main_BB__215_95)) begin
		main_215_216_reg <= main_215_216;
		if (start == 1'b0 && ^(main_215_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %215*/
	/*   %217 = add nsw i32 %216, %pc.0*/
		main_215_217 = (main_215_216 + main_15_pc0_reg);
end
always @(posedge clk) begin
	/* main: %215*/
	/*   %217 = add nsw i32 %216, %pc.0*/
	if ((cur_state == LEGUP_F_main_BB__215_95)) begin
		main_215_217_reg <= main_215_217;
		if (start == 1'b0 && ^(main_215_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_217_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %218*/
	/*   %219 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %155*/
		main_218_219 = (1'd0 | (4 * main_151_155_reg));
end
always @(posedge clk) begin
	/* main: %218*/
	/*   %219 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %155*/
	if ((cur_state == LEGUP_F_main_BB__218_96)) begin
		main_218_219_reg <= main_218_219;
		if (start == 1'b0 && ^(main_218_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_219_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %218*/
	/*   %220 = load i32* %219, align 4, !tbaa !1*/
		main_218_220 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %218*/
	/*   %220 = load i32* %219, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__218_97)) begin
		main_218_220_reg <= main_218_220;
		if (start == 1'b0 && ^(main_218_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_220_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %218*/
	/*   %221 = icmp sgt i32 %220, -1*/
		main_218_221 = ($signed(main_218_220) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %218*/
	/*   %221 = icmp sgt i32 %220, -1*/
	if ((cur_state == LEGUP_F_main_BB__218_97)) begin
		main_218_221_reg <= main_218_221;
		if (start == 1'b0 && ^(main_218_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_221_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %222*/
	/*   %sext1 = shl i32 %20, 16*/
		main_222_sext1 = (main_15_20_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %222*/
	/*   %sext1 = shl i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__222_98)) begin
		main_222_sext1_reg <= main_222_sext1;
		if (start == 1'b0 && ^(main_222_sext1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_222_sext1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %222*/
	/*   %223 = ashr exact i32 %sext1, 14*/
		main_222_223 = ($signed(main_222_sext1) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %222*/
	/*   %223 = ashr exact i32 %sext1, 14*/
	if ((cur_state == LEGUP_F_main_BB__222_98)) begin
		main_222_223_reg <= main_222_223;
		if (start == 1'b0 && ^(main_222_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_222_223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %222*/
	/*   %224 = add nsw i32 %223, %pc.0*/
		main_222_224 = (main_222_223 + main_15_pc0_reg);
end
always @(posedge clk) begin
	/* main: %222*/
	/*   %224 = add nsw i32 %223, %pc.0*/
	if ((cur_state == LEGUP_F_main_BB__222_98)) begin
		main_222_224_reg <= main_222_224;
		if (start == 1'b0 && ^(main_222_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_222_224_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %226 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %155*/
		main_225_226 = (1'd0 | (4 * main_151_155_reg));
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %226 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %155*/
	if ((cur_state == LEGUP_F_main_BB__225_99)) begin
		main_225_226_reg <= main_225_226;
		if (start == 1'b0 && ^(main_225_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_226_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %227 = load i32* %226, align 4, !tbaa !1*/
		main_225_227 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %227 = load i32* %226, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_100)) begin
		main_225_227_reg <= main_225_227;
		if (start == 1'b0 && ^(main_225_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_227_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %sext = shl i32 %20, 16*/
		main_225_sext = (main_15_20_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %sext = shl i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__225_99)) begin
		main_225_sext_reg <= main_225_sext;
		if (start == 1'b0 && ^(main_225_sext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_sext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %228 = ashr exact i32 %sext, 16*/
		main_225_228 = ($signed(main_225_sext) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %228 = ashr exact i32 %sext, 16*/
	if ((cur_state == LEGUP_F_main_BB__225_99)) begin
		main_225_228_reg <= main_225_228;
		if (start == 1'b0 && ^(main_225_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_228_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %229 = icmp slt i32 %227, %228*/
		main_225_229 = ($signed(main_225_227) < $signed(main_225_228_reg));
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %229 = icmp slt i32 %227, %228*/
	if ((cur_state == LEGUP_F_main_BB__225_100)) begin
		main_225_229_reg <= main_225_229;
		if (start == 1'b0 && ^(main_225_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %230 = zext i1 %229 to i32*/
		main_225_230 = main_225_229;
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %230 = zext i1 %229 to i32*/
	if ((cur_state == LEGUP_F_main_BB__225_100)) begin
		main_225_230_reg <= main_225_230;
		if (start == 1'b0 && ^(main_225_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_230_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %231 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %153*/
		main_225_231 = (1'd0 | (4 * main_151_153_reg));
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %231 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %153*/
	if ((cur_state == LEGUP_F_main_BB__225_99)) begin
		main_225_231_reg <= main_225_231;
		if (start == 1'b0 && ^(main_225_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_231_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %232*/
	/*   %233 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %155*/
		main_232_233 = (1'd0 | (4 * main_151_155_reg));
end
always @(posedge clk) begin
	/* main: %232*/
	/*   %233 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %155*/
	if ((cur_state == LEGUP_F_main_BB__232_102)) begin
		main_232_233_reg <= main_232_233;
		if (start == 1'b0 && ^(main_232_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_232_233_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %232*/
	/*   %234 = load i32* %233, align 4, !tbaa !1*/
		main_232_234 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %232*/
	/*   %234 = load i32* %233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__232_103)) begin
		main_232_234_reg <= main_232_234;
		if (start == 1'b0 && ^(main_232_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_232_234_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %232*/
	/*   %235 = and i32 %20, 65535*/
		main_232_235 = (main_15_20_reg & 32'd65535);
end
always @(posedge clk) begin
	/* main: %232*/
	/*   %235 = and i32 %20, 65535*/
	if ((cur_state == LEGUP_F_main_BB__232_102)) begin
		main_232_235_reg <= main_232_235;
		if (start == 1'b0 && ^(main_232_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_232_235_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %232*/
	/*   %236 = icmp ult i32 %234, %235*/
		main_232_236 = (main_232_234 < main_232_235_reg);
end
always @(posedge clk) begin
	/* main: %232*/
	/*   %236 = icmp ult i32 %234, %235*/
	if ((cur_state == LEGUP_F_main_BB__232_103)) begin
		main_232_236_reg <= main_232_236;
		if (start == 1'b0 && ^(main_232_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_232_236_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %232*/
	/*   %237 = zext i1 %236 to i32*/
		main_232_237 = main_232_236;
end
always @(posedge clk) begin
	/* main: %232*/
	/*   %237 = zext i1 %236 to i32*/
	if ((cur_state == LEGUP_F_main_BB__232_103)) begin
		main_232_237_reg <= main_232_237;
		if (start == 1'b0 && ^(main_232_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_232_237_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %232*/
	/*   %238 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %153*/
		main_232_238 = (1'd0 | (4 * main_151_153_reg));
end
always @(posedge clk) begin
	/* main: %232*/
	/*   %238 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %153*/
	if ((cur_state == LEGUP_F_main_BB__232_102)) begin
		main_232_238_reg <= main_232_238;
		if (start == 1'b0 && ^(main_232_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_232_238_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__42_23) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__51_26) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__66_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__77_31) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__79_33) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__81_36) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__88_39) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__95_42) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__102_45) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__107_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__112_51) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__119_54) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__126_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__134_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__142_62) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_142_144;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__145_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_145_147;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__148_65) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_148_150_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__156_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__162_72) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__168_75) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__174_78) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__180_83) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__189_87) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__198_89) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__200_91) & (memory_controller_waitrequest == 1'd0)) & (main_200_205 == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__206_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_206_208;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__209_94) & (memory_controller_waitrequest == 1'd0)) & (main_209_214 == 1'd1))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__215_95) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_215_217;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__218_97) & (memory_controller_waitrequest == 1'd0)) & (main_218_221 == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__222_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_222_224;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__225_101) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1 = main_15_21_reg;
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__232_104) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_239_pc1 = main_15_21_reg;
	end
end
always @(posedge clk) begin
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__42_23) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__51_26) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__66_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__77_31) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__79_33) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__81_36) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__88_39) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__95_42) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__102_45) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__107_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__112_51) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__119_54) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__126_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__134_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__142_62) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__145_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__148_65) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__156_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__162_72) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__168_75) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__174_78) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__180_83) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__189_87) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__198_89) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__200_91) & (memory_controller_waitrequest == 1'd0)) & (main_200_205 == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__206_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__209_94) & (memory_controller_waitrequest == 1'd0)) & (main_209_214 == 1'd1))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__215_95) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__218_97) & (memory_controller_waitrequest == 1'd0)) & (main_218_221 == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__222_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__225_101) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %pc.1 = phi i32 [ %21, %232 ], [ %21, %225 ], [ %224, %222 ], [ %21, %218 ], [ %217, %215 ], [ %21, %209 ], [ %208, %206 ], [ %21, %200 ], [ %21, %198 ], [ %21, %189 ], [ %21, %180 ], [ %21, %174 ], [ %21, %168 ], [ %21, %162 ], [ %21, %156 ], [ %150, %148 ], [ %147, %145 ], [ %144, %142 ], [ %21, %134 ], [ %21, %126 ], [ %21, %119 ], [ %21, %112 ], [ %21, %107 ], [ %21, %102 ], [ %21, %95 ], [ %21, %88 ], [ %21, %81 ], [ %21, %79 ], [ %21, %77 ], [ %21, %66 ], [ %21, %51 ], [ %21, %42 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__232_104) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_pc1_reg <= main_239_pc1;
		if (start == 1'b0 && ^(main_239_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_pc1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__42_23) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__51_26) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_51_63;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__66_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_66_74;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__77_31) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__79_33) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__81_36) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__88_39) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__95_42) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__102_45) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__107_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__112_51) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__119_54) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__126_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__134_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__142_62) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__145_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__148_65) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__156_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__162_72) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__168_75) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__174_78) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__180_83) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__189_87) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__198_89) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__200_91) & (memory_controller_waitrequest == 1'd0)) & (main_200_205 == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__206_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__209_94) & (memory_controller_waitrequest == 1'd0)) & (main_209_214 == 1'd1))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__215_95) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__218_97) & (memory_controller_waitrequest == 1'd0)) & (main_218_221 == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__222_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__225_101) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__232_104) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_239_Lo1 = main_15_Lo0_reg;
	end
end
always @(posedge clk) begin
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__42_23) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__51_26) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__66_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__77_31) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__79_33) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__81_36) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__88_39) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__95_42) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__102_45) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__107_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__112_51) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__119_54) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__126_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__134_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__142_62) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__145_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__148_65) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__156_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__162_72) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__168_75) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__174_78) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__180_83) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__189_87) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__198_89) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__200_91) & (memory_controller_waitrequest == 1'd0)) & (main_200_205 == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__206_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__209_94) & (memory_controller_waitrequest == 1'd0)) & (main_209_214 == 1'd1))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__215_95) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__218_97) & (memory_controller_waitrequest == 1'd0)) & (main_218_221 == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__222_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__225_101) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %232 ], [ %Lo.0, %225 ], [ %Lo.0, %222 ], [ %Lo.0, %218 ], [ %Lo.0, %215 ], [ %Lo.0, %209 ], [ %Lo.0, %206 ], [ %Lo.0, %200 ], [ %Lo.0, %198 ], [ %Lo.0, %189 ], [ %Lo.0, %180 ], [ %Lo.0, %174 ], [ %Lo.0, %168 ], [ %Lo.0, %162 ], [ %Lo.0, %156 ], [ %Lo.0, %148 ], [ %Lo.0, %145 ], [ %Lo.0, %142 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %119 ], [ %Lo.0, %112 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %95 ], [ %Lo.0, %88 ], [ %Lo.0, %81 ], [ %Lo.0, %79 ], [ %Lo.0, %77 ], [ %74, %66 ], [ %63, %51 ], [ %Lo.0, %42 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__232_104) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Lo1_reg <= main_239_Lo1;
		if (start == 1'b0 && ^(main_239_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Lo1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__42_23) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__51_26) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_51_65;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__66_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_66_76;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__77_31) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__79_33) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__81_36) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__88_39) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__95_42) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__102_45) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__107_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__112_51) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__119_54) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__126_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__134_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__142_62) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__145_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__148_65) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__156_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__162_72) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__168_75) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__174_78) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__180_83) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__189_87) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__198_89) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__200_91) & (memory_controller_waitrequest == 1'd0)) & (main_200_205 == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__206_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__209_94) & (memory_controller_waitrequest == 1'd0)) & (main_209_214 == 1'd1))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__215_95) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__218_97) & (memory_controller_waitrequest == 1'd0)) & (main_218_221 == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__222_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__225_101) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__232_104) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_239_Hi1 = main_15_Hi0_reg;
	end
end
always @(posedge clk) begin
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__42_23) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__51_26) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__66_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__77_31) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__79_33) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__81_36) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__88_39) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__95_42) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__102_45) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__107_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__112_51) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__119_54) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__126_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__134_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__142_62) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__145_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__148_65) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__156_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__162_72) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__168_75) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__174_78) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__180_83) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__189_87) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__198_89) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__200_91) & (memory_controller_waitrequest == 1'd0)) & (main_200_205 == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__206_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__209_94) & (memory_controller_waitrequest == 1'd0)) & (main_209_214 == 1'd1))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__215_95) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__218_97) & (memory_controller_waitrequest == 1'd0)) & (main_218_221 == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__222_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__225_101) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
	/* main: %239*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %232 ], [ %Hi.0, %225 ], [ %Hi.0, %222 ], [ %Hi.0, %218 ], [ %Hi.0, %215 ], [ %Hi.0, %209 ], [ %Hi.0, %206 ], [ %Hi.0, %200 ], [ %Hi.0, %198 ], [ %Hi.0, %189 ], [ %Hi.0, %180 ], [ %Hi.0, %174 ], [ %Hi.0, %168 ], [ %Hi.0, %162 ], [ %Hi.0, %156 ], [ %Hi.0, %148 ], [ %Hi.0, %145 ], [ %Hi.0, %142 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %119 ], [ %Hi.0, %112 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %95 ], [ %Hi.0, %88 ], [ %Hi.0, %81 ], [ %Hi.0, %79 ], [ %Hi.0, %77 ], [ %76, %66 ], [ %65, %51 ], [ %Hi.0, %42 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__232_104) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_Hi1_reg <= main_239_Hi1;
		if (start == 1'b0 && ^(main_239_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_Hi1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %239*/
	/*   %240 = add nsw i32 %16, 1*/
		main_239_240 = (main_15_16_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %239*/
	/*   %240 = add nsw i32 %16, 1*/
	if ((cur_state == LEGUP_F_main_BB__239_107)) begin
		main_239_240_reg <= main_239_240;
		if (start == 1'b0 && ^(main_239_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_240_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %239*/
	/*   %241 = icmp eq i32 %pc.1, 0*/
		main_239_241 = (main_239_pc1_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %239*/
	/*   %241 = icmp eq i32 %pc.1, 0*/
	if ((cur_state == LEGUP_F_main_BB__239_107)) begin
		main_239_241_reg <= main_239_241;
		if (start == 1'b0 && ^(main_239_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_241_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %242 = icmp eq i32 %16, 610*/
		main_loopexit_242 = (main_15_16_reg == 32'd610);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %242 = icmp eq i32 %16, 610*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_110)) begin
		main_loopexit_242_reg <= main_loopexit_242;
		if (start == 1'b0 && ^(main_loopexit_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_242_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %243 = zext i1 %242 to i32*/
		main_loopexit_243 = main_loopexit_242;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %243 = zext i1 %242 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_110)) begin
		main_loopexit_243_reg <= main_loopexit_243;
		if (start == 1'b0 && ^(main_loopexit_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_243_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %244 = load i32* %5, align 4, !tbaa !1*/
		main_loopexit_244 = main_0_dmem_out_a;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %244 = load i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_loopexit_244_reg <= main_loopexit_244;
		if (start == 1'b0 && ^(main_loopexit_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_244_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %245 = icmp eq i32 %244, -17*/
		main_loopexit_245 = (main_loopexit_244 == -32'd17);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %245 = icmp eq i32 %244, -17*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_loopexit_245_reg <= main_loopexit_245;
		if (start == 1'b0 && ^(main_loopexit_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_245_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %246 = zext i1 %245 to i32*/
		main_loopexit_246 = main_loopexit_245;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %246 = zext i1 %245 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_loopexit_246_reg <= main_loopexit_246;
		if (start == 1'b0 && ^(main_loopexit_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_246_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %247 = add nuw nsw i32 %246, %243*/
		main_loopexit_247 = (main_loopexit_246 + main_loopexit_243_reg);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %247 = add nuw nsw i32 %246, %243*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_loopexit_247_reg <= main_loopexit_247;
		if (start == 1'b0 && ^(main_loopexit_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %248 = load i32* %6, align 4, !tbaa !1*/
		main_loopexit_248 = main_0_dmem_out_b;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %248 = load i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_loopexit_248_reg <= main_loopexit_248;
		if (start == 1'b0 && ^(main_loopexit_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_248_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %249 = icmp eq i32 %248, -9*/
		main_loopexit_249 = (main_loopexit_248 == -32'd9);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %249 = icmp eq i32 %248, -9*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_loopexit_249_reg <= main_loopexit_249;
		if (start == 1'b0 && ^(main_loopexit_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_249_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %250 = zext i1 %249 to i32*/
		main_loopexit_250 = main_loopexit_249;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %250 = zext i1 %249 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_loopexit_250_reg <= main_loopexit_250;
		if (start == 1'b0 && ^(main_loopexit_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_250_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %251 = add nuw nsw i32 %250, %247*/
		main_loopexit_251 = (main_loopexit_250 + main_loopexit_247);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %251 = add nuw nsw i32 %250, %247*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_loopexit_251_reg <= main_loopexit_251;
		if (start == 1'b0 && ^(main_loopexit_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_251_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %252 = load i32* %7, align 4, !tbaa !1*/
		main_loopexit_252 = main_0_dmem_out_a;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %252 = load i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_112)) begin
		main_loopexit_252_reg <= main_loopexit_252;
		if (start == 1'b0 && ^(main_loopexit_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_252_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %253 = icmp eq i32 %252, 0*/
		main_loopexit_253 = (main_loopexit_252 == 32'd0);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %253 = icmp eq i32 %252, 0*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_112)) begin
		main_loopexit_253_reg <= main_loopexit_253;
		if (start == 1'b0 && ^(main_loopexit_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_253_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %254 = zext i1 %253 to i32*/
		main_loopexit_254 = main_loopexit_253;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %254 = zext i1 %253 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_112)) begin
		main_loopexit_254_reg <= main_loopexit_254;
		if (start == 1'b0 && ^(main_loopexit_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_254_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %255 = add nuw nsw i32 %254, %251*/
		main_loopexit_255 = (main_loopexit_254 + main_loopexit_251_reg);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %255 = add nuw nsw i32 %254, %251*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_112)) begin
		main_loopexit_255_reg <= main_loopexit_255;
		if (start == 1'b0 && ^(main_loopexit_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_255_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %256 = load i32* %8, align 4, !tbaa !1*/
		main_loopexit_256 = main_0_dmem_out_b;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %256 = load i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_112)) begin
		main_loopexit_256_reg <= main_loopexit_256;
		if (start == 1'b0 && ^(main_loopexit_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_256_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %257 = icmp eq i32 %256, 3*/
		main_loopexit_257 = (main_loopexit_256 == 32'd3);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %257 = icmp eq i32 %256, 3*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_112)) begin
		main_loopexit_257_reg <= main_loopexit_257;
		if (start == 1'b0 && ^(main_loopexit_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_257_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %258 = zext i1 %257 to i32*/
		main_loopexit_258 = main_loopexit_257;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %258 = zext i1 %257 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_112)) begin
		main_loopexit_258_reg <= main_loopexit_258;
		if (start == 1'b0 && ^(main_loopexit_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_258_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %259 = add nuw nsw i32 %258, %255*/
		main_loopexit_259 = (main_loopexit_258 + main_loopexit_255);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %259 = add nuw nsw i32 %258, %255*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_112)) begin
		main_loopexit_259_reg <= main_loopexit_259;
		if (start == 1'b0 && ^(main_loopexit_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_259_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %260 = load i32* %9, align 4, !tbaa !1*/
		main_loopexit_260 = main_0_dmem_out_a;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %260 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_113)) begin
		main_loopexit_260_reg <= main_loopexit_260;
		if (start == 1'b0 && ^(main_loopexit_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_260_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %261 = icmp eq i32 %260, 5*/
		main_loopexit_261 = (main_loopexit_260 == 32'd5);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %261 = icmp eq i32 %260, 5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_113)) begin
		main_loopexit_261_reg <= main_loopexit_261;
		if (start == 1'b0 && ^(main_loopexit_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_261_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %262 = zext i1 %261 to i32*/
		main_loopexit_262 = main_loopexit_261;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %262 = zext i1 %261 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_113)) begin
		main_loopexit_262_reg <= main_loopexit_262;
		if (start == 1'b0 && ^(main_loopexit_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_262_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %263 = add nuw nsw i32 %262, %259*/
		main_loopexit_263 = (main_loopexit_262 + main_loopexit_259_reg);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %263 = add nuw nsw i32 %262, %259*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_113)) begin
		main_loopexit_263_reg <= main_loopexit_263;
		if (start == 1'b0 && ^(main_loopexit_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_263_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %264 = load i32* %10, align 4, !tbaa !1*/
		main_loopexit_264 = main_0_dmem_out_b;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %264 = load i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_113)) begin
		main_loopexit_264_reg <= main_loopexit_264;
		if (start == 1'b0 && ^(main_loopexit_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_264_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %265 = icmp eq i32 %264, 11*/
		main_loopexit_265 = (main_loopexit_264 == 32'd11);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %265 = icmp eq i32 %264, 11*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_113)) begin
		main_loopexit_265_reg <= main_loopexit_265;
		if (start == 1'b0 && ^(main_loopexit_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_265_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %266 = zext i1 %265 to i32*/
		main_loopexit_266 = main_loopexit_265;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %266 = zext i1 %265 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_113)) begin
		main_loopexit_266_reg <= main_loopexit_266;
		if (start == 1'b0 && ^(main_loopexit_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_266_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %267 = add nuw nsw i32 %266, %263*/
		main_loopexit_267 = (main_loopexit_266 + main_loopexit_263);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %267 = add nuw nsw i32 %266, %263*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_113)) begin
		main_loopexit_267_reg <= main_loopexit_267;
		if (start == 1'b0 && ^(main_loopexit_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_267_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %268 = load i32* %11, align 4, !tbaa !1*/
		main_loopexit_268 = main_0_dmem_out_a;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %268 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_114)) begin
		main_loopexit_268_reg <= main_loopexit_268;
		if (start == 1'b0 && ^(main_loopexit_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_268_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %269 = icmp eq i32 %268, 22*/
		main_loopexit_269 = (main_loopexit_268 == 32'd22);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %269 = icmp eq i32 %268, 22*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_114)) begin
		main_loopexit_269_reg <= main_loopexit_269;
		if (start == 1'b0 && ^(main_loopexit_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_269_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %270 = zext i1 %269 to i32*/
		main_loopexit_270 = main_loopexit_269;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %270 = zext i1 %269 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_114)) begin
		main_loopexit_270_reg <= main_loopexit_270;
		if (start == 1'b0 && ^(main_loopexit_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_270_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %271 = add nsw i32 %270, %267*/
		main_loopexit_271 = (main_loopexit_270 + main_loopexit_267_reg);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %271 = add nsw i32 %270, %267*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_114)) begin
		main_loopexit_271_reg <= main_loopexit_271;
		if (start == 1'b0 && ^(main_loopexit_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_271_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %272 = load i32* %12, align 4, !tbaa !1*/
		main_loopexit_272 = main_0_dmem_out_b;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %272 = load i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_114)) begin
		main_loopexit_272_reg <= main_loopexit_272;
		if (start == 1'b0 && ^(main_loopexit_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_272_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %273 = icmp eq i32 %272, 38*/
		main_loopexit_273 = (main_loopexit_272 == 32'd38);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %273 = icmp eq i32 %272, 38*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_114)) begin
		main_loopexit_273_reg <= main_loopexit_273;
		if (start == 1'b0 && ^(main_loopexit_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_273_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %274 = zext i1 %273 to i32*/
		main_loopexit_274 = main_loopexit_273;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %274 = zext i1 %273 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_114)) begin
		main_loopexit_274_reg <= main_loopexit_274;
		if (start == 1'b0 && ^(main_loopexit_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_274_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %275 = add nsw i32 %274, %271*/
		main_loopexit_275 = (main_loopexit_274 + main_loopexit_271);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %275 = add nsw i32 %274, %271*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_114)) begin
		main_loopexit_275_reg <= main_loopexit_275;
		if (start == 1'b0 && ^(main_loopexit_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_275_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %277 = icmp eq i32 %275, 9*/
		main_loopexit_277 = (main_loopexit_275 == 32'd9);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %277 = icmp eq i32 %275, 9*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_114)) begin
		main_loopexit_277_reg <= main_loopexit_277;
		if (start == 1'b0 && ^(main_loopexit_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_277_reg"); $finish; end
	end
end
always @(*) begin
	imem_address_a = 1'd0;
	/* main: %15*/
	/*   %20 = load i32* %19, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_13)) begin
		imem_address_a = (main_15_19 >>> 3'd2);
	end
end
always @(*) begin
	imem_write_enable_a = 1'd0;
	/* main: %15*/
	/*   %20 = load i32* %19, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_13)) begin
		imem_write_enable_a = 1'd0;
	end
end
always @(*) begin
	main_0_reg_address_a = 1'd0;
	/* main: %legup_memset_4.exit*/
	/*   store i32 0, i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_6)) begin
		main_0_reg_address_a = (main_legup_memset_4exit_scevgep >>> 3'd2);
	end
	/* main: %.preheader14*/
	/*   store i32 2147479548, i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		main_0_reg_address_a = (main_preheader14_4 >>> 3'd2);
	end
	/* main: %33*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_16)) begin
		main_0_reg_address_a = (main_33_34 >>> 3'd2);
	end
	/* main: %42*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_20)) begin
		main_0_reg_address_a = (main_42_43 >>> 3'd2);
	end
	/* main: %42*/
	/*   %49 = load i32* %48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_21)) begin
		main_0_reg_address_a = (main_42_48_reg >>> 3'd2);
	end
	/* main: %42*/
	/*   store i32 %50, i32* %48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_22)) begin
		main_0_reg_address_a = (main_42_48_reg >>> 3'd2);
	end
	/* main: %51*/
	/*   %53 = load i32* %52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_24)) begin
		main_0_reg_address_a = (main_51_52 >>> 3'd2);
	end
	/* main: %66*/
	/*   %68 = load i32* %67, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__66_27)) begin
		main_0_reg_address_a = (main_66_67 >>> 3'd2);
	end
	/* main: %79*/
	/*   store i32 %Lo.0, i32* %80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__79_32)) begin
		main_0_reg_address_a = (main_79_80 >>> 3'd2);
	end
	/* main: %81*/
	/*   %83 = load i32* %82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__81_34)) begin
		main_0_reg_address_a = (main_81_82 >>> 3'd2);
	end
	/* main: %88*/
	/*   %90 = load i32* %89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_37)) begin
		main_0_reg_address_a = (main_88_89 >>> 3'd2);
	end
	/* main: %88*/
	/*   store i32 %93, i32* %94, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_38)) begin
		main_0_reg_address_a = (main_88_94_reg >>> 3'd2);
	end
	/* main: %95*/
	/*   %97 = load i32* %96, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__95_40)) begin
		main_0_reg_address_a = (main_95_96 >>> 3'd2);
	end
	/* main: %102*/
	/*   %104 = load i32* %103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__102_43)) begin
		main_0_reg_address_a = (main_102_103 >>> 3'd2);
	end
	/* main: %102*/
	/*   store i32 %105, i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__102_44)) begin
		main_0_reg_address_a = (main_102_106_reg >>> 3'd2);
	end
	/* main: %112*/
	/*   %114 = load i32* %113, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__112_49)) begin
		main_0_reg_address_a = (main_112_113 >>> 3'd2);
	end
	/* main: %112*/
	/*   store i32 %117, i32* %118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__112_50)) begin
		main_0_reg_address_a = (main_112_118_reg >>> 3'd2);
	end
	/* main: %119*/
	/*   %121 = load i32* %120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_52)) begin
		main_0_reg_address_a = (main_119_120 >>> 3'd2);
	end
	/* main: %126*/
	/*   %128 = load i32* %127, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_55)) begin
		main_0_reg_address_a = (main_126_127 >>> 3'd2);
	end
	/* main: %126*/
	/*   store i32 %132, i32* %133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_56)) begin
		main_0_reg_address_a = (main_126_133_reg >>> 3'd2);
	end
	/* main: %134*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__134_58)) begin
		main_0_reg_address_a = (main_134_135 >>> 3'd2);
	end
	/* main: %142*/
	/*   %144 = load i32* %143, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__142_61)) begin
		main_0_reg_address_a = (main_142_143 >>> 3'd2);
	end
	/* main: %148*/
	/*   store i32 %21, i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__148_64)) begin
		main_0_reg_address_a = (main_preheader14_14_reg >>> 3'd2);
	end
	/* main: %162*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__162_70)) begin
		main_0_reg_address_a = (main_162_163 >>> 3'd2);
	end
	/* main: %162*/
	/*   store i32 %166, i32* %167, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__162_71)) begin
		main_0_reg_address_a = (main_162_167_reg >>> 3'd2);
	end
	/* main: %174*/
	/*   %176 = load i32* %175, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__174_76)) begin
		main_0_reg_address_a = (main_174_175 >>> 3'd2);
	end
	/* main: %174*/
	/*   store i32 %178, i32* %179, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__174_77)) begin
		main_0_reg_address_a = (main_174_179_reg >>> 3'd2);
	end
	/* main: %189*/
	/*   %191 = load i32* %190, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_84)) begin
		main_0_reg_address_a = (main_189_190 >>> 3'd2);
	end
	/* main: %198*/
	/*   store i32 %sext4, i32* %199, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__198_88)) begin
		main_0_reg_address_a = (main_198_199 >>> 3'd2);
	end
	/* main: %200*/
	/*   %202 = load i32* %201, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__200_90)) begin
		main_0_reg_address_a = (main_200_201 >>> 3'd2);
	end
	/* main: %209*/
	/*   %211 = load i32* %210, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__209_93)) begin
		main_0_reg_address_a = (main_209_210 >>> 3'd2);
	end
	/* main: %225*/
	/*   %227 = load i32* %226, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_99)) begin
		main_0_reg_address_a = (main_225_226 >>> 3'd2);
	end
	/* main: %232*/
	/*   %234 = load i32* %233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__232_102)) begin
		main_0_reg_address_a = (main_232_233 >>> 3'd2);
	end
	/* main: %232*/
	/*   store i32 %237, i32* %238, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__232_103)) begin
		main_0_reg_address_a = (main_232_238_reg >>> 3'd2);
	end
end
always @(*) begin
	main_0_reg_write_enable_a = 1'd0;
	/* main: %legup_memset_4.exit*/
	/*   store i32 0, i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_6)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %.preheader14*/
	/*   store i32 2147479548, i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %33*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_16)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %42*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_20)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %42*/
	/*   %49 = load i32* %48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_21)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %42*/
	/*   store i32 %50, i32* %48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_22)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %51*/
	/*   %53 = load i32* %52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_24)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %66*/
	/*   %68 = load i32* %67, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__66_27)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %79*/
	/*   store i32 %Lo.0, i32* %80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__79_32)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %81*/
	/*   %83 = load i32* %82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__81_34)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %88*/
	/*   %90 = load i32* %89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_37)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %88*/
	/*   store i32 %93, i32* %94, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_38)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %95*/
	/*   %97 = load i32* %96, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__95_40)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %102*/
	/*   %104 = load i32* %103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__102_43)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %102*/
	/*   store i32 %105, i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__102_44)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %112*/
	/*   %114 = load i32* %113, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__112_49)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %112*/
	/*   store i32 %117, i32* %118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__112_50)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %119*/
	/*   %121 = load i32* %120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_52)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %126*/
	/*   %128 = load i32* %127, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_55)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %126*/
	/*   store i32 %132, i32* %133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_56)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %134*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__134_58)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %142*/
	/*   %144 = load i32* %143, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__142_61)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %148*/
	/*   store i32 %21, i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__148_64)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %162*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__162_70)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %162*/
	/*   store i32 %166, i32* %167, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__162_71)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %174*/
	/*   %176 = load i32* %175, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__174_76)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %174*/
	/*   store i32 %178, i32* %179, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__174_77)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %189*/
	/*   %191 = load i32* %190, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_84)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %198*/
	/*   store i32 %sext4, i32* %199, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__198_88)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %200*/
	/*   %202 = load i32* %201, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__200_90)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %209*/
	/*   %211 = load i32* %210, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__209_93)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %225*/
	/*   %227 = load i32* %226, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_99)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %232*/
	/*   %234 = load i32* %233, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__232_102)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %232*/
	/*   store i32 %237, i32* %238, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__232_103)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
end
always @(*) begin
	main_0_reg_in_a = 1'd0;
	/* main: %legup_memset_4.exit*/
	/*   store i32 0, i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_6)) begin
		main_0_reg_in_a = 32'd0;
	end
	/* main: %.preheader14*/
	/*   store i32 2147479548, i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		main_0_reg_in_a = 32'd2147479548;
	end
	/* main: %42*/
	/*   store i32 %50, i32* %48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_22)) begin
		main_0_reg_in_a = main_42_50;
	end
	/* main: %79*/
	/*   store i32 %Lo.0, i32* %80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__79_32)) begin
		main_0_reg_in_a = main_15_Lo0_reg;
	end
	/* main: %88*/
	/*   store i32 %93, i32* %94, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_38)) begin
		main_0_reg_in_a = main_88_93;
	end
	/* main: %102*/
	/*   store i32 %105, i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__102_44)) begin
		main_0_reg_in_a = main_102_105;
	end
	/* main: %112*/
	/*   store i32 %117, i32* %118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__112_50)) begin
		main_0_reg_in_a = main_112_117;
	end
	/* main: %126*/
	/*   store i32 %132, i32* %133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_56)) begin
		main_0_reg_in_a = main_126_132;
	end
	/* main: %148*/
	/*   store i32 %21, i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__148_64)) begin
		main_0_reg_in_a = main_15_21_reg;
	end
	/* main: %162*/
	/*   store i32 %166, i32* %167, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__162_71)) begin
		main_0_reg_in_a = main_162_166;
	end
	/* main: %174*/
	/*   store i32 %178, i32* %179, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__174_77)) begin
		main_0_reg_in_a = main_174_178;
	end
	/* main: %198*/
	/*   store i32 %sext4, i32* %199, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__198_88)) begin
		main_0_reg_in_a = main_198_sext4;
	end
	/* main: %232*/
	/*   store i32 %237, i32* %238, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__232_103)) begin
		main_0_reg_in_a = main_232_237;
	end
end
always @(*) begin
	main_0_reg_address_b = 1'd0;
	/* main: %33*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_16)) begin
		main_0_reg_address_b = (main_33_36 >>> 3'd2);
	end
	/* main: %33*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_17)) begin
		main_0_reg_address_b = (main_33_39_reg >>> 3'd2);
	end
	/* main: %33*/
	/*   store i32 %41, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_18)) begin
		main_0_reg_address_b = (main_33_39_reg >>> 3'd2);
	end
	/* main: %42*/
	/*   %46 = load i32* %45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_20)) begin
		main_0_reg_address_b = (main_42_45 >>> 3'd2);
	end
	/* main: %51*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_24)) begin
		main_0_reg_address_b = (main_51_55 >>> 3'd2);
	end
	/* main: %51*/
	/*   %60 = load i32* %59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_25)) begin
		main_0_reg_address_b = (main_51_59_reg >>> 3'd2);
	end
	/* main: %66*/
	/*   %71 = load i32* %70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__66_27)) begin
		main_0_reg_address_b = (main_66_70 >>> 3'd2);
	end
	/* main: %77*/
	/*   store i32 %Hi.0, i32* %78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__77_30)) begin
		main_0_reg_address_b = (main_77_78 >>> 3'd2);
	end
	/* main: %81*/
	/*   %85 = load i32* %84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__81_34)) begin
		main_0_reg_address_b = (main_81_84 >>> 3'd2);
	end
	/* main: %81*/
	/*   store i32 %86, i32* %87, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__81_35)) begin
		main_0_reg_address_b = (main_81_87_reg >>> 3'd2);
	end
	/* main: %88*/
	/*   %92 = load i32* %91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_37)) begin
		main_0_reg_address_b = (main_88_91 >>> 3'd2);
	end
	/* main: %95*/
	/*   %99 = load i32* %98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__95_40)) begin
		main_0_reg_address_b = (main_95_98 >>> 3'd2);
	end
	/* main: %95*/
	/*   store i32 %100, i32* %101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__95_41)) begin
		main_0_reg_address_b = (main_95_101_reg >>> 3'd2);
	end
	/* main: %107*/
	/*   %109 = load i32* %108, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__107_46)) begin
		main_0_reg_address_b = (main_107_108 >>> 3'd2);
	end
	/* main: %107*/
	/*   store i32 %110, i32* %111, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__107_47)) begin
		main_0_reg_address_b = (main_107_111_reg >>> 3'd2);
	end
	/* main: %112*/
	/*   %116 = load i32* %115, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__112_49)) begin
		main_0_reg_address_b = (main_112_115 >>> 3'd2);
	end
	/* main: %119*/
	/*   %123 = load i32* %122, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_52)) begin
		main_0_reg_address_b = (main_119_122 >>> 3'd2);
	end
	/* main: %119*/
	/*   store i32 %124, i32* %125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_53)) begin
		main_0_reg_address_b = (main_119_125_reg >>> 3'd2);
	end
	/* main: %126*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_55)) begin
		main_0_reg_address_b = (main_126_129 >>> 3'd2);
	end
	/* main: %134*/
	/*   %138 = load i32* %137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__134_58)) begin
		main_0_reg_address_b = (main_134_137 >>> 3'd2);
	end
	/* main: %134*/
	/*   store i32 %140, i32* %141, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__134_59)) begin
		main_0_reg_address_b = (main_134_141_reg >>> 3'd2);
	end
	/* main: %156*/
	/*   %158 = load i32* %157, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__156_67)) begin
		main_0_reg_address_b = (main_156_157 >>> 3'd2);
	end
	/* main: %156*/
	/*   store i32 %160, i32* %161, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__156_68)) begin
		main_0_reg_address_b = (main_156_161_reg >>> 3'd2);
	end
	/* main: %168*/
	/*   %170 = load i32* %169, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__168_73)) begin
		main_0_reg_address_b = (main_168_169 >>> 3'd2);
	end
	/* main: %168*/
	/*   store i32 %172, i32* %173, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__168_74)) begin
		main_0_reg_address_b = (main_168_173_reg >>> 3'd2);
	end
	/* main: %180*/
	/*   %182 = load i32* %181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__180_79)) begin
		main_0_reg_address_b = (main_180_181 >>> 3'd2);
	end
	/* main: %180*/
	/*   store i32 %187, i32* %188, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__180_82)) begin
		main_0_reg_address_b = (main_180_188_reg >>> 3'd2);
	end
	/* main: %189*/
	/*   %193 = load i32* %192, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_84)) begin
		main_0_reg_address_b = (main_189_192 >>> 3'd2);
	end
	/* main: %200*/
	/*   %204 = load i32* %203, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__200_90)) begin
		main_0_reg_address_b = (main_200_203 >>> 3'd2);
	end
	/* main: %209*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__209_93)) begin
		main_0_reg_address_b = (main_209_212 >>> 3'd2);
	end
	/* main: %218*/
	/*   %220 = load i32* %219, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__218_96)) begin
		main_0_reg_address_b = (main_218_219 >>> 3'd2);
	end
	/* main: %225*/
	/*   store i32 %230, i32* %231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_100)) begin
		main_0_reg_address_b = (main_225_231_reg >>> 3'd2);
	end
	/* main: %.thread*/
	/*   store i32 0, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread_105)) begin
		main_0_reg_address_b = (main_preheader14_13_reg >>> 3'd2);
	end
	/* main: %239*/
	/*   store i32 0, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__239_107)) begin
		main_0_reg_address_b = (main_preheader14_13_reg >>> 3'd2);
	end
end
always @(*) begin
	main_0_reg_write_enable_b = 1'd0;
	/* main: %33*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_16)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %33*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_17)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %33*/
	/*   store i32 %41, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_18)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %42*/
	/*   %46 = load i32* %45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__42_20)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %51*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_24)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %51*/
	/*   %60 = load i32* %59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_25)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %66*/
	/*   %71 = load i32* %70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__66_27)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %77*/
	/*   store i32 %Hi.0, i32* %78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__77_30)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %81*/
	/*   %85 = load i32* %84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__81_34)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %81*/
	/*   store i32 %86, i32* %87, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__81_35)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %88*/
	/*   %92 = load i32* %91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__88_37)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %95*/
	/*   %99 = load i32* %98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__95_40)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %95*/
	/*   store i32 %100, i32* %101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__95_41)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %107*/
	/*   %109 = load i32* %108, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__107_46)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %107*/
	/*   store i32 %110, i32* %111, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__107_47)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %112*/
	/*   %116 = load i32* %115, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__112_49)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %119*/
	/*   %123 = load i32* %122, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_52)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %119*/
	/*   store i32 %124, i32* %125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_53)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %126*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_55)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %134*/
	/*   %138 = load i32* %137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__134_58)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %134*/
	/*   store i32 %140, i32* %141, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__134_59)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %156*/
	/*   %158 = load i32* %157, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__156_67)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %156*/
	/*   store i32 %160, i32* %161, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__156_68)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %168*/
	/*   %170 = load i32* %169, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__168_73)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %168*/
	/*   store i32 %172, i32* %173, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__168_74)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %180*/
	/*   %182 = load i32* %181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__180_79)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %180*/
	/*   store i32 %187, i32* %188, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__180_82)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %189*/
	/*   %193 = load i32* %192, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_84)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %200*/
	/*   %204 = load i32* %203, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__200_90)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %209*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__209_93)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %218*/
	/*   %220 = load i32* %219, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__218_96)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %225*/
	/*   store i32 %230, i32* %231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_100)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %.thread*/
	/*   store i32 0, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread_105)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %239*/
	/*   store i32 0, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__239_107)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
end
always @(*) begin
	main_0_reg_in_b = 1'd0;
	/* main: %33*/
	/*   store i32 %41, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_18)) begin
		main_0_reg_in_b = main_33_41;
	end
	/* main: %77*/
	/*   store i32 %Hi.0, i32* %78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__77_30)) begin
		main_0_reg_in_b = main_15_Hi0_reg;
	end
	/* main: %81*/
	/*   store i32 %86, i32* %87, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__81_35)) begin
		main_0_reg_in_b = main_81_86;
	end
	/* main: %95*/
	/*   store i32 %100, i32* %101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__95_41)) begin
		main_0_reg_in_b = main_95_100;
	end
	/* main: %107*/
	/*   store i32 %110, i32* %111, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__107_47)) begin
		main_0_reg_in_b = main_107_110;
	end
	/* main: %119*/
	/*   store i32 %124, i32* %125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_53)) begin
		main_0_reg_in_b = main_119_124;
	end
	/* main: %134*/
	/*   store i32 %140, i32* %141, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__134_59)) begin
		main_0_reg_in_b = main_134_140;
	end
	/* main: %156*/
	/*   store i32 %160, i32* %161, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__156_68)) begin
		main_0_reg_in_b = main_156_160;
	end
	/* main: %168*/
	/*   store i32 %172, i32* %173, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__168_74)) begin
		main_0_reg_in_b = main_168_172;
	end
	/* main: %180*/
	/*   store i32 %187, i32* %188, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__180_82)) begin
		main_0_reg_in_b = main_180_187;
	end
	/* main: %225*/
	/*   store i32 %230, i32* %231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_100)) begin
		main_0_reg_in_b = main_225_230;
	end
	/* main: %.thread*/
	/*   store i32 0, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread_105)) begin
		main_0_reg_in_b = 32'd0;
	end
	/* main: %239*/
	/*   store i32 0, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__239_107)) begin
		main_0_reg_in_b = 32'd0;
	end
end
always @(*) begin
	main_0_dmem_address_a = 1'd0;
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_4)) begin
		main_0_dmem_address_a = (main_2_si0 >>> 3'd2);
	end
	/* main: %.preheader14*/
	/*   store i32 22, i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		main_0_dmem_address_a = (main_preheader14_5 >>> 3'd2);
	end
	/* main: %.preheader14*/
	/*   store i32 -9, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_9)) begin
		main_0_dmem_address_a = (main_preheader14_7_reg >>> 3'd2);
	end
	/* main: %.preheader14*/
	/*   store i32 -17, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_10)) begin
		main_0_dmem_address_a = (main_preheader14_9_reg >>> 3'd2);
	end
	/* main: %.preheader14*/
	/*   store i32 0, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_11)) begin
		main_0_dmem_address_a = (main_preheader14_11_reg >>> 3'd2);
	end
	/* main: %189*/
	/*   store i32 %191, i32* %197, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_86)) begin
		main_0_dmem_address_a = (main_189_197 >>> 3'd2);
	end
	/* main: %.loopexit*/
	/*   %244 = load i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_110)) begin
		main_0_dmem_address_a = (main_preheader14_5_reg >>> 3'd2);
	end
	/* main: %.loopexit*/
	/*   %252 = load i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_0_dmem_address_a = (main_preheader14_7_reg >>> 3'd2);
	end
	/* main: %.loopexit*/
	/*   %260 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_112)) begin
		main_0_dmem_address_a = (main_preheader14_9_reg >>> 3'd2);
	end
	/* main: %.loopexit*/
	/*   %268 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_113)) begin
		main_0_dmem_address_a = (main_preheader14_11_reg >>> 3'd2);
	end
end
always @(*) begin
	main_0_dmem_write_enable_a = 1'd0;
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_4)) begin
		main_0_dmem_write_enable_a = 1'd1;
	end
	/* main: %.preheader14*/
	/*   store i32 22, i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		main_0_dmem_write_enable_a = 1'd1;
	end
	/* main: %.preheader14*/
	/*   store i32 -9, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_9)) begin
		main_0_dmem_write_enable_a = 1'd1;
	end
	/* main: %.preheader14*/
	/*   store i32 -17, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_10)) begin
		main_0_dmem_write_enable_a = 1'd1;
	end
	/* main: %.preheader14*/
	/*   store i32 0, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_11)) begin
		main_0_dmem_write_enable_a = 1'd1;
	end
	/* main: %189*/
	/*   store i32 %191, i32* %197, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_86)) begin
		main_0_dmem_write_enable_a = 1'd1;
	end
	/* main: %.loopexit*/
	/*   %244 = load i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_110)) begin
		main_0_dmem_write_enable_a = 1'd0;
	end
	/* main: %.loopexit*/
	/*   %252 = load i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_0_dmem_write_enable_a = 1'd0;
	end
	/* main: %.loopexit*/
	/*   %260 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_112)) begin
		main_0_dmem_write_enable_a = 1'd0;
	end
	/* main: %.loopexit*/
	/*   %268 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_113)) begin
		main_0_dmem_write_enable_a = 1'd0;
	end
end
always @(*) begin
	main_0_dmem_in_a = 1'd0;
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_4)) begin
		main_0_dmem_in_a = 32'd0;
	end
	/* main: %.preheader14*/
	/*   store i32 22, i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		main_0_dmem_in_a = 32'd22;
	end
	/* main: %.preheader14*/
	/*   store i32 -9, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_9)) begin
		main_0_dmem_in_a = -32'd9;
	end
	/* main: %.preheader14*/
	/*   store i32 -17, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_10)) begin
		main_0_dmem_in_a = -32'd17;
	end
	/* main: %.preheader14*/
	/*   store i32 0, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_11)) begin
		main_0_dmem_in_a = 32'd0;
	end
	/* main: %189*/
	/*   store i32 %191, i32* %197, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__189_86)) begin
		main_0_dmem_in_a = main_189_191_reg;
	end
end
always @(*) begin
	main_0_dmem_address_b = 1'd0;
	/* main: %.preheader14*/
	/*   store i32 5, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		main_0_dmem_address_b = (main_preheader14_6 >>> 3'd2);
	end
	/* main: %.preheader14*/
	/*   store i32 3, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_9)) begin
		main_0_dmem_address_b = (main_preheader14_8_reg >>> 3'd2);
	end
	/* main: %.preheader14*/
	/*   store i32 38, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_10)) begin
		main_0_dmem_address_b = (main_preheader14_10_reg >>> 3'd2);
	end
	/* main: %.preheader14*/
	/*   store i32 11, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_11)) begin
		main_0_dmem_address_b = (main_preheader14_12_reg >>> 3'd2);
	end
	/* main: %180*/
	/*   %187 = load i32* %186, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__180_81)) begin
		main_0_dmem_address_b = (main_180_186 >>> 3'd2);
	end
	/* main: %.loopexit*/
	/*   %248 = load i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_110)) begin
		main_0_dmem_address_b = (main_preheader14_6_reg >>> 3'd2);
	end
	/* main: %.loopexit*/
	/*   %256 = load i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_0_dmem_address_b = (main_preheader14_8_reg >>> 3'd2);
	end
	/* main: %.loopexit*/
	/*   %264 = load i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_112)) begin
		main_0_dmem_address_b = (main_preheader14_10_reg >>> 3'd2);
	end
	/* main: %.loopexit*/
	/*   %272 = load i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_113)) begin
		main_0_dmem_address_b = (main_preheader14_12_reg >>> 3'd2);
	end
end
always @(*) begin
	main_0_dmem_write_enable_b = 1'd0;
	/* main: %.preheader14*/
	/*   store i32 5, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		main_0_dmem_write_enable_b = 1'd1;
	end
	/* main: %.preheader14*/
	/*   store i32 3, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_9)) begin
		main_0_dmem_write_enable_b = 1'd1;
	end
	/* main: %.preheader14*/
	/*   store i32 38, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_10)) begin
		main_0_dmem_write_enable_b = 1'd1;
	end
	/* main: %.preheader14*/
	/*   store i32 11, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_11)) begin
		main_0_dmem_write_enable_b = 1'd1;
	end
	/* main: %180*/
	/*   %187 = load i32* %186, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__180_81)) begin
		main_0_dmem_write_enable_b = 1'd0;
	end
	/* main: %.loopexit*/
	/*   %248 = load i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_110)) begin
		main_0_dmem_write_enable_b = 1'd0;
	end
	/* main: %.loopexit*/
	/*   %256 = load i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_0_dmem_write_enable_b = 1'd0;
	end
	/* main: %.loopexit*/
	/*   %264 = load i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_112)) begin
		main_0_dmem_write_enable_b = 1'd0;
	end
	/* main: %.loopexit*/
	/*   %272 = load i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_113)) begin
		main_0_dmem_write_enable_b = 1'd0;
	end
end
always @(*) begin
	main_0_dmem_in_b = 1'd0;
	/* main: %.preheader14*/
	/*   store i32 5, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_8)) begin
		main_0_dmem_in_b = 32'd5;
	end
	/* main: %.preheader14*/
	/*   store i32 3, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_9)) begin
		main_0_dmem_in_b = 32'd3;
	end
	/* main: %.preheader14*/
	/*   store i32 38, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_10)) begin
		main_0_dmem_in_b = 32'd38;
	end
	/* main: %.preheader14*/
	/*   store i32 11, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader14_11)) begin
		main_0_dmem_in_b = 32'd11;
	end
end
always @(*) begin
	lpm_mult_main_51_58_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %58 = mul nsw i64 %57, %54*/
	if ((lpm_mult_main_51_58_en == 1'd1)) begin
		main_51_58_stage0_reg <= (main_51_57 * main_51_54);
	end
end
always @(*) begin
	lpm_mult_main_66_73_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %73 = mul i64 %72, %69*/
	if ((lpm_mult_main_66_73_en == 1'd1)) begin
		main_66_73_stage0_reg <= (main_66_72 * main_66_69);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %282*/
	/*   ret i32 %275*/
	if ((cur_state == LEGUP_F_main_BB__282_117)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %282*/
	/*   ret i32 %275*/
	if ((cur_state == LEGUP_F_main_BB__282_117)) begin
		return_val <= main_loopexit_275_reg;
		if (start == 1'b0 && ^(main_loopexit_275_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 

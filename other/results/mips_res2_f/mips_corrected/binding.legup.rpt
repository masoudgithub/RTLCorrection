//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Tue Jun 18 03:11:52 2019
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sun Jun 23 10:51:48 2019
//----------------------------------------------------------------------------//

--------------------------------------------------------------------------------
Function: main
--------------------------------------------------------------------------------
Function unit type:           Number Required               
imem_local_mem_dual_port      1                             
main_0_reg_local_mem_dual_port2                             
mem_dual_port                 2                             
signed_add_32                 9                             
signed_add_64                 1                             
signed_multiply_64            1                             
signed_subtract_32            1                             
--------------------------------------------------------------------------------
Function: legup_memset_4
--------------------------------------------------------------------------------
Function unit type:           Number Required               
legup_memset_4_0_1_local_mem_dual_port1                             
legup_memset_4_0_2_local_mem_dual_port1                             
legup_memset_4_0_3_local_mem_dual_port1                             
legup_memset_4_0_c_local_mem_dual_port2                             
legup_memset_4_0_s_local_mem_dual_port2                             
signed_add_32                 1                             

Running Bipartite Weighted Matching on function: legup_memset_4
State: LEGUP_F_legup_memset_4_BB__0
Binding functional unit type: legup_memset_4_0_1_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_legup_memset_4_0_1_local_mem_dual_port_0
  store i8* %m, i8** %1, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_legup_memset_4_0_1_local_mem_dual_port_0
  store i8* %m, i8** %1, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8* %m, i8** %1, align... (idx: 0) -> legup_memset_4_legup_memset_4_0_1_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_BB__0
Binding functional unit type: legup_memset_4_0_2_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_legup_memset_4_0_2_local_mem_dual_port_0
  store i8 %c1, i8* %2, align ... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_legup_memset_4_0_2_local_mem_dual_port_0
  store i8 %c1, i8* %2, align ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8 %c1, i8* %2, align ... (idx: 0) -> legup_memset_4_legup_memset_4_0_2_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_BB__0
Binding functional unit type: legup_memset_4_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_legup_memset_4_0_3_local_mem_dual_port_0
  store i32 %n, i32* %3, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_legup_memset_4_0_3_local_mem_dual_port_0
  store i32 %n, i32* %3, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %n, i32* %3, align... (idx: 0) -> legup_memset_4_legup_memset_4_0_3_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_BB__0
Binding functional unit type: legup_memset_4_0_1_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %14 = load i8** %1, align 4 hey can share an input with another operation already assigned to legup_memset_4_legup_memset_4_0_1_local_mem_dual_port_0
  %14 = load i8** %1, align 4 can share an output register with another operation already assigned to legup_memset_4_legup_memset_4_0_1_local_mem_dual_port_0
                                                  legup_memset_4_legup_memset_4_0_1_local_mem_dual_port_0
  %14 = load i8** %1, align 4 (idx: 0)            100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_legup_memset_4_0_1_local_mem_dual_port_0
  %14 = load i8** %1, align 4 (idx: 0)            1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %14 = load i8** %1, align 4 (idx: 0) -> legup_memset_4_legup_memset_4_0_1_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_BB__0
Binding functional unit type: legup_memset_4_0_2_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %4 = load i8* %2, align 1 hey can share an input with another operation already assigned to legup_memset_4_legup_memset_4_0_2_local_mem_dual_port_0
  %4 = load i8* %2, align 1 can share an output register with another operation already assigned to legup_memset_4_legup_memset_4_0_2_local_mem_dual_port_0
                                                  legup_memset_4_legup_memset_4_0_2_local_mem_dual_port_0
  %4 = load i8* %2, align 1 (idx: 0)              100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_legup_memset_4_0_2_local_mem_dual_port_0
  %4 = load i8* %2, align 1 (idx: 0)              1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %4 = load i8* %2, align 1 (idx: 0) -> legup_memset_4_legup_memset_4_0_2_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_BB__0
Binding functional unit type: legup_memset_4_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %16 = load i32* %3, align 4 hey can share an input with another operation already assigned to legup_memset_4_legup_memset_4_0_3_local_mem_dual_port_0
  %16 = load i32* %3, align 4 can share an output register with another operation already assigned to legup_memset_4_legup_memset_4_0_3_local_mem_dual_port_0
                                                  legup_memset_4_legup_memset_4_0_3_local_mem_dual_port_0
  %16 = load i32* %3, align 4 (idx: 0)            100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_legup_memset_4_0_3_local_mem_dual_port_0
  %16 = load i32* %3, align 4 (idx: 0)            1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %16 = load i32* %3, align 4 (idx: 0) -> legup_memset_4_legup_memset_4_0_3_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_BB__0
Binding functional unit type: legup_memset_4_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %17, i32* %3, alig... hey can share an input with another operation already assigned to legup_memset_4_legup_memset_4_0_3_local_mem_dual_port_0
  store i32 %17, i32* %3, alig... can share an output register with another operation already assigned to legup_memset_4_legup_memset_4_0_3_local_mem_dual_port_0
                                                  legup_memset_4_legup_memset_4_0_3_local_mem_dual_port_0
  store i32 %17, i32* %3, alig... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_legup_memset_4_0_3_local_mem_dual_port_0
  store i32 %17, i32* %3, alig... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %17, i32* %3, alig... (idx: 0) -> legup_memset_4_legup_memset_4_0_3_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_BB__0
Binding functional unit type: legup_memset_4_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1
  store i32 %5, i32* %c, align... (idx: 0)        90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1
  store i32 %5, i32* %c, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %5, i32* %c, align... (idx: 0) -> legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_BB__0
Binding functional unit type: legup_memset_4_0_s_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_legup_memset_4_0_s_local_mem_dual_port_0legup_memset_4_legup_memset_4_0_s_local_mem_dual_port_1
  store i32* %15, i32** %s, al... (idx: 0)        90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_legup_memset_4_0_s_local_mem_dual_port_0legup_memset_4_legup_memset_4_0_s_local_mem_dual_port_1
  store i32* %15, i32** %s, al... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32* %15, i32** %s, al... (idx: 0) -> legup_memset_4_legup_memset_4_0_s_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_BB__0
Binding functional unit type: legup_memset_4_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %6 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0
  %6 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0
  %8 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0
  %8 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0
                                                  legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1
  %6 = load i32* %c, align 4 (idx: 0)             90                            95                            
  %8 = load i32* %c, align 4 (idx: 1)             90                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1
  %6 = load i32* %c, align 4 (idx: 0)             1                             0                             
  %8 = load i32* %c, align 4 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %6 = load i32* %c, align 4 (idx: 0) -> legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0 (mux inputs: 2)
  %8 = load i32* %c, align 4 (idx: 1) -> legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_BB__0
Binding functional unit type: legup_memset_4_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %9, i32* %c, align... hey can share an input with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0
  store i32 %9, i32* %c, align... can share an output register with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0
  store i32 %9, i32* %c, align... hey can share an input with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1
  store i32 %9, i32* %c, align... can share an output register with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1
                                                  legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1
  store i32 %9, i32* %c, align... (idx: 0)        85                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1
  store i32 %9, i32* %c, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %9, i32* %c, align... (idx: 0) -> legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_legup_memset_4_BB__0
Binding functional unit type: legup_memset_4_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %10 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0
  %10 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0
  %10 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1
  %10 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1
  %12 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0
  %12 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0
  %12 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1
  %12 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1
                                                  legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1
  %10 = load i32* %c, align 4 (idx: 0)            80                            100                           
  %12 = load i32* %c, align 4 (idx: 1)            80                            100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1
  %10 = load i32* %c, align 4 (idx: 0)            1                             0                             
  %12 = load i32* %c, align 4 (idx: 1)            0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %10 = load i32* %c, align 4 (idx: 0) -> legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0 (mux inputs: 3)
  %12 = load i32* %c, align 4 (idx: 1) -> legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_BB__0
Binding functional unit type: legup_memset_4_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %13, i32* %c, alig... hey can share an input with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0
  store i32 %13, i32* %c, alig... can share an output register with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0
  store i32 %13, i32* %c, alig... hey can share an input with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1
  store i32 %13, i32* %c, alig... can share an output register with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1
                                                  legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1
  store i32 %13, i32* %c, alig... (idx: 0)        75                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1
  store i32 %13, i32* %c, alig... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %13, i32* %c, alig... (idx: 0) -> legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_legup_memset_4_BB__18
Binding functional unit type: legup_memset_4_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %19 = load i32* %3, align 4 hey can share an input with another operation already assigned to legup_memset_4_legup_memset_4_0_3_local_mem_dual_port_0
  %19 = load i32* %3, align 4 can share an output register with another operation already assigned to legup_memset_4_legup_memset_4_0_3_local_mem_dual_port_0
                                                  legup_memset_4_legup_memset_4_0_3_local_mem_dual_port_0
  %19 = load i32* %3, align 4 (idx: 0)            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_legup_memset_4_0_3_local_mem_dual_port_0
  %19 = load i32* %3, align 4 (idx: 0)            1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %19 = load i32* %3, align 4 (idx: 0) -> legup_memset_4_legup_memset_4_0_3_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_BB__18
Binding functional unit type: legup_memset_4_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %20, i32* %3, alig... hey can share an input with another operation already assigned to legup_memset_4_legup_memset_4_0_3_local_mem_dual_port_0
  store i32 %20, i32* %3, alig... can share an output register with another operation already assigned to legup_memset_4_legup_memset_4_0_3_local_mem_dual_port_0
                                                  legup_memset_4_legup_memset_4_0_3_local_mem_dual_port_0
  store i32 %20, i32* %3, alig... (idx: 0)        85                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_legup_memset_4_0_3_local_mem_dual_port_0
  store i32 %20, i32* %3, alig... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %20, i32* %3, alig... (idx: 0) -> legup_memset_4_legup_memset_4_0_3_local_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_legup_memset_4_BB__18
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_signed_add_32_0
  %20 = add i32 %19, -1 (idx: 0)                  -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_signed_add_32_0
  %20 = add i32 %19, -1 (idx: 0)                  1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %20 = add i32 %19, -1 (idx: 0) -> legup_memset_4_signed_add_32_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_BB__22
Binding functional unit type: legup_memset_4_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %23 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0
  %23 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0
  %23 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1
  %23 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1
                                                  legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1
  %23 = load i32* %c, align 4 (idx: 0)            70                            100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_1
  %23 = load i32* %c, align 4 (idx: 0)            1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %23 = load i32* %c, align 4 (idx: 0) -> legup_memset_4_legup_memset_4_0_c_local_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_legup_memset_4_BB__22
Binding functional unit type: legup_memset_4_0_s_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %24 = load i32** %s, align 4 hey can share an input with another operation already assigned to legup_memset_4_legup_memset_4_0_s_local_mem_dual_port_0
  %24 = load i32** %s, align 4 can share an output register with another operation already assigned to legup_memset_4_legup_memset_4_0_s_local_mem_dual_port_0
                                                  legup_memset_4_legup_memset_4_0_s_local_mem_dual_port_0legup_memset_4_legup_memset_4_0_s_local_mem_dual_port_1
  %24 = load i32** %s, align 4 (idx: 0)           90                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_legup_memset_4_0_s_local_mem_dual_port_0legup_memset_4_legup_memset_4_0_s_local_mem_dual_port_1
  %24 = load i32** %s, align 4 (idx: 0)           1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %24 = load i32** %s, align 4 (idx: 0) -> legup_memset_4_legup_memset_4_0_s_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_BB__22
Binding functional unit type: legup_memset_4_0_s_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32* %25, i32** %s, al... hey can share an input with another operation already assigned to legup_memset_4_legup_memset_4_0_s_local_mem_dual_port_0
  store i32* %25, i32** %s, al... can share an output register with another operation already assigned to legup_memset_4_legup_memset_4_0_s_local_mem_dual_port_0
  store i32 %23, i32* %24, ali... can share an output register with another operation already assigned to legup_memset_4_legup_memset_4_0_s_local_mem_dual_port_0
                                                  legup_memset_4_legup_memset_4_0_s_local_mem_dual_port_0legup_memset_4_legup_memset_4_0_s_local_mem_dual_port_1
  store i32* %25, i32** %s, al... (idx: 0)        85                            90                            
  store i32 %23, i32* %24, ali... (idx: 1)        80                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_legup_memset_4_0_s_local_mem_dual_port_0legup_memset_4_legup_memset_4_0_s_local_mem_dual_port_1
  store i32* %25, i32** %s, al... (idx: 0)        0                             1                             
  store i32 %23, i32* %24, ali... (idx: 1)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %23, i32* %24, ali... (idx: 1) -> legup_memset_4_legup_memset_4_0_s_local_mem_dual_port_0 (mux inputs: 4)
  store i32* %25, i32** %s, al... (idx: 0) -> legup_memset_4_legup_memset_4_0_s_local_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_BB__22
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep = add i32 %gep_int, 4 can share an output register with another operation already assigned to legup_memset_4_signed_add_32_0
                                                  legup_memset_4_signed_add_32_0
  %gep = add i32 %gep_int, 4 (idx: 0)             -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_signed_add_32_0
  %gep = add i32 %gep_int, 4 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep = add i32 %gep_int, 4 (idx: 0) -> legup_memset_4_signed_add_32_0 (mux inputs: 2)

Running Bipartite Weighted Matching on function: main
State: LEGUP_F_main_BB__2
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %4 = add nsw i32 %i.012, 1 (idx: 0)             -5                            -4                            -3                            95                            95                            95                            95                            95                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %4 = add nsw i32 %i.012, 1 (idx: 0)             1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %4 = add nsw i32 %i.012, 1 (idx: 0) -> main_signed_add_32_0 (mux inputs: 1)
State: LEGUP_F_main_BB__2
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 0, i32* %3, align ... (idx: 0)        95                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 0, i32* %3, align ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* %3, align ... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB__2
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep = add i32 %gep_int, %ge... (idx: 0)        -19                           -9                            -9                            90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep = add i32 %gep_int, %ge... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep = add i32 %gep_int, %ge... (idx: 0) -> main_signed_add_32_0 (mux inputs: 3)
State: LEGUP_F_main_BB_preheader14
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 2147479548, i32* %... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 2147479548, i32* %... (idx: 0)        95                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 2147479548, i32* %... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 2147479548, i32* %... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_preheader14
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep2 = add i32 %gep_int1, 1... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep5 = add i32 %gep_int4, 4 can share an output register with another operation already assigned to main_signed_add_32_0
  %gep7 = add i32 %gep_int6, 8 can share an output register with another operation already assigned to main_signed_add_32_0
  %gep9 = add i32 %gep_int8, 1... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep11 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep13 = add i32 %gep_int12,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep15 = add i32 %gep_int14,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep17 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep20 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_0
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep2 = add i32 %gep_int1, 1... (idx: 0)        -25                           -4                            -4                            95                            95                            95                            95                            95                            95                            
  %gep5 = add i32 %gep_int4, 4 (idx: 1)           -25                           -4                            -4                            95                            95                            95                            95                            95                            95                            
  %gep7 = add i32 %gep_int6, 8 (idx: 2)           -24                           -4                            -4                            95                            95                            95                            95                            95                            95                            
  %gep9 = add i32 %gep_int8, 1... (idx: 3)        -24                           -4                            -4                            95                            95                            95                            95                            95                            95                            
  %gep11 = add i32 %gep_int10,... (idx: 4)        -24                           -4                            -4                            95                            95                            95                            95                            95                            95                            
  %gep13 = add i32 %gep_int12,... (idx: 5)        -24                           -4                            -4                            95                            95                            95                            95                            95                            95                            
  %gep15 = add i32 %gep_int14,... (idx: 6)        -24                           -4                            -4                            95                            95                            95                            95                            95                            95                            
  %gep17 = add i32 %gep_int16,... (idx: 7)        -24                           -4                            -5                            95                            95                            95                            95                            95                            95                            
  %gep20 = add i32 %gep_int19,... (idx: 8)        -24                           -5                            -4                            95                            95                            95                            95                            95                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep2 = add i32 %gep_int1, 1... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep5 = add i32 %gep_int4, 4 (idx: 1)           0                             0                             0                             0                             0                             0                             0                             0                             1                             
  %gep7 = add i32 %gep_int6, 8 (idx: 2)           0                             0                             0                             1                             0                             0                             0                             0                             0                             
  %gep9 = add i32 %gep_int8, 1... (idx: 3)        0                             0                             0                             0                             1                             0                             0                             0                             0                             
  %gep11 = add i32 %gep_int10,... (idx: 4)        0                             0                             0                             0                             0                             1                             0                             0                             0                             
  %gep13 = add i32 %gep_int12,... (idx: 5)        0                             0                             0                             0                             0                             0                             1                             0                             0                             
  %gep15 = add i32 %gep_int14,... (idx: 6)        0                             0                             0                             0                             0                             0                             0                             1                             0                             
  %gep17 = add i32 %gep_int16,... (idx: 7)        0                             0                             1                             0                             0                             0                             0                             0                             0                             
  %gep20 = add i32 %gep_int19,... (idx: 8)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep2 = add i32 %gep_int1, 1... (idx: 0) -> main_signed_add_32_0 (mux inputs: 4)
  %gep20 = add i32 %gep_int19,... (idx: 8) -> main_signed_add_32_1 (mux inputs: 1)
  %gep17 = add i32 %gep_int16,... (idx: 7) -> main_signed_add_32_2 (mux inputs: 1)
  %gep7 = add i32 %gep_int6, 8 (idx: 2) -> main_signed_add_32_3 (mux inputs: 1)
  %gep9 = add i32 %gep_int8, 1... (idx: 3) -> main_signed_add_32_4 (mux inputs: 1)
  %gep11 = add i32 %gep_int10,... (idx: 4) -> main_signed_add_32_5 (mux inputs: 1)
  %gep13 = add i32 %gep_int12,... (idx: 5) -> main_signed_add_32_6 (mux inputs: 1)
  %gep15 = add i32 %gep_int14,... (idx: 6) -> main_signed_add_32_7 (mux inputs: 1)
  %gep5 = add i32 %gep_int4, 4 (idx: 1) -> main_signed_add_32_8 (mux inputs: 1)
State: LEGUP_F_main_BB_preheader14
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 22, i32* %6, align... (idx: 0)        -4                            -3                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 22, i32* %6, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 22, i32* %6, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_preheader14
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 5, i32* %7, align ... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 5, i32* %7, align ... (idx: 0)        -4                            -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 5, i32* %7, align ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 5, i32* %7, align ... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_preheader14
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 -9, i32* %8, align... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 -9, i32* %8, align... (idx: 0)        -14                           -3                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 -9, i32* %8, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 -9, i32* %8, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_main_BB_preheader14
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 3, i32* %9, align ... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 3, i32* %9, align ... (idx: 0)        -24                           -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 3, i32* %9, align ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 3, i32* %9, align ... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB_preheader14
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 -17, i32* %10, ali... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 -17, i32* %10, ali... (idx: 0)        -34                           -3                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 -17, i32* %10, ali... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 -17, i32* %10, ali... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 5)
State: LEGUP_F_main_BB_preheader14
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 38, i32* %11, alig... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 38, i32* %11, alig... (idx: 0)        -44                           -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 38, i32* %11, alig... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 38, i32* %11, alig... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 6)
State: LEGUP_F_main_BB_preheader14
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* %12, align... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* %12, align... (idx: 0)        -55                           -3                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* %12, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* %12, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 7)
State: LEGUP_F_main_BB_preheader14
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 11, i32* %13, alig... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 11, i32* %13, alig... (idx: 0)        -64                           -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 11, i32* %13, alig... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 11, i32* %13, alig... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 8)
State: LEGUP_F_main_BB__16
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %21 = add nsw i32 %pc.0, 4 can share an output register with another operation already assigned to main_signed_add_32_0
  %21 = add nsw i32 %pc.0, 4 can share an output register with another operation already assigned to main_signed_add_32_1
  %21 = add nsw i32 %pc.0, 4 can share an output register with another operation already assigned to main_signed_add_32_2
  %21 = add nsw i32 %pc.0, 4 can share an output register with another operation already assigned to main_signed_add_32_3
  %21 = add nsw i32 %pc.0, 4 can share an output register with another operation already assigned to main_signed_add_32_4
  %21 = add nsw i32 %pc.0, 4 can share an output register with another operation already assigned to main_signed_add_32_5
  %21 = add nsw i32 %pc.0, 4 can share an output register with another operation already assigned to main_signed_add_32_6
  %21 = add nsw i32 %pc.0, 4 can share an output register with another operation already assigned to main_signed_add_32_7
  %21 = add nsw i32 %pc.0, 4 can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %21 = add nsw i32 %pc.0, 4 (idx: 0)             -35                           -3                            -2                            95                            95                            95                            95                            95                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %21 = add nsw i32 %pc.0, 4 (idx: 0)             1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %21 = add nsw i32 %pc.0, 4 (idx: 0) -> main_signed_add_32_0 (mux inputs: 5)
State: LEGUP_F_main_BB__16
Binding functional unit type: imem_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_imem_local_mem_dual_port_0
  %20 = load i32* %19, align 4... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_imem_local_mem_dual_port_0
  %20 = load i32* %19, align 4... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %20 = load i32* %19, align 4... (idx: 0) -> main_imem_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB__16
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep23 = add i32 %gep_int21,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep23 = add i32 %gep_int21,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep23 = add i32 %gep_int21,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep23 = add i32 %gep_int21,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep23 = add i32 %gep_int21,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep23 = add i32 %gep_int21,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep23 = add i32 %gep_int21,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep23 = add i32 %gep_int21,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep23 = add i32 %gep_int21,... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep23 = add i32 %gep_int21,... (idx: 0)        -49                           -9                            -9                            90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep23 = add i32 %gep_int21,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep23 = add i32 %gep_int21,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 7)
State: LEGUP_F_main_BB__33
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %35 = load i32* %34, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %37 = load i32* %36, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %35 = load i32* %34, align 4... (idx: 0)        85                            95                            
  %37 = load i32* %36, align 4... (idx: 1)        85                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %35 = load i32* %34, align 4... (idx: 0)        1                             0                             
  %37 = load i32* %36, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %35 = load i32* %34, align 4... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 3)
  %37 = load i32* %36, align 4... (idx: 1) -> main_main_0_reg_local_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_main_BB__33
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep26 = add i32 %gep_int24,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep26 = add i32 %gep_int24,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep26 = add i32 %gep_int24,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep26 = add i32 %gep_int24,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep26 = add i32 %gep_int24,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep26 = add i32 %gep_int24,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep26 = add i32 %gep_int24,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep26 = add i32 %gep_int24,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep26 = add i32 %gep_int24,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep29 = add i32 %gep_int27,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep29 = add i32 %gep_int27,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep29 = add i32 %gep_int27,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep29 = add i32 %gep_int27,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep29 = add i32 %gep_int27,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep29 = add i32 %gep_int27,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep29 = add i32 %gep_int27,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep29 = add i32 %gep_int27,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep29 = add i32 %gep_int27,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep32 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep32 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep32 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep32 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep32 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep32 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep32 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep32 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep32 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep26 = add i32 %gep_int24,... (idx: 0)        -69                           -9                            -9                            90                            90                            90                            90                            90                            90                            
  %gep29 = add i32 %gep_int27,... (idx: 1)        -69                           -9                            -9                            90                            90                            90                            90                            90                            90                            
  %gep32 = add i32 %gep_int30,... (idx: 2)        -69                           -9                            -9                            90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep26 = add i32 %gep_int24,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep29 = add i32 %gep_int27,... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
  %gep32 = add i32 %gep_int30,... (idx: 2)        0                             0                             1                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep26 = add i32 %gep_int24,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 9)
  %gep29 = add i32 %gep_int27,... (idx: 1) -> main_signed_add_32_1 (mux inputs: 3)
  %gep32 = add i32 %gep_int30,... (idx: 2) -> main_signed_add_32_2 (mux inputs: 3)
State: LEGUP_F_main_BB__33
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %40 = load i32* %39, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %40 = load i32* %39, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %40 = load i32* %39, align 4... (idx: 0)        75                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %40 = load i32* %39, align 4... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %40 = load i32* %39, align 4... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB__33
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %38 = add nsw i32 %37, %35 can share an output register with another operation already assigned to main_signed_add_32_0
  %38 = add nsw i32 %37, %35 can share an output register with another operation already assigned to main_signed_add_32_1
  %38 = add nsw i32 %37, %35 can share an output register with another operation already assigned to main_signed_add_32_2
  %38 = add nsw i32 %37, %35 can share an output register with another operation already assigned to main_signed_add_32_3
  %38 = add nsw i32 %37, %35 can share an output register with another operation already assigned to main_signed_add_32_4
  %38 = add nsw i32 %37, %35 can share an output register with another operation already assigned to main_signed_add_32_5
  %38 = add nsw i32 %37, %35 can share an output register with another operation already assigned to main_signed_add_32_6
  %38 = add nsw i32 %37, %35 can share an output register with another operation already assigned to main_signed_add_32_7
  %38 = add nsw i32 %37, %35 can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %38 = add nsw i32 %37, %35 (idx: 0)             -90                           -30                           -30                           90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %38 = add nsw i32 %37, %35 (idx: 0)             1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %38 = add nsw i32 %37, %35 (idx: 0) -> main_signed_add_32_0 (mux inputs: 11)
State: LEGUP_F_main_BB__33
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %41, i32* %39, ali... hey can share an input with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %41, i32* %39, ali... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %41, i32* %39, ali... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %41, i32* %39, ali... (idx: 0)        65                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %41, i32* %39, ali... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %41, i32* %39, ali... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 5)
State: LEGUP_F_main_BB__33
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %41 = add nsw i32 %38, %40 can share an output register with another operation already assigned to main_signed_add_32_0
  %41 = add nsw i32 %38, %40 can share an output register with another operation already assigned to main_signed_add_32_1
  %41 = add nsw i32 %38, %40 can share an output register with another operation already assigned to main_signed_add_32_2
  %41 = add nsw i32 %38, %40 can share an output register with another operation already assigned to main_signed_add_32_3
  %41 = add nsw i32 %38, %40 can share an output register with another operation already assigned to main_signed_add_32_4
  %41 = add nsw i32 %38, %40 can share an output register with another operation already assigned to main_signed_add_32_5
  %41 = add nsw i32 %38, %40 can share an output register with another operation already assigned to main_signed_add_32_6
  %41 = add nsw i32 %38, %40 can share an output register with another operation already assigned to main_signed_add_32_7
  %41 = add nsw i32 %38, %40 can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %41 = add nsw i32 %38, %40 (idx: 0)             -110                          -30                           -29                           90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %41 = add nsw i32 %38, %40 (idx: 0)             1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %41 = add nsw i32 %38, %40 (idx: 0) -> main_signed_add_32_0 (mux inputs: 13)
State: LEGUP_F_main_BB__42
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %44 = load i32* %43, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %44 = load i32* %43, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
  %46 = load i32* %45, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %46 = load i32* %45, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %44 = load i32* %43, align 4... (idx: 0)        55                            95                            
  %46 = load i32* %45, align 4... (idx: 1)        55                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %44 = load i32* %43, align 4... (idx: 0)        1                             0                             
  %46 = load i32* %45, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %44 = load i32* %43, align 4... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 6)
  %46 = load i32* %45, align 4... (idx: 1) -> main_main_0_reg_local_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_main_BB__42
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep35 = add i32 %gep_int33,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep35 = add i32 %gep_int33,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep35 = add i32 %gep_int33,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep35 = add i32 %gep_int33,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep35 = add i32 %gep_int33,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep35 = add i32 %gep_int33,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep35 = add i32 %gep_int33,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep35 = add i32 %gep_int33,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep35 = add i32 %gep_int33,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep38 = add i32 %gep_int36,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep38 = add i32 %gep_int36,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep38 = add i32 %gep_int36,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep38 = add i32 %gep_int36,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep38 = add i32 %gep_int36,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep38 = add i32 %gep_int36,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep38 = add i32 %gep_int36,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep38 = add i32 %gep_int36,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep38 = add i32 %gep_int36,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep41 = add i32 %gep_int39,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep41 = add i32 %gep_int39,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep41 = add i32 %gep_int39,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep41 = add i32 %gep_int39,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep41 = add i32 %gep_int39,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep41 = add i32 %gep_int39,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep41 = add i32 %gep_int39,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep41 = add i32 %gep_int39,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep41 = add i32 %gep_int39,... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep35 = add i32 %gep_int33,... (idx: 0)        -129                          -29                           -29                           90                            90                            90                            90                            90                            90                            
  %gep38 = add i32 %gep_int36,... (idx: 1)        -129                          -29                           -29                           90                            90                            90                            90                            90                            90                            
  %gep41 = add i32 %gep_int39,... (idx: 2)        -129                          -29                           -29                           90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep35 = add i32 %gep_int33,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep38 = add i32 %gep_int36,... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
  %gep41 = add i32 %gep_int39,... (idx: 2)        0                             0                             1                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep35 = add i32 %gep_int33,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 15)
  %gep38 = add i32 %gep_int36,... (idx: 1) -> main_signed_add_32_1 (mux inputs: 5)
  %gep41 = add i32 %gep_int39,... (idx: 2) -> main_signed_add_32_2 (mux inputs: 5)
State: LEGUP_F_main_BB__42
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %49 = load i32* %48, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %49 = load i32* %48, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %49 = load i32* %48, align 4... (idx: 0)        45                            85                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %49 = load i32* %48, align 4... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %49 = load i32* %48, align 4... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 7)
State: LEGUP_F_main_BB__42
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %47 = sub i32 %44, %46 (idx: 0)                 -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %47 = sub i32 %44, %46 (idx: 0)                 1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %47 = sub i32 %44, %46 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 2)
State: LEGUP_F_main_BB__42
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %50, i32* %48, ali... hey can share an input with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %50, i32* %48, ali... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %50, i32* %48, ali... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %50, i32* %48, ali... (idx: 0)        35                            80                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %50, i32* %48, ali... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %50, i32* %48, ali... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 8)
State: LEGUP_F_main_BB__42
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %50 = sub i32 %47, %49 (idx: 0)                 -29                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %50 = sub i32 %47, %49 (idx: 0)                 1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %50 = sub i32 %47, %49 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 4)
State: LEGUP_F_main_BB__51
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %53 = load i32* %52, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %53 = load i32* %52, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
  %56 = load i32* %55, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %56 = load i32* %55, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %53 = load i32* %52, align 4... (idx: 0)        25                            85                            
  %56 = load i32* %55, align 4... (idx: 1)        25                            85                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %53 = load i32* %52, align 4... (idx: 0)        1                             0                             
  %56 = load i32* %55, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %53 = load i32* %52, align 4... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 9)
  %56 = load i32* %55, align 4... (idx: 1) -> main_main_0_reg_local_mem_dual_port_1 (mux inputs: 3)
State: LEGUP_F_main_BB__51
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep44 = add i32 %gep_int42,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep44 = add i32 %gep_int42,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep44 = add i32 %gep_int42,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep44 = add i32 %gep_int42,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep44 = add i32 %gep_int42,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep44 = add i32 %gep_int42,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep44 = add i32 %gep_int42,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep44 = add i32 %gep_int42,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep44 = add i32 %gep_int42,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep47 = add i32 %gep_int45,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep47 = add i32 %gep_int45,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep47 = add i32 %gep_int45,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep47 = add i32 %gep_int45,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep47 = add i32 %gep_int45,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep47 = add i32 %gep_int45,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep47 = add i32 %gep_int45,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep47 = add i32 %gep_int45,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep47 = add i32 %gep_int45,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep50 = add i32 %gep_int48,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep50 = add i32 %gep_int48,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep50 = add i32 %gep_int48,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep50 = add i32 %gep_int48,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep50 = add i32 %gep_int48,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep50 = add i32 %gep_int48,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep50 = add i32 %gep_int48,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep50 = add i32 %gep_int48,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep50 = add i32 %gep_int48,... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep44 = add i32 %gep_int42,... (idx: 0)        -149                          -49                           -49                           90                            90                            90                            90                            90                            90                            
  %gep47 = add i32 %gep_int45,... (idx: 1)        -149                          -49                           -49                           90                            90                            90                            90                            90                            90                            
  %gep50 = add i32 %gep_int48,... (idx: 2)        -149                          -49                           -49                           90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep44 = add i32 %gep_int42,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep47 = add i32 %gep_int45,... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
  %gep50 = add i32 %gep_int48,... (idx: 2)        0                             0                             1                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep44 = add i32 %gep_int42,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 17)
  %gep47 = add i32 %gep_int45,... (idx: 1) -> main_signed_add_32_1 (mux inputs: 7)
  %gep50 = add i32 %gep_int48,... (idx: 2) -> main_signed_add_32_2 (mux inputs: 7)
State: LEGUP_F_main_BB__51
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %60 = load i32* %59, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %60 = load i32* %59, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %60 = load i32* %59, align 4... (idx: 0)        15                            75                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %60 = load i32* %59, align 4... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %60 = load i32* %59, align 4... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 10)
State: LEGUP_F_main_BB__51
Binding functional unit type: signed_multiply_64
Weight matrix for operation/function unit matching:
                                                  main_signed_multiply_64_0     
  %58 = mul nsw i64 %57, %54 (idx: 0)             90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_64_0     
  %58 = mul nsw i64 %57, %54 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %58 = mul nsw i64 %57, %54 (idx: 0) -> main_signed_multiply_64_0 (mux inputs: 2)
State: LEGUP_F_main_BB__51
Binding functional unit type: signed_add_64
Weight matrix for operation/function unit matching:
                                                  main_signed_add_64_0          
  %62 = add nsw i64 %58, %61 (idx: 0)             90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_64_0          
  %62 = add nsw i64 %58, %61 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %62 = add nsw i64 %58, %61 (idx: 0) -> main_signed_add_64_0 (mux inputs: 2)
State: LEGUP_F_main_BB__66
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %68 = load i32* %67, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %68 = load i32* %67, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
  %71 = load i32* %70, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %71 = load i32* %70, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %68 = load i32* %67, align 4... (idx: 0)        5                             75                            
  %71 = load i32* %70, align 4... (idx: 1)        5                             75                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %68 = load i32* %67, align 4... (idx: 0)        1                             0                             
  %71 = load i32* %70, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %68 = load i32* %67, align 4... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 11)
  %71 = load i32* %70, align 4... (idx: 1) -> main_main_0_reg_local_mem_dual_port_1 (mux inputs: 4)
State: LEGUP_F_main_BB__66
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep53 = add i32 %gep_int51,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep53 = add i32 %gep_int51,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep53 = add i32 %gep_int51,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep53 = add i32 %gep_int51,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep53 = add i32 %gep_int51,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep53 = add i32 %gep_int51,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep53 = add i32 %gep_int51,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep53 = add i32 %gep_int51,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep53 = add i32 %gep_int51,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep56 = add i32 %gep_int54,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep56 = add i32 %gep_int54,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep56 = add i32 %gep_int54,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep56 = add i32 %gep_int54,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep56 = add i32 %gep_int54,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep56 = add i32 %gep_int54,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep56 = add i32 %gep_int54,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep56 = add i32 %gep_int54,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep56 = add i32 %gep_int54,... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep53 = add i32 %gep_int51,... (idx: 0)        -169                          -69                           -69                           90                            90                            90                            90                            90                            90                            
  %gep56 = add i32 %gep_int54,... (idx: 1)        -169                          -69                           -69                           90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep53 = add i32 %gep_int51,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep56 = add i32 %gep_int54,... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep53 = add i32 %gep_int51,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 19)
  %gep56 = add i32 %gep_int54,... (idx: 1) -> main_signed_add_32_1 (mux inputs: 9)
State: LEGUP_F_main_BB__66
Binding functional unit type: signed_multiply_64
Weight matrix for operation/function unit matching:
  %73 = mul i64 %72, %69 can share an output register with another operation already assigned to main_signed_multiply_64_0
                                                  main_signed_multiply_64_0     
  %73 = mul i64 %72, %69 (idx: 0)                 80                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_64_0     
  %73 = mul i64 %72, %69 (idx: 0)                 1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %73 = mul i64 %72, %69 (idx: 0) -> main_signed_multiply_64_0 (mux inputs: 4)
State: LEGUP_F_main_BB__77
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %Hi.0, i32* %78, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %Hi.0, i32* %78, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %Hi.0, i32* %78, a... (idx: 0)        -10                           60                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %Hi.0, i32* %78, a... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %Hi.0, i32* %78, a... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 13)
State: LEGUP_F_main_BB__77
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep59 = add i32 %gep_int57,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep59 = add i32 %gep_int57,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep59 = add i32 %gep_int57,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep59 = add i32 %gep_int57,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep59 = add i32 %gep_int57,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep59 = add i32 %gep_int57,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep59 = add i32 %gep_int57,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep59 = add i32 %gep_int57,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep59 = add i32 %gep_int57,... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep59 = add i32 %gep_int57,... (idx: 0)        -189                          -89                           -69                           90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep59 = add i32 %gep_int57,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep59 = add i32 %gep_int57,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 21)
State: LEGUP_F_main_BB__79
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %Lo.0, i32* %80, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %Lo.0, i32* %80, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %Lo.0, i32* %80, a... (idx: 0)        -30                           60                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %Lo.0, i32* %80, a... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %Lo.0, i32* %80, a... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 15)
State: LEGUP_F_main_BB__79
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep62 = add i32 %gep_int60,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep62 = add i32 %gep_int60,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep62 = add i32 %gep_int60,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep62 = add i32 %gep_int60,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep62 = add i32 %gep_int60,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep62 = add i32 %gep_int60,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep62 = add i32 %gep_int60,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep62 = add i32 %gep_int60,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep62 = add i32 %gep_int60,... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep62 = add i32 %gep_int60,... (idx: 0)        -209                          -89                           -69                           90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep62 = add i32 %gep_int60,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep62 = add i32 %gep_int60,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 23)
State: LEGUP_F_main_BB__81
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %83 = load i32* %82, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %83 = load i32* %82, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
  %85 = load i32* %84, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %85 = load i32* %84, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %83 = load i32* %82, align 4... (idx: 0)        -45                           65                            
  %85 = load i32* %84, align 4... (idx: 1)        -45                           65                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %83 = load i32* %82, align 4... (idx: 0)        1                             0                             
  %85 = load i32* %84, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %83 = load i32* %82, align 4... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 16)
  %85 = load i32* %84, align 4... (idx: 1) -> main_main_0_reg_local_mem_dual_port_1 (mux inputs: 5)
State: LEGUP_F_main_BB__81
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep65 = add i32 %gep_int63,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep65 = add i32 %gep_int63,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep65 = add i32 %gep_int63,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep65 = add i32 %gep_int63,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep65 = add i32 %gep_int63,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep65 = add i32 %gep_int63,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep65 = add i32 %gep_int63,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep65 = add i32 %gep_int63,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep65 = add i32 %gep_int63,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep68 = add i32 %gep_int66,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep68 = add i32 %gep_int66,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep68 = add i32 %gep_int66,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep68 = add i32 %gep_int66,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep68 = add i32 %gep_int66,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep68 = add i32 %gep_int66,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep68 = add i32 %gep_int66,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep68 = add i32 %gep_int66,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep68 = add i32 %gep_int66,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep71 = add i32 %gep_int69,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep71 = add i32 %gep_int69,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep71 = add i32 %gep_int69,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep71 = add i32 %gep_int69,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep71 = add i32 %gep_int69,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep71 = add i32 %gep_int69,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep71 = add i32 %gep_int69,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep71 = add i32 %gep_int69,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep71 = add i32 %gep_int69,... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep65 = add i32 %gep_int63,... (idx: 0)        -229                          -89                           -69                           90                            90                            90                            90                            90                            90                            
  %gep68 = add i32 %gep_int66,... (idx: 1)        -229                          -89                           -69                           90                            90                            90                            90                            90                            90                            
  %gep71 = add i32 %gep_int69,... (idx: 2)        -229                          -89                           -69                           90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep65 = add i32 %gep_int63,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep68 = add i32 %gep_int66,... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
  %gep71 = add i32 %gep_int69,... (idx: 2)        0                             0                             1                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep65 = add i32 %gep_int63,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 25)
  %gep68 = add i32 %gep_int66,... (idx: 1) -> main_signed_add_32_1 (mux inputs: 11)
  %gep71 = add i32 %gep_int69,... (idx: 2) -> main_signed_add_32_2 (mux inputs: 9)
State: LEGUP_F_main_BB__81
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %86, i32* %87, ali... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %86, i32* %87, ali... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %86, i32* %87, ali... (idx: 0)        -60                           50                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %86, i32* %87, ali... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %86, i32* %87, ali... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 18)
State: LEGUP_F_main_BB__88
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %90 = load i32* %89, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %90 = load i32* %89, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
  %92 = load i32* %91, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %92 = load i32* %91, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %90 = load i32* %89, align 4... (idx: 0)        -75                           55                            
  %92 = load i32* %91, align 4... (idx: 1)        -75                           55                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %90 = load i32* %89, align 4... (idx: 0)        1                             0                             
  %92 = load i32* %91, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %90 = load i32* %89, align 4... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 19)
  %92 = load i32* %91, align 4... (idx: 1) -> main_main_0_reg_local_mem_dual_port_1 (mux inputs: 6)
State: LEGUP_F_main_BB__88
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep74 = add i32 %gep_int72,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep74 = add i32 %gep_int72,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep74 = add i32 %gep_int72,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep74 = add i32 %gep_int72,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep74 = add i32 %gep_int72,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep74 = add i32 %gep_int72,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep74 = add i32 %gep_int72,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep74 = add i32 %gep_int72,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep74 = add i32 %gep_int72,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep77 = add i32 %gep_int75,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep77 = add i32 %gep_int75,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep77 = add i32 %gep_int75,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep77 = add i32 %gep_int75,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep77 = add i32 %gep_int75,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep77 = add i32 %gep_int75,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep77 = add i32 %gep_int75,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep77 = add i32 %gep_int75,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep77 = add i32 %gep_int75,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep80 = add i32 %gep_int78,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep80 = add i32 %gep_int78,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep80 = add i32 %gep_int78,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep80 = add i32 %gep_int78,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep80 = add i32 %gep_int78,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep80 = add i32 %gep_int78,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep80 = add i32 %gep_int78,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep80 = add i32 %gep_int78,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep80 = add i32 %gep_int78,... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep74 = add i32 %gep_int72,... (idx: 0)        -249                          -109                          -89                           90                            90                            90                            90                            90                            90                            
  %gep77 = add i32 %gep_int75,... (idx: 1)        -249                          -109                          -89                           90                            90                            90                            90                            90                            90                            
  %gep80 = add i32 %gep_int78,... (idx: 2)        -249                          -109                          -89                           90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep74 = add i32 %gep_int72,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep77 = add i32 %gep_int75,... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
  %gep80 = add i32 %gep_int78,... (idx: 2)        0                             0                             1                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep74 = add i32 %gep_int72,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 27)
  %gep77 = add i32 %gep_int75,... (idx: 1) -> main_signed_add_32_1 (mux inputs: 13)
  %gep80 = add i32 %gep_int78,... (idx: 2) -> main_signed_add_32_2 (mux inputs: 11)
State: LEGUP_F_main_BB__88
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %93, i32* %94, ali... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %93, i32* %94, ali... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %93, i32* %94, ali... (idx: 0)        -90                           40                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %93, i32* %94, ali... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %93, i32* %94, ali... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 21)
State: LEGUP_F_main_BB__95
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %97 = load i32* %96, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %97 = load i32* %96, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
  %99 = load i32* %98, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %99 = load i32* %98, align 4... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %97 = load i32* %96, align 4... (idx: 0)        -105                          45                            
  %99 = load i32* %98, align 4... (idx: 1)        -105                          45                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %97 = load i32* %96, align 4... (idx: 0)        1                             0                             
  %99 = load i32* %98, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %97 = load i32* %96, align 4... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 22)
  %99 = load i32* %98, align 4... (idx: 1) -> main_main_0_reg_local_mem_dual_port_1 (mux inputs: 7)
State: LEGUP_F_main_BB__95
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep83 = add i32 %gep_int81,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep83 = add i32 %gep_int81,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep83 = add i32 %gep_int81,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep83 = add i32 %gep_int81,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep83 = add i32 %gep_int81,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep83 = add i32 %gep_int81,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep83 = add i32 %gep_int81,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep83 = add i32 %gep_int81,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep83 = add i32 %gep_int81,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep86 = add i32 %gep_int84,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep86 = add i32 %gep_int84,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep86 = add i32 %gep_int84,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep86 = add i32 %gep_int84,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep86 = add i32 %gep_int84,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep86 = add i32 %gep_int84,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep86 = add i32 %gep_int84,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep86 = add i32 %gep_int84,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep86 = add i32 %gep_int84,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep89 = add i32 %gep_int87,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep89 = add i32 %gep_int87,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep89 = add i32 %gep_int87,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep89 = add i32 %gep_int87,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep89 = add i32 %gep_int87,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep89 = add i32 %gep_int87,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep89 = add i32 %gep_int87,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep89 = add i32 %gep_int87,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep89 = add i32 %gep_int87,... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep83 = add i32 %gep_int81,... (idx: 0)        -269                          -129                          -109                          90                            90                            90                            90                            90                            90                            
  %gep86 = add i32 %gep_int84,... (idx: 1)        -269                          -129                          -109                          90                            90                            90                            90                            90                            90                            
  %gep89 = add i32 %gep_int87,... (idx: 2)        -269                          -129                          -109                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep83 = add i32 %gep_int81,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep86 = add i32 %gep_int84,... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
  %gep89 = add i32 %gep_int87,... (idx: 2)        0                             0                             1                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep83 = add i32 %gep_int81,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 29)
  %gep86 = add i32 %gep_int84,... (idx: 1) -> main_signed_add_32_1 (mux inputs: 15)
  %gep89 = add i32 %gep_int87,... (idx: 2) -> main_signed_add_32_2 (mux inputs: 13)
State: LEGUP_F_main_BB__95
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %100, i32* %101, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %100, i32* %101, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %100, i32* %101, a... (idx: 0)        -120                          30                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %100, i32* %101, a... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %100, i32* %101, a... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 24)
State: LEGUP_F_main_BB__102
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %104 = load i32* %103, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %104 = load i32* %103, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %104 = load i32* %103, align... (idx: 0)        -135                          35                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %104 = load i32* %103, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %104 = load i32* %103, align... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 25)
State: LEGUP_F_main_BB__102
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep92 = add i32 %gep_int90,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep92 = add i32 %gep_int90,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep92 = add i32 %gep_int90,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep92 = add i32 %gep_int90,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep92 = add i32 %gep_int90,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep92 = add i32 %gep_int90,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep92 = add i32 %gep_int90,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep92 = add i32 %gep_int90,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep92 = add i32 %gep_int90,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep95 = add i32 %gep_int93,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep95 = add i32 %gep_int93,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep95 = add i32 %gep_int93,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep95 = add i32 %gep_int93,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep95 = add i32 %gep_int93,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep95 = add i32 %gep_int93,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep95 = add i32 %gep_int93,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep95 = add i32 %gep_int93,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep95 = add i32 %gep_int93,... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep92 = add i32 %gep_int90,... (idx: 0)        -289                          -149                          -129                          90                            90                            90                            90                            90                            90                            
  %gep95 = add i32 %gep_int93,... (idx: 1)        -289                          -149                          -129                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep92 = add i32 %gep_int90,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep95 = add i32 %gep_int93,... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep92 = add i32 %gep_int90,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 31)
  %gep95 = add i32 %gep_int93,... (idx: 1) -> main_signed_add_32_1 (mux inputs: 17)
State: LEGUP_F_main_BB__102
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %105, i32* %106, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %105, i32* %106, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %105, i32* %106, a... (idx: 0)        -150                          30                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %105, i32* %106, a... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %105, i32* %106, a... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 27)
State: LEGUP_F_main_BB__107
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %109 = load i32* %108, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %109 = load i32* %108, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %109 = load i32* %108, align... (idx: 0)        -165                          35                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %109 = load i32* %108, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %109 = load i32* %108, align... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 28)
State: LEGUP_F_main_BB__107
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep98 = add i32 %gep_int96,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep98 = add i32 %gep_int96,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep98 = add i32 %gep_int96,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep98 = add i32 %gep_int96,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep98 = add i32 %gep_int96,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep98 = add i32 %gep_int96,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep98 = add i32 %gep_int96,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep98 = add i32 %gep_int96,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep98 = add i32 %gep_int96,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep101 = add i32 %gep_int99... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep101 = add i32 %gep_int99... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep101 = add i32 %gep_int99... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep101 = add i32 %gep_int99... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep101 = add i32 %gep_int99... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep101 = add i32 %gep_int99... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep101 = add i32 %gep_int99... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep101 = add i32 %gep_int99... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep101 = add i32 %gep_int99... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep98 = add i32 %gep_int96,... (idx: 0)        -309                          -169                          -129                          90                            90                            90                            90                            90                            90                            
  %gep101 = add i32 %gep_int99... (idx: 1)        -309                          -169                          -129                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep98 = add i32 %gep_int96,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep101 = add i32 %gep_int99... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep98 = add i32 %gep_int96,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 33)
  %gep101 = add i32 %gep_int99... (idx: 1) -> main_signed_add_32_1 (mux inputs: 19)
State: LEGUP_F_main_BB__107
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %110, i32* %111, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %110, i32* %111, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %110, i32* %111, a... (idx: 0)        -180                          30                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %110, i32* %111, a... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %110, i32* %111, a... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 30)
State: LEGUP_F_main_BB__112
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %114 = load i32* %113, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %114 = load i32* %113, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
  %116 = load i32* %115, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %116 = load i32* %115, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %114 = load i32* %113, align... (idx: 0)        -195                          35                            
  %116 = load i32* %115, align... (idx: 1)        -195                          35                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %114 = load i32* %113, align... (idx: 0)        1                             0                             
  %116 = load i32* %115, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %114 = load i32* %113, align... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 31)
  %116 = load i32* %115, align... (idx: 1) -> main_main_0_reg_local_mem_dual_port_1 (mux inputs: 8)
State: LEGUP_F_main_BB__112
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep104 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep104 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep104 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep104 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep104 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep104 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep104 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep104 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep104 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep107 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep107 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep107 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep107 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep107 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep107 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep107 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep107 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep107 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep110 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep110 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep110 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep110 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep110 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep110 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep110 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep110 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep110 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep104 = add i32 %gep_int10... (idx: 0)        -329                          -189                          -129                          90                            90                            90                            90                            90                            90                            
  %gep107 = add i32 %gep_int10... (idx: 1)        -329                          -189                          -129                          90                            90                            90                            90                            90                            90                            
  %gep110 = add i32 %gep_int10... (idx: 2)        -329                          -189                          -129                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep104 = add i32 %gep_int10... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep107 = add i32 %gep_int10... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
  %gep110 = add i32 %gep_int10... (idx: 2)        0                             0                             1                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep104 = add i32 %gep_int10... (idx: 0) -> main_signed_add_32_0 (mux inputs: 35)
  %gep107 = add i32 %gep_int10... (idx: 1) -> main_signed_add_32_1 (mux inputs: 21)
  %gep110 = add i32 %gep_int10... (idx: 2) -> main_signed_add_32_2 (mux inputs: 15)
State: LEGUP_F_main_BB__112
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %117, i32* %118, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %117, i32* %118, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %117, i32* %118, a... (idx: 0)        -210                          20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %117, i32* %118, a... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %117, i32* %118, a... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 33)
State: LEGUP_F_main_BB__119
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %121 = load i32* %120, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %121 = load i32* %120, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
  %123 = load i32* %122, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %123 = load i32* %122, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %121 = load i32* %120, align... (idx: 0)        -225                          25                            
  %123 = load i32* %122, align... (idx: 1)        -225                          25                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %121 = load i32* %120, align... (idx: 0)        1                             0                             
  %123 = load i32* %122, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %121 = load i32* %120, align... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 34)
  %123 = load i32* %122, align... (idx: 1) -> main_main_0_reg_local_mem_dual_port_1 (mux inputs: 9)
State: LEGUP_F_main_BB__119
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep113 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep113 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep113 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep113 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep113 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep113 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep113 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep113 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep113 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep116 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep116 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep116 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep116 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep116 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep116 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep116 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep116 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep116 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep119 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep119 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep119 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep119 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep119 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep119 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep119 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep119 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep119 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep113 = add i32 %gep_int11... (idx: 0)        -349                          -209                          -149                          90                            90                            90                            90                            90                            90                            
  %gep116 = add i32 %gep_int11... (idx: 1)        -349                          -209                          -149                          90                            90                            90                            90                            90                            90                            
  %gep119 = add i32 %gep_int11... (idx: 2)        -349                          -209                          -149                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep113 = add i32 %gep_int11... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep116 = add i32 %gep_int11... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
  %gep119 = add i32 %gep_int11... (idx: 2)        0                             0                             1                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep113 = add i32 %gep_int11... (idx: 0) -> main_signed_add_32_0 (mux inputs: 37)
  %gep116 = add i32 %gep_int11... (idx: 1) -> main_signed_add_32_1 (mux inputs: 23)
  %gep119 = add i32 %gep_int11... (idx: 2) -> main_signed_add_32_2 (mux inputs: 17)
State: LEGUP_F_main_BB__119
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %124, i32* %125, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %124, i32* %125, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %124, i32* %125, a... (idx: 0)        -240                          10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %124, i32* %125, a... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %124, i32* %125, a... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 36)
State: LEGUP_F_main_BB__126
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %128 = load i32* %127, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %128 = load i32* %127, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
  %130 = load i32* %129, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %130 = load i32* %129, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %128 = load i32* %127, align... (idx: 0)        -255                          15                            
  %130 = load i32* %129, align... (idx: 1)        -255                          15                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %128 = load i32* %127, align... (idx: 0)        1                             0                             
  %130 = load i32* %129, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %128 = load i32* %127, align... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 37)
  %130 = load i32* %129, align... (idx: 1) -> main_main_0_reg_local_mem_dual_port_1 (mux inputs: 10)
State: LEGUP_F_main_BB__126
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep125 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep125 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep125 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep125 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep125 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep125 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep125 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep125 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep125 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep122 = add i32 %gep_int12... (idx: 0)        -369                          -229                          -169                          90                            90                            90                            90                            90                            90                            
  %gep125 = add i32 %gep_int12... (idx: 1)        -369                          -229                          -169                          90                            90                            90                            90                            90                            90                            
  %gep128 = add i32 %gep_int12... (idx: 2)        -369                          -229                          -169                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep122 = add i32 %gep_int12... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep125 = add i32 %gep_int12... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
  %gep128 = add i32 %gep_int12... (idx: 2)        0                             0                             1                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep122 = add i32 %gep_int12... (idx: 0) -> main_signed_add_32_0 (mux inputs: 39)
  %gep125 = add i32 %gep_int12... (idx: 1) -> main_signed_add_32_1 (mux inputs: 25)
  %gep128 = add i32 %gep_int12... (idx: 2) -> main_signed_add_32_2 (mux inputs: 19)
State: LEGUP_F_main_BB__126
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %132, i32* %133, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %132, i32* %133, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %132, i32* %133, a... (idx: 0)        -270                          0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %132, i32* %133, a... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %132, i32* %133, a... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 39)
State: LEGUP_F_main_BB__134
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %136 = load i32* %135, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %136 = load i32* %135, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
  %138 = load i32* %137, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %138 = load i32* %137, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %136 = load i32* %135, align... (idx: 0)        -285                          5                             
  %138 = load i32* %137, align... (idx: 1)        -285                          5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %136 = load i32* %135, align... (idx: 0)        1                             0                             
  %138 = load i32* %137, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %136 = load i32* %135, align... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 40)
  %138 = load i32* %137, align... (idx: 1) -> main_main_0_reg_local_mem_dual_port_1 (mux inputs: 11)
State: LEGUP_F_main_BB__134
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep131 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep131 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep131 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep131 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep131 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep131 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep131 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep131 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep131 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep137 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep137 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep137 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep137 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep137 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep137 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep137 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep137 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep137 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep131 = add i32 %gep_int12... (idx: 0)        -389                          -249                          -189                          90                            90                            90                            90                            90                            90                            
  %gep134 = add i32 %gep_int13... (idx: 1)        -389                          -249                          -189                          90                            90                            90                            90                            90                            90                            
  %gep137 = add i32 %gep_int13... (idx: 2)        -389                          -249                          -189                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep131 = add i32 %gep_int12... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep134 = add i32 %gep_int13... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
  %gep137 = add i32 %gep_int13... (idx: 2)        0                             0                             1                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep131 = add i32 %gep_int12... (idx: 0) -> main_signed_add_32_0 (mux inputs: 41)
  %gep134 = add i32 %gep_int13... (idx: 1) -> main_signed_add_32_1 (mux inputs: 27)
  %gep137 = add i32 %gep_int13... (idx: 2) -> main_signed_add_32_2 (mux inputs: 21)
State: LEGUP_F_main_BB__134
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %140, i32* %141, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %140, i32* %141, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %140, i32* %141, a... (idx: 0)        -300                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %140, i32* %141, a... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %140, i32* %141, a... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 42)
State: LEGUP_F_main_BB__142
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %144 = load i32* %143, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %144 = load i32* %143, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %144 = load i32* %143, align... (idx: 0)        -315                          -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %144 = load i32* %143, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %144 = load i32* %143, align... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 43)
State: LEGUP_F_main_BB__142
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep140 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep140 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep140 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep140 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep140 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep140 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep140 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep140 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep140 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep140 = add i32 %gep_int13... (idx: 0)        -409                          -269                          -209                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep140 = add i32 %gep_int13... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep140 = add i32 %gep_int13... (idx: 0) -> main_signed_add_32_0 (mux inputs: 43)
State: LEGUP_F_main_BB__148
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %21, i32* %15, ali... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %21, i32* %15, ali... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %21, i32* %15, ali... (idx: 0)        -330                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %21, i32* %15, ali... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %21, i32* %15, ali... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 45)
State: LEGUP_F_main_BB__156
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %158 = load i32* %157, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %158 = load i32* %157, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %158 = load i32* %157, align... (idx: 0)        -345                          -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %158 = load i32* %157, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %158 = load i32* %157, align... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 46)
State: LEGUP_F_main_BB__156
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep143 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep143 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep143 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep143 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep143 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep143 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep143 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep143 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep143 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep146 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep146 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep146 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep146 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep146 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep146 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep146 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep146 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep146 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep143 = add i32 %gep_int14... (idx: 0)        -429                          -269                          -209                          90                            90                            90                            90                            90                            90                            
  %gep146 = add i32 %gep_int14... (idx: 1)        -429                          -269                          -209                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep143 = add i32 %gep_int14... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep146 = add i32 %gep_int14... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep143 = add i32 %gep_int14... (idx: 0) -> main_signed_add_32_0 (mux inputs: 45)
  %gep146 = add i32 %gep_int14... (idx: 1) -> main_signed_add_32_1 (mux inputs: 29)
State: LEGUP_F_main_BB__156
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %160, i32* %161, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %160, i32* %161, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %160, i32* %161, a... (idx: 0)        -360                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %160, i32* %161, a... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %160, i32* %161, a... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 48)
State: LEGUP_F_main_BB__156
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %160 = add nsw i32 %158, %15... can share an output register with another operation already assigned to main_signed_add_32_0
  %160 = add nsw i32 %158, %15... can share an output register with another operation already assigned to main_signed_add_32_1
  %160 = add nsw i32 %158, %15... can share an output register with another operation already assigned to main_signed_add_32_2
  %160 = add nsw i32 %158, %15... can share an output register with another operation already assigned to main_signed_add_32_3
  %160 = add nsw i32 %158, %15... can share an output register with another operation already assigned to main_signed_add_32_4
  %160 = add nsw i32 %158, %15... can share an output register with another operation already assigned to main_signed_add_32_5
  %160 = add nsw i32 %158, %15... can share an output register with another operation already assigned to main_signed_add_32_6
  %160 = add nsw i32 %158, %15... can share an output register with another operation already assigned to main_signed_add_32_7
  %160 = add nsw i32 %158, %15... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %160 = add nsw i32 %158, %15... (idx: 0)        -450                          -290                          -210                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %160 = add nsw i32 %158, %15... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %160 = add nsw i32 %158, %15... (idx: 0) -> main_signed_add_32_0 (mux inputs: 47)
State: LEGUP_F_main_BB__162
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %164 = load i32* %163, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %164 = load i32* %163, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %164 = load i32* %163, align... (idx: 0)        -375                          -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %164 = load i32* %163, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %164 = load i32* %163, align... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 49)
State: LEGUP_F_main_BB__162
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep149 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep149 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep149 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep149 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep149 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep149 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep149 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep149 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep149 = add i32 %gep_int14... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep152 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep152 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep152 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep152 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep152 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep152 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep152 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep152 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep152 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep149 = add i32 %gep_int14... (idx: 0)        -469                          -289                          -209                          90                            90                            90                            90                            90                            90                            
  %gep152 = add i32 %gep_int15... (idx: 1)        -469                          -289                          -209                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep149 = add i32 %gep_int14... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep152 = add i32 %gep_int15... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep149 = add i32 %gep_int14... (idx: 0) -> main_signed_add_32_0 (mux inputs: 49)
  %gep152 = add i32 %gep_int15... (idx: 1) -> main_signed_add_32_1 (mux inputs: 31)
State: LEGUP_F_main_BB__162
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %166, i32* %167, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %166, i32* %167, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %166, i32* %167, a... (idx: 0)        -390                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %166, i32* %167, a... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %166, i32* %167, a... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 51)
State: LEGUP_F_main_BB__168
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %170 = load i32* %169, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %170 = load i32* %169, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %170 = load i32* %169, align... (idx: 0)        -405                          -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %170 = load i32* %169, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %170 = load i32* %169, align... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 52)
State: LEGUP_F_main_BB__168
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep155 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep155 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep155 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep155 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep155 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep155 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep155 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep155 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep155 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep158 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep158 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep158 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep158 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep158 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep158 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep158 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep158 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep158 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep155 = add i32 %gep_int15... (idx: 0)        -489                          -309                          -209                          90                            90                            90                            90                            90                            90                            
  %gep158 = add i32 %gep_int15... (idx: 1)        -489                          -309                          -209                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep155 = add i32 %gep_int15... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep158 = add i32 %gep_int15... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep155 = add i32 %gep_int15... (idx: 0) -> main_signed_add_32_0 (mux inputs: 51)
  %gep158 = add i32 %gep_int15... (idx: 1) -> main_signed_add_32_1 (mux inputs: 33)
State: LEGUP_F_main_BB__168
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %172, i32* %173, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %172, i32* %173, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %172, i32* %173, a... (idx: 0)        -420                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %172, i32* %173, a... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %172, i32* %173, a... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 54)
State: LEGUP_F_main_BB__174
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %176 = load i32* %175, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %176 = load i32* %175, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %176 = load i32* %175, align... (idx: 0)        -435                          -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %176 = load i32* %175, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %176 = load i32* %175, align... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 55)
State: LEGUP_F_main_BB__174
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep161 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep161 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep161 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep161 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep161 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep161 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep161 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep161 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep161 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep164 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep164 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep164 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep164 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep164 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep164 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep164 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep164 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep164 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep161 = add i32 %gep_int15... (idx: 0)        -509                          -329                          -209                          90                            90                            90                            90                            90                            90                            
  %gep164 = add i32 %gep_int16... (idx: 1)        -509                          -329                          -209                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep161 = add i32 %gep_int15... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep164 = add i32 %gep_int16... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep161 = add i32 %gep_int15... (idx: 0) -> main_signed_add_32_0 (mux inputs: 53)
  %gep164 = add i32 %gep_int16... (idx: 1) -> main_signed_add_32_1 (mux inputs: 35)
State: LEGUP_F_main_BB__174
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %178, i32* %179, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %178, i32* %179, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %178, i32* %179, a... (idx: 0)        -450                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %178, i32* %179, a... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %178, i32* %179, a... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 57)
State: LEGUP_F_main_BB__180
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %182 = load i32* %181, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %182 = load i32* %181, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %182 = load i32* %181, align... (idx: 0)        -465                          -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %182 = load i32* %181, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %182 = load i32* %181, align... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 58)
State: LEGUP_F_main_BB__180
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep167 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep167 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep167 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep167 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep167 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep167 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep167 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep167 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep167 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep173 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep173 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep173 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep173 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep173 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep173 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep173 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep173 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep173 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep167 = add i32 %gep_int16... (idx: 0)        -529                          -349                          -209                          90                            90                            90                            90                            90                            90                            
  %gep173 = add i32 %gep_int17... (idx: 1)        -529                          -349                          -209                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep167 = add i32 %gep_int16... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep173 = add i32 %gep_int17... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep167 = add i32 %gep_int16... (idx: 0) -> main_signed_add_32_0 (mux inputs: 55)
  %gep173 = add i32 %gep_int17... (idx: 1) -> main_signed_add_32_1 (mux inputs: 37)
State: LEGUP_F_main_BB__180
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %183 = add nsw i32 %182, %20 can share an output register with another operation already assigned to main_signed_add_32_0
  %183 = add nsw i32 %182, %20 can share an output register with another operation already assigned to main_signed_add_32_1
  %183 = add nsw i32 %182, %20 can share an output register with another operation already assigned to main_signed_add_32_2
  %183 = add nsw i32 %182, %20 can share an output register with another operation already assigned to main_signed_add_32_3
  %183 = add nsw i32 %182, %20 can share an output register with another operation already assigned to main_signed_add_32_4
  %183 = add nsw i32 %182, %20 can share an output register with another operation already assigned to main_signed_add_32_5
  %183 = add nsw i32 %182, %20 can share an output register with another operation already assigned to main_signed_add_32_6
  %183 = add nsw i32 %182, %20 can share an output register with another operation already assigned to main_signed_add_32_7
  %183 = add nsw i32 %182, %20 can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %183 = add nsw i32 %182, %20 (idx: 0)           -550                          -370                          -210                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %183 = add nsw i32 %182, %20 (idx: 0)           1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %183 = add nsw i32 %182, %20 (idx: 0) -> main_signed_add_32_0 (mux inputs: 57)
State: LEGUP_F_main_BB__180
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %187 = load i32* %186, align... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %187 = load i32* %186, align... (idx: 0)        -75                           -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %187 = load i32* %186, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %187 = load i32* %186, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 9)
State: LEGUP_F_main_BB__180
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep170 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep170 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep170 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep170 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep170 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep170 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep170 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep170 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep170 = add i32 %gep_int16... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep170 = add i32 %gep_int16... (idx: 0)        -569                          -369                          -209                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep170 = add i32 %gep_int16... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep170 = add i32 %gep_int16... (idx: 0) -> main_signed_add_32_0 (mux inputs: 59)
State: LEGUP_F_main_BB__180
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %187, i32* %188, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %187, i32* %188, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %187, i32* %188, a... (idx: 0)        -480                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %187, i32* %188, a... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %187, i32* %188, a... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 60)
State: LEGUP_F_main_BB__189
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %191 = load i32* %190, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %191 = load i32* %190, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
  %193 = load i32* %192, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %193 = load i32* %192, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %191 = load i32* %190, align... (idx: 0)        -495                          -5                            
  %193 = load i32* %192, align... (idx: 1)        -495                          -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %191 = load i32* %190, align... (idx: 0)        1                             0                             
  %193 = load i32* %192, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %191 = load i32* %190, align... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 61)
  %193 = load i32* %192, align... (idx: 1) -> main_main_0_reg_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB__189
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep176 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep176 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep176 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep176 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep176 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep176 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep176 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep176 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep176 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep179 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep179 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep179 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep179 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep179 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep179 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep179 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep179 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep179 = add i32 %gep_int17... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep176 = add i32 %gep_int17... (idx: 0)        -589                          -369                          -209                          90                            90                            90                            90                            90                            90                            
  %gep179 = add i32 %gep_int17... (idx: 1)        -589                          -369                          -209                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep176 = add i32 %gep_int17... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep179 = add i32 %gep_int17... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep176 = add i32 %gep_int17... (idx: 0) -> main_signed_add_32_0 (mux inputs: 61)
  %gep179 = add i32 %gep_int17... (idx: 1) -> main_signed_add_32_1 (mux inputs: 39)
State: LEGUP_F_main_BB__189
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %194 = add nsw i32 %193, %20 hey can share an input with another operation already assigned to main_signed_add_32_0
  %194 = add nsw i32 %193, %20 can share an output register with another operation already assigned to main_signed_add_32_0
  %194 = add nsw i32 %193, %20 can share an output register with another operation already assigned to main_signed_add_32_1
  %194 = add nsw i32 %193, %20 can share an output register with another operation already assigned to main_signed_add_32_2
  %194 = add nsw i32 %193, %20 can share an output register with another operation already assigned to main_signed_add_32_3
  %194 = add nsw i32 %193, %20 can share an output register with another operation already assigned to main_signed_add_32_4
  %194 = add nsw i32 %193, %20 can share an output register with another operation already assigned to main_signed_add_32_5
  %194 = add nsw i32 %193, %20 can share an output register with another operation already assigned to main_signed_add_32_6
  %194 = add nsw i32 %193, %20 can share an output register with another operation already assigned to main_signed_add_32_7
  %194 = add nsw i32 %193, %20 can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %194 = add nsw i32 %193, %20 (idx: 0)           -605                          -390                          -210                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %194 = add nsw i32 %193, %20 (idx: 0)           1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %194 = add nsw i32 %193, %20 (idx: 0) -> main_signed_add_32_0 (mux inputs: 62)
State: LEGUP_F_main_BB__189
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %191, i32* %197, a... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %191, i32* %197, a... (idx: 0)        -90                           -9                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %191, i32* %197, a... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %191, i32* %197, a... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 11)
State: LEGUP_F_main_BB__189
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep182 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep182 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep182 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep182 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep182 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep182 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep182 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep182 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep182 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep182 = add i32 %gep_int18... (idx: 0)        -619                          -389                          -209                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep182 = add i32 %gep_int18... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep182 = add i32 %gep_int18... (idx: 0) -> main_signed_add_32_0 (mux inputs: 64)
State: LEGUP_F_main_BB__198
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %sext4, i32* %199,... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %sext4, i32* %199,... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %sext4, i32* %199,... (idx: 0)        -510                          -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %sext4, i32* %199,... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %sext4, i32* %199,... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 63)
State: LEGUP_F_main_BB__198
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep185 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep185 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep185 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep185 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep185 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep185 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep185 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep185 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep185 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep185 = add i32 %gep_int18... (idx: 0)        -639                          -389                          -209                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep185 = add i32 %gep_int18... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep185 = add i32 %gep_int18... (idx: 0) -> main_signed_add_32_0 (mux inputs: 66)
State: LEGUP_F_main_BB__200
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %202 = load i32* %201, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %202 = load i32* %201, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
  %204 = load i32* %203, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %204 = load i32* %203, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %202 = load i32* %201, align... (idx: 0)        -525                          -15                           
  %204 = load i32* %203, align... (idx: 1)        -525                          -15                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %202 = load i32* %201, align... (idx: 0)        1                             0                             
  %204 = load i32* %203, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %202 = load i32* %201, align... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 64)
  %204 = load i32* %203, align... (idx: 1) -> main_main_0_reg_local_mem_dual_port_1 (mux inputs: 13)
State: LEGUP_F_main_BB__200
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep188 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep188 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep188 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep188 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep188 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep188 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep188 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep188 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep188 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep191 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep191 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep191 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep191 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep191 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep191 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep191 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep191 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep191 = add i32 %gep_int18... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep188 = add i32 %gep_int18... (idx: 0)        -659                          -389                          -209                          90                            90                            90                            90                            90                            90                            
  %gep191 = add i32 %gep_int18... (idx: 1)        -659                          -389                          -209                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep188 = add i32 %gep_int18... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep191 = add i32 %gep_int18... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep188 = add i32 %gep_int18... (idx: 0) -> main_signed_add_32_0 (mux inputs: 68)
  %gep191 = add i32 %gep_int18... (idx: 1) -> main_signed_add_32_1 (mux inputs: 41)
State: LEGUP_F_main_BB__206
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %208 = add nsw i32 %207, %pc... hey can share an input with another operation already assigned to main_signed_add_32_0
  %208 = add nsw i32 %207, %pc... can share an output register with another operation already assigned to main_signed_add_32_0
  %208 = add nsw i32 %207, %pc... can share an output register with another operation already assigned to main_signed_add_32_1
  %208 = add nsw i32 %207, %pc... can share an output register with another operation already assigned to main_signed_add_32_2
  %208 = add nsw i32 %207, %pc... can share an output register with another operation already assigned to main_signed_add_32_3
  %208 = add nsw i32 %207, %pc... can share an output register with another operation already assigned to main_signed_add_32_4
  %208 = add nsw i32 %207, %pc... can share an output register with another operation already assigned to main_signed_add_32_5
  %208 = add nsw i32 %207, %pc... can share an output register with another operation already assigned to main_signed_add_32_6
  %208 = add nsw i32 %207, %pc... can share an output register with another operation already assigned to main_signed_add_32_7
  %208 = add nsw i32 %207, %pc... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %208 = add nsw i32 %207, %pc... (idx: 0)        -675                          -409                          -208                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %208 = add nsw i32 %207, %pc... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %208 = add nsw i32 %207, %pc... (idx: 0) -> main_signed_add_32_0 (mux inputs: 69)
State: LEGUP_F_main_BB__209
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %211 = load i32* %210, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %211 = load i32* %210, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
  %213 = load i32* %212, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %213 = load i32* %212, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %211 = load i32* %210, align... (idx: 0)        -535                          -25                           
  %213 = load i32* %212, align... (idx: 1)        -535                          -25                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %211 = load i32* %210, align... (idx: 0)        1                             0                             
  %213 = load i32* %212, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %211 = load i32* %210, align... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 65)
  %213 = load i32* %212, align... (idx: 1) -> main_main_0_reg_local_mem_dual_port_1 (mux inputs: 14)
State: LEGUP_F_main_BB__209
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep194 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep194 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep194 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep194 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep194 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep194 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep194 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep194 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep194 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep197 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep197 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep197 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep197 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep197 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep197 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep197 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep197 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep197 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep194 = add i32 %gep_int19... (idx: 0)        -689                          -409                          -209                          90                            90                            90                            90                            90                            90                            
  %gep197 = add i32 %gep_int19... (idx: 1)        -689                          -409                          -209                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep194 = add i32 %gep_int19... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep197 = add i32 %gep_int19... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep194 = add i32 %gep_int19... (idx: 0) -> main_signed_add_32_0 (mux inputs: 71)
  %gep197 = add i32 %gep_int19... (idx: 1) -> main_signed_add_32_1 (mux inputs: 43)
State: LEGUP_F_main_BB__215
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %217 = add nsw i32 %216, %pc... hey can share an input with another operation already assigned to main_signed_add_32_0
  %217 = add nsw i32 %216, %pc... can share an output register with another operation already assigned to main_signed_add_32_0
  %217 = add nsw i32 %216, %pc... can share an output register with another operation already assigned to main_signed_add_32_1
  %217 = add nsw i32 %216, %pc... can share an output register with another operation already assigned to main_signed_add_32_2
  %217 = add nsw i32 %216, %pc... can share an output register with another operation already assigned to main_signed_add_32_3
  %217 = add nsw i32 %216, %pc... can share an output register with another operation already assigned to main_signed_add_32_4
  %217 = add nsw i32 %216, %pc... can share an output register with another operation already assigned to main_signed_add_32_5
  %217 = add nsw i32 %216, %pc... can share an output register with another operation already assigned to main_signed_add_32_6
  %217 = add nsw i32 %216, %pc... can share an output register with another operation already assigned to main_signed_add_32_7
  %217 = add nsw i32 %216, %pc... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %217 = add nsw i32 %216, %pc... (idx: 0)        -705                          -429                          -208                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %217 = add nsw i32 %216, %pc... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %217 = add nsw i32 %216, %pc... (idx: 0) -> main_signed_add_32_0 (mux inputs: 72)
State: LEGUP_F_main_BB__218
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %220 = load i32* %219, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %220 = load i32* %219, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %220 = load i32* %219, align... (idx: 0)        -545                          -35                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %220 = load i32* %219, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %220 = load i32* %219, align... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 66)
State: LEGUP_F_main_BB__218
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep200 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep200 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep200 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep200 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep200 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep200 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep200 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep200 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep200 = add i32 %gep_int19... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep200 = add i32 %gep_int19... (idx: 0)        -719                          -429                          -209                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep200 = add i32 %gep_int19... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep200 = add i32 %gep_int19... (idx: 0) -> main_signed_add_32_0 (mux inputs: 74)
State: LEGUP_F_main_BB__222
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %224 = add nsw i32 %223, %pc... hey can share an input with another operation already assigned to main_signed_add_32_0
  %224 = add nsw i32 %223, %pc... can share an output register with another operation already assigned to main_signed_add_32_0
  %224 = add nsw i32 %223, %pc... can share an output register with another operation already assigned to main_signed_add_32_1
  %224 = add nsw i32 %223, %pc... can share an output register with another operation already assigned to main_signed_add_32_2
  %224 = add nsw i32 %223, %pc... can share an output register with another operation already assigned to main_signed_add_32_3
  %224 = add nsw i32 %223, %pc... can share an output register with another operation already assigned to main_signed_add_32_4
  %224 = add nsw i32 %223, %pc... can share an output register with another operation already assigned to main_signed_add_32_5
  %224 = add nsw i32 %223, %pc... can share an output register with another operation already assigned to main_signed_add_32_6
  %224 = add nsw i32 %223, %pc... can share an output register with another operation already assigned to main_signed_add_32_7
  %224 = add nsw i32 %223, %pc... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %224 = add nsw i32 %223, %pc... (idx: 0)        -735                          -429                          -208                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %224 = add nsw i32 %223, %pc... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %224 = add nsw i32 %223, %pc... (idx: 0) -> main_signed_add_32_0 (mux inputs: 75)
State: LEGUP_F_main_BB__225
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %227 = load i32* %226, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %227 = load i32* %226, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %227 = load i32* %226, align... (idx: 0)        -555                          -35                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %227 = load i32* %226, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %227 = load i32* %226, align... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 67)
State: LEGUP_F_main_BB__225
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep203 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep203 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep203 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep203 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep203 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep203 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep203 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep203 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep203 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep206 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep206 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep206 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep206 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep206 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep206 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep206 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep206 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep206 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep203 = add i32 %gep_int20... (idx: 0)        -749                          -429                          -209                          90                            90                            90                            90                            90                            90                            
  %gep206 = add i32 %gep_int20... (idx: 1)        -749                          -429                          -209                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep203 = add i32 %gep_int20... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep206 = add i32 %gep_int20... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep203 = add i32 %gep_int20... (idx: 0) -> main_signed_add_32_0 (mux inputs: 77)
  %gep206 = add i32 %gep_int20... (idx: 1) -> main_signed_add_32_1 (mux inputs: 45)
State: LEGUP_F_main_BB__225
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %230, i32* %231, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %230, i32* %231, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %230, i32* %231, a... (idx: 0)        -570                          -40                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %230, i32* %231, a... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %230, i32* %231, a... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 69)
State: LEGUP_F_main_BB__232
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %234 = load i32* %233, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  %234 = load i32* %233, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %234 = load i32* %233, align... (idx: 0)        -585                          -35                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  %234 = load i32* %233, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %234 = load i32* %233, align... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 70)
State: LEGUP_F_main_BB__232
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep209 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep209 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep209 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep209 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep209 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep209 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep209 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep209 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep209 = add i32 %gep_int20... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep212 = add i32 %gep_int21... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep212 = add i32 %gep_int21... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep212 = add i32 %gep_int21... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep212 = add i32 %gep_int21... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep212 = add i32 %gep_int21... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep212 = add i32 %gep_int21... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep212 = add i32 %gep_int21... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep212 = add i32 %gep_int21... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep212 = add i32 %gep_int21... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep209 = add i32 %gep_int20... (idx: 0)        -769                          -449                          -209                          90                            90                            90                            90                            90                            90                            
  %gep212 = add i32 %gep_int21... (idx: 1)        -769                          -449                          -209                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %gep209 = add i32 %gep_int20... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep212 = add i32 %gep_int21... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep209 = add i32 %gep_int20... (idx: 0) -> main_signed_add_32_0 (mux inputs: 79)
  %gep212 = add i32 %gep_int21... (idx: 1) -> main_signed_add_32_1 (mux inputs: 47)
State: LEGUP_F_main_BB__232
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %237, i32* %238, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 %237, i32* %238, a... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %237, i32* %238, a... (idx: 0)        -600                          -40                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 %237, i32* %238, a... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %237, i32* %238, a... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 72)
State: LEGUP_F_main_BB_thread
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* %14, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 0, i32* %14, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 0, i32* %14, align... (idx: 0)        -615                          -35                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 0, i32* %14, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* %14, align... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 73)
State: LEGUP_F_main_BB_thread
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %239 = add nsw i32 %n_inst.0... can share an output register with another operation already assigned to main_signed_add_32_0
  %239 = add nsw i32 %n_inst.0... can share an output register with another operation already assigned to main_signed_add_32_1
  %239 = add nsw i32 %n_inst.0... can share an output register with another operation already assigned to main_signed_add_32_2
  %239 = add nsw i32 %n_inst.0... can share an output register with another operation already assigned to main_signed_add_32_3
  %239 = add nsw i32 %n_inst.0... can share an output register with another operation already assigned to main_signed_add_32_4
  %239 = add nsw i32 %n_inst.0... can share an output register with another operation already assigned to main_signed_add_32_5
  %239 = add nsw i32 %n_inst.0... can share an output register with another operation already assigned to main_signed_add_32_6
  %239 = add nsw i32 %n_inst.0... can share an output register with another operation already assigned to main_signed_add_32_7
  %239 = add nsw i32 %n_inst.0... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %239 = add nsw i32 %n_inst.0... (idx: 0)        -785                          -464                          -203                          95                            95                            95                            95                            95                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %239 = add nsw i32 %n_inst.0... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %239 = add nsw i32 %n_inst.0... (idx: 0) -> main_signed_add_32_0 (mux inputs: 80)
State: LEGUP_F_main_BB__240
Binding functional unit type: main_0_reg_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* %14, align... hey can share an input with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 0, i32* %14, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_0
  store i32 0, i32* %14, align... can share an output register with another operation already assigned to main_main_0_reg_local_mem_dual_port_1
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 0, i32* %14, align... (idx: 0)        -620                          -35                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_reg_local_mem_dual_port_0main_main_0_reg_local_mem_dual_port_1
  store i32 0, i32* %14, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* %14, align... (idx: 0) -> main_main_0_reg_local_mem_dual_port_0 (mux inputs: 73)
State: LEGUP_F_main_BB__240
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %241 = add nsw i32 %n_inst.0... can share an output register with another operation already assigned to main_signed_add_32_0
  %241 = add nsw i32 %n_inst.0... can share an output register with another operation already assigned to main_signed_add_32_1
  %241 = add nsw i32 %n_inst.0... can share an output register with another operation already assigned to main_signed_add_32_2
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %241 = add nsw i32 %n_inst.0... (idx: 0)        -795                          -464                          -203                          85                            85                            85                            85                            85                            85                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %241 = add nsw i32 %n_inst.0... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %241 = add nsw i32 %n_inst.0... (idx: 0) -> main_signed_add_32_0 (mux inputs: 81)
State: LEGUP_F_main_BB_loopexit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %246 = load i32* %6, align 4... hey can share an input with another operation already assigned to main_mem_dual_port_0
  %246 = load i32* %6, align 4... can share an output register with another operation already assigned to main_mem_dual_port_0
  %250 = load i32* %7, align 4... hey can share an input with another operation already assigned to main_mem_dual_port_0
  %250 = load i32* %7, align 4... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %246 = load i32* %6, align 4... (idx: 0)        -100                          -4                            
  %250 = load i32* %7, align 4... (idx: 1)        -100                          -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %246 = load i32* %6, align 4... (idx: 0)        1                             0                             
  %250 = load i32* %7, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %246 = load i32* %6, align 4... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 11)
  %250 = load i32* %7, align 4... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_main_BB_loopexit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %254 = load i32* %8, align 4... hey can share an input with another operation already assigned to main_mem_dual_port_0
  %254 = load i32* %8, align 4... can share an output register with another operation already assigned to main_mem_dual_port_0
  %254 = load i32* %8, align 4... can share an output register with another operation already assigned to main_mem_dual_port_1
  %258 = load i32* %9, align 4... hey can share an input with another operation already assigned to main_mem_dual_port_0
  %258 = load i32* %9, align 4... can share an output register with another operation already assigned to main_mem_dual_port_0
  %258 = load i32* %9, align 4... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %254 = load i32* %8, align 4... (idx: 0)        -100                          -4                            
  %258 = load i32* %9, align 4... (idx: 1)        -100                          -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %254 = load i32* %8, align 4... (idx: 0)        1                             0                             
  %258 = load i32* %9, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %254 = load i32* %8, align 4... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 11)
  %258 = load i32* %9, align 4... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_main_BB_loopexit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %262 = load i32* %10, align ... hey can share an input with another operation already assigned to main_mem_dual_port_0
  %262 = load i32* %10, align ... can share an output register with another operation already assigned to main_mem_dual_port_0
  %262 = load i32* %10, align ... can share an output register with another operation already assigned to main_mem_dual_port_1
  %266 = load i32* %11, align ... hey can share an input with another operation already assigned to main_mem_dual_port_0
  %266 = load i32* %11, align ... can share an output register with another operation already assigned to main_mem_dual_port_0
  %266 = load i32* %11, align ... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %262 = load i32* %10, align ... (idx: 0)        -100                          -14                           
  %266 = load i32* %11, align ... (idx: 1)        -100                          -15                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %262 = load i32* %10, align ... (idx: 0)        1                             0                             
  %266 = load i32* %11, align ... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %262 = load i32* %10, align ... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 11)
  %266 = load i32* %11, align ... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 3)
State: LEGUP_F_main_BB_loopexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %249 = add nsw i32 %248, %24... can share an output register with another operation already assigned to main_signed_add_32_0
  %249 = add nsw i32 %248, %24... can share an output register with another operation already assigned to main_signed_add_32_1
  %249 = add nsw i32 %248, %24... can share an output register with another operation already assigned to main_signed_add_32_2
  %249 = add nsw i32 %248, %24... can share an output register with another operation already assigned to main_signed_add_32_3
  %249 = add nsw i32 %248, %24... can share an output register with another operation already assigned to main_signed_add_32_4
  %249 = add nsw i32 %248, %24... can share an output register with another operation already assigned to main_signed_add_32_5
  %249 = add nsw i32 %248, %24... can share an output register with another operation already assigned to main_signed_add_32_6
  %249 = add nsw i32 %248, %24... can share an output register with another operation already assigned to main_signed_add_32_7
  %249 = add nsw i32 %248, %24... can share an output register with another operation already assigned to main_signed_add_32_8
  %253 = add nsw i32 %252, %24... can share an output register with another operation already assigned to main_signed_add_32_0
  %253 = add nsw i32 %252, %24... can share an output register with another operation already assigned to main_signed_add_32_1
  %253 = add nsw i32 %252, %24... can share an output register with another operation already assigned to main_signed_add_32_2
  %253 = add nsw i32 %252, %24... can share an output register with another operation already assigned to main_signed_add_32_3
  %253 = add nsw i32 %252, %24... can share an output register with another operation already assigned to main_signed_add_32_4
  %253 = add nsw i32 %252, %24... can share an output register with another operation already assigned to main_signed_add_32_5
  %253 = add nsw i32 %252, %24... can share an output register with another operation already assigned to main_signed_add_32_6
  %253 = add nsw i32 %252, %24... can share an output register with another operation already assigned to main_signed_add_32_7
  %253 = add nsw i32 %252, %24... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %249 = add nsw i32 %248, %24... (idx: 0)        -810                          -470                          -210                          90                            90                            90                            90                            90                            90                            
  %253 = add nsw i32 %252, %24... (idx: 1)        -810                          -470                          -209                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %249 = add nsw i32 %248, %24... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %253 = add nsw i32 %252, %24... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %249 = add nsw i32 %248, %24... (idx: 0) -> main_signed_add_32_0 (mux inputs: 83)
  %253 = add nsw i32 %252, %24... (idx: 1) -> main_signed_add_32_1 (mux inputs: 49)
State: LEGUP_F_main_BB_loopexit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %270 = load i32* %12, align ... hey can share an input with another operation already assigned to main_mem_dual_port_0
  %270 = load i32* %12, align ... can share an output register with another operation already assigned to main_mem_dual_port_0
  %270 = load i32* %12, align ... can share an output register with another operation already assigned to main_mem_dual_port_1
  %274 = load i32* %13, align ... hey can share an input with another operation already assigned to main_mem_dual_port_0
  %274 = load i32* %13, align ... can share an output register with another operation already assigned to main_mem_dual_port_0
  %274 = load i32* %13, align ... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %270 = load i32* %12, align ... (idx: 0)        -100                          -24                           
  %274 = load i32* %13, align ... (idx: 1)        -100                          -25                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %270 = load i32* %12, align ... (idx: 0)        1                             0                             
  %274 = load i32* %13, align ... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %270 = load i32* %12, align ... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 11)
  %274 = load i32* %13, align ... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 4)
State: LEGUP_F_main_BB_loopexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %257 = add nsw i32 %256, %25... can share an output register with another operation already assigned to main_signed_add_32_0
  %257 = add nsw i32 %256, %25... can share an output register with another operation already assigned to main_signed_add_32_1
  %257 = add nsw i32 %256, %25... can share an output register with another operation already assigned to main_signed_add_32_2
  %257 = add nsw i32 %256, %25... can share an output register with another operation already assigned to main_signed_add_32_3
  %257 = add nsw i32 %256, %25... can share an output register with another operation already assigned to main_signed_add_32_4
  %257 = add nsw i32 %256, %25... can share an output register with another operation already assigned to main_signed_add_32_5
  %257 = add nsw i32 %256, %25... can share an output register with another operation already assigned to main_signed_add_32_6
  %257 = add nsw i32 %256, %25... can share an output register with another operation already assigned to main_signed_add_32_7
  %257 = add nsw i32 %256, %25... can share an output register with another operation already assigned to main_signed_add_32_8
  %261 = add nsw i32 %260, %25... can share an output register with another operation already assigned to main_signed_add_32_0
  %261 = add nsw i32 %260, %25... can share an output register with another operation already assigned to main_signed_add_32_1
  %261 = add nsw i32 %260, %25... can share an output register with another operation already assigned to main_signed_add_32_2
  %261 = add nsw i32 %260, %25... can share an output register with another operation already assigned to main_signed_add_32_3
  %261 = add nsw i32 %260, %25... can share an output register with another operation already assigned to main_signed_add_32_4
  %261 = add nsw i32 %260, %25... can share an output register with another operation already assigned to main_signed_add_32_5
  %261 = add nsw i32 %260, %25... can share an output register with another operation already assigned to main_signed_add_32_6
  %261 = add nsw i32 %260, %25... can share an output register with another operation already assigned to main_signed_add_32_7
  %261 = add nsw i32 %260, %25... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %257 = add nsw i32 %256, %25... (idx: 0)        -830                          -490                          -209                          90                            90                            90                            90                            90                            90                            
  %261 = add nsw i32 %260, %25... (idx: 1)        -830                          -490                          -209                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %257 = add nsw i32 %256, %25... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %261 = add nsw i32 %260, %25... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %257 = add nsw i32 %256, %25... (idx: 0) -> main_signed_add_32_0 (mux inputs: 85)
  %261 = add nsw i32 %260, %25... (idx: 1) -> main_signed_add_32_1 (mux inputs: 51)
State: LEGUP_F_main_BB_loopexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %265 = add nsw i32 %264, %26... can share an output register with another operation already assigned to main_signed_add_32_0
  %265 = add nsw i32 %264, %26... can share an output register with another operation already assigned to main_signed_add_32_1
  %265 = add nsw i32 %264, %26... can share an output register with another operation already assigned to main_signed_add_32_2
  %265 = add nsw i32 %264, %26... can share an output register with another operation already assigned to main_signed_add_32_3
  %265 = add nsw i32 %264, %26... can share an output register with another operation already assigned to main_signed_add_32_4
  %265 = add nsw i32 %264, %26... can share an output register with another operation already assigned to main_signed_add_32_5
  %265 = add nsw i32 %264, %26... can share an output register with another operation already assigned to main_signed_add_32_6
  %265 = add nsw i32 %264, %26... can share an output register with another operation already assigned to main_signed_add_32_7
  %265 = add nsw i32 %264, %26... can share an output register with another operation already assigned to main_signed_add_32_8
  %269 = add nsw i32 %268, %26... can share an output register with another operation already assigned to main_signed_add_32_0
  %269 = add nsw i32 %268, %26... can share an output register with another operation already assigned to main_signed_add_32_1
  %269 = add nsw i32 %268, %26... can share an output register with another operation already assigned to main_signed_add_32_2
  %269 = add nsw i32 %268, %26... can share an output register with another operation already assigned to main_signed_add_32_3
  %269 = add nsw i32 %268, %26... can share an output register with another operation already assigned to main_signed_add_32_4
  %269 = add nsw i32 %268, %26... can share an output register with another operation already assigned to main_signed_add_32_5
  %269 = add nsw i32 %268, %26... can share an output register with another operation already assigned to main_signed_add_32_6
  %269 = add nsw i32 %268, %26... can share an output register with another operation already assigned to main_signed_add_32_7
  %269 = add nsw i32 %268, %26... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %265 = add nsw i32 %264, %26... (idx: 0)        -850                          -510                          -209                          90                            90                            90                            90                            90                            90                            
  %269 = add nsw i32 %268, %26... (idx: 1)        -850                          -510                          -209                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %265 = add nsw i32 %264, %26... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %269 = add nsw i32 %268, %26... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %265 = add nsw i32 %264, %26... (idx: 0) -> main_signed_add_32_0 (mux inputs: 87)
  %269 = add nsw i32 %268, %26... (idx: 1) -> main_signed_add_32_1 (mux inputs: 53)
State: LEGUP_F_main_BB_loopexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %273 = add nsw i32 %272, %26... can share an output register with another operation already assigned to main_signed_add_32_0
  %273 = add nsw i32 %272, %26... can share an output register with another operation already assigned to main_signed_add_32_1
  %273 = add nsw i32 %272, %26... can share an output register with another operation already assigned to main_signed_add_32_2
  %273 = add nsw i32 %272, %26... can share an output register with another operation already assigned to main_signed_add_32_3
  %273 = add nsw i32 %272, %26... can share an output register with another operation already assigned to main_signed_add_32_4
  %273 = add nsw i32 %272, %26... can share an output register with another operation already assigned to main_signed_add_32_5
  %273 = add nsw i32 %272, %26... can share an output register with another operation already assigned to main_signed_add_32_6
  %273 = add nsw i32 %272, %26... can share an output register with another operation already assigned to main_signed_add_32_7
  %273 = add nsw i32 %272, %26... can share an output register with another operation already assigned to main_signed_add_32_8
  %277 = add nsw i32 %276, %27... can share an output register with another operation already assigned to main_signed_add_32_0
  %277 = add nsw i32 %276, %27... can share an output register with another operation already assigned to main_signed_add_32_1
  %277 = add nsw i32 %276, %27... can share an output register with another operation already assigned to main_signed_add_32_2
  %277 = add nsw i32 %276, %27... can share an output register with another operation already assigned to main_signed_add_32_3
  %277 = add nsw i32 %276, %27... can share an output register with another operation already assigned to main_signed_add_32_4
  %277 = add nsw i32 %276, %27... can share an output register with another operation already assigned to main_signed_add_32_5
  %277 = add nsw i32 %276, %27... can share an output register with another operation already assigned to main_signed_add_32_6
  %277 = add nsw i32 %276, %27... can share an output register with another operation already assigned to main_signed_add_32_7
  %277 = add nsw i32 %276, %27... can share an output register with another operation already assigned to main_signed_add_32_8
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %273 = add nsw i32 %272, %26... (idx: 0)        -870                          -530                          -209                          90                            90                            90                            90                            90                            90                            
  %277 = add nsw i32 %276, %27... (idx: 1)        -870                          -530                          -209                          90                            90                            90                            90                            90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          
  %273 = add nsw i32 %272, %26... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %277 = add nsw i32 %276, %27... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %273 = add nsw i32 %272, %26... (idx: 0) -> main_signed_add_32_0 (mux inputs: 89)
  %277 = add nsw i32 %276, %27... (idx: 1) -> main_signed_add_32_1 (mux inputs: 55)


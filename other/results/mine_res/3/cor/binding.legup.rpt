//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Fri Feb 15 15:10:46 2019
//----------------------------------------------------------------------------//

--------------------------------------------------------------------------------
Function: main
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 2                             
signed_add_32                 3                             
signed_multiply_32            3                             
signed_subtract_32            1                             

Running Bipartite Weighted Matching on function: main
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
dis   %1 = load i32* getelementptr inbounds ([3 x i32]* @inData, i32 0, i32 0), align 4   and  mem_dual_port_0    = 1
dis   %1 = load i32* getelementptr inbounds ([3 x i32]* @inData, i32 0, i32 0), align 4   and  mem_dual_port_1    = 100
dis   %2 = load i32* getelementptr inbounds ([3 x i32]* @inData, i32 0, i32 1), align 4   and  mem_dual_port_0    = 1
dis   %2 = load i32* getelementptr inbounds ([3 x i32]* @inData, i32 0, i32 1), align 4   and  mem_dual_port_1    = 100
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %1 = load i32* getelementptr... (idx: 0)        1                             100                           
  %2 = load i32* getelementptr... (idx: 1)        1                             100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %1 = load i32* getelementptr... (idx: 0)        1                             0                             
  %2 = load i32* getelementptr... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %1 = load i32* getelementptr... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  %2 = load i32* getelementptr... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
dis   %3 = load i32* getelementptr inbounds ([3 x i32]* @inData, i32 0, i32 2), align 4   and  mem_dual_port_0    = 1
dis   %3 = load i32* getelementptr inbounds ([3 x i32]* @inData, i32 0, i32 2), align 4   and  mem_dual_port_1    = 100
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %3 = load i32* getelementptr... (idx: 0)        1                             100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %3 = load i32* getelementptr... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %3 = load i32* getelementptr... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
dis   %4 = mul nsw i32 %1, %2   and  signed_multiply_32_0    = 0
dis   %4 = mul nsw i32 %1, %2   and  signed_multiply_32_1    = 0
dis   %4 = mul nsw i32 %1, %2   and  signed_multiply_32_2    = 0
dis   %8 = mul nsw i32 %1, %2   and  signed_multiply_32_0    = 0
dis   %8 = mul nsw i32 %1, %2   and  signed_multiply_32_1    = 0
dis   %8 = mul nsw i32 %1, %2   and  signed_multiply_32_2    = 0
dis   %11 = mul nsw i32 %1, %1   and  signed_multiply_32_0    = 0
dis   %11 = mul nsw i32 %1, %1   and  signed_multiply_32_1    = 0
dis   %11 = mul nsw i32 %1, %1   and  signed_multiply_32_2    = 0
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     
  %4 = mul nsw i32 %1, %2 (idx: 0)                0                             0                             0                             
  %8 = mul nsw i32 %1, %2 (idx: 1)                0                             0                             0                             
  %11 = mul nsw i32 %1, %1 (idx: 2)               0                             0                             0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     
  %4 = mul nsw i32 %1, %2 (idx: 0)                1                             0                             0                             
  %8 = mul nsw i32 %1, %2 (idx: 1)                0                             1                             0                             
  %11 = mul nsw i32 %1, %1 (idx: 2)               0                             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %4 = mul nsw i32 %1, %2 (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 2)
  %8 = mul nsw i32 %1, %2 (idx: 1) -> main_signed_multiply_32_1 (mux inputs: 2)
  %11 = mul nsw i32 %1, %1 (idx: 2) -> main_signed_multiply_32_2 (mux inputs: 1)
State: LEGUP_F_main_BB__0
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
dis   %5 = add nsw i32 %4, %3   and  signed_add_32_0    = 0
dis   %5 = add nsw i32 %4, %3   and  signed_add_32_1    = 1
dis   %5 = add nsw i32 %4, %3   and  signed_add_32_2    = 0
dis   %6 = add nsw i32 %5, %1   and  signed_add_32_0    = 0
dis   %6 = add nsw i32 %5, %1   and  signed_add_32_1    = 0
dis   %6 = add nsw i32 %5, %1   and  signed_add_32_2    = 0
dis   %7 = add nsw i32 %6, %2   and  signed_add_32_0    = 0
dis   %7 = add nsw i32 %6, %2   and  signed_add_32_1    = 0
dis   %7 = add nsw i32 %6, %2   and  signed_add_32_2    = 0
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          
  %5 = add nsw i32 %4, %3 (idx: 0)                0                             1                             0                             
  %6 = add nsw i32 %5, %1 (idx: 1)                0                             0                             0                             
  %7 = add nsw i32 %6, %2 (idx: 2)                0                             0                             0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          
  %5 = add nsw i32 %4, %3 (idx: 0)                1                             0                             0                             
  %6 = add nsw i32 %5, %1 (idx: 1)                0                             1                             0                             
  %7 = add nsw i32 %6, %2 (idx: 2)                0                             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %5 = add nsw i32 %4, %3 (idx: 0) -> main_signed_add_32_0 (mux inputs: 2)
  %6 = add nsw i32 %5, %1 (idx: 1) -> main_signed_add_32_1 (mux inputs: 2)
  %7 = add nsw i32 %6, %2 (idx: 2) -> main_signed_add_32_2 (mux inputs: 2)
State: LEGUP_F_main_BB__0
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
dis   %9 = mul nsw i32 %8, %3   and  signed_multiply_32_0    = 1
  %9 = mul nsw i32 %8, %3 can share an output register with another operation already assigned to main_signed_multiply_32_0
dis   %9 = mul nsw i32 %8, %3   and  signed_multiply_32_1    = 0
dis   %9 = mul nsw i32 %8, %3   and  signed_multiply_32_2    = 1
dis   %13 = mul nsw i32 %3, %3   and  signed_multiply_32_0    = 0
  %13 = mul nsw i32 %3, %3 can share an output register with another operation already assigned to main_signed_multiply_32_0
dis   %13 = mul nsw i32 %3, %3   and  signed_multiply_32_1    = 0
dis   %13 = mul nsw i32 %3, %3   and  signed_multiply_32_2    = 0
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     
  %9 = mul nsw i32 %8, %3 (idx: 0)                1                             0                             1                             
  %13 = mul nsw i32 %3, %3 (idx: 1)               0                             0                             0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     
  %9 = mul nsw i32 %8, %3 (idx: 0)                0                             1                             0                             
  %13 = mul nsw i32 %3, %3 (idx: 1)               1                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %13 = mul nsw i32 %3, %3 (idx: 1) -> main_signed_multiply_32_0 (mux inputs: 3)
  %9 = mul nsw i32 %8, %3 (idx: 0) -> main_signed_multiply_32_1 (mux inputs: 4)
State: LEGUP_F_main_BB__0
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
dis   %12 = add nsw i32 %10, %11   and  signed_add_32_0    = 1
  %12 = add nsw i32 %10, %11 can share an output register with another operation already assigned to main_signed_add_32_0
dis   %12 = add nsw i32 %10, %11   and  signed_add_32_1    = 2
  %12 = add nsw i32 %10, %11 can share an output register with another operation already assigned to main_signed_add_32_1
dis   %12 = add nsw i32 %10, %11   and  signed_add_32_2    = 0
dis   %14 = add nsw i32 %12, %13   and  signed_add_32_0    = 0
dis   %14 = add nsw i32 %12, %13   and  signed_add_32_1    = 1
dis   %14 = add nsw i32 %12, %13   and  signed_add_32_2    = 0
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          
  %12 = add nsw i32 %10, %11 (idx: 0)             1                             2                             0                             
  %14 = add nsw i32 %12, %13 (idx: 1)             0                             1                             0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          
  %12 = add nsw i32 %10, %11 (idx: 0)             0                             0                             1                             
  %14 = add nsw i32 %12, %13 (idx: 1)             1                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %14 = add nsw i32 %12, %13 (idx: 1) -> main_signed_add_32_0 (mux inputs: 4)
  %12 = add nsw i32 %10, %11 (idx: 0) -> main_signed_add_32_2 (mux inputs: 4)
State: LEGUP_F_main_BB__0
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
dis   %10 = sub nsw i32 %7, %9   and  signed_subtract_32_0    = 0
                                                  main_signed_subtract_32_0     
  %10 = sub nsw i32 %7, %9 (idx: 0)               0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %10 = sub nsw i32 %7, %9 (idx: 0)               1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %10 = sub nsw i32 %7, %9 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 2)


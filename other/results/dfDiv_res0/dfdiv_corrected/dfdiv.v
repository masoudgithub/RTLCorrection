//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Mon Apr  1 09:27:40 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 4
`define MEMORY_CONTROLLER_TAG_SIZE 9

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	return_val
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_main_BB__1_1 = 8'd1;
parameter [7:0] LEGUP_F_main_BB__1_2 = 8'd2;
parameter [7:0] LEGUP_F_main_BB__1_3 = 8'd3;
parameter [7:0] LEGUP_F_main_BB__15_4 = 8'd4;
parameter [7:0] LEGUP_F_main_BB__17_5 = 8'd5;
parameter [7:0] LEGUP_F_main_BB__20_6 = 8'd6;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i18i_7 = 8'd7;
parameter [7:0] LEGUP_F_main_BB__28_8 = 8'd8;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexiti19i_9 = 8'd9;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexiti19i_10 = 8'd10;
parameter [7:0] LEGUP_F_main_BB__34_11 = 8'd11;
parameter [7:0] LEGUP_F_main_BB__36_12 = 8'd12;
parameter [7:0] LEGUP_F_main_BB__38_13 = 8'd13;
parameter [7:0] LEGUP_F_main_BB__41_14 = 8'd14;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_15 = 8'd15;
parameter [7:0] LEGUP_F_main_BB__49_16 = 8'd16;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexiti12i_17 = 8'd17;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexiti12i_18 = 8'd18;
parameter [7:0] LEGUP_F_main_BB__55_19 = 8'd19;
parameter [7:0] LEGUP_F_main_BB__57_20 = 8'd20;
parameter [7:0] LEGUP_F_main_BB__60_21 = 8'd21;
parameter [7:0] LEGUP_F_main_BB__61_22 = 8'd22;
parameter [7:0] LEGUP_F_main_BB__63_23 = 8'd23;
parameter [7:0] LEGUP_F_main_BB__66_24 = 8'd24;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_25 = 8'd25;
parameter [7:0] LEGUP_F_main_BB__74_26 = 8'd26;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexitii_27 = 8'd27;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexitii_28 = 8'd28;
parameter [7:0] LEGUP_F_main_BB__80_29 = 8'd29;
parameter [7:0] LEGUP_F_main_BB__82_30 = 8'd30;
parameter [7:0] LEGUP_F_main_BB__84_31 = 8'd31;
parameter [7:0] LEGUP_F_main_BB__88_32 = 8'd32;
parameter [7:0] LEGUP_F_main_BB__90_33 = 8'd33;
parameter [7:0] LEGUP_F_main_BB__94_34 = 8'd34;
parameter [7:0] LEGUP_F_main_BB__100_35 = 8'd35;
parameter [7:0] LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_36 = 8'd36;
parameter [7:0] LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_37 = 8'd37;
parameter [7:0] LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_38 = 8'd38;
parameter [7:0] LEGUP_F_main_BB__112_39 = 8'd39;
parameter [7:0] LEGUP_F_main_BB__116_40 = 8'd40;
parameter [7:0] LEGUP_F_main_BB__118_41 = 8'd41;
parameter [7:0] LEGUP_F_main_BB__120_42 = 8'd42;
parameter [7:0] LEGUP_F_main_BB__126_43 = 8'd43;
parameter [7:0] LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_44 = 8'd44;
parameter [7:0] LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_45 = 8'd45;
parameter [7:0] LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_46 = 8'd46;
parameter [7:0] LEGUP_F_main_BB__138_47 = 8'd47;
parameter [7:0] LEGUP_F_main_BB__149_48 = 8'd48;
parameter [7:0] LEGUP_F_main_BB__152_49 = 8'd49;
parameter [7:0] LEGUP_F_main_BB__155_50 = 8'd50;
parameter [7:0] LEGUP_F_main_BB__159_51 = 8'd51;
parameter [7:0] LEGUP_F_main_BB__159_52 = 8'd52;
parameter [7:0] LEGUP_F_main_BB__159_53 = 8'd53;
parameter [7:0] LEGUP_F_main_BB__159_54 = 8'd54;
parameter [7:0] LEGUP_F_main_BB__159_55 = 8'd55;
parameter [7:0] LEGUP_F_main_BB__159_56 = 8'd56;
parameter [7:0] LEGUP_F_main_BB__159_57 = 8'd57;
parameter [7:0] LEGUP_F_main_BB__159_58 = 8'd58;
parameter [7:0] LEGUP_F_main_BB__159_59 = 8'd59;
parameter [7:0] LEGUP_F_main_BB__159_60 = 8'd60;
parameter [7:0] LEGUP_F_main_BB__159_61 = 8'd61;
parameter [7:0] LEGUP_F_main_BB__159_62 = 8'd62;
parameter [7:0] LEGUP_F_main_BB__159_63 = 8'd63;
parameter [7:0] LEGUP_F_main_BB__159_64 = 8'd64;
parameter [7:0] LEGUP_F_main_BB__159_65 = 8'd65;
parameter [7:0] LEGUP_F_main_BB__159_66 = 8'd66;
parameter [7:0] LEGUP_F_main_BB__159_67 = 8'd67;
parameter [7:0] LEGUP_F_main_BB__159_68 = 8'd68;
parameter [7:0] LEGUP_F_main_BB__159_69 = 8'd69;
parameter [7:0] LEGUP_F_main_BB__159_70 = 8'd70;
parameter [7:0] LEGUP_F_main_BB__159_71 = 8'd71;
parameter [7:0] LEGUP_F_main_BB__159_72 = 8'd72;
parameter [7:0] LEGUP_F_main_BB__159_73 = 8'd73;
parameter [7:0] LEGUP_F_main_BB__159_74 = 8'd74;
parameter [7:0] LEGUP_F_main_BB__159_75 = 8'd75;
parameter [7:0] LEGUP_F_main_BB__159_76 = 8'd76;
parameter [7:0] LEGUP_F_main_BB__159_77 = 8'd77;
parameter [7:0] LEGUP_F_main_BB__159_78 = 8'd78;
parameter [7:0] LEGUP_F_main_BB__159_79 = 8'd79;
parameter [7:0] LEGUP_F_main_BB__159_80 = 8'd80;
parameter [7:0] LEGUP_F_main_BB__159_81 = 8'd81;
parameter [7:0] LEGUP_F_main_BB__159_82 = 8'd82;
parameter [7:0] LEGUP_F_main_BB__159_83 = 8'd83;
parameter [7:0] LEGUP_F_main_BB__159_84 = 8'd84;
parameter [7:0] LEGUP_F_main_BB__159_85 = 8'd85;
parameter [7:0] LEGUP_F_main_BB__159_86 = 8'd86;
parameter [7:0] LEGUP_F_main_BB__159_87 = 8'd87;
parameter [7:0] LEGUP_F_main_BB__159_88 = 8'd88;
parameter [7:0] LEGUP_F_main_BB__159_89 = 8'd89;
parameter [7:0] LEGUP_F_main_BB__159_90 = 8'd90;
parameter [7:0] LEGUP_F_main_BB__159_91 = 8'd91;
parameter [7:0] LEGUP_F_main_BB__159_92 = 8'd92;
parameter [7:0] LEGUP_F_main_BB__159_93 = 8'd93;
parameter [7:0] LEGUP_F_main_BB__159_94 = 8'd94;
parameter [7:0] LEGUP_F_main_BB__159_95 = 8'd95;
parameter [7:0] LEGUP_F_main_BB__159_96 = 8'd96;
parameter [7:0] LEGUP_F_main_BB__159_97 = 8'd97;
parameter [7:0] LEGUP_F_main_BB__159_98 = 8'd98;
parameter [7:0] LEGUP_F_main_BB__159_99 = 8'd99;
parameter [7:0] LEGUP_F_main_BB__159_100 = 8'd100;
parameter [7:0] LEGUP_F_main_BB__159_101 = 8'd101;
parameter [7:0] LEGUP_F_main_BB__159_102 = 8'd102;
parameter [7:0] LEGUP_F_main_BB__159_103 = 8'd103;
parameter [7:0] LEGUP_F_main_BB__159_104 = 8'd104;
parameter [7:0] LEGUP_F_main_BB__159_105 = 8'd105;
parameter [7:0] LEGUP_F_main_BB__159_106 = 8'd106;
parameter [7:0] LEGUP_F_main_BB__159_107 = 8'd107;
parameter [7:0] LEGUP_F_main_BB__159_108 = 8'd108;
parameter [7:0] LEGUP_F_main_BB__159_109 = 8'd109;
parameter [7:0] LEGUP_F_main_BB__159_110 = 8'd110;
parameter [7:0] LEGUP_F_main_BB__159_111 = 8'd111;
parameter [7:0] LEGUP_F_main_BB__159_112 = 8'd112;
parameter [7:0] LEGUP_F_main_BB__159_113 = 8'd113;
parameter [7:0] LEGUP_F_main_BB__159_114 = 8'd114;
parameter [7:0] LEGUP_F_main_BB__159_115 = 8'd115;
parameter [7:0] LEGUP_F_main_BB__162_116 = 8'd116;
parameter [7:0] LEGUP_F_main_BB__162_117 = 8'd117;
parameter [7:0] LEGUP_F_main_BB_lrphii_118 = 8'd118;
parameter [7:0] LEGUP_F_main_BB__176_119 = 8'd119;
parameter [7:0] LEGUP_F_main_BB__176_120 = 8'd120;
parameter [7:0] LEGUP_F_main_BB__crit_edgeii_121 = 8'd121;
parameter [7:0] LEGUP_F_main_BB__188_122 = 8'd122;
parameter [7:0] LEGUP_F_main_BB__188_123 = 8'd123;
parameter [7:0] LEGUP_F_main_BB__188_124 = 8'd124;
parameter [7:0] LEGUP_F_main_BB__188_125 = 8'd125;
parameter [7:0] LEGUP_F_main_BB__188_126 = 8'd126;
parameter [7:0] LEGUP_F_main_BB__188_127 = 8'd127;
parameter [7:0] LEGUP_F_main_BB__188_128 = 8'd128;
parameter [7:0] LEGUP_F_main_BB__188_129 = 8'd129;
parameter [7:0] LEGUP_F_main_BB__188_130 = 8'd130;
parameter [7:0] LEGUP_F_main_BB__188_131 = 8'd131;
parameter [7:0] LEGUP_F_main_BB__188_132 = 8'd132;
parameter [7:0] LEGUP_F_main_BB__188_133 = 8'd133;
parameter [7:0] LEGUP_F_main_BB__188_134 = 8'd134;
parameter [7:0] LEGUP_F_main_BB__188_135 = 8'd135;
parameter [7:0] LEGUP_F_main_BB__188_136 = 8'd136;
parameter [7:0] LEGUP_F_main_BB__188_137 = 8'd137;
parameter [7:0] LEGUP_F_main_BB__188_138 = 8'd138;
parameter [7:0] LEGUP_F_main_BB__188_139 = 8'd139;
parameter [7:0] LEGUP_F_main_BB__188_140 = 8'd140;
parameter [7:0] LEGUP_F_main_BB__188_141 = 8'd141;
parameter [7:0] LEGUP_F_main_BB__188_142 = 8'd142;
parameter [7:0] LEGUP_F_main_BB__188_143 = 8'd143;
parameter [7:0] LEGUP_F_main_BB__188_144 = 8'd144;
parameter [7:0] LEGUP_F_main_BB__188_145 = 8'd145;
parameter [7:0] LEGUP_F_main_BB__188_146 = 8'd146;
parameter [7:0] LEGUP_F_main_BB__188_147 = 8'd147;
parameter [7:0] LEGUP_F_main_BB__188_148 = 8'd148;
parameter [7:0] LEGUP_F_main_BB__188_149 = 8'd149;
parameter [7:0] LEGUP_F_main_BB__188_150 = 8'd150;
parameter [7:0] LEGUP_F_main_BB__188_151 = 8'd151;
parameter [7:0] LEGUP_F_main_BB__188_152 = 8'd152;
parameter [7:0] LEGUP_F_main_BB__188_153 = 8'd153;
parameter [7:0] LEGUP_F_main_BB__188_154 = 8'd154;
parameter [7:0] LEGUP_F_main_BB__188_155 = 8'd155;
parameter [7:0] LEGUP_F_main_BB__188_156 = 8'd156;
parameter [7:0] LEGUP_F_main_BB__188_157 = 8'd157;
parameter [7:0] LEGUP_F_main_BB__188_158 = 8'd158;
parameter [7:0] LEGUP_F_main_BB__188_159 = 8'd159;
parameter [7:0] LEGUP_F_main_BB__188_160 = 8'd160;
parameter [7:0] LEGUP_F_main_BB__188_161 = 8'd161;
parameter [7:0] LEGUP_F_main_BB__188_162 = 8'd162;
parameter [7:0] LEGUP_F_main_BB__188_163 = 8'd163;
parameter [7:0] LEGUP_F_main_BB__188_164 = 8'd164;
parameter [7:0] LEGUP_F_main_BB__188_165 = 8'd165;
parameter [7:0] LEGUP_F_main_BB__188_166 = 8'd166;
parameter [7:0] LEGUP_F_main_BB__188_167 = 8'd167;
parameter [7:0] LEGUP_F_main_BB__188_168 = 8'd168;
parameter [7:0] LEGUP_F_main_BB__188_169 = 8'd169;
parameter [7:0] LEGUP_F_main_BB__188_170 = 8'd170;
parameter [7:0] LEGUP_F_main_BB__188_171 = 8'd171;
parameter [7:0] LEGUP_F_main_BB__188_172 = 8'd172;
parameter [7:0] LEGUP_F_main_BB__188_173 = 8'd173;
parameter [7:0] LEGUP_F_main_BB__188_174 = 8'd174;
parameter [7:0] LEGUP_F_main_BB__188_175 = 8'd175;
parameter [7:0] LEGUP_F_main_BB__188_176 = 8'd176;
parameter [7:0] LEGUP_F_main_BB__188_177 = 8'd177;
parameter [7:0] LEGUP_F_main_BB__188_178 = 8'd178;
parameter [7:0] LEGUP_F_main_BB__188_179 = 8'd179;
parameter [7:0] LEGUP_F_main_BB__188_180 = 8'd180;
parameter [7:0] LEGUP_F_main_BB__188_181 = 8'd181;
parameter [7:0] LEGUP_F_main_BB__188_182 = 8'd182;
parameter [7:0] LEGUP_F_main_BB__188_183 = 8'd183;
parameter [7:0] LEGUP_F_main_BB__188_184 = 8'd184;
parameter [7:0] LEGUP_F_main_BB__188_185 = 8'd185;
parameter [7:0] LEGUP_F_main_BB__188_186 = 8'd186;
parameter [7:0] LEGUP_F_main_BB_estimateDiv128To64exiti_187 = 8'd187;
parameter [7:0] LEGUP_F_main_BB__194_188 = 8'd188;
parameter [7:0] LEGUP_F_main_BB__194_189 = 8'd189;
parameter [7:0] LEGUP_F_main_BB__194_190 = 8'd190;
parameter [7:0] LEGUP_F_main_BB__194_191 = 8'd191;
parameter [7:0] LEGUP_F_main_BB_lrphipreheader_192 = 8'd192;
parameter [7:0] LEGUP_F_main_BB_lrphi_193 = 8'd193;
parameter [7:0] LEGUP_F_main_BB_lrphi_194 = 8'd194;
parameter [7:0] LEGUP_F_main_BB__crit_edgei_195 = 8'd195;
parameter [7:0] LEGUP_F_main_BB_estimateDiv128To64exitthreadi_196 = 8'd196;
parameter [7:0] LEGUP_F_main_BB__224_197 = 8'd197;
parameter [7:0] LEGUP_F_main_BB__227_198 = 8'd198;
parameter [7:0] LEGUP_F_main_BB__229_199 = 8'd199;
parameter [7:0] LEGUP_F_main_BB__238_200 = 8'd200;
parameter [7:0] LEGUP_F_main_BB_shift64RightJammingexitii_201 = 8'd201;
parameter [7:0] LEGUP_F_main_BB__243_202 = 8'd202;
parameter [7:0] LEGUP_F_main_BB__245_203 = 8'd203;
parameter [7:0] LEGUP_F_main_BB_roundAndPackFloat64exiti_204 = 8'd204;
parameter [7:0] LEGUP_F_main_BB_float64_divexit_205 = 8'd205;
parameter [7:0] LEGUP_F_main_BB_float64_divexit_206 = 8'd206;
parameter [7:0] LEGUP_F_main_BB_float64_divexit_207 = 8'd207;
parameter [7:0] LEGUP_F_main_BB__268_208 = 8'd208;
parameter [7:0] LEGUP_F_main_BB__271_209 = 8'd209;
parameter [7:0] LEGUP_F_main_BB__273_210 = 8'd210;
parameter [7:0] LEGUP_F_main_BB__275_211 = 8'd211;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [31:0] main_1_float_exception_flags0;
reg [31:0] main_1_float_exception_flags0_reg;
reg [31:0] main_1_main_result02;
reg [31:0] main_1_main_result02_reg;
reg [31:0] main_1_i01;
reg [31:0] main_1_i01_reg;
reg [31:0] main_1_gep_int;
reg [31:0] main_1_gep_int_reg;
reg [31:0] main_1_gep_array;
reg [31:0] main_1_gep_array_reg;
reg [31:0] main_1_gep;
reg [31:0] main_1_gep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_2_reg;
reg [63:0] main_1_3;
reg [63:0] main_1_3_reg;
reg [31:0] main_1_gep_int1;
reg [31:0] main_1_gep_int1_reg;
reg [31:0] main_1_gep_array2;
reg [31:0] main_1_gep_array2_reg;
reg [31:0] main_1_gep3;
reg [31:0] main_1_gep3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_4_reg;
reg [63:0] main_1_5;
reg [63:0] main_1_5_reg;
reg [63:0] main_1_6;
reg [63:0] main_1_6_reg;
reg [63:0] main_1_7;
reg [63:0] main_1_7_reg;
reg [31:0] main_1_tri26i;
reg [31:0] main_1_tri26i_reg;
reg [31:0] main_1_8;
reg [31:0] main_1_8_reg;
reg [63:0] main_1_9;
reg [63:0] main_1_9_reg;
reg [63:0] main_1_10;
reg [63:0] main_1_10_reg;
reg [31:0] main_1_tri25i;
reg [31:0] main_1_tri25i_reg;
reg [31:0] main_1_11;
reg [31:0] main_1_11_reg;
reg [63:0] main_1_12;
reg [63:0] main_1_12_reg;
reg [63:0] main_1_13;
reg [63:0] main_1_13_reg;
reg  main_1_14;
reg  main_1_14_reg;
reg  main_15_16;
reg  main_15_16_reg;
reg [63:0] main_17_18;
reg [63:0] main_17_18_reg;
reg  main_17_19;
reg  main_17_19_reg;
reg [63:0] main_20_21;
reg [63:0] main_20_21_reg;
reg  main_20_22;
reg  main_20_22_reg;
reg  main_float64_is_signaling_nanexit1i18i_23;
reg  main_float64_is_signaling_nanexit1i18i_23_reg;
reg [62:0] main_float64_is_signaling_nanexit1i18i_24;
reg [62:0] main_float64_is_signaling_nanexit1i18i_24_reg;
reg  main_float64_is_signaling_nanexit1i18i_25;
reg  main_float64_is_signaling_nanexit1i18i_25_reg;
reg [63:0] main_float64_is_signaling_nanexit1i18i_26;
reg [63:0] main_float64_is_signaling_nanexit1i18i_26_reg;
reg  main_float64_is_signaling_nanexit1i18i_27;
reg  main_float64_is_signaling_nanexit1i18i_27_reg;
reg [63:0] main_28_29;
reg [63:0] main_28_29_reg;
reg  main_28_30;
reg  main_28_30_reg;
reg  main_float64_is_signaling_nanexiti19i_31;
reg  main_float64_is_signaling_nanexiti19i_31_reg;
reg  main_float64_is_signaling_nanexiti19i_32;
reg  main_float64_is_signaling_nanexiti19i_32_reg;
reg [31:0] main_float64_is_signaling_nanexiti19i_33;
reg [31:0] main_float64_is_signaling_nanexiti19i_33_reg;
reg [31:0] main_float64_is_signaling_nanexiti19i_float_exception_flags0;
reg [31:0] main_float64_is_signaling_nanexiti19i_float_exception_flags0_reg;
reg  main_float64_is_signaling_nanexiti19i_;
reg  main_float64_is_signaling_nanexiti19i__reg;
reg [63:0] main_float64_is_signaling_nanexiti19i_mux2vi22i;
reg [63:0] main_float64_is_signaling_nanexiti19i_mux2vi22i_reg;
reg [63:0] main_float64_is_signaling_nanexiti19i_mux2i23i;
reg [63:0] main_float64_is_signaling_nanexiti19i_mux2i23i_reg;
reg  main_34_35;
reg  main_34_35_reg;
reg  main_36_37;
reg  main_36_37_reg;
reg [63:0] main_38_39;
reg [63:0] main_38_39_reg;
reg  main_38_40;
reg  main_38_40_reg;
reg [63:0] main_41_42;
reg [63:0] main_41_42_reg;
reg  main_41_43;
reg  main_41_43_reg;
reg  main_float64_is_signaling_nanexit1i11i_44;
reg  main_float64_is_signaling_nanexit1i11i_44_reg;
reg [62:0] main_float64_is_signaling_nanexit1i11i_45;
reg [62:0] main_float64_is_signaling_nanexit1i11i_45_reg;
reg  main_float64_is_signaling_nanexit1i11i_46;
reg  main_float64_is_signaling_nanexit1i11i_46_reg;
reg [63:0] main_float64_is_signaling_nanexit1i11i_47;
reg [63:0] main_float64_is_signaling_nanexit1i11i_47_reg;
reg  main_float64_is_signaling_nanexit1i11i_48;
reg  main_float64_is_signaling_nanexit1i11i_48_reg;
reg [63:0] main_49_50;
reg [63:0] main_49_50_reg;
reg  main_49_51;
reg  main_49_51_reg;
reg  main_float64_is_signaling_nanexiti12i_52;
reg  main_float64_is_signaling_nanexiti12i_52_reg;
reg  main_float64_is_signaling_nanexiti12i_53;
reg  main_float64_is_signaling_nanexiti12i_53_reg;
reg [31:0] main_float64_is_signaling_nanexiti12i_54;
reg [31:0] main_float64_is_signaling_nanexiti12i_54_reg;
reg [31:0] main_float64_is_signaling_nanexiti12i_float_exception_flags017;
reg [31:0] main_float64_is_signaling_nanexiti12i_float_exception_flags017_reg;
reg  main_float64_is_signaling_nanexiti12i_18;
reg  main_float64_is_signaling_nanexiti12i_18_reg;
reg [63:0] main_float64_is_signaling_nanexiti12i_mux2vi15i;
reg [63:0] main_float64_is_signaling_nanexiti12i_mux2vi15i_reg;
reg [63:0] main_float64_is_signaling_nanexiti12i_mux2i16i;
reg [63:0] main_float64_is_signaling_nanexiti12i_mux2i16i_reg;
reg [31:0] main_55_56;
reg [31:0] main_55_56_reg;
reg [63:0] main_57_58;
reg [63:0] main_57_58_reg;
reg [63:0] main_57_59;
reg [63:0] main_57_59_reg;
reg  main_61_62;
reg  main_61_62_reg;
reg [63:0] main_63_64;
reg [63:0] main_63_64_reg;
reg  main_63_65;
reg  main_63_65_reg;
reg [63:0] main_66_67;
reg [63:0] main_66_67_reg;
reg  main_66_68;
reg  main_66_68_reg;
reg  main_float64_is_signaling_nanexit1ii_69;
reg  main_float64_is_signaling_nanexit1ii_69_reg;
reg [62:0] main_float64_is_signaling_nanexit1ii_70;
reg [62:0] main_float64_is_signaling_nanexit1ii_70_reg;
reg  main_float64_is_signaling_nanexit1ii_71;
reg  main_float64_is_signaling_nanexit1ii_71_reg;
reg [63:0] main_float64_is_signaling_nanexit1ii_72;
reg [63:0] main_float64_is_signaling_nanexit1ii_72_reg;
reg  main_float64_is_signaling_nanexit1ii_73;
reg  main_float64_is_signaling_nanexit1ii_73_reg;
reg [63:0] main_74_75;
reg [63:0] main_74_75_reg;
reg  main_74_76;
reg  main_74_76_reg;
reg  main_float64_is_signaling_nanexitii_77;
reg  main_float64_is_signaling_nanexitii_77_reg;
reg  main_float64_is_signaling_nanexitii_78;
reg  main_float64_is_signaling_nanexitii_78_reg;
reg [31:0] main_float64_is_signaling_nanexitii_79;
reg [31:0] main_float64_is_signaling_nanexitii_79_reg;
reg [31:0] main_float64_is_signaling_nanexitii_float_exception_flags019;
reg [31:0] main_float64_is_signaling_nanexitii_float_exception_flags019_reg;
reg  main_float64_is_signaling_nanexitii_20;
reg  main_float64_is_signaling_nanexitii_20_reg;
reg [63:0] main_float64_is_signaling_nanexitii_mux2vii;
reg [63:0] main_float64_is_signaling_nanexitii_mux2vii_reg;
reg [63:0] main_float64_is_signaling_nanexitii_mux2ii;
reg [63:0] main_float64_is_signaling_nanexitii_mux2ii_reg;
reg [63:0] main_80_81;
reg [63:0] main_80_81_reg;
reg  main_82_83;
reg  main_82_83_reg;
reg [63:0] main_84_85;
reg [63:0] main_84_85_reg;
reg [63:0] main_84_86;
reg [63:0] main_84_86_reg;
reg  main_84_87;
reg  main_84_87_reg;
reg [31:0] main_88_89;
reg [31:0] main_88_89_reg;
reg [31:0] main_90_91;
reg [31:0] main_90_91_reg;
reg [63:0] main_90_92;
reg [63:0] main_90_92_reg;
reg [63:0] main_90_93;
reg [63:0] main_90_93_reg;
reg  main_94_95;
reg  main_94_95_reg;
reg [63:0] main_94_96;
reg [63:0] main_94_96_reg;
reg [63:0] main_94_asinkii3i;
reg [63:0] main_94_asinkii3i_reg;
reg [31:0] main_94_shiftCount0ii4i;
reg [31:0] main_94_shiftCount0ii4i_reg;
reg [31:0] main_94_extracttii5i;
reg [31:0] main_94_extracttii5i_reg;
reg  main_94_97;
reg  main_94_97_reg;
reg [31:0] main_94_98;
reg [31:0] main_94_98_reg;
reg [31:0] main_94_aiii6i;
reg [31:0] main_94_aiii6i_reg;
reg [31:0] main_94_iii7i;
reg [31:0] main_94_iii7i_reg;
reg  main_94_99;
reg  main_94_99_reg;
reg [31:0] main_100_101;
reg [31:0] main_100_101_reg;
reg [31:0] main_100_102;
reg [31:0] main_100_102_reg;
reg [31:0] main_normalizeFloat64Subnormalexit10i_1iii8i;
reg [31:0] main_normalizeFloat64Subnormalexit10i_1iii8i_reg;
reg [31:0] main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i;
reg [31:0] main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i_reg;
reg [31:0] main_normalizeFloat64Subnormalexit10i_103;
reg [31:0] main_normalizeFloat64Subnormalexit10i_103_reg;
reg [31:0] main_normalizeFloat64Subnormalexit10i_gep_int4;
reg [31:0] main_normalizeFloat64Subnormalexit10i_gep_int4_reg;
reg [31:0] main_normalizeFloat64Subnormalexit10i_gep_array5;
reg [31:0] main_normalizeFloat64Subnormalexit10i_gep_array5_reg;
reg [31:0] main_normalizeFloat64Subnormalexit10i_gep6;
reg [31:0] main_normalizeFloat64Subnormalexit10i_gep6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeFloat64Subnormalexit10i_104;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeFloat64Subnormalexit10i_104_reg;
reg [31:0] main_normalizeFloat64Subnormalexit10i_105;
reg [31:0] main_normalizeFloat64Subnormalexit10i_105_reg;
reg [31:0] main_normalizeFloat64Subnormalexit10i_106;
reg [31:0] main_normalizeFloat64Subnormalexit10i_106_reg;
reg [31:0] main_normalizeFloat64Subnormalexit10i_107;
reg [31:0] main_normalizeFloat64Subnormalexit10i_107_reg;
reg [31:0] main_normalizeFloat64Subnormalexit10i_108;
reg [31:0] main_normalizeFloat64Subnormalexit10i_108_reg;
reg [63:0] main_normalizeFloat64Subnormalexit10i_109;
reg [63:0] main_normalizeFloat64Subnormalexit10i_109_reg;
reg [63:0] main_normalizeFloat64Subnormalexit10i_110;
reg [63:0] main_normalizeFloat64Subnormalexit10i_110_reg;
reg [31:0] main_normalizeFloat64Subnormalexit10i_111;
reg [31:0] main_normalizeFloat64Subnormalexit10i_111_reg;
reg [31:0] main_112_113;
reg [31:0] main_112_113_reg;
reg [63:0] main_112_114;
reg [63:0] main_112_114_reg;
reg  main_112_115;
reg  main_112_115_reg;
reg  main_116_117;
reg  main_116_117_reg;
reg [63:0] main_118_119;
reg [63:0] main_118_119_reg;
reg  main_120_121;
reg  main_120_121_reg;
reg [63:0] main_120_122;
reg [63:0] main_120_122_reg;
reg [63:0] main_120_asinkiii;
reg [63:0] main_120_asinkiii_reg;
reg [31:0] main_120_shiftCount0iii;
reg [31:0] main_120_shiftCount0iii_reg;
reg [31:0] main_120_extracttiii;
reg [31:0] main_120_extracttiii_reg;
reg  main_120_123;
reg  main_120_123_reg;
reg [31:0] main_120_124;
reg [31:0] main_120_124_reg;
reg [31:0] main_120_aiiii;
reg [31:0] main_120_aiiii_reg;
reg [31:0] main_120_iiii;
reg [31:0] main_120_iiii_reg;
reg  main_120_125;
reg  main_120_125_reg;
reg [31:0] main_126_127;
reg [31:0] main_126_127_reg;
reg [31:0] main_126_128;
reg [31:0] main_126_128_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_1iiii;
reg [31:0] main_normalizeFloat64Subnormalexiti_1iiii_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_shiftCount1iiii;
reg [31:0] main_normalizeFloat64Subnormalexiti_shiftCount1iiii_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_129;
reg [31:0] main_normalizeFloat64Subnormalexiti_129_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_gep_int7;
reg [31:0] main_normalizeFloat64Subnormalexiti_gep_int7_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_gep_array8;
reg [31:0] main_normalizeFloat64Subnormalexiti_gep_array8_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_gep9;
reg [31:0] main_normalizeFloat64Subnormalexiti_gep9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeFloat64Subnormalexiti_130;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeFloat64Subnormalexiti_130_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_131;
reg [31:0] main_normalizeFloat64Subnormalexiti_131_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_132;
reg [31:0] main_normalizeFloat64Subnormalexiti_132_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_133;
reg [31:0] main_normalizeFloat64Subnormalexiti_133_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_134;
reg [31:0] main_normalizeFloat64Subnormalexiti_134_reg;
reg [63:0] main_normalizeFloat64Subnormalexiti_135;
reg [63:0] main_normalizeFloat64Subnormalexiti_135_reg;
reg [63:0] main_normalizeFloat64Subnormalexiti_136;
reg [63:0] main_normalizeFloat64Subnormalexiti_136_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_137;
reg [31:0] main_normalizeFloat64Subnormalexiti_137_reg;
reg [31:0] main_138_139;
reg [31:0] main_138_139_reg;
reg [63:0] main_138_140;
reg [63:0] main_138_140_reg;
reg [31:0] main_138_141;
reg [31:0] main_138_141_reg;
reg [31:0] main_138_142;
reg [31:0] main_138_142_reg;
reg [63:0] main_138_143;
reg [63:0] main_138_143_reg;
reg [63:0] main_138_144;
reg [63:0] main_138_144_reg;
reg [63:0] main_138_145;
reg [63:0] main_138_145_reg;
reg [63:0] main_138_146;
reg [63:0] main_138_146_reg;
reg [63:0] main_138_147;
reg [63:0] main_138_147_reg;
reg  main_138_148;
reg  main_138_148_reg;
reg [63:0] main_149_150;
reg [63:0] main_149_150_reg;
reg [31:0] main_149_151;
reg [31:0] main_149_151_reg;
reg [63:0] main_152_153;
reg [63:0] main_152_153_reg;
reg [31:0] main_152_zExp0i;
reg [31:0] main_152_zExp0i_reg;
reg  main_152_154;
reg  main_152_154_reg;
reg [63:0] main_155_156;
reg [63:0] main_155_156_reg;
reg [63:0] main_155_157;
reg [63:0] main_155_157_reg;
reg  main_155_158;
reg  main_155_158_reg;
reg [63:0] main_159_160;
reg [63:0] main_159_160_reg;
reg [63:0] main_159_161;
reg [63:0] main_159_161_reg;
reg [63:0] main_162_163;
reg [63:0] main_162_163_reg;
reg [63:0] main_162_164;
reg [63:0] main_162_164_reg;
reg [63:0] main_162_165;
reg [63:0] main_162_165_reg;
reg [63:0] main_162_166;
reg [63:0] main_162_166_reg;
reg [63:0] main_162_167;
reg [63:0] main_162_167_reg;
reg [63:0] main_162_168;
reg [63:0] main_162_168_reg;
reg [63:0] main_162_169;
reg [63:0] main_162_169_reg;
reg [63:0] main_162_170;
reg [63:0] main_162_170_reg;
reg  main_162_171;
reg  main_162_171_reg;
reg [63:0] main_162_negiii;
reg [63:0] main_162_negiii_reg;
reg [63:0] main_162_neg3ii;
reg [63:0] main_162_neg3ii_reg;
reg [63:0] main_162_172;
reg [63:0] main_162_172_reg;
reg [63:0] main_162_173;
reg [63:0] main_162_173_reg;
reg  main_162_174;
reg  main_162_174_reg;
reg [63:0] main_lrphii_175;
reg [63:0] main_lrphii_175_reg;
reg [64:0] main_lrphii_overflow_intrinsic1;
reg [64:0] main_lrphii_overflow_intrinsic1_reg;
reg [63:0] main_176_z05ii;
reg [63:0] main_176_z05ii_reg;
reg [63:0] main_176_177;
reg [63:0] main_176_177_reg;
reg [63:0] main_176_178;
reg [63:0] main_176_178_reg;
reg [63:0] main_176_179;
reg [63:0] main_176_179_reg;
reg [64:0] main_176_overflow_intrinsic;
reg [64:0] main_176_overflow_intrinsic_reg;
reg [64:0] main_176_overflow_intrinsic2;
reg [64:0] main_176_overflow_intrinsic2_reg;
reg [63:0] main_176_overflow_intrinsic_sum;
reg [63:0] main_176_overflow_intrinsic_sum_reg;
reg [64:0] main_176_overflow_intrinsic3;
reg [64:0] main_176_overflow_intrinsic3_reg;
reg  main_176_overflow_intrinsic_carry;
reg  main_176_overflow_intrinsic_carry_reg;
reg [63:0] main_176_180;
reg [63:0] main_176_180_reg;
reg [63:0] main_176_181;
reg [63:0] main_176_181_reg;
reg [63:0] main_176_182;
reg [63:0] main_176_182_reg;
reg  main_176_183;
reg  main_176_183_reg;
reg [63:0] main__crit_edgeii_z0lcssaii;
reg [63:0] main__crit_edgeii_z0lcssaii_reg;
reg [63:0] main__crit_edgeii_lcssa4ii;
reg [63:0] main__crit_edgeii_lcssa4ii_reg;
reg [63:0] main__crit_edgeii_lcssaii;
reg [63:0] main__crit_edgeii_lcssaii_reg;
reg [63:0] main__crit_edgeii_184;
reg [63:0] main__crit_edgeii_184_reg;
reg [63:0] main__crit_edgeii_185;
reg [63:0] main__crit_edgeii_185_reg;
reg [63:0] main__crit_edgeii_186;
reg [63:0] main__crit_edgeii_186_reg;
reg  main__crit_edgeii_187;
reg  main__crit_edgeii_187_reg;
reg [63:0] main_188_189;
reg [63:0] main_188_189_reg;
reg [63:0] main_estimateDiv128To64exiti_190;
reg [63:0] main_estimateDiv128To64exiti_190_reg;
reg [63:0] main_estimateDiv128To64exiti_191;
reg [63:0] main_estimateDiv128To64exiti_191_reg;
reg [63:0] main_estimateDiv128To64exiti_192;
reg [63:0] main_estimateDiv128To64exiti_192_reg;
reg  main_estimateDiv128To64exiti_193;
reg  main_estimateDiv128To64exiti_193_reg;
reg [63:0] main_194_195;
reg [63:0] main_194_195_reg;
reg [63:0] main_194_196;
reg [63:0] main_194_196_reg;
reg [63:0] main_194_197;
reg [63:0] main_194_197_reg;
reg [63:0] main_194_198;
reg [63:0] main_194_198_reg;
reg [63:0] main_194_199;
reg [63:0] main_194_199_reg;
reg [63:0] main_194_200;
reg [63:0] main_194_200_reg;
reg [64:0] main_194_overflow_intrinsic4;
reg [64:0] main_194_overflow_intrinsic4_reg;
reg [64:0] main_194_overflow_intrinsic5;
reg [64:0] main_194_overflow_intrinsic5_reg;
reg [64:0] main_194_overflow_intrinsic6;
reg [64:0] main_194_overflow_intrinsic6_reg;
reg [63:0] main_194_overflow_intrinsic_sum7;
reg [63:0] main_194_overflow_intrinsic_sum7_reg;
reg [64:0] main_194_overflow_intrinsic8;
reg [64:0] main_194_overflow_intrinsic8_reg;
reg  main_194_overflow_intrinsic_carry9;
reg  main_194_overflow_intrinsic_carry9_reg;
reg [63:0] main_194_201;
reg [63:0] main_194_201_reg;
reg [63:0] main_194_202;
reg [63:0] main_194_202_reg;
reg [63:0] main_194_203;
reg [63:0] main_194_203_reg;
reg [63:0] main_194_204;
reg [63:0] main_194_204_reg;
reg [63:0] main_194_205;
reg [63:0] main_194_205_reg;
reg [64:0] main_194_overflow_intrinsic10;
reg [64:0] main_194_overflow_intrinsic10_reg;
reg [64:0] main_194_overflow_intrinsic11;
reg [64:0] main_194_overflow_intrinsic11_reg;
reg [64:0] main_194_overflow_intrinsic12;
reg [64:0] main_194_overflow_intrinsic12_reg;
reg [63:0] main_194_overflow_intrinsic_sum13;
reg [63:0] main_194_overflow_intrinsic_sum13_reg;
reg [64:0] main_194_overflow_intrinsic14;
reg [64:0] main_194_overflow_intrinsic14_reg;
reg  main_194_overflow_intrinsic_carry15;
reg  main_194_overflow_intrinsic_carry15_reg;
reg [63:0] main_194_206;
reg [63:0] main_194_206_reg;
reg [63:0] main_194_neg28i;
reg [63:0] main_194_neg28i_reg;
reg  main_194_207;
reg  main_194_207_reg;
reg [63:0] main_194_negii;
reg [63:0] main_194_negii_reg;
reg [63:0] main_194_neg30i;
reg [63:0] main_194_neg30i_reg;
reg [63:0] main_194_neg32i;
reg [63:0] main_194_neg32i_reg;
reg [63:0] main_194_208;
reg [63:0] main_194_208_reg;
reg [63:0] main_194_209;
reg [63:0] main_194_209_reg;
reg  main_194_210;
reg  main_194_210_reg;
reg [64:0] main_lrphipreheader_overflow_intrinsic17;
reg [64:0] main_lrphipreheader_overflow_intrinsic17_reg;
reg [63:0] main_lrphi_zSig036i;
reg [63:0] main_lrphi_zSig036i_reg;
reg [63:0] main_lrphi_211;
reg [63:0] main_lrphi_211_reg;
reg [63:0] main_lrphi_212;
reg [63:0] main_lrphi_212_reg;
reg [63:0] main_lrphi_213;
reg [63:0] main_lrphi_213_reg;
reg [64:0] main_lrphi_overflow_intrinsic16;
reg [64:0] main_lrphi_overflow_intrinsic16_reg;
reg [64:0] main_lrphi_overflow_intrinsic18;
reg [64:0] main_lrphi_overflow_intrinsic18_reg;
reg [63:0] main_lrphi_overflow_intrinsic_sum19;
reg [63:0] main_lrphi_overflow_intrinsic_sum19_reg;
reg [64:0] main_lrphi_overflow_intrinsic20;
reg [64:0] main_lrphi_overflow_intrinsic20_reg;
reg  main_lrphi_overflow_intrinsic_carry21;
reg  main_lrphi_overflow_intrinsic_carry21_reg;
reg [63:0] main_lrphi_214;
reg [63:0] main_lrphi_214_reg;
reg [63:0] main_lrphi_215;
reg [63:0] main_lrphi_215_reg;
reg  main_lrphi_216;
reg  main_lrphi_216_reg;
reg [63:0] main__crit_edgei_zSig0lcssai;
reg [63:0] main__crit_edgei_zSig0lcssai_reg;
reg [63:0] main__crit_edgei_lcssai;
reg [63:0] main__crit_edgei_lcssai_reg;
reg  main__crit_edgei_217;
reg  main__crit_edgei_217_reg;
reg [63:0] main__crit_edgei_218;
reg [63:0] main__crit_edgei_218_reg;
reg [63:0] main__crit_edgei_219;
reg [63:0] main__crit_edgei_219_reg;
reg [63:0] main_estimateDiv128To64exitthreadi_zSig1i;
reg [63:0] main_estimateDiv128To64exitthreadi_zSig1i_reg;
reg [31:0] main_estimateDiv128To64exitthreadi_trii;
reg [31:0] main_estimateDiv128To64exitthreadi_trii_reg;
reg [31:0] main_estimateDiv128To64exitthreadi_220;
reg [31:0] main_estimateDiv128To64exitthreadi_220_reg;
reg [31:0] main_estimateDiv128To64exitthreadi_221;
reg [31:0] main_estimateDiv128To64exitthreadi_221_reg;
reg  main_estimateDiv128To64exitthreadi_222;
reg  main_estimateDiv128To64exitthreadi_222_reg;
reg  main_estimateDiv128To64exitthreadi_223;
reg  main_estimateDiv128To64exitthreadi_223_reg;
reg  main_estimateDiv128To64exitthreadi_orcond3ii;
reg  main_estimateDiv128To64exitthreadi_orcond3ii_reg;
reg [31:0] main_224_225;
reg [31:0] main_224_225_reg;
reg  main_224_226;
reg  main_224_226_reg;
reg  main_227_228;
reg  main_227_228_reg;
reg [63:0] main_229_230;
reg [63:0] main_229_230_reg;
reg [63:0] main_229_231;
reg [63:0] main_229_231_reg;
reg [31:0] main_229_232;
reg [31:0] main_229_232_reg;
reg [63:0] main_229_233;
reg [63:0] main_229_233_reg;
reg [63:0] main_229_234;
reg [63:0] main_229_234_reg;
reg  main_229_235;
reg  main_229_235_reg;
reg [63:0] main_229_236;
reg [63:0] main_229_236_reg;
reg [63:0] main_229_237;
reg [63:0] main_229_237_reg;
reg  main_238_239;
reg  main_238_239_reg;
reg [63:0] main_238_240;
reg [63:0] main_238_240_reg;
reg [63:0] main_shift64RightJammingexitii_z0iii;
reg [63:0] main_shift64RightJammingexitii_z0iii_reg;
reg [31:0] main_shift64RightJammingexitii_tr4ii;
reg [31:0] main_shift64RightJammingexitii_tr4ii_reg;
reg [31:0] main_shift64RightJammingexitii_241;
reg [31:0] main_shift64RightJammingexitii_241_reg;
reg  main_shift64RightJammingexitii_242;
reg  main_shift64RightJammingexitii_242_reg;
reg [31:0] main_243_244;
reg [31:0] main_243_244_reg;
reg [31:0] main_245_float_exception_flags4;
reg [31:0] main_245_float_exception_flags4_reg;
reg [63:0] main_245_zSig6ii;
reg [63:0] main_245_zSig6ii_reg;
reg [31:0] main_245_0ii;
reg [31:0] main_245_0ii_reg;
reg [31:0] main_245_roundBits0ii;
reg [31:0] main_245_roundBits0ii_reg;
reg  main_245_246;
reg  main_245_246_reg;
reg [31:0] main_245_247;
reg [31:0] main_245_247_reg;
reg [31:0] main_245_float_exception_flags4_var0;
reg [31:0] main_245_float_exception_flags4_var0_reg;
reg [31:0] main_245_roundBits0ii_var1;
reg [31:0] main_245_roundBits0ii_var1_reg;
reg [31:0] main_roundAndPackFloat64exiti_float_exception_flags5;
reg [31:0] main_roundAndPackFloat64exiti_float_exception_flags5_reg;
reg [31:0] main_roundAndPackFloat64exiti_roundBits09ii;
reg [31:0] main_roundAndPackFloat64exiti_roundBits09ii_reg;
reg [31:0] main_roundAndPackFloat64exiti_08ii;
reg [31:0] main_roundAndPackFloat64exiti_08ii_reg;
reg [63:0] main_roundAndPackFloat64exiti_zSig67ii;
reg [63:0] main_roundAndPackFloat64exiti_zSig67ii_reg;
reg [63:0] main_roundAndPackFloat64exiti_248;
reg [63:0] main_roundAndPackFloat64exiti_248_reg;
reg [63:0] main_roundAndPackFloat64exiti_249;
reg [63:0] main_roundAndPackFloat64exiti_249_reg;
reg  main_roundAndPackFloat64exiti_250;
reg  main_roundAndPackFloat64exiti_250_reg;
reg [31:0] main_roundAndPackFloat64exiti_251;
reg [31:0] main_roundAndPackFloat64exiti_251_reg;
reg [31:0] main_roundAndPackFloat64exiti_252;
reg [31:0] main_roundAndPackFloat64exiti_252_reg;
reg [63:0] main_roundAndPackFloat64exiti_253;
reg [63:0] main_roundAndPackFloat64exiti_253_reg;
reg [63:0] main_roundAndPackFloat64exiti_254;
reg [63:0] main_roundAndPackFloat64exiti_254_reg;
reg  main_roundAndPackFloat64exiti_255;
reg  main_roundAndPackFloat64exiti_255_reg;
reg [63:0] main_roundAndPackFloat64exiti_256;
reg [63:0] main_roundAndPackFloat64exiti_256_reg;
reg [63:0] main_roundAndPackFloat64exiti_257;
reg [63:0] main_roundAndPackFloat64exiti_257_reg;
reg [63:0] main_roundAndPackFloat64exiti_opii;
reg [63:0] main_roundAndPackFloat64exiti_opii_reg;
reg [63:0] main_roundAndPackFloat64exiti_258;
reg [63:0] main_roundAndPackFloat64exiti_258_reg;
reg [63:0] main_roundAndPackFloat64exiti_259;
reg [63:0] main_roundAndPackFloat64exiti_259_reg;
reg [63:0] main_roundAndPackFloat64exiti_260;
reg [63:0] main_roundAndPackFloat64exiti_260_reg;
reg [31:0] main_float64_divexit_float_exception_flags6;
reg [31:0] main_float64_divexit_float_exception_flags6_reg;
reg [63:0] main_float64_divexit_0i;
reg [63:0] main_float64_divexit_0i_reg;
reg [31:0] main_float64_divexit_gep_int10;
reg [31:0] main_float64_divexit_gep_int10_reg;
reg [31:0] main_float64_divexit_gep_array11;
reg [31:0] main_float64_divexit_gep_array11_reg;
reg [31:0] main_float64_divexit_gep12;
reg [31:0] main_float64_divexit_gep12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_float64_divexit_261;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_float64_divexit_261_reg;
reg [63:0] main_float64_divexit_262;
reg [63:0] main_float64_divexit_262_reg;
reg  main_float64_divexit_263;
reg  main_float64_divexit_263_reg;
reg [31:0] main_float64_divexit_264;
reg [31:0] main_float64_divexit_264_reg;
reg [31:0] main_float64_divexit_265;
reg [31:0] main_float64_divexit_265_reg;
reg [31:0] main_float64_divexit_267;
reg [31:0] main_float64_divexit_267_reg;
reg  main_float64_divexit_exitcond;
reg  main_float64_divexit_exitcond_reg;
reg [31:0] main_268_lcssa5;
reg [31:0] main_268_lcssa5_reg;
reg  main_268_270;
reg  main_268_270_reg;
reg [4:0] a_input_address_a;
reg  a_input_write_enable_a;
wire [63:0] a_input_in_a;
wire [63:0] a_input_out_a;
wire [4:0] a_input_address_b;
wire  a_input_write_enable_b;
wire [63:0] a_input_in_b;
wire [63:0] a_input_out_b;
reg [4:0] b_input_address_a;
reg  b_input_write_enable_a;
wire [63:0] b_input_in_a;
wire [63:0] b_input_out_a;
wire [4:0] b_input_address_b;
wire  b_input_write_enable_b;
wire [63:0] b_input_in_b;
wire [63:0] b_input_out_b;
reg [4:0] z_output_address_a;
reg  z_output_write_enable_a;
wire [63:0] z_output_in_a;
wire [63:0] z_output_out_a;
wire [4:0] z_output_address_b;
wire  z_output_write_enable_b;
wire [63:0] z_output_in_b;
wire [63:0] z_output_out_b;
reg [7:0] countLeadingZeros32countLeadingZerosHigh_address_a;
reg  countLeadingZeros32countLeadingZerosHigh_write_enable_a;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_in_a;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_out_a;
wire [7:0] countLeadingZeros32countLeadingZerosHigh_address_b;
wire  countLeadingZeros32countLeadingZerosHigh_write_enable_b;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_in_b;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_out_b;
reg [31:0] main_signed_add_32_0_op0;
reg [31:0] main_signed_add_32_0_op1;
reg [31:0] main_signed_add_32_0;
reg [31:0] main_signed_add_32_1_op0;
reg [31:0] main_signed_add_32_1_op1;
reg [31:0] main_signed_add_32_1;
reg [31:0] main_signed_subtract_32_0_op0;
reg [31:0] main_signed_subtract_32_0_op1;
reg [31:0] main_signed_subtract_32_0;
reg [63:0] main_signed_multiply_64_1_op0;
reg [63:0] main_signed_multiply_64_1_op1;
reg  lpm_mult_main_194_197_en;
reg [63:0] main_194_197_stage0_reg;
reg [63:0] main_signed_multiply_64_1;
reg [63:0] main_signed_multiply_64_2_op0;
reg [63:0] main_signed_multiply_64_2_op1;
reg  lpm_mult_main_194_198_en;
reg [63:0] main_194_198_stage0_reg;
reg [63:0] main_signed_multiply_64_2;
reg [63:0] main_signed_multiply_64_0_op0;
reg [63:0] main_signed_multiply_64_0_op1;
reg  lpm_mult_main_194_199_en;
reg [63:0] main_194_199_stage0_reg;
reg [63:0] main_signed_multiply_64_0;
reg [63:0] main_signed_multiply_64_3_op0;
reg [63:0] main_signed_multiply_64_3_op1;
reg  lpm_mult_main_194_200_en;
reg [63:0] main_194_200_stage0_reg;
reg [63:0] main_signed_multiply_64_3;
reg [63:0] main_signed_add_64_0_op0;
reg [63:0] main_signed_add_64_0_op1;
reg [63:0] main_signed_add_64_0;
reg [63:0] main_signed_add_64_1_op0;
reg [63:0] main_signed_add_64_1_op1;
reg [63:0] main_signed_add_64_1;
reg [63:0] main_unsigned_divide_64_0_op0;
reg [63:0] main_unsigned_divide_64_0_op1;
wire [63:0] lpm_divide_main_159_160_temp_out;
wire [63:0] main_159_160_unused;
reg  lpm_divide_main_159_160_en;
reg [63:0] lpm_divide_main_159_160_out;
reg [63:0] main_unsigned_divide_64_0;
reg [63:0] main_signed_subtract_64_0_op0;
reg [63:0] main_signed_subtract_64_0_op1;
reg [63:0] main_signed_subtract_64_0;
reg [63:0] main_signed_subtract_64_1_op0;
reg [63:0] main_signed_subtract_64_1_op1;
reg [63:0] main_signed_subtract_64_1;
reg [63:0] main_signed_subtract_64_2_op0;
reg [63:0] main_signed_subtract_64_2_op1;
reg [63:0] main_signed_subtract_64_2;
reg  lpm_mult_main_162_166_en;
reg  lpm_mult_main_162_167_en;
reg  lpm_divide_main_188_189_en;

/*   %160 = udiv i64 %153, %156*/
lpm_divide lpm_divide_main_159_160 (
	.quotient (lpm_divide_main_159_160_temp_out),
	.remain (main_159_160_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_159_160_en),
	.numer (main_unsigned_divide_64_0_op0),
	.denom (main_unsigned_divide_64_0_op1)
);

defparam
	lpm_divide_main_159_160.lpm_pipeline = 64,
	lpm_divide_main_159_160.lpm_widthn = 64,
	lpm_divide_main_159_160.lpm_widthd = 64,
	lpm_divide_main_159_160.lpm_drepresentation = "UNSIGNED",
	lpm_divide_main_159_160.lpm_nrepresentation = "UNSIGNED",
	lpm_divide_main_159_160.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

// Local Rams


// @a_input = internal unnamed_addr constant [22 x i64] [i64 9223090561878065152, i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312, i64 4607182418800017408, i64 46071824188000174...
rom_dual_port a_input (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( a_input_address_a ),
	.address_b( a_input_address_b ),
	.q_a( a_input_out_a ),
	.q_b( a_input_out_b)
);
defparam a_input.width_a = 64;
defparam a_input.width_b = 64;
defparam a_input.widthad_a = 5;
defparam a_input.widthad_b = 5;
defparam a_input.numwords_a = 22;
defparam a_input.numwords_b = 22;
defparam a_input.latency = 1;
defparam a_input.init_file = "a_input.mif";


// @b_input = internal unnamed_addr constant [22 x i64] [i64 4607182418800017408, i64 9221120237041090560, i64 9218868437227405312, i64 4607182418800017408, i64 9221120237041090560, i64 92188684372274053...
rom_dual_port b_input (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( b_input_address_a ),
	.address_b( b_input_address_b ),
	.q_a( b_input_out_a ),
	.q_b( b_input_out_b)
);
defparam b_input.width_a = 64;
defparam b_input.width_b = 64;
defparam b_input.widthad_a = 5;
defparam b_input.widthad_b = 5;
defparam b_input.numwords_a = 22;
defparam b_input.numwords_b = 22;
defparam b_input.latency = 1;
defparam b_input.init_file = "b_input.mif";


// @z_output = internal unnamed_addr constant [22 x i64] [i64 9223090561878065152, i64 9221120237041090560, i64 9223372036854775807, i64 9218868437227405312, i64 9221120237041090560, i64 0, i64 922337203...
rom_dual_port z_output (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( z_output_address_a ),
	.address_b( z_output_address_b ),
	.q_a( z_output_out_a ),
	.q_b( z_output_out_b)
);
defparam z_output.width_a = 64;
defparam z_output.width_b = 64;
defparam z_output.widthad_a = 5;
defparam z_output.widthad_b = 5;
defparam z_output.numwords_a = 22;
defparam z_output.numwords_b = 22;
defparam z_output.latency = 1;
defparam z_output.init_file = "z_output.mif";


// @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4,...
rom_dual_port countLeadingZeros32countLeadingZerosHigh (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( countLeadingZeros32countLeadingZerosHigh_address_a ),
	.address_b( countLeadingZeros32countLeadingZerosHigh_address_b ),
	.q_a( countLeadingZeros32countLeadingZerosHigh_out_a ),
	.q_b( countLeadingZeros32countLeadingZerosHigh_out_b)
);
defparam countLeadingZeros32countLeadingZerosHigh.width_a = 32;
defparam countLeadingZeros32countLeadingZerosHigh.width_b = 32;
defparam countLeadingZeros32countLeadingZerosHigh.widthad_a = 8;
defparam countLeadingZeros32countLeadingZerosHigh.widthad_b = 8;
defparam countLeadingZeros32countLeadingZerosHigh.numwords_a = 256;
defparam countLeadingZeros32countLeadingZerosHigh.numwords_b = 256;
defparam countLeadingZeros32countLeadingZerosHigh.latency = 1;
defparam countLeadingZeros32countLeadingZerosHigh.init_file = "countLeadingZeros32countLeadingZerosHigh.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %float64_div.exit*/
	/*   %266 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([65 x i8]* @.str, i32 0, i32 0), i64 %3, i64 %5, i64 %262, i64 %.0.i) #1*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexit_207)) begin
		$write("a_input=%0x b_input=%0x expected=%0x output=%0x\n", $signed(main_1_3_reg), $signed(main_1_5_reg), $signed(main_float64_divexit_262), $signed(main_float64_divexit_0i_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_1_3_reg) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_1_5_reg) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_float64_divexit_262) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_float64_divexit_0i_reg) === 1'bX) finish <= 0;
	end
	/* main: %268*/
	/*   %269 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str1, i32 0, i32 0), i32 %.lcssa5) #1*/
	if ((cur_state == LEGUP_F_main_BB__268_208)) begin
		$write("Result: %d\n", $signed(main_268_lcssa5_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_268_lcssa5_reg) === 1'bX) finish <= 0;
	end
	/* main: %271*/
	/*   %272 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__271_209)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %273*/
	/*   %274 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str3, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__273_210)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB__100_35:
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_36;
LEGUP_F_main_BB__112_39:
	if ((main_112_115 == 1'd1))
		next_state = LEGUP_F_main_BB__116_40;
	else if ((main_112_115 == 1'd0))
		next_state = LEGUP_F_main_BB__138_47;
LEGUP_F_main_BB__116_40:
	if ((main_116_117 == 1'd1))
		next_state = LEGUP_F_main_BB__118_41;
	else if ((main_116_117 == 1'd0))
		next_state = LEGUP_F_main_BB__120_42;
LEGUP_F_main_BB__118_41:
		next_state = LEGUP_F_main_BB_float64_divexit_205;
LEGUP_F_main_BB__120_42:
	if ((main_120_125 == 1'd1))
		next_state = LEGUP_F_main_BB__126_43;
	else if ((main_120_125 == 1'd0))
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_44;
LEGUP_F_main_BB__126_43:
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_44;
LEGUP_F_main_BB__138_47:
	if ((main_138_148 == 1'd1))
		next_state = LEGUP_F_main_BB__152_49;
	else if ((main_138_148 == 1'd0))
		next_state = LEGUP_F_main_BB__149_48;
LEGUP_F_main_BB__149_48:
		next_state = LEGUP_F_main_BB__152_49;
LEGUP_F_main_BB__152_49:
	if ((main_152_154 == 1'd1))
		next_state = LEGUP_F_main_BB__155_50;
	else if ((main_152_154 == 1'd0))
		next_state = LEGUP_F_main_BB_estimateDiv128To64exitthreadi_196;
LEGUP_F_main_BB__155_50:
	if ((main_155_158 == 1'd1))
		next_state = LEGUP_F_main_BB__159_51;
	else if ((main_155_158 == 1'd0))
		next_state = LEGUP_F_main_BB__162_116;
LEGUP_F_main_BB__159_100:
		next_state = LEGUP_F_main_BB__159_101;
LEGUP_F_main_BB__159_101:
		next_state = LEGUP_F_main_BB__159_102;
LEGUP_F_main_BB__159_102:
		next_state = LEGUP_F_main_BB__159_103;
LEGUP_F_main_BB__159_103:
		next_state = LEGUP_F_main_BB__159_104;
LEGUP_F_main_BB__159_104:
		next_state = LEGUP_F_main_BB__159_105;
LEGUP_F_main_BB__159_105:
		next_state = LEGUP_F_main_BB__159_106;
LEGUP_F_main_BB__159_106:
		next_state = LEGUP_F_main_BB__159_107;
LEGUP_F_main_BB__159_107:
		next_state = LEGUP_F_main_BB__159_108;
LEGUP_F_main_BB__159_108:
		next_state = LEGUP_F_main_BB__159_109;
LEGUP_F_main_BB__159_109:
		next_state = LEGUP_F_main_BB__159_110;
LEGUP_F_main_BB__159_110:
		next_state = LEGUP_F_main_BB__159_111;
LEGUP_F_main_BB__159_111:
		next_state = LEGUP_F_main_BB__159_112;
LEGUP_F_main_BB__159_112:
		next_state = LEGUP_F_main_BB__159_113;
LEGUP_F_main_BB__159_113:
		next_state = LEGUP_F_main_BB__159_114;
LEGUP_F_main_BB__159_114:
		next_state = LEGUP_F_main_BB__159_115;
LEGUP_F_main_BB__159_115:
		next_state = LEGUP_F_main_BB__162_116;
LEGUP_F_main_BB__159_51:
		next_state = LEGUP_F_main_BB__159_52;
LEGUP_F_main_BB__159_52:
		next_state = LEGUP_F_main_BB__159_53;
LEGUP_F_main_BB__159_53:
		next_state = LEGUP_F_main_BB__159_54;
LEGUP_F_main_BB__159_54:
		next_state = LEGUP_F_main_BB__159_55;
LEGUP_F_main_BB__159_55:
		next_state = LEGUP_F_main_BB__159_56;
LEGUP_F_main_BB__159_56:
		next_state = LEGUP_F_main_BB__159_57;
LEGUP_F_main_BB__159_57:
		next_state = LEGUP_F_main_BB__159_58;
LEGUP_F_main_BB__159_58:
		next_state = LEGUP_F_main_BB__159_59;
LEGUP_F_main_BB__159_59:
		next_state = LEGUP_F_main_BB__159_60;
LEGUP_F_main_BB__159_60:
		next_state = LEGUP_F_main_BB__159_61;
LEGUP_F_main_BB__159_61:
		next_state = LEGUP_F_main_BB__159_62;
LEGUP_F_main_BB__159_62:
		next_state = LEGUP_F_main_BB__159_63;
LEGUP_F_main_BB__159_63:
		next_state = LEGUP_F_main_BB__159_64;
LEGUP_F_main_BB__159_64:
		next_state = LEGUP_F_main_BB__159_65;
LEGUP_F_main_BB__159_65:
		next_state = LEGUP_F_main_BB__159_66;
LEGUP_F_main_BB__159_66:
		next_state = LEGUP_F_main_BB__159_67;
LEGUP_F_main_BB__159_67:
		next_state = LEGUP_F_main_BB__159_68;
LEGUP_F_main_BB__159_68:
		next_state = LEGUP_F_main_BB__159_69;
LEGUP_F_main_BB__159_69:
		next_state = LEGUP_F_main_BB__159_70;
LEGUP_F_main_BB__159_70:
		next_state = LEGUP_F_main_BB__159_71;
LEGUP_F_main_BB__159_71:
		next_state = LEGUP_F_main_BB__159_72;
LEGUP_F_main_BB__159_72:
		next_state = LEGUP_F_main_BB__159_73;
LEGUP_F_main_BB__159_73:
		next_state = LEGUP_F_main_BB__159_74;
LEGUP_F_main_BB__159_74:
		next_state = LEGUP_F_main_BB__159_75;
LEGUP_F_main_BB__159_75:
		next_state = LEGUP_F_main_BB__159_76;
LEGUP_F_main_BB__159_76:
		next_state = LEGUP_F_main_BB__159_77;
LEGUP_F_main_BB__159_77:
		next_state = LEGUP_F_main_BB__159_78;
LEGUP_F_main_BB__159_78:
		next_state = LEGUP_F_main_BB__159_79;
LEGUP_F_main_BB__159_79:
		next_state = LEGUP_F_main_BB__159_80;
LEGUP_F_main_BB__159_80:
		next_state = LEGUP_F_main_BB__159_81;
LEGUP_F_main_BB__159_81:
		next_state = LEGUP_F_main_BB__159_82;
LEGUP_F_main_BB__159_82:
		next_state = LEGUP_F_main_BB__159_83;
LEGUP_F_main_BB__159_83:
		next_state = LEGUP_F_main_BB__159_84;
LEGUP_F_main_BB__159_84:
		next_state = LEGUP_F_main_BB__159_85;
LEGUP_F_main_BB__159_85:
		next_state = LEGUP_F_main_BB__159_86;
LEGUP_F_main_BB__159_86:
		next_state = LEGUP_F_main_BB__159_87;
LEGUP_F_main_BB__159_87:
		next_state = LEGUP_F_main_BB__159_88;
LEGUP_F_main_BB__159_88:
		next_state = LEGUP_F_main_BB__159_89;
LEGUP_F_main_BB__159_89:
		next_state = LEGUP_F_main_BB__159_90;
LEGUP_F_main_BB__159_90:
		next_state = LEGUP_F_main_BB__159_91;
LEGUP_F_main_BB__159_91:
		next_state = LEGUP_F_main_BB__159_92;
LEGUP_F_main_BB__159_92:
		next_state = LEGUP_F_main_BB__159_93;
LEGUP_F_main_BB__159_93:
		next_state = LEGUP_F_main_BB__159_94;
LEGUP_F_main_BB__159_94:
		next_state = LEGUP_F_main_BB__159_95;
LEGUP_F_main_BB__159_95:
		next_state = LEGUP_F_main_BB__159_96;
LEGUP_F_main_BB__159_96:
		next_state = LEGUP_F_main_BB__159_97;
LEGUP_F_main_BB__159_97:
		next_state = LEGUP_F_main_BB__159_98;
LEGUP_F_main_BB__159_98:
		next_state = LEGUP_F_main_BB__159_99;
LEGUP_F_main_BB__159_99:
		next_state = LEGUP_F_main_BB__159_100;
LEGUP_F_main_BB__15_4:
	if ((main_15_16 == 1'd1))
		next_state = LEGUP_F_main_BB__34_11;
	else if ((main_15_16 == 1'd0))
		next_state = LEGUP_F_main_BB__17_5;
LEGUP_F_main_BB__162_116:
		next_state = LEGUP_F_main_BB__162_117;
LEGUP_F_main_BB__162_117:
	if ((main_162_174 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphii_118;
	else if ((main_162_174 == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgeii_121;
LEGUP_F_main_BB__176_119:
		next_state = LEGUP_F_main_BB__176_120;
LEGUP_F_main_BB__176_120:
	if ((main_176_183 == 1'd1))
		next_state = LEGUP_F_main_BB__176_119;
	else if ((main_176_183 == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgeii_121;
LEGUP_F_main_BB__17_5:
	if ((main_17_19 == 1'd1))
		next_state = LEGUP_F_main_BB__20_6;
	else if ((main_17_19 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i18i_7;
LEGUP_F_main_BB__188_122:
		next_state = LEGUP_F_main_BB__188_123;
LEGUP_F_main_BB__188_123:
		next_state = LEGUP_F_main_BB__188_124;
LEGUP_F_main_BB__188_124:
		next_state = LEGUP_F_main_BB__188_125;
LEGUP_F_main_BB__188_125:
		next_state = LEGUP_F_main_BB__188_126;
LEGUP_F_main_BB__188_126:
		next_state = LEGUP_F_main_BB__188_127;
LEGUP_F_main_BB__188_127:
		next_state = LEGUP_F_main_BB__188_128;
LEGUP_F_main_BB__188_128:
		next_state = LEGUP_F_main_BB__188_129;
LEGUP_F_main_BB__188_129:
		next_state = LEGUP_F_main_BB__188_130;
LEGUP_F_main_BB__188_130:
		next_state = LEGUP_F_main_BB__188_131;
LEGUP_F_main_BB__188_131:
		next_state = LEGUP_F_main_BB__188_132;
LEGUP_F_main_BB__188_132:
		next_state = LEGUP_F_main_BB__188_133;
LEGUP_F_main_BB__188_133:
		next_state = LEGUP_F_main_BB__188_134;
LEGUP_F_main_BB__188_134:
		next_state = LEGUP_F_main_BB__188_135;
LEGUP_F_main_BB__188_135:
		next_state = LEGUP_F_main_BB__188_136;
LEGUP_F_main_BB__188_136:
		next_state = LEGUP_F_main_BB__188_137;
LEGUP_F_main_BB__188_137:
		next_state = LEGUP_F_main_BB__188_138;
LEGUP_F_main_BB__188_138:
		next_state = LEGUP_F_main_BB__188_139;
LEGUP_F_main_BB__188_139:
		next_state = LEGUP_F_main_BB__188_140;
LEGUP_F_main_BB__188_140:
		next_state = LEGUP_F_main_BB__188_141;
LEGUP_F_main_BB__188_141:
		next_state = LEGUP_F_main_BB__188_142;
LEGUP_F_main_BB__188_142:
		next_state = LEGUP_F_main_BB__188_143;
LEGUP_F_main_BB__188_143:
		next_state = LEGUP_F_main_BB__188_144;
LEGUP_F_main_BB__188_144:
		next_state = LEGUP_F_main_BB__188_145;
LEGUP_F_main_BB__188_145:
		next_state = LEGUP_F_main_BB__188_146;
LEGUP_F_main_BB__188_146:
		next_state = LEGUP_F_main_BB__188_147;
LEGUP_F_main_BB__188_147:
		next_state = LEGUP_F_main_BB__188_148;
LEGUP_F_main_BB__188_148:
		next_state = LEGUP_F_main_BB__188_149;
LEGUP_F_main_BB__188_149:
		next_state = LEGUP_F_main_BB__188_150;
LEGUP_F_main_BB__188_150:
		next_state = LEGUP_F_main_BB__188_151;
LEGUP_F_main_BB__188_151:
		next_state = LEGUP_F_main_BB__188_152;
LEGUP_F_main_BB__188_152:
		next_state = LEGUP_F_main_BB__188_153;
LEGUP_F_main_BB__188_153:
		next_state = LEGUP_F_main_BB__188_154;
LEGUP_F_main_BB__188_154:
		next_state = LEGUP_F_main_BB__188_155;
LEGUP_F_main_BB__188_155:
		next_state = LEGUP_F_main_BB__188_156;
LEGUP_F_main_BB__188_156:
		next_state = LEGUP_F_main_BB__188_157;
LEGUP_F_main_BB__188_157:
		next_state = LEGUP_F_main_BB__188_158;
LEGUP_F_main_BB__188_158:
		next_state = LEGUP_F_main_BB__188_159;
LEGUP_F_main_BB__188_159:
		next_state = LEGUP_F_main_BB__188_160;
LEGUP_F_main_BB__188_160:
		next_state = LEGUP_F_main_BB__188_161;
LEGUP_F_main_BB__188_161:
		next_state = LEGUP_F_main_BB__188_162;
LEGUP_F_main_BB__188_162:
		next_state = LEGUP_F_main_BB__188_163;
LEGUP_F_main_BB__188_163:
		next_state = LEGUP_F_main_BB__188_164;
LEGUP_F_main_BB__188_164:
		next_state = LEGUP_F_main_BB__188_165;
LEGUP_F_main_BB__188_165:
		next_state = LEGUP_F_main_BB__188_166;
LEGUP_F_main_BB__188_166:
		next_state = LEGUP_F_main_BB__188_167;
LEGUP_F_main_BB__188_167:
		next_state = LEGUP_F_main_BB__188_168;
LEGUP_F_main_BB__188_168:
		next_state = LEGUP_F_main_BB__188_169;
LEGUP_F_main_BB__188_169:
		next_state = LEGUP_F_main_BB__188_170;
LEGUP_F_main_BB__188_170:
		next_state = LEGUP_F_main_BB__188_171;
LEGUP_F_main_BB__188_171:
		next_state = LEGUP_F_main_BB__188_172;
LEGUP_F_main_BB__188_172:
		next_state = LEGUP_F_main_BB__188_173;
LEGUP_F_main_BB__188_173:
		next_state = LEGUP_F_main_BB__188_174;
LEGUP_F_main_BB__188_174:
		next_state = LEGUP_F_main_BB__188_175;
LEGUP_F_main_BB__188_175:
		next_state = LEGUP_F_main_BB__188_176;
LEGUP_F_main_BB__188_176:
		next_state = LEGUP_F_main_BB__188_177;
LEGUP_F_main_BB__188_177:
		next_state = LEGUP_F_main_BB__188_178;
LEGUP_F_main_BB__188_178:
		next_state = LEGUP_F_main_BB__188_179;
LEGUP_F_main_BB__188_179:
		next_state = LEGUP_F_main_BB__188_180;
LEGUP_F_main_BB__188_180:
		next_state = LEGUP_F_main_BB__188_181;
LEGUP_F_main_BB__188_181:
		next_state = LEGUP_F_main_BB__188_182;
LEGUP_F_main_BB__188_182:
		next_state = LEGUP_F_main_BB__188_183;
LEGUP_F_main_BB__188_183:
		next_state = LEGUP_F_main_BB__188_184;
LEGUP_F_main_BB__188_184:
		next_state = LEGUP_F_main_BB__188_185;
LEGUP_F_main_BB__188_185:
		next_state = LEGUP_F_main_BB__188_186;
LEGUP_F_main_BB__188_186:
		next_state = LEGUP_F_main_BB_estimateDiv128To64exiti_187;
LEGUP_F_main_BB__194_188:
		next_state = LEGUP_F_main_BB__194_189;
LEGUP_F_main_BB__194_189:
		next_state = LEGUP_F_main_BB__194_190;
LEGUP_F_main_BB__194_190:
		next_state = LEGUP_F_main_BB__194_191;
LEGUP_F_main_BB__194_191:
	if ((main_194_210 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphipreheader_192;
	else if ((main_194_210 == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgei_195;
LEGUP_F_main_BB__1_1:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__1_2:
		next_state = LEGUP_F_main_BB__1_3;
LEGUP_F_main_BB__1_3:
	if ((main_1_14 == 1'd1))
		next_state = LEGUP_F_main_BB__15_4;
	else if ((main_1_14 == 1'd0))
		next_state = LEGUP_F_main_BB__60_21;
LEGUP_F_main_BB__20_6:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i18i_7;
LEGUP_F_main_BB__224_197:
	if ((main_224_226 == 1'd1))
		next_state = LEGUP_F_main_BB_shift64RightJammingexitii_201;
	else if ((main_224_226 == 1'd0))
		next_state = LEGUP_F_main_BB__227_198;
LEGUP_F_main_BB__227_198:
	if ((main_227_228 == 1'd1))
		next_state = LEGUP_F_main_BB__229_199;
	else if ((main_227_228 == 1'd0))
		next_state = LEGUP_F_main_BB__238_200;
LEGUP_F_main_BB__229_199:
		next_state = LEGUP_F_main_BB_shift64RightJammingexitii_201;
LEGUP_F_main_BB__238_200:
		next_state = LEGUP_F_main_BB_shift64RightJammingexitii_201;
LEGUP_F_main_BB__243_202:
		next_state = LEGUP_F_main_BB__245_203;
LEGUP_F_main_BB__245_203:
		next_state = LEGUP_F_main_BB_roundAndPackFloat64exiti_204;
LEGUP_F_main_BB__268_208:
	if ((main_268_270 == 1'd1))
		next_state = LEGUP_F_main_BB__271_209;
	else if ((main_268_270 == 1'd0))
		next_state = LEGUP_F_main_BB__273_210;
LEGUP_F_main_BB__271_209:
		next_state = LEGUP_F_main_BB__275_211;
LEGUP_F_main_BB__273_210:
		next_state = LEGUP_F_main_BB__275_211;
LEGUP_F_main_BB__275_211:
		next_state = LEGUP_0;
LEGUP_F_main_BB__28_8:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti19i_9;
LEGUP_F_main_BB__34_11:
	if ((main_34_35 == 1'd1))
		next_state = LEGUP_F_main_BB__36_12;
	else if ((main_34_35 == 1'd0))
		next_state = LEGUP_F_main_BB__57_20;
LEGUP_F_main_BB__36_12:
	if ((main_36_37 == 1'd1))
		next_state = LEGUP_F_main_BB__55_19;
	else if ((main_36_37 == 1'd0))
		next_state = LEGUP_F_main_BB__38_13;
LEGUP_F_main_BB__38_13:
	if ((main_38_40 == 1'd1))
		next_state = LEGUP_F_main_BB__41_14;
	else if ((main_38_40 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_15;
LEGUP_F_main_BB__41_14:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_15;
LEGUP_F_main_BB__49_16:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti12i_17;
LEGUP_F_main_BB__55_19:
		next_state = LEGUP_F_main_BB_float64_divexit_205;
LEGUP_F_main_BB__57_20:
		next_state = LEGUP_F_main_BB_float64_divexit_205;
LEGUP_F_main_BB__60_21:
	if ((main_1_11_reg == 32'd2047))
		next_state = LEGUP_F_main_BB__61_22;
	else if ((main_1_11_reg == 32'd0))
		next_state = LEGUP_F_main_BB__82_30;
	else if ((main_1_11_reg != 32'd2047) && (main_1_11_reg != 32'd0))
		next_state = LEGUP_F_main_BB__112_39;
LEGUP_F_main_BB__61_22:
	if ((main_61_62 == 1'd1))
		next_state = LEGUP_F_main_BB__80_29;
	else if ((main_61_62 == 1'd0))
		next_state = LEGUP_F_main_BB__63_23;
LEGUP_F_main_BB__63_23:
	if ((main_63_65 == 1'd1))
		next_state = LEGUP_F_main_BB__66_24;
	else if ((main_63_65 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_25;
LEGUP_F_main_BB__66_24:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_25;
LEGUP_F_main_BB__74_26:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexitii_27;
LEGUP_F_main_BB__80_29:
		next_state = LEGUP_F_main_BB_float64_divexit_205;
LEGUP_F_main_BB__82_30:
	if ((main_82_83 == 1'd1))
		next_state = LEGUP_F_main_BB__84_31;
	else if ((main_82_83 == 1'd0))
		next_state = LEGUP_F_main_BB__94_34;
LEGUP_F_main_BB__84_31:
	if ((main_84_87 == 1'd1))
		next_state = LEGUP_F_main_BB__88_32;
	else if ((main_84_87 == 1'd0))
		next_state = LEGUP_F_main_BB__90_33;
LEGUP_F_main_BB__88_32:
		next_state = LEGUP_F_main_BB_float64_divexit_205;
LEGUP_F_main_BB__90_33:
		next_state = LEGUP_F_main_BB_float64_divexit_205;
LEGUP_F_main_BB__94_34:
	if ((main_94_99 == 1'd1))
		next_state = LEGUP_F_main_BB__100_35;
	else if ((main_94_99 == 1'd0))
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_36;
LEGUP_F_main_BB__crit_edgei_195:
		next_state = LEGUP_F_main_BB_estimateDiv128To64exitthreadi_196;
LEGUP_F_main_BB__crit_edgeii_121:
	if ((main__crit_edgeii_187 == 1'd1))
		next_state = LEGUP_F_main_BB__188_122;
	else if ((main__crit_edgeii_187 == 1'd0))
		next_state = LEGUP_F_main_BB_estimateDiv128To64exiti_187;
LEGUP_F_main_BB_estimateDiv128To64exiti_187:
	if ((main_estimateDiv128To64exiti_193 == 1'd1))
		next_state = LEGUP_F_main_BB__194_188;
	else if ((main_estimateDiv128To64exiti_193 == 1'd0))
		next_state = LEGUP_F_main_BB_estimateDiv128To64exitthreadi_196;
LEGUP_F_main_BB_estimateDiv128To64exitthreadi_196:
	if ((main_estimateDiv128To64exitthreadi_orcond3ii == 1'd1))
		next_state = LEGUP_F_main_BB__224_197;
	else if ((main_estimateDiv128To64exitthreadi_orcond3ii == 1'd0))
		next_state = LEGUP_F_main_BB__245_203;
LEGUP_F_main_BB_float64_divexit_205:
		next_state = LEGUP_F_main_BB_float64_divexit_206;
LEGUP_F_main_BB_float64_divexit_206:
		next_state = LEGUP_F_main_BB_float64_divexit_207;
LEGUP_F_main_BB_float64_divexit_207:
	if ((main_float64_divexit_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB__268_208;
	else if ((main_float64_divexit_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_15:
	if ((main_float64_is_signaling_nanexit1i11i_48 == 1'd1))
		next_state = LEGUP_F_main_BB__49_16;
	else if ((main_float64_is_signaling_nanexit1i11i_48 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti12i_17;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i18i_7:
	if ((main_float64_is_signaling_nanexit1i18i_27 == 1'd1))
		next_state = LEGUP_F_main_BB__28_8;
	else if ((main_float64_is_signaling_nanexit1i18i_27 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti19i_9;
LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_25:
	if ((main_float64_is_signaling_nanexit1ii_73 == 1'd1))
		next_state = LEGUP_F_main_BB__74_26;
	else if ((main_float64_is_signaling_nanexit1ii_73 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexitii_27;
LEGUP_F_main_BB_float64_is_signaling_nanexiti12i_17:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti12i_18;
LEGUP_F_main_BB_float64_is_signaling_nanexiti12i_18:
		next_state = LEGUP_F_main_BB_float64_divexit_205;
LEGUP_F_main_BB_float64_is_signaling_nanexiti19i_10:
		next_state = LEGUP_F_main_BB_float64_divexit_205;
LEGUP_F_main_BB_float64_is_signaling_nanexiti19i_9:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti19i_10;
LEGUP_F_main_BB_float64_is_signaling_nanexitii_27:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexitii_28;
LEGUP_F_main_BB_float64_is_signaling_nanexitii_28:
		next_state = LEGUP_F_main_BB_float64_divexit_205;
LEGUP_F_main_BB_lrphi_193:
		next_state = LEGUP_F_main_BB_lrphi_194;
LEGUP_F_main_BB_lrphi_194:
	if ((main_lrphi_216 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphi_193;
	else if ((main_lrphi_216 == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgei_195;
LEGUP_F_main_BB_lrphii_118:
		next_state = LEGUP_F_main_BB__176_119;
LEGUP_F_main_BB_lrphipreheader_192:
		next_state = LEGUP_F_main_BB_lrphi_193;
LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_36:
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_37;
LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_37:
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_38;
LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_38:
		next_state = LEGUP_F_main_BB__112_39;
LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_44:
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_45;
LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_45:
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_46;
LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_46:
		next_state = LEGUP_F_main_BB__138_47;
LEGUP_F_main_BB_roundAndPackFloat64exiti_204:
		next_state = LEGUP_F_main_BB_float64_divexit_205;
LEGUP_F_main_BB_shift64RightJammingexitii_201:
	if ((main_shift64RightJammingexitii_242 == 1'd1))
		next_state = LEGUP_F_main_BB_roundAndPackFloat64exiti_204;
	else if ((main_shift64RightJammingexitii_242 == 1'd0))
		next_state = LEGUP_F_main_BB__243_202;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %float_exception_flags.0 = phi i32 [ 0, %0 ], [ %float_exception_flags.6, %float64_div.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_float_exception_flags0 = 32'd0;
	end
	/* main: %1*/
	/*   %float_exception_flags.0 = phi i32 [ 0, %0 ], [ %float_exception_flags.6, %float64_div.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_float64_divexit_207) & (memory_controller_waitrequest == 1'd0)) & (main_float64_divexit_exitcond_reg == 1'd0))) */ begin
		main_1_float_exception_flags0 = main_float64_divexit_float_exception_flags6_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %float_exception_flags.0 = phi i32 [ 0, %0 ], [ %float_exception_flags.6, %float64_div.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_float_exception_flags0_reg <= main_1_float_exception_flags0;
		if (start == 1'b0 && ^(main_1_float_exception_flags0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_float_exception_flags0_reg"); $finish; end
	end
	/* main: %1*/
	/*   %float_exception_flags.0 = phi i32 [ 0, %0 ], [ %float_exception_flags.6, %float64_div.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_divexit_207) & (memory_controller_waitrequest == 1'd0)) & (main_float64_divexit_exitcond_reg == 1'd0))) begin
		main_1_float_exception_flags0_reg <= main_1_float_exception_flags0;
		if (start == 1'b0 && ^(main_1_float_exception_flags0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_float_exception_flags0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %265, %float64_div.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_main_result02 = 32'd0;
	end
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %265, %float64_div.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_float64_divexit_207) & (memory_controller_waitrequest == 1'd0)) & (main_float64_divexit_exitcond_reg == 1'd0))) */ begin
		main_1_main_result02 = main_float64_divexit_265;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %265, %float64_div.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_main_result02_reg <= main_1_main_result02;
		if (start == 1'b0 && ^(main_1_main_result02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_main_result02_reg"); $finish; end
	end
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %265, %float64_div.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_divexit_207) & (memory_controller_waitrequest == 1'd0)) & (main_float64_divexit_exitcond_reg == 1'd0))) begin
		main_1_main_result02_reg <= main_1_main_result02;
		if (start == 1'b0 && ^(main_1_main_result02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_main_result02_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %i.01 = phi i32 [ 0, %0 ], [ %267, %float64_div.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_i01 = 32'd0;
	end
	/* main: %1*/
	/*   %i.01 = phi i32 [ 0, %0 ], [ %267, %float64_div.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_float64_divexit_207) & (memory_controller_waitrequest == 1'd0)) & (main_float64_divexit_exitcond_reg == 1'd0))) */ begin
		main_1_i01 = main_float64_divexit_267_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %i.01 = phi i32 [ 0, %0 ], [ %267, %float64_div.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_i01_reg <= main_1_i01;
		if (start == 1'b0 && ^(main_1_i01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i01_reg"); $finish; end
	end
	/* main: %1*/
	/*   %i.01 = phi i32 [ 0, %0 ], [ %267, %float64_div.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_divexit_207) & (memory_controller_waitrequest == 1'd0)) & (main_float64_divexit_exitcond_reg == 1'd0))) begin
		main_1_i01_reg <= main_1_i01;
		if (start == 1'b0 && ^(main_1_i01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i01_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep_int = ptrtoint [22 x i64]* @a_input to i32*/
if (reset) begin main_1_gep_int = 0; end
		main_1_gep_int = 1'd0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_int = ptrtoint [22 x i64]* @a_input to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_gep_int_reg <= main_1_gep_int;
		if (start == 1'b0 && ^(main_1_gep_int) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_int_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep_array = mul i32 %i.01, 8*/
		main_1_gep_array = (main_1_i01_reg * 32'd8);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_array = mul i32 %i.01, 8*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_gep_array_reg <= main_1_gep_array;
		if (start == 1'b0 && ^(main_1_gep_array) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_array_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep = add i32 %gep_int, %gep_array*/
		main_1_gep = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_gep_reg <= main_1_gep;
		if (start == 1'b0 && ^(main_1_gep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %gep6 = add i32 %gep_int4, %gep_array5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_37)) begin
		main_1_gep_reg <= main_normalizeFloat64Subnormalexit10i_gep6;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_gep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %107 = add i32 %106, %105*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_38)) begin
		main_1_gep_reg <= main_normalizeFloat64Subnormalexit10i_107;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %gep12 = add i32 %gep_int10, %gep_array11*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexit_206)) begin
		main_1_gep_reg <= main_float64_divexit_gep12;
		if (start == 1'b0 && ^(main_float64_divexit_gep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %gep9 = add i32 %gep_int7, %gep_array8*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_45)) begin
		main_1_gep_reg <= main_normalizeFloat64Subnormalexiti_gep9;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_gep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %133 = add i32 %132, %131*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_46)) begin
		main_1_gep_reg <= main_normalizeFloat64Subnormalexiti_133;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %138*/
	/*   %142 = add nsw i32 %141, 1021*/
	if ((cur_state == LEGUP_F_main_BB__138_47)) begin
		main_1_gep_reg <= main_138_142;
		if (start == 1'b0 && ^(main_138_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %2 = inttoptr i32 %gep to i64**/
		main_1_2 = main_1_gep;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = inttoptr i32 %gep to i64**/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %3 = load i64* %2, align 8, !tbaa !1*/
		main_1_3 = a_input_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %3 = load i64* %2, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_3_reg <= main_1_3;
		if (start == 1'b0 && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep_int1 = ptrtoint [22 x i64]* @b_input to i32*/
if (reset) begin main_1_gep_int1 = 0; end
		main_1_gep_int1 = 1'd0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_int1 = ptrtoint [22 x i64]* @b_input to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_gep_int1_reg <= main_1_gep_int1;
		if (start == 1'b0 && ^(main_1_gep_int1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_int1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep_array2 = mul i32 %i.01, 8*/
		main_1_gep_array2 = (main_1_i01_reg * 32'd8);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_array2 = mul i32 %i.01, 8*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_gep_array2_reg <= main_1_gep_array2;
		if (start == 1'b0 && ^(main_1_gep_array2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_array2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
		main_1_gep3 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_gep3_reg <= main_1_gep3;
		if (start == 1'b0 && ^(main_1_gep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %108 = add nsw i32 %107, -11*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_38)) begin
		main_1_gep3_reg <= main_normalizeFloat64Subnormalexit10i_108;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %134 = add nsw i32 %133, -11*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_46)) begin
		main_1_gep3_reg <= main_normalizeFloat64Subnormalexiti_134;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %4 = inttoptr i32 %gep3 to i64**/
		main_1_4 = main_1_gep3;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %4 = inttoptr i32 %gep3 to i64**/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_4_reg <= main_1_4;
		if (start == 1'b0 && ^(main_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %5 = load i64* %4, align 8, !tbaa !1*/
		main_1_5 = b_input_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %5 = load i64* %4, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_5_reg <= main_1_5;
		if (start == 1'b0 && ^(main_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %6 = and i64 %3, 4503599627370495*/
		main_1_6 = (main_1_3 & 64'd4503599627370495);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %6 = and i64 %3, 4503599627370495*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_6_reg <= main_1_6;
		if (start == 1'b0 && ^(main_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %7 = lshr i64 %3, 52*/
		main_1_7 = (main_1_3 >>> (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %7 = lshr i64 %3, 52*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_7_reg <= main_1_7;
		if (start == 1'b0 && ^(main_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %.tr.i26.i = trunc i64 %7 to i32*/
		main_1_tri26i = main_1_7[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %.tr.i26.i = trunc i64 %7 to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_tri26i_reg <= main_1_tri26i;
		if (start == 1'b0 && ^(main_1_tri26i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_tri26i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %8 = and i32 %.tr.i26.i, 2047*/
		main_1_8 = (main_1_tri26i & 32'd2047);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %8 = and i32 %.tr.i26.i, 2047*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_8_reg <= main_1_8;
		if (start == 1'b0 && ^(main_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %9 = and i64 %5, 4503599627370495*/
		main_1_9 = (main_1_5 & 64'd4503599627370495);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = and i64 %5, 4503599627370495*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_9_reg <= main_1_9;
		if (start == 1'b0 && ^(main_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %10 = lshr i64 %5, 52*/
		main_1_10 = (main_1_5 >>> (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %10 = lshr i64 %5, 52*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_10_reg <= main_1_10;
		if (start == 1'b0 && ^(main_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %.tr.i25.i = trunc i64 %10 to i32*/
		main_1_tri25i = main_1_10[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %.tr.i25.i = trunc i64 %10 to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_tri25i_reg <= main_1_tri25i;
		if (start == 1'b0 && ^(main_1_tri25i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_tri25i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %11 = and i32 %.tr.i25.i, 2047*/
		main_1_11 = (main_1_tri25i & 32'd2047);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %11 = and i32 %.tr.i25.i, 2047*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_11_reg <= main_1_11;
		if (start == 1'b0 && ^(main_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %12 = xor i64 %5, %3*/
		main_1_12 = (main_1_5 ^ main_1_3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = xor i64 %5, %3*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_12_reg <= main_1_12;
		if (start == 1'b0 && ^(main_1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %13 = lshr i64 %12, 63*/
		main_1_13 = (main_1_12 >>> (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %13 = lshr i64 %12, 63*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_13_reg <= main_1_13;
		if (start == 1'b0 && ^(main_1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %14 = icmp eq i32 %8, 2047*/
		main_1_14 = (main_1_8 == 32'd2047);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %14 = icmp eq i32 %8, 2047*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_14_reg <= main_1_14;
		if (start == 1'b0 && ^(main_1_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %16 = icmp eq i64 %6, 0*/
		main_15_16 = (main_1_6_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %16 = icmp eq i64 %6, 0*/
	if ((cur_state == LEGUP_F_main_BB__15_4)) begin
		main_15_16_reg <= main_15_16;
		if (start == 1'b0 && ^(main_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %17*/
	/*   %18 = and i64 %3, 9221120237041090560*/
		main_17_18 = (main_1_3_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %17*/
	/*   %18 = and i64 %3, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB__17_5)) begin
		main_17_18_reg <= main_17_18;
		if (start == 1'b0 && ^(main_17_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_17_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %17*/
	/*   %19 = icmp eq i64 %18, 9218868437227405312*/
		main_17_19 = (main_17_18 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %17*/
	/*   %19 = icmp eq i64 %18, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__17_5)) begin
		main_17_19_reg <= main_17_19;
		if (start == 1'b0 && ^(main_17_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_17_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %21 = and i64 %3, 2251799813685247*/
		main_20_21 = (main_1_3_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %21 = and i64 %3, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__20_6)) begin
		main_20_21_reg <= main_20_21;
		if (start == 1'b0 && ^(main_20_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %22 = icmp ne i64 %21, 0*/
		main_20_22 = (main_20_21 != 64'd0);
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %22 = icmp ne i64 %21, 0*/
	if ((cur_state == LEGUP_F_main_BB__20_6)) begin
		main_20_22_reg <= main_20_22;
		if (start == 1'b0 && ^(main_20_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i18.i*/
	/*   %23 = phi i1 [ false, %17 ], [ %22, %20 ]*/
	if ((((cur_state == LEGUP_F_main_BB__17_5) & (memory_controller_waitrequest == 1'd0)) & (main_17_19 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i18i_23 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit1.i18.i*/
	/*   %23 = phi i1 [ false, %17 ], [ %22, %20 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__20_6) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexit1i18i_23 = main_20_22;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i18.i*/
	/*   %23 = phi i1 [ false, %17 ], [ %22, %20 ]*/
	if ((((cur_state == LEGUP_F_main_BB__17_5) & (memory_controller_waitrequest == 1'd0)) & (main_17_19 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i18i_23_reg <= main_float64_is_signaling_nanexit1i18i_23;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i18i_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i18i_23_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit1.i18.i*/
	/*   %23 = phi i1 [ false, %17 ], [ %22, %20 ]*/
	if (((cur_state == LEGUP_F_main_BB__20_6) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexit1i18i_23_reg <= main_float64_is_signaling_nanexit1i18i_23;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i18i_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i18i_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i18.i*/
	/*   %24 = trunc i64 %5 to i63*/
		main_float64_is_signaling_nanexit1i18i_24 = main_1_5_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i18.i*/
	/*   %24 = trunc i64 %5 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i18i_7)) begin
		main_float64_is_signaling_nanexit1i18i_24_reg <= main_float64_is_signaling_nanexit1i18i_24;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i18i_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i18i_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i18.i*/
	/*   %25 = icmp ugt i63 %24, -4503599627370496*/
		main_float64_is_signaling_nanexit1i18i_25 = (main_float64_is_signaling_nanexit1i18i_24 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i18.i*/
	/*   %25 = icmp ugt i63 %24, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i18i_7)) begin
		main_float64_is_signaling_nanexit1i18i_25_reg <= main_float64_is_signaling_nanexit1i18i_25;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i18i_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i18i_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i18.i*/
	/*   %26 = and i64 %5, 9221120237041090560*/
		main_float64_is_signaling_nanexit1i18i_26 = (main_1_5_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i18.i*/
	/*   %26 = and i64 %5, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i18i_7)) begin
		main_float64_is_signaling_nanexit1i18i_26_reg <= main_float64_is_signaling_nanexit1i18i_26;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i18i_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i18i_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i18.i*/
	/*   %27 = icmp eq i64 %26, 9218868437227405312*/
		main_float64_is_signaling_nanexit1i18i_27 = (main_float64_is_signaling_nanexit1i18i_26 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i18.i*/
	/*   %27 = icmp eq i64 %26, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i18i_7)) begin
		main_float64_is_signaling_nanexit1i18i_27_reg <= main_float64_is_signaling_nanexit1i18i_27;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i18i_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i18i_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %29 = and i64 %5, 2251799813685247*/
		main_28_29 = (main_1_5_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %29 = and i64 %5, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__28_8)) begin
		main_28_29_reg <= main_28_29;
		if (start == 1'b0 && ^(main_28_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %30 = icmp ne i64 %29, 0*/
		main_28_30 = (main_28_29 != 64'd0);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %30 = icmp ne i64 %29, 0*/
	if ((cur_state == LEGUP_F_main_BB__28_8)) begin
		main_28_30_reg <= main_28_30;
		if (start == 1'b0 && ^(main_28_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i19.i*/
	/*   %31 = phi i1 [ false, %float64_is_signaling_nan.exit1.i18.i ], [ %30, %28 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i18i_7) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i18i_27 == 1'd0))) begin
		main_float64_is_signaling_nanexiti19i_31 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit.i19.i*/
	/*   %31 = phi i1 [ false, %float64_is_signaling_nan.exit1.i18.i ], [ %30, %28 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__28_8) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexiti19i_31 = main_28_30;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i19.i*/
	/*   %31 = phi i1 [ false, %float64_is_signaling_nan.exit1.i18.i ], [ %30, %28 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i18i_7) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i18i_27 == 1'd0))) begin
		main_float64_is_signaling_nanexiti19i_31_reg <= main_float64_is_signaling_nanexiti19i_31;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti19i_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti19i_31_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit.i19.i*/
	/*   %31 = phi i1 [ false, %float64_is_signaling_nan.exit1.i18.i ], [ %30, %28 ]*/
	if (((cur_state == LEGUP_F_main_BB__28_8) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexiti19i_31_reg <= main_float64_is_signaling_nanexiti19i_31;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti19i_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti19i_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i19.i*/
	/*   %32 = or i1 %23, %31*/
		main_float64_is_signaling_nanexiti19i_32 = (main_float64_is_signaling_nanexit1i18i_23_reg | main_float64_is_signaling_nanexiti19i_31_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i19.i*/
	/*   %32 = or i1 %23, %31*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti19i_9)) begin
		main_float64_is_signaling_nanexiti19i_32_reg <= main_float64_is_signaling_nanexiti19i_32;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti19i_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti19i_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i19.i*/
	/*   %33 = or i32 %float_exception_flags.0, 16*/
		main_float64_is_signaling_nanexiti19i_33 = (main_1_float_exception_flags0_reg | 32'd16);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i19.i*/
	/*   %33 = or i32 %float_exception_flags.0, 16*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti19i_9)) begin
		main_float64_is_signaling_nanexiti19i_33_reg <= main_float64_is_signaling_nanexiti19i_33;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti19i_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti19i_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i19.i*/
	/*   %.float_exception_flags.0 = select i1 %32, i32 %33, i32 %float_exception_flags.0*/
		main_float64_is_signaling_nanexiti19i_float_exception_flags0 = (main_float64_is_signaling_nanexiti19i_32 ? main_float64_is_signaling_nanexiti19i_33 : main_1_float_exception_flags0_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i19.i*/
	/*   %.float_exception_flags.0 = select i1 %32, i32 %33, i32 %float_exception_flags.0*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti19i_9)) begin
		main_float64_is_signaling_nanexiti19i_float_exception_flags0_reg <= main_float64_is_signaling_nanexiti19i_float_exception_flags0;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti19i_float_exception_flags0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti19i_float_exception_flags0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i19.i*/
	/*   %. = select i1 %32, i1 %31, i1 %25*/
		main_float64_is_signaling_nanexiti19i_ = (main_float64_is_signaling_nanexiti19i_32 ? main_float64_is_signaling_nanexiti19i_31_reg : main_float64_is_signaling_nanexit1i18i_25_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i19.i*/
	/*   %. = select i1 %32, i1 %31, i1 %25*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti19i_9)) begin
		main_float64_is_signaling_nanexiti19i__reg <= main_float64_is_signaling_nanexiti19i_;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti19i_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti19i__reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i19.i*/
	/*   %.mux2.v.i22.i = select i1 %., i64 %5, i64 %3*/
		main_float64_is_signaling_nanexiti19i_mux2vi22i = (main_float64_is_signaling_nanexiti19i__reg ? main_1_5_reg : main_1_3_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i19.i*/
	/*   %.mux2.v.i22.i = select i1 %., i64 %5, i64 %3*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti19i_10)) begin
		main_float64_is_signaling_nanexiti19i_mux2vi22i_reg <= main_float64_is_signaling_nanexiti19i_mux2vi22i;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti19i_mux2vi22i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti19i_mux2vi22i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i19.i*/
	/*   %.mux2.i23.i = or i64 %.mux2.v.i22.i, 2251799813685248*/
		main_float64_is_signaling_nanexiti19i_mux2i23i = (main_float64_is_signaling_nanexiti19i_mux2vi22i | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i19.i*/
	/*   %.mux2.i23.i = or i64 %.mux2.v.i22.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti19i_10)) begin
		main_float64_is_signaling_nanexiti19i_mux2i23i_reg <= main_float64_is_signaling_nanexiti19i_mux2i23i;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti19i_mux2i23i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti19i_mux2i23i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %34*/
	/*   %35 = icmp eq i32 %11, 2047*/
		main_34_35 = (main_1_11_reg == 32'd2047);
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %35 = icmp eq i32 %11, 2047*/
	if ((cur_state == LEGUP_F_main_BB__34_11)) begin
		main_34_35_reg <= main_34_35;
		if (start == 1'b0 && ^(main_34_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %36*/
	/*   %37 = icmp eq i64 %9, 0*/
		main_36_37 = (main_1_9_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %36*/
	/*   %37 = icmp eq i64 %9, 0*/
	if ((cur_state == LEGUP_F_main_BB__36_12)) begin
		main_36_37_reg <= main_36_37;
		if (start == 1'b0 && ^(main_36_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_36_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %38*/
	/*   %39 = and i64 %3, 9221120237041090560*/
		main_38_39 = (main_1_3_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %38*/
	/*   %39 = and i64 %3, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB__38_13)) begin
		main_38_39_reg <= main_38_39;
		if (start == 1'b0 && ^(main_38_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %38*/
	/*   %40 = icmp eq i64 %39, 9218868437227405312*/
		main_38_40 = (main_38_39 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %38*/
	/*   %40 = icmp eq i64 %39, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__38_13)) begin
		main_38_40_reg <= main_38_40;
		if (start == 1'b0 && ^(main_38_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %41*/
	/*   %42 = and i64 %3, 2251799813685247*/
		main_41_42 = (main_1_3_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %41*/
	/*   %42 = and i64 %3, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__41_14)) begin
		main_41_42_reg <= main_41_42;
		if (start == 1'b0 && ^(main_41_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_41_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %41*/
	/*   %43 = icmp ne i64 %42, 0*/
		main_41_43 = (main_41_42 != 64'd0);
end
always @(posedge clk) begin
	/* main: %41*/
	/*   %43 = icmp ne i64 %42, 0*/
	if ((cur_state == LEGUP_F_main_BB__41_14)) begin
		main_41_43_reg <= main_41_43;
		if (start == 1'b0 && ^(main_41_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_41_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i*/
	/*   %44 = phi i1 [ false, %38 ], [ %43, %41 ]*/
	if ((((cur_state == LEGUP_F_main_BB__38_13) & (memory_controller_waitrequest == 1'd0)) & (main_38_40 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i11i_44 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit1.i11.i*/
	/*   %44 = phi i1 [ false, %38 ], [ %43, %41 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__41_14) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexit1i11i_44 = main_41_43;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i*/
	/*   %44 = phi i1 [ false, %38 ], [ %43, %41 ]*/
	if ((((cur_state == LEGUP_F_main_BB__38_13) & (memory_controller_waitrequest == 1'd0)) & (main_38_40 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i11i_44_reg <= main_float64_is_signaling_nanexit1i11i_44;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i11i_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i11i_44_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit1.i11.i*/
	/*   %44 = phi i1 [ false, %38 ], [ %43, %41 ]*/
	if (((cur_state == LEGUP_F_main_BB__41_14) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexit1i11i_44_reg <= main_float64_is_signaling_nanexit1i11i_44;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i11i_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i11i_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i*/
	/*   %45 = trunc i64 %5 to i63*/
		main_float64_is_signaling_nanexit1i11i_45 = main_1_5_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i*/
	/*   %45 = trunc i64 %5 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_15)) begin
		main_float64_is_signaling_nanexit1i11i_45_reg <= main_float64_is_signaling_nanexit1i11i_45;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i11i_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i11i_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i*/
	/*   %46 = icmp ugt i63 %45, -4503599627370496*/
		main_float64_is_signaling_nanexit1i11i_46 = (main_float64_is_signaling_nanexit1i11i_45 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i*/
	/*   %46 = icmp ugt i63 %45, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_15)) begin
		main_float64_is_signaling_nanexit1i11i_46_reg <= main_float64_is_signaling_nanexit1i11i_46;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i11i_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i11i_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i*/
	/*   %47 = and i64 %5, 9221120237041090560*/
		main_float64_is_signaling_nanexit1i11i_47 = (main_1_5_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i*/
	/*   %47 = and i64 %5, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_15)) begin
		main_float64_is_signaling_nanexit1i11i_47_reg <= main_float64_is_signaling_nanexit1i11i_47;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i11i_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i11i_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i*/
	/*   %48 = icmp eq i64 %47, 9218868437227405312*/
		main_float64_is_signaling_nanexit1i11i_48 = (main_float64_is_signaling_nanexit1i11i_47 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i*/
	/*   %48 = icmp eq i64 %47, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_15)) begin
		main_float64_is_signaling_nanexit1i11i_48_reg <= main_float64_is_signaling_nanexit1i11i_48;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i11i_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i11i_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %49*/
	/*   %50 = and i64 %5, 2251799813685247*/
		main_49_50 = (main_1_5_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %49*/
	/*   %50 = and i64 %5, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__49_16)) begin
		main_49_50_reg <= main_49_50;
		if (start == 1'b0 && ^(main_49_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_49_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %49*/
	/*   %51 = icmp ne i64 %50, 0*/
		main_49_51 = (main_49_50 != 64'd0);
end
always @(posedge clk) begin
	/* main: %49*/
	/*   %51 = icmp ne i64 %50, 0*/
	if ((cur_state == LEGUP_F_main_BB__49_16)) begin
		main_49_51_reg <= main_49_51;
		if (start == 1'b0 && ^(main_49_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_49_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i12.i*/
	/*   %52 = phi i1 [ false, %float64_is_signaling_nan.exit1.i11.i ], [ %51, %49 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_15) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i11i_48 == 1'd0))) begin
		main_float64_is_signaling_nanexiti12i_52 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit.i12.i*/
	/*   %52 = phi i1 [ false, %float64_is_signaling_nan.exit1.i11.i ], [ %51, %49 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__49_16) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexiti12i_52 = main_49_51;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i12.i*/
	/*   %52 = phi i1 [ false, %float64_is_signaling_nan.exit1.i11.i ], [ %51, %49 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_15) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i11i_48 == 1'd0))) begin
		main_float64_is_signaling_nanexiti12i_52_reg <= main_float64_is_signaling_nanexiti12i_52;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti12i_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti12i_52_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit.i12.i*/
	/*   %52 = phi i1 [ false, %float64_is_signaling_nan.exit1.i11.i ], [ %51, %49 ]*/
	if (((cur_state == LEGUP_F_main_BB__49_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexiti12i_52_reg <= main_float64_is_signaling_nanexiti12i_52;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti12i_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti12i_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i12.i*/
	/*   %53 = or i1 %44, %52*/
		main_float64_is_signaling_nanexiti12i_53 = (main_float64_is_signaling_nanexit1i11i_44_reg | main_float64_is_signaling_nanexiti12i_52_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i12.i*/
	/*   %53 = or i1 %44, %52*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti12i_17)) begin
		main_float64_is_signaling_nanexiti12i_53_reg <= main_float64_is_signaling_nanexiti12i_53;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti12i_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti12i_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i12.i*/
	/*   %54 = or i32 %float_exception_flags.0, 16*/
		main_float64_is_signaling_nanexiti12i_54 = (main_1_float_exception_flags0_reg | 32'd16);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i12.i*/
	/*   %54 = or i32 %float_exception_flags.0, 16*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti12i_17)) begin
		main_float64_is_signaling_nanexiti12i_54_reg <= main_float64_is_signaling_nanexiti12i_54;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti12i_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti12i_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i12.i*/
	/*   %.float_exception_flags.017 = select i1 %53, i32 %54, i32 %float_exception_flags.0*/
		main_float64_is_signaling_nanexiti12i_float_exception_flags017 = (main_float64_is_signaling_nanexiti12i_53 ? main_float64_is_signaling_nanexiti12i_54 : main_1_float_exception_flags0_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i12.i*/
	/*   %.float_exception_flags.017 = select i1 %53, i32 %54, i32 %float_exception_flags.0*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti12i_17)) begin
		main_float64_is_signaling_nanexiti12i_float_exception_flags017_reg <= main_float64_is_signaling_nanexiti12i_float_exception_flags017;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti12i_float_exception_flags017) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti12i_float_exception_flags017_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i12.i*/
	/*   %.18 = select i1 %53, i1 %52, i1 %46*/
		main_float64_is_signaling_nanexiti12i_18 = (main_float64_is_signaling_nanexiti12i_53 ? main_float64_is_signaling_nanexiti12i_52_reg : main_float64_is_signaling_nanexit1i11i_46_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i12.i*/
	/*   %.18 = select i1 %53, i1 %52, i1 %46*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti12i_17)) begin
		main_float64_is_signaling_nanexiti12i_18_reg <= main_float64_is_signaling_nanexiti12i_18;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti12i_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti12i_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i12.i*/
	/*   %.mux2.v.i15.i = select i1 %.18, i64 %5, i64 %3*/
		main_float64_is_signaling_nanexiti12i_mux2vi15i = (main_float64_is_signaling_nanexiti12i_18_reg ? main_1_5_reg : main_1_3_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i12.i*/
	/*   %.mux2.v.i15.i = select i1 %.18, i64 %5, i64 %3*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti12i_18)) begin
		main_float64_is_signaling_nanexiti12i_mux2vi15i_reg <= main_float64_is_signaling_nanexiti12i_mux2vi15i;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti12i_mux2vi15i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti12i_mux2vi15i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i12.i*/
	/*   %.mux2.i16.i = or i64 %.mux2.v.i15.i, 2251799813685248*/
		main_float64_is_signaling_nanexiti12i_mux2i16i = (main_float64_is_signaling_nanexiti12i_mux2vi15i | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i12.i*/
	/*   %.mux2.i16.i = or i64 %.mux2.v.i15.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti12i_18)) begin
		main_float64_is_signaling_nanexiti12i_mux2i16i_reg <= main_float64_is_signaling_nanexiti12i_mux2i16i;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti12i_mux2i16i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti12i_mux2i16i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %56 = or i32 %float_exception_flags.0, 16*/
		main_55_56 = (main_1_float_exception_flags0_reg | 32'd16);
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %56 = or i32 %float_exception_flags.0, 16*/
	if ((cur_state == LEGUP_F_main_BB__55_19)) begin
		main_55_56_reg <= main_55_56;
		if (start == 1'b0 && ^(main_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %57*/
	/*   %58 = shl nuw i64 %13, 63*/
		main_57_58 = (main_1_13_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %57*/
	/*   %58 = shl nuw i64 %13, 63*/
	if ((cur_state == LEGUP_F_main_BB__57_20)) begin
		main_57_58_reg <= main_57_58;
		if (start == 1'b0 && ^(main_57_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_57_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %57*/
	/*   %59 = or i64 %58, 9218868437227405312*/
		main_57_59 = (main_57_58 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %57*/
	/*   %59 = or i64 %58, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__57_20)) begin
		main_57_59_reg <= main_57_59;
		if (start == 1'b0 && ^(main_57_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_57_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %61*/
	/*   %62 = icmp eq i64 %9, 0*/
		main_61_62 = (main_1_9_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %61*/
	/*   %62 = icmp eq i64 %9, 0*/
	if ((cur_state == LEGUP_F_main_BB__61_22)) begin
		main_61_62_reg <= main_61_62;
		if (start == 1'b0 && ^(main_61_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_61_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %63*/
	/*   %64 = and i64 %3, 9221120237041090560*/
		main_63_64 = (main_1_3_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %63*/
	/*   %64 = and i64 %3, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB__63_23)) begin
		main_63_64_reg <= main_63_64;
		if (start == 1'b0 && ^(main_63_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_63_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %63*/
	/*   %65 = icmp eq i64 %64, 9218868437227405312*/
		main_63_65 = (main_63_64 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %63*/
	/*   %65 = icmp eq i64 %64, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__63_23)) begin
		main_63_65_reg <= main_63_65;
		if (start == 1'b0 && ^(main_63_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_63_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %67 = and i64 %3, 2251799813685247*/
		main_66_67 = (main_1_3_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %67 = and i64 %3, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__66_24)) begin
		main_66_67_reg <= main_66_67;
		if (start == 1'b0 && ^(main_66_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %68 = icmp ne i64 %67, 0*/
		main_66_68 = (main_66_67 != 64'd0);
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %68 = icmp ne i64 %67, 0*/
	if ((cur_state == LEGUP_F_main_BB__66_24)) begin
		main_66_68_reg <= main_66_68;
		if (start == 1'b0 && ^(main_66_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %69 = phi i1 [ false, %63 ], [ %68, %66 ]*/
	if ((((cur_state == LEGUP_F_main_BB__63_23) & (memory_controller_waitrequest == 1'd0)) & (main_63_65 == 1'd0))) begin
		main_float64_is_signaling_nanexit1ii_69 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %69 = phi i1 [ false, %63 ], [ %68, %66 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__66_24) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexit1ii_69 = main_66_68;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %69 = phi i1 [ false, %63 ], [ %68, %66 ]*/
	if ((((cur_state == LEGUP_F_main_BB__63_23) & (memory_controller_waitrequest == 1'd0)) & (main_63_65 == 1'd0))) begin
		main_float64_is_signaling_nanexit1ii_69_reg <= main_float64_is_signaling_nanexit1ii_69;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_69_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %69 = phi i1 [ false, %63 ], [ %68, %66 ]*/
	if (((cur_state == LEGUP_F_main_BB__66_24) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexit1ii_69_reg <= main_float64_is_signaling_nanexit1ii_69;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %70 = trunc i64 %5 to i63*/
		main_float64_is_signaling_nanexit1ii_70 = main_1_5_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %70 = trunc i64 %5 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_25)) begin
		main_float64_is_signaling_nanexit1ii_70_reg <= main_float64_is_signaling_nanexit1ii_70;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %71 = icmp ugt i63 %70, -4503599627370496*/
		main_float64_is_signaling_nanexit1ii_71 = (main_float64_is_signaling_nanexit1ii_70 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %71 = icmp ugt i63 %70, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_25)) begin
		main_float64_is_signaling_nanexit1ii_71_reg <= main_float64_is_signaling_nanexit1ii_71;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %72 = and i64 %5, 9221120237041090560*/
		main_float64_is_signaling_nanexit1ii_72 = (main_1_5_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %72 = and i64 %5, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_25)) begin
		main_float64_is_signaling_nanexit1ii_72_reg <= main_float64_is_signaling_nanexit1ii_72;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %73 = icmp eq i64 %72, 9218868437227405312*/
		main_float64_is_signaling_nanexit1ii_73 = (main_float64_is_signaling_nanexit1ii_72 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %73 = icmp eq i64 %72, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_25)) begin
		main_float64_is_signaling_nanexit1ii_73_reg <= main_float64_is_signaling_nanexit1ii_73;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %74*/
	/*   %75 = and i64 %5, 2251799813685247*/
		main_74_75 = (main_1_5_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %74*/
	/*   %75 = and i64 %5, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__74_26)) begin
		main_74_75_reg <= main_74_75;
		if (start == 1'b0 && ^(main_74_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %74*/
	/*   %76 = icmp ne i64 %75, 0*/
		main_74_76 = (main_74_75 != 64'd0);
end
always @(posedge clk) begin
	/* main: %74*/
	/*   %76 = icmp ne i64 %75, 0*/
	if ((cur_state == LEGUP_F_main_BB__74_26)) begin
		main_74_76_reg <= main_74_76;
		if (start == 1'b0 && ^(main_74_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %77 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i ], [ %76, %74 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_25) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1ii_73 == 1'd0))) begin
		main_float64_is_signaling_nanexitii_77 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %77 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i ], [ %76, %74 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__74_26) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexitii_77 = main_74_76;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %77 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i ], [ %76, %74 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_25) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1ii_73 == 1'd0))) begin
		main_float64_is_signaling_nanexitii_77_reg <= main_float64_is_signaling_nanexitii_77;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitii_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitii_77_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %77 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i ], [ %76, %74 ]*/
	if (((cur_state == LEGUP_F_main_BB__74_26) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexitii_77_reg <= main_float64_is_signaling_nanexitii_77;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitii_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitii_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %78 = or i1 %69, %77*/
		main_float64_is_signaling_nanexitii_78 = (main_float64_is_signaling_nanexit1ii_69_reg | main_float64_is_signaling_nanexitii_77_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %78 = or i1 %69, %77*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii_27)) begin
		main_float64_is_signaling_nanexitii_78_reg <= main_float64_is_signaling_nanexitii_78;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitii_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitii_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %79 = or i32 %float_exception_flags.0, 16*/
		main_float64_is_signaling_nanexitii_79 = (main_1_float_exception_flags0_reg | 32'd16);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %79 = or i32 %float_exception_flags.0, 16*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii_27)) begin
		main_float64_is_signaling_nanexitii_79_reg <= main_float64_is_signaling_nanexitii_79;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitii_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitii_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %.float_exception_flags.019 = select i1 %78, i32 %79, i32 %float_exception_flags.0*/
		main_float64_is_signaling_nanexitii_float_exception_flags019 = (main_float64_is_signaling_nanexitii_78 ? main_float64_is_signaling_nanexitii_79 : main_1_float_exception_flags0_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %.float_exception_flags.019 = select i1 %78, i32 %79, i32 %float_exception_flags.0*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii_27)) begin
		main_float64_is_signaling_nanexitii_float_exception_flags019_reg <= main_float64_is_signaling_nanexitii_float_exception_flags019;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitii_float_exception_flags019) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitii_float_exception_flags019_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %.20 = select i1 %78, i1 %77, i1 %71*/
		main_float64_is_signaling_nanexitii_20 = (main_float64_is_signaling_nanexitii_78 ? main_float64_is_signaling_nanexitii_77_reg : main_float64_is_signaling_nanexit1ii_71_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %.20 = select i1 %78, i1 %77, i1 %71*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii_27)) begin
		main_float64_is_signaling_nanexitii_20_reg <= main_float64_is_signaling_nanexitii_20;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitii_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitii_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %.mux2.v.i.i = select i1 %.20, i64 %5, i64 %3*/
		main_float64_is_signaling_nanexitii_mux2vii = (main_float64_is_signaling_nanexitii_20_reg ? main_1_5_reg : main_1_3_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %.mux2.v.i.i = select i1 %.20, i64 %5, i64 %3*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii_28)) begin
		main_float64_is_signaling_nanexitii_mux2vii_reg <= main_float64_is_signaling_nanexitii_mux2vii;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitii_mux2vii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitii_mux2vii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %.mux2.i.i = or i64 %.mux2.v.i.i, 2251799813685248*/
		main_float64_is_signaling_nanexitii_mux2ii = (main_float64_is_signaling_nanexitii_mux2vii | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i*/
	/*   %.mux2.i.i = or i64 %.mux2.v.i.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii_28)) begin
		main_float64_is_signaling_nanexitii_mux2ii_reg <= main_float64_is_signaling_nanexitii_mux2ii;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitii_mux2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitii_mux2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %80*/
	/*   %81 = shl nuw i64 %13, 63*/
		main_80_81 = (main_1_13_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %80*/
	/*   %81 = shl nuw i64 %13, 63*/
	if ((cur_state == LEGUP_F_main_BB__80_29)) begin
		main_80_81_reg <= main_80_81;
		if (start == 1'b0 && ^(main_80_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %82*/
	/*   %83 = icmp eq i64 %9, 0*/
		main_82_83 = (main_1_9_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %82*/
	/*   %83 = icmp eq i64 %9, 0*/
	if ((cur_state == LEGUP_F_main_BB__82_30)) begin
		main_82_83_reg <= main_82_83;
		if (start == 1'b0 && ^(main_82_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_82_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %84*/
	/*   %85 = zext i32 %8 to i64*/
		main_84_85 = main_1_8_reg;
end
always @(posedge clk) begin
	/* main: %84*/
	/*   %85 = zext i32 %8 to i64*/
	if ((cur_state == LEGUP_F_main_BB__84_31)) begin
		main_84_85_reg <= main_84_85;
		if (start == 1'b0 && ^(main_84_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_84_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %84*/
	/*   %86 = or i64 %85, %6*/
		main_84_86 = (main_84_85 | main_1_6_reg);
end
always @(posedge clk) begin
	/* main: %84*/
	/*   %86 = or i64 %85, %6*/
	if ((cur_state == LEGUP_F_main_BB__84_31)) begin
		main_84_86_reg <= main_84_86;
		if (start == 1'b0 && ^(main_84_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_84_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %84*/
	/*   %87 = icmp eq i64 %86, 0*/
		main_84_87 = (main_84_86 == 64'd0);
end
always @(posedge clk) begin
	/* main: %84*/
	/*   %87 = icmp eq i64 %86, 0*/
	if ((cur_state == LEGUP_F_main_BB__84_31)) begin
		main_84_87_reg <= main_84_87;
		if (start == 1'b0 && ^(main_84_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_84_87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %89 = or i32 %float_exception_flags.0, 16*/
		main_88_89 = (main_1_float_exception_flags0_reg | 32'd16);
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %89 = or i32 %float_exception_flags.0, 16*/
	if ((cur_state == LEGUP_F_main_BB__88_32)) begin
		main_88_89_reg <= main_88_89;
		if (start == 1'b0 && ^(main_88_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %90*/
	/*   %91 = or i32 %float_exception_flags.0, 2*/
		main_90_91 = (main_1_float_exception_flags0_reg | 32'd2);
end
always @(posedge clk) begin
	/* main: %90*/
	/*   %91 = or i32 %float_exception_flags.0, 2*/
	if ((cur_state == LEGUP_F_main_BB__90_33)) begin
		main_90_91_reg <= main_90_91;
		if (start == 1'b0 && ^(main_90_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_90_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %90*/
	/*   %92 = shl nuw i64 %13, 63*/
		main_90_92 = (main_1_13_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %90*/
	/*   %92 = shl nuw i64 %13, 63*/
	if ((cur_state == LEGUP_F_main_BB__90_33)) begin
		main_90_92_reg <= main_90_92;
		if (start == 1'b0 && ^(main_90_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_90_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %90*/
	/*   %93 = or i64 %92, 9218868437227405312*/
		main_90_93 = (main_90_92 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %90*/
	/*   %93 = or i64 %92, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__90_33)) begin
		main_90_93_reg <= main_90_93;
		if (start == 1'b0 && ^(main_90_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_90_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %94*/
	/*   %95 = icmp ult i64 %9, 4294967296*/
		main_94_95 = (main_1_9_reg < 64'd4294967296);
end
always @(posedge clk) begin
	/* main: %94*/
	/*   %95 = icmp ult i64 %9, 4294967296*/
	if ((cur_state == LEGUP_F_main_BB__94_34)) begin
		main_94_95_reg <= main_94_95;
		if (start == 1'b0 && ^(main_94_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_94_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %94*/
	/*   %96 = lshr i64 %9, 32*/
		main_94_96 = (main_1_9_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %94*/
	/*   %96 = lshr i64 %9, 32*/
	if ((cur_state == LEGUP_F_main_BB__94_34)) begin
		main_94_96_reg <= main_94_96;
		if (start == 1'b0 && ^(main_94_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_94_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %94*/
	/*   %a.sink.i.i3.i = select i1 %95, i64 %5, i64 %96*/
		main_94_asinkii3i = (main_94_95 ? main_1_5_reg : main_94_96);
end
always @(posedge clk) begin
	/* main: %94*/
	/*   %a.sink.i.i3.i = select i1 %95, i64 %5, i64 %96*/
	if ((cur_state == LEGUP_F_main_BB__94_34)) begin
		main_94_asinkii3i_reg <= main_94_asinkii3i;
		if (start == 1'b0 && ^(main_94_asinkii3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_94_asinkii3i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %94*/
	/*   %shiftCount.0.i.i4.i = select i1 %95, i32 32, i32 0*/
		main_94_shiftCount0ii4i = (main_94_95 ? 32'd32 : 32'd0);
end
always @(posedge clk) begin
	/* main: %94*/
	/*   %shiftCount.0.i.i4.i = select i1 %95, i32 32, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__94_34)) begin
		main_94_shiftCount0ii4i_reg <= main_94_shiftCount0ii4i;
		if (start == 1'b0 && ^(main_94_shiftCount0ii4i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_94_shiftCount0ii4i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %94*/
	/*   %extract.t.i.i5.i = trunc i64 %a.sink.i.i3.i to i32*/
		main_94_extracttii5i = main_94_asinkii3i[31:0];
end
always @(posedge clk) begin
	/* main: %94*/
	/*   %extract.t.i.i5.i = trunc i64 %a.sink.i.i3.i to i32*/
	if ((cur_state == LEGUP_F_main_BB__94_34)) begin
		main_94_extracttii5i_reg <= main_94_extracttii5i;
		if (start == 1'b0 && ^(main_94_extracttii5i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_94_extracttii5i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %94*/
	/*   %97 = icmp ult i32 %extract.t.i.i5.i, 65536*/
		main_94_97 = (main_94_extracttii5i < 32'd65536);
end
always @(posedge clk) begin
	/* main: %94*/
	/*   %97 = icmp ult i32 %extract.t.i.i5.i, 65536*/
	if ((cur_state == LEGUP_F_main_BB__94_34)) begin
		main_94_97_reg <= main_94_97;
		if (start == 1'b0 && ^(main_94_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_94_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %94*/
	/*   %98 = shl i32 %extract.t.i.i5.i, 16*/
		main_94_98 = (main_94_extracttii5i <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %94*/
	/*   %98 = shl i32 %extract.t.i.i5.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__94_34)) begin
		main_94_98_reg <= main_94_98;
		if (start == 1'b0 && ^(main_94_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_94_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %94*/
	/*   %.a.i.i.i6.i = select i1 %97, i32 %98, i32 %extract.t.i.i5.i*/
		main_94_aiii6i = (main_94_97 ? main_94_98 : main_94_extracttii5i);
end
always @(posedge clk) begin
	/* main: %94*/
	/*   %.a.i.i.i6.i = select i1 %97, i32 %98, i32 %extract.t.i.i5.i*/
	if ((cur_state == LEGUP_F_main_BB__94_34)) begin
		main_94_aiii6i_reg <= main_94_aiii6i;
		if (start == 1'b0 && ^(main_94_aiii6i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_94_aiii6i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %94*/
	/*   %..i.i.i7.i = select i1 %97, i32 16, i32 0*/
		main_94_iii7i = (main_94_97 ? 32'd16 : 32'd0);
end
always @(posedge clk) begin
	/* main: %94*/
	/*   %..i.i.i7.i = select i1 %97, i32 16, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__94_34)) begin
		main_94_iii7i_reg <= main_94_iii7i;
		if (start == 1'b0 && ^(main_94_iii7i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_94_iii7i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %94*/
	/*   %99 = icmp ult i32 %.a.i.i.i6.i, 16777216*/
		main_94_99 = (main_94_aiii6i < 32'd16777216);
end
always @(posedge clk) begin
	/* main: %94*/
	/*   %99 = icmp ult i32 %.a.i.i.i6.i, 16777216*/
	if ((cur_state == LEGUP_F_main_BB__94_34)) begin
		main_94_99_reg <= main_94_99;
		if (start == 1'b0 && ^(main_94_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_94_99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %100*/
	/*   %101 = or i32 %..i.i.i7.i, 8*/
		main_100_101 = (main_94_iii7i_reg | 32'd8);
end
always @(posedge clk) begin
	/* main: %100*/
	/*   %101 = or i32 %..i.i.i7.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__100_35)) begin
		main_100_101_reg <= main_100_101;
		if (start == 1'b0 && ^(main_100_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_100_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %100*/
	/*   %102 = shl i32 %.a.i.i.i6.i, 8*/
		main_100_102 = (main_94_aiii6i_reg <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %100*/
	/*   %102 = shl i32 %.a.i.i.i6.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__100_35)) begin
		main_100_102_reg <= main_100_102;
		if (start == 1'b0 && ^(main_100_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_100_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %.1.i.i.i8.i = phi i32 [ %102, %100 ], [ %.a.i.i.i6.i, %94 ]*/
	if ((((cur_state == LEGUP_F_main_BB__94_34) & (memory_controller_waitrequest == 1'd0)) & (main_94_99 == 1'd0))) begin
		main_normalizeFloat64Subnormalexit10i_1iii8i = main_94_aiii6i;
	end
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %.1.i.i.i8.i = phi i32 [ %102, %100 ], [ %.a.i.i.i6.i, %94 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__100_35) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeFloat64Subnormalexit10i_1iii8i = main_100_102;
	end
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %.1.i.i.i8.i = phi i32 [ %102, %100 ], [ %.a.i.i.i6.i, %94 ]*/
	if ((((cur_state == LEGUP_F_main_BB__94_34) & (memory_controller_waitrequest == 1'd0)) & (main_94_99 == 1'd0))) begin
		main_normalizeFloat64Subnormalexit10i_1iii8i_reg <= main_normalizeFloat64Subnormalexit10i_1iii8i;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_1iii8i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_1iii8i_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %.1.i.i.i8.i = phi i32 [ %102, %100 ], [ %.a.i.i.i6.i, %94 ]*/
	if (((cur_state == LEGUP_F_main_BB__100_35) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeFloat64Subnormalexit10i_1iii8i_reg <= main_normalizeFloat64Subnormalexit10i_1iii8i;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_1iii8i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_1iii8i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %shiftCount.1.i.i.i9.i = phi i32 [ %101, %100 ], [ %..i.i.i7.i, %94 ]*/
	if ((((cur_state == LEGUP_F_main_BB__94_34) & (memory_controller_waitrequest == 1'd0)) & (main_94_99 == 1'd0))) begin
		main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i = main_94_iii7i;
	end
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %shiftCount.1.i.i.i9.i = phi i32 [ %101, %100 ], [ %..i.i.i7.i, %94 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__100_35) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i = main_100_101;
	end
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %shiftCount.1.i.i.i9.i = phi i32 [ %101, %100 ], [ %..i.i.i7.i, %94 ]*/
	if ((((cur_state == LEGUP_F_main_BB__94_34) & (memory_controller_waitrequest == 1'd0)) & (main_94_99 == 1'd0))) begin
		main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i_reg <= main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %shiftCount.1.i.i.i9.i = phi i32 [ %101, %100 ], [ %..i.i.i7.i, %94 ]*/
	if (((cur_state == LEGUP_F_main_BB__100_35) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i_reg <= main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %103 = lshr i32 %.1.i.i.i8.i, 24*/
		main_normalizeFloat64Subnormalexit10i_103 = (main_normalizeFloat64Subnormalexit10i_1iii8i_reg >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %103 = lshr i32 %.1.i.i.i8.i, 24*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_36)) begin
		main_normalizeFloat64Subnormalexit10i_103_reg <= main_normalizeFloat64Subnormalexit10i_103;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %gep_int4 = ptrtoint [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh to i32*/
if (reset) begin main_normalizeFloat64Subnormalexit10i_gep_int4 = 0; end
		main_normalizeFloat64Subnormalexit10i_gep_int4 = 1'd0;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %gep_int4 = ptrtoint [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh to i32*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_36)) begin
		main_normalizeFloat64Subnormalexit10i_gep_int4_reg <= main_normalizeFloat64Subnormalexit10i_gep_int4;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_gep_int4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_gep_int4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %gep_array5 = mul i32 %103, 4*/
		main_normalizeFloat64Subnormalexit10i_gep_array5 = (main_normalizeFloat64Subnormalexit10i_103 * 32'd4);
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %gep_array5 = mul i32 %103, 4*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_36)) begin
		main_normalizeFloat64Subnormalexit10i_gep_array5_reg <= main_normalizeFloat64Subnormalexit10i_gep_array5;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_gep_array5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_gep_array5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %gep6 = add i32 %gep_int4, %gep_array5*/
		main_normalizeFloat64Subnormalexit10i_gep6 = main_signed_add_32_0;
end
always @(*) begin
/* main: %normalizeFloat64Subnormal.exit10.i*/
/*   %gep6 = add i32 %gep_int4, %gep_array5*/
	main_normalizeFloat64Subnormalexit10i_gep6_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %104 = inttoptr i32 %gep6 to i32**/
		main_normalizeFloat64Subnormalexit10i_104 = main_normalizeFloat64Subnormalexit10i_gep6;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %104 = inttoptr i32 %gep6 to i32**/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_37)) begin
		main_normalizeFloat64Subnormalexit10i_104_reg <= main_normalizeFloat64Subnormalexit10i_104;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %105 = load i32* %104, align 4, !tbaa !5*/
		main_normalizeFloat64Subnormalexit10i_105 = countLeadingZeros32countLeadingZerosHigh_out_a;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %105 = load i32* %104, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_38)) begin
		main_normalizeFloat64Subnormalexit10i_105_reg <= main_normalizeFloat64Subnormalexit10i_105;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %106 = add nsw i32 %shiftCount.1.i.i.i9.i, %shiftCount.0.i.i4.i*/
		main_normalizeFloat64Subnormalexit10i_106 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %106 = add nsw i32 %shiftCount.1.i.i.i9.i, %shiftCount.0.i.i4.i*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_36)) begin
		main_normalizeFloat64Subnormalexit10i_106_reg <= main_normalizeFloat64Subnormalexit10i_106;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_106_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %265 = add nsw i32 %264, %main_result.02*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexit_207)) begin
		main_normalizeFloat64Subnormalexit10i_106_reg <= main_float64_divexit_265;
		if (start == 1'b0 && ^(main_float64_divexit_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_106_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %132 = add nsw i32 %shiftCount.1.i.i.i.i, %shiftCount.0.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_44)) begin
		main_normalizeFloat64Subnormalexit10i_106_reg <= main_normalizeFloat64Subnormalexiti_132;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_106_reg"); $finish; end
	end
	/* main: %149*/
	/*   %151 = add nsw i32 %141, 1022*/
	if ((cur_state == LEGUP_F_main_BB__149_48)) begin
		main_normalizeFloat64Subnormalexit10i_106_reg <= main_149_151;
		if (start == 1'b0 && ^(main_149_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %107 = add i32 %106, %105*/
		main_normalizeFloat64Subnormalexit10i_107 = main_signed_add_32_0;
end
always @(*) begin
/* main: %normalizeFloat64Subnormal.exit10.i*/
/*   %107 = add i32 %106, %105*/
	main_normalizeFloat64Subnormalexit10i_107_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %108 = add nsw i32 %107, -11*/
		main_normalizeFloat64Subnormalexit10i_108 = main_signed_add_32_1;
end
always @(*) begin
/* main: %normalizeFloat64Subnormal.exit10.i*/
/*   %108 = add nsw i32 %107, -11*/
	main_normalizeFloat64Subnormalexit10i_108_reg = main_1_gep3_reg;
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %109 = zext i32 %108 to i64*/
		main_normalizeFloat64Subnormalexit10i_109 = main_normalizeFloat64Subnormalexit10i_108;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %109 = zext i32 %108 to i64*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_38)) begin
		main_normalizeFloat64Subnormalexit10i_109_reg <= main_normalizeFloat64Subnormalexit10i_109;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %110 = shl i64 %9, %109*/
		main_normalizeFloat64Subnormalexit10i_110 = (main_1_9_reg <<< (main_normalizeFloat64Subnormalexit10i_109 % 64'd64));
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %110 = shl i64 %9, %109*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_38)) begin
		main_normalizeFloat64Subnormalexit10i_110_reg <= main_normalizeFloat64Subnormalexit10i_110;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %111 = sub i32 12, %107*/
		main_normalizeFloat64Subnormalexit10i_111 = main_signed_subtract_32_0;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %111 = sub i32 12, %107*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_38)) begin
		main_normalizeFloat64Subnormalexit10i_111_reg <= main_normalizeFloat64Subnormalexit10i_111;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_111_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %137 = sub i32 12, %133*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_46)) begin
		main_normalizeFloat64Subnormalexit10i_111_reg <= main_normalizeFloat64Subnormalexiti_137;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_111_reg"); $finish; end
	end
	/* main: %224*/
	/*   %225 = sub nsw i32 0, %zExp.0.i*/
	if ((cur_state == LEGUP_F_main_BB__224_197)) begin
		main_normalizeFloat64Subnormalexit10i_111_reg <= main_224_225;
		if (start == 1'b0 && ^(main_224_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %113 = phi i32 [ %11, %60 ], [ %111, %normalizeFloat64Subnormal.exit10.i ]*/
	if (((((cur_state == LEGUP_F_main_BB__60_21) & (memory_controller_waitrequest == 1'd0)) & (main_1_11_reg != 32'd2047)) & (main_1_11_reg != 32'd0))) begin
		main_112_113 = main_1_11_reg;
	end
	/* main: %112*/
	/*   %113 = phi i32 [ %11, %60 ], [ %111, %normalizeFloat64Subnormal.exit10.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_38) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_112_113 = main_normalizeFloat64Subnormalexit10i_111;
	end
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %113 = phi i32 [ %11, %60 ], [ %111, %normalizeFloat64Subnormal.exit10.i ]*/
	if (((((cur_state == LEGUP_F_main_BB__60_21) & (memory_controller_waitrequest == 1'd0)) & (main_1_11_reg != 32'd2047)) & (main_1_11_reg != 32'd0))) begin
		main_112_113_reg <= main_112_113;
		if (start == 1'b0 && ^(main_112_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_113_reg"); $finish; end
	end
	/* main: %112*/
	/*   %113 = phi i32 [ %11, %60 ], [ %111, %normalizeFloat64Subnormal.exit10.i ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_112_113_reg <= main_112_113;
		if (start == 1'b0 && ^(main_112_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %114 = phi i64 [ %9, %60 ], [ %110, %normalizeFloat64Subnormal.exit10.i ]*/
	if (((((cur_state == LEGUP_F_main_BB__60_21) & (memory_controller_waitrequest == 1'd0)) & (main_1_11_reg != 32'd2047)) & (main_1_11_reg != 32'd0))) begin
		main_112_114 = main_1_9_reg;
	end
	/* main: %112*/
	/*   %114 = phi i64 [ %9, %60 ], [ %110, %normalizeFloat64Subnormal.exit10.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_38) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_112_114 = main_normalizeFloat64Subnormalexit10i_110;
	end
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %114 = phi i64 [ %9, %60 ], [ %110, %normalizeFloat64Subnormal.exit10.i ]*/
	if (((((cur_state == LEGUP_F_main_BB__60_21) & (memory_controller_waitrequest == 1'd0)) & (main_1_11_reg != 32'd2047)) & (main_1_11_reg != 32'd0))) begin
		main_112_114_reg <= main_112_114;
		if (start == 1'b0 && ^(main_112_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_114_reg"); $finish; end
	end
	/* main: %112*/
	/*   %114 = phi i64 [ %9, %60 ], [ %110, %normalizeFloat64Subnormal.exit10.i ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_112_114_reg <= main_112_114;
		if (start == 1'b0 && ^(main_112_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %112*/
	/*   %115 = icmp eq i32 %8, 0*/
		main_112_115 = (main_1_8_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %112*/
	/*   %115 = icmp eq i32 %8, 0*/
	if ((cur_state == LEGUP_F_main_BB__112_39)) begin
		main_112_115_reg <= main_112_115;
		if (start == 1'b0 && ^(main_112_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_112_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %116*/
	/*   %117 = icmp eq i64 %6, 0*/
		main_116_117 = (main_1_6_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %116*/
	/*   %117 = icmp eq i64 %6, 0*/
	if ((cur_state == LEGUP_F_main_BB__116_40)) begin
		main_116_117_reg <= main_116_117;
		if (start == 1'b0 && ^(main_116_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_116_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %118*/
	/*   %119 = shl nuw i64 %13, 63*/
		main_118_119 = (main_1_13_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %118*/
	/*   %119 = shl nuw i64 %13, 63*/
	if ((cur_state == LEGUP_F_main_BB__118_41)) begin
		main_118_119_reg <= main_118_119;
		if (start == 1'b0 && ^(main_118_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_118_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %120*/
	/*   %121 = icmp ult i64 %6, 4294967296*/
		main_120_121 = (main_1_6_reg < 64'd4294967296);
end
always @(posedge clk) begin
	/* main: %120*/
	/*   %121 = icmp ult i64 %6, 4294967296*/
	if ((cur_state == LEGUP_F_main_BB__120_42)) begin
		main_120_121_reg <= main_120_121;
		if (start == 1'b0 && ^(main_120_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %120*/
	/*   %122 = lshr i64 %6, 32*/
		main_120_122 = (main_1_6_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %120*/
	/*   %122 = lshr i64 %6, 32*/
	if ((cur_state == LEGUP_F_main_BB__120_42)) begin
		main_120_122_reg <= main_120_122;
		if (start == 1'b0 && ^(main_120_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %120*/
	/*   %a.sink.i.i.i = select i1 %121, i64 %3, i64 %122*/
		main_120_asinkiii = (main_120_121 ? main_1_3_reg : main_120_122);
end
always @(posedge clk) begin
	/* main: %120*/
	/*   %a.sink.i.i.i = select i1 %121, i64 %3, i64 %122*/
	if ((cur_state == LEGUP_F_main_BB__120_42)) begin
		main_120_asinkiii_reg <= main_120_asinkiii;
		if (start == 1'b0 && ^(main_120_asinkiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_asinkiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %120*/
	/*   %shiftCount.0.i.i.i = select i1 %121, i32 32, i32 0*/
		main_120_shiftCount0iii = (main_120_121 ? 32'd32 : 32'd0);
end
always @(posedge clk) begin
	/* main: %120*/
	/*   %shiftCount.0.i.i.i = select i1 %121, i32 32, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__120_42)) begin
		main_120_shiftCount0iii_reg <= main_120_shiftCount0iii;
		if (start == 1'b0 && ^(main_120_shiftCount0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_shiftCount0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %120*/
	/*   %extract.t.i.i.i = trunc i64 %a.sink.i.i.i to i32*/
		main_120_extracttiii = main_120_asinkiii[31:0];
end
always @(posedge clk) begin
	/* main: %120*/
	/*   %extract.t.i.i.i = trunc i64 %a.sink.i.i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB__120_42)) begin
		main_120_extracttiii_reg <= main_120_extracttiii;
		if (start == 1'b0 && ^(main_120_extracttiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_extracttiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %120*/
	/*   %123 = icmp ult i32 %extract.t.i.i.i, 65536*/
		main_120_123 = (main_120_extracttiii < 32'd65536);
end
always @(posedge clk) begin
	/* main: %120*/
	/*   %123 = icmp ult i32 %extract.t.i.i.i, 65536*/
	if ((cur_state == LEGUP_F_main_BB__120_42)) begin
		main_120_123_reg <= main_120_123;
		if (start == 1'b0 && ^(main_120_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %120*/
	/*   %124 = shl i32 %extract.t.i.i.i, 16*/
		main_120_124 = (main_120_extracttiii <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %120*/
	/*   %124 = shl i32 %extract.t.i.i.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__120_42)) begin
		main_120_124_reg <= main_120_124;
		if (start == 1'b0 && ^(main_120_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %120*/
	/*   %.a.i.i.i.i = select i1 %123, i32 %124, i32 %extract.t.i.i.i*/
		main_120_aiiii = (main_120_123 ? main_120_124 : main_120_extracttiii);
end
always @(posedge clk) begin
	/* main: %120*/
	/*   %.a.i.i.i.i = select i1 %123, i32 %124, i32 %extract.t.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__120_42)) begin
		main_120_aiiii_reg <= main_120_aiiii;
		if (start == 1'b0 && ^(main_120_aiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_aiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %120*/
	/*   %..i.i.i.i = select i1 %123, i32 16, i32 0*/
		main_120_iiii = (main_120_123 ? 32'd16 : 32'd0);
end
always @(posedge clk) begin
	/* main: %120*/
	/*   %..i.i.i.i = select i1 %123, i32 16, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__120_42)) begin
		main_120_iiii_reg <= main_120_iiii;
		if (start == 1'b0 && ^(main_120_iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %120*/
	/*   %125 = icmp ult i32 %.a.i.i.i.i, 16777216*/
		main_120_125 = (main_120_aiiii < 32'd16777216);
end
always @(posedge clk) begin
	/* main: %120*/
	/*   %125 = icmp ult i32 %.a.i.i.i.i, 16777216*/
	if ((cur_state == LEGUP_F_main_BB__120_42)) begin
		main_120_125_reg <= main_120_125;
		if (start == 1'b0 && ^(main_120_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %127 = or i32 %..i.i.i.i, 8*/
		main_126_127 = (main_120_iiii_reg | 32'd8);
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %127 = or i32 %..i.i.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__126_43)) begin
		main_126_127_reg <= main_126_127;
		if (start == 1'b0 && ^(main_126_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %128 = shl i32 %.a.i.i.i.i, 8*/
		main_126_128 = (main_120_aiiii_reg <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %128 = shl i32 %.a.i.i.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__126_43)) begin
		main_126_128_reg <= main_126_128;
		if (start == 1'b0 && ^(main_126_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %.1.i.i.i.i = phi i32 [ %128, %126 ], [ %.a.i.i.i.i, %120 ]*/
	if ((((cur_state == LEGUP_F_main_BB__120_42) & (memory_controller_waitrequest == 1'd0)) & (main_120_125 == 1'd0))) begin
		main_normalizeFloat64Subnormalexiti_1iiii = main_120_aiiii;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %.1.i.i.i.i = phi i32 [ %128, %126 ], [ %.a.i.i.i.i, %120 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__126_43) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeFloat64Subnormalexiti_1iiii = main_126_128;
	end
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %.1.i.i.i.i = phi i32 [ %128, %126 ], [ %.a.i.i.i.i, %120 ]*/
	if ((((cur_state == LEGUP_F_main_BB__120_42) & (memory_controller_waitrequest == 1'd0)) & (main_120_125 == 1'd0))) begin
		main_normalizeFloat64Subnormalexiti_1iiii_reg <= main_normalizeFloat64Subnormalexiti_1iiii;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_1iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_1iiii_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %.1.i.i.i.i = phi i32 [ %128, %126 ], [ %.a.i.i.i.i, %120 ]*/
	if (((cur_state == LEGUP_F_main_BB__126_43) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeFloat64Subnormalexiti_1iiii_reg <= main_normalizeFloat64Subnormalexiti_1iiii;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_1iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_1iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %shiftCount.1.i.i.i.i = phi i32 [ %127, %126 ], [ %..i.i.i.i, %120 ]*/
	if ((((cur_state == LEGUP_F_main_BB__120_42) & (memory_controller_waitrequest == 1'd0)) & (main_120_125 == 1'd0))) begin
		main_normalizeFloat64Subnormalexiti_shiftCount1iiii = main_120_iiii;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %shiftCount.1.i.i.i.i = phi i32 [ %127, %126 ], [ %..i.i.i.i, %120 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__126_43) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeFloat64Subnormalexiti_shiftCount1iiii = main_126_127;
	end
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %shiftCount.1.i.i.i.i = phi i32 [ %127, %126 ], [ %..i.i.i.i, %120 ]*/
	if ((((cur_state == LEGUP_F_main_BB__120_42) & (memory_controller_waitrequest == 1'd0)) & (main_120_125 == 1'd0))) begin
		main_normalizeFloat64Subnormalexiti_shiftCount1iiii_reg <= main_normalizeFloat64Subnormalexiti_shiftCount1iiii;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_shiftCount1iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_shiftCount1iiii_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %shiftCount.1.i.i.i.i = phi i32 [ %127, %126 ], [ %..i.i.i.i, %120 ]*/
	if (((cur_state == LEGUP_F_main_BB__126_43) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeFloat64Subnormalexiti_shiftCount1iiii_reg <= main_normalizeFloat64Subnormalexiti_shiftCount1iiii;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_shiftCount1iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_shiftCount1iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %129 = lshr i32 %.1.i.i.i.i, 24*/
		main_normalizeFloat64Subnormalexiti_129 = (main_normalizeFloat64Subnormalexiti_1iiii_reg >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %129 = lshr i32 %.1.i.i.i.i, 24*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_44)) begin
		main_normalizeFloat64Subnormalexiti_129_reg <= main_normalizeFloat64Subnormalexiti_129;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %gep_int7 = ptrtoint [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh to i32*/
if (reset) begin main_normalizeFloat64Subnormalexiti_gep_int7 = 0; end
		main_normalizeFloat64Subnormalexiti_gep_int7 = 1'd0;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %gep_int7 = ptrtoint [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh to i32*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_44)) begin
		main_normalizeFloat64Subnormalexiti_gep_int7_reg <= main_normalizeFloat64Subnormalexiti_gep_int7;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_gep_int7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_gep_int7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %gep_array8 = mul i32 %129, 4*/
		main_normalizeFloat64Subnormalexiti_gep_array8 = (main_normalizeFloat64Subnormalexiti_129 * 32'd4);
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %gep_array8 = mul i32 %129, 4*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_44)) begin
		main_normalizeFloat64Subnormalexiti_gep_array8_reg <= main_normalizeFloat64Subnormalexiti_gep_array8;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_gep_array8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_gep_array8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %gep9 = add i32 %gep_int7, %gep_array8*/
		main_normalizeFloat64Subnormalexiti_gep9 = main_signed_add_32_0;
end
always @(*) begin
/* main: %normalizeFloat64Subnormal.exit.i*/
/*   %gep9 = add i32 %gep_int7, %gep_array8*/
	main_normalizeFloat64Subnormalexiti_gep9_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %130 = inttoptr i32 %gep9 to i32**/
		main_normalizeFloat64Subnormalexiti_130 = main_normalizeFloat64Subnormalexiti_gep9;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %130 = inttoptr i32 %gep9 to i32**/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_45)) begin
		main_normalizeFloat64Subnormalexiti_130_reg <= main_normalizeFloat64Subnormalexiti_130;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %131 = load i32* %130, align 4, !tbaa !5*/
		main_normalizeFloat64Subnormalexiti_131 = countLeadingZeros32countLeadingZerosHigh_out_a;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %131 = load i32* %130, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_46)) begin
		main_normalizeFloat64Subnormalexiti_131_reg <= main_normalizeFloat64Subnormalexiti_131;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %132 = add nsw i32 %shiftCount.1.i.i.i.i, %shiftCount.0.i.i.i*/
		main_normalizeFloat64Subnormalexiti_132 = main_signed_add_32_0;
end
always @(*) begin
/* main: %normalizeFloat64Subnormal.exit.i*/
/*   %132 = add nsw i32 %shiftCount.1.i.i.i.i, %shiftCount.0.i.i.i*/
	main_normalizeFloat64Subnormalexiti_132_reg = main_normalizeFloat64Subnormalexit10i_106_reg;
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %133 = add i32 %132, %131*/
		main_normalizeFloat64Subnormalexiti_133 = main_signed_add_32_0;
end
always @(*) begin
/* main: %normalizeFloat64Subnormal.exit.i*/
/*   %133 = add i32 %132, %131*/
	main_normalizeFloat64Subnormalexiti_133_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %134 = add nsw i32 %133, -11*/
		main_normalizeFloat64Subnormalexiti_134 = main_signed_add_32_1;
end
always @(*) begin
/* main: %normalizeFloat64Subnormal.exit.i*/
/*   %134 = add nsw i32 %133, -11*/
	main_normalizeFloat64Subnormalexiti_134_reg = main_1_gep3_reg;
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %135 = zext i32 %134 to i64*/
		main_normalizeFloat64Subnormalexiti_135 = main_normalizeFloat64Subnormalexiti_134;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %135 = zext i32 %134 to i64*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_46)) begin
		main_normalizeFloat64Subnormalexiti_135_reg <= main_normalizeFloat64Subnormalexiti_135;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %136 = shl i64 %6, %135*/
		main_normalizeFloat64Subnormalexiti_136 = (main_1_6_reg <<< (main_normalizeFloat64Subnormalexiti_135 % 64'd64));
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %136 = shl i64 %6, %135*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_46)) begin
		main_normalizeFloat64Subnormalexiti_136_reg <= main_normalizeFloat64Subnormalexiti_136;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %137 = sub i32 12, %133*/
		main_normalizeFloat64Subnormalexiti_137 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %normalizeFloat64Subnormal.exit.i*/
/*   %137 = sub i32 12, %133*/
	main_normalizeFloat64Subnormalexiti_137_reg = main_normalizeFloat64Subnormalexit10i_111_reg;
end
always @(*) begin
	/* main: %138*/
	/*   %139 = phi i32 [ %137, %normalizeFloat64Subnormal.exit.i ], [ %8, %112 ]*/
	if ((((cur_state == LEGUP_F_main_BB__112_39) & (memory_controller_waitrequest == 1'd0)) & (main_112_115 == 1'd0))) begin
		main_138_139 = main_1_8_reg;
	end
	/* main: %138*/
	/*   %139 = phi i32 [ %137, %normalizeFloat64Subnormal.exit.i ], [ %8, %112 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_46) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_138_139 = main_normalizeFloat64Subnormalexiti_137;
	end
end
always @(posedge clk) begin
	/* main: %138*/
	/*   %139 = phi i32 [ %137, %normalizeFloat64Subnormal.exit.i ], [ %8, %112 ]*/
	if ((((cur_state == LEGUP_F_main_BB__112_39) & (memory_controller_waitrequest == 1'd0)) & (main_112_115 == 1'd0))) begin
		main_138_139_reg <= main_138_139;
		if (start == 1'b0 && ^(main_138_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_138_139_reg"); $finish; end
	end
	/* main: %138*/
	/*   %139 = phi i32 [ %137, %normalizeFloat64Subnormal.exit.i ], [ %8, %112 ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_138_139_reg <= main_138_139;
		if (start == 1'b0 && ^(main_138_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_138_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %138*/
	/*   %140 = phi i64 [ %136, %normalizeFloat64Subnormal.exit.i ], [ %6, %112 ]*/
	if ((((cur_state == LEGUP_F_main_BB__112_39) & (memory_controller_waitrequest == 1'd0)) & (main_112_115 == 1'd0))) begin
		main_138_140 = main_1_6_reg;
	end
	/* main: %138*/
	/*   %140 = phi i64 [ %136, %normalizeFloat64Subnormal.exit.i ], [ %6, %112 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_46) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_138_140 = main_normalizeFloat64Subnormalexiti_136;
	end
end
always @(posedge clk) begin
	/* main: %138*/
	/*   %140 = phi i64 [ %136, %normalizeFloat64Subnormal.exit.i ], [ %6, %112 ]*/
	if ((((cur_state == LEGUP_F_main_BB__112_39) & (memory_controller_waitrequest == 1'd0)) & (main_112_115 == 1'd0))) begin
		main_138_140_reg <= main_138_140;
		if (start == 1'b0 && ^(main_138_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_138_140_reg"); $finish; end
	end
	/* main: %138*/
	/*   %140 = phi i64 [ %136, %normalizeFloat64Subnormal.exit.i ], [ %6, %112 ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_138_140_reg <= main_138_140;
		if (start == 1'b0 && ^(main_138_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_138_140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %138*/
	/*   %141 = sub nsw i32 %139, %113*/
		main_138_141 = main_signed_subtract_32_0;
end
always @(posedge clk) begin
	/* main: %138*/
	/*   %141 = sub nsw i32 %139, %113*/
	if ((cur_state == LEGUP_F_main_BB__138_47)) begin
		main_138_141_reg <= main_138_141;
		if (start == 1'b0 && ^(main_138_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_138_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %138*/
	/*   %142 = add nsw i32 %141, 1021*/
		main_138_142 = main_signed_add_32_0;
end
always @(*) begin
/* main: %138*/
/*   %142 = add nsw i32 %141, 1021*/
	main_138_142_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %138*/
	/*   %143 = shl i64 %140, 10*/
		main_138_143 = (main_138_140_reg <<< (64'd10 % 64'd64));
end
always @(posedge clk) begin
	/* main: %138*/
	/*   %143 = shl i64 %140, 10*/
	if ((cur_state == LEGUP_F_main_BB__138_47)) begin
		main_138_143_reg <= main_138_143;
		if (start == 1'b0 && ^(main_138_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_138_143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %138*/
	/*   %144 = or i64 %143, 4611686018427387904*/
		main_138_144 = (main_138_143 | 64'd4611686018427387904);
end
always @(posedge clk) begin
	/* main: %138*/
	/*   %144 = or i64 %143, 4611686018427387904*/
	if ((cur_state == LEGUP_F_main_BB__138_47)) begin
		main_138_144_reg <= main_138_144;
		if (start == 1'b0 && ^(main_138_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_138_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %138*/
	/*   %145 = shl i64 %114, 11*/
		main_138_145 = (main_112_114_reg <<< (64'd11 % 64'd64));
end
always @(posedge clk) begin
	/* main: %138*/
	/*   %145 = shl i64 %114, 11*/
	if ((cur_state == LEGUP_F_main_BB__138_47)) begin
		main_138_145_reg <= main_138_145;
		if (start == 1'b0 && ^(main_138_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_138_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %138*/
	/*   %146 = or i64 %145, -9223372036854775808*/
		main_138_146 = (main_138_145 | -64'd9223372036854775808);
end
always @(posedge clk) begin
	/* main: %138*/
	/*   %146 = or i64 %145, -9223372036854775808*/
	if ((cur_state == LEGUP_F_main_BB__138_47)) begin
		main_138_146_reg <= main_138_146;
		if (start == 1'b0 && ^(main_138_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_138_146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %138*/
	/*   %147 = shl i64 %144, 1*/
		main_138_147 = (main_138_144 <<< (64'd1 % 64'd64));
end
always @(posedge clk) begin
	/* main: %138*/
	/*   %147 = shl i64 %144, 1*/
	if ((cur_state == LEGUP_F_main_BB__138_47)) begin
		main_138_147_reg <= main_138_147;
		if (start == 1'b0 && ^(main_138_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_138_147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %138*/
	/*   %148 = icmp ugt i64 %146, %147*/
		main_138_148 = (main_138_146 > main_138_147);
end
always @(posedge clk) begin
	/* main: %138*/
	/*   %148 = icmp ugt i64 %146, %147*/
	if ((cur_state == LEGUP_F_main_BB__138_47)) begin
		main_138_148_reg <= main_138_148;
		if (start == 1'b0 && ^(main_138_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_138_148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %149*/
	/*   %150 = lshr exact i64 %144, 1*/
		main_149_150 = (main_138_144_reg >>> (64'd1 % 64'd64));
end
always @(posedge clk) begin
	/* main: %149*/
	/*   %150 = lshr exact i64 %144, 1*/
	if ((cur_state == LEGUP_F_main_BB__149_48)) begin
		main_149_150_reg <= main_149_150;
		if (start == 1'b0 && ^(main_149_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_149_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %149*/
	/*   %151 = add nsw i32 %141, 1022*/
		main_149_151 = main_signed_add_32_0;
end
always @(*) begin
/* main: %149*/
/*   %151 = add nsw i32 %141, 1022*/
	main_149_151_reg = main_normalizeFloat64Subnormalexit10i_106_reg;
end
always @(*) begin
	/* main: %152*/
	/*   %153 = phi i64 [ %150, %149 ], [ %144, %138 ]*/
	if ((((cur_state == LEGUP_F_main_BB__138_47) & (memory_controller_waitrequest == 1'd0)) & (main_138_148 == 1'd1))) begin
		main_152_153 = main_138_144;
	end
	/* main: %152*/
	/*   %153 = phi i64 [ %150, %149 ], [ %144, %138 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__149_48) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_152_153 = main_149_150;
	end
end
always @(posedge clk) begin
	/* main: %152*/
	/*   %153 = phi i64 [ %150, %149 ], [ %144, %138 ]*/
	if ((((cur_state == LEGUP_F_main_BB__138_47) & (memory_controller_waitrequest == 1'd0)) & (main_138_148 == 1'd1))) begin
		main_152_153_reg <= main_152_153;
		if (start == 1'b0 && ^(main_152_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_152_153_reg"); $finish; end
	end
	/* main: %152*/
	/*   %153 = phi i64 [ %150, %149 ], [ %144, %138 ]*/
	if (((cur_state == LEGUP_F_main_BB__149_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_152_153_reg <= main_152_153;
		if (start == 1'b0 && ^(main_152_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_152_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %152*/
	/*   %zExp.0.i = phi i32 [ %151, %149 ], [ %142, %138 ]*/
	if ((((cur_state == LEGUP_F_main_BB__138_47) & (memory_controller_waitrequest == 1'd0)) & (main_138_148 == 1'd1))) begin
		main_152_zExp0i = main_138_142;
	end
	/* main: %152*/
	/*   %zExp.0.i = phi i32 [ %151, %149 ], [ %142, %138 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__149_48) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_152_zExp0i = main_149_151;
	end
end
always @(posedge clk) begin
	/* main: %152*/
	/*   %zExp.0.i = phi i32 [ %151, %149 ], [ %142, %138 ]*/
	if ((((cur_state == LEGUP_F_main_BB__138_47) & (memory_controller_waitrequest == 1'd0)) & (main_138_148 == 1'd1))) begin
		main_152_zExp0i_reg <= main_152_zExp0i;
		if (start == 1'b0 && ^(main_152_zExp0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_152_zExp0i_reg"); $finish; end
	end
	/* main: %152*/
	/*   %zExp.0.i = phi i32 [ %151, %149 ], [ %142, %138 ]*/
	if (((cur_state == LEGUP_F_main_BB__149_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_152_zExp0i_reg <= main_152_zExp0i;
		if (start == 1'b0 && ^(main_152_zExp0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_152_zExp0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %152*/
	/*   %154 = icmp ugt i64 %146, %153*/
		main_152_154 = (main_138_146_reg > main_152_153_reg);
end
always @(posedge clk) begin
	/* main: %152*/
	/*   %154 = icmp ugt i64 %146, %153*/
	if ((cur_state == LEGUP_F_main_BB__152_49)) begin
		main_152_154_reg <= main_152_154;
		if (start == 1'b0 && ^(main_152_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_152_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %155*/
	/*   %156 = lshr i64 %146, 32*/
		main_155_156 = (main_138_146_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %155*/
	/*   %156 = lshr i64 %146, 32*/
	if ((cur_state == LEGUP_F_main_BB__155_50)) begin
		main_155_156_reg <= main_155_156;
		if (start == 1'b0 && ^(main_155_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_155_156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %155*/
	/*   %157 = shl nuw i64 %156, 32*/
		main_155_157 = (main_155_156 <<< (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %155*/
	/*   %157 = shl nuw i64 %156, 32*/
	if ((cur_state == LEGUP_F_main_BB__155_50)) begin
		main_155_157_reg <= main_155_157;
		if (start == 1'b0 && ^(main_155_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_155_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %155*/
	/*   %158 = icmp ugt i64 %157, %153*/
		main_155_158 = (main_155_157 > main_152_153_reg);
end
always @(posedge clk) begin
	/* main: %155*/
	/*   %158 = icmp ugt i64 %157, %153*/
	if ((cur_state == LEGUP_F_main_BB__155_50)) begin
		main_155_158_reg <= main_155_158;
		if (start == 1'b0 && ^(main_155_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_155_158_reg"); $finish; end
	end
end
always @(*) begin
	main_159_160 = main_unsigned_divide_64_0;
end
always @(posedge clk) begin
	/* main: %159*/
	/*   %160 = udiv i64 %153, %156*/
	if ((cur_state == LEGUP_F_main_BB__159_115)) begin
		main_159_160_reg <= main_159_160;
		if (start == 1'b0 && ^(main_159_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_159_160_reg"); $finish; end
	end
	/* main: %159*/
	/*   %160 = udiv i64 %153, %156*/
	if ((cur_state == LEGUP_F_main_BB__159_115)) begin
		main_159_160_reg <= main_159_160;
		if (start == 1'b0 && ^(main_159_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_159_160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %159*/
	/*   %161 = shl i64 %160, 32*/
		main_159_161 = (main_159_160 <<< (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %159*/
	/*   %161 = shl i64 %160, 32*/
	if ((cur_state == LEGUP_F_main_BB__159_115)) begin
		main_159_161_reg <= main_159_161;
		if (start == 1'b0 && ^(main_159_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_159_161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %163 = phi i64 [ %161, %159 ], [ -4294967296, %155 ]*/
	if ((((cur_state == LEGUP_F_main_BB__155_50) & (memory_controller_waitrequest == 1'd0)) & (main_155_158 == 1'd0))) begin
		main_162_163 = -64'd4294967296;
	end
	/* main: %162*/
	/*   %163 = phi i64 [ %161, %159 ], [ -4294967296, %155 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__159_115) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_162_163 = main_159_161;
	end
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %163 = phi i64 [ %161, %159 ], [ -4294967296, %155 ]*/
	if ((((cur_state == LEGUP_F_main_BB__155_50) & (memory_controller_waitrequest == 1'd0)) & (main_155_158 == 1'd0))) begin
		main_162_163_reg <= main_162_163;
		if (start == 1'b0 && ^(main_162_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_163_reg"); $finish; end
	end
	/* main: %162*/
	/*   %163 = phi i64 [ %161, %159 ], [ -4294967296, %155 ]*/
	if (((cur_state == LEGUP_F_main_BB__159_115) & (memory_controller_waitrequest == 1'd0))) begin
		main_162_163_reg <= main_162_163;
		if (start == 1'b0 && ^(main_162_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %164 = lshr exact i64 %163, 32*/
		main_162_164 = (main_162_163_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %164 = lshr exact i64 %163, 32*/
	if ((cur_state == LEGUP_F_main_BB__162_116)) begin
		main_162_164_reg <= main_162_164;
		if (start == 1'b0 && ^(main_162_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_164_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %165 = and i64 %145, 4294965248*/
		main_162_165 = (main_138_145_reg & 64'd4294965248);
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %165 = and i64 %145, 4294965248*/
	if ((cur_state == LEGUP_F_main_BB__162_116)) begin
		main_162_165_reg <= main_162_165;
		if (start == 1'b0 && ^(main_162_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_165_reg"); $finish; end
	end
end
always @(*) begin
	main_162_166 = main_signed_multiply_64_0;
end
always @(*) begin
/* main: %162*/
/*   %166 = mul i64 %164, %165*/
	main_162_166_reg = main_194_199_reg;
end
always @(*) begin
	main_162_167 = main_signed_multiply_64_1;
end
always @(*) begin
/* main: %162*/
/*   %167 = mul i64 %164, %156*/
	main_162_167_reg = main_194_197_reg;
end
always @(*) begin
	/* main: %162*/
	/*   %168 = lshr i64 %166, 32*/
		main_162_168 = (main_162_166 >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %168 = lshr i64 %166, 32*/
	if ((cur_state == LEGUP_F_main_BB__162_117)) begin
		main_162_168_reg <= main_162_168;
		if (start == 1'b0 && ^(main_162_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_168_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %169 = shl i64 %166, 32*/
		main_162_169 = (main_162_166 <<< (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %169 = shl i64 %166, 32*/
	if ((cur_state == LEGUP_F_main_BB__162_117)) begin
		main_162_169_reg <= main_162_169;
		if (start == 1'b0 && ^(main_162_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %170 = sub i64 0, %169*/
		main_162_170 = main_signed_subtract_64_0;
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %170 = sub i64 0, %169*/
	if ((cur_state == LEGUP_F_main_BB__162_117)) begin
		main_162_170_reg <= main_162_170;
		if (start == 1'b0 && ^(main_162_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %171 = icmp ne i64 %169, 0*/
		main_162_171 = (main_162_169 != 64'd0);
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %171 = icmp ne i64 %169, 0*/
	if ((cur_state == LEGUP_F_main_BB__162_117)) begin
		main_162_171_reg <= main_162_171;
		if (start == 1'b0 && ^(main_162_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %.neg.i.i.i = sext i1 %171 to i64*/
		main_162_negiii = $signed(main_162_171);
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %.neg.i.i.i = sext i1 %171 to i64*/
	if ((cur_state == LEGUP_F_main_BB__162_117)) begin
		main_162_negiii_reg <= main_162_negiii;
		if (start == 1'b0 && ^(main_162_negiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_negiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %.neg3.i.i = sub i64 %153, %167*/
		main_162_neg3ii = main_signed_subtract_64_1;
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %.neg3.i.i = sub i64 %153, %167*/
	if ((cur_state == LEGUP_F_main_BB__162_117)) begin
		main_162_neg3ii_reg <= main_162_neg3ii;
		if (start == 1'b0 && ^(main_162_neg3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_neg3ii_reg"); $finish; end
	end
	/* main: %194*/
	/*   %208 = sub i64 %.neg32.i, %204*/
	if ((cur_state == LEGUP_F_main_BB__194_191)) begin
		main_162_neg3ii_reg <= main_194_208;
		if (start == 1'b0 && ^(main_194_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_neg3ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %172 = sub i64 %.neg3.i.i, %168*/
		main_162_172 = main_signed_subtract_64_2;
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %172 = sub i64 %.neg3.i.i, %168*/
	if ((cur_state == LEGUP_F_main_BB__162_117)) begin
		main_162_172_reg <= main_162_172;
		if (start == 1'b0 && ^(main_162_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_172_reg"); $finish; end
	end
	/* main: %194*/
	/*   %206 = sub i64 0, %overflow_intrinsic_sum13*/
	if ((cur_state == LEGUP_F_main_BB__194_191)) begin
		main_162_172_reg <= main_194_206;
		if (start == 1'b0 && ^(main_194_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %173 = add i64 %172, %.neg.i.i.i*/
		main_162_173 = main_signed_add_64_0;
end
always @(*) begin
/* main: %162*/
/*   %173 = add i64 %172, %.neg.i.i.i*/
	main_162_173_reg = main_roundAndPackFloat64exiti_248_reg;
end
always @(*) begin
	/* main: %162*/
	/*   %174 = icmp slt i64 %173, 0*/
		main_162_174 = ($signed(main_162_173) < $signed(64'd0));
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %174 = icmp slt i64 %173, 0*/
	if ((cur_state == LEGUP_F_main_BB__162_117)) begin
		main_162_174_reg <= main_162_174;
		if (start == 1'b0 && ^(main_162_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %175 = shl i64 %114, 43*/
		main_lrphii_175 = (main_112_114_reg <<< (64'd43 % 64'd64));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %175 = shl i64 %114, 43*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_118)) begin
		main_lrphii_175_reg <= main_lrphii_175;
		if (start == 1'b0 && ^(main_lrphii_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %overflow_intrinsic1 = zext i64 %175 to i65*/
		main_lrphii_overflow_intrinsic1 = main_lrphii_175;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %overflow_intrinsic1 = zext i64 %175 to i65*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_118)) begin
		main_lrphii_overflow_intrinsic1_reg <= main_lrphii_overflow_intrinsic1;
		if (start == 1'b0 && ^(main_lrphii_overflow_intrinsic1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_overflow_intrinsic1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %z.05.i.i = phi i64 [ %163, %.lr.ph.i.i ], [ %179, %176 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphii_118) & (memory_controller_waitrequest == 1'd0))) begin
		main_176_z05ii = main_162_163_reg;
	end
	/* main: %176*/
	/*   %z.05.i.i = phi i64 [ %163, %.lr.ph.i.i ], [ %179, %176 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__176_120) & (memory_controller_waitrequest == 1'd0)) & (main_176_183 == 1'd1))) */ begin
		main_176_z05ii = main_176_179_reg;
	end
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %z.05.i.i = phi i64 [ %163, %.lr.ph.i.i ], [ %179, %176 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphii_118) & (memory_controller_waitrequest == 1'd0))) begin
		main_176_z05ii_reg <= main_176_z05ii;
		if (start == 1'b0 && ^(main_176_z05ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_z05ii_reg"); $finish; end
	end
	/* main: %176*/
	/*   %z.05.i.i = phi i64 [ %163, %.lr.ph.i.i ], [ %179, %176 ]*/
	if ((((cur_state == LEGUP_F_main_BB__176_120) & (memory_controller_waitrequest == 1'd0)) & (main_176_183 == 1'd1))) begin
		main_176_z05ii_reg <= main_176_z05ii;
		if (start == 1'b0 && ^(main_176_z05ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_z05ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %177 = phi i64 [ %170, %.lr.ph.i.i ], [ %overflow_intrinsic_sum, %176 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphii_118) & (memory_controller_waitrequest == 1'd0))) begin
		main_176_177 = main_162_170_reg;
	end
	/* main: %176*/
	/*   %177 = phi i64 [ %170, %.lr.ph.i.i ], [ %overflow_intrinsic_sum, %176 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__176_120) & (memory_controller_waitrequest == 1'd0)) & (main_176_183 == 1'd1))) */ begin
		main_176_177 = main_176_overflow_intrinsic_sum_reg;
	end
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %177 = phi i64 [ %170, %.lr.ph.i.i ], [ %overflow_intrinsic_sum, %176 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphii_118) & (memory_controller_waitrequest == 1'd0))) begin
		main_176_177_reg <= main_176_177;
		if (start == 1'b0 && ^(main_176_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_177_reg"); $finish; end
	end
	/* main: %176*/
	/*   %177 = phi i64 [ %170, %.lr.ph.i.i ], [ %overflow_intrinsic_sum, %176 ]*/
	if ((((cur_state == LEGUP_F_main_BB__176_120) & (memory_controller_waitrequest == 1'd0)) & (main_176_183 == 1'd1))) begin
		main_176_177_reg <= main_176_177;
		if (start == 1'b0 && ^(main_176_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %178 = phi i64 [ %173, %.lr.ph.i.i ], [ %182, %176 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphii_118) & (memory_controller_waitrequest == 1'd0))) begin
		main_176_178 = main_162_173_reg;
	end
	/* main: %176*/
	/*   %178 = phi i64 [ %173, %.lr.ph.i.i ], [ %182, %176 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__176_120) & (memory_controller_waitrequest == 1'd0)) & (main_176_183 == 1'd1))) */ begin
		main_176_178 = main_176_182;
	end
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %178 = phi i64 [ %173, %.lr.ph.i.i ], [ %182, %176 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphii_118) & (memory_controller_waitrequest == 1'd0))) begin
		main_176_178_reg <= main_176_178;
		if (start == 1'b0 && ^(main_176_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_178_reg"); $finish; end
	end
	/* main: %176*/
	/*   %178 = phi i64 [ %173, %.lr.ph.i.i ], [ %182, %176 ]*/
	if ((((cur_state == LEGUP_F_main_BB__176_120) & (memory_controller_waitrequest == 1'd0)) & (main_176_183 == 1'd1))) begin
		main_176_178_reg <= main_176_178;
		if (start == 1'b0 && ^(main_176_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %179 = add i64 %z.05.i.i, -4294967296*/
		main_176_179 = main_signed_add_64_0;
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %179 = add i64 %z.05.i.i, -4294967296*/
	if ((cur_state == LEGUP_F_main_BB__176_119)) begin
		main_176_179_reg <= main_176_179;
		if (start == 1'b0 && ^(main_176_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_179_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %215 = add i64 %214, %212*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_194)) begin
		main_176_179_reg <= main_lrphi_215;
		if (start == 1'b0 && ^(main_lrphi_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %overflow_intrinsic = zext i64 %177 to i65*/
		main_176_overflow_intrinsic = main_176_177_reg;
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %overflow_intrinsic = zext i64 %177 to i65*/
	if ((cur_state == LEGUP_F_main_BB__176_119)) begin
		main_176_overflow_intrinsic_reg <= main_176_overflow_intrinsic;
		if (start == 1'b0 && ^(main_176_overflow_intrinsic) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_overflow_intrinsic_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %overflow_intrinsic2 = add i65 %overflow_intrinsic, %overflow_intrinsic1*/
		main_176_overflow_intrinsic2 = (main_176_overflow_intrinsic + main_lrphii_overflow_intrinsic1_reg);
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %overflow_intrinsic2 = add i65 %overflow_intrinsic, %overflow_intrinsic1*/
	if ((cur_state == LEGUP_F_main_BB__176_119)) begin
		main_176_overflow_intrinsic2_reg <= main_176_overflow_intrinsic2;
		if (start == 1'b0 && ^(main_176_overflow_intrinsic2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_overflow_intrinsic2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %overflow_intrinsic_sum = trunc i65 %overflow_intrinsic2 to i64*/
		main_176_overflow_intrinsic_sum = main_176_overflow_intrinsic2[63:0];
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %overflow_intrinsic_sum = trunc i65 %overflow_intrinsic2 to i64*/
	if ((cur_state == LEGUP_F_main_BB__176_119)) begin
		main_176_overflow_intrinsic_sum_reg <= main_176_overflow_intrinsic_sum;
		if (start == 1'b0 && ^(main_176_overflow_intrinsic_sum) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_overflow_intrinsic_sum_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %overflow_intrinsic3 = lshr i65 %overflow_intrinsic2, 64*/
		main_176_overflow_intrinsic3 = (main_176_overflow_intrinsic2 >>> (65'd64 % 65'd65));
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %overflow_intrinsic3 = lshr i65 %overflow_intrinsic2, 64*/
	if ((cur_state == LEGUP_F_main_BB__176_119)) begin
		main_176_overflow_intrinsic3_reg <= main_176_overflow_intrinsic3;
		if (start == 1'b0 && ^(main_176_overflow_intrinsic3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_overflow_intrinsic3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %overflow_intrinsic_carry = trunc i65 %overflow_intrinsic3 to i1*/
		main_176_overflow_intrinsic_carry = main_176_overflow_intrinsic3;
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %overflow_intrinsic_carry = trunc i65 %overflow_intrinsic3 to i1*/
	if ((cur_state == LEGUP_F_main_BB__176_119)) begin
		main_176_overflow_intrinsic_carry_reg <= main_176_overflow_intrinsic_carry;
		if (start == 1'b0 && ^(main_176_overflow_intrinsic_carry) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_overflow_intrinsic_carry_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %180 = add i64 %178, %156*/
		main_176_180 = main_signed_add_64_1;
end
always @(*) begin
/* main: %176*/
/*   %180 = add i64 %178, %156*/
	main_176_180_reg = main_roundAndPackFloat64exiti_260_reg;
end
always @(*) begin
	/* main: %176*/
	/*   %181 = zext i1 %overflow_intrinsic_carry to i64*/
		main_176_181 = main_176_overflow_intrinsic_carry;
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %181 = zext i1 %overflow_intrinsic_carry to i64*/
	if ((cur_state == LEGUP_F_main_BB__176_119)) begin
		main_176_181_reg <= main_176_181;
		if (start == 1'b0 && ^(main_176_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %182 = add i64 %180, %181*/
		main_176_182 = main_signed_add_64_0;
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %182 = add i64 %180, %181*/
	if ((cur_state == LEGUP_F_main_BB__176_120)) begin
		main_176_182_reg <= main_176_182;
		if (start == 1'b0 && ^(main_176_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %183 = icmp slt i64 %182, 0*/
		main_176_183 = ($signed(main_176_182) < $signed(64'd0));
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %183 = icmp slt i64 %182, 0*/
	if ((cur_state == LEGUP_F_main_BB__176_120)) begin
		main_176_183_reg <= main_176_183;
		if (start == 1'b0 && ^(main_176_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %z.0.lcssa.i.i = phi i64 [ %163, %162 ], [ %179, %176 ]*/
	if ((((cur_state == LEGUP_F_main_BB__162_117) & (memory_controller_waitrequest == 1'd0)) & (main_162_174 == 1'd0))) begin
		main__crit_edgeii_z0lcssaii = main_162_163_reg;
	end
	/* main: %._crit_edge.i.i*/
	/*   %z.0.lcssa.i.i = phi i64 [ %163, %162 ], [ %179, %176 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__176_120) & (memory_controller_waitrequest == 1'd0)) & (main_176_183 == 1'd0))) */ begin
		main__crit_edgeii_z0lcssaii = main_176_179_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %z.0.lcssa.i.i = phi i64 [ %163, %162 ], [ %179, %176 ]*/
	if ((((cur_state == LEGUP_F_main_BB__162_117) & (memory_controller_waitrequest == 1'd0)) & (main_162_174 == 1'd0))) begin
		main__crit_edgeii_z0lcssaii_reg <= main__crit_edgeii_z0lcssaii;
		if (start == 1'b0 && ^(main__crit_edgeii_z0lcssaii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_z0lcssaii_reg"); $finish; end
	end
	/* main: %._crit_edge.i.i*/
	/*   %z.0.lcssa.i.i = phi i64 [ %163, %162 ], [ %179, %176 ]*/
	if ((((cur_state == LEGUP_F_main_BB__176_120) & (memory_controller_waitrequest == 1'd0)) & (main_176_183 == 1'd0))) begin
		main__crit_edgeii_z0lcssaii_reg <= main__crit_edgeii_z0lcssaii;
		if (start == 1'b0 && ^(main__crit_edgeii_z0lcssaii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_z0lcssaii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %.lcssa4.i.i = phi i64 [ %170, %162 ], [ %overflow_intrinsic_sum, %176 ]*/
	if ((((cur_state == LEGUP_F_main_BB__162_117) & (memory_controller_waitrequest == 1'd0)) & (main_162_174 == 1'd0))) begin
		main__crit_edgeii_lcssa4ii = main_162_170;
	end
	/* main: %._crit_edge.i.i*/
	/*   %.lcssa4.i.i = phi i64 [ %170, %162 ], [ %overflow_intrinsic_sum, %176 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__176_120) & (memory_controller_waitrequest == 1'd0)) & (main_176_183 == 1'd0))) */ begin
		main__crit_edgeii_lcssa4ii = main_176_overflow_intrinsic_sum_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %.lcssa4.i.i = phi i64 [ %170, %162 ], [ %overflow_intrinsic_sum, %176 ]*/
	if ((((cur_state == LEGUP_F_main_BB__162_117) & (memory_controller_waitrequest == 1'd0)) & (main_162_174 == 1'd0))) begin
		main__crit_edgeii_lcssa4ii_reg <= main__crit_edgeii_lcssa4ii;
		if (start == 1'b0 && ^(main__crit_edgeii_lcssa4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_lcssa4ii_reg"); $finish; end
	end
	/* main: %._crit_edge.i.i*/
	/*   %.lcssa4.i.i = phi i64 [ %170, %162 ], [ %overflow_intrinsic_sum, %176 ]*/
	if ((((cur_state == LEGUP_F_main_BB__176_120) & (memory_controller_waitrequest == 1'd0)) & (main_176_183 == 1'd0))) begin
		main__crit_edgeii_lcssa4ii_reg <= main__crit_edgeii_lcssa4ii;
		if (start == 1'b0 && ^(main__crit_edgeii_lcssa4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_lcssa4ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %.lcssa.i.i = phi i64 [ %173, %162 ], [ %182, %176 ]*/
	if ((((cur_state == LEGUP_F_main_BB__162_117) & (memory_controller_waitrequest == 1'd0)) & (main_162_174 == 1'd0))) begin
		main__crit_edgeii_lcssaii = main_162_173;
	end
	/* main: %._crit_edge.i.i*/
	/*   %.lcssa.i.i = phi i64 [ %173, %162 ], [ %182, %176 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__176_120) & (memory_controller_waitrequest == 1'd0)) & (main_176_183 == 1'd0))) */ begin
		main__crit_edgeii_lcssaii = main_176_182;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %.lcssa.i.i = phi i64 [ %173, %162 ], [ %182, %176 ]*/
	if ((((cur_state == LEGUP_F_main_BB__162_117) & (memory_controller_waitrequest == 1'd0)) & (main_162_174 == 1'd0))) begin
		main__crit_edgeii_lcssaii_reg <= main__crit_edgeii_lcssaii;
		if (start == 1'b0 && ^(main__crit_edgeii_lcssaii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_lcssaii_reg"); $finish; end
	end
	/* main: %._crit_edge.i.i*/
	/*   %.lcssa.i.i = phi i64 [ %173, %162 ], [ %182, %176 ]*/
	if ((((cur_state == LEGUP_F_main_BB__176_120) & (memory_controller_waitrequest == 1'd0)) & (main_176_183 == 1'd0))) begin
		main__crit_edgeii_lcssaii_reg <= main__crit_edgeii_lcssaii;
		if (start == 1'b0 && ^(main__crit_edgeii_lcssaii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_lcssaii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %184 = shl i64 %.lcssa.i.i, 32*/
		main__crit_edgeii_184 = (main__crit_edgeii_lcssaii_reg <<< (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %184 = shl i64 %.lcssa.i.i, 32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_121)) begin
		main__crit_edgeii_184_reg <= main__crit_edgeii_184;
		if (start == 1'b0 && ^(main__crit_edgeii_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_184_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %185 = lshr i64 %.lcssa4.i.i, 32*/
		main__crit_edgeii_185 = (main__crit_edgeii_lcssa4ii_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %185 = lshr i64 %.lcssa4.i.i, 32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_121)) begin
		main__crit_edgeii_185_reg <= main__crit_edgeii_185;
		if (start == 1'b0 && ^(main__crit_edgeii_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %186 = or i64 %184, %185*/
		main__crit_edgeii_186 = (main__crit_edgeii_184 | main__crit_edgeii_185);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %186 = or i64 %184, %185*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_121)) begin
		main__crit_edgeii_186_reg <= main__crit_edgeii_186;
		if (start == 1'b0 && ^(main__crit_edgeii_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %187 = icmp ugt i64 %157, %186*/
		main__crit_edgeii_187 = (main_155_157_reg > main__crit_edgeii_186);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %187 = icmp ugt i64 %157, %186*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_121)) begin
		main__crit_edgeii_187_reg <= main__crit_edgeii_187;
		if (start == 1'b0 && ^(main__crit_edgeii_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_187_reg"); $finish; end
	end
end
always @(*) begin
	main_188_189 = main_unsigned_divide_64_0;
end
always @(posedge clk) begin
	/* main: %188*/
	/*   %189 = udiv i64 %186, %156*/
	if ((cur_state == LEGUP_F_main_BB__188_186)) begin
		main_188_189_reg <= main_188_189;
		if (start == 1'b0 && ^(main_188_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_188_189_reg"); $finish; end
	end
	/* main: %188*/
	/*   %189 = udiv i64 %186, %156*/
	if ((cur_state == LEGUP_F_main_BB__188_186)) begin
		main_188_189_reg <= main_188_189;
		if (start == 1'b0 && ^(main_188_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_188_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.i*/
	/*   %190 = phi i64 [ %189, %188 ], [ 4294967295, %._crit_edge.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgeii_121) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgeii_187 == 1'd0))) begin
		main_estimateDiv128To64exiti_190 = 64'd4294967295;
	end
	/* main: %estimateDiv128To64.exit.i*/
	/*   %190 = phi i64 [ %189, %188 ], [ 4294967295, %._crit_edge.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__188_186) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_estimateDiv128To64exiti_190 = main_188_189;
	end
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.i*/
	/*   %190 = phi i64 [ %189, %188 ], [ 4294967295, %._crit_edge.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgeii_121) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgeii_187 == 1'd0))) begin
		main_estimateDiv128To64exiti_190_reg <= main_estimateDiv128To64exiti_190;
		if (start == 1'b0 && ^(main_estimateDiv128To64exiti_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exiti_190_reg"); $finish; end
	end
	/* main: %estimateDiv128To64.exit.i*/
	/*   %190 = phi i64 [ %189, %188 ], [ 4294967295, %._crit_edge.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__188_186) & (memory_controller_waitrequest == 1'd0))) begin
		main_estimateDiv128To64exiti_190_reg <= main_estimateDiv128To64exiti_190;
		if (start == 1'b0 && ^(main_estimateDiv128To64exiti_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exiti_190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.i*/
	/*   %191 = or i64 %190, %z.0.lcssa.i.i*/
		main_estimateDiv128To64exiti_191 = (main_estimateDiv128To64exiti_190_reg | main__crit_edgeii_z0lcssaii_reg);
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.i*/
	/*   %191 = or i64 %190, %z.0.lcssa.i.i*/
	if ((cur_state == LEGUP_F_main_BB_estimateDiv128To64exiti_187)) begin
		main_estimateDiv128To64exiti_191_reg <= main_estimateDiv128To64exiti_191;
		if (start == 1'b0 && ^(main_estimateDiv128To64exiti_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exiti_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.i*/
	/*   %192 = and i64 %191, 511*/
		main_estimateDiv128To64exiti_192 = (main_estimateDiv128To64exiti_191 & 64'd511);
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.i*/
	/*   %192 = and i64 %191, 511*/
	if ((cur_state == LEGUP_F_main_BB_estimateDiv128To64exiti_187)) begin
		main_estimateDiv128To64exiti_192_reg <= main_estimateDiv128To64exiti_192;
		if (start == 1'b0 && ^(main_estimateDiv128To64exiti_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exiti_192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.i*/
	/*   %193 = icmp ult i64 %192, 3*/
		main_estimateDiv128To64exiti_193 = (main_estimateDiv128To64exiti_192 < 64'd3);
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.i*/
	/*   %193 = icmp ult i64 %192, 3*/
	if ((cur_state == LEGUP_F_main_BB_estimateDiv128To64exiti_187)) begin
		main_estimateDiv128To64exiti_193_reg <= main_estimateDiv128To64exiti_193;
		if (start == 1'b0 && ^(main_estimateDiv128To64exiti_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exiti_193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %195 = lshr i64 %191, 32*/
		main_194_195 = (main_estimateDiv128To64exiti_191_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %195 = lshr i64 %191, 32*/
	if ((cur_state == LEGUP_F_main_BB__194_188)) begin
		main_194_195_reg <= main_194_195;
		if (start == 1'b0 && ^(main_194_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %196 = and i64 %191, 4294967295*/
		main_194_196 = (main_estimateDiv128To64exiti_191_reg & 64'd4294967295);
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %196 = and i64 %191, 4294967295*/
	if ((cur_state == LEGUP_F_main_BB__194_188)) begin
		main_194_196_reg <= main_194_196;
		if (start == 1'b0 && ^(main_194_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_196_reg"); $finish; end
	end
end
always @(*) begin
	main_194_197 = main_signed_multiply_64_1;
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %197 = mul i64 %196, %165*/
	if ((cur_state == LEGUP_F_main_BB__194_189)) begin
		main_194_197_reg <= main_194_197;
		if (start == 1'b0 && ^(main_194_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_197_reg"); $finish; end
	end
	/* main: %194*/
	/*   %197 = mul i64 %196, %165*/
	if ((cur_state == LEGUP_F_main_BB__194_189)) begin
		main_194_197_reg <= main_194_197;
		if (start == 1'b0 && ^(main_194_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_197_reg"); $finish; end
	end
	/* main: %162*/
	/*   %167 = mul i64 %164, %156*/
	if ((cur_state == LEGUP_F_main_BB__162_117)) begin
		main_194_197_reg <= main_162_167;
		if (start == 1'b0 && ^(main_162_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_197_reg"); $finish; end
	end
end
always @(*) begin
	main_194_198 = main_signed_multiply_64_2;
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %198 = mul i64 %195, %165*/
	if ((cur_state == LEGUP_F_main_BB__194_189)) begin
		main_194_198_reg <= main_194_198;
		if (start == 1'b0 && ^(main_194_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_198_reg"); $finish; end
	end
	/* main: %194*/
	/*   %198 = mul i64 %195, %165*/
	if ((cur_state == LEGUP_F_main_BB__194_189)) begin
		main_194_198_reg <= main_194_198;
		if (start == 1'b0 && ^(main_194_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_198_reg"); $finish; end
	end
end
always @(*) begin
	main_194_199 = main_signed_multiply_64_0;
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %199 = mul i64 %196, %156*/
	if ((cur_state == LEGUP_F_main_BB__194_189)) begin
		main_194_199_reg <= main_194_199;
		if (start == 1'b0 && ^(main_194_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_199_reg"); $finish; end
	end
	/* main: %194*/
	/*   %199 = mul i64 %196, %156*/
	if ((cur_state == LEGUP_F_main_BB__194_189)) begin
		main_194_199_reg <= main_194_199;
		if (start == 1'b0 && ^(main_194_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_199_reg"); $finish; end
	end
	/* main: %162*/
	/*   %166 = mul i64 %164, %165*/
	if ((cur_state == LEGUP_F_main_BB__162_117)) begin
		main_194_199_reg <= main_162_166;
		if (start == 1'b0 && ^(main_162_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_199_reg"); $finish; end
	end
end
always @(*) begin
	main_194_200 = main_signed_multiply_64_3;
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %200 = mul i64 %195, %156*/
	if ((cur_state == LEGUP_F_main_BB__194_189)) begin
		main_194_200_reg <= main_194_200;
		if (start == 1'b0 && ^(main_194_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_200_reg"); $finish; end
	end
	/* main: %194*/
	/*   %200 = mul i64 %195, %156*/
	if ((cur_state == LEGUP_F_main_BB__194_189)) begin
		main_194_200_reg <= main_194_200;
		if (start == 1'b0 && ^(main_194_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %overflow_intrinsic4 = zext i64 %198 to i65*/
		main_194_overflow_intrinsic4 = main_194_198;
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %overflow_intrinsic4 = zext i64 %198 to i65*/
	if ((cur_state == LEGUP_F_main_BB__194_189)) begin
		main_194_overflow_intrinsic4_reg <= main_194_overflow_intrinsic4;
		if (start == 1'b0 && ^(main_194_overflow_intrinsic4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_overflow_intrinsic4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %overflow_intrinsic5 = zext i64 %199 to i65*/
		main_194_overflow_intrinsic5 = main_194_199;
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %overflow_intrinsic5 = zext i64 %199 to i65*/
	if ((cur_state == LEGUP_F_main_BB__194_189)) begin
		main_194_overflow_intrinsic5_reg <= main_194_overflow_intrinsic5;
		if (start == 1'b0 && ^(main_194_overflow_intrinsic5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_overflow_intrinsic5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %overflow_intrinsic6 = add i65 %overflow_intrinsic4, %overflow_intrinsic5*/
		main_194_overflow_intrinsic6 = (main_194_overflow_intrinsic4 + main_194_overflow_intrinsic5);
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %overflow_intrinsic6 = add i65 %overflow_intrinsic4, %overflow_intrinsic5*/
	if ((cur_state == LEGUP_F_main_BB__194_189)) begin
		main_194_overflow_intrinsic6_reg <= main_194_overflow_intrinsic6;
		if (start == 1'b0 && ^(main_194_overflow_intrinsic6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_overflow_intrinsic6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %overflow_intrinsic_sum7 = trunc i65 %overflow_intrinsic6 to i64*/
		main_194_overflow_intrinsic_sum7 = main_194_overflow_intrinsic6[63:0];
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %overflow_intrinsic_sum7 = trunc i65 %overflow_intrinsic6 to i64*/
	if ((cur_state == LEGUP_F_main_BB__194_189)) begin
		main_194_overflow_intrinsic_sum7_reg <= main_194_overflow_intrinsic_sum7;
		if (start == 1'b0 && ^(main_194_overflow_intrinsic_sum7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_overflow_intrinsic_sum7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %overflow_intrinsic8 = lshr i65 %overflow_intrinsic6, 64*/
		main_194_overflow_intrinsic8 = (main_194_overflow_intrinsic6 >>> (65'd64 % 65'd65));
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %overflow_intrinsic8 = lshr i65 %overflow_intrinsic6, 64*/
	if ((cur_state == LEGUP_F_main_BB__194_189)) begin
		main_194_overflow_intrinsic8_reg <= main_194_overflow_intrinsic8;
		if (start == 1'b0 && ^(main_194_overflow_intrinsic8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_overflow_intrinsic8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %overflow_intrinsic_carry9 = trunc i65 %overflow_intrinsic8 to i1*/
		main_194_overflow_intrinsic_carry9 = main_194_overflow_intrinsic8;
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %overflow_intrinsic_carry9 = trunc i65 %overflow_intrinsic8 to i1*/
	if ((cur_state == LEGUP_F_main_BB__194_189)) begin
		main_194_overflow_intrinsic_carry9_reg <= main_194_overflow_intrinsic_carry9;
		if (start == 1'b0 && ^(main_194_overflow_intrinsic_carry9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_overflow_intrinsic_carry9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %201 = zext i1 %overflow_intrinsic_carry9 to i64*/
		main_194_201 = main_194_overflow_intrinsic_carry9;
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %201 = zext i1 %overflow_intrinsic_carry9 to i64*/
	if ((cur_state == LEGUP_F_main_BB__194_189)) begin
		main_194_201_reg <= main_194_201;
		if (start == 1'b0 && ^(main_194_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %202 = shl nuw nsw i64 %201, 32*/
		main_194_202 = (main_194_201 <<< (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %202 = shl nuw nsw i64 %201, 32*/
	if ((cur_state == LEGUP_F_main_BB__194_189)) begin
		main_194_202_reg <= main_194_202;
		if (start == 1'b0 && ^(main_194_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %203 = lshr i64 %overflow_intrinsic_sum7, 32*/
		main_194_203 = (main_194_overflow_intrinsic_sum7 >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %203 = lshr i64 %overflow_intrinsic_sum7, 32*/
	if ((cur_state == LEGUP_F_main_BB__194_189)) begin
		main_194_203_reg <= main_194_203;
		if (start == 1'b0 && ^(main_194_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %204 = or i64 %202, %203*/
		main_194_204 = (main_194_202_reg | main_194_203_reg);
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %204 = or i64 %202, %203*/
	if ((cur_state == LEGUP_F_main_BB__194_190)) begin
		main_194_204_reg <= main_194_204;
		if (start == 1'b0 && ^(main_194_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %205 = shl i64 %overflow_intrinsic_sum7, 32*/
		main_194_205 = (main_194_overflow_intrinsic_sum7 <<< (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %205 = shl i64 %overflow_intrinsic_sum7, 32*/
	if ((cur_state == LEGUP_F_main_BB__194_189)) begin
		main_194_205_reg <= main_194_205;
		if (start == 1'b0 && ^(main_194_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %overflow_intrinsic10 = zext i64 %197 to i65*/
		main_194_overflow_intrinsic10 = main_194_197;
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %overflow_intrinsic10 = zext i64 %197 to i65*/
	if ((cur_state == LEGUP_F_main_BB__194_189)) begin
		main_194_overflow_intrinsic10_reg <= main_194_overflow_intrinsic10;
		if (start == 1'b0 && ^(main_194_overflow_intrinsic10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_overflow_intrinsic10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %overflow_intrinsic11 = zext i64 %205 to i65*/
		main_194_overflow_intrinsic11 = main_194_205;
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %overflow_intrinsic11 = zext i64 %205 to i65*/
	if ((cur_state == LEGUP_F_main_BB__194_189)) begin
		main_194_overflow_intrinsic11_reg <= main_194_overflow_intrinsic11;
		if (start == 1'b0 && ^(main_194_overflow_intrinsic11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_overflow_intrinsic11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %overflow_intrinsic12 = add i65 %overflow_intrinsic10, %overflow_intrinsic11*/
		main_194_overflow_intrinsic12 = (main_194_overflow_intrinsic10_reg + main_194_overflow_intrinsic11_reg);
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %overflow_intrinsic12 = add i65 %overflow_intrinsic10, %overflow_intrinsic11*/
	if ((cur_state == LEGUP_F_main_BB__194_190)) begin
		main_194_overflow_intrinsic12_reg <= main_194_overflow_intrinsic12;
		if (start == 1'b0 && ^(main_194_overflow_intrinsic12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_overflow_intrinsic12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %overflow_intrinsic_sum13 = trunc i65 %overflow_intrinsic12 to i64*/
		main_194_overflow_intrinsic_sum13 = main_194_overflow_intrinsic12[63:0];
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %overflow_intrinsic_sum13 = trunc i65 %overflow_intrinsic12 to i64*/
	if ((cur_state == LEGUP_F_main_BB__194_190)) begin
		main_194_overflow_intrinsic_sum13_reg <= main_194_overflow_intrinsic_sum13;
		if (start == 1'b0 && ^(main_194_overflow_intrinsic_sum13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_overflow_intrinsic_sum13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %overflow_intrinsic14 = lshr i65 %overflow_intrinsic12, 64*/
		main_194_overflow_intrinsic14 = (main_194_overflow_intrinsic12 >>> (65'd64 % 65'd65));
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %overflow_intrinsic14 = lshr i65 %overflow_intrinsic12, 64*/
	if ((cur_state == LEGUP_F_main_BB__194_190)) begin
		main_194_overflow_intrinsic14_reg <= main_194_overflow_intrinsic14;
		if (start == 1'b0 && ^(main_194_overflow_intrinsic14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_overflow_intrinsic14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %overflow_intrinsic_carry15 = trunc i65 %overflow_intrinsic14 to i1*/
		main_194_overflow_intrinsic_carry15 = main_194_overflow_intrinsic14;
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %overflow_intrinsic_carry15 = trunc i65 %overflow_intrinsic14 to i1*/
	if ((cur_state == LEGUP_F_main_BB__194_190)) begin
		main_194_overflow_intrinsic_carry15_reg <= main_194_overflow_intrinsic_carry15;
		if (start == 1'b0 && ^(main_194_overflow_intrinsic_carry15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_overflow_intrinsic_carry15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %206 = sub i64 0, %overflow_intrinsic_sum13*/
		main_194_206 = main_signed_subtract_64_2;
end
always @(*) begin
/* main: %194*/
/*   %206 = sub i64 0, %overflow_intrinsic_sum13*/
	main_194_206_reg = main_162_172_reg;
end
always @(*) begin
	/* main: %194*/
	/*   %.neg28.i = sext i1 %overflow_intrinsic_carry15 to i64*/
		main_194_neg28i = $signed(main_194_overflow_intrinsic_carry15);
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %.neg28.i = sext i1 %overflow_intrinsic_carry15 to i64*/
	if ((cur_state == LEGUP_F_main_BB__194_190)) begin
		main_194_neg28i_reg <= main_194_neg28i;
		if (start == 1'b0 && ^(main_194_neg28i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_neg28i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %207 = icmp ne i64 %overflow_intrinsic_sum13, 0*/
		main_194_207 = (main_194_overflow_intrinsic_sum13_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %207 = icmp ne i64 %overflow_intrinsic_sum13, 0*/
	if ((cur_state == LEGUP_F_main_BB__194_191)) begin
		main_194_207_reg <= main_194_207;
		if (start == 1'b0 && ^(main_194_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %.neg.i.i = sext i1 %207 to i64*/
		main_194_negii = $signed(main_194_207);
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %.neg.i.i = sext i1 %207 to i64*/
	if ((cur_state == LEGUP_F_main_BB__194_191)) begin
		main_194_negii_reg <= main_194_negii;
		if (start == 1'b0 && ^(main_194_negii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_negii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %.neg30.i = sub i64 %153, %200*/
		main_194_neg30i = main_signed_subtract_64_2;
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %.neg30.i = sub i64 %153, %200*/
	if ((cur_state == LEGUP_F_main_BB__194_189)) begin
		main_194_neg30i_reg <= main_194_neg30i;
		if (start == 1'b0 && ^(main_194_neg30i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_neg30i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %.neg32.i = add i64 %.neg30.i, %.neg28.i*/
		main_194_neg32i = main_signed_add_64_0;
end
always @(*) begin
/* main: %194*/
/*   %.neg32.i = add i64 %.neg30.i, %.neg28.i*/
	main_194_neg32i_reg = main_roundAndPackFloat64exiti_248_reg;
end
always @(*) begin
	/* main: %194*/
	/*   %208 = sub i64 %.neg32.i, %204*/
		main_194_208 = main_signed_subtract_64_1;
end
always @(*) begin
/* main: %194*/
/*   %208 = sub i64 %.neg32.i, %204*/
	main_194_208_reg = main_162_neg3ii_reg;
end
always @(*) begin
	/* main: %194*/
	/*   %209 = add i64 %208, %.neg.i.i*/
		main_194_209 = main_signed_add_64_1;
end
always @(*) begin
/* main: %194*/
/*   %209 = add i64 %208, %.neg.i.i*/
	main_194_209_reg = main_roundAndPackFloat64exiti_260_reg;
end
always @(*) begin
	/* main: %194*/
	/*   %210 = icmp slt i64 %209, 0*/
		main_194_210 = ($signed(main_194_209) < $signed(64'd0));
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %210 = icmp slt i64 %209, 0*/
	if ((cur_state == LEGUP_F_main_BB__194_191)) begin
		main_194_210_reg <= main_194_210;
		if (start == 1'b0 && ^(main_194_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %overflow_intrinsic17 = zext i64 %146 to i65*/
		main_lrphipreheader_overflow_intrinsic17 = main_138_146_reg;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %overflow_intrinsic17 = zext i64 %146 to i65*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_192)) begin
		main_lrphipreheader_overflow_intrinsic17_reg <= main_lrphipreheader_overflow_intrinsic17;
		if (start == 1'b0 && ^(main_lrphipreheader_overflow_intrinsic17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_overflow_intrinsic17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %zSig.036.i = phi i64 [ %213, %.lr.ph.i ], [ %191, %.lr.ph.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_192) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_zSig036i = main_estimateDiv128To64exiti_191_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %zSig.036.i = phi i64 [ %213, %.lr.ph.i ], [ %191, %.lr.ph.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphi_194) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_216 == 1'd1))) */ begin
		main_lrphi_zSig036i = main_lrphi_213_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %zSig.036.i = phi i64 [ %213, %.lr.ph.i ], [ %191, %.lr.ph.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_192) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_zSig036i_reg <= main_lrphi_zSig036i;
		if (start == 1'b0 && ^(main_lrphi_zSig036i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_zSig036i_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %zSig.036.i = phi i64 [ %213, %.lr.ph.i ], [ %191, %.lr.ph.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi_194) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_216 == 1'd1))) begin
		main_lrphi_zSig036i_reg <= main_lrphi_zSig036i;
		if (start == 1'b0 && ^(main_lrphi_zSig036i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_zSig036i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %211 = phi i64 [ %overflow_intrinsic_sum19, %.lr.ph.i ], [ %206, %.lr.ph.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_192) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_211 = main_194_206_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %211 = phi i64 [ %overflow_intrinsic_sum19, %.lr.ph.i ], [ %206, %.lr.ph.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphi_194) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_216 == 1'd1))) */ begin
		main_lrphi_211 = main_lrphi_overflow_intrinsic_sum19_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %211 = phi i64 [ %overflow_intrinsic_sum19, %.lr.ph.i ], [ %206, %.lr.ph.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_192) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_211_reg <= main_lrphi_211;
		if (start == 1'b0 && ^(main_lrphi_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_211_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %211 = phi i64 [ %overflow_intrinsic_sum19, %.lr.ph.i ], [ %206, %.lr.ph.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi_194) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_216 == 1'd1))) begin
		main_lrphi_211_reg <= main_lrphi_211;
		if (start == 1'b0 && ^(main_lrphi_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %212 = phi i64 [ %215, %.lr.ph.i ], [ %209, %.lr.ph.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_192) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_212 = main_194_209_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %212 = phi i64 [ %215, %.lr.ph.i ], [ %209, %.lr.ph.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphi_194) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_216 == 1'd1))) */ begin
		main_lrphi_212 = main_lrphi_215;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %212 = phi i64 [ %215, %.lr.ph.i ], [ %209, %.lr.ph.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_192) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_212_reg <= main_lrphi_212;
		if (start == 1'b0 && ^(main_lrphi_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_212_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %212 = phi i64 [ %215, %.lr.ph.i ], [ %209, %.lr.ph.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi_194) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_216 == 1'd1))) begin
		main_lrphi_212_reg <= main_lrphi_212;
		if (start == 1'b0 && ^(main_lrphi_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_212_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %213 = add i64 %zSig.036.i, -1*/
		main_lrphi_213 = main_signed_add_64_0;
end
always @(*) begin
/* main: %.lr.ph.i*/
/*   %213 = add i64 %zSig.036.i, -1*/
	main_lrphi_213_reg = main_roundAndPackFloat64exiti_248_reg;
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %overflow_intrinsic16 = zext i64 %211 to i65*/
		main_lrphi_overflow_intrinsic16 = main_lrphi_211_reg;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %overflow_intrinsic16 = zext i64 %211 to i65*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_193)) begin
		main_lrphi_overflow_intrinsic16_reg <= main_lrphi_overflow_intrinsic16;
		if (start == 1'b0 && ^(main_lrphi_overflow_intrinsic16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_overflow_intrinsic16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %overflow_intrinsic18 = add i65 %overflow_intrinsic16, %overflow_intrinsic17*/
		main_lrphi_overflow_intrinsic18 = (main_lrphi_overflow_intrinsic16 + main_lrphipreheader_overflow_intrinsic17_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %overflow_intrinsic18 = add i65 %overflow_intrinsic16, %overflow_intrinsic17*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_193)) begin
		main_lrphi_overflow_intrinsic18_reg <= main_lrphi_overflow_intrinsic18;
		if (start == 1'b0 && ^(main_lrphi_overflow_intrinsic18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_overflow_intrinsic18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %overflow_intrinsic_sum19 = trunc i65 %overflow_intrinsic18 to i64*/
		main_lrphi_overflow_intrinsic_sum19 = main_lrphi_overflow_intrinsic18[63:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %overflow_intrinsic_sum19 = trunc i65 %overflow_intrinsic18 to i64*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_193)) begin
		main_lrphi_overflow_intrinsic_sum19_reg <= main_lrphi_overflow_intrinsic_sum19;
		if (start == 1'b0 && ^(main_lrphi_overflow_intrinsic_sum19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_overflow_intrinsic_sum19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %overflow_intrinsic20 = lshr i65 %overflow_intrinsic18, 64*/
		main_lrphi_overflow_intrinsic20 = (main_lrphi_overflow_intrinsic18 >>> (65'd64 % 65'd65));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %overflow_intrinsic20 = lshr i65 %overflow_intrinsic18, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_193)) begin
		main_lrphi_overflow_intrinsic20_reg <= main_lrphi_overflow_intrinsic20;
		if (start == 1'b0 && ^(main_lrphi_overflow_intrinsic20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_overflow_intrinsic20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %overflow_intrinsic_carry21 = trunc i65 %overflow_intrinsic20 to i1*/
		main_lrphi_overflow_intrinsic_carry21 = main_lrphi_overflow_intrinsic20;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %overflow_intrinsic_carry21 = trunc i65 %overflow_intrinsic20 to i1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_193)) begin
		main_lrphi_overflow_intrinsic_carry21_reg <= main_lrphi_overflow_intrinsic_carry21;
		if (start == 1'b0 && ^(main_lrphi_overflow_intrinsic_carry21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_overflow_intrinsic_carry21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %214 = zext i1 %overflow_intrinsic_carry21 to i64*/
		main_lrphi_214 = main_lrphi_overflow_intrinsic_carry21;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %214 = zext i1 %overflow_intrinsic_carry21 to i64*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_193)) begin
		main_lrphi_214_reg <= main_lrphi_214;
		if (start == 1'b0 && ^(main_lrphi_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_214_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %215 = add i64 %214, %212*/
		main_lrphi_215 = main_signed_add_64_0;
end
always @(*) begin
/* main: %.lr.ph.i*/
/*   %215 = add i64 %214, %212*/
	main_lrphi_215_reg = main_176_179_reg;
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %216 = icmp slt i64 %215, 0*/
		main_lrphi_216 = ($signed(main_lrphi_215) < $signed(64'd0));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %216 = icmp slt i64 %215, 0*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_194)) begin
		main_lrphi_216_reg <= main_lrphi_216;
		if (start == 1'b0 && ^(main_lrphi_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %zSig.0.lcssa.i = phi i64 [ %191, %194 ], [ %213, %.lr.ph.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__194_191) & (memory_controller_waitrequest == 1'd0)) & (main_194_210 == 1'd0))) begin
		main__crit_edgei_zSig0lcssai = main_estimateDiv128To64exiti_191_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %zSig.0.lcssa.i = phi i64 [ %191, %194 ], [ %213, %.lr.ph.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphi_194) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_216 == 1'd0))) */ begin
		main__crit_edgei_zSig0lcssai = main_lrphi_213_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %zSig.0.lcssa.i = phi i64 [ %191, %194 ], [ %213, %.lr.ph.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__194_191) & (memory_controller_waitrequest == 1'd0)) & (main_194_210 == 1'd0))) begin
		main__crit_edgei_zSig0lcssai_reg <= main__crit_edgei_zSig0lcssai;
		if (start == 1'b0 && ^(main__crit_edgei_zSig0lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_zSig0lcssai_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %zSig.0.lcssa.i = phi i64 [ %191, %194 ], [ %213, %.lr.ph.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi_194) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_216 == 1'd0))) begin
		main__crit_edgei_zSig0lcssai_reg <= main__crit_edgei_zSig0lcssai;
		if (start == 1'b0 && ^(main__crit_edgei_zSig0lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_zSig0lcssai_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %.lcssa.i = phi i64 [ %206, %194 ], [ %overflow_intrinsic_sum19, %.lr.ph.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__194_191) & (memory_controller_waitrequest == 1'd0)) & (main_194_210 == 1'd0))) begin
		main__crit_edgei_lcssai = main_194_206;
	end
	/* main: %._crit_edge.i*/
	/*   %.lcssa.i = phi i64 [ %206, %194 ], [ %overflow_intrinsic_sum19, %.lr.ph.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphi_194) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_216 == 1'd0))) */ begin
		main__crit_edgei_lcssai = main_lrphi_overflow_intrinsic_sum19_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %.lcssa.i = phi i64 [ %206, %194 ], [ %overflow_intrinsic_sum19, %.lr.ph.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__194_191) & (memory_controller_waitrequest == 1'd0)) & (main_194_210 == 1'd0))) begin
		main__crit_edgei_lcssai_reg <= main__crit_edgei_lcssai;
		if (start == 1'b0 && ^(main__crit_edgei_lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_lcssai_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %.lcssa.i = phi i64 [ %206, %194 ], [ %overflow_intrinsic_sum19, %.lr.ph.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi_194) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_216 == 1'd0))) begin
		main__crit_edgei_lcssai_reg <= main__crit_edgei_lcssai;
		if (start == 1'b0 && ^(main__crit_edgei_lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_lcssai_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %217 = icmp ne i64 %.lcssa.i, 0*/
		main__crit_edgei_217 = (main__crit_edgei_lcssai_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %217 = icmp ne i64 %.lcssa.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_195)) begin
		main__crit_edgei_217_reg <= main__crit_edgei_217;
		if (start == 1'b0 && ^(main__crit_edgei_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_217_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %218 = zext i1 %217 to i64*/
		main__crit_edgei_218 = main__crit_edgei_217;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %218 = zext i1 %217 to i64*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_195)) begin
		main__crit_edgei_218_reg <= main__crit_edgei_218;
		if (start == 1'b0 && ^(main__crit_edgei_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_218_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %219 = or i64 %218, %zSig.0.lcssa.i*/
		main__crit_edgei_219 = (main__crit_edgei_218 | main__crit_edgei_zSig0lcssai_reg);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %219 = or i64 %218, %zSig.0.lcssa.i*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_195)) begin
		main__crit_edgei_219_reg <= main__crit_edgei_219;
		if (start == 1'b0 && ^(main__crit_edgei_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_219_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %zSig.1.i = phi i64 [ %219, %._crit_edge.i ], [ %191, %estimateDiv128To64.exit.i ], [ -1, %152 ]*/
	if ((((cur_state == LEGUP_F_main_BB__152_49) & (memory_controller_waitrequest == 1'd0)) & (main_152_154 == 1'd0))) begin
		main_estimateDiv128To64exitthreadi_zSig1i = -64'd1;
	end
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %zSig.1.i = phi i64 [ %219, %._crit_edge.i ], [ %191, %estimateDiv128To64.exit.i ], [ -1, %152 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_estimateDiv128To64exiti_187) & (memory_controller_waitrequest == 1'd0)) & (main_estimateDiv128To64exiti_193 == 1'd0))) begin
		main_estimateDiv128To64exitthreadi_zSig1i = main_estimateDiv128To64exiti_191;
	end
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %zSig.1.i = phi i64 [ %219, %._crit_edge.i ], [ %191, %estimateDiv128To64.exit.i ], [ -1, %152 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgei_195) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_estimateDiv128To64exitthreadi_zSig1i = main__crit_edgei_219;
	end
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %zSig.1.i = phi i64 [ %219, %._crit_edge.i ], [ %191, %estimateDiv128To64.exit.i ], [ -1, %152 ]*/
	if ((((cur_state == LEGUP_F_main_BB__152_49) & (memory_controller_waitrequest == 1'd0)) & (main_152_154 == 1'd0))) begin
		main_estimateDiv128To64exitthreadi_zSig1i_reg <= main_estimateDiv128To64exitthreadi_zSig1i;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitthreadi_zSig1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitthreadi_zSig1i_reg"); $finish; end
	end
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %zSig.1.i = phi i64 [ %219, %._crit_edge.i ], [ %191, %estimateDiv128To64.exit.i ], [ -1, %152 ]*/
	if ((((cur_state == LEGUP_F_main_BB_estimateDiv128To64exiti_187) & (memory_controller_waitrequest == 1'd0)) & (main_estimateDiv128To64exiti_193 == 1'd0))) begin
		main_estimateDiv128To64exitthreadi_zSig1i_reg <= main_estimateDiv128To64exitthreadi_zSig1i;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitthreadi_zSig1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitthreadi_zSig1i_reg"); $finish; end
	end
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %zSig.1.i = phi i64 [ %219, %._crit_edge.i ], [ %191, %estimateDiv128To64.exit.i ], [ -1, %152 ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgei_195) & (memory_controller_waitrequest == 1'd0))) begin
		main_estimateDiv128To64exitthreadi_zSig1i_reg <= main_estimateDiv128To64exitthreadi_zSig1i;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitthreadi_zSig1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitthreadi_zSig1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %.tr.i.i = trunc i64 %zSig.1.i to i32*/
		main_estimateDiv128To64exitthreadi_trii = main_estimateDiv128To64exitthreadi_zSig1i_reg[31:0];
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %.tr.i.i = trunc i64 %zSig.1.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_196)) begin
		main_estimateDiv128To64exitthreadi_trii_reg <= main_estimateDiv128To64exitthreadi_trii;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitthreadi_trii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitthreadi_trii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %220 = and i32 %.tr.i.i, 1023*/
		main_estimateDiv128To64exitthreadi_220 = (main_estimateDiv128To64exitthreadi_trii & 32'd1023);
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %220 = and i32 %.tr.i.i, 1023*/
	if ((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_196)) begin
		main_estimateDiv128To64exitthreadi_220_reg <= main_estimateDiv128To64exitthreadi_220;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitthreadi_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitthreadi_220_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %221 = and i32 %zExp.0.i, 65535*/
		main_estimateDiv128To64exitthreadi_221 = (main_152_zExp0i_reg & 32'd65535);
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %221 = and i32 %zExp.0.i, 65535*/
	if ((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_196)) begin
		main_estimateDiv128To64exitthreadi_221_reg <= main_estimateDiv128To64exitthreadi_221;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitthreadi_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitthreadi_221_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %222 = icmp ugt i32 %221, 2044*/
		main_estimateDiv128To64exitthreadi_222 = (main_estimateDiv128To64exitthreadi_221 > 32'd2044);
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %222 = icmp ugt i32 %221, 2044*/
	if ((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_196)) begin
		main_estimateDiv128To64exitthreadi_222_reg <= main_estimateDiv128To64exitthreadi_222;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitthreadi_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitthreadi_222_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %223 = icmp slt i32 %zExp.0.i, 0*/
		main_estimateDiv128To64exitthreadi_223 = ($signed(main_152_zExp0i_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %223 = icmp slt i32 %zExp.0.i, 0*/
	if ((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_196)) begin
		main_estimateDiv128To64exitthreadi_223_reg <= main_estimateDiv128To64exitthreadi_223;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitthreadi_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitthreadi_223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %or.cond3.i.i = and i1 %222, %223*/
		main_estimateDiv128To64exitthreadi_orcond3ii = (main_estimateDiv128To64exitthreadi_222 & main_estimateDiv128To64exitthreadi_223);
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %or.cond3.i.i = and i1 %222, %223*/
	if ((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_196)) begin
		main_estimateDiv128To64exitthreadi_orcond3ii_reg <= main_estimateDiv128To64exitthreadi_orcond3ii;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitthreadi_orcond3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitthreadi_orcond3ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %224*/
	/*   %225 = sub nsw i32 0, %zExp.0.i*/
		main_224_225 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %224*/
/*   %225 = sub nsw i32 0, %zExp.0.i*/
	main_224_225_reg = main_normalizeFloat64Subnormalexit10i_111_reg;
end
always @(*) begin
	/* main: %224*/
	/*   %226 = icmp eq i32 %zExp.0.i, 0*/
		main_224_226 = (main_152_zExp0i_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %224*/
	/*   %226 = icmp eq i32 %zExp.0.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__224_197)) begin
		main_224_226_reg <= main_224_226;
		if (start == 1'b0 && ^(main_224_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_224_226_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %227*/
	/*   %228 = icmp sgt i32 %zExp.0.i, -64*/
		main_227_228 = ($signed(main_152_zExp0i_reg) > $signed(-32'd64));
end
always @(posedge clk) begin
	/* main: %227*/
	/*   %228 = icmp sgt i32 %zExp.0.i, -64*/
	if ((cur_state == LEGUP_F_main_BB__227_198)) begin
		main_227_228_reg <= main_227_228;
		if (start == 1'b0 && ^(main_227_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_227_228_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %229*/
	/*   %230 = zext i32 %225 to i64*/
		main_229_230 = main_224_225_reg;
end
always @(posedge clk) begin
	/* main: %229*/
	/*   %230 = zext i32 %225 to i64*/
	if ((cur_state == LEGUP_F_main_BB__229_199)) begin
		main_229_230_reg <= main_229_230;
		if (start == 1'b0 && ^(main_229_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_229_230_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %229*/
	/*   %231 = lshr i64 %zSig.1.i, %230*/
		main_229_231 = (main_estimateDiv128To64exitthreadi_zSig1i_reg >>> (main_229_230 % 64'd64));
end
always @(posedge clk) begin
	/* main: %229*/
	/*   %231 = lshr i64 %zSig.1.i, %230*/
	if ((cur_state == LEGUP_F_main_BB__229_199)) begin
		main_229_231_reg <= main_229_231;
		if (start == 1'b0 && ^(main_229_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_229_231_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %229*/
	/*   %232 = and i32 %zExp.0.i, 63*/
		main_229_232 = (main_152_zExp0i_reg & 32'd63);
end
always @(posedge clk) begin
	/* main: %229*/
	/*   %232 = and i32 %zExp.0.i, 63*/
	if ((cur_state == LEGUP_F_main_BB__229_199)) begin
		main_229_232_reg <= main_229_232;
		if (start == 1'b0 && ^(main_229_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_229_232_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %229*/
	/*   %233 = zext i32 %232 to i64*/
		main_229_233 = main_229_232;
end
always @(posedge clk) begin
	/* main: %229*/
	/*   %233 = zext i32 %232 to i64*/
	if ((cur_state == LEGUP_F_main_BB__229_199)) begin
		main_229_233_reg <= main_229_233;
		if (start == 1'b0 && ^(main_229_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_229_233_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %229*/
	/*   %234 = shl i64 %zSig.1.i, %233*/
		main_229_234 = (main_estimateDiv128To64exitthreadi_zSig1i_reg <<< (main_229_233 % 64'd64));
end
always @(posedge clk) begin
	/* main: %229*/
	/*   %234 = shl i64 %zSig.1.i, %233*/
	if ((cur_state == LEGUP_F_main_BB__229_199)) begin
		main_229_234_reg <= main_229_234;
		if (start == 1'b0 && ^(main_229_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_229_234_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %229*/
	/*   %235 = icmp ne i64 %234, 0*/
		main_229_235 = (main_229_234 != 64'd0);
end
always @(posedge clk) begin
	/* main: %229*/
	/*   %235 = icmp ne i64 %234, 0*/
	if ((cur_state == LEGUP_F_main_BB__229_199)) begin
		main_229_235_reg <= main_229_235;
		if (start == 1'b0 && ^(main_229_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_229_235_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %229*/
	/*   %236 = zext i1 %235 to i64*/
		main_229_236 = main_229_235;
end
always @(posedge clk) begin
	/* main: %229*/
	/*   %236 = zext i1 %235 to i64*/
	if ((cur_state == LEGUP_F_main_BB__229_199)) begin
		main_229_236_reg <= main_229_236;
		if (start == 1'b0 && ^(main_229_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_229_236_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %229*/
	/*   %237 = or i64 %236, %231*/
		main_229_237 = (main_229_236 | main_229_231);
end
always @(posedge clk) begin
	/* main: %229*/
	/*   %237 = or i64 %236, %231*/
	if ((cur_state == LEGUP_F_main_BB__229_199)) begin
		main_229_237_reg <= main_229_237;
		if (start == 1'b0 && ^(main_229_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_229_237_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %238*/
	/*   %239 = icmp ne i64 %zSig.1.i, 0*/
		main_238_239 = (main_estimateDiv128To64exitthreadi_zSig1i_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %238*/
	/*   %239 = icmp ne i64 %zSig.1.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__238_200)) begin
		main_238_239_reg <= main_238_239;
		if (start == 1'b0 && ^(main_238_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_238_239_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %238*/
	/*   %240 = zext i1 %239 to i64*/
		main_238_240 = main_238_239;
end
always @(posedge clk) begin
	/* main: %238*/
	/*   %240 = zext i1 %239 to i64*/
	if ((cur_state == LEGUP_F_main_BB__238_200)) begin
		main_238_240_reg <= main_238_240;
		if (start == 1'b0 && ^(main_238_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_238_240_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.0.i.i.i = phi i64 [ %237, %229 ], [ %240, %238 ], [ %zSig.1.i, %224 ]*/
	if ((((cur_state == LEGUP_F_main_BB__224_197) & (memory_controller_waitrequest == 1'd0)) & (main_224_226 == 1'd1))) begin
		main_shift64RightJammingexitii_z0iii = main_estimateDiv128To64exitthreadi_zSig1i_reg;
	end
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.0.i.i.i = phi i64 [ %237, %229 ], [ %240, %238 ], [ %zSig.1.i, %224 ]*/
	else if (((cur_state == LEGUP_F_main_BB__229_199) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexitii_z0iii = main_229_237;
	end
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.0.i.i.i = phi i64 [ %237, %229 ], [ %240, %238 ], [ %zSig.1.i, %224 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__238_200) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexitii_z0iii = main_238_240;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.0.i.i.i = phi i64 [ %237, %229 ], [ %240, %238 ], [ %zSig.1.i, %224 ]*/
	if ((((cur_state == LEGUP_F_main_BB__224_197) & (memory_controller_waitrequest == 1'd0)) & (main_224_226 == 1'd1))) begin
		main_shift64RightJammingexitii_z0iii_reg <= main_shift64RightJammingexitii_z0iii;
		if (start == 1'b0 && ^(main_shift64RightJammingexitii_z0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitii_z0iii_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.0.i.i.i = phi i64 [ %237, %229 ], [ %240, %238 ], [ %zSig.1.i, %224 ]*/
	if (((cur_state == LEGUP_F_main_BB__229_199) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexitii_z0iii_reg <= main_shift64RightJammingexitii_z0iii;
		if (start == 1'b0 && ^(main_shift64RightJammingexitii_z0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitii_z0iii_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.0.i.i.i = phi i64 [ %237, %229 ], [ %240, %238 ], [ %zSig.1.i, %224 ]*/
	if (((cur_state == LEGUP_F_main_BB__238_200) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexitii_z0iii_reg <= main_shift64RightJammingexitii_z0iii;
		if (start == 1'b0 && ^(main_shift64RightJammingexitii_z0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitii_z0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %.tr4.i.i = trunc i64 %z.0.i.i.i to i32*/
		main_shift64RightJammingexitii_tr4ii = main_shift64RightJammingexitii_z0iii_reg[31:0];
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %.tr4.i.i = trunc i64 %z.0.i.i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_201)) begin
		main_shift64RightJammingexitii_tr4ii_reg <= main_shift64RightJammingexitii_tr4ii;
		if (start == 1'b0 && ^(main_shift64RightJammingexitii_tr4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitii_tr4ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %241 = and i32 %.tr4.i.i, 1023*/
		main_shift64RightJammingexitii_241 = (main_shift64RightJammingexitii_tr4ii & 32'd1023);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %241 = and i32 %.tr4.i.i, 1023*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_201)) begin
		main_shift64RightJammingexitii_241_reg <= main_shift64RightJammingexitii_241;
		if (start == 1'b0 && ^(main_shift64RightJammingexitii_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitii_241_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %242 = icmp eq i32 %241, 0*/
		main_shift64RightJammingexitii_242 = (main_shift64RightJammingexitii_241 == 32'd0);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %242 = icmp eq i32 %241, 0*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_201)) begin
		main_shift64RightJammingexitii_242_reg <= main_shift64RightJammingexitii_242;
		if (start == 1'b0 && ^(main_shift64RightJammingexitii_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitii_242_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %243*/
	/*   %244 = or i32 %float_exception_flags.0, 4*/
		main_243_244 = (main_1_float_exception_flags0_reg | 32'd4);
end
always @(posedge clk) begin
	/* main: %243*/
	/*   %244 = or i32 %float_exception_flags.0, 4*/
	if ((cur_state == LEGUP_F_main_BB__243_202)) begin
		main_243_244_reg <= main_243_244;
		if (start == 1'b0 && ^(main_243_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_243_244_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %245*/
	/*   %float_exception_flags.4 = phi i32 [ %244, %243 ], [ %float_exception_flags.0, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_196) & (memory_controller_waitrequest == 1'd0)) & (main_estimateDiv128To64exitthreadi_orcond3ii == 1'd0))) begin
		main_245_float_exception_flags4 = main_1_float_exception_flags0_reg;
	end
	/* main: %245*/
	/*   %float_exception_flags.4 = phi i32 [ %244, %243 ], [ %float_exception_flags.0, %estimateDiv128To64.exit.thread.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__243_202) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_245_float_exception_flags4 = main_243_244;
	end
end
always @(posedge clk) begin
	/* main: %245*/
	/*   %float_exception_flags.4 = phi i32 [ %244, %243 ], [ %float_exception_flags.0, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_196) & (memory_controller_waitrequest == 1'd0)) & (main_estimateDiv128To64exitthreadi_orcond3ii == 1'd0))) begin
		main_245_float_exception_flags4_reg <= main_245_float_exception_flags4;
		if (start == 1'b0 && ^(main_245_float_exception_flags4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_245_float_exception_flags4_reg"); $finish; end
	end
	/* main: %245*/
	/*   %float_exception_flags.4 = phi i32 [ %244, %243 ], [ %float_exception_flags.0, %estimateDiv128To64.exit.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB__243_202) & (memory_controller_waitrequest == 1'd0))) begin
		main_245_float_exception_flags4_reg <= main_245_float_exception_flags4;
		if (start == 1'b0 && ^(main_245_float_exception_flags4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_245_float_exception_flags4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %245*/
	/*   %zSig6.i.i = phi i64 [ %z.0.i.i.i, %243 ], [ %zSig.1.i, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_196) & (memory_controller_waitrequest == 1'd0)) & (main_estimateDiv128To64exitthreadi_orcond3ii == 1'd0))) begin
		main_245_zSig6ii = main_estimateDiv128To64exitthreadi_zSig1i_reg;
	end
	/* main: %245*/
	/*   %zSig6.i.i = phi i64 [ %z.0.i.i.i, %243 ], [ %zSig.1.i, %estimateDiv128To64.exit.thread.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__243_202) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_245_zSig6ii = main_shift64RightJammingexitii_z0iii_reg;
	end
end
always @(posedge clk) begin
	/* main: %245*/
	/*   %zSig6.i.i = phi i64 [ %z.0.i.i.i, %243 ], [ %zSig.1.i, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_196) & (memory_controller_waitrequest == 1'd0)) & (main_estimateDiv128To64exitthreadi_orcond3ii == 1'd0))) begin
		main_245_zSig6ii_reg <= main_245_zSig6ii;
		if (start == 1'b0 && ^(main_245_zSig6ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_245_zSig6ii_reg"); $finish; end
	end
	/* main: %245*/
	/*   %zSig6.i.i = phi i64 [ %z.0.i.i.i, %243 ], [ %zSig.1.i, %estimateDiv128To64.exit.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB__243_202) & (memory_controller_waitrequest == 1'd0))) begin
		main_245_zSig6ii_reg <= main_245_zSig6ii;
		if (start == 1'b0 && ^(main_245_zSig6ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_245_zSig6ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %245*/
	/*   %.0.i.i = phi i32 [ 0, %243 ], [ %zExp.0.i, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_196) & (memory_controller_waitrequest == 1'd0)) & (main_estimateDiv128To64exitthreadi_orcond3ii == 1'd0))) begin
		main_245_0ii = main_152_zExp0i_reg;
	end
	/* main: %245*/
	/*   %.0.i.i = phi i32 [ 0, %243 ], [ %zExp.0.i, %estimateDiv128To64.exit.thread.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__243_202) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_245_0ii = 32'd0;
	end
end
always @(posedge clk) begin
	/* main: %245*/
	/*   %.0.i.i = phi i32 [ 0, %243 ], [ %zExp.0.i, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_196) & (memory_controller_waitrequest == 1'd0)) & (main_estimateDiv128To64exitthreadi_orcond3ii == 1'd0))) begin
		main_245_0ii_reg <= main_245_0ii;
		if (start == 1'b0 && ^(main_245_0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_245_0ii_reg"); $finish; end
	end
	/* main: %245*/
	/*   %.0.i.i = phi i32 [ 0, %243 ], [ %zExp.0.i, %estimateDiv128To64.exit.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB__243_202) & (memory_controller_waitrequest == 1'd0))) begin
		main_245_0ii_reg <= main_245_0ii;
		if (start == 1'b0 && ^(main_245_0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_245_0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %245*/
	/*   %roundBits.0.i.i = phi i32 [ %241, %243 ], [ %220, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_196) & (memory_controller_waitrequest == 1'd0)) & (main_estimateDiv128To64exitthreadi_orcond3ii == 1'd0))) begin
		main_245_roundBits0ii = main_estimateDiv128To64exitthreadi_220;
	end
	/* main: %245*/
	/*   %roundBits.0.i.i = phi i32 [ %241, %243 ], [ %220, %estimateDiv128To64.exit.thread.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__243_202) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_245_roundBits0ii = main_shift64RightJammingexitii_241_reg;
	end
end
always @(posedge clk) begin
	/* main: %245*/
	/*   %roundBits.0.i.i = phi i32 [ %241, %243 ], [ %220, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_196) & (memory_controller_waitrequest == 1'd0)) & (main_estimateDiv128To64exitthreadi_orcond3ii == 1'd0))) begin
		main_245_roundBits0ii_reg <= main_245_roundBits0ii;
		if (start == 1'b0 && ^(main_245_roundBits0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_245_roundBits0ii_reg"); $finish; end
	end
	/* main: %245*/
	/*   %roundBits.0.i.i = phi i32 [ %241, %243 ], [ %220, %estimateDiv128To64.exit.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB__243_202) & (memory_controller_waitrequest == 1'd0))) begin
		main_245_roundBits0ii_reg <= main_245_roundBits0ii;
		if (start == 1'b0 && ^(main_245_roundBits0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_245_roundBits0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %245*/
	/*   %246 = icmp eq i32 %roundBits.0.i.i, 0*/
		main_245_246 = (main_245_roundBits0ii_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %245*/
	/*   %246 = icmp eq i32 %roundBits.0.i.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__245_203)) begin
		main_245_246_reg <= main_245_246;
		if (start == 1'b0 && ^(main_245_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_245_246_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %245*/
	/*   %247 = or i32 %float_exception_flags.4, 1*/
		main_245_247 = (main_245_float_exception_flags4_reg | 32'd1);
end
always @(posedge clk) begin
	/* main: %245*/
	/*   %247 = or i32 %float_exception_flags.4, 1*/
	if ((cur_state == LEGUP_F_main_BB__245_203)) begin
		main_245_247_reg <= main_245_247;
		if (start == 1'b0 && ^(main_245_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_245_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %245*/
	/*   %float_exception_flags.4. = select i1 %246, i32 %float_exception_flags.4, i32 %247*/
		main_245_float_exception_flags4_var0 = (main_245_246 ? main_245_float_exception_flags4_reg : main_245_247);
end
always @(posedge clk) begin
	/* main: %245*/
	/*   %float_exception_flags.4. = select i1 %246, i32 %float_exception_flags.4, i32 %247*/
	if ((cur_state == LEGUP_F_main_BB__245_203)) begin
		main_245_float_exception_flags4_var0_reg <= main_245_float_exception_flags4_var0;
		if (start == 1'b0 && ^(main_245_float_exception_flags4_var0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_245_float_exception_flags4_var0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %245*/
	/*   %.roundBits.0.i.i = select i1 %246, i32 0, i32 %roundBits.0.i.i*/
		main_245_roundBits0ii_var1 = (main_245_246 ? 32'd0 : main_245_roundBits0ii_reg);
end
always @(posedge clk) begin
	/* main: %245*/
	/*   %.roundBits.0.i.i = select i1 %246, i32 0, i32 %roundBits.0.i.i*/
	if ((cur_state == LEGUP_F_main_BB__245_203)) begin
		main_245_roundBits0ii_var1_reg <= main_245_roundBits0ii_var1;
		if (start == 1'b0 && ^(main_245_roundBits0ii_var1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_245_roundBits0ii_var1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %float_exception_flags.5 = phi i32 [ %float_exception_flags.0, %shift64RightJamming.exit.i.i ], [ %float_exception_flags.4., %245 ]*/
	if ((((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_201) & (memory_controller_waitrequest == 1'd0)) & (main_shift64RightJammingexitii_242 == 1'd1))) begin
		main_roundAndPackFloat64exiti_float_exception_flags5 = main_1_float_exception_flags0_reg;
	end
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %float_exception_flags.5 = phi i32 [ %float_exception_flags.0, %shift64RightJamming.exit.i.i ], [ %float_exception_flags.4., %245 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__245_203) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_roundAndPackFloat64exiti_float_exception_flags5 = main_245_float_exception_flags4_var0;
	end
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %float_exception_flags.5 = phi i32 [ %float_exception_flags.0, %shift64RightJamming.exit.i.i ], [ %float_exception_flags.4., %245 ]*/
	if ((((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_201) & (memory_controller_waitrequest == 1'd0)) & (main_shift64RightJammingexitii_242 == 1'd1))) begin
		main_roundAndPackFloat64exiti_float_exception_flags5_reg <= main_roundAndPackFloat64exiti_float_exception_flags5;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_float_exception_flags5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_float_exception_flags5_reg"); $finish; end
	end
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %float_exception_flags.5 = phi i32 [ %float_exception_flags.0, %shift64RightJamming.exit.i.i ], [ %float_exception_flags.4., %245 ]*/
	if (((cur_state == LEGUP_F_main_BB__245_203) & (memory_controller_waitrequest == 1'd0))) begin
		main_roundAndPackFloat64exiti_float_exception_flags5_reg <= main_roundAndPackFloat64exiti_float_exception_flags5;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_float_exception_flags5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_float_exception_flags5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %roundBits.09.i.i = phi i32 [ 0, %shift64RightJamming.exit.i.i ], [ %.roundBits.0.i.i, %245 ]*/
	if ((((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_201) & (memory_controller_waitrequest == 1'd0)) & (main_shift64RightJammingexitii_242 == 1'd1))) begin
		main_roundAndPackFloat64exiti_roundBits09ii = 32'd0;
	end
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %roundBits.09.i.i = phi i32 [ 0, %shift64RightJamming.exit.i.i ], [ %.roundBits.0.i.i, %245 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__245_203) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_roundAndPackFloat64exiti_roundBits09ii = main_245_roundBits0ii_var1;
	end
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %roundBits.09.i.i = phi i32 [ 0, %shift64RightJamming.exit.i.i ], [ %.roundBits.0.i.i, %245 ]*/
	if ((((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_201) & (memory_controller_waitrequest == 1'd0)) & (main_shift64RightJammingexitii_242 == 1'd1))) begin
		main_roundAndPackFloat64exiti_roundBits09ii_reg <= main_roundAndPackFloat64exiti_roundBits09ii;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_roundBits09ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_roundBits09ii_reg"); $finish; end
	end
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %roundBits.09.i.i = phi i32 [ 0, %shift64RightJamming.exit.i.i ], [ %.roundBits.0.i.i, %245 ]*/
	if (((cur_state == LEGUP_F_main_BB__245_203) & (memory_controller_waitrequest == 1'd0))) begin
		main_roundAndPackFloat64exiti_roundBits09ii_reg <= main_roundAndPackFloat64exiti_roundBits09ii;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_roundBits09ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_roundBits09ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %.08.i.i = phi i32 [ 0, %shift64RightJamming.exit.i.i ], [ %.0.i.i, %245 ]*/
	if ((((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_201) & (memory_controller_waitrequest == 1'd0)) & (main_shift64RightJammingexitii_242 == 1'd1))) begin
		main_roundAndPackFloat64exiti_08ii = 32'd0;
	end
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %.08.i.i = phi i32 [ 0, %shift64RightJamming.exit.i.i ], [ %.0.i.i, %245 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__245_203) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_roundAndPackFloat64exiti_08ii = main_245_0ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %.08.i.i = phi i32 [ 0, %shift64RightJamming.exit.i.i ], [ %.0.i.i, %245 ]*/
	if ((((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_201) & (memory_controller_waitrequest == 1'd0)) & (main_shift64RightJammingexitii_242 == 1'd1))) begin
		main_roundAndPackFloat64exiti_08ii_reg <= main_roundAndPackFloat64exiti_08ii;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_08ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_08ii_reg"); $finish; end
	end
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %.08.i.i = phi i32 [ 0, %shift64RightJamming.exit.i.i ], [ %.0.i.i, %245 ]*/
	if (((cur_state == LEGUP_F_main_BB__245_203) & (memory_controller_waitrequest == 1'd0))) begin
		main_roundAndPackFloat64exiti_08ii_reg <= main_roundAndPackFloat64exiti_08ii;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_08ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_08ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %zSig67.i.i = phi i64 [ %z.0.i.i.i, %shift64RightJamming.exit.i.i ], [ %zSig6.i.i, %245 ]*/
	if ((((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_201) & (memory_controller_waitrequest == 1'd0)) & (main_shift64RightJammingexitii_242 == 1'd1))) begin
		main_roundAndPackFloat64exiti_zSig67ii = main_shift64RightJammingexitii_z0iii_reg;
	end
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %zSig67.i.i = phi i64 [ %z.0.i.i.i, %shift64RightJamming.exit.i.i ], [ %zSig6.i.i, %245 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__245_203) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_roundAndPackFloat64exiti_zSig67ii = main_245_zSig6ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %zSig67.i.i = phi i64 [ %z.0.i.i.i, %shift64RightJamming.exit.i.i ], [ %zSig6.i.i, %245 ]*/
	if ((((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_201) & (memory_controller_waitrequest == 1'd0)) & (main_shift64RightJammingexitii_242 == 1'd1))) begin
		main_roundAndPackFloat64exiti_zSig67ii_reg <= main_roundAndPackFloat64exiti_zSig67ii;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_zSig67ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_zSig67ii_reg"); $finish; end
	end
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %zSig67.i.i = phi i64 [ %z.0.i.i.i, %shift64RightJamming.exit.i.i ], [ %zSig6.i.i, %245 ]*/
	if (((cur_state == LEGUP_F_main_BB__245_203) & (memory_controller_waitrequest == 1'd0))) begin
		main_roundAndPackFloat64exiti_zSig67ii_reg <= main_roundAndPackFloat64exiti_zSig67ii;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_zSig67ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_zSig67ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %248 = add i64 %zSig67.i.i, 512*/
		main_roundAndPackFloat64exiti_248 = main_signed_add_64_0;
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %248 = add i64 %zSig67.i.i, 512*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_204)) begin
		main_roundAndPackFloat64exiti_248_reg <= main_roundAndPackFloat64exiti_248;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_248_reg"); $finish; end
	end
	/* main: %162*/
	/*   %173 = add i64 %172, %.neg.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__162_117)) begin
		main_roundAndPackFloat64exiti_248_reg <= main_162_173;
		if (start == 1'b0 && ^(main_162_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_248_reg"); $finish; end
	end
	/* main: %194*/
	/*   %.neg32.i = add i64 %.neg30.i, %.neg28.i*/
	if ((cur_state == LEGUP_F_main_BB__194_191)) begin
		main_roundAndPackFloat64exiti_248_reg <= main_194_neg32i;
		if (start == 1'b0 && ^(main_194_neg32i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_248_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %213 = add i64 %zSig.036.i, -1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_193)) begin
		main_roundAndPackFloat64exiti_248_reg <= main_lrphi_213;
		if (start == 1'b0 && ^(main_lrphi_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_248_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %249 = lshr i64 %248, 10*/
		main_roundAndPackFloat64exiti_249 = (main_roundAndPackFloat64exiti_248 >>> (64'd10 % 64'd64));
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %249 = lshr i64 %248, 10*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_204)) begin
		main_roundAndPackFloat64exiti_249_reg <= main_roundAndPackFloat64exiti_249;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_249_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %250 = icmp eq i32 %roundBits.09.i.i, 512*/
		main_roundAndPackFloat64exiti_250 = (main_roundAndPackFloat64exiti_roundBits09ii_reg == 32'd512);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %250 = icmp eq i32 %roundBits.09.i.i, 512*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_204)) begin
		main_roundAndPackFloat64exiti_250_reg <= main_roundAndPackFloat64exiti_250;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_250_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %251 = zext i1 %250 to i32*/
		main_roundAndPackFloat64exiti_251 = main_roundAndPackFloat64exiti_250;
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %251 = zext i1 %250 to i32*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_204)) begin
		main_roundAndPackFloat64exiti_251_reg <= main_roundAndPackFloat64exiti_251;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_251_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %252 = xor i32 %251, -1*/
		main_roundAndPackFloat64exiti_252 = (main_roundAndPackFloat64exiti_251 ^ -32'd1);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %252 = xor i32 %251, -1*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_204)) begin
		main_roundAndPackFloat64exiti_252_reg <= main_roundAndPackFloat64exiti_252;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_252_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %253 = sext i32 %252 to i64*/
		main_roundAndPackFloat64exiti_253 = $signed(main_roundAndPackFloat64exiti_252);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %253 = sext i32 %252 to i64*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_204)) begin
		main_roundAndPackFloat64exiti_253_reg <= main_roundAndPackFloat64exiti_253;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_253_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %254 = and i64 %249, %253*/
		main_roundAndPackFloat64exiti_254 = (main_roundAndPackFloat64exiti_249 & main_roundAndPackFloat64exiti_253);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %254 = and i64 %249, %253*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_204)) begin
		main_roundAndPackFloat64exiti_254_reg <= main_roundAndPackFloat64exiti_254;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_254_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %255 = icmp eq i64 %254, 0*/
		main_roundAndPackFloat64exiti_255 = (main_roundAndPackFloat64exiti_254 == 64'd0);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %255 = icmp eq i64 %254, 0*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_204)) begin
		main_roundAndPackFloat64exiti_255_reg <= main_roundAndPackFloat64exiti_255;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_255_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %256 = shl nuw i64 %13, 63*/
		main_roundAndPackFloat64exiti_256 = (main_1_13_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %256 = shl nuw i64 %13, 63*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_204)) begin
		main_roundAndPackFloat64exiti_256_reg <= main_roundAndPackFloat64exiti_256;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_256_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %257 = zext i32 %.08.i.i to i64*/
		main_roundAndPackFloat64exiti_257 = main_roundAndPackFloat64exiti_08ii_reg;
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %257 = zext i32 %.08.i.i to i64*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_204)) begin
		main_roundAndPackFloat64exiti_257_reg <= main_roundAndPackFloat64exiti_257;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_257_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %.op.i.i = shl i64 %257, 52*/
		main_roundAndPackFloat64exiti_opii = (main_roundAndPackFloat64exiti_257 <<< (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %.op.i.i = shl i64 %257, 52*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_204)) begin
		main_roundAndPackFloat64exiti_opii_reg <= main_roundAndPackFloat64exiti_opii;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_opii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_opii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %258 = select i1 %255, i64 0, i64 %.op.i.i*/
		main_roundAndPackFloat64exiti_258 = (main_roundAndPackFloat64exiti_255 ? 64'd0 : main_roundAndPackFloat64exiti_opii);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %258 = select i1 %255, i64 0, i64 %.op.i.i*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_204)) begin
		main_roundAndPackFloat64exiti_258_reg <= main_roundAndPackFloat64exiti_258;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_258_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %259 = or i64 %254, %256*/
		main_roundAndPackFloat64exiti_259 = (main_roundAndPackFloat64exiti_254 | main_roundAndPackFloat64exiti_256);
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %259 = or i64 %254, %256*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_204)) begin
		main_roundAndPackFloat64exiti_259_reg <= main_roundAndPackFloat64exiti_259;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_259_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %260 = add i64 %258, %259*/
		main_roundAndPackFloat64exiti_260 = main_signed_add_64_1;
end
always @(posedge clk) begin
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %260 = add i64 %258, %259*/
	if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_204)) begin
		main_roundAndPackFloat64exiti_260_reg <= main_roundAndPackFloat64exiti_260;
		if (start == 1'b0 && ^(main_roundAndPackFloat64exiti_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_260_reg"); $finish; end
	end
	/* main: %176*/
	/*   %180 = add i64 %178, %156*/
	if ((cur_state == LEGUP_F_main_BB__176_119)) begin
		main_roundAndPackFloat64exiti_260_reg <= main_176_180;
		if (start == 1'b0 && ^(main_176_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_260_reg"); $finish; end
	end
	/* main: %194*/
	/*   %209 = add i64 %208, %.neg.i.i*/
	if ((cur_state == LEGUP_F_main_BB__194_191)) begin
		main_roundAndPackFloat64exiti_260_reg <= main_194_209;
		if (start == 1'b0 && ^(main_194_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundAndPackFloat64exiti_260_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %56, %55 ], [ %.float_exception_flags.017, %float64_is_signaling_nan.exit.i12.i ], [ %float_exception_flags.0, %57 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i19.i ], [ %float_exception_flags.0, %118 ], [ %float_exception_flags.5, %roundAndPackFloat64.exit.i ], [ %89, %88 ], [ %91, %90 ], [ %float_exception_flags.0, %80 ], [ %.float_exception_flags.019, %float64_is_signaling_nan.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti19i_10) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6 = main_float64_is_signaling_nanexiti19i_float_exception_flags0_reg;
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %56, %55 ], [ %.float_exception_flags.017, %float64_is_signaling_nan.exit.i12.i ], [ %float_exception_flags.0, %57 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i19.i ], [ %float_exception_flags.0, %118 ], [ %float_exception_flags.5, %roundAndPackFloat64.exit.i ], [ %89, %88 ], [ %91, %90 ], [ %float_exception_flags.0, %80 ], [ %.float_exception_flags.019, %float64_is_signaling_nan.exit.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti12i_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6 = main_float64_is_signaling_nanexiti12i_float_exception_flags017_reg;
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %56, %55 ], [ %.float_exception_flags.017, %float64_is_signaling_nan.exit.i12.i ], [ %float_exception_flags.0, %57 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i19.i ], [ %float_exception_flags.0, %118 ], [ %float_exception_flags.5, %roundAndPackFloat64.exit.i ], [ %89, %88 ], [ %91, %90 ], [ %float_exception_flags.0, %80 ], [ %.float_exception_flags.019, %float64_is_signaling_nan.exit.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__55_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6 = main_55_56;
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %56, %55 ], [ %.float_exception_flags.017, %float64_is_signaling_nan.exit.i12.i ], [ %float_exception_flags.0, %57 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i19.i ], [ %float_exception_flags.0, %118 ], [ %float_exception_flags.5, %roundAndPackFloat64.exit.i ], [ %89, %88 ], [ %91, %90 ], [ %float_exception_flags.0, %80 ], [ %.float_exception_flags.019, %float64_is_signaling_nan.exit.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__57_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6 = main_1_float_exception_flags0_reg;
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %56, %55 ], [ %.float_exception_flags.017, %float64_is_signaling_nan.exit.i12.i ], [ %float_exception_flags.0, %57 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i19.i ], [ %float_exception_flags.0, %118 ], [ %float_exception_flags.5, %roundAndPackFloat64.exit.i ], [ %89, %88 ], [ %91, %90 ], [ %float_exception_flags.0, %80 ], [ %.float_exception_flags.019, %float64_is_signaling_nan.exit.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6 = main_float64_is_signaling_nanexitii_float_exception_flags019_reg;
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %56, %55 ], [ %.float_exception_flags.017, %float64_is_signaling_nan.exit.i12.i ], [ %float_exception_flags.0, %57 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i19.i ], [ %float_exception_flags.0, %118 ], [ %float_exception_flags.5, %roundAndPackFloat64.exit.i ], [ %89, %88 ], [ %91, %90 ], [ %float_exception_flags.0, %80 ], [ %.float_exception_flags.019, %float64_is_signaling_nan.exit.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__80_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6 = main_1_float_exception_flags0_reg;
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %56, %55 ], [ %.float_exception_flags.017, %float64_is_signaling_nan.exit.i12.i ], [ %float_exception_flags.0, %57 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i19.i ], [ %float_exception_flags.0, %118 ], [ %float_exception_flags.5, %roundAndPackFloat64.exit.i ], [ %89, %88 ], [ %91, %90 ], [ %float_exception_flags.0, %80 ], [ %.float_exception_flags.019, %float64_is_signaling_nan.exit.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__88_32) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6 = main_88_89;
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %56, %55 ], [ %.float_exception_flags.017, %float64_is_signaling_nan.exit.i12.i ], [ %float_exception_flags.0, %57 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i19.i ], [ %float_exception_flags.0, %118 ], [ %float_exception_flags.5, %roundAndPackFloat64.exit.i ], [ %89, %88 ], [ %91, %90 ], [ %float_exception_flags.0, %80 ], [ %.float_exception_flags.019, %float64_is_signaling_nan.exit.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__90_33) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6 = main_90_91;
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %56, %55 ], [ %.float_exception_flags.017, %float64_is_signaling_nan.exit.i12.i ], [ %float_exception_flags.0, %57 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i19.i ], [ %float_exception_flags.0, %118 ], [ %float_exception_flags.5, %roundAndPackFloat64.exit.i ], [ %89, %88 ], [ %91, %90 ], [ %float_exception_flags.0, %80 ], [ %.float_exception_flags.019, %float64_is_signaling_nan.exit.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__118_41) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6 = main_1_float_exception_flags0_reg;
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %56, %55 ], [ %.float_exception_flags.017, %float64_is_signaling_nan.exit.i12.i ], [ %float_exception_flags.0, %57 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i19.i ], [ %float_exception_flags.0, %118 ], [ %float_exception_flags.5, %roundAndPackFloat64.exit.i ], [ %89, %88 ], [ %91, %90 ], [ %float_exception_flags.0, %80 ], [ %.float_exception_flags.019, %float64_is_signaling_nan.exit.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_204) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_divexit_float_exception_flags6 = main_roundAndPackFloat64exiti_float_exception_flags5_reg;
	end
end
always @(posedge clk) begin
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %56, %55 ], [ %.float_exception_flags.017, %float64_is_signaling_nan.exit.i12.i ], [ %float_exception_flags.0, %57 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i19.i ], [ %float_exception_flags.0, %118 ], [ %float_exception_flags.5, %roundAndPackFloat64.exit.i ], [ %89, %88 ], [ %91, %90 ], [ %float_exception_flags.0, %80 ], [ %.float_exception_flags.019, %float64_is_signaling_nan.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti19i_10) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6_reg <= main_float64_divexit_float_exception_flags6;
		if (start == 1'b0 && ^(main_float64_divexit_float_exception_flags6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_float_exception_flags6_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %56, %55 ], [ %.float_exception_flags.017, %float64_is_signaling_nan.exit.i12.i ], [ %float_exception_flags.0, %57 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i19.i ], [ %float_exception_flags.0, %118 ], [ %float_exception_flags.5, %roundAndPackFloat64.exit.i ], [ %89, %88 ], [ %91, %90 ], [ %float_exception_flags.0, %80 ], [ %.float_exception_flags.019, %float64_is_signaling_nan.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti12i_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6_reg <= main_float64_divexit_float_exception_flags6;
		if (start == 1'b0 && ^(main_float64_divexit_float_exception_flags6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_float_exception_flags6_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %56, %55 ], [ %.float_exception_flags.017, %float64_is_signaling_nan.exit.i12.i ], [ %float_exception_flags.0, %57 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i19.i ], [ %float_exception_flags.0, %118 ], [ %float_exception_flags.5, %roundAndPackFloat64.exit.i ], [ %89, %88 ], [ %91, %90 ], [ %float_exception_flags.0, %80 ], [ %.float_exception_flags.019, %float64_is_signaling_nan.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__55_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6_reg <= main_float64_divexit_float_exception_flags6;
		if (start == 1'b0 && ^(main_float64_divexit_float_exception_flags6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_float_exception_flags6_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %56, %55 ], [ %.float_exception_flags.017, %float64_is_signaling_nan.exit.i12.i ], [ %float_exception_flags.0, %57 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i19.i ], [ %float_exception_flags.0, %118 ], [ %float_exception_flags.5, %roundAndPackFloat64.exit.i ], [ %89, %88 ], [ %91, %90 ], [ %float_exception_flags.0, %80 ], [ %.float_exception_flags.019, %float64_is_signaling_nan.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__57_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6_reg <= main_float64_divexit_float_exception_flags6;
		if (start == 1'b0 && ^(main_float64_divexit_float_exception_flags6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_float_exception_flags6_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %56, %55 ], [ %.float_exception_flags.017, %float64_is_signaling_nan.exit.i12.i ], [ %float_exception_flags.0, %57 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i19.i ], [ %float_exception_flags.0, %118 ], [ %float_exception_flags.5, %roundAndPackFloat64.exit.i ], [ %89, %88 ], [ %91, %90 ], [ %float_exception_flags.0, %80 ], [ %.float_exception_flags.019, %float64_is_signaling_nan.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6_reg <= main_float64_divexit_float_exception_flags6;
		if (start == 1'b0 && ^(main_float64_divexit_float_exception_flags6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_float_exception_flags6_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %56, %55 ], [ %.float_exception_flags.017, %float64_is_signaling_nan.exit.i12.i ], [ %float_exception_flags.0, %57 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i19.i ], [ %float_exception_flags.0, %118 ], [ %float_exception_flags.5, %roundAndPackFloat64.exit.i ], [ %89, %88 ], [ %91, %90 ], [ %float_exception_flags.0, %80 ], [ %.float_exception_flags.019, %float64_is_signaling_nan.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__80_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6_reg <= main_float64_divexit_float_exception_flags6;
		if (start == 1'b0 && ^(main_float64_divexit_float_exception_flags6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_float_exception_flags6_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %56, %55 ], [ %.float_exception_flags.017, %float64_is_signaling_nan.exit.i12.i ], [ %float_exception_flags.0, %57 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i19.i ], [ %float_exception_flags.0, %118 ], [ %float_exception_flags.5, %roundAndPackFloat64.exit.i ], [ %89, %88 ], [ %91, %90 ], [ %float_exception_flags.0, %80 ], [ %.float_exception_flags.019, %float64_is_signaling_nan.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__88_32) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6_reg <= main_float64_divexit_float_exception_flags6;
		if (start == 1'b0 && ^(main_float64_divexit_float_exception_flags6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_float_exception_flags6_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %56, %55 ], [ %.float_exception_flags.017, %float64_is_signaling_nan.exit.i12.i ], [ %float_exception_flags.0, %57 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i19.i ], [ %float_exception_flags.0, %118 ], [ %float_exception_flags.5, %roundAndPackFloat64.exit.i ], [ %89, %88 ], [ %91, %90 ], [ %float_exception_flags.0, %80 ], [ %.float_exception_flags.019, %float64_is_signaling_nan.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__90_33) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6_reg <= main_float64_divexit_float_exception_flags6;
		if (start == 1'b0 && ^(main_float64_divexit_float_exception_flags6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_float_exception_flags6_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %56, %55 ], [ %.float_exception_flags.017, %float64_is_signaling_nan.exit.i12.i ], [ %float_exception_flags.0, %57 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i19.i ], [ %float_exception_flags.0, %118 ], [ %float_exception_flags.5, %roundAndPackFloat64.exit.i ], [ %89, %88 ], [ %91, %90 ], [ %float_exception_flags.0, %80 ], [ %.float_exception_flags.019, %float64_is_signaling_nan.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__118_41) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6_reg <= main_float64_divexit_float_exception_flags6;
		if (start == 1'b0 && ^(main_float64_divexit_float_exception_flags6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_float_exception_flags6_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %56, %55 ], [ %.float_exception_flags.017, %float64_is_signaling_nan.exit.i12.i ], [ %float_exception_flags.0, %57 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit.i19.i ], [ %float_exception_flags.0, %118 ], [ %float_exception_flags.5, %roundAndPackFloat64.exit.i ], [ %89, %88 ], [ %91, %90 ], [ %float_exception_flags.0, %80 ], [ %.float_exception_flags.019, %float64_is_signaling_nan.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_204) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6_reg <= main_float64_divexit_float_exception_flags6;
		if (start == 1'b0 && ^(main_float64_divexit_float_exception_flags6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_float_exception_flags6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i23.i, %float64_is_signaling_nan.exit.i19.i ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit.i12.i ], [ 9223372036854775807, %55 ], [ %59, %57 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ %81, %80 ], [ 9223372036854775807, %88 ], [ %93, %90 ], [ %119, %118 ], [ %260, %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti19i_10) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i = main_float64_is_signaling_nanexiti19i_mux2i23i;
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i23.i, %float64_is_signaling_nan.exit.i19.i ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit.i12.i ], [ 9223372036854775807, %55 ], [ %59, %57 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ %81, %80 ], [ 9223372036854775807, %88 ], [ %93, %90 ], [ %119, %118 ], [ %260, %roundAndPackFloat64.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti12i_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i = main_float64_is_signaling_nanexiti12i_mux2i16i;
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i23.i, %float64_is_signaling_nan.exit.i19.i ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit.i12.i ], [ 9223372036854775807, %55 ], [ %59, %57 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ %81, %80 ], [ 9223372036854775807, %88 ], [ %93, %90 ], [ %119, %118 ], [ %260, %roundAndPackFloat64.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__55_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i = 64'd9223372036854775807;
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i23.i, %float64_is_signaling_nan.exit.i19.i ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit.i12.i ], [ 9223372036854775807, %55 ], [ %59, %57 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ %81, %80 ], [ 9223372036854775807, %88 ], [ %93, %90 ], [ %119, %118 ], [ %260, %roundAndPackFloat64.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__57_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i = main_57_59;
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i23.i, %float64_is_signaling_nan.exit.i19.i ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit.i12.i ], [ 9223372036854775807, %55 ], [ %59, %57 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ %81, %80 ], [ 9223372036854775807, %88 ], [ %93, %90 ], [ %119, %118 ], [ %260, %roundAndPackFloat64.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i = main_float64_is_signaling_nanexitii_mux2ii;
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i23.i, %float64_is_signaling_nan.exit.i19.i ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit.i12.i ], [ 9223372036854775807, %55 ], [ %59, %57 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ %81, %80 ], [ 9223372036854775807, %88 ], [ %93, %90 ], [ %119, %118 ], [ %260, %roundAndPackFloat64.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__80_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i = main_80_81;
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i23.i, %float64_is_signaling_nan.exit.i19.i ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit.i12.i ], [ 9223372036854775807, %55 ], [ %59, %57 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ %81, %80 ], [ 9223372036854775807, %88 ], [ %93, %90 ], [ %119, %118 ], [ %260, %roundAndPackFloat64.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__88_32) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i = 64'd9223372036854775807;
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i23.i, %float64_is_signaling_nan.exit.i19.i ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit.i12.i ], [ 9223372036854775807, %55 ], [ %59, %57 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ %81, %80 ], [ 9223372036854775807, %88 ], [ %93, %90 ], [ %119, %118 ], [ %260, %roundAndPackFloat64.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__90_33) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i = main_90_93;
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i23.i, %float64_is_signaling_nan.exit.i19.i ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit.i12.i ], [ 9223372036854775807, %55 ], [ %59, %57 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ %81, %80 ], [ 9223372036854775807, %88 ], [ %93, %90 ], [ %119, %118 ], [ %260, %roundAndPackFloat64.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__118_41) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i = main_118_119;
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i23.i, %float64_is_signaling_nan.exit.i19.i ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit.i12.i ], [ 9223372036854775807, %55 ], [ %59, %57 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ %81, %80 ], [ 9223372036854775807, %88 ], [ %93, %90 ], [ %119, %118 ], [ %260, %roundAndPackFloat64.exit.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_204) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_divexit_0i = main_roundAndPackFloat64exiti_260;
	end
end
always @(posedge clk) begin
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i23.i, %float64_is_signaling_nan.exit.i19.i ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit.i12.i ], [ 9223372036854775807, %55 ], [ %59, %57 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ %81, %80 ], [ 9223372036854775807, %88 ], [ %93, %90 ], [ %119, %118 ], [ %260, %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti19i_10) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i_reg <= main_float64_divexit_0i;
		if (start == 1'b0 && ^(main_float64_divexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_0i_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i23.i, %float64_is_signaling_nan.exit.i19.i ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit.i12.i ], [ 9223372036854775807, %55 ], [ %59, %57 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ %81, %80 ], [ 9223372036854775807, %88 ], [ %93, %90 ], [ %119, %118 ], [ %260, %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti12i_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i_reg <= main_float64_divexit_0i;
		if (start == 1'b0 && ^(main_float64_divexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_0i_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i23.i, %float64_is_signaling_nan.exit.i19.i ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit.i12.i ], [ 9223372036854775807, %55 ], [ %59, %57 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ %81, %80 ], [ 9223372036854775807, %88 ], [ %93, %90 ], [ %119, %118 ], [ %260, %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__55_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i_reg <= main_float64_divexit_0i;
		if (start == 1'b0 && ^(main_float64_divexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_0i_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i23.i, %float64_is_signaling_nan.exit.i19.i ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit.i12.i ], [ 9223372036854775807, %55 ], [ %59, %57 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ %81, %80 ], [ 9223372036854775807, %88 ], [ %93, %90 ], [ %119, %118 ], [ %260, %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__57_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i_reg <= main_float64_divexit_0i;
		if (start == 1'b0 && ^(main_float64_divexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_0i_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i23.i, %float64_is_signaling_nan.exit.i19.i ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit.i12.i ], [ 9223372036854775807, %55 ], [ %59, %57 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ %81, %80 ], [ 9223372036854775807, %88 ], [ %93, %90 ], [ %119, %118 ], [ %260, %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i_reg <= main_float64_divexit_0i;
		if (start == 1'b0 && ^(main_float64_divexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_0i_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i23.i, %float64_is_signaling_nan.exit.i19.i ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit.i12.i ], [ 9223372036854775807, %55 ], [ %59, %57 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ %81, %80 ], [ 9223372036854775807, %88 ], [ %93, %90 ], [ %119, %118 ], [ %260, %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__80_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i_reg <= main_float64_divexit_0i;
		if (start == 1'b0 && ^(main_float64_divexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_0i_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i23.i, %float64_is_signaling_nan.exit.i19.i ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit.i12.i ], [ 9223372036854775807, %55 ], [ %59, %57 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ %81, %80 ], [ 9223372036854775807, %88 ], [ %93, %90 ], [ %119, %118 ], [ %260, %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__88_32) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i_reg <= main_float64_divexit_0i;
		if (start == 1'b0 && ^(main_float64_divexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_0i_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i23.i, %float64_is_signaling_nan.exit.i19.i ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit.i12.i ], [ 9223372036854775807, %55 ], [ %59, %57 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ %81, %80 ], [ 9223372036854775807, %88 ], [ %93, %90 ], [ %119, %118 ], [ %260, %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__90_33) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i_reg <= main_float64_divexit_0i;
		if (start == 1'b0 && ^(main_float64_divexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_0i_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i23.i, %float64_is_signaling_nan.exit.i19.i ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit.i12.i ], [ 9223372036854775807, %55 ], [ %59, %57 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ %81, %80 ], [ 9223372036854775807, %88 ], [ %93, %90 ], [ %119, %118 ], [ %260, %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__118_41) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i_reg <= main_float64_divexit_0i;
		if (start == 1'b0 && ^(main_float64_divexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_0i_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i23.i, %float64_is_signaling_nan.exit.i19.i ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit.i12.i ], [ 9223372036854775807, %55 ], [ %59, %57 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit.i.i ], [ %81, %80 ], [ 9223372036854775807, %88 ], [ %93, %90 ], [ %119, %118 ], [ %260, %roundAndPackFloat64.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_204) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i_reg <= main_float64_divexit_0i;
		if (start == 1'b0 && ^(main_float64_divexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit*/
	/*   %gep_int10 = ptrtoint [22 x i64]* @z_output to i32*/
if (reset) begin main_float64_divexit_gep_int10 = 0; end
		main_float64_divexit_gep_int10 = 1'd0;
end
always @(posedge clk) begin
	/* main: %float64_div.exit*/
	/*   %gep_int10 = ptrtoint [22 x i64]* @z_output to i32*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexit_205)) begin
		main_float64_divexit_gep_int10_reg <= main_float64_divexit_gep_int10;
		if (start == 1'b0 && ^(main_float64_divexit_gep_int10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_gep_int10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit*/
	/*   %gep_array11 = mul i32 %i.01, 8*/
		main_float64_divexit_gep_array11 = (main_1_i01_reg * 32'd8);
end
always @(posedge clk) begin
	/* main: %float64_div.exit*/
	/*   %gep_array11 = mul i32 %i.01, 8*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexit_205)) begin
		main_float64_divexit_gep_array11_reg <= main_float64_divexit_gep_array11;
		if (start == 1'b0 && ^(main_float64_divexit_gep_array11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_gep_array11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit*/
	/*   %gep12 = add i32 %gep_int10, %gep_array11*/
		main_float64_divexit_gep12 = main_signed_add_32_0;
end
always @(*) begin
/* main: %float64_div.exit*/
/*   %gep12 = add i32 %gep_int10, %gep_array11*/
	main_float64_divexit_gep12_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %float64_div.exit*/
	/*   %261 = inttoptr i32 %gep12 to i64**/
		main_float64_divexit_261 = main_float64_divexit_gep12;
end
always @(posedge clk) begin
	/* main: %float64_div.exit*/
	/*   %261 = inttoptr i32 %gep12 to i64**/
	if ((cur_state == LEGUP_F_main_BB_float64_divexit_206)) begin
		main_float64_divexit_261_reg <= main_float64_divexit_261;
		if (start == 1'b0 && ^(main_float64_divexit_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_261_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit*/
	/*   %262 = load i64* %261, align 8, !tbaa !1*/
		main_float64_divexit_262 = z_output_out_a;
end
always @(posedge clk) begin
	/* main: %float64_div.exit*/
	/*   %262 = load i64* %261, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexit_207)) begin
		main_float64_divexit_262_reg <= main_float64_divexit_262;
		if (start == 1'b0 && ^(main_float64_divexit_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_262_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit*/
	/*   %263 = icmp eq i64 %.0.i, %262*/
		main_float64_divexit_263 = (main_float64_divexit_0i_reg == main_float64_divexit_262);
end
always @(posedge clk) begin
	/* main: %float64_div.exit*/
	/*   %263 = icmp eq i64 %.0.i, %262*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexit_207)) begin
		main_float64_divexit_263_reg <= main_float64_divexit_263;
		if (start == 1'b0 && ^(main_float64_divexit_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_263_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit*/
	/*   %264 = zext i1 %263 to i32*/
		main_float64_divexit_264 = main_float64_divexit_263;
end
always @(posedge clk) begin
	/* main: %float64_div.exit*/
	/*   %264 = zext i1 %263 to i32*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexit_207)) begin
		main_float64_divexit_264_reg <= main_float64_divexit_264;
		if (start == 1'b0 && ^(main_float64_divexit_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_264_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit*/
	/*   %265 = add nsw i32 %264, %main_result.02*/
		main_float64_divexit_265 = main_signed_add_32_0;
end
always @(*) begin
/* main: %float64_div.exit*/
/*   %265 = add nsw i32 %264, %main_result.02*/
	main_float64_divexit_265_reg = main_normalizeFloat64Subnormalexit10i_106_reg;
end
always @(*) begin
	/* main: %float64_div.exit*/
	/*   %267 = add nsw i32 %i.01, 1*/
		main_float64_divexit_267 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %float64_div.exit*/
	/*   %267 = add nsw i32 %i.01, 1*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexit_205)) begin
		main_float64_divexit_267_reg <= main_float64_divexit_267;
		if (start == 1'b0 && ^(main_float64_divexit_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_267_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit*/
	/*   %exitcond = icmp eq i32 %267, 22*/
		main_float64_divexit_exitcond = (main_float64_divexit_267 == 32'd22);
end
always @(posedge clk) begin
	/* main: %float64_div.exit*/
	/*   %exitcond = icmp eq i32 %267, 22*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexit_205)) begin
		main_float64_divexit_exitcond_reg <= main_float64_divexit_exitcond;
		if (start == 1'b0 && ^(main_float64_divexit_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %268*/
	/*   %.lcssa5 = phi i32 [ %265, %float64_div.exit ]*/
		main_268_lcssa5 = main_float64_divexit_265;
end
always @(posedge clk) begin
	/* main: %268*/
	/*   %.lcssa5 = phi i32 [ %265, %float64_div.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_divexit_207) & (memory_controller_waitrequest == 1'd0)) & (main_float64_divexit_exitcond_reg == 1'd1))) begin
		main_268_lcssa5_reg <= main_268_lcssa5;
		if (start == 1'b0 && ^(main_268_lcssa5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_268_lcssa5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %268*/
	/*   %270 = icmp eq i32 %.lcssa5, 22*/
		main_268_270 = (main_268_lcssa5_reg == 32'd22);
end
always @(posedge clk) begin
	/* main: %268*/
	/*   %270 = icmp eq i32 %.lcssa5, 22*/
	if ((cur_state == LEGUP_F_main_BB__268_208)) begin
		main_268_270_reg <= main_268_270;
		if (start == 1'b0 && ^(main_268_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_268_270_reg"); $finish; end
	end
end
always @(*) begin
	a_input_address_a = 1'd0;
	/* main: %1*/
	/*   %3 = load i64* %2, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		a_input_address_a = (main_1_2 >>> 3'd3);
	end
end
always @(*) begin
	a_input_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %3 = load i64* %2, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		a_input_write_enable_a = 1'd0;
	end
end
always @(*) begin
	b_input_address_a = 1'd0;
	/* main: %1*/
	/*   %5 = load i64* %4, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		b_input_address_a = (main_1_4 >>> 3'd3);
	end
end
always @(*) begin
	b_input_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %5 = load i64* %4, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		b_input_write_enable_a = 1'd0;
	end
end
always @(*) begin
	z_output_address_a = 1'd0;
	/* main: %float64_div.exit*/
	/*   %262 = load i64* %261, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexit_206)) begin
		z_output_address_a = (main_float64_divexit_261 >>> 3'd3);
	end
end
always @(*) begin
	z_output_write_enable_a = 1'd0;
	/* main: %float64_div.exit*/
	/*   %262 = load i64* %261, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexit_206)) begin
		z_output_write_enable_a = 1'd0;
	end
end
always @(*) begin
	countLeadingZeros32countLeadingZerosHigh_address_a = 1'd0;
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %105 = load i32* %104, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_37)) begin
		countLeadingZeros32countLeadingZerosHigh_address_a = (main_normalizeFloat64Subnormalexit10i_104 >>> 3'd2);
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %131 = load i32* %130, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_45)) begin
		countLeadingZeros32countLeadingZerosHigh_address_a = (main_normalizeFloat64Subnormalexiti_130 >>> 3'd2);
	end
end
always @(*) begin
	countLeadingZeros32countLeadingZerosHigh_write_enable_a = 1'd0;
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %105 = load i32* %104, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_37)) begin
		countLeadingZeros32countLeadingZerosHigh_write_enable_a = 1'd0;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %131 = load i32* %130, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_45)) begin
		countLeadingZeros32countLeadingZerosHigh_write_enable_a = 1'd0;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_signed_add_32_0_op0 = main_1_gep_int_reg;
	end
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %106 = add nsw i32 %shiftCount.1.i.i.i9.i, %shiftCount.0.i.i4.i*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_36)) begin
		main_signed_add_32_0_op0 = main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i_reg;
	end
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %gep6 = add i32 %gep_int4, %gep_array5*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_37)) begin
		main_signed_add_32_0_op0 = main_normalizeFloat64Subnormalexit10i_gep_int4_reg;
	end
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %107 = add i32 %106, %105*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_38)) begin
		main_signed_add_32_0_op0 = main_normalizeFloat64Subnormalexit10i_106_reg;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %132 = add nsw i32 %shiftCount.1.i.i.i.i, %shiftCount.0.i.i.i*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_44)) begin
		main_signed_add_32_0_op0 = main_normalizeFloat64Subnormalexiti_shiftCount1iiii_reg;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %gep9 = add i32 %gep_int7, %gep_array8*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_45)) begin
		main_signed_add_32_0_op0 = main_normalizeFloat64Subnormalexiti_gep_int7_reg;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %133 = add i32 %132, %131*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_46)) begin
		main_signed_add_32_0_op0 = main_normalizeFloat64Subnormalexiti_132_reg;
	end
	/* main: %138*/
	/*   %142 = add nsw i32 %141, 1021*/
	else if ((cur_state == LEGUP_F_main_BB__138_47)) begin
		main_signed_add_32_0_op0 = main_138_141;
	end
	/* main: %149*/
	/*   %151 = add nsw i32 %141, 1022*/
	else if ((cur_state == LEGUP_F_main_BB__149_48)) begin
		main_signed_add_32_0_op0 = main_138_141_reg;
	end
	/* main: %float64_div.exit*/
	/*   %267 = add nsw i32 %i.01, 1*/
	else if ((cur_state == LEGUP_F_main_BB_float64_divexit_205)) begin
		main_signed_add_32_0_op0 = main_1_i01_reg;
	end
	/* main: %float64_div.exit*/
	/*   %gep12 = add i32 %gep_int10, %gep_array11*/
	else if ((cur_state == LEGUP_F_main_BB_float64_divexit_206)) begin
		main_signed_add_32_0_op0 = main_float64_divexit_gep_int10_reg;
	end
	/* main: %float64_div.exit*/
	/*   %265 = add nsw i32 %264, %main_result.02*/
	else /* if ((cur_state == LEGUP_F_main_BB_float64_divexit_207)) */ begin
		main_signed_add_32_0_op0 = main_float64_divexit_264;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_signed_add_32_0_op1 = main_1_gep_array_reg;
	end
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %106 = add nsw i32 %shiftCount.1.i.i.i9.i, %shiftCount.0.i.i4.i*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_36)) begin
		main_signed_add_32_0_op1 = main_94_shiftCount0ii4i_reg;
	end
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %gep6 = add i32 %gep_int4, %gep_array5*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_37)) begin
		main_signed_add_32_0_op1 = main_normalizeFloat64Subnormalexit10i_gep_array5_reg;
	end
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %107 = add i32 %106, %105*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_38)) begin
		main_signed_add_32_0_op1 = main_normalizeFloat64Subnormalexit10i_105;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %132 = add nsw i32 %shiftCount.1.i.i.i.i, %shiftCount.0.i.i.i*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_44)) begin
		main_signed_add_32_0_op1 = main_120_shiftCount0iii_reg;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %gep9 = add i32 %gep_int7, %gep_array8*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_45)) begin
		main_signed_add_32_0_op1 = main_normalizeFloat64Subnormalexiti_gep_array8_reg;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %133 = add i32 %132, %131*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_46)) begin
		main_signed_add_32_0_op1 = main_normalizeFloat64Subnormalexiti_131;
	end
	/* main: %138*/
	/*   %142 = add nsw i32 %141, 1021*/
	else if ((cur_state == LEGUP_F_main_BB__138_47)) begin
		main_signed_add_32_0_op1 = 32'd1021;
	end
	/* main: %149*/
	/*   %151 = add nsw i32 %141, 1022*/
	else if ((cur_state == LEGUP_F_main_BB__149_48)) begin
		main_signed_add_32_0_op1 = 32'd1022;
	end
	/* main: %float64_div.exit*/
	/*   %267 = add nsw i32 %i.01, 1*/
	else if ((cur_state == LEGUP_F_main_BB_float64_divexit_205)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %float64_div.exit*/
	/*   %gep12 = add i32 %gep_int10, %gep_array11*/
	else if ((cur_state == LEGUP_F_main_BB_float64_divexit_206)) begin
		main_signed_add_32_0_op1 = main_float64_divexit_gep_array11_reg;
	end
	/* main: %float64_div.exit*/
	/*   %265 = add nsw i32 %264, %main_result.02*/
	else /* if ((cur_state == LEGUP_F_main_BB_float64_divexit_207)) */ begin
		main_signed_add_32_0_op1 = main_1_main_result02_reg;
	end
end
always @(*) begin
	main_signed_add_32_0 = (main_signed_add_32_0_op0 + main_signed_add_32_0_op1);
end
always @(*) begin
	/* main: %1*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_signed_add_32_1_op0 = main_1_gep_int1_reg;
	end
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %108 = add nsw i32 %107, -11*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_38)) begin
		main_signed_add_32_1_op0 = main_normalizeFloat64Subnormalexit10i_107;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %134 = add nsw i32 %133, -11*/
	else /* if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_46)) */ begin
		main_signed_add_32_1_op0 = main_normalizeFloat64Subnormalexiti_133;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_signed_add_32_1_op1 = main_1_gep_array2_reg;
	end
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %108 = add nsw i32 %107, -11*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_38)) begin
		main_signed_add_32_1_op1 = -32'd11;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %134 = add nsw i32 %133, -11*/
	else /* if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_46)) */ begin
		main_signed_add_32_1_op1 = -32'd11;
	end
end
always @(*) begin
	main_signed_add_32_1 = (main_signed_add_32_1_op0 + main_signed_add_32_1_op1);
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %111 = sub i32 12, %107*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_38)) begin
		main_signed_subtract_32_0_op0 = 32'd12;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %137 = sub i32 12, %133*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_46)) begin
		main_signed_subtract_32_0_op0 = 32'd12;
	end
	/* main: %138*/
	/*   %141 = sub nsw i32 %139, %113*/
	else if ((cur_state == LEGUP_F_main_BB__138_47)) begin
		main_signed_subtract_32_0_op0 = main_138_139_reg;
	end
	/* main: %224*/
	/*   %225 = sub nsw i32 0, %zExp.0.i*/
	else /* if ((cur_state == LEGUP_F_main_BB__224_197)) */ begin
		main_signed_subtract_32_0_op0 = 32'd0;
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %111 = sub i32 12, %107*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_38)) begin
		main_signed_subtract_32_0_op1 = main_normalizeFloat64Subnormalexit10i_107;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %137 = sub i32 12, %133*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_46)) begin
		main_signed_subtract_32_0_op1 = main_normalizeFloat64Subnormalexiti_133;
	end
	/* main: %138*/
	/*   %141 = sub nsw i32 %139, %113*/
	else if ((cur_state == LEGUP_F_main_BB__138_47)) begin
		main_signed_subtract_32_0_op1 = main_112_113_reg;
	end
	/* main: %224*/
	/*   %225 = sub nsw i32 0, %zExp.0.i*/
	else /* if ((cur_state == LEGUP_F_main_BB__224_197)) */ begin
		main_signed_subtract_32_0_op1 = main_152_zExp0i_reg;
	end
end
always @(*) begin
	main_signed_subtract_32_0 = (main_signed_subtract_32_0_op0 - main_signed_subtract_32_0_op1);
end
always @(*) begin
	/* main: %162*/
	/*   %167 = mul i64 %164, %156*/
	if ((cur_state == LEGUP_F_main_BB__162_116)) begin
		main_signed_multiply_64_1_op0 = main_162_164;
	end
	/* main: %194*/
	/*   %197 = mul i64 %196, %165*/
	else /* if ((cur_state == LEGUP_F_main_BB__194_188)) */ begin
		main_signed_multiply_64_1_op0 = main_194_196;
	end
end
always @(*) begin
	/* main: %162*/
	/*   %167 = mul i64 %164, %156*/
	if ((cur_state == LEGUP_F_main_BB__162_116)) begin
		main_signed_multiply_64_1_op1 = main_155_156_reg;
	end
	/* main: %194*/
	/*   %197 = mul i64 %196, %165*/
	else /* if ((cur_state == LEGUP_F_main_BB__194_188)) */ begin
		main_signed_multiply_64_1_op1 = main_162_165_reg;
	end
end
always @(*) begin
	lpm_mult_main_194_197_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %197 = mul i64 %196, %165*/
	if ((lpm_mult_main_194_197_en == 1'd1)) begin
		main_194_197_stage0_reg <= (main_signed_multiply_64_1_op0 * main_signed_multiply_64_1_op1);
	end
end
always @(*) begin
	main_signed_multiply_64_1 = main_194_197_stage0_reg;
end
always @(*) begin
	/* main: %194*/
	/*   %198 = mul i64 %195, %165*/
		main_signed_multiply_64_2_op0 = main_194_195;
end
always @(*) begin
	/* main: %194*/
	/*   %198 = mul i64 %195, %165*/
		main_signed_multiply_64_2_op1 = main_162_165_reg;
end
always @(*) begin
	lpm_mult_main_194_198_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %198 = mul i64 %195, %165*/
	if ((lpm_mult_main_194_198_en == 1'd1)) begin
		main_194_198_stage0_reg <= (main_signed_multiply_64_2_op0 * main_signed_multiply_64_2_op1);
	end
end
always @(*) begin
	main_signed_multiply_64_2 = main_194_198_stage0_reg;
end
always @(*) begin
	/* main: %162*/
	/*   %166 = mul i64 %164, %165*/
	if ((cur_state == LEGUP_F_main_BB__162_116)) begin
		main_signed_multiply_64_0_op0 = main_162_164;
	end
	/* main: %194*/
	/*   %199 = mul i64 %196, %156*/
	else /* if ((cur_state == LEGUP_F_main_BB__194_188)) */ begin
		main_signed_multiply_64_0_op0 = main_194_196;
	end
end
always @(*) begin
	/* main: %162*/
	/*   %166 = mul i64 %164, %165*/
	if ((cur_state == LEGUP_F_main_BB__162_116)) begin
		main_signed_multiply_64_0_op1 = main_162_165;
	end
	/* main: %194*/
	/*   %199 = mul i64 %196, %156*/
	else /* if ((cur_state == LEGUP_F_main_BB__194_188)) */ begin
		main_signed_multiply_64_0_op1 = main_155_156_reg;
	end
end
always @(*) begin
	lpm_mult_main_194_199_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %199 = mul i64 %196, %156*/
	if ((lpm_mult_main_194_199_en == 1'd1)) begin
		main_194_199_stage0_reg <= (main_signed_multiply_64_0_op0 * main_signed_multiply_64_0_op1);
	end
end
always @(*) begin
	main_signed_multiply_64_0 = main_194_199_stage0_reg;
end
always @(*) begin
	/* main: %194*/
	/*   %200 = mul i64 %195, %156*/
		main_signed_multiply_64_3_op0 = main_194_195;
end
always @(*) begin
	/* main: %194*/
	/*   %200 = mul i64 %195, %156*/
		main_signed_multiply_64_3_op1 = main_155_156_reg;
end
always @(*) begin
	lpm_mult_main_194_200_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %200 = mul i64 %195, %156*/
	if ((lpm_mult_main_194_200_en == 1'd1)) begin
		main_194_200_stage0_reg <= (main_signed_multiply_64_3_op0 * main_signed_multiply_64_3_op1);
	end
end
always @(*) begin
	main_signed_multiply_64_3 = main_194_200_stage0_reg;
end
always @(*) begin
	/* main: %162*/
	/*   %173 = add i64 %172, %.neg.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__162_117)) begin
		main_signed_add_64_0_op0 = main_162_172;
	end
	/* main: %176*/
	/*   %179 = add i64 %z.05.i.i, -4294967296*/
	else if ((cur_state == LEGUP_F_main_BB__176_119)) begin
		main_signed_add_64_0_op0 = main_176_z05ii_reg;
	end
	/* main: %176*/
	/*   %182 = add i64 %180, %181*/
	else if ((cur_state == LEGUP_F_main_BB__176_120)) begin
		main_signed_add_64_0_op0 = main_176_180_reg;
	end
	/* main: %194*/
	/*   %.neg32.i = add i64 %.neg30.i, %.neg28.i*/
	else if ((cur_state == LEGUP_F_main_BB__194_191)) begin
		main_signed_add_64_0_op0 = main_194_neg30i_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %213 = add i64 %zSig.036.i, -1*/
	else if ((cur_state == LEGUP_F_main_BB_lrphi_193)) begin
		main_signed_add_64_0_op0 = main_lrphi_zSig036i_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %215 = add i64 %214, %212*/
	else if ((cur_state == LEGUP_F_main_BB_lrphi_194)) begin
		main_signed_add_64_0_op0 = main_lrphi_214_reg;
	end
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %248 = add i64 %zSig67.i.i, 512*/
	else /* if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_204)) */ begin
		main_signed_add_64_0_op0 = main_roundAndPackFloat64exiti_zSig67ii_reg;
	end
end
always @(*) begin
	/* main: %162*/
	/*   %173 = add i64 %172, %.neg.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__162_117)) begin
		main_signed_add_64_0_op1 = main_162_negiii;
	end
	/* main: %176*/
	/*   %179 = add i64 %z.05.i.i, -4294967296*/
	else if ((cur_state == LEGUP_F_main_BB__176_119)) begin
		main_signed_add_64_0_op1 = -64'd4294967296;
	end
	/* main: %176*/
	/*   %182 = add i64 %180, %181*/
	else if ((cur_state == LEGUP_F_main_BB__176_120)) begin
		main_signed_add_64_0_op1 = main_176_181_reg;
	end
	/* main: %194*/
	/*   %.neg32.i = add i64 %.neg30.i, %.neg28.i*/
	else if ((cur_state == LEGUP_F_main_BB__194_191)) begin
		main_signed_add_64_0_op1 = main_194_neg28i_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %213 = add i64 %zSig.036.i, -1*/
	else if ((cur_state == LEGUP_F_main_BB_lrphi_193)) begin
		main_signed_add_64_0_op1 = -64'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %215 = add i64 %214, %212*/
	else if ((cur_state == LEGUP_F_main_BB_lrphi_194)) begin
		main_signed_add_64_0_op1 = main_lrphi_212_reg;
	end
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %248 = add i64 %zSig67.i.i, 512*/
	else /* if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_204)) */ begin
		main_signed_add_64_0_op1 = 64'd512;
	end
end
always @(*) begin
	main_signed_add_64_0 = (main_signed_add_64_0_op0 + main_signed_add_64_0_op1);
end
always @(*) begin
	/* main: %176*/
	/*   %180 = add i64 %178, %156*/
	if ((cur_state == LEGUP_F_main_BB__176_119)) begin
		main_signed_add_64_1_op0 = main_176_178_reg;
	end
	/* main: %194*/
	/*   %209 = add i64 %208, %.neg.i.i*/
	else if ((cur_state == LEGUP_F_main_BB__194_191)) begin
		main_signed_add_64_1_op0 = main_194_208;
	end
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %260 = add i64 %258, %259*/
	else /* if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_204)) */ begin
		main_signed_add_64_1_op0 = main_roundAndPackFloat64exiti_258;
	end
end
always @(*) begin
	/* main: %176*/
	/*   %180 = add i64 %178, %156*/
	if ((cur_state == LEGUP_F_main_BB__176_119)) begin
		main_signed_add_64_1_op1 = main_155_156_reg;
	end
	/* main: %194*/
	/*   %209 = add i64 %208, %.neg.i.i*/
	else if ((cur_state == LEGUP_F_main_BB__194_191)) begin
		main_signed_add_64_1_op1 = main_194_negii;
	end
	/* main: %roundAndPackFloat64.exit.i*/
	/*   %260 = add i64 %258, %259*/
	else /* if ((cur_state == LEGUP_F_main_BB_roundAndPackFloat64exiti_204)) */ begin
		main_signed_add_64_1_op1 = main_roundAndPackFloat64exiti_259;
	end
end
always @(*) begin
	main_signed_add_64_1 = (main_signed_add_64_1_op0 + main_signed_add_64_1_op1);
end
always @(*) begin
	/* main: %159*/
	/*   %160 = udiv i64 %153, %156*/
	if ((cur_state == LEGUP_F_main_BB__159_51)) begin
		main_unsigned_divide_64_0_op0 = main_152_153_reg;
	end
	/* main: %188*/
	/*   %189 = udiv i64 %186, %156*/
	else /* if ((cur_state == LEGUP_F_main_BB__188_122)) */ begin
		main_unsigned_divide_64_0_op0 = main__crit_edgeii_186_reg;
	end
end
always @(*) begin
	/* main: %159*/
	/*   %160 = udiv i64 %153, %156*/
	if ((cur_state == LEGUP_F_main_BB__159_51)) begin
		main_unsigned_divide_64_0_op1 = main_155_156_reg;
	end
	/* main: %188*/
	/*   %189 = udiv i64 %186, %156*/
	else /* if ((cur_state == LEGUP_F_main_BB__188_122)) */ begin
		main_unsigned_divide_64_0_op1 = main_155_156_reg;
	end
end
always @(*) begin
	lpm_divide_main_159_160_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_main_159_160_out = lpm_divide_main_159_160_temp_out;
end
always @(*) begin
	main_unsigned_divide_64_0 = lpm_divide_main_159_160_out;
end
always @(*) begin
	/* main: %162*/
	/*   %170 = sub i64 0, %169*/
if (reset) begin main_signed_subtract_64_0_op0 = 0; end
		main_signed_subtract_64_0_op0 = 64'd0;
end
always @(*) begin
	/* main: %162*/
	/*   %170 = sub i64 0, %169*/
		main_signed_subtract_64_0_op1 = main_162_169;
end
always @(*) begin
	main_signed_subtract_64_0 = (main_signed_subtract_64_0_op0 - main_signed_subtract_64_0_op1);
end
always @(*) begin
	/* main: %162*/
	/*   %.neg3.i.i = sub i64 %153, %167*/
	if ((cur_state == LEGUP_F_main_BB__162_117)) begin
		main_signed_subtract_64_1_op0 = main_152_153_reg;
	end
	/* main: %194*/
	/*   %208 = sub i64 %.neg32.i, %204*/
	else /* if ((cur_state == LEGUP_F_main_BB__194_191)) */ begin
		main_signed_subtract_64_1_op0 = main_194_neg32i;
	end
end
always @(*) begin
	/* main: %162*/
	/*   %.neg3.i.i = sub i64 %153, %167*/
	if ((cur_state == LEGUP_F_main_BB__162_117)) begin
		main_signed_subtract_64_1_op1 = main_162_167;
	end
	/* main: %194*/
	/*   %208 = sub i64 %.neg32.i, %204*/
	else /* if ((cur_state == LEGUP_F_main_BB__194_191)) */ begin
		main_signed_subtract_64_1_op1 = main_194_204_reg;
	end
end
always @(*) begin
	main_signed_subtract_64_1 = (main_signed_subtract_64_1_op0 - main_signed_subtract_64_1_op1);
end
always @(*) begin
	/* main: %162*/
	/*   %172 = sub i64 %.neg3.i.i, %168*/
	if ((cur_state == LEGUP_F_main_BB__162_117)) begin
		main_signed_subtract_64_2_op0 = main_162_neg3ii;
	end
	/* main: %194*/
	/*   %.neg30.i = sub i64 %153, %200*/
	else if ((cur_state == LEGUP_F_main_BB__194_189)) begin
		main_signed_subtract_64_2_op0 = main_152_153_reg;
	end
	/* main: %194*/
	/*   %206 = sub i64 0, %overflow_intrinsic_sum13*/
	else /* if ((cur_state == LEGUP_F_main_BB__194_191)) */ begin
		main_signed_subtract_64_2_op0 = 64'd0;
	end
end
always @(*) begin
	/* main: %162*/
	/*   %172 = sub i64 %.neg3.i.i, %168*/
	if ((cur_state == LEGUP_F_main_BB__162_117)) begin
		main_signed_subtract_64_2_op1 = main_162_168;
	end
	/* main: %194*/
	/*   %.neg30.i = sub i64 %153, %200*/
	else if ((cur_state == LEGUP_F_main_BB__194_189)) begin
		main_signed_subtract_64_2_op1 = main_194_200;
	end
	/* main: %194*/
	/*   %206 = sub i64 0, %overflow_intrinsic_sum13*/
	else /* if ((cur_state == LEGUP_F_main_BB__194_191)) */ begin
		main_signed_subtract_64_2_op1 = main_194_overflow_intrinsic_sum13_reg;
	end
end
always @(*) begin
	main_signed_subtract_64_2 = (main_signed_subtract_64_2_op0 - main_signed_subtract_64_2_op1);
end
always @(*) begin
	lpm_mult_main_162_166_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_mult_main_162_167_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_main_188_189_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %275*/
	/*   ret i32 %.lcssa5*/
	if ((cur_state == LEGUP_F_main_BB__275_211)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %275*/
	/*   ret i32 %.lcssa5*/
	if ((cur_state == LEGUP_F_main_BB__275_211)) begin
		return_val <= main_268_lcssa5_reg;
		if (start == 1'b0 && ^(main_268_lcssa5_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 

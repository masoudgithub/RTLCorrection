//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Mon Apr  1 07:20:45 2019
//----------------------------------------------------------------------------//

--------------------------------------------------------------------------------
Function: main
--------------------------------------------------------------------------------
Function unit type:           Number Required               
decis_levl_local_mem_dual_port1                             
ilb_table_local_mem_dual_port 1                             
mem_dual_port                 2                             
qq2_code2_table_local_mem_dual_port1                             
qq4_code4_table_local_mem_dual_port1                             
qq6_code6_table_local_mem_dual_port1                             
result_local_mem_dual_port    1                             
signed_add_32                 19                            
signed_divide_32              1                             
signed_multiply_32            29                            
signed_subtract_32            2                             
test_data_local_mem_dual_port 2                             
test_result_local_mem_dual_port1                             
tqmf_local_mem_dual_port      2                             
wh_code_table_local_mem_dual_port1                             
wl_code_table_local_mem_dual_port1                             
--------------------------------------------------------------------------------
Function: legup_memset_4_i64
--------------------------------------------------------------------------------
Function unit type:           Number Required               
legup_memset_4_i64_0_1_local_mem_dual_port1                             
legup_memset_4_i64_0_2_local_mem_dual_port1                             
legup_memset_4_i64_0_3_local_mem_dual_port1                             
legup_memset_4_i64_0_c_local_mem_dual_port2                             
legup_memset_4_i64_0_s_local_mem_dual_port2                             
signed_add_32                 1                             
signed_add_64                 1                             

Running Bipartite Weighted Matching on function: legup_memset_4_i64
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_1_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0
  store i8* %m, i8** %1, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0
  store i8* %m, i8** %1, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8* %m, i8** %1, align... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_2_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0
  store i8 %c1, i8* %2, align ... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0
  store i8 %c1, i8* %2, align ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8 %c1, i8* %2, align ... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %n, i64* %3, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %n, i64* %3, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i64 %n, i64* %3, align... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_1_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %14 = load i8** %1, align 4 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0
  %14 = load i8** %1, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0
  %14 = load i8** %1, align 4 (idx: 0)            100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0
  %14 = load i8** %1, align 4 (idx: 0)            1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %14 = load i8** %1, align 4 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_1_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_2_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %4 = load i8* %2, align 1 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0
  %4 = load i8* %2, align 1 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0
  %4 = load i8* %2, align 1 (idx: 0)              100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0
  %4 = load i8* %2, align 1 (idx: 0)              1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %4 = load i8* %2, align 1 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_2_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %16 = load i64* %3, align 8 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  %16 = load i64* %3, align 8 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  %16 = load i64* %3, align 8 (idx: 0)            100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  %16 = load i64* %3, align 8 (idx: 0)            1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %16 = load i64* %3, align 8 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i64 %17, i64* %3, alig... hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %17, i64* %3, alig... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %17, i64* %3, alig... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %17, i64* %3, alig... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i64 %17, i64* %3, alig... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %5, i32* %c, align... (idx: 0)        90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %5, i32* %c, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %5, i32* %c, align... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_s_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_1
  store i32* %15, i32** %s, al... (idx: 0)        90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_1
  store i32* %15, i32** %s, al... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32* %15, i32** %s, al... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %6 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %6 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %8 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %8 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %6 = load i32* %c, align 4 (idx: 0)             90                            95                            
  %8 = load i32* %c, align 4 (idx: 1)             90                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %6 = load i32* %c, align 4 (idx: 0)             1                             0                             
  %8 = load i32* %c, align 4 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %6 = load i32* %c, align 4 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0 (mux inputs: 2)
  %8 = load i32* %c, align 4 (idx: 1) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %9, i32* %c, align... hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  store i32 %9, i32* %c, align... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  store i32 %9, i32* %c, align... hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %9, i32* %c, align... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %9, i32* %c, align... (idx: 0)        85                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %9, i32* %c, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %9, i32* %c, align... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %10 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %10 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %10 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %10 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %12 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %12 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %12 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %12 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %10 = load i32* %c, align 4 (idx: 0)            80                            100                           
  %12 = load i32* %c, align 4 (idx: 1)            80                            100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %10 = load i32* %c, align 4 (idx: 0)            1                             0                             
  %12 = load i32* %c, align 4 (idx: 1)            0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %10 = load i32* %c, align 4 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0 (mux inputs: 3)
  %12 = load i32* %c, align 4 (idx: 1) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__0
Binding functional unit type: legup_memset_4_i64_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %13, i32* %c, alig... hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  store i32 %13, i32* %c, alig... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  store i32 %13, i32* %c, alig... hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %13, i32* %c, alig... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %13, i32* %c, alig... (idx: 0)        75                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  store i32 %13, i32* %c, alig... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %13, i32* %c, alig... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_legup_memset_4_i64_BB__18
Binding functional unit type: legup_memset_4_i64_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %19 = load i64* %3, align 8 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  %19 = load i64* %3, align 8 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  %19 = load i64* %3, align 8 (idx: 0)            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  %19 = load i64* %3, align 8 (idx: 0)            1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %19 = load i64* %3, align 8 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_i64_BB__18
Binding functional unit type: legup_memset_4_i64_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i64 %20, i64* %3, alig... hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %20, i64* %3, alig... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %20, i64* %3, alig... (idx: 0)        85                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0
  store i64 %20, i64* %3, alig... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i64 %20, i64* %3, alig... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_3_local_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_legup_memset_4_i64_BB__18
Binding functional unit type: signed_add_64
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_i64_signed_add_64_0
  %20 = add i64 %19, -1 (idx: 0)                  95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_signed_add_64_0
  %20 = add i64 %19, -1 (idx: 0)                  1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %20 = add i64 %19, -1 (idx: 0) -> legup_memset_4_i64_signed_add_64_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_i64_BB__22
Binding functional unit type: legup_memset_4_i64_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %23 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %23 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0
  %23 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %23 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %23 = load i32* %c, align 4 (idx: 0)            70                            100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_1
  %23 = load i32* %c, align 4 (idx: 0)            1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %23 = load i32* %c, align 4 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_c_local_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_legup_memset_4_i64_BB__22
Binding functional unit type: legup_memset_4_i64_0_s_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %24 = load i32** %s, align 4 hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0
  %24 = load i32** %s, align 4 can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_1
  %24 = load i32** %s, align 4 (idx: 0)           90                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_1
  %24 = load i32** %s, align 4 (idx: 0)           1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %24 = load i32** %s, align 4 (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_i64_BB__22
Binding functional unit type: legup_memset_4_i64_0_s_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32* %25, i32** %s, al... hey can share an input with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0
  store i32* %25, i32** %s, al... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0
  store i32 %23, i32* %24, ali... can share an output register with another operation already assigned to legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0
                                                  legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_1
  store i32* %25, i32** %s, al... (idx: 0)        85                            90                            
  store i32 %23, i32* %24, ali... (idx: 1)        80                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_1
  store i32* %25, i32** %s, al... (idx: 0)        0                             1                             
  store i32 %23, i32* %24, ali... (idx: 1)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %23, i32* %24, ali... (idx: 1) -> legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_0 (mux inputs: 4)
  store i32* %25, i32** %s, al... (idx: 0) -> legup_memset_4_i64_legup_memset_4_i64_0_s_local_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_i64_BB__22
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_i64_signed_add_32_0
  %gep = add i32 %gep_int, 4 (idx: 0)             -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_i64_signed_add_32_0
  %gep = add i32 %gep_int, 4 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep = add i32 %gep_int, 4 (idx: 0) -> legup_memset_4_i64_signed_add_32_0 (mux inputs: 1)

Running Bipartite Weighted Matching on function: main
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             1                             
  store i32 0, i32* getelement... (idx: 1)        1                             1                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        11                            11                            
  store i32 0, i32* getelement... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %61 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %61 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
  %64 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %64 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %61 = load i32* getelementpt... (idx: 0)        11                            11                            
  %64 = load i32* getelementpt... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %61 = load i32* getelementpt... (idx: 0)        1                             0                             
  %64 = load i32* getelementpt... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %61 = load i32* getelementpt... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  %64 = load i32* getelementpt... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %42 = mul nsw i32 %35, 212 (idx
  %43 = mul nsw i32 %34, -44 (idx
  %44 = mul nsw i32 %33, -44 (idx
  %45 = mul nsw i32 %32, 12 (idx: 3)              -5                            -4                            -5                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -3                            -4                            -3                            -4                            -4                            -3                            -4                            -3                            -4                            -3                            -5                            -4                            -4                            -3                            -3                            -4                            -3                            -4                            
  %52 = mul nsw i32 %11, %12 (idx: 4)             -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -8                            -8                            -8                            -8                            -8                            -8                            -8                            
  %53 = mul nsw i32 %9, %10 (idx: 5)              -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -9                            -10                           -9                            -10                           -10                           -9                            -10                           -9                            -10                           -9                            -10                           -9                            -9                            -8                            -8                            -9                            -8                            -9                            
  %55 = mul nsw i32 %7, %8 (idx: 6)               -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -8                            -8                            -8                            -8                            -8                            -8                            -8                            
  %57 = mul nsw i32 %5, %6 (idx: 7)               -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -8                            -8                            -8                            -8                            -8                            -8                            -8                            
  %59 = mul nsw i32 %3, %4 (idx: 8)               -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -8                            -8                            -8                            -8                            -8                            -8                            -8                            
  %86 = mul nsw i32 %85, %al2.... (idx: 9)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %42 = mul nsw i32 %35, 212 (idx
  %43 = mul nsw i32 %34, -44 (idx
  %44 = mul nsw i32 %33, -44 (idx
  %45 = mul nsw i32 %32, 12 (idx
  %52 = mul nsw i32 %11, %12 (idx
  %53 = mul nsw i32 %9, %10 (idx
  %55 = mul nsw i32 %7, %8 (idx
  %57 = mul nsw i32 %5, %6 (idx
  %59 = mul nsw i32 %3, %4 (idx: 8)               0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %86 = mul nsw i32 %85, %al2.... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %43 = mul nsw i32 %34, -44 (idx: 1) -> main_signed_multiply_32_0 (mux inputs: 1)
  %44 = mul nsw i32 %33, -44 (idx: 2) -> main_signed_multiply_32_1 (mux inputs: 1)
  %45 = mul nsw i32 %32, 12 (idx: 3) -> main_signed_multiply_32_2 (mux inputs: 1)
  %42 = mul nsw i32 %35, 212 (idx: 0) -> main_signed_multiply_32_3 (mux inputs: 1)
  %52 = mul nsw i32 %11, %12 (idx: 4) -> main_signed_multiply_32_4 (mux inputs: 2)
  %53 = mul nsw i32 %9, %10 (idx: 5) -> main_signed_multiply_32_5 (mux inputs: 2)
  %55 = mul nsw i32 %7, %8 (idx: 6) -> main_signed_multiply_32_6 (mux inputs: 2)
  %57 = mul nsw i32 %5, %6 (idx: 7) -> main_signed_multiply_32_7 (mux inputs: 2)
  %59 = mul nsw i32 %3, %4 (idx: 8) -> main_signed_multiply_32_8 (mux inputs: 2)
  %86 = mul nsw i32 %85, %al2.... (idx: 9) -> main_signed_multiply_32_9 (mux inputs: 2)
State: LEGUP_F_main_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %65 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %65 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
  %68 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %68 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %65 = load i32* getelementpt... (idx: 0)        11                            11                            
  %68 = load i32* getelementpt... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %65 = load i32* getelementpt... (idx: 0)        1                             0                             
  %68 = load i32* getelementpt... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %65 = load i32* getelementpt... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  %68 = load i32* getelementpt... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep = add i32 %gep_int, %ge... (idx: 0)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %gep3 = add i32 %gep_int1, %... (idx: 1)        -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %46 = add nsw i32 %43, %42 (idx: 2)             -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %47 = add nsw i32 %45, %44 (idx
  %48 = add nsw i32 %47, %46 (idx: 4)             -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %54 = add nsw i32 %53, %52 (idx: 5)             -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %56 = add nsw i32 %54, %55 (idx: 6)             -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %58 = add nsw i32 %56, %57 (idx
  %60 = add nsw i32 %58, %59 (idx: 8)             -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep = add i32 %gep_int, %ge... (idx
  %gep3 = add i32 %gep_int1, %... (idx
  %46 = add nsw i32 %43, %42 (idx
  %47 = add nsw i32 %45, %44 (idx
  %48 = add nsw i32 %47, %46 (idx
  %54 = add nsw i32 %53, %52 (idx
  %56 = add nsw i32 %54, %55 (idx
  %58 = add nsw i32 %56, %57 (idx
  %60 = add nsw i32 %58, %59 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep = add i32 %gep_int, %ge... (idx: 0) -> main_signed_add_32_0 (mux inputs: 2)
  %gep3 = add i32 %gep_int1, %... (idx: 1) -> main_signed_add_32_1 (mux inputs: 2)
  %46 = add nsw i32 %43, %42 (idx: 2) -> main_signed_add_32_2 (mux inputs: 2)
  %47 = add nsw i32 %45, %44 (idx: 3) -> main_signed_add_32_3 (mux inputs: 2)
  %48 = add nsw i32 %47, %46 (idx: 4) -> main_signed_add_32_4 (mux inputs: 2)
  %54 = add nsw i32 %53, %52 (idx: 5) -> main_signed_add_32_5 (mux inputs: 2)
  %56 = add nsw i32 %54, %55 (idx: 6) -> main_signed_add_32_6 (mux inputs: 2)
  %60 = add nsw i32 %58, %59 (idx: 8) -> main_signed_add_32_7 (mux inputs: 2)
  %58 = add nsw i32 %56, %57 (idx: 7) -> main_signed_add_32_17 (mux inputs: 2)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %50 = sub nsw i32 %46, %47 (idx: 0)             -9                            -9                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %50 = sub nsw i32 %46, %47 (idx: 0)             1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %50 = sub nsw i32 %46, %47 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 2)
State: LEGUP_F_main_BB__1
Binding functional unit type: test_data_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_test_data_local_mem_dual_port_0main_test_data_local_mem_dual_port_1
  %38 = load i32* %37, align 4... (idx: 0)        95                            95                            
  %41 = load i32* %40, align 4... (idx: 1)        95                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_test_data_local_mem_dual_port_0main_test_data_local_mem_dual_port_1
  %38 = load i32* %37, align 4... (idx: 0)        1                             0                             
  %41 = load i32* %40, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %38 = load i32* %37, align 4... (idx: 0) -> main_test_data_local_mem_dual_port_0 (mux inputs: 1)
  %41 = load i32* %40, align 4... (idx: 1) -> main_test_data_local_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_main_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %69 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %69 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
  %72 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %72 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %69 = load i32* getelementpt... (idx: 0)        11                            11                            
  %72 = load i32* getelementpt... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %69 = load i32* getelementpt... (idx: 0)        1                             0                             
  %72 = load i32* getelementpt... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %69 = load i32* getelementpt... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  %72 = load i32* getelementpt... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %62 = mul nsw i32 %61, %2 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %62 = mul nsw i32 %61, %2 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %62 = mul nsw i32 %61, %2 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %62 = mul nsw i32 %61, %2 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %62 = mul nsw i32 %61, %2 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %62 = mul nsw i32 %61, %2 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %62 = mul nsw i32 %61, %2 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %62 = mul nsw i32 %61, %2 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %62 = mul nsw i32 %61, %2 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %62 = mul nsw i32 %61, %2 can share an output register with another operation already assigned to main_signed_multiply_32_9
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %62 = mul nsw i32 %61, %2 (idx: 0)              -10                           -10                           -10                           -10                           -20                           -20                           -20                           -20                           -20                           -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -8                            -8                            -8                            -8                            -8                            -8                            -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %62 = mul nsw i32 %61, %2 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %62 = mul nsw i32 %61, %2 (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 4)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %33, i32* geteleme... (idx: 0)        95                            95                            
  store i32 %35, i32* geteleme... (idx: 1)        95                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %33, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %35, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %33, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 1)
  store i32 %35, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_main_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %73 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %73 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
  %76 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %76 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %73 = load i32* getelementpt... (idx: 0)        11                            11                            
  %76 = load i32* getelementpt... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %73 = load i32* getelementpt... (idx: 0)        1                             0                             
  %76 = load i32* getelementpt... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %73 = load i32* getelementpt... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  %76 = load i32* getelementpt... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %63 = add nsw i32 %60, %62 can share an output register with another operation already assigned to main_signed_add_32_0
  %63 = add nsw i32 %60, %62 can share an output register with another operation already assigned to main_signed_add_32_1
  %63 = add nsw i32 %60, %62 can share an output register with another operation already assigned to main_signed_add_32_2
  %63 = add nsw i32 %60, %62 can share an output register with another operation already assigned to main_signed_add_32_3
  %63 = add nsw i32 %60, %62 can share an output register with another operation already assigned to main_signed_add_32_4
  %63 = add nsw i32 %60, %62 can share an output register with another operation already assigned to main_signed_add_32_5
  %63 = add nsw i32 %60, %62 can share an output register with another operation already assigned to main_signed_add_32_6
  %63 = add nsw i32 %60, %62 can share an output register with another operation already assigned to main_signed_add_32_17
  %66 = add i32 %63, %64 can share an output register with another operation already assigned to main_signed_add_32_0
  %66 = add i32 %63, %64 can share an output register with another operation already assigned to main_signed_add_32_1
  %66 = add i32 %63, %64 can share an output register with another operation already assigned to main_signed_add_32_2
  %66 = add i32 %63, %64 can share an output register with another operation already assigned to main_signed_add_32_3
  %66 = add i32 %63, %64 can share an output register with another operation already assigned to main_signed_add_32_4
  %66 = add i32 %63, %64 can share an output register with another operation already assigned to main_signed_add_32_5
  %66 = add i32 %63, %64 can share an output register with another operation already assigned to main_signed_add_32_6
  %66 = add i32 %63, %64 can share an output register with another operation already assigned to main_signed_add_32_17
  %67 = add i32 %66, %65 can share an output register with another operation already assigned to main_signed_add_32_0
  %67 = add i32 %66, %65 can share an output register with another operation already assigned to main_signed_add_32_1
  %67 = add i32 %66, %65 can share an output register with another operation already assigned to main_signed_add_32_2
  %67 = add i32 %66, %65 can share an output register with another operation already assigned to main_signed_add_32_3
  %67 = add i32 %66, %65 can share an output register with another operation already assigned to main_signed_add_32_4
  %67 = add i32 %66, %65 can share an output register with another operation already assigned to main_signed_add_32_5
  %67 = add i32 %66, %65 can share an output register with another operation already assigned to main_signed_add_32_6
  %67 = add i32 %66, %65 can share an output register with another operation already assigned to main_signed_add_32_17
  %70 = add i32 %67, %68 can share an output register with another operation already assigned to main_signed_add_32_0
  %70 = add i32 %67, %68 can share an output register with another operation already assigned to main_signed_add_32_1
  %70 = add i32 %67, %68 can share an output register with another operation already assigned to main_signed_add_32_2
  %70 = add i32 %67, %68 can share an output register with another operation already assigned to main_signed_add_32_3
  %70 = add i32 %67, %68 can share an output register with another operation already assigned to main_signed_add_32_4
  %70 = add i32 %67, %68 can share an output register with another operation already assigned to main_signed_add_32_5
  %70 = add i32 %67, %68 can share an output register with another operation already assigned to main_signed_add_32_6
  %70 = add i32 %67, %68 can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %63 = add nsw i32 %60, %62 (idx: 0)             -20                           -20                           -20                           -20                           -19                           -19                           -20                           -29                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -20                           -9                            
  %66 = add i32 %63, %64 (idx: 1)                 -20                           -20                           -20                           -20                           -19                           -19                           -20                           -29                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -20                           -9                            
  %67 = add i32 %66, %65 (idx: 2)                 -20                           -20                           -20                           -20                           -20                           -20                           -20                           -30                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -20                           -10                           
  %70 = add i32 %67, %68 (idx: 3)                 -20                           -20                           -20                           -20                           -18                           -18                           -20                           -28                           -8                            -8                            -8                            -8                            -8                            -8                            -8                            -8                            -8                            -20                           -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %63 = add nsw i32 %60, %62 (idx
  %66 = add i32 %63, %64 (idx
  %67 = add i32 %66, %65 (idx
  %70 = add i32 %67, %68 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %66 = add i32 %63, %64 (idx: 1) -> main_signed_add_32_0 (mux inputs: 4)
  %63 = add nsw i32 %60, %62 (idx: 0) -> main_signed_add_32_1 (mux inputs: 4)
  %67 = add i32 %66, %65 (idx: 2) -> main_signed_add_32_7 (mux inputs: 4)
  %70 = add i32 %67, %68 (idx: 3) -> main_signed_add_32_17 (mux inputs: 4)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %31, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %31, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %30, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %30, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %31, i32* geteleme... (idx: 0)        95                            95                            
  store i32 %30, i32* geteleme... (idx: 1)        95                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %31, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %30, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %31, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 2)
  store i32 %30, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_main_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %77 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %77 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
  %80 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %80 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %77 = load i32* getelementpt... (idx: 0)        11                            11                            
  %80 = load i32* getelementpt... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %77 = load i32* getelementpt... (idx: 0)        1                             0                             
  %80 = load i32* getelementpt... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %77 = load i32* getelementpt... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  %80 = load i32* getelementpt... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %71 = add i32 %70, %69 can share an output register with another operation already assigned to main_signed_add_32_0
  %71 = add i32 %70, %69 can share an output register with another operation already assigned to main_signed_add_32_1
  %71 = add i32 %70, %69 can share an output register with another operation already assigned to main_signed_add_32_2
  %71 = add i32 %70, %69 can share an output register with another operation already assigned to main_signed_add_32_3
  %71 = add i32 %70, %69 can share an output register with another operation already assigned to main_signed_add_32_4
  %71 = add i32 %70, %69 can share an output register with another operation already assigned to main_signed_add_32_5
  %71 = add i32 %70, %69 can share an output register with another operation already assigned to main_signed_add_32_6
  %71 = add i32 %70, %69 can share an output register with another operation already assigned to main_signed_add_32_7
  %71 = add i32 %70, %69 can share an output register with another operation already assigned to main_signed_add_32_17
  %74 = add i32 %71, %72 can share an output register with another operation already assigned to main_signed_add_32_0
  %74 = add i32 %71, %72 can share an output register with another operation already assigned to main_signed_add_32_1
  %74 = add i32 %71, %72 can share an output register with another operation already assigned to main_signed_add_32_2
  %74 = add i32 %71, %72 can share an output register with another operation already assigned to main_signed_add_32_3
  %74 = add i32 %71, %72 can share an output register with another operation already assigned to main_signed_add_32_4
  %74 = add i32 %71, %72 can share an output register with another operation already assigned to main_signed_add_32_5
  %74 = add i32 %71, %72 can share an output register with another operation already assigned to main_signed_add_32_6
  %74 = add i32 %71, %72 can share an output register with another operation already assigned to main_signed_add_32_7
  %74 = add i32 %71, %72 can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %71 = add i32 %70, %69 (idx: 0)                 -40                           -40                           -20                           -20                           -18                           -18                           -20                           -38                           -8                            -8                            -8                            -8                            -8                            -8                            -8                            -8                            -8                            -40                           -8                            
  %74 = add i32 %71, %72 (idx: 1)                 -40                           -40                           -20                           -20                           -19                           -19                           -20                           -39                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -40                           -9                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %71 = add i32 %70, %69 (idx
  %74 = add i32 %71, %72 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %71 = add i32 %70, %69 (idx: 0) -> main_signed_add_32_0 (mux inputs: 6)
  %74 = add i32 %71, %72 (idx: 1) -> main_signed_add_32_1 (mux inputs: 6)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %29, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %29, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %28, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %28, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %29, i32* geteleme... (idx: 0)        85                            85                            
  store i32 %28, i32* geteleme... (idx: 1)        85                            85                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %29, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %28, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %29, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 3)
  store i32 %28, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 3)
State: LEGUP_F_main_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %81 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %81 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %81 = load i32* getelementpt... (idx: 0)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %81 = load i32* getelementpt... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %81 = load i32* getelementpt... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %75 = add i32 %74, %73 can share an output register with another operation already assigned to main_signed_add_32_0
  %75 = add i32 %74, %73 can share an output register with another operation already assigned to main_signed_add_32_1
  %75 = add i32 %74, %73 can share an output register with another operation already assigned to main_signed_add_32_2
  %75 = add i32 %74, %73 can share an output register with another operation already assigned to main_signed_add_32_3
  %75 = add i32 %74, %73 can share an output register with another operation already assigned to main_signed_add_32_4
  %75 = add i32 %74, %73 can share an output register with another operation already assigned to main_signed_add_32_5
  %75 = add i32 %74, %73 can share an output register with another operation already assigned to main_signed_add_32_6
  %75 = add i32 %74, %73 can share an output register with another operation already assigned to main_signed_add_32_7
  %75 = add i32 %74, %73 can share an output register with another operation already assigned to main_signed_add_32_17
  %78 = add i32 %75, %76 can share an output register with another operation already assigned to main_signed_add_32_0
  %78 = add i32 %75, %76 can share an output register with another operation already assigned to main_signed_add_32_1
  %78 = add i32 %75, %76 can share an output register with another operation already assigned to main_signed_add_32_2
  %78 = add i32 %75, %76 can share an output register with another operation already assigned to main_signed_add_32_3
  %78 = add i32 %75, %76 can share an output register with another operation already assigned to main_signed_add_32_4
  %78 = add i32 %75, %76 can share an output register with another operation already assigned to main_signed_add_32_5
  %78 = add i32 %75, %76 can share an output register with another operation already assigned to main_signed_add_32_6
  %78 = add i32 %75, %76 can share an output register with another operation already assigned to main_signed_add_32_7
  %78 = add i32 %75, %76 can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %75 = add i32 %74, %73 (idx: 0)                 -60                           -60                           -20                           -20                           -19                           -19                           -20                           -39                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -40                           -9                            
  %78 = add i32 %75, %76 (idx: 1)                 -60                           -60                           -20                           -20                           -19                           -19                           -20                           -39                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -40                           -9                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %75 = add i32 %74, %73 (idx
  %78 = add i32 %75, %76 (idx: 1)                 0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %75 = add i32 %74, %73 (idx: 0) -> main_signed_add_32_0 (mux inputs: 8)
  %78 = add i32 %75, %76 (idx: 1) -> main_signed_add_32_1 (mux inputs: 8)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %27, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %27, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %26, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %26, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %27, i32* geteleme... (idx: 0)        75                            75                            
  store i32 %26, i32* geteleme... (idx: 1)        75                            75                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %27, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %26, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %27, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 4)
  store i32 %26, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 4)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %79 = add i32 %78, %77 can share an output register with another operation already assigned to main_signed_add_32_0
  %79 = add i32 %78, %77 can share an output register with another operation already assigned to main_signed_add_32_1
  %79 = add i32 %78, %77 can share an output register with another operation already assigned to main_signed_add_32_2
  %79 = add i32 %78, %77 can share an output register with another operation already assigned to main_signed_add_32_3
  %79 = add i32 %78, %77 can share an output register with another operation already assigned to main_signed_add_32_4
  %79 = add i32 %78, %77 can share an output register with another operation already assigned to main_signed_add_32_5
  %79 = add i32 %78, %77 can share an output register with another operation already assigned to main_signed_add_32_6
  %79 = add i32 %78, %77 can share an output register with another operation already assigned to main_signed_add_32_7
  %79 = add i32 %78, %77 can share an output register with another operation already assigned to main_signed_add_32_17
  %82 = add i32 %79, %80 can share an output register with another operation already assigned to main_signed_add_32_0
  %82 = add i32 %79, %80 can share an output register with another operation already assigned to main_signed_add_32_1
  %82 = add i32 %79, %80 can share an output register with another operation already assigned to main_signed_add_32_2
  %82 = add i32 %79, %80 can share an output register with another operation already assigned to main_signed_add_32_3
  %82 = add i32 %79, %80 can share an output register with another operation already assigned to main_signed_add_32_4
  %82 = add i32 %79, %80 can share an output register with another operation already assigned to main_signed_add_32_5
  %82 = add i32 %79, %80 can share an output register with another operation already assigned to main_signed_add_32_6
  %82 = add i32 %79, %80 can share an output register with another operation already assigned to main_signed_add_32_7
  %82 = add i32 %79, %80 can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %79 = add i32 %78, %77 (idx: 0)                 -80                           -80                           -20                           -20                           -19                           -19                           -20                           -39                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -40                           -9                            
  %82 = add i32 %79, %80 (idx: 1)                 -80                           -80                           -20                           -20                           -19                           -19                           -20                           -39                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -40                           -9                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %79 = add i32 %78, %77 (idx
  %82 = add i32 %79, %80 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %79 = add i32 %78, %77 (idx: 0) -> main_signed_add_32_0 (mux inputs: 10)
  %82 = add i32 %79, %80 (idx: 1) -> main_signed_add_32_1 (mux inputs: 10)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %25, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %25, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %24, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %24, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %25, i32* geteleme... (idx: 0)        65                            65                            
  store i32 %24, i32* geteleme... (idx: 1)        65                            65                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %25, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %24, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %25, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 5)
  store i32 %24, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 5)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %83 = add i32 %82, %81 can share an output register with another operation already assigned to main_signed_add_32_0
  %83 = add i32 %82, %81 can share an output register with another operation already assigned to main_signed_add_32_1
  %83 = add i32 %82, %81 can share an output register with another operation already assigned to main_signed_add_32_2
  %83 = add i32 %82, %81 can share an output register with another operation already assigned to main_signed_add_32_3
  %83 = add i32 %82, %81 can share an output register with another operation already assigned to main_signed_add_32_4
  %83 = add i32 %82, %81 can share an output register with another operation already assigned to main_signed_add_32_5
  %83 = add i32 %82, %81 can share an output register with another operation already assigned to main_signed_add_32_6
  %83 = add i32 %82, %81 can share an output register with another operation already assigned to main_signed_add_32_7
  %83 = add i32 %82, %81 can share an output register with another operation already assigned to main_signed_add_32_17
  %88 = add nsw i32 %87, %84 can share an output register with another operation already assigned to main_signed_add_32_0
  %88 = add nsw i32 %87, %84 can share an output register with another operation already assigned to main_signed_add_32_1
  %88 = add nsw i32 %87, %84 can share an output register with another operation already assigned to main_signed_add_32_2
  %88 = add nsw i32 %87, %84 can share an output register with another operation already assigned to main_signed_add_32_3
  %88 = add nsw i32 %87, %84 can share an output register with another operation already assigned to main_signed_add_32_4
  %88 = add nsw i32 %87, %84 can share an output register with another operation already assigned to main_signed_add_32_5
  %88 = add nsw i32 %87, %84 can share an output register with another operation already assigned to main_signed_add_32_6
  %88 = add nsw i32 %87, %84 can share an output register with another operation already assigned to main_signed_add_32_7
  %88 = add nsw i32 %87, %84 can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %83 = add i32 %82, %81 (idx: 0)                 -100                          -100                          -20                           -20                           -19                           -19                           -20                           -39                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -40                           -9                            
  %88 = add nsw i32 %87, %84 (idx: 1)             -100                          -100                          -20                           -20                           -20                           -20                           -20                           -40                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -40                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %83 = add i32 %82, %81 (idx
  %88 = add nsw i32 %87, %84 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %83 = add i32 %82, %81 (idx: 0) -> main_signed_add_32_0 (mux inputs: 12)
  %88 = add nsw i32 %87, %84 (idx: 1) -> main_signed_add_32_1 (mux inputs: 12)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %89 = mul nsw i32 %87, %84 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %89 = mul nsw i32 %87, %84 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %89 = mul nsw i32 %87, %84 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %89 = mul nsw i32 %87, %84 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %89 = mul nsw i32 %87, %84 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %89 = mul nsw i32 %87, %84 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %89 = mul nsw i32 %87, %84 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %89 = mul nsw i32 %87, %84 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %89 = mul nsw i32 %87, %84 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %89 = mul nsw i32 %87, %84 can share an output register with another operation already assigned to main_signed_multiply_32_9
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %89 = mul nsw i32 %87, %84 (idx: 0)             -10                           -10                           -10                           -10                           -40                           -20                           -20                           -20                           -20                           -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %89 = mul nsw i32 %87, %84 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %89 = mul nsw i32 %87, %84 (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 6)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %23, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %23, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %22, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %22, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %23, i32* geteleme... (idx: 0)        55                            55                            
  store i32 %22, i32* geteleme... (idx: 1)        55                            55                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %23, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %22, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %23, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 6)
  store i32 %22, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 6)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %90 = add nsw i32 %88, %89 can share an output register with another operation already assigned to main_signed_add_32_0
  %90 = add nsw i32 %88, %89 can share an output register with another operation already assigned to main_signed_add_32_1
  %90 = add nsw i32 %88, %89 can share an output register with another operation already assigned to main_signed_add_32_2
  %90 = add nsw i32 %88, %89 can share an output register with another operation already assigned to main_signed_add_32_3
  %90 = add nsw i32 %88, %89 can share an output register with another operation already assigned to main_signed_add_32_4
  %90 = add nsw i32 %88, %89 can share an output register with another operation already assigned to main_signed_add_32_5
  %90 = add nsw i32 %88, %89 can share an output register with another operation already assigned to main_signed_add_32_6
  %90 = add nsw i32 %88, %89 can share an output register with another operation already assigned to main_signed_add_32_7
  %90 = add nsw i32 %88, %89 can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %90 = add nsw i32 %88, %89 (idx: 0)             -120                          -120                          -20                           -20                           -20                           -20                           -20                           -40                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -40                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %90 = add nsw i32 %88, %89 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %90 = add nsw i32 %88, %89 (idx: 0) -> main_signed_add_32_0 (mux inputs: 14)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %92 = mul nsw i32 %90, %49 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %92 = mul nsw i32 %90, %49 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %92 = mul nsw i32 %90, %49 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %92 = mul nsw i32 %90, %49 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %92 = mul nsw i32 %90, %49 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %92 = mul nsw i32 %90, %49 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %92 = mul nsw i32 %90, %49 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %92 = mul nsw i32 %90, %49 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %92 = mul nsw i32 %90, %49 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %92 = mul nsw i32 %90, %49 can share an output register with another operation already assigned to main_signed_multiply_32_9
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %92 = mul nsw i32 %90, %49 (idx: 0)             -10                           -10                           -10                           -10                           -60                           -20                           -20                           -20                           -20                           -20                           -10                           -9                            -10                           -9                            -10                           -10                           -9                            -10                           -9                            -10                           -9                            -10                           -10                           -10                           -9                            -9                            -10                           -9                            -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %92 = mul nsw i32 %90, %49 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %92 = mul nsw i32 %90, %49 (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 8)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %91 = sub nsw i32 %49, %90 can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %91 = sub nsw i32 %49, %90 (idx: 0)             -20                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %91 = sub nsw i32 %49, %90 (idx: 0)             1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %91 = sub nsw i32 %49, %90 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 4)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %21, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %21, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %20, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %20, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %21, i32* geteleme... (idx: 0)        45                            45                            
  store i32 %20, i32* geteleme... (idx: 1)        45                            45                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %21, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %20, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %21, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 7)
  store i32 %20, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 7)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %93 = sub i32 %91, %92 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %95 = sub nsw i32 0, %93 can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %93 = sub i32 %91, %92 (idx: 0)                 -39                           -9                            
  %95 = sub nsw i32 0, %93 (idx: 1)               -35                           -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %93 = sub i32 %91, %92 (idx: 0)                 1                             0                             
  %95 = sub nsw i32 0, %93 (idx: 1)               0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %93 = sub i32 %91, %92 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 6)
  %95 = sub nsw i32 0, %93 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 1)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %19, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %19, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %18, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %18, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %19, i32* geteleme... (idx: 0)        35                            35                            
  store i32 %18, i32* geteleme... (idx: 1)        35                            35                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %19, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %18, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %19, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 8)
  store i32 %18, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 8)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %17, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %17, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %16, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %16, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %17, i32* geteleme... (idx: 0)        25                            25                            
  store i32 %16, i32* geteleme... (idx: 1)        25                            25                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %17, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %16, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %17, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 9)
  store i32 %16, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 9)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %15, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %15, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %36, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %36, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %15, i32* geteleme... (idx: 0)        15                            15                            
  store i32 %36, i32* geteleme... (idx: 1)        15                            15                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %15, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %36, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %15, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 10)
  store i32 %36, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 10)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %14, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %14, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %13, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %13, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %14, i32* geteleme... (idx: 0)        5                             5                             
  store i32 %13, i32* geteleme... (idx: 1)        5                             5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %14, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %13, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %14, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 11)
  store i32 %13, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 11)
State: LEGUP_F_main_BB__1
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %38, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %38, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  store i32 %41, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  store i32 %41, i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %38, i32* geteleme... (idx: 0)        -5                            -5                            
  store i32 %41, i32* geteleme... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  store i32 %38, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %41, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %38, i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  store i32 %41, i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB__98
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %104 = add nsw i32 %mil.01.i... (idx: 0)        -145                          -125                          -24                           -24                           -24                           -25                           -24                           -44                           -3                            -3                            -3                            -3                            -3                            -3                            -3                            -3                            -3                            -44                           -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %104 = add nsw i32 %mil.01.i... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %104 = add nsw i32 %mil.01.i... (idx: 0) -> main_signed_add_32_0 (mux inputs: 15)
State: LEGUP_F_main_BB__98
Binding functional unit type: decis_levl_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_decis_levl_local_mem_dual_port_0
  %100 = load i32* %99, align ... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_decis_levl_local_mem_dual_port_0
  %100 = load i32* %99, align ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %100 = load i32* %99, align ... (idx: 0) -> main_decis_levl_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB__98
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep6 = add i32 %gep_int4, %... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep6 = add i32 %gep_int4, %... (idx: 0)        -150                          -120                          -20                           -20                           -20                           -20                           -20                           -40                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -40                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep6 = add i32 %gep_int4, %... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep6 = add i32 %gep_int4, %... (idx: 0) -> main_signed_add_32_0 (mux inputs: 17)
State: LEGUP_F_main_BB__98
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %101 = mul nsw i32 %100, %de... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %101 = mul nsw i32 %100, %de... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %101 = mul nsw i32 %100, %de... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %101 = mul nsw i32 %100, %de... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %101 = mul nsw i32 %100, %de... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %101 = mul nsw i32 %100, %de... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %101 = mul nsw i32 %100, %de... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %101 = mul nsw i32 %100, %de... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %101 = mul nsw i32 %100, %de... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %101 = mul nsw i32 %100, %de... can share an output register with another operation already assigned to main_signed_multiply_32_9
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %101 = mul nsw i32 %100, %de... (idx: 0)        -10                           -9                            -10                           -9                            -79                           -19                           -19                           -19                           -19                           -19                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -8                            -8                            -8                            -8                            -8                            -8                            -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %101 = mul nsw i32 %100, %de... (idx: 0)        0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %101 = mul nsw i32 %100, %de... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 10)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %259 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_0
  %259 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_1
  %259 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_2
  %259 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_3
  %259 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_4
  %259 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_5
  %259 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_6
  %259 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_7
  %259 = add nsw i32 %i.02.i, ... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %259 = add nsw i32 %i.02.i, ... (idx: 0)        -164                          -115                          -14                           -15                           -14                           -14                           -14                           -34                           -3                            -3                            -3                            -3                            -3                            -3                            -3                            -3                            -3                            -34                           -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %259 = add nsw i32 %i.02.i, ... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %259 = add nsw i32 %i.02.i, ... (idx: 0) -> main_signed_add_32_0 (mux inputs: 18)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_divide_32
Weight matrix for operation/function unit matching:
                                                  main_signed_divide_32_0       
  %257 = sdiv i32 %i.02.i, 2 (idx: 0)             95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_divide_32_0       
  %257 = sdiv i32 %i.02.i, 2 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %257 = sdiv i32 %i.02.i, 2 (idx: 0) -> main_signed_divide_32_0 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %110 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %110 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %110 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %110 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %110 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %110 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %110 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %110 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %110 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %110 = mul nsw i32 %nbl.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %135 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %135 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %135 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %135 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %135 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %135 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %135 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %135 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %135 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %135 = mul nsw i32 %al2.0, 1... hey can share an input with another operation already assigned to main_signed_multiply_32_9
  %135 = mul nsw i32 %al2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %140 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %140 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %140 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %140 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %140 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %140 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %140 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %140 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %140 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %140 = mul nsw i32 %al1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %195 = mul nsw i32 %194, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %195 = mul nsw i32 %194, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %195 = mul nsw i32 %194, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %195 = mul nsw i32 %194, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %195 = mul nsw i32 %194, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %195 = mul nsw i32 %194, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %195 = mul nsw i32 %194, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %195 = mul nsw i32 %194, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %195 = mul nsw i32 %194, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %195 = mul nsw i32 %194, %ah... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %202 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %202 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %202 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %202 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %202 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %202 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %202 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %202 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %202 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %202 = mul nsw i32 %deth.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %215 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %215 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %215 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %215 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %215 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %215 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %215 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %215 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %215 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %215 = mul nsw i32 %nbh.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %240 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %240 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %240 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %240 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %240 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %240 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %240 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %240 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %240 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %240 = mul nsw i32 %ah2.0, 1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %245 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %245 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %245 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %245 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %245 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %245 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %245 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %245 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %245 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %245 = mul nsw i32 %ah1.0, 2... can share an output register with another operation already assigned to main_signed_multiply_32_9
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %110 = mul nsw i32 %nbl.0, 1... (idx: 0)        -5                            -5                            -4                            -5                            -95                           -14                           -15                           -15                           -15                           -15                           -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            
  %135 = mul nsw i32 %al2.0, 1... (idx: 1)        -5                            -5                            -4                            -5                            -95                           -14                           -15                           -15                           -15                           -10                           -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            
  %140 = mul nsw i32 %al1.0, 2... (idx: 2)        -4                            -4                            -5                            -4                            -94                           -15                           -14                           -14                           -15                           -14                           -5                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            
  %195 = mul nsw i32 %194, %ah... (idx: 3)        -10                           -10                           -10                           -10                           -100                          -20                           -20                           -20                           -20                           -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %202 = mul nsw i32 %deth.0, ... (idx: 4)        -4                            -3                            -3                            -3                            -93                           -15                           -13                           -13                           -13                           -13                           -3                            -3                            -3                            -3                            -3                            -3                            -3                            -3                            -3                            -3                            -3                            -3                            -3                            -3                            -3                            -3                            -3                            -3                            -3                            
  %215 = mul nsw i32 %nbh.0, 1... (idx: 5)        -5                            -5                            -4                            -5                            -95                           -14                           -15                           -15                           -15                           -15                           -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            
  %240 = mul nsw i32 %ah2.0, 1... (idx: 6)        -5                            -5                            -4                            -5                            -95                           -14                           -15                           -15                           -15                           -15                           -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            
  %245 = mul nsw i32 %ah1.0, 2... (idx: 7)        -4                            -4                            -5                            -4                            -94                           -15                           -14                           -14                           -15                           -14                           -5                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %110 = mul nsw i32 %nbl.0, 1... (idx
  %135 = mul nsw i32 %al2.0, 1... (idx
  %140 = mul nsw i32 %al1.0, 2... (idx
  %195 = mul nsw i32 %194, %ah... (idx
  %202 = mul nsw i32 %deth.0, ... (idx
  %215 = mul nsw i32 %nbh.0, 1... (idx
  %240 = mul nsw i32 %ah2.0, 1... (idx
  %245 = mul nsw i32 %ah1.0, 2... (idx: 7)        0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %240 = mul nsw i32 %ah2.0, 1... (idx: 6) -> main_signed_multiply_32_0 (mux inputs: 2)
  %245 = mul nsw i32 %ah1.0, 2... (idx: 7) -> main_signed_multiply_32_2 (mux inputs: 2)
  %110 = mul nsw i32 %nbl.0, 1... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 11)
  %202 = mul nsw i32 %deth.0, ... (idx: 4) -> main_signed_multiply_32_5 (mux inputs: 3)
  %135 = mul nsw i32 %al2.0, 1... (idx: 1) -> main_signed_multiply_32_6 (mux inputs: 3)
  %195 = mul nsw i32 %194, %ah... (idx: 3) -> main_signed_multiply_32_7 (mux inputs: 4)
  %140 = mul nsw i32 %al1.0, 2... (idx: 2) -> main_signed_multiply_32_8 (mux inputs: 3)
  %215 = mul nsw i32 %nbh.0, 1... (idx: 5) -> main_signed_multiply_32_9 (mux inputs: 3)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %129 = sub nsw i32 0, %126 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %129 = sub nsw i32 0, %126 can share an output register with another operation already assigned to main_signed_subtract_32_1
  %234 = sub nsw i32 0, %231 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %234 = sub nsw i32 0, %231 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %129 = sub nsw i32 0, %126 (idx: 0)             -55                           -5                            
  %234 = sub nsw i32 0, %231 (idx: 1)             -55                           -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %129 = sub nsw i32 0, %126 (idx: 0)             1                             0                             
  %234 = sub nsw i32 0, %231 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %129 = sub nsw i32 0, %126 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 7)
  %234 = sub nsw i32 0, %231 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 2)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %ril.0.i.i = load i32* %ril.... can share an output register with another operation already assigned to main_mem_dual_port_0
  %ril.0.i.i = load i32* %ril.... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %ril.0.i.i = load i32* %ril.... (idx: 0)        5                             5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %ril.0.i.i = load i32* %ril.... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %ril.0.i.i = load i32* %ril.... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep9 = add i32 %gep_int7, %... can share an output register with another operation already assigned to main_signed_add_32_17
  %144 = add nsw i32 %141, 192 can share an output register with another operation already assigned to main_signed_add_32_0
  %144 = add nsw i32 %141, 192 can share an output register with another operation already assigned to main_signed_add_32_1
  %144 = add nsw i32 %141, 192 can share an output register with another operation already assigned to main_signed_add_32_2
  %144 = add nsw i32 %141, 192 can share an output register with another operation already assigned to main_signed_add_32_3
  %144 = add nsw i32 %141, 192 can share an output register with another operation already assigned to main_signed_add_32_4
  %144 = add nsw i32 %141, 192 can share an output register with another operation already assigned to main_signed_add_32_5
  %144 = add nsw i32 %141, 192 can share an output register with another operation already assigned to main_signed_add_32_6
  %144 = add nsw i32 %141, 192 can share an output register with another operation already assigned to main_signed_add_32_7
  %144 = add nsw i32 %141, 192 can share an output register with another operation already assigned to main_signed_add_32_17
  %249 = add nsw i32 %246, 192 can share an output register with another operation already assigned to main_signed_add_32_0
  %249 = add nsw i32 %246, 192 can share an output register with another operation already assigned to main_signed_add_32_1
  %249 = add nsw i32 %246, 192 can share an output register with another operation already assigned to main_signed_add_32_2
  %249 = add nsw i32 %246, 192 can share an output register with another operation already assigned to main_signed_add_32_3
  %249 = add nsw i32 %246, 192 can share an output register with another operation already assigned to main_signed_add_32_4
  %249 = add nsw i32 %246, 192 can share an output register with another operation already assigned to main_signed_add_32_5
  %249 = add nsw i32 %246, 192 can share an output register with another operation already assigned to main_signed_add_32_6
  %249 = add nsw i32 %246, 192 can share an output register with another operation already assigned to main_signed_add_32_7
  %249 = add nsw i32 %246, 192 can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep9 = add i32 %gep_int7, %... (idx: 0)        -180                          -120                          -20                           -20                           -20                           -20                           -20                           -40                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -40                           -10                           
  %144 = add nsw i32 %141, 192 (idx: 1)           -175                          -114                          -14                           -15                           -14                           -14                           -14                           -34                           -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -34                           -4                            
  %249 = add nsw i32 %246, 192 (idx: 2)           -175                          -114                          -14                           -15                           -14                           -14                           -14                           -34                           -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -34                           -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep9 = add i32 %gep_int7, %... (idx
  %144 = add nsw i32 %141, 192 (idx
  %249 = add nsw i32 %246, 192 (idx: 2)           0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %144 = add nsw i32 %141, 192 (idx: 1) -> main_signed_add_32_0 (mux inputs: 19)
  %gep9 = add i32 %gep_int7, %... (idx: 0) -> main_signed_add_32_1 (mux inputs: 14)
  %249 = add nsw i32 %246, 192 (idx: 2) -> main_signed_add_32_17 (mux inputs: 5)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: qq4_code4_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_qq4_code4_table_local_mem_dual_port_0
  %107 = load i32* %106, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_qq4_code4_table_local_mem_dual_port_0
  %107 = load i32* %106, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %107 = load i32* %106, align... (idx: 0) -> main_qq4_code4_table_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep12 = add i32 %gep_int10,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep15 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep12 = add i32 %gep_int10,... (idx: 0)        -190                          -140                          -20                           -20                           -20                           -20                           -20                           -40                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -50                           -10                           
  %gep15 = add i32 %gep_int13,... (idx: 1)        -190                          -140                          -20                           -20                           -20                           -20                           -20                           -40                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -50                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep12 = add i32 %gep_int10,... (idx
  %gep15 = add i32 %gep_int13,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep12 = add i32 %gep_int10,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 21)
  %gep15 = add i32 %gep_int13,... (idx: 1) -> main_signed_add_32_1 (mux inputs: 16)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: wl_code_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_wl_code_table_local_mem_dual_port_0
  %113 = load i32* %112, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_wl_code_table_local_mem_dual_port_0
  %113 = load i32* %112, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %113 = load i32* %112, align... (idx: 0) -> main_wl_code_table_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %114 = add nsw i32 %111, %11... can share an output register with another operation already assigned to main_signed_add_32_0
  %114 = add nsw i32 %111, %11... can share an output register with another operation already assigned to main_signed_add_32_1
  %114 = add nsw i32 %111, %11... can share an output register with another operation already assigned to main_signed_add_32_2
  %114 = add nsw i32 %111, %11... can share an output register with another operation already assigned to main_signed_add_32_3
  %114 = add nsw i32 %111, %11... can share an output register with another operation already assigned to main_signed_add_32_4
  %114 = add nsw i32 %111, %11... can share an output register with another operation already assigned to main_signed_add_32_5
  %114 = add nsw i32 %111, %11... can share an output register with another operation already assigned to main_signed_add_32_6
  %114 = add nsw i32 %111, %11... can share an output register with another operation already assigned to main_signed_add_32_7
  %114 = add nsw i32 %111, %11... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %114 = add nsw i32 %111, %11... (idx: 0)        -210                          -160                          -20                           -20                           -19                           -19                           -20                           -39                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -50                           -9                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %114 = add nsw i32 %111, %11... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %114 = add nsw i32 %111, %11... (idx: 0) -> main_signed_add_32_0 (mux inputs: 23)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %108 = mul nsw i32 %107, %de... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %108 = mul nsw i32 %107, %de... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %108 = mul nsw i32 %107, %de... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %108 = mul nsw i32 %107, %de... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %108 = mul nsw i32 %107, %de... hey can share an input with another operation already assigned to main_signed_multiply_32_4
  %108 = mul nsw i32 %107, %de... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %108 = mul nsw i32 %107, %de... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %108 = mul nsw i32 %107, %de... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %108 = mul nsw i32 %107, %de... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %108 = mul nsw i32 %107, %de... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %108 = mul nsw i32 %107, %de... can share an output register with another operation already assigned to main_signed_multiply_32_9
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %108 = mul nsw i32 %107, %de... (idx: 0)        -20                           -9                            -20                           -9                            -104                          -29                           -29                           -39                           -29                           -29                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -8                            -8                            -8                            -8                            -8                            -8                            -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %108 = mul nsw i32 %107, %de... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %108 = mul nsw i32 %107, %de... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 12)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %122 = sub i32 9, %119 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %122 = sub i32 9, %119 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %122 = sub i32 9, %119 (idx: 0)                 -65                           -14                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %122 = sub i32 9, %119 (idx: 0)                 1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %122 = sub i32 9, %119 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 8)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %125 = add nsw i32 %84, %109 can share an output register with another operation already assigned to main_signed_add_32_0
  %125 = add nsw i32 %84, %109 hey can share an input with another operation already assigned to main_signed_add_32_1
  %149 = add nsw i32 %109, %90 can share an output register with another operation already assigned to main_signed_add_32_0
  %149 = add nsw i32 %109, %90 can share an output register with another operation already assigned to main_signed_add_32_1
  %149 = add nsw i32 %109, %90 can share an output register with another operation already assigned to main_signed_add_32_2
  %149 = add nsw i32 %109, %90 can share an output register with another operation already assigned to main_signed_add_32_3
  %149 = add nsw i32 %109, %90 can share an output register with another operation already assigned to main_signed_add_32_4
  %149 = add nsw i32 %109, %90 can share an output register with another operation already assigned to main_signed_add_32_5
  %149 = add nsw i32 %109, %90 can share an output register with another operation already assigned to main_signed_add_32_6
  %149 = add nsw i32 %109, %90 can share an output register with another operation already assigned to main_signed_add_32_7
  %149 = add nsw i32 %109, %90 can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %125 = add nsw i32 %84, %109 (idx: 0)           -230                          -165                          -30                           -30                           -30                           -30                           -30                           -50                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -60                           -10                           
  %149 = add nsw i32 %109, %90 (idx: 1)           -230                          -160                          -20                           -20                           -20                           -20                           -20                           -40                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -50                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %125 = add nsw i32 %84, %109 (idx
  %149 = add nsw i32 %109, %90 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %149 = add nsw i32 %109, %90 (idx: 1) -> main_signed_add_32_0 (mux inputs: 25)
  %125 = add nsw i32 %84, %109 (idx: 0) -> main_signed_add_32_1 (mux inputs: 17)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %127 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %127 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %127 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %127 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %127 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %127 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %127 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %127 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %127 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %127 = mul nsw i32 %plt1.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %131 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %131 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %131 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %131 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %131 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %131 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %131 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %131 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %131 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %131 = mul nsw i32 %plt2.0, ... can share an output register with another operation already assigned to main_signed_multiply_32_9
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %127 = mul nsw i32 %plt1.0, ... (idx: 0)        -20                           -10                           -20                           -10                           -120                          -30                           -30                           -40                           -30                           -30                           -10                           -9                            -10                           -9                            -10                           -10                           -9                            -10                           -9                            -10                           -9                            -10                           -10                           -10                           -9                            -9                            -10                           -9                            -10                           
  %131 = mul nsw i32 %plt2.0, ... (idx: 1)        -20                           -10                           -20                           -10                           -120                          -30                           -30                           -40                           -30                           -30                           -10                           -9                            -10                           -9                            -10                           -10                           -9                            -10                           -9                            -10                           -9                            -10                           -10                           -10                           -9                            -9                            -10                           -9                            -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %127 = mul nsw i32 %plt1.0, ... (idx
  %131 = mul nsw i32 %plt2.0, ... (idx: 1)        0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %127 = mul nsw i32 %plt1.0, ... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 14)
  %131 = mul nsw i32 %plt2.0, ... (idx: 1) -> main_signed_multiply_32_7 (mux inputs: 6)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: ilb_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_ilb_table_local_mem_dual_port_0
  %121 = load i32* %120, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_ilb_table_local_mem_dual_port_0
  %121 = load i32* %120, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %121 = load i32* %120, align... (idx: 0) -> main_ilb_table_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep18 = add i32 %gep_int16,... can share an output register with another operation already assigned to main_signed_add_32_17
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_0
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_1
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_2
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_3
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_4
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_5
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_6
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_7
  %wd4.0.i8.i = add nsw i32 %1... can share an output register with another operation already assigned to main_signed_add_32_17
  %137 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_0
  %137 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_1
  %137 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_2
  %137 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_3
  %137 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_4
  %137 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_5
  %137 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_6
  %137 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_7
  %137 = add nsw i32 %wd4.0.i8... can share an output register with another operation already assigned to main_signed_add_32_17
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_0
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_1
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_2
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_3
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_4
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_5
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_6
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_7
  %apl1.0.i4.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep18 = add i32 %gep_int16,... (idx: 0)        -250                          -170                          -20                           -20                           -20                           -20                           -20                           -40                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -50                           -10                           
  %wd4.0.i8.i = add nsw i32 %1... (idx: 1)        -150                          -70                           80                            80                            80                            80                            80                            60                            90                            90                            90                            90                            90                            90                            90                            90                            90                            50                            90                            
  %137 = add nsw i32 %wd4.0.i8... (idx: 2)        -150                          -70                           80                            80                            80                            80                            80                            60                            90                            90                            90                            90                            90                            90                            90                            90                            90                            50                            90                            
  %apl1.0.i4.i = add nsw i32 %... (idx: 3)        -250                          -170                          -20                           -20                           -20                           -20                           -20                           -40                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -50                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep18 = add i32 %gep_int16,... (idx
  %wd4.0.i8.i = add nsw i32 %1... (idx
  %137 = add nsw i32 %wd4.0.i8... (idx
  %apl1.0.i4.i = add nsw i32 %... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep18 = add i32 %gep_int16,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 27)
  %wd4.0.i8.i = add nsw i32 %1... (idx: 1) -> main_signed_add_32_1 (mux inputs: 19)
  %apl1.0.i4.i = add nsw i32 %... (idx: 3) -> main_signed_add_32_7 (mux inputs: 6)
  %137 = add nsw i32 %wd4.0.i8... (idx: 2) -> main_signed_add_32_17 (mux inputs: 7)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %145 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_0
  %145 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_1
  %147 = sub nsw i32 0, %145 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %147 = sub nsw i32 0, %145 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %145 = sub nsw i32 15360, %.... (idx: 0)        -75                           -14                           
  %147 = sub nsw i32 0, %145 (idx: 1)             -75                           -15                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %145 = sub nsw i32 15360, %.... (idx: 0)        1                             0                             
  %147 = sub nsw i32 0, %145 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %145 = sub nsw i32 15360, %.... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 9)
  %147 = sub nsw i32 0, %145 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 3)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %150 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %150 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %151 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %151 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %150 = load i32* getelementp... (idx: 0)        1                             11                            
  %151 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %150 = load i32* getelementp... (idx: 0)        1                             0                             
  %151 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %150 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %151 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %153 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %153 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %154 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %154 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %153 = load i32* getelementp... (idx: 0)        1                             11                            
  %154 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %153 = load i32* getelementp... (idx: 0)        1                             0                             
  %154 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %153 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %154 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %157 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %157 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %158 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %158 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %157 = load i32* getelementp... (idx: 0)        1                             11                            
  %158 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %157 = load i32* getelementp... (idx: 0)        1                             0                             
  %158 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %157 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %158 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %152 = mul nsw i32 %151, %15... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %152 = mul nsw i32 %151, %15... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %152 = mul nsw i32 %151, %15... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %152 = mul nsw i32 %151, %15... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %152 = mul nsw i32 %151, %15... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %152 = mul nsw i32 %151, %15... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %152 = mul nsw i32 %151, %15... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %152 = mul nsw i32 %151, %15... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %152 = mul nsw i32 %151, %15... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %152 = mul nsw i32 %151, %15... can share an output register with another operation already assigned to main_signed_multiply_32_9
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %152 = mul nsw i32 %151, %15... (idx: 0)        -20                           -10                           -20                           -10                           -140                          -30                           -30                           -60                           -30                           -30                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -8                            -8                            -8                            -8                            -8                            -8                            -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %152 = mul nsw i32 %151, %15... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %152 = mul nsw i32 %151, %15... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 16)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %161 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %161 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %162 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %162 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %161 = load i32* getelementp... (idx: 0)        1                             11                            
  %162 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %161 = load i32* getelementp... (idx: 0)        1                             0                             
  %162 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %161 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %162 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %155 = mul nsw i32 %154, %15... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %155 = mul nsw i32 %154, %15... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %155 = mul nsw i32 %154, %15... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %155 = mul nsw i32 %154, %15... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %155 = mul nsw i32 %154, %15... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %155 = mul nsw i32 %154, %15... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %155 = mul nsw i32 %154, %15... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %155 = mul nsw i32 %154, %15... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %155 = mul nsw i32 %154, %15... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %155 = mul nsw i32 %154, %15... can share an output register with another operation already assigned to main_signed_multiply_32_9
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %155 = mul nsw i32 %154, %15... (idx: 0)        -20                           -10                           -20                           -10                           -160                          -30                           -30                           -60                           -30                           -30                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -8                            -8                            -8                            -8                            -8                            -8                            -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %155 = mul nsw i32 %154, %15... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %155 = mul nsw i32 %154, %15... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 18)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %165 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %165 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %166 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %166 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %165 = load i32* getelementp... (idx: 0)        1                             11                            
  %166 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %165 = load i32* getelementp... (idx: 0)        1                             0                             
  %166 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %165 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %166 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %156 = add nsw i32 %155, %15... can share an output register with another operation already assigned to main_signed_add_32_0
  %156 = add nsw i32 %155, %15... can share an output register with another operation already assigned to main_signed_add_32_1
  %156 = add nsw i32 %155, %15... can share an output register with another operation already assigned to main_signed_add_32_2
  %156 = add nsw i32 %155, %15... can share an output register with another operation already assigned to main_signed_add_32_3
  %156 = add nsw i32 %155, %15... can share an output register with another operation already assigned to main_signed_add_32_4
  %156 = add nsw i32 %155, %15... can share an output register with another operation already assigned to main_signed_add_32_5
  %156 = add nsw i32 %155, %15... can share an output register with another operation already assigned to main_signed_add_32_6
  %156 = add nsw i32 %155, %15... can share an output register with another operation already assigned to main_signed_add_32_7
  %156 = add nsw i32 %155, %15... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %156 = add nsw i32 %155, %15... (idx: 0)        -270                          -190                          -20                           -20                           -20                           -20                           -20                           -60                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -70                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %156 = add nsw i32 %155, %15... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %156 = add nsw i32 %155, %15... (idx: 0) -> main_signed_add_32_0 (mux inputs: 29)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %159 = mul nsw i32 %158, %15... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %159 = mul nsw i32 %158, %15... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %159 = mul nsw i32 %158, %15... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %159 = mul nsw i32 %158, %15... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %159 = mul nsw i32 %158, %15... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %159 = mul nsw i32 %158, %15... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %159 = mul nsw i32 %158, %15... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %159 = mul nsw i32 %158, %15... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %159 = mul nsw i32 %158, %15... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %159 = mul nsw i32 %158, %15... can share an output register with another operation already assigned to main_signed_multiply_32_9
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %159 = mul nsw i32 %158, %15... (idx: 0)        -20                           -10                           -20                           -10                           -180                          -30                           -30                           -60                           -30                           -30                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -8                            -8                            -8                            -8                            -8                            -8                            -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %159 = mul nsw i32 %158, %15... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %159 = mul nsw i32 %158, %15... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 20)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %169 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %169 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %170 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %170 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %169 = load i32* getelementp... (idx: 0)        1                             11                            
  %170 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %169 = load i32* getelementp... (idx: 0)        1                             0                             
  %170 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %169 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %170 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %160 = add nsw i32 %156, %15... can share an output register with another operation already assigned to main_signed_add_32_0
  %160 = add nsw i32 %156, %15... can share an output register with another operation already assigned to main_signed_add_32_1
  %160 = add nsw i32 %156, %15... can share an output register with another operation already assigned to main_signed_add_32_2
  %160 = add nsw i32 %156, %15... can share an output register with another operation already assigned to main_signed_add_32_3
  %160 = add nsw i32 %156, %15... can share an output register with another operation already assigned to main_signed_add_32_4
  %160 = add nsw i32 %156, %15... can share an output register with another operation already assigned to main_signed_add_32_5
  %160 = add nsw i32 %156, %15... can share an output register with another operation already assigned to main_signed_add_32_6
  %160 = add nsw i32 %156, %15... can share an output register with another operation already assigned to main_signed_add_32_7
  %160 = add nsw i32 %156, %15... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %160 = add nsw i32 %156, %15... (idx: 0)        -290                          -190                          -20                           -20                           -20                           -20                           -20                           -60                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -70                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %160 = add nsw i32 %156, %15... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %160 = add nsw i32 %156, %15... (idx: 0) -> main_signed_add_32_0 (mux inputs: 31)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %163 = mul nsw i32 %162, %16... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %163 = mul nsw i32 %162, %16... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %163 = mul nsw i32 %162, %16... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %163 = mul nsw i32 %162, %16... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %163 = mul nsw i32 %162, %16... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %163 = mul nsw i32 %162, %16... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %163 = mul nsw i32 %162, %16... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %163 = mul nsw i32 %162, %16... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %163 = mul nsw i32 %162, %16... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %163 = mul nsw i32 %162, %16... can share an output register with another operation already assigned to main_signed_multiply_32_9
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %163 = mul nsw i32 %162, %16... (idx: 0)        -20                           -10                           -20                           -10                           -200                          -30                           -30                           -60                           -30                           -30                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -8                            -8                            -8                            -8                            -8                            -8                            -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %163 = mul nsw i32 %162, %16... (idx: 0)        0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %163 = mul nsw i32 %162, %16... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 22)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %173 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %173 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %174 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %174 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %173 = load i32* getelementp... (idx: 0)        1                             11                            
  %174 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %173 = load i32* getelementp... (idx: 0)        1                             0                             
  %174 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %173 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %174 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %164 = add nsw i32 %160, %16... can share an output register with another operation already assigned to main_signed_add_32_0
  %164 = add nsw i32 %160, %16... can share an output register with another operation already assigned to main_signed_add_32_1
  %164 = add nsw i32 %160, %16... can share an output register with another operation already assigned to main_signed_add_32_2
  %164 = add nsw i32 %160, %16... can share an output register with another operation already assigned to main_signed_add_32_3
  %164 = add nsw i32 %160, %16... can share an output register with another operation already assigned to main_signed_add_32_4
  %164 = add nsw i32 %160, %16... can share an output register with another operation already assigned to main_signed_add_32_5
  %164 = add nsw i32 %160, %16... can share an output register with another operation already assigned to main_signed_add_32_6
  %164 = add nsw i32 %160, %16... can share an output register with another operation already assigned to main_signed_add_32_7
  %164 = add nsw i32 %160, %16... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %164 = add nsw i32 %160, %16... (idx: 0)        -310                          -190                          -20                           -20                           -20                           -20                           -20                           -60                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -70                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %164 = add nsw i32 %160, %16... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %164 = add nsw i32 %160, %16... (idx: 0) -> main_signed_add_32_0 (mux inputs: 33)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %167 = mul nsw i32 %166, %16... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %167 = mul nsw i32 %166, %16... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %167 = mul nsw i32 %166, %16... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %167 = mul nsw i32 %166, %16... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %167 = mul nsw i32 %166, %16... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %167 = mul nsw i32 %166, %16... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %167 = mul nsw i32 %166, %16... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %167 = mul nsw i32 %166, %16... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %167 = mul nsw i32 %166, %16... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %167 = mul nsw i32 %166, %16... can share an output register with another operation already assigned to main_signed_multiply_32_9
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %167 = mul nsw i32 %166, %16... (idx: 0)        -20                           -10                           -20                           -10                           -220                          -30                           -30                           -60                           -30                           -30                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -8                            -8                            -8                            -8                            -8                            -8                            -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %167 = mul nsw i32 %166, %16... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %167 = mul nsw i32 %166, %16... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 24)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %177 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %177 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %178 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %178 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %177 = load i32* getelementp... (idx: 0)        1                             11                            
  %178 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %177 = load i32* getelementp... (idx: 0)        1                             0                             
  %178 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %177 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %178 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %168 = add nsw i32 %164, %16... can share an output register with another operation already assigned to main_signed_add_32_0
  %168 = add nsw i32 %164, %16... can share an output register with another operation already assigned to main_signed_add_32_1
  %168 = add nsw i32 %164, %16... can share an output register with another operation already assigned to main_signed_add_32_2
  %168 = add nsw i32 %164, %16... can share an output register with another operation already assigned to main_signed_add_32_3
  %168 = add nsw i32 %164, %16... can share an output register with another operation already assigned to main_signed_add_32_4
  %168 = add nsw i32 %164, %16... can share an output register with another operation already assigned to main_signed_add_32_5
  %168 = add nsw i32 %164, %16... can share an output register with another operation already assigned to main_signed_add_32_6
  %168 = add nsw i32 %164, %16... can share an output register with another operation already assigned to main_signed_add_32_7
  %168 = add nsw i32 %164, %16... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %168 = add nsw i32 %164, %16... (idx: 0)        -330                          -190                          -20                           -20                           -20                           -20                           -20                           -60                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -70                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %168 = add nsw i32 %164, %16... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %168 = add nsw i32 %164, %16... (idx: 0) -> main_signed_add_32_0 (mux inputs: 35)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %171 = mul nsw i32 %170, %16... can share an output register with another operation already assigned to main_signed_multiply_32_9
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %171 = mul nsw i32 %170, %16... (idx: 0)        -20                           -10                           -20                           -10                           -240                          -30                           -30                           -60                           -30                           -30                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -8                            -8                            -8                            -8                            -8                            -8                            -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %171 = mul nsw i32 %170, %16... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %171 = mul nsw i32 %170, %16... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 26)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %181 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %181 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %182 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %182 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %181 = load i32* getelementp... (idx: 0)        1                             11                            
  %182 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %181 = load i32* getelementp... (idx: 0)        1                             0                             
  %182 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %181 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %182 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %172 = add nsw i32 %168, %17... can share an output register with another operation already assigned to main_signed_add_32_0
  %172 = add nsw i32 %168, %17... can share an output register with another operation already assigned to main_signed_add_32_1
  %172 = add nsw i32 %168, %17... can share an output register with another operation already assigned to main_signed_add_32_2
  %172 = add nsw i32 %168, %17... can share an output register with another operation already assigned to main_signed_add_32_3
  %172 = add nsw i32 %168, %17... can share an output register with another operation already assigned to main_signed_add_32_4
  %172 = add nsw i32 %168, %17... can share an output register with another operation already assigned to main_signed_add_32_5
  %172 = add nsw i32 %168, %17... can share an output register with another operation already assigned to main_signed_add_32_6
  %172 = add nsw i32 %168, %17... can share an output register with another operation already assigned to main_signed_add_32_7
  %172 = add nsw i32 %168, %17... can share an output register with another operation already assigned to main_signed_add_32_17
  %175 = add i32 %172, %173 can share an output register with another operation already assigned to main_signed_add_32_0
  %175 = add i32 %172, %173 can share an output register with another operation already assigned to main_signed_add_32_1
  %175 = add i32 %172, %173 can share an output register with another operation already assigned to main_signed_add_32_2
  %175 = add i32 %172, %173 can share an output register with another operation already assigned to main_signed_add_32_3
  %175 = add i32 %172, %173 can share an output register with another operation already assigned to main_signed_add_32_4
  %175 = add i32 %172, %173 can share an output register with another operation already assigned to main_signed_add_32_5
  %175 = add i32 %172, %173 can share an output register with another operation already assigned to main_signed_add_32_6
  %175 = add i32 %172, %173 can share an output register with another operation already assigned to main_signed_add_32_7
  %175 = add i32 %172, %173 can share an output register with another operation already assigned to main_signed_add_32_17
  %176 = add i32 %175, %174 can share an output register with another operation already assigned to main_signed_add_32_0
  %176 = add i32 %175, %174 can share an output register with another operation already assigned to main_signed_add_32_1
  %176 = add i32 %175, %174 can share an output register with another operation already assigned to main_signed_add_32_2
  %176 = add i32 %175, %174 can share an output register with another operation already assigned to main_signed_add_32_3
  %176 = add i32 %175, %174 can share an output register with another operation already assigned to main_signed_add_32_4
  %176 = add i32 %175, %174 can share an output register with another operation already assigned to main_signed_add_32_5
  %176 = add i32 %175, %174 can share an output register with another operation already assigned to main_signed_add_32_6
  %176 = add i32 %175, %174 can share an output register with another operation already assigned to main_signed_add_32_7
  %176 = add i32 %175, %174 can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %172 = add nsw i32 %168, %17... (idx: 0)        -350                          -190                          -20                           -20                           -20                           -20                           -20                           -60                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -70                           -10                           
  %175 = add i32 %172, %173 (idx: 1)              -350                          -190                          -20                           -20                           -19                           -19                           -20                           -59                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -70                           -9                            
  %176 = add i32 %175, %174 (idx: 2)              -350                          -190                          -20                           -20                           -19                           -19                           -20                           -59                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -70                           -9                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %172 = add nsw i32 %168, %17... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %175 = add i32 %172, %173 (idx
  %176 = add i32 %175, %174 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %172 = add nsw i32 %168, %17... (idx: 0) -> main_signed_add_32_0 (mux inputs: 37)
  %175 = add i32 %172, %173 (idx: 1) -> main_signed_add_32_1 (mux inputs: 21)
  %176 = add i32 %175, %174 (idx: 2) -> main_signed_add_32_17 (mux inputs: 9)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %185 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %185 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %186 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %186 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %185 = load i32* getelementp... (idx: 0)        1                             11                            
  %186 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %185 = load i32* getelementp... (idx: 0)        1                             0                             
  %186 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %185 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %186 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %179 = add i32 %176, %177 can share an output register with another operation already assigned to main_signed_add_32_0
  %179 = add i32 %176, %177 can share an output register with another operation already assigned to main_signed_add_32_1
  %179 = add i32 %176, %177 can share an output register with another operation already assigned to main_signed_add_32_2
  %179 = add i32 %176, %177 can share an output register with another operation already assigned to main_signed_add_32_3
  %179 = add i32 %176, %177 can share an output register with another operation already assigned to main_signed_add_32_4
  %179 = add i32 %176, %177 can share an output register with another operation already assigned to main_signed_add_32_5
  %179 = add i32 %176, %177 can share an output register with another operation already assigned to main_signed_add_32_6
  %179 = add i32 %176, %177 can share an output register with another operation already assigned to main_signed_add_32_7
  %179 = add i32 %176, %177 can share an output register with another operation already assigned to main_signed_add_32_17
  %180 = add i32 %179, %178 can share an output register with another operation already assigned to main_signed_add_32_0
  %180 = add i32 %179, %178 can share an output register with another operation already assigned to main_signed_add_32_1
  %180 = add i32 %179, %178 can share an output register with another operation already assigned to main_signed_add_32_2
  %180 = add i32 %179, %178 can share an output register with another operation already assigned to main_signed_add_32_3
  %180 = add i32 %179, %178 can share an output register with another operation already assigned to main_signed_add_32_4
  %180 = add i32 %179, %178 can share an output register with another operation already assigned to main_signed_add_32_5
  %180 = add i32 %179, %178 can share an output register with another operation already assigned to main_signed_add_32_6
  %180 = add i32 %179, %178 can share an output register with another operation already assigned to main_signed_add_32_7
  %180 = add i32 %179, %178 can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %179 = add i32 %176, %177 (idx: 0)              -370                          -210                          -20                           -20                           -19                           -19                           -20                           -59                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -90                           -9                            
  %180 = add i32 %179, %178 (idx: 1)              -370                          -210                          -20                           -20                           -19                           -19                           -20                           -59                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -90                           -9                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %179 = add i32 %176, %177 (idx: 0)              1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %180 = add i32 %179, %178 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %179 = add i32 %176, %177 (idx: 0) -> main_signed_add_32_0 (mux inputs: 39)
  %180 = add i32 %179, %178 (idx: 1) -> main_signed_add_32_1 (mux inputs: 23)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %189 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %189 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %190 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %190 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %189 = load i32* getelementp... (idx: 0)        1                             11                            
  %190 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %189 = load i32* getelementp... (idx: 0)        1                             0                             
  %190 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %189 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %190 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %183 = add i32 %180, %181 can share an output register with another operation already assigned to main_signed_add_32_0
  %183 = add i32 %180, %181 can share an output register with another operation already assigned to main_signed_add_32_1
  %183 = add i32 %180, %181 can share an output register with another operation already assigned to main_signed_add_32_2
  %183 = add i32 %180, %181 can share an output register with another operation already assigned to main_signed_add_32_3
  %183 = add i32 %180, %181 can share an output register with another operation already assigned to main_signed_add_32_4
  %183 = add i32 %180, %181 can share an output register with another operation already assigned to main_signed_add_32_5
  %183 = add i32 %180, %181 can share an output register with another operation already assigned to main_signed_add_32_6
  %183 = add i32 %180, %181 can share an output register with another operation already assigned to main_signed_add_32_7
  %183 = add i32 %180, %181 can share an output register with another operation already assigned to main_signed_add_32_17
  %184 = add i32 %183, %182 can share an output register with another operation already assigned to main_signed_add_32_0
  %184 = add i32 %183, %182 can share an output register with another operation already assigned to main_signed_add_32_1
  %184 = add i32 %183, %182 can share an output register with another operation already assigned to main_signed_add_32_2
  %184 = add i32 %183, %182 can share an output register with another operation already assigned to main_signed_add_32_3
  %184 = add i32 %183, %182 can share an output register with another operation already assigned to main_signed_add_32_4
  %184 = add i32 %183, %182 can share an output register with another operation already assigned to main_signed_add_32_5
  %184 = add i32 %183, %182 can share an output register with another operation already assigned to main_signed_add_32_6
  %184 = add i32 %183, %182 can share an output register with another operation already assigned to main_signed_add_32_7
  %184 = add i32 %183, %182 can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %183 = add i32 %180, %181 (idx: 0)              -390                          -230                          -20                           -20                           -19                           -19                           -20                           -59                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -90                           -9                            
  %184 = add i32 %183, %182 (idx: 1)              -390                          -230                          -20                           -20                           -19                           -19                           -20                           -59                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -90                           -9                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %183 = add i32 %180, %181 (idx
  %184 = add i32 %183, %182 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %183 = add i32 %180, %181 (idx: 0) -> main_signed_add_32_0 (mux inputs: 41)
  %184 = add i32 %183, %182 (idx: 1) -> main_signed_add_32_1 (mux inputs: 25)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %187 = add i32 %184, %185 can share an output register with another operation already assigned to main_signed_add_32_0
  %187 = add i32 %184, %185 can share an output register with another operation already assigned to main_signed_add_32_1
  %187 = add i32 %184, %185 can share an output register with another operation already assigned to main_signed_add_32_2
  %187 = add i32 %184, %185 can share an output register with another operation already assigned to main_signed_add_32_3
  %187 = add i32 %184, %185 can share an output register with another operation already assigned to main_signed_add_32_4
  %187 = add i32 %184, %185 can share an output register with another operation already assigned to main_signed_add_32_5
  %187 = add i32 %184, %185 can share an output register with another operation already assigned to main_signed_add_32_6
  %187 = add i32 %184, %185 can share an output register with another operation already assigned to main_signed_add_32_7
  %187 = add i32 %184, %185 can share an output register with another operation already assigned to main_signed_add_32_17
  %188 = add i32 %187, %186 can share an output register with another operation already assigned to main_signed_add_32_0
  %188 = add i32 %187, %186 can share an output register with another operation already assigned to main_signed_add_32_1
  %188 = add i32 %187, %186 can share an output register with another operation already assigned to main_signed_add_32_2
  %188 = add i32 %187, %186 can share an output register with another operation already assigned to main_signed_add_32_3
  %188 = add i32 %187, %186 can share an output register with another operation already assigned to main_signed_add_32_4
  %188 = add i32 %187, %186 can share an output register with another operation already assigned to main_signed_add_32_5
  %188 = add i32 %187, %186 can share an output register with another operation already assigned to main_signed_add_32_6
  %188 = add i32 %187, %186 can share an output register with another operation already assigned to main_signed_add_32_7
  %188 = add i32 %187, %186 can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %187 = add i32 %184, %185 (idx: 0)              -410                          -250                          -20                           -20                           -19                           -19                           -20                           -59                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -90                           -9                            
  %188 = add i32 %187, %186 (idx: 1)              -410                          -250                          -20                           -20                           -19                           -19                           -20                           -59                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -90                           -9                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %187 = add i32 %184, %185 (idx
  %188 = add i32 %187, %186 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %187 = add i32 %184, %185 (idx: 0) -> main_signed_add_32_0 (mux inputs: 43)
  %188 = add i32 %187, %186 (idx: 1) -> main_signed_add_32_1 (mux inputs: 27)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %191 = add i32 %188, %189 can share an output register with another operation already assigned to main_signed_add_32_0
  %191 = add i32 %188, %189 can share an output register with another operation already assigned to main_signed_add_32_1
  %191 = add i32 %188, %189 can share an output register with another operation already assigned to main_signed_add_32_2
  %191 = add i32 %188, %189 can share an output register with another operation already assigned to main_signed_add_32_3
  %191 = add i32 %188, %189 can share an output register with another operation already assigned to main_signed_add_32_4
  %191 = add i32 %188, %189 can share an output register with another operation already assigned to main_signed_add_32_5
  %191 = add i32 %188, %189 can share an output register with another operation already assigned to main_signed_add_32_6
  %191 = add i32 %188, %189 can share an output register with another operation already assigned to main_signed_add_32_7
  %191 = add i32 %188, %189 can share an output register with another operation already assigned to main_signed_add_32_17
  %192 = add i32 %191, %190 can share an output register with another operation already assigned to main_signed_add_32_0
  %192 = add i32 %191, %190 can share an output register with another operation already assigned to main_signed_add_32_1
  %192 = add i32 %191, %190 can share an output register with another operation already assigned to main_signed_add_32_2
  %192 = add i32 %191, %190 can share an output register with another operation already assigned to main_signed_add_32_3
  %192 = add i32 %191, %190 can share an output register with another operation already assigned to main_signed_add_32_4
  %192 = add i32 %191, %190 can share an output register with another operation already assigned to main_signed_add_32_5
  %192 = add i32 %191, %190 can share an output register with another operation already assigned to main_signed_add_32_6
  %192 = add i32 %191, %190 can share an output register with another operation already assigned to main_signed_add_32_7
  %192 = add i32 %191, %190 can share an output register with another operation already assigned to main_signed_add_32_17
  %197 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_0
  %197 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_1
  %197 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_2
  %197 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_3
  %197 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_4
  %197 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_5
  %197 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_6
  %197 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_7
  %197 = add nsw i32 %196, %19... can share an output register with another operation already assigned to main_signed_add_32_17
  %201 = add nsw i32 %200, 3 can share an output register with another operation already assigned to main_signed_add_32_0
  %201 = add nsw i32 %200, 3 can share an output register with another operation already assigned to main_signed_add_32_1
  %201 = add nsw i32 %200, 3 can share an output register with another operation already assigned to main_signed_add_32_2
  %201 = add nsw i32 %200, 3 can share an output register with another operation already assigned to main_signed_add_32_3
  %201 = add nsw i32 %200, 3 can share an output register with another operation already assigned to main_signed_add_32_4
  %201 = add nsw i32 %200, 3 can share an output register with another operation already assigned to main_signed_add_32_5
  %201 = add nsw i32 %200, 3 can share an output register with another operation already assigned to main_signed_add_32_6
  %201 = add nsw i32 %200, 3 can share an output register with another operation already assigned to main_signed_add_32_7
  %201 = add nsw i32 %200, 3 can share an output register with another operation already assigned to main_signed_add_32_17
  %207 = add nsw i32 %200, 2 can share an output register with another operation already assigned to main_signed_add_32_0
  %207 = add nsw i32 %200, 2 can share an output register with another operation already assigned to main_signed_add_32_1
  %207 = add nsw i32 %200, 2 can share an output register with another operation already assigned to main_signed_add_32_2
  %207 = add nsw i32 %200, 2 can share an output register with another operation already assigned to main_signed_add_32_3
  %207 = add nsw i32 %200, 2 can share an output register with another operation already assigned to main_signed_add_32_4
  %207 = add nsw i32 %200, 2 can share an output register with another operation already assigned to main_signed_add_32_5
  %207 = add nsw i32 %200, 2 can share an output register with another operation already assigned to main_signed_add_32_6
  %207 = add nsw i32 %200, 2 can share an output register with another operation already assigned to main_signed_add_32_7
  %207 = add nsw i32 %200, 2 can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %191 = add i32 %188, %189 (idx: 0)              -430                          -270                          -20                           -20                           -19                           -19                           -20                           -59                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -90                           -9                            
  %192 = add i32 %191, %190 (idx: 1)              -430                          -270                          -20                           -20                           -19                           -19                           -20                           -59                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -90                           -9                            
  %197 = add nsw i32 %196, %19... (idx: 2)        -430                          -270                          -20                           -20                           -20                           -20                           -20                           -60                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -90                           -10                           
  %201 = add nsw i32 %200, 3 (idx: 3)             -424                          -264                          -15                           -14                           -14                           -14                           -14                           -54                           -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -84                           -4                            
  %207 = add nsw i32 %200, 2 (idx: 4)             -424                          -265                          -14                           -15                           -14                           -14                           -14                           -54                           -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -84                           -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %191 = add i32 %188, %189 (idx
  %192 = add i32 %191, %190 (idx
  %197 = add nsw i32 %196, %19... (idx
  %201 = add nsw i32 %200, 3 (idx
  %207 = add nsw i32 %200, 2 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %191 = add i32 %188, %189 (idx: 0) -> main_signed_add_32_0 (mux inputs: 45)
  %207 = add nsw i32 %200, 2 (idx: 4) -> main_signed_add_32_1 (mux inputs: 28)
  %201 = add nsw i32 %200, 3 (idx: 3) -> main_signed_add_32_2 (mux inputs: 3)
  %197 = add nsw i32 %196, %19... (idx: 2) -> main_signed_add_32_7 (mux inputs: 8)
  %192 = add i32 %191, %190 (idx: 1) -> main_signed_add_32_17 (mux inputs: 11)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %198 = sub nsw i32 %51, %197 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %198 = sub nsw i32 %51, %197 can share an output register with another operation already assigned to main_signed_subtract_32_1
  %205 = sub nsw i32 0, %198 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %205 = sub nsw i32 0, %198 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %198 = sub nsw i32 %51, %197 (idx: 0)           -89                           -29                           
  %205 = sub nsw i32 0, %198 (idx: 1)             -85                           -25                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %198 = sub nsw i32 %51, %197 (idx: 0)           1                             0                             
  %205 = sub nsw i32 0, %198 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %198 = sub nsw i32 %51, %197 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 11)
  %205 = sub nsw i32 0, %198 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 4)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %210 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_0
  %210 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_1
  %210 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_2
  %210 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_3
  %210 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_4
  %210 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_5
  %210 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_6
  %210 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_7
  %210 = add nsw i32 %., -2 can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %210 = add nsw i32 %., -2 (idx: 0)              -444                          -274                          -24                           -14                           -14                           -14                           -14                           -74                           -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -104                          -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %210 = add nsw i32 %., -2 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %210 = add nsw i32 %., -2 (idx: 0) -> main_signed_add_32_0 (mux inputs: 46)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: qq2_code2_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_qq2_code2_table_local_mem_dual_port_0
  %212 = load i32* %211, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_qq2_code2_table_local_mem_dual_port_0
  %212 = load i32* %211, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %212 = load i32* %211, align... (idx: 0) -> main_qq2_code2_table_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep21 = add i32 %gep_int19,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep24 = add i32 %gep_int22,... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep21 = add i32 %gep_int19,... (idx: 0)        -460                          -280                          -30                           -20                           -20                           -20                           -20                           -80                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -110                          -10                           
  %gep24 = add i32 %gep_int22,... (idx: 1)        -460                          -280                          -30                           -20                           -20                           -20                           -20                           -80                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -110                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep21 = add i32 %gep_int19,... (idx
  %gep24 = add i32 %gep_int22,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep21 = add i32 %gep_int19,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 48)
  %gep24 = add i32 %gep_int22,... (idx: 1) -> main_signed_add_32_1 (mux inputs: 30)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: wh_code_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_wh_code_table_local_mem_dual_port_0
  %218 = load i32* %217, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_wh_code_table_local_mem_dual_port_0
  %218 = load i32* %217, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %218 = load i32* %217, align... (idx: 0) -> main_wh_code_table_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %219 = add nsw i32 %216, %21... can share an output register with another operation already assigned to main_signed_add_32_0
  %219 = add nsw i32 %216, %21... can share an output register with another operation already assigned to main_signed_add_32_1
  %219 = add nsw i32 %216, %21... can share an output register with another operation already assigned to main_signed_add_32_2
  %219 = add nsw i32 %216, %21... can share an output register with another operation already assigned to main_signed_add_32_3
  %219 = add nsw i32 %216, %21... can share an output register with another operation already assigned to main_signed_add_32_4
  %219 = add nsw i32 %216, %21... can share an output register with another operation already assigned to main_signed_add_32_5
  %219 = add nsw i32 %216, %21... can share an output register with another operation already assigned to main_signed_add_32_6
  %219 = add nsw i32 %216, %21... can share an output register with another operation already assigned to main_signed_add_32_7
  %219 = add nsw i32 %216, %21... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %219 = add nsw i32 %216, %21... (idx: 0)        -480                          -300                          -30                           -20                           -19                           -19                           -20                           -79                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -110                          -9                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %219 = add nsw i32 %216, %21... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %219 = add nsw i32 %216, %21... (idx: 0) -> main_signed_add_32_0 (mux inputs: 50)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %213 = mul nsw i32 %212, %de... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %213 = mul nsw i32 %212, %de... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %213 = mul nsw i32 %212, %de... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %213 = mul nsw i32 %212, %de... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %213 = mul nsw i32 %212, %de... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %213 = mul nsw i32 %212, %de... hey can share an input with another operation already assigned to main_signed_multiply_32_5
  %213 = mul nsw i32 %212, %de... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %213 = mul nsw i32 %212, %de... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %213 = mul nsw i32 %212, %de... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %213 = mul nsw i32 %212, %de... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %213 = mul nsw i32 %212, %de... can share an output register with another operation already assigned to main_signed_multiply_32_9
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %213 = mul nsw i32 %212, %de... (idx: 0)        -20                           -9                            -19                           -9                            -259                          -25                           -29                           -59                           -29                           -29                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -8                            -8                            -8                            -8                            -8                            -8                            -8                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %213 = mul nsw i32 %212, %de... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %213 = mul nsw i32 %212, %de... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 28)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %227 = sub i32 11, %224 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %227 = sub i32 11, %224 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %227 = sub i32 11, %224 (idx: 0)                -105                          -34                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %227 = sub i32 11, %224 (idx: 0)                1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %227 = sub i32 11, %224 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 12)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %230 = add nsw i32 %193, %21... can share an output register with another operation already assigned to main_signed_add_32_0
  %230 = add nsw i32 %193, %21... hey can share an input with another operation already assigned to main_signed_add_32_7
  %254 = add nsw i32 %214, %19... can share an output register with another operation already assigned to main_signed_add_32_0
  %254 = add nsw i32 %214, %19... can share an output register with another operation already assigned to main_signed_add_32_1
  %254 = add nsw i32 %214, %19... can share an output register with another operation already assigned to main_signed_add_32_2
  %254 = add nsw i32 %214, %19... can share an output register with another operation already assigned to main_signed_add_32_3
  %254 = add nsw i32 %214, %19... can share an output register with another operation already assigned to main_signed_add_32_4
  %254 = add nsw i32 %214, %19... can share an output register with another operation already assigned to main_signed_add_32_5
  %254 = add nsw i32 %214, %19... can share an output register with another operation already assigned to main_signed_add_32_6
  %254 = add nsw i32 %214, %19... can share an output register with another operation already assigned to main_signed_add_32_7
  %254 = add nsw i32 %214, %19... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %230 = add nsw i32 %193, %21... (idx: 0)        -500                          -310                          -40                           -30                           -30                           -30                           -30                           -85                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -120                          -10                           
  %254 = add nsw i32 %214, %19... (idx: 1)        -500                          -300                          -30                           -20                           -20                           -20                           -20                           -80                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -110                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %230 = add nsw i32 %193, %21... (idx
  %254 = add nsw i32 %214, %19... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %254 = add nsw i32 %214, %19... (idx: 1) -> main_signed_add_32_0 (mux inputs: 52)
  %230 = add nsw i32 %193, %21... (idx: 0) -> main_signed_add_32_1 (mux inputs: 32)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %232 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %232 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %232 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %232 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %232 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %232 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %232 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %232 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %232 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %232 = mul nsw i32 %ph1.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %236 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %236 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %236 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %236 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %236 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %236 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %236 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %236 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %236 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %236 = mul nsw i32 %ph2.0, %... can share an output register with another operation already assigned to main_signed_multiply_32_9
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %232 = mul nsw i32 %ph1.0, %... (idx: 0)        -20                           -10                           -20                           -10                           -280                          -30                           -30                           -60                           -30                           -30                           -10                           -9                            -10                           -9                            -10                           -10                           -9                            -10                           -9                            -10                           -9                            -10                           -10                           -10                           -9                            -9                            -10                           -9                            -10                           
  %236 = mul nsw i32 %ph2.0, %... (idx: 1)        -20                           -10                           -20                           -10                           -280                          -30                           -30                           -60                           -30                           -30                           -10                           -9                            -10                           -9                            -10                           -10                           -9                            -10                           -9                            -10                           -9                            -10                           -10                           -10                           -9                            -9                            -10                           -9                            -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %232 = mul nsw i32 %ph1.0, %... (idx
  %236 = mul nsw i32 %ph2.0, %... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %232 = mul nsw i32 %ph1.0, %... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 30)
  %236 = mul nsw i32 %ph2.0, %... (idx: 1) -> main_signed_multiply_32_7 (mux inputs: 8)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: ilb_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %226 = load i32* %225, align... can share an output register with another operation already assigned to main_ilb_table_local_mem_dual_port_0
                                                  main_ilb_table_local_mem_dual_port_0
  %226 = load i32* %225, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_ilb_table_local_mem_dual_port_0
  %226 = load i32* %225, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %226 = load i32* %225, align... (idx: 0) -> main_ilb_table_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep27 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_17
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_0
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_1
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_2
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_3
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_4
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_5
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_6
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_7
  %wd4.0.i.i4 = add nsw i32 %2... can share an output register with another operation already assigned to main_signed_add_32_17
  %242 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_0
  %242 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_1
  %242 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_2
  %242 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_3
  %242 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_4
  %242 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_5
  %242 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_6
  %242 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_7
  %242 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_17
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_0
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_1
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_2
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_3
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_4
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_5
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_6
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_7
  %apl1.0.i.i7 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep27 = add i32 %gep_int25,... (idx: 0)        -520                          -320                          -30                           -20                           -20                           -20                           -20                           -80                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -110                          -10                           
  %wd4.0.i.i4 = add nsw i32 %2... (idx: 1)        -520                          -320                          -30                           -20                           -20                           -20                           -20                           -80                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -110                          -10                           
  %242 = add nsw i32 %wd4.0.i.... (idx: 2)        -520                          -320                          -30                           -20                           -20                           -20                           -20                           -80                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -110                          -10                           
  %apl1.0.i.i7 = add nsw i32 %... (idx: 3)        -520                          -320                          -30                           -20                           -20                           -20                           -20                           -80                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -110                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep27 = add i32 %gep_int25,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %wd4.0.i.i4 = add nsw i32 %2... (idx
  %242 = add nsw i32 %wd4.0.i.... (idx
  %apl1.0.i.i7 = add nsw i32 %... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep27 = add i32 %gep_int25,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 54)
  %wd4.0.i.i4 = add nsw i32 %2... (idx: 1) -> main_signed_add_32_1 (mux inputs: 34)
  %apl1.0.i.i7 = add nsw i32 %... (idx: 3) -> main_signed_add_32_7 (mux inputs: 10)
  %242 = add nsw i32 %wd4.0.i.... (idx: 2) -> main_signed_add_32_17 (mux inputs: 13)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %250 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_0
  %250 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_1
  %252 = sub nsw i32 0, %250 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %252 = sub nsw i32 0, %250 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %250 = sub nsw i32 15360, %.... (idx: 0)        -115                          -34                           
  %252 = sub nsw i32 0, %250 (idx: 1)             -115                          -35                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %250 = sub nsw i32 15360, %.... (idx: 0)        1                             0                             
  %252 = sub nsw i32 0, %250 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %250 = sub nsw i32 15360, %.... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 13)
  %252 = sub nsw i32 0, %250 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 5)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep30 = add i32 %gep_int28,... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep30 = add i32 %gep_int28,... (idx: 0)        -540                          -340                          -30                           -20                           -20                           -20                           -20                           -100                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -130                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep30 = add i32 %gep_int28,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep30 = add i32 %gep_int28,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 56)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre39 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre39 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  %.pre40 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre40 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre39 = load i32* geteleme... (idx: 0)        1                             11                            
  %.pre40 = load i32* geteleme... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre39 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre40 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre39 = load i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %.pre40 = load i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre = load i32* getelement... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre = load i32* getelement... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre16 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre16 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre = load i32* getelement... (idx: 0)        -10                           -10                           
  %.pre16 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre = load i32* getelement... (idx: 0)        1                             0                             
  %.pre16 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre = load i32* getelement... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre16 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre41 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre41 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  %.pre42 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre42 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre41 = load i32* geteleme... (idx: 0)        1                             11                            
  %.pre42 = load i32* geteleme... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre41 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre42 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre41 = load i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %.pre42 = load i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre17 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre17 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre18 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre18 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre17 = load i32* geteleme... (idx: 0)        -10                           -10                           
  %.pre18 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre17 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre18 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre17 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre18 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre43 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre43 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  %.pre44 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre44 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre43 = load i32* geteleme... (idx: 0)        1                             11                            
  %.pre44 = load i32* geteleme... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre43 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre44 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre43 = load i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %.pre44 = load i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre19 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre19 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre20 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre20 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre19 = load i32* geteleme... (idx: 0)        -10                           -10                           
  %.pre20 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre19 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre20 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre19 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre20 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre45 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre45 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  %.pre46 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre46 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre45 = load i32* geteleme... (idx: 0)        1                             11                            
  %.pre46 = load i32* geteleme... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre45 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre46 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre45 = load i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %.pre46 = load i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre21 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre21 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre22 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre22 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre21 = load i32* geteleme... (idx: 0)        -10                           -10                           
  %.pre22 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre21 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre22 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre21 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre22 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre47 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre47 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  %.pre48 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre48 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre47 = load i32* geteleme... (idx: 0)        1                             11                            
  %.pre48 = load i32* geteleme... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre47 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre48 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre47 = load i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %.pre48 = load i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre23 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre23 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre24 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre24 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre23 = load i32* geteleme... (idx: 0)        -10                           -10                           
  %.pre24 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre23 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre24 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre23 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre24 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre49 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre49 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre49 = load i32* geteleme... (idx: 0)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre49 = load i32* geteleme... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre49 = load i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre25 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre25 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre26 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre26 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre25 = load i32* geteleme... (idx: 0)        -10                           -10                           
  %.pre26 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre25 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre26 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre25 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre26 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre27 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre27 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre28 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre28 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre27 = load i32* geteleme... (idx: 0)        -10                           -10                           
  %.pre28 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre27 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre28 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre27 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre28 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre29 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre29 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre30 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre30 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre29 = load i32* geteleme... (idx: 0)        -10                           -10                           
  %.pre30 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre29 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre30 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre29 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre30 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre31 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre31 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre32 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre32 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre31 = load i32* geteleme... (idx: 0)        -10                           -10                           
  %.pre32 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre31 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre32 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre31 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre32 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre33 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre33 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre34 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre34 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre33 = load i32* geteleme... (idx: 0)        -10                           -10                           
  %.pre34 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre33 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre34 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre33 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre34 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre35 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre35 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre36 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre36 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre35 = load i32* geteleme... (idx: 0)        -10                           -10                           
  %.pre36 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre35 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre36 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre35 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre36 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: tqmf_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre37 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre37 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
  %.pre38 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_0
  %.pre38 = load i32* geteleme... can share an output register with another operation already assigned to main_tqmf_local_mem_dual_port_1
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre37 = load i32* geteleme... (idx: 0)        -10                           -10                           
  %.pre38 = load i32* geteleme... (idx: 1)        -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_tqmf_local_mem_dual_port_0main_tqmf_local_mem_dual_port_1
  %.pre37 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre38 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre37 = load i32* geteleme... (idx: 0) -> main_tqmf_local_mem_dual_port_0 (mux inputs: 12)
  %.pre38 = load i32* geteleme... (idx: 1) -> main_tqmf_local_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_preheaderipreheader
Binding functional unit type: qq6_code6_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_qq6_code6_table_local_mem_dual_port_0
  %262 = load i32* %261, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_qq6_code6_table_local_mem_dual_port_0
  %262 = load i32* %261, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %262 = load i32* %261, align... (idx: 0) -> main_qq6_code6_table_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_preheaderipreheader
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep33 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep33 = add i32 %gep_int31,... (idx: 0)        -560                          -340                          -30                           -20                           -20                           -20                           -20                           -100                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -130                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep33 = add i32 %gep_int31,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep33 = add i32 %gep_int31,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 58)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %268 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %268 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %269 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %269 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %268 = load i32* getelementp... (idx: 0)        1                             11                            
  %269 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %268 = load i32* getelementp... (idx: 0)        1                             0                             
  %269 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %268 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %269 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %509 = add nsw i32 %i.11.i, ... (idx: 0)        -584                          -345                          -34                           -25                           -24                           -24                           -24                           -104                          -3                            -3                            -3                            -3                            -3                            -3                            -3                            -3                            -3                            -134                          -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %509 = add nsw i32 %i.11.i, ... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %509 = add nsw i32 %i.11.i, ... (idx: 0) -> main_signed_add_32_0 (mux inputs: 59)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_divide_32
Weight matrix for operation/function unit matching:
  %263 = sdiv i32 %i.11.i, 2 can share an output register with another operation already assigned to main_signed_divide_32_0
                                                  main_signed_divide_32_0       
  %263 = sdiv i32 %i.11.i, 2 (idx: 0)             95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_divide_32_0       
  %263 = sdiv i32 %i.11.i, 2 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %263 = sdiv i32 %i.11.i, 2 (idx: 0) -> main_signed_divide_32_0 (mux inputs: 2)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %313 = mul nsw i32 %312, %de... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %313 = mul nsw i32 %312, %de... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %313 = mul nsw i32 %312, %de... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %313 = mul nsw i32 %312, %de... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %313 = mul nsw i32 %312, %de... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %313 = mul nsw i32 %312, %de... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %313 = mul nsw i32 %312, %de... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %313 = mul nsw i32 %312, %de... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %313 = mul nsw i32 %312, %de... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %313 = mul nsw i32 %312, %de... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %321 = mul nsw i32 %262, %de... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %321 = mul nsw i32 %262, %de... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %321 = mul nsw i32 %262, %de... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %321 = mul nsw i32 %262, %de... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %321 = mul nsw i32 %262, %de... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %321 = mul nsw i32 %262, %de... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %321 = mul nsw i32 %262, %de... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %321 = mul nsw i32 %262, %de... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %321 = mul nsw i32 %262, %de... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %321 = mul nsw i32 %262, %de... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %324 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %324 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %324 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %324 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %324 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %324 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %324 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %324 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %324 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %324 = mul nsw i32 %dec_nbl.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %349 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %349 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %349 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %349 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %349 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %349 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %349 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %349 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %349 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %349 = mul nsw i32 %dec_al2.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %354 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %354 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %354 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %354 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %354 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %354 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %354 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %354 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %354 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %354 = mul nsw i32 %dec_al1.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %409 = mul nsw i32 %408, %de... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %409 = mul nsw i32 %408, %de... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %409 = mul nsw i32 %408, %de... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %409 = mul nsw i32 %408, %de... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %409 = mul nsw i32 %408, %de... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %409 = mul nsw i32 %408, %de... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %409 = mul nsw i32 %408, %de... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %409 = mul nsw i32 %408, %de... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %409 = mul nsw i32 %408, %de... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %409 = mul nsw i32 %408, %de... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %416 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %416 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %416 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %416 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %416 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %416 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %416 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %416 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %416 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %416 = mul nsw i32 %dec_nbh.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %441 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %441 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %441 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %441 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %441 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %441 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %441 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %441 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %441 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %441 = mul nsw i32 %dec_ah2.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %446 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %446 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %446 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %446 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %446 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %446 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %446 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %446 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %446 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %446 = mul nsw i32 %dec_ah1.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %460 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %460 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %460 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %460 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %460 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %460 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %460 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %460 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %460 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %460 = mul nsw i32 %accumc.0... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %462 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %462 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %462 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %462 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %462 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %462 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %462 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %462 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %462 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %462 = mul nsw i32 %accumd.0... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %464 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %464 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %464 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %464 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %464 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %464 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %464 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %464 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %464 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %464 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %466 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %466 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %466 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %466 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %466 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %466 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %466 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %466 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %466 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %466 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %470 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %470 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %470 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %470 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %470 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %470 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %470 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %470 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %470 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %470 = mul nsw i32 %accumd.2... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %472 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %472 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %472 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %472 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %472 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %472 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %472 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %472 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %472 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %472 = mul nsw i32 %accumc.3... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %474 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %474 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %474 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %474 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %474 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %474 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %474 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %474 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %474 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %474 = mul nsw i32 %accumd.3... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %476 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %476 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %476 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %476 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %476 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %476 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %476 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %476 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %476 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %476 = mul nsw i32 %accumc.4... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %478 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %478 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %478 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %478 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %478 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %478 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %478 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %478 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %478 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %478 = mul nsw i32 %accumd.4... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %480 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %480 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %480 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %480 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %480 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %480 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %480 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %480 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %480 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %480 = mul nsw i32 %accumc.5... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %482 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %482 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %482 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %482 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %482 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %482 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %482 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %482 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %482 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %482 = mul nsw i32 %accumd.5... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %484 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %484 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %484 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %484 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %484 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %484 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %484 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %484 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %484 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %484 = mul nsw i32 %accumc.6... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %486 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %486 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %486 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %486 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %486 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %486 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %486 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %486 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %486 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %486 = mul nsw i32 %accumd.6... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %488 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %488 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %488 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %488 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %488 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %488 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %488 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %488 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %488 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %488 = mul nsw i32 %accumc.7... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %492 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %492 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %492 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %492 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %492 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %492 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %492 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %492 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %492 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %492 = mul nsw i32 %accumc.8... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %494 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %494 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %494 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %494 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %494 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %494 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %494 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %494 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %494 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %494 = mul nsw i32 %accumd.8... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %496 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %496 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %496 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %496 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %496 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %496 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %496 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %496 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %496 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %496 = mul nsw i32 %accumc.9... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %498 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %498 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %498 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %498 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %498 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %498 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %498 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %498 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %498 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %498 = mul nsw i32 %accumd.9... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %500 = mul nsw i32 %accumc.1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %502 = mul nsw i32 %accumd.1... can share an output register with another operation already assigned to main_signed_multiply_32_9
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %313 = mul nsw i32 %312, %de... (idx: 0)        -20                           -10                           -20                           -10                           -300                          -30                           -30                           -80                           -30                           -30                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %321 = mul nsw i32 %262, %de... (idx: 1)        -20                           -9                            -20                           -9                            -299                          -29                           -29                           -79                           -29                           -29                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -8                            -8                            -8                            -8                            -8                            -8                            -8                            
  %324 = mul nsw i32 %dec_nbl.... (idx: 2)        -15                           -5                            -14                           -5                            -295                          -24                           -25                           -75                           -25                           -25                           -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            
  %349 = mul nsw i32 %dec_al2.... (idx: 3)        -15                           -5                            -14                           -5                            -295                          -24                           -25                           -75                           -25                           -25                           -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            
  %354 = mul nsw i32 %dec_al1.... (idx: 4)        -14                           -4                            -15                           -4                            -294                          -25                           -24                           -74                           -25                           -24                           -5                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            
  %409 = mul nsw i32 %408, %de... (idx: 5)        -20                           -10                           -20                           -10                           -300                          -30                           -30                           -80                           -30                           -30                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %416 = mul nsw i32 %dec_nbh.... (idx: 6)        -15                           -5                            -14                           -5                            -295                          -24                           -25                           -75                           -25                           -25                           -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            
  %441 = mul nsw i32 %dec_ah2.... (idx: 7)        -15                           -5                            -14                           -5                            -295                          -24                           -25                           -75                           -25                           -25                           -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            
  %446 = mul nsw i32 %dec_ah1.... (idx: 8)        -14                           -4                            -15                           -4                            -294                          -25                           -24                           -74                           -25                           -24                           -5                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            
  %460 = mul nsw i32 %accumc.0... (idx: 9)        -14                           -3                            -14                           -4                            -293                          -24                           -24                           -73                           -24                           -23                           -4                            -4                            -3                            -4                            -3                            -3                            -4                            -3                            -4                            -3                            -4                            -3                            -4                            -3                            -4                            -4                            -3                            -4                            -3                            
  %462 = mul nsw i32 %accumd.0... (idx: 10)       -14                           -4                            -14                           -5                            -294                          -24                           -24                           -74                           -24                           -24                           -4                            -3                            -5                            -3                            -4                            -4                            -3                            -4                            -4                            -4                            -3                            -4                            -4                            -4                            -3                            -3                            -4                            -4                            -4                            
  %464 = mul nsw i32 %accumc.1... (idx: 11)       -14                           -3                            -14                           -4                            -294                          -24                           -24                           -73                           -24                           -23                           -4                            -4                            -3                            -5                            -3                            -3                            -4                            -4                            -4                            -3                            -4                            -3                            -4                            -3                            -4                            -4                            -4                            -4                            -3                            
  %466 = mul nsw i32 %accumd.1... (idx: 12)       -14                           -4                            -14                           -4                            -294                          -24                           -24                           -74                           -24                           -24                           -4                            -3                            -4                            -3                            -4                            -4                            -3                            -4                            -3                            -4                            -3                            -4                            -4                            -4                            -3                            -3                            -4                            -3                            -4                            
  %470 = mul nsw i32 %accumd.2... (idx: 13)       -14                           -4                            -14                           -4                            -294                          -24                           -25                           -74                           -24                           -24                           -4                            -3                            -4                            -3                            -4                            -5                            -3                            -4                            -3                            -4                            -3                            -4                            -4                            -4                            -4                            -3                            -4                            -3                            -4                            
  %472 = mul nsw i32 %accumc.3... (idx: 14)       -14                           -3                            -14                           -4                            -293                          -24                           -24                           -73                           -24                           -23                           -4                            -4                            -3                            -4                            -3                            -3                            -4                            -3                            -4                            -3                            -4                            -3                            -4                            -3                            -4                            -4                            -3                            -4                            -3                            
  %474 = mul nsw i32 %accumd.3... (idx: 15)       -14                           -4                            -14                           -4                            -294                          -24                           -24                           -74                           -24                           -24                           -4                            -3                            -4                            -3                            -4                            -4                            -3                            -4                            -3                            -4                            -3                            -4                            -4                            -4                            -3                            -3                            -4                            -3                            -4                            
  %476 = mul nsw i32 %accumc.4... (idx: 16)       -14                           -3                            -14                           -4                            -293                          -24                           -24                           -73                           -24                           -24                           -4                            -4                            -4                            -4                            -3                            -3                            -4                            -3                            -5                            -3                            -4                            -4                            -4                            -3                            -4                            -4                            -3                            -4                            -3                            
  %478 = mul nsw i32 %accumd.4... (idx: 17)       -14                           -4                            -14                           -4                            -294                          -24                           -24                           -74                           -24                           -24                           -5                            -4                            -4                            -3                            -4                            -4                            -3                            -4                            -3                            -5                            -4                            -4                            -4                            -4                            -3                            -3                            -4                            -3                            -4                            
  %480 = mul nsw i32 %accumc.5... (idx: 18)       -14                           -3                            -14                           -4                            -293                          -24                           -24                           -73                           -24                           -23                           -5                            -5                            -3                            -4                            -3                            -3                            -4                            -3                            -4                            -4                            -5                            -3                            -4                            -3                            -4                            -4                            -3                            -4                            -3                            
  %482 = mul nsw i32 %accumd.5... (idx: 19)       -14                           -4                            -14                           -4                            -294                          -24                           -24                           -74                           -24                           -25                           -4                            -3                            -5                            -3                            -4                            -4                            -3                            -4                            -4                            -4                            -3                            -5                            -4                            -4                            -3                            -3                            -4                            -3                            -4                            
  %484 = mul nsw i32 %accumc.6... (idx: 20)       -14                           -3                            -14                           -4                            -293                          -24                           -24                           -73                           -24                           -23                           -4                            -4                            -3                            -4                            -3                            -3                            -4                            -3                            -4                            -3                            -4                            -3                            -4                            -3                            -4                            -4                            -3                            -4                            -3                            
  %486 = mul nsw i32 %accumd.6... (idx: 21)       -14                           -4                            -14                           -4                            -294                          -24                           -24                           -74                           -24                           -24                           -4                            -3                            -4                            -3                            -4                            -4                            -3                            -4                            -3                            -4                            -3                            -4                            -4                            -4                            -3                            -3                            -4                            -3                            -4                            
  %488 = mul nsw i32 %accumc.7... (idx: 22)       -14                           -3                            -14                           -4                            -293                          -24                           -25                           -73                           -24                           -23                           -4                            -4                            -3                            -4                            -3                            -4                            -4                            -3                            -4                            -3                            -4                            -3                            -4                            -3                            -5                            -4                            -3                            -4                            -3                            
  %492 = mul nsw i32 %accumc.8... (idx: 23)       -14                           -3                            -14                           -4                            -293                          -24                           -24                           -73                           -24                           -23                           -4                            -4                            -3                            -4                            -3                            -3                            -4                            -3                            -4                            -3                            -4                            -3                            -4                            -3                            -4                            -4                            -3                            -4                            -3                            
  %494 = mul nsw i32 %accumd.8... (idx: 24)       -14                           -4                            -14                           -4                            -295                          -24                           -24                           -74                           -24                           -24                           -4                            -3                            -4                            -4                            -4                            -4                            -3                            -5                            -3                            -4                            -3                            -4                            -4                            -4                            -3                            -3                            -5                            -3                            -4                            
  %496 = mul nsw i32 %accumc.9... (idx: 25)       -14                           -3                            -14                           -5                            -293                          -24                           -24                           -73                           -24                           -23                           -4                            -4                            -4                            -4                            -3                            -3                            -4                            -3                            -5                            -3                            -4                            -3                            -4                            -3                            -4                            -4                            -3                            -5                            -3                            
  %498 = mul nsw i32 %accumd.9... (idx: 26)       -14                           -4                            -14                           -4                            -294                          -24                           -24                           -74                           -24                           -24                           -4                            -3                            -4                            -3                            -4                            -4                            -3                            -4                            -3                            -4                            -3                            -4                            -4                            -4                            -3                            -3                            -4                            -3                            -4                            
  %500 = mul nsw i32 %accumc.1... (idx: 27)       -14                           -3                            -14                           -4                            -293                          -24                           -24                           -73                           -24                           -23                           -4                            -4                            -3                            -4                            -3                            -3                            -4                            -3                            -4                            -3                            -4                            -3                            -4                            -3                            -4                            -4                            -3                            -4                            -3                            
  %502 = mul nsw i32 %accumd.1... (idx: 28)       -15                           -4                            -15                           -4                            -294                          -24                           -24                           -74                           -24                           -24                           -4                            -3                            -4                            -3                            -4                            -4                            -3                            -4                            -3                            -4                            -3                            -5                            -4                            -4                            -3                            -3                            -4                            -3                            -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %313 = mul nsw i32 %312, %de... (idx
  %321 = mul nsw i32 %262, %de... (idx
  %324 = mul nsw i32 %dec_nbl.... (idx
  %349 = mul nsw i32 %dec_al2.... (idx: 3)        0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %354 = mul nsw i32 %dec_al1.... (idx
  %409 = mul nsw i32 %408, %de... (idx
  %416 = mul nsw i32 %dec_nbh.... (idx: 6)        0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %441 = mul nsw i32 %dec_ah2.... (idx
  %446 = mul nsw i32 %dec_ah1.... (idx
  %460 = mul nsw i32 %accumc.0... (idx
  %462 = mul nsw i32 %accumd.0... (idx
  %464 = mul nsw i32 %accumc.1... (idx
  %466 = mul nsw i32 %accumd.1... (idx
  %470 = mul nsw i32 %accumd.2... (idx
  %472 = mul nsw i32 %accumc.3... (idx
  %474 = mul nsw i32 %accumd.3... (idx
  %476 = mul nsw i32 %accumc.4... (idx
  %478 = mul nsw i32 %accumd.4... (idx
  %480 = mul nsw i32 %accumc.5... (idx
  %482 = mul nsw i32 %accumd.5... (idx
  %484 = mul nsw i32 %accumc.6... (idx
  %486 = mul nsw i32 %accumd.6... (idx
  %488 = mul nsw i32 %accumc.7... (idx
  %492 = mul nsw i32 %accumc.8... (idx
  %494 = mul nsw i32 %accumd.8... (idx
  %496 = mul nsw i32 %accumc.9... (idx
  %498 = mul nsw i32 %accumd.9... (idx
  %500 = mul nsw i32 %accumc.1... (idx
  %502 = mul nsw i32 %accumd.1... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %321 = mul nsw i32 %262, %de... (idx: 1) -> main_signed_multiply_32_0 (mux inputs: 4)
  %441 = mul nsw i32 %dec_ah2.... (idx: 7) -> main_signed_multiply_32_1 (mux inputs: 2)
  %354 = mul nsw i32 %dec_al1.... (idx: 4) -> main_signed_multiply_32_2 (mux inputs: 3)
  %496 = mul nsw i32 %accumc.9... (idx: 25) -> main_signed_multiply_32_3 (mux inputs: 2)
  %324 = mul nsw i32 %dec_nbl.... (idx: 2) -> main_signed_multiply_32_4 (mux inputs: 31)
  %446 = mul nsw i32 %dec_ah1.... (idx: 8) -> main_signed_multiply_32_5 (mux inputs: 4)
  %488 = mul nsw i32 %accumc.7... (idx: 22) -> main_signed_multiply_32_6 (mux inputs: 4)
  %349 = mul nsw i32 %dec_al2.... (idx: 3) -> main_signed_multiply_32_7 (mux inputs: 9)
  %416 = mul nsw i32 %dec_nbh.... (idx: 6) -> main_signed_multiply_32_8 (mux inputs: 4)
  %482 = mul nsw i32 %accumd.5... (idx: 19) -> main_signed_multiply_32_9 (mux inputs: 4)
  %480 = mul nsw i32 %accumc.5... (idx: 18) -> main_signed_multiply_32_10 (mux inputs: 1)
  %500 = mul nsw i32 %accumc.1... (idx: 27) -> main_signed_multiply_32_11 (mux inputs: 1)
  %462 = mul nsw i32 %accumd.0... (idx: 10) -> main_signed_multiply_32_12 (mux inputs: 1)
  %464 = mul nsw i32 %accumc.1... (idx: 11) -> main_signed_multiply_32_13 (mux inputs: 1)
  %466 = mul nsw i32 %accumd.1... (idx: 12) -> main_signed_multiply_32_14 (mux inputs: 1)
  %470 = mul nsw i32 %accumd.2... (idx: 13) -> main_signed_multiply_32_15 (mux inputs: 1)
  %472 = mul nsw i32 %accumc.3... (idx: 14) -> main_signed_multiply_32_16 (mux inputs: 1)
  %494 = mul nsw i32 %accumd.8... (idx: 24) -> main_signed_multiply_32_17 (mux inputs: 1)
  %476 = mul nsw i32 %accumc.4... (idx: 16) -> main_signed_multiply_32_18 (mux inputs: 1)
  %478 = mul nsw i32 %accumd.4... (idx: 17) -> main_signed_multiply_32_19 (mux inputs: 1)
  %460 = mul nsw i32 %accumc.0... (idx: 9) -> main_signed_multiply_32_20 (mux inputs: 1)
  %502 = mul nsw i32 %accumd.1... (idx: 28) -> main_signed_multiply_32_21 (mux inputs: 1)
  %484 = mul nsw i32 %accumc.6... (idx: 20) -> main_signed_multiply_32_22 (mux inputs: 1)
  %474 = mul nsw i32 %accumd.3... (idx: 15) -> main_signed_multiply_32_23 (mux inputs: 1)
  %313 = mul nsw i32 %312, %de... (idx: 0) -> main_signed_multiply_32_24 (mux inputs: 2)
  %492 = mul nsw i32 %accumc.8... (idx: 23) -> main_signed_multiply_32_25 (mux inputs: 1)
  %486 = mul nsw i32 %accumd.6... (idx: 21) -> main_signed_multiply_32_26 (mux inputs: 1)
  %409 = mul nsw i32 %408, %de... (idx: 5) -> main_signed_multiply_32_27 (mux inputs: 2)
  %498 = mul nsw i32 %accumd.9... (idx: 26) -> main_signed_multiply_32_28 (mux inputs: 1)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %343 = sub nsw i32 0, %340 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %343 = sub nsw i32 0, %340 can share an output register with another operation already assigned to main_signed_subtract_32_1
  %435 = sub nsw i32 0, %432 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %435 = sub nsw i32 0, %432 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %343 = sub nsw i32 0, %340 (idx: 0)             -125                          -45                           
  %435 = sub nsw i32 0, %432 (idx: 1)             -125                          -45                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %343 = sub nsw i32 0, %340 (idx: 0)             1                             0                             
  %435 = sub nsw i32 0, %432 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %343 = sub nsw i32 0, %340 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 14)
  %435 = sub nsw i32 0, %432 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 6)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %271 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %271 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %272 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %272 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %271 = load i32* getelementp... (idx: 0)        1                             11                            
  %272 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %271 = load i32* getelementp... (idx: 0)        1                             0                             
  %272 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %271 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %272 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %358 = add nsw i32 %355, 192 can share an output register with another operation already assigned to main_signed_add_32_0
  %358 = add nsw i32 %355, 192 can share an output register with another operation already assigned to main_signed_add_32_1
  %358 = add nsw i32 %355, 192 can share an output register with another operation already assigned to main_signed_add_32_2
  %358 = add nsw i32 %355, 192 can share an output register with another operation already assigned to main_signed_add_32_3
  %358 = add nsw i32 %355, 192 can share an output register with another operation already assigned to main_signed_add_32_4
  %358 = add nsw i32 %355, 192 can share an output register with another operation already assigned to main_signed_add_32_5
  %358 = add nsw i32 %355, 192 can share an output register with another operation already assigned to main_signed_add_32_6
  %358 = add nsw i32 %355, 192 can share an output register with another operation already assigned to main_signed_add_32_7
  %358 = add nsw i32 %355, 192 can share an output register with another operation already assigned to main_signed_add_32_17
  %450 = add nsw i32 %447, 192 can share an output register with another operation already assigned to main_signed_add_32_0
  %450 = add nsw i32 %447, 192 can share an output register with another operation already assigned to main_signed_add_32_1
  %450 = add nsw i32 %447, 192 can share an output register with another operation already assigned to main_signed_add_32_2
  %450 = add nsw i32 %447, 192 can share an output register with another operation already assigned to main_signed_add_32_3
  %450 = add nsw i32 %447, 192 can share an output register with another operation already assigned to main_signed_add_32_4
  %450 = add nsw i32 %447, 192 can share an output register with another operation already assigned to main_signed_add_32_5
  %450 = add nsw i32 %447, 192 can share an output register with another operation already assigned to main_signed_add_32_6
  %450 = add nsw i32 %447, 192 can share an output register with another operation already assigned to main_signed_add_32_7
  %450 = add nsw i32 %447, 192 can share an output register with another operation already assigned to main_signed_add_32_17
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep57 = add i32 %gep_int55,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep60 = add i32 %gep_int58,... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %358 = add nsw i32 %355, 192 (idx: 0)           -585                          -334                          -24                           -15                           -14                           -14                           -14                           -94                           -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -124                          -4                            
  %450 = add nsw i32 %447, 192 (idx: 1)           -585                          -334                          -24                           -15                           -14                           -14                           -14                           -94                           -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -124                          -4                            
  %gep57 = add i32 %gep_int55,... (idx: 2)        -590                          -340                          -30                           -20                           -20                           -20                           -20                           -100                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -130                          -10                           
  %gep60 = add i32 %gep_int58,... (idx: 3)        -590                          -340                          -30                           -20                           -20                           -20                           -20                           -100                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -130                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %358 = add nsw i32 %355, 192 (idx
  %450 = add nsw i32 %447, 192 (idx
  %gep57 = add i32 %gep_int55,... (idx
  %gep60 = add i32 %gep_int58,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %358 = add nsw i32 %355, 192 (idx: 0) -> main_signed_add_32_0 (mux inputs: 60)
  %gep57 = add i32 %gep_int55,... (idx: 2) -> main_signed_add_32_1 (mux inputs: 36)
  %450 = add nsw i32 %447, 192 (idx: 1) -> main_signed_add_32_7 (mux inputs: 11)
  %gep60 = add i32 %gep_int58,... (idx: 3) -> main_signed_add_32_17 (mux inputs: 15)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %275 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %275 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %276 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %276 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %275 = load i32* getelementp... (idx: 0)        1                             11                            
  %276 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %275 = load i32* getelementp... (idx: 0)        1                             0                             
  %276 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %275 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %276 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %270 = mul nsw i32 %269, %26... can share an output register with another operation already assigned to main_signed_multiply_32_27
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %270 = mul nsw i32 %269, %26... (idx: 0)        -40                           -20                           -30                           -20                           -310                          -40                           -40                           -90                           -40                           -40                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -18                           -18                           -18                           -18                           -18                           -18                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %270 = mul nsw i32 %269, %26... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %270 = mul nsw i32 %269, %26... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 33)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %279 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %279 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %280 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %280 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %279 = load i32* getelementp... (idx: 0)        1                             11                            
  %280 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %279 = load i32* getelementp... (idx: 0)        1                             0                             
  %280 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %279 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %280 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %273 = mul nsw i32 %272, %27... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %273 = mul nsw i32 %272, %27... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %273 = mul nsw i32 %272, %27... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %273 = mul nsw i32 %272, %27... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %273 = mul nsw i32 %272, %27... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %273 = mul nsw i32 %272, %27... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %273 = mul nsw i32 %272, %27... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %273 = mul nsw i32 %272, %27... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %273 = mul nsw i32 %272, %27... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %273 = mul nsw i32 %272, %27... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %273 = mul nsw i32 %272, %27... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %273 = mul nsw i32 %272, %27... can share an output register with another operation already assigned to main_signed_multiply_32_27
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %273 = mul nsw i32 %272, %27... (idx: 0)        -40                           -20                           -30                           -20                           -330                          -40                           -40                           -90                           -40                           -40                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -18                           -18                           -18                           -18                           -18                           -18                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %273 = mul nsw i32 %272, %27... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %273 = mul nsw i32 %272, %27... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 35)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %283 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %283 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %284 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %284 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %283 = load i32* getelementp... (idx: 0)        1                             11                            
  %284 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %283 = load i32* getelementp... (idx: 0)        1                             0                             
  %284 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %283 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %284 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %274 = add nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_add_32_0
  %274 = add nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_add_32_1
  %274 = add nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_add_32_2
  %274 = add nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_add_32_3
  %274 = add nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_add_32_4
  %274 = add nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_add_32_5
  %274 = add nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_add_32_6
  %274 = add nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_add_32_7
  %274 = add nsw i32 %273, %27... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %274 = add nsw i32 %273, %27... (idx: 0)        -600                          -360                          -30                           -20                           -20                           -20                           -20                           -110                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -150                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %274 = add nsw i32 %273, %27... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %274 = add nsw i32 %273, %27... (idx: 0) -> main_signed_add_32_0 (mux inputs: 62)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %277 = mul nsw i32 %276, %27... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %277 = mul nsw i32 %276, %27... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %277 = mul nsw i32 %276, %27... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %277 = mul nsw i32 %276, %27... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %277 = mul nsw i32 %276, %27... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %277 = mul nsw i32 %276, %27... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %277 = mul nsw i32 %276, %27... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %277 = mul nsw i32 %276, %27... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %277 = mul nsw i32 %276, %27... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %277 = mul nsw i32 %276, %27... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %277 = mul nsw i32 %276, %27... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %277 = mul nsw i32 %276, %27... can share an output register with another operation already assigned to main_signed_multiply_32_27
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %277 = mul nsw i32 %276, %27... (idx: 0)        -40                           -20                           -30                           -20                           -350                          -40                           -40                           -90                           -40                           -40                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -18                           -18                           -18                           -18                           -18                           -18                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %277 = mul nsw i32 %276, %27... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %277 = mul nsw i32 %276, %27... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 37)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %287 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %287 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %288 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %288 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %287 = load i32* getelementp... (idx: 0)        1                             11                            
  %288 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %287 = load i32* getelementp... (idx: 0)        1                             0                             
  %288 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %287 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %288 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %278 = add nsw i32 %274, %27... can share an output register with another operation already assigned to main_signed_add_32_0
  %278 = add nsw i32 %274, %27... can share an output register with another operation already assigned to main_signed_add_32_1
  %278 = add nsw i32 %274, %27... can share an output register with another operation already assigned to main_signed_add_32_2
  %278 = add nsw i32 %274, %27... can share an output register with another operation already assigned to main_signed_add_32_3
  %278 = add nsw i32 %274, %27... can share an output register with another operation already assigned to main_signed_add_32_4
  %278 = add nsw i32 %274, %27... can share an output register with another operation already assigned to main_signed_add_32_5
  %278 = add nsw i32 %274, %27... can share an output register with another operation already assigned to main_signed_add_32_6
  %278 = add nsw i32 %274, %27... can share an output register with another operation already assigned to main_signed_add_32_7
  %278 = add nsw i32 %274, %27... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %278 = add nsw i32 %274, %27... (idx: 0)        -620                          -360                          -30                           -20                           -20                           -20                           -20                           -110                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -150                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %278 = add nsw i32 %274, %27... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %278 = add nsw i32 %274, %27... (idx: 0) -> main_signed_add_32_0 (mux inputs: 64)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %281 = mul nsw i32 %280, %27... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %281 = mul nsw i32 %280, %27... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %281 = mul nsw i32 %280, %27... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %281 = mul nsw i32 %280, %27... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %281 = mul nsw i32 %280, %27... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %281 = mul nsw i32 %280, %27... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %281 = mul nsw i32 %280, %27... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %281 = mul nsw i32 %280, %27... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %281 = mul nsw i32 %280, %27... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %281 = mul nsw i32 %280, %27... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %281 = mul nsw i32 %280, %27... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %281 = mul nsw i32 %280, %27... can share an output register with another operation already assigned to main_signed_multiply_32_27
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %281 = mul nsw i32 %280, %27... (idx: 0)        -40                           -20                           -30                           -20                           -370                          -40                           -40                           -90                           -40                           -40                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -18                           -18                           -18                           -18                           -18                           -18                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %281 = mul nsw i32 %280, %27... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %281 = mul nsw i32 %280, %27... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 39)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %291 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %291 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %292 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %292 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %291 = load i32* getelementp... (idx: 0)        1                             11                            
  %292 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %291 = load i32* getelementp... (idx: 0)        1                             0                             
  %292 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %291 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %292 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %282 = add nsw i32 %278, %28... can share an output register with another operation already assigned to main_signed_add_32_0
  %282 = add nsw i32 %278, %28... can share an output register with another operation already assigned to main_signed_add_32_1
  %282 = add nsw i32 %278, %28... can share an output register with another operation already assigned to main_signed_add_32_2
  %282 = add nsw i32 %278, %28... can share an output register with another operation already assigned to main_signed_add_32_3
  %282 = add nsw i32 %278, %28... can share an output register with another operation already assigned to main_signed_add_32_4
  %282 = add nsw i32 %278, %28... can share an output register with another operation already assigned to main_signed_add_32_5
  %282 = add nsw i32 %278, %28... can share an output register with another operation already assigned to main_signed_add_32_6
  %282 = add nsw i32 %278, %28... can share an output register with another operation already assigned to main_signed_add_32_7
  %282 = add nsw i32 %278, %28... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %282 = add nsw i32 %278, %28... (idx: 0)        -640                          -360                          -30                           -20                           -20                           -20                           -20                           -110                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -150                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %282 = add nsw i32 %278, %28... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %282 = add nsw i32 %278, %28... (idx: 0) -> main_signed_add_32_0 (mux inputs: 66)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %285 = mul nsw i32 %284, %28... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %285 = mul nsw i32 %284, %28... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %285 = mul nsw i32 %284, %28... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %285 = mul nsw i32 %284, %28... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %285 = mul nsw i32 %284, %28... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %285 = mul nsw i32 %284, %28... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %285 = mul nsw i32 %284, %28... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %285 = mul nsw i32 %284, %28... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %285 = mul nsw i32 %284, %28... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %285 = mul nsw i32 %284, %28... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %285 = mul nsw i32 %284, %28... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %285 = mul nsw i32 %284, %28... can share an output register with another operation already assigned to main_signed_multiply_32_27
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %285 = mul nsw i32 %284, %28... (idx: 0)        -40                           -20                           -30                           -20                           -390                          -40                           -40                           -90                           -40                           -40                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -18                           -18                           -18                           -18                           -18                           -18                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %285 = mul nsw i32 %284, %28... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %285 = mul nsw i32 %284, %28... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 41)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %295 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %295 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %296 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %296 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %295 = load i32* getelementp... (idx: 0)        1                             11                            
  %296 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %295 = load i32* getelementp... (idx: 0)        1                             0                             
  %296 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %295 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %296 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %286 = add nsw i32 %282, %28... can share an output register with another operation already assigned to main_signed_add_32_0
  %286 = add nsw i32 %282, %28... can share an output register with another operation already assigned to main_signed_add_32_1
  %286 = add nsw i32 %282, %28... can share an output register with another operation already assigned to main_signed_add_32_2
  %286 = add nsw i32 %282, %28... can share an output register with another operation already assigned to main_signed_add_32_3
  %286 = add nsw i32 %282, %28... can share an output register with another operation already assigned to main_signed_add_32_4
  %286 = add nsw i32 %282, %28... can share an output register with another operation already assigned to main_signed_add_32_5
  %286 = add nsw i32 %282, %28... can share an output register with another operation already assigned to main_signed_add_32_6
  %286 = add nsw i32 %282, %28... can share an output register with another operation already assigned to main_signed_add_32_7
  %286 = add nsw i32 %282, %28... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %286 = add nsw i32 %282, %28... (idx: 0)        -660                          -360                          -30                           -20                           -20                           -20                           -20                           -110                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -150                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %286 = add nsw i32 %282, %28... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %286 = add nsw i32 %282, %28... (idx: 0) -> main_signed_add_32_0 (mux inputs: 68)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %289 = mul nsw i32 %288, %28... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %289 = mul nsw i32 %288, %28... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %289 = mul nsw i32 %288, %28... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %289 = mul nsw i32 %288, %28... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %289 = mul nsw i32 %288, %28... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %289 = mul nsw i32 %288, %28... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %289 = mul nsw i32 %288, %28... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %289 = mul nsw i32 %288, %28... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %289 = mul nsw i32 %288, %28... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %289 = mul nsw i32 %288, %28... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %289 = mul nsw i32 %288, %28... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %289 = mul nsw i32 %288, %28... can share an output register with another operation already assigned to main_signed_multiply_32_27
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %289 = mul nsw i32 %288, %28... (idx: 0)        -40                           -20                           -30                           -20                           -410                          -40                           -40                           -90                           -40                           -40                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -18                           -18                           -18                           -18                           -18                           -18                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %289 = mul nsw i32 %288, %28... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %289 = mul nsw i32 %288, %28... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 43)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %299 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %299 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %300 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %300 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %299 = load i32* getelementp... (idx: 0)        1                             11                            
  %300 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %299 = load i32* getelementp... (idx: 0)        1                             0                             
  %300 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %299 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %300 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %290 = add nsw i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_0
  %290 = add nsw i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_1
  %290 = add nsw i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_2
  %290 = add nsw i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_3
  %290 = add nsw i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_4
  %290 = add nsw i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_5
  %290 = add nsw i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_6
  %290 = add nsw i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_7
  %290 = add nsw i32 %286, %28... can share an output register with another operation already assigned to main_signed_add_32_17
  %293 = add i32 %290, %291 can share an output register with another operation already assigned to main_signed_add_32_0
  %293 = add i32 %290, %291 can share an output register with another operation already assigned to main_signed_add_32_1
  %293 = add i32 %290, %291 can share an output register with another operation already assigned to main_signed_add_32_2
  %293 = add i32 %290, %291 can share an output register with another operation already assigned to main_signed_add_32_3
  %293 = add i32 %290, %291 can share an output register with another operation already assigned to main_signed_add_32_4
  %293 = add i32 %290, %291 can share an output register with another operation already assigned to main_signed_add_32_5
  %293 = add i32 %290, %291 can share an output register with another operation already assigned to main_signed_add_32_6
  %293 = add i32 %290, %291 can share an output register with another operation already assigned to main_signed_add_32_7
  %293 = add i32 %290, %291 can share an output register with another operation already assigned to main_signed_add_32_17
  %294 = add i32 %293, %292 can share an output register with another operation already assigned to main_signed_add_32_0
  %294 = add i32 %293, %292 can share an output register with another operation already assigned to main_signed_add_32_1
  %294 = add i32 %293, %292 can share an output register with another operation already assigned to main_signed_add_32_2
  %294 = add i32 %293, %292 can share an output register with another operation already assigned to main_signed_add_32_3
  %294 = add i32 %293, %292 can share an output register with another operation already assigned to main_signed_add_32_4
  %294 = add i32 %293, %292 can share an output register with another operation already assigned to main_signed_add_32_5
  %294 = add i32 %293, %292 can share an output register with another operation already assigned to main_signed_add_32_6
  %294 = add i32 %293, %292 can share an output register with another operation already assigned to main_signed_add_32_7
  %294 = add i32 %293, %292 can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %290 = add nsw i32 %286, %28... (idx: 0)        -680                          -360                          -30                           -20                           -20                           -20                           -20                           -110                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -150                          -10                           
  %293 = add i32 %290, %291 (idx: 1)              -680                          -360                          -30                           -20                           -19                           -19                           -20                           -109                          -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -150                          -9                            
  %294 = add i32 %293, %292 (idx: 2)              -680                          -360                          -30                           -20                           -19                           -19                           -20                           -109                          -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -150                          -9                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %290 = add nsw i32 %286, %28... (idx
  %293 = add i32 %290, %291 (idx
  %294 = add i32 %293, %292 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %290 = add nsw i32 %286, %28... (idx: 0) -> main_signed_add_32_0 (mux inputs: 70)
  %293 = add i32 %290, %291 (idx: 1) -> main_signed_add_32_1 (mux inputs: 38)
  %294 = add i32 %293, %292 (idx: 2) -> main_signed_add_32_17 (mux inputs: 17)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %303 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %303 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %304 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %304 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %303 = load i32* getelementp... (idx: 0)        1                             11                            
  %304 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %303 = load i32* getelementp... (idx: 0)        1                             0                             
  %304 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %303 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %304 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %297 = add i32 %294, %295 can share an output register with another operation already assigned to main_signed_add_32_0
  %297 = add i32 %294, %295 can share an output register with another operation already assigned to main_signed_add_32_1
  %297 = add i32 %294, %295 can share an output register with another operation already assigned to main_signed_add_32_2
  %297 = add i32 %294, %295 can share an output register with another operation already assigned to main_signed_add_32_3
  %297 = add i32 %294, %295 can share an output register with another operation already assigned to main_signed_add_32_4
  %297 = add i32 %294, %295 can share an output register with another operation already assigned to main_signed_add_32_5
  %297 = add i32 %294, %295 can share an output register with another operation already assigned to main_signed_add_32_6
  %297 = add i32 %294, %295 can share an output register with another operation already assigned to main_signed_add_32_7
  %297 = add i32 %294, %295 can share an output register with another operation already assigned to main_signed_add_32_17
  %298 = add i32 %297, %296 can share an output register with another operation already assigned to main_signed_add_32_0
  %298 = add i32 %297, %296 can share an output register with another operation already assigned to main_signed_add_32_1
  %298 = add i32 %297, %296 can share an output register with another operation already assigned to main_signed_add_32_2
  %298 = add i32 %297, %296 can share an output register with another operation already assigned to main_signed_add_32_3
  %298 = add i32 %297, %296 can share an output register with another operation already assigned to main_signed_add_32_4
  %298 = add i32 %297, %296 can share an output register with another operation already assigned to main_signed_add_32_5
  %298 = add i32 %297, %296 can share an output register with another operation already assigned to main_signed_add_32_6
  %298 = add i32 %297, %296 can share an output register with another operation already assigned to main_signed_add_32_7
  %298 = add i32 %297, %296 can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %297 = add i32 %294, %295 (idx: 0)              -700                          -380                          -30                           -20                           -19                           -19                           -20                           -109                          -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -170                          -9                            
  %298 = add i32 %297, %296 (idx: 1)              -700                          -380                          -30                           -20                           -19                           -19                           -20                           -109                          -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -170                          -9                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %297 = add i32 %294, %295 (idx
  %298 = add i32 %297, %296 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %297 = add i32 %294, %295 (idx: 0) -> main_signed_add_32_0 (mux inputs: 72)
  %298 = add i32 %297, %296 (idx: 1) -> main_signed_add_32_1 (mux inputs: 40)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %307 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %307 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %308 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %308 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %307 = load i32* getelementp... (idx: 0)        1                             11                            
  %308 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %307 = load i32* getelementp... (idx: 0)        1                             0                             
  %308 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %307 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %308 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %301 = add i32 %298, %299 can share an output register with another operation already assigned to main_signed_add_32_0
  %301 = add i32 %298, %299 can share an output register with another operation already assigned to main_signed_add_32_1
  %301 = add i32 %298, %299 can share an output register with another operation already assigned to main_signed_add_32_2
  %301 = add i32 %298, %299 can share an output register with another operation already assigned to main_signed_add_32_3
  %301 = add i32 %298, %299 can share an output register with another operation already assigned to main_signed_add_32_4
  %301 = add i32 %298, %299 can share an output register with another operation already assigned to main_signed_add_32_5
  %301 = add i32 %298, %299 can share an output register with another operation already assigned to main_signed_add_32_6
  %301 = add i32 %298, %299 can share an output register with another operation already assigned to main_signed_add_32_7
  %301 = add i32 %298, %299 can share an output register with another operation already assigned to main_signed_add_32_17
  %302 = add i32 %301, %300 can share an output register with another operation already assigned to main_signed_add_32_0
  %302 = add i32 %301, %300 can share an output register with another operation already assigned to main_signed_add_32_1
  %302 = add i32 %301, %300 can share an output register with another operation already assigned to main_signed_add_32_2
  %302 = add i32 %301, %300 can share an output register with another operation already assigned to main_signed_add_32_3
  %302 = add i32 %301, %300 can share an output register with another operation already assigned to main_signed_add_32_4
  %302 = add i32 %301, %300 can share an output register with another operation already assigned to main_signed_add_32_5
  %302 = add i32 %301, %300 can share an output register with another operation already assigned to main_signed_add_32_6
  %302 = add i32 %301, %300 can share an output register with another operation already assigned to main_signed_add_32_7
  %302 = add i32 %301, %300 can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %301 = add i32 %298, %299 (idx: 0)              -720                          -400                          -30                           -20                           -19                           -19                           -20                           -109                          -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -170                          -9                            
  %302 = add i32 %301, %300 (idx: 1)              -720                          -400                          -30                           -20                           -19                           -19                           -20                           -109                          -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -170                          -9                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %301 = add i32 %298, %299 (idx
  %302 = add i32 %301, %300 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %301 = add i32 %298, %299 (idx: 0) -> main_signed_add_32_0 (mux inputs: 74)
  %302 = add i32 %301, %300 (idx: 1) -> main_signed_add_32_1 (mux inputs: 42)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %305 = add i32 %302, %303 can share an output register with another operation already assigned to main_signed_add_32_0
  %305 = add i32 %302, %303 can share an output register with another operation already assigned to main_signed_add_32_1
  %305 = add i32 %302, %303 can share an output register with another operation already assigned to main_signed_add_32_2
  %305 = add i32 %302, %303 can share an output register with another operation already assigned to main_signed_add_32_3
  %305 = add i32 %302, %303 can share an output register with another operation already assigned to main_signed_add_32_4
  %305 = add i32 %302, %303 can share an output register with another operation already assigned to main_signed_add_32_5
  %305 = add i32 %302, %303 can share an output register with another operation already assigned to main_signed_add_32_6
  %305 = add i32 %302, %303 can share an output register with another operation already assigned to main_signed_add_32_7
  %305 = add i32 %302, %303 can share an output register with another operation already assigned to main_signed_add_32_17
  %306 = add i32 %305, %304 can share an output register with another operation already assigned to main_signed_add_32_0
  %306 = add i32 %305, %304 can share an output register with another operation already assigned to main_signed_add_32_1
  %306 = add i32 %305, %304 can share an output register with another operation already assigned to main_signed_add_32_2
  %306 = add i32 %305, %304 can share an output register with another operation already assigned to main_signed_add_32_3
  %306 = add i32 %305, %304 can share an output register with another operation already assigned to main_signed_add_32_4
  %306 = add i32 %305, %304 can share an output register with another operation already assigned to main_signed_add_32_5
  %306 = add i32 %305, %304 can share an output register with another operation already assigned to main_signed_add_32_6
  %306 = add i32 %305, %304 can share an output register with another operation already assigned to main_signed_add_32_7
  %306 = add i32 %305, %304 can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %305 = add i32 %302, %303 (idx: 0)              -740                          -420                          -30                           -20                           -19                           -19                           -20                           -109                          -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -170                          -9                            
  %306 = add i32 %305, %304 (idx: 1)              -740                          -420                          -30                           -20                           -19                           -19                           -20                           -109                          -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -170                          -9                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %305 = add i32 %302, %303 (idx: 0)              1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %306 = add i32 %305, %304 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %305 = add i32 %302, %303 (idx: 0) -> main_signed_add_32_0 (mux inputs: 76)
  %306 = add i32 %305, %304 (idx: 1) -> main_signed_add_32_1 (mux inputs: 44)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %309 = add i32 %306, %307 can share an output register with another operation already assigned to main_signed_add_32_0
  %309 = add i32 %306, %307 can share an output register with another operation already assigned to main_signed_add_32_1
  %309 = add i32 %306, %307 can share an output register with another operation already assigned to main_signed_add_32_2
  %309 = add i32 %306, %307 can share an output register with another operation already assigned to main_signed_add_32_3
  %309 = add i32 %306, %307 can share an output register with another operation already assigned to main_signed_add_32_4
  %309 = add i32 %306, %307 can share an output register with another operation already assigned to main_signed_add_32_5
  %309 = add i32 %306, %307 can share an output register with another operation already assigned to main_signed_add_32_6
  %309 = add i32 %306, %307 can share an output register with another operation already assigned to main_signed_add_32_7
  %309 = add i32 %306, %307 can share an output register with another operation already assigned to main_signed_add_32_17
  %310 = add i32 %309, %308 can share an output register with another operation already assigned to main_signed_add_32_0
  %310 = add i32 %309, %308 can share an output register with another operation already assigned to main_signed_add_32_1
  %310 = add i32 %309, %308 can share an output register with another operation already assigned to main_signed_add_32_2
  %310 = add i32 %309, %308 can share an output register with another operation already assigned to main_signed_add_32_3
  %310 = add i32 %309, %308 can share an output register with another operation already assigned to main_signed_add_32_4
  %310 = add i32 %309, %308 can share an output register with another operation already assigned to main_signed_add_32_5
  %310 = add i32 %309, %308 can share an output register with another operation already assigned to main_signed_add_32_6
  %310 = add i32 %309, %308 can share an output register with another operation already assigned to main_signed_add_32_7
  %310 = add i32 %309, %308 can share an output register with another operation already assigned to main_signed_add_32_17
  %315 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_0
  %315 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_1
  %315 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_2
  %315 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_3
  %315 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_4
  %315 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_5
  %315 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_6
  %315 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_7
  %315 = add nsw i32 %314, %31... can share an output register with another operation already assigned to main_signed_add_32_17
  %323 = add nsw i32 %322, %31... can share an output register with another operation already assigned to main_signed_add_32_0
  %323 = add nsw i32 %322, %31... can share an output register with another operation already assigned to main_signed_add_32_1
  %323 = add nsw i32 %322, %31... can share an output register with another operation already assigned to main_signed_add_32_2
  %323 = add nsw i32 %322, %31... can share an output register with another operation already assigned to main_signed_add_32_3
  %323 = add nsw i32 %322, %31... can share an output register with another operation already assigned to main_signed_add_32_4
  %323 = add nsw i32 %322, %31... can share an output register with another operation already assigned to main_signed_add_32_5
  %323 = add nsw i32 %322, %31... can share an output register with another operation already assigned to main_signed_add_32_6
  %323 = add nsw i32 %322, %31... can share an output register with another operation already assigned to main_signed_add_32_7
  %323 = add nsw i32 %322, %31... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %309 = add i32 %306, %307 (idx: 0)              -760                          -440                          -30                           -20                           -19                           -19                           -20                           -109                          -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -170                          -9                            
  %310 = add i32 %309, %308 (idx: 1)              -760                          -440                          -30                           -20                           -19                           -19                           -20                           -109                          -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -170                          -9                            
  %315 = add nsw i32 %314, %31... (idx: 2)        -760                          -440                          -30                           -20                           -20                           -20                           -20                           -110                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -170                          -10                           
  %323 = add nsw i32 %322, %31... (idx: 3)        -760                          -440                          -30                           -20                           -20                           -20                           -20                           -110                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -170                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %309 = add i32 %306, %307 (idx
  %310 = add i32 %309, %308 (idx
  %315 = add nsw i32 %314, %31... (idx
  %323 = add nsw i32 %322, %31... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %309 = add i32 %306, %307 (idx: 0) -> main_signed_add_32_0 (mux inputs: 78)
  %310 = add i32 %309, %308 (idx: 1) -> main_signed_add_32_1 (mux inputs: 46)
  %323 = add nsw i32 %322, %31... (idx: 3) -> main_signed_add_32_7 (mux inputs: 13)
  %315 = add nsw i32 %314, %31... (idx: 2) -> main_signed_add_32_17 (mux inputs: 19)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep36 = add i32 %gep_int34,... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep36 = add i32 %gep_int34,... (idx: 0)        -780                          -460                          -30                           -20                           -20                           -20                           -20                           -130                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -190                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep36 = add i32 %gep_int34,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep36 = add i32 %gep_int34,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 80)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: qq4_code4_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %318 = load i32* %317, align... can share an output register with another operation already assigned to main_qq4_code4_table_local_mem_dual_port_0
                                                  main_qq4_code4_table_local_mem_dual_port_0
  %318 = load i32* %317, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_qq4_code4_table_local_mem_dual_port_0
  %318 = load i32* %317, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %318 = load i32* %317, align... (idx: 0) -> main_qq4_code4_table_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep39 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep42 = add i32 %gep_int40,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep48 = add i32 %gep_int46,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep51 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep39 = add i32 %gep_int37,... (idx: 0)        -800                          -460                          -30                           -20                           -20                           -20                           -20                           -130                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -190                          -10                           
  %gep42 = add i32 %gep_int40,... (idx: 1)        -800                          -460                          -30                           -20                           -20                           -20                           -20                           -130                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -190                          -10                           
  %gep48 = add i32 %gep_int46,... (idx: 2)        -800                          -460                          -30                           -20                           -20                           -20                           -20                           -130                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -190                          -10                           
  %gep51 = add i32 %gep_int49,... (idx: 3)        -800                          -460                          -30                           -20                           -20                           -20                           -20                           -130                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -190                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep39 = add i32 %gep_int37,... (idx
  %gep42 = add i32 %gep_int40,... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep48 = add i32 %gep_int46,... (idx
  %gep51 = add i32 %gep_int49,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep39 = add i32 %gep_int37,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 82)
  %gep42 = add i32 %gep_int40,... (idx: 1) -> main_signed_add_32_1 (mux inputs: 48)
  %gep51 = add i32 %gep_int49,... (idx: 3) -> main_signed_add_32_7 (mux inputs: 15)
  %gep48 = add i32 %gep_int46,... (idx: 2) -> main_signed_add_32_17 (mux inputs: 21)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: wl_code_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %327 = load i32* %326, align... can share an output register with another operation already assigned to main_wl_code_table_local_mem_dual_port_0
                                                  main_wl_code_table_local_mem_dual_port_0
  %327 = load i32* %326, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_wl_code_table_local_mem_dual_port_0
  %327 = load i32* %326, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %327 = load i32* %326, align... (idx: 0) -> main_wl_code_table_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %328 = add nsw i32 %325, %32... can share an output register with another operation already assigned to main_signed_add_32_0
  %328 = add nsw i32 %325, %32... can share an output register with another operation already assigned to main_signed_add_32_1
  %328 = add nsw i32 %325, %32... can share an output register with another operation already assigned to main_signed_add_32_2
  %328 = add nsw i32 %325, %32... can share an output register with another operation already assigned to main_signed_add_32_3
  %328 = add nsw i32 %325, %32... can share an output register with another operation already assigned to main_signed_add_32_4
  %328 = add nsw i32 %325, %32... can share an output register with another operation already assigned to main_signed_add_32_5
  %328 = add nsw i32 %325, %32... can share an output register with another operation already assigned to main_signed_add_32_6
  %328 = add nsw i32 %325, %32... can share an output register with another operation already assigned to main_signed_add_32_7
  %328 = add nsw i32 %325, %32... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %328 = add nsw i32 %325, %32... (idx: 0)        -820                          -480                          -30                           -20                           -19                           -19                           -20                           -149                          -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -210                          -9                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %328 = add nsw i32 %325, %32... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %328 = add nsw i32 %325, %32... (idx: 0) -> main_signed_add_32_0 (mux inputs: 84)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %319 = mul nsw i32 %318, %de... hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %319 = mul nsw i32 %318, %de... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %319 = mul nsw i32 %318, %de... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %319 = mul nsw i32 %318, %de... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %319 = mul nsw i32 %318, %de... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %319 = mul nsw i32 %318, %de... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %319 = mul nsw i32 %318, %de... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %319 = mul nsw i32 %318, %de... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %319 = mul nsw i32 %318, %de... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %319 = mul nsw i32 %318, %de... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %319 = mul nsw i32 %318, %de... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %319 = mul nsw i32 %318, %de... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %319 = mul nsw i32 %318, %de... can share an output register with another operation already assigned to main_signed_multiply_32_27
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %319 = mul nsw i32 %318, %de... (idx: 0)        -35                           -19                           -30                           -19                           -429                          -39                           -39                           -89                           -39                           -39                           -19                           -19                           -19                           -19                           -19                           -19                           -19                           -19                           -19                           -19                           -19                           -19                           -18                           -18                           -18                           -18                           -18                           -18                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %319 = mul nsw i32 %318, %de... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %319 = mul nsw i32 %318, %de... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 45)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %336 = sub i32 9, %333 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %336 = sub i32 9, %333 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %336 = sub i32 9, %333 (idx: 0)                 -135                          -54                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %336 = sub i32 9, %333 (idx: 0)                 1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %336 = sub i32 9, %333 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 15)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %339 = add nsw i32 %311, %32... hey can share an input with another operation already assigned to main_signed_add_32_17
  %363 = add nsw i32 %320, %31... hey can share an input with another operation already assigned to main_signed_add_32_7
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %339 = add nsw i32 %311, %32... (idx: 0)        -850                          -490                          -40                           -30                           -30                           -30                           -30                           -160                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -215                          -10                           
  %363 = add nsw i32 %320, %31... (idx: 1)        -850                          -490                          -40                           -30                           -30                           -30                           -30                           -155                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -220                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %339 = add nsw i32 %311, %32... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %363 = add nsw i32 %320, %31... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %339 = add nsw i32 %311, %32... (idx: 0) -> main_signed_add_32_0 (mux inputs: 86)
  %363 = add nsw i32 %320, %31... (idx: 1) -> main_signed_add_32_1 (mux inputs: 50)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %341 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %341 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %341 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %341 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %341 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %341 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %341 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %341 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %341 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %341 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %341 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %341 = mul nsw i32 %dec_plt1... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %345 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %345 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %345 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %345 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %345 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %345 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %345 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %345 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %345 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %345 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %345 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %345 = mul nsw i32 %dec_plt2... can share an output register with another operation already assigned to main_signed_multiply_32_27
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %341 = mul nsw i32 %dec_plt1... (idx: 0)        -40                           -20                           -30                           -20                           -450                          -40                           -40                           -90                           -40                           -40                           -20                           -19                           -20                           -19                           -20                           -20                           -19                           -20                           -19                           -20                           -19                           -20                           -20                           -20                           -19                           -19                           -20                           -19                           -20                           
  %345 = mul nsw i32 %dec_plt2... (idx: 1)        -40                           -20                           -30                           -20                           -450                          -40                           -40                           -90                           -40                           -40                           -20                           -19                           -20                           -19                           -20                           -20                           -19                           -20                           -19                           -20                           -19                           -20                           -20                           -20                           -19                           -19                           -20                           -19                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %341 = mul nsw i32 %dec_plt1... (idx
  %345 = mul nsw i32 %dec_plt2... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %341 = mul nsw i32 %dec_plt1... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 47)
  %345 = mul nsw i32 %dec_plt2... (idx: 1) -> main_signed_multiply_32_7 (mux inputs: 11)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: ilb_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %335 = load i32* %334, align... can share an output register with another operation already assigned to main_ilb_table_local_mem_dual_port_0
                                                  main_ilb_table_local_mem_dual_port_0
  %335 = load i32* %334, align... (idx: 0)        85                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_ilb_table_local_mem_dual_port_0
  %335 = load i32* %334, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %335 = load i32* %334, align... (idx: 0) -> main_ilb_table_local_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep45 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_17
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_0
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_1
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_2
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_3
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_4
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_5
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_6
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_7
  %wd4.0.i7.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_17
  %351 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_0
  %351 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_1
  %351 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_2
  %351 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_3
  %351 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_4
  %351 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_5
  %351 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_6
  %351 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_7
  %351 = add nsw i32 %wd4.0.i7... can share an output register with another operation already assigned to main_signed_add_32_17
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_0
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_1
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_2
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_3
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_4
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_5
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_6
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_7
  %apl1.0.i3.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep45 = add i32 %gep_int43,... (idx: 0)        -860                          -500                          -30                           -20                           -20                           -20                           -20                           -150                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -210                          -10                           
  %wd4.0.i7.i = add nsw i32 %3... (idx: 1)        -860                          -500                          -30                           -20                           -20                           -20                           -20                           -150                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -210                          -10                           
  %351 = add nsw i32 %wd4.0.i7... (idx: 2)        -860                          -500                          -30                           -20                           -20                           -20                           -20                           -150                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -210                          -10                           
  %apl1.0.i3.i = add nsw i32 %... (idx: 3)        -860                          -500                          -30                           -20                           -20                           -20                           -20                           -150                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -210                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep45 = add i32 %gep_int43,... (idx
  %wd4.0.i7.i = add nsw i32 %3... (idx
  %351 = add nsw i32 %wd4.0.i7... (idx
  %apl1.0.i3.i = add nsw i32 %... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep45 = add i32 %gep_int43,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 88)
  %wd4.0.i7.i = add nsw i32 %3... (idx: 1) -> main_signed_add_32_1 (mux inputs: 52)
  %apl1.0.i3.i = add nsw i32 %... (idx: 3) -> main_signed_add_32_7 (mux inputs: 17)
  %351 = add nsw i32 %wd4.0.i7... (idx: 2) -> main_signed_add_32_17 (mux inputs: 23)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %359 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_0
  %359 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_1
  %361 = sub nsw i32 0, %359 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %361 = sub nsw i32 0, %359 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %359 = sub nsw i32 15360, %.... (idx: 0)        -145                          -54                           
  %361 = sub nsw i32 0, %359 (idx: 1)             -145                          -55                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %359 = sub nsw i32 15360, %.... (idx: 0)        1                             0                             
  %361 = sub nsw i32 0, %359 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %359 = sub nsw i32 15360, %.... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 16)
  %361 = sub nsw i32 0, %359 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 7)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %364 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %364 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %365 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %365 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %364 = load i32* getelementp... (idx: 0)        1                             11                            
  %365 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %364 = load i32* getelementp... (idx: 0)        1                             0                             
  %365 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %364 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %365 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: qq2_code2_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %413 = load i32* %412, align... can share an output register with another operation already assigned to main_qq2_code2_table_local_mem_dual_port_0
                                                  main_qq2_code2_table_local_mem_dual_port_0
  %413 = load i32* %412, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_qq2_code2_table_local_mem_dual_port_0
  %413 = load i32* %412, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %413 = load i32* %412, align... (idx: 0) -> main_qq2_code2_table_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: wh_code_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %419 = load i32* %418, align... can share an output register with another operation already assigned to main_wh_code_table_local_mem_dual_port_0
                                                  main_wh_code_table_local_mem_dual_port_0
  %419 = load i32* %418, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_wh_code_table_local_mem_dual_port_0
  %419 = load i32* %418, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %419 = load i32* %418, align... (idx: 0) -> main_wh_code_table_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %367 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %367 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %368 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %368 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %367 = load i32* getelementp... (idx: 0)        1                             11                            
  %368 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %367 = load i32* getelementp... (idx: 0)        1                             0                             
  %368 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %367 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %368 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %420 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_0
  %420 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_1
  %420 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_2
  %420 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_3
  %420 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_4
  %420 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_5
  %420 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_6
  %420 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_7
  %420 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %420 = add nsw i32 %417, %41... (idx: 0)        -880                          -520                          -30                           -20                           -19                           -19                           -20                           -169                          -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -230                          -9                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %420 = add nsw i32 %417, %41... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %420 = add nsw i32 %417, %41... (idx: 0) -> main_signed_add_32_0 (mux inputs: 90)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %414 = mul nsw i32 %413, %de... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %414 = mul nsw i32 %413, %de... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %414 = mul nsw i32 %413, %de... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %414 = mul nsw i32 %413, %de... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %414 = mul nsw i32 %413, %de... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %414 = mul nsw i32 %413, %de... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %414 = mul nsw i32 %413, %de... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %414 = mul nsw i32 %413, %de... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %414 = mul nsw i32 %413, %de... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %414 = mul nsw i32 %413, %de... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %414 = mul nsw i32 %413, %de... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %414 = mul nsw i32 %413, %de... can share an output register with another operation already assigned to main_signed_multiply_32_27
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %414 = mul nsw i32 %413, %de... (idx: 0)        -40                           -19                           -29                           -19                           -469                          -40                           -39                           -109                          -39                           -39                           -19                           -19                           -19                           -19                           -19                           -19                           -19                           -19                           -19                           -19                           -19                           -19                           -18                           -18                           -18                           -18                           -18                           -18                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %414 = mul nsw i32 %413, %de... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %414 = mul nsw i32 %413, %de... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 49)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %428 = sub i32 11, %425 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %428 = sub i32 11, %425 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %428 = sub i32 11, %425 (idx: 0)                -155                          -64                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %428 = sub i32 11, %425 (idx: 0)                1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %428 = sub i32 11, %425 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 17)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %371 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %371 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %372 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %372 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %371 = load i32* getelementp... (idx: 0)        1                             11                            
  %372 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %371 = load i32* getelementp... (idx: 0)        1                             0                             
  %372 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %371 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %372 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %366 = mul nsw i32 %365, %36... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %366 = mul nsw i32 %365, %36... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %366 = mul nsw i32 %365, %36... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %366 = mul nsw i32 %365, %36... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %366 = mul nsw i32 %365, %36... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %366 = mul nsw i32 %365, %36... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %366 = mul nsw i32 %365, %36... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %366 = mul nsw i32 %365, %36... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %366 = mul nsw i32 %365, %36... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %366 = mul nsw i32 %365, %36... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %366 = mul nsw i32 %365, %36... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %366 = mul nsw i32 %365, %36... can share an output register with another operation already assigned to main_signed_multiply_32_27
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %366 = mul nsw i32 %365, %36... (idx: 0)        -40                           -20                           -30                           -20                           -490                          -40                           -40                           -110                          -40                           -40                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -18                           -18                           -18                           -18                           -18                           -18                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %366 = mul nsw i32 %365, %36... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %366 = mul nsw i32 %365, %36... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 51)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: ilb_table_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %427 = load i32* %426, align... can share an output register with another operation already assigned to main_ilb_table_local_mem_dual_port_0
                                                  main_ilb_table_local_mem_dual_port_0
  %427 = load i32* %426, align... (idx: 0)        75                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_ilb_table_local_mem_dual_port_0
  %427 = load i32* %426, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %427 = load i32* %426, align... (idx: 0) -> main_ilb_table_local_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %375 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %375 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %376 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %376 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %375 = load i32* getelementp... (idx: 0)        1                             11                            
  %376 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %375 = load i32* getelementp... (idx: 0)        1                             0                             
  %376 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %375 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %376 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep54 = add i32 %gep_int52,... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep54 = add i32 %gep_int52,... (idx: 0)        -900                          -520                          -30                           -20                           -20                           -20                           -20                           -170                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -230                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep54 = add i32 %gep_int52,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep54 = add i32 %gep_int52,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 92)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %369 = mul nsw i32 %368, %36... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %369 = mul nsw i32 %368, %36... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %369 = mul nsw i32 %368, %36... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %369 = mul nsw i32 %368, %36... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %369 = mul nsw i32 %368, %36... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %369 = mul nsw i32 %368, %36... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %369 = mul nsw i32 %368, %36... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %369 = mul nsw i32 %368, %36... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %369 = mul nsw i32 %368, %36... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %369 = mul nsw i32 %368, %36... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %369 = mul nsw i32 %368, %36... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %369 = mul nsw i32 %368, %36... can share an output register with another operation already assigned to main_signed_multiply_32_27
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %369 = mul nsw i32 %368, %36... (idx: 0)        -40                           -20                           -30                           -20                           -510                          -40                           -40                           -110                          -40                           -40                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -18                           -18                           -18                           -18                           -18                           -18                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %369 = mul nsw i32 %368, %36... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %369 = mul nsw i32 %368, %36... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 53)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %379 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %379 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %380 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %380 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %379 = load i32* getelementp... (idx: 0)        1                             11                            
  %380 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %379 = load i32* getelementp... (idx: 0)        1                             0                             
  %380 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %379 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %380 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %370 = add nsw i32 %369, %36... can share an output register with another operation already assigned to main_signed_add_32_0
  %370 = add nsw i32 %369, %36... can share an output register with another operation already assigned to main_signed_add_32_1
  %370 = add nsw i32 %369, %36... can share an output register with another operation already assigned to main_signed_add_32_2
  %370 = add nsw i32 %369, %36... can share an output register with another operation already assigned to main_signed_add_32_3
  %370 = add nsw i32 %369, %36... can share an output register with another operation already assigned to main_signed_add_32_4
  %370 = add nsw i32 %369, %36... can share an output register with another operation already assigned to main_signed_add_32_5
  %370 = add nsw i32 %369, %36... can share an output register with another operation already assigned to main_signed_add_32_6
  %370 = add nsw i32 %369, %36... can share an output register with another operation already assigned to main_signed_add_32_7
  %370 = add nsw i32 %369, %36... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %370 = add nsw i32 %369, %36... (idx: 0)        -920                          -520                          -30                           -20                           -20                           -20                           -20                           -170                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -230                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %370 = add nsw i32 %369, %36... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %370 = add nsw i32 %369, %36... (idx: 0) -> main_signed_add_32_0 (mux inputs: 94)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %373 = mul nsw i32 %372, %37... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %373 = mul nsw i32 %372, %37... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %373 = mul nsw i32 %372, %37... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %373 = mul nsw i32 %372, %37... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %373 = mul nsw i32 %372, %37... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %373 = mul nsw i32 %372, %37... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %373 = mul nsw i32 %372, %37... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %373 = mul nsw i32 %372, %37... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %373 = mul nsw i32 %372, %37... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %373 = mul nsw i32 %372, %37... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %373 = mul nsw i32 %372, %37... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %373 = mul nsw i32 %372, %37... can share an output register with another operation already assigned to main_signed_multiply_32_27
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %373 = mul nsw i32 %372, %37... (idx: 0)        -40                           -20                           -30                           -20                           -530                          -40                           -40                           -110                          -40                           -40                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -18                           -18                           -18                           -18                           -18                           -18                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %373 = mul nsw i32 %372, %37... (idx: 0)        0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %373 = mul nsw i32 %372, %37... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 55)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %383 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %383 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %384 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %384 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %383 = load i32* getelementp... (idx: 0)        1                             11                            
  %384 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %383 = load i32* getelementp... (idx: 0)        1                             0                             
  %384 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %383 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %384 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %374 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_0
  %374 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_1
  %374 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_2
  %374 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_3
  %374 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_4
  %374 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_5
  %374 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_6
  %374 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_7
  %374 = add nsw i32 %370, %37... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %374 = add nsw i32 %370, %37... (idx: 0)        -940                          -520                          -30                           -20                           -20                           -20                           -20                           -170                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -230                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %374 = add nsw i32 %370, %37... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %374 = add nsw i32 %370, %37... (idx: 0) -> main_signed_add_32_0 (mux inputs: 96)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %377 = mul nsw i32 %376, %37... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %377 = mul nsw i32 %376, %37... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %377 = mul nsw i32 %376, %37... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %377 = mul nsw i32 %376, %37... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %377 = mul nsw i32 %376, %37... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %377 = mul nsw i32 %376, %37... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %377 = mul nsw i32 %376, %37... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %377 = mul nsw i32 %376, %37... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %377 = mul nsw i32 %376, %37... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %377 = mul nsw i32 %376, %37... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %377 = mul nsw i32 %376, %37... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %377 = mul nsw i32 %376, %37... can share an output register with another operation already assigned to main_signed_multiply_32_27
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %377 = mul nsw i32 %376, %37... (idx: 0)        -40                           -20                           -30                           -20                           -550                          -40                           -40                           -110                          -40                           -40                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -18                           -18                           -18                           -18                           -18                           -18                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %377 = mul nsw i32 %376, %37... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %377 = mul nsw i32 %376, %37... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 57)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %387 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %387 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %388 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %388 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %387 = load i32* getelementp... (idx: 0)        1                             11                            
  %388 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %387 = load i32* getelementp... (idx: 0)        1                             0                             
  %388 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %387 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %388 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %378 = add nsw i32 %374, %37... can share an output register with another operation already assigned to main_signed_add_32_0
  %378 = add nsw i32 %374, %37... can share an output register with another operation already assigned to main_signed_add_32_1
  %378 = add nsw i32 %374, %37... can share an output register with another operation already assigned to main_signed_add_32_2
  %378 = add nsw i32 %374, %37... can share an output register with another operation already assigned to main_signed_add_32_3
  %378 = add nsw i32 %374, %37... can share an output register with another operation already assigned to main_signed_add_32_4
  %378 = add nsw i32 %374, %37... can share an output register with another operation already assigned to main_signed_add_32_5
  %378 = add nsw i32 %374, %37... can share an output register with another operation already assigned to main_signed_add_32_6
  %378 = add nsw i32 %374, %37... can share an output register with another operation already assigned to main_signed_add_32_7
  %378 = add nsw i32 %374, %37... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %378 = add nsw i32 %374, %37... (idx: 0)        -960                          -520                          -30                           -20                           -20                           -20                           -20                           -170                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -230                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %378 = add nsw i32 %374, %37... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %378 = add nsw i32 %374, %37... (idx: 0) -> main_signed_add_32_0 (mux inputs: 98)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %381 = mul nsw i32 %380, %37... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %381 = mul nsw i32 %380, %37... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %381 = mul nsw i32 %380, %37... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %381 = mul nsw i32 %380, %37... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %381 = mul nsw i32 %380, %37... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %381 = mul nsw i32 %380, %37... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %381 = mul nsw i32 %380, %37... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %381 = mul nsw i32 %380, %37... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %381 = mul nsw i32 %380, %37... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %381 = mul nsw i32 %380, %37... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %381 = mul nsw i32 %380, %37... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %381 = mul nsw i32 %380, %37... can share an output register with another operation already assigned to main_signed_multiply_32_27
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %381 = mul nsw i32 %380, %37... (idx: 0)        -40                           -20                           -30                           -20                           -570                          -40                           -40                           -110                          -40                           -40                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -18                           -18                           -18                           -18                           -18                           -18                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %381 = mul nsw i32 %380, %37... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %381 = mul nsw i32 %380, %37... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 59)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %391 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %391 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %392 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %392 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %391 = load i32* getelementp... (idx: 0)        1                             11                            
  %392 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %391 = load i32* getelementp... (idx: 0)        1                             0                             
  %392 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %391 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %392 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %382 = add nsw i32 %378, %38... can share an output register with another operation already assigned to main_signed_add_32_0
  %382 = add nsw i32 %378, %38... can share an output register with another operation already assigned to main_signed_add_32_1
  %382 = add nsw i32 %378, %38... can share an output register with another operation already assigned to main_signed_add_32_2
  %382 = add nsw i32 %378, %38... can share an output register with another operation already assigned to main_signed_add_32_3
  %382 = add nsw i32 %378, %38... can share an output register with another operation already assigned to main_signed_add_32_4
  %382 = add nsw i32 %378, %38... can share an output register with another operation already assigned to main_signed_add_32_5
  %382 = add nsw i32 %378, %38... can share an output register with another operation already assigned to main_signed_add_32_6
  %382 = add nsw i32 %378, %38... can share an output register with another operation already assigned to main_signed_add_32_7
  %382 = add nsw i32 %378, %38... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %382 = add nsw i32 %378, %38... (idx: 0)        -980                          -520                          -30                           -20                           -20                           -20                           -20                           -170                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -230                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %382 = add nsw i32 %378, %38... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %382 = add nsw i32 %378, %38... (idx: 0) -> main_signed_add_32_0 (mux inputs: 100)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %385 = mul nsw i32 %384, %38... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %385 = mul nsw i32 %384, %38... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %385 = mul nsw i32 %384, %38... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %385 = mul nsw i32 %384, %38... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %385 = mul nsw i32 %384, %38... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %385 = mul nsw i32 %384, %38... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %385 = mul nsw i32 %384, %38... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %385 = mul nsw i32 %384, %38... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %385 = mul nsw i32 %384, %38... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %385 = mul nsw i32 %384, %38... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %385 = mul nsw i32 %384, %38... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %385 = mul nsw i32 %384, %38... can share an output register with another operation already assigned to main_signed_multiply_32_27
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %385 = mul nsw i32 %384, %38... (idx: 0)        -40                           -20                           -30                           -20                           -590                          -40                           -40                           -110                          -40                           -40                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -18                           -18                           -18                           -18                           -18                           -18                           -18                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %385 = mul nsw i32 %384, %38... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %385 = mul nsw i32 %384, %38... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 61)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %395 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %395 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %396 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %396 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %395 = load i32* getelementp... (idx: 0)        1                             11                            
  %396 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %395 = load i32* getelementp... (idx: 0)        1                             0                             
  %396 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %395 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %396 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %386 = add nsw i32 %382, %38... can share an output register with another operation already assigned to main_signed_add_32_0
  %386 = add nsw i32 %382, %38... can share an output register with another operation already assigned to main_signed_add_32_1
  %386 = add nsw i32 %382, %38... can share an output register with another operation already assigned to main_signed_add_32_2
  %386 = add nsw i32 %382, %38... can share an output register with another operation already assigned to main_signed_add_32_3
  %386 = add nsw i32 %382, %38... can share an output register with another operation already assigned to main_signed_add_32_4
  %386 = add nsw i32 %382, %38... can share an output register with another operation already assigned to main_signed_add_32_5
  %386 = add nsw i32 %382, %38... can share an output register with another operation already assigned to main_signed_add_32_6
  %386 = add nsw i32 %382, %38... can share an output register with another operation already assigned to main_signed_add_32_7
  %386 = add nsw i32 %382, %38... can share an output register with another operation already assigned to main_signed_add_32_17
  %389 = add i32 %386, %387 can share an output register with another operation already assigned to main_signed_add_32_0
  %389 = add i32 %386, %387 can share an output register with another operation already assigned to main_signed_add_32_1
  %389 = add i32 %386, %387 can share an output register with another operation already assigned to main_signed_add_32_2
  %389 = add i32 %386, %387 can share an output register with another operation already assigned to main_signed_add_32_3
  %389 = add i32 %386, %387 can share an output register with another operation already assigned to main_signed_add_32_4
  %389 = add i32 %386, %387 can share an output register with another operation already assigned to main_signed_add_32_5
  %389 = add i32 %386, %387 can share an output register with another operation already assigned to main_signed_add_32_6
  %389 = add i32 %386, %387 can share an output register with another operation already assigned to main_signed_add_32_7
  %389 = add i32 %386, %387 can share an output register with another operation already assigned to main_signed_add_32_17
  %390 = add i32 %389, %388 can share an output register with another operation already assigned to main_signed_add_32_0
  %390 = add i32 %389, %388 can share an output register with another operation already assigned to main_signed_add_32_1
  %390 = add i32 %389, %388 can share an output register with another operation already assigned to main_signed_add_32_2
  %390 = add i32 %389, %388 can share an output register with another operation already assigned to main_signed_add_32_3
  %390 = add i32 %389, %388 can share an output register with another operation already assigned to main_signed_add_32_4
  %390 = add i32 %389, %388 can share an output register with another operation already assigned to main_signed_add_32_5
  %390 = add i32 %389, %388 can share an output register with another operation already assigned to main_signed_add_32_6
  %390 = add i32 %389, %388 can share an output register with another operation already assigned to main_signed_add_32_7
  %390 = add i32 %389, %388 can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %386 = add nsw i32 %382, %38... (idx: 0)        -1000                         -520                          -30                           -20                           -20                           -20                           -20                           -170                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -230                          -10                           
  %389 = add i32 %386, %387 (idx: 1)              -1000                         -520                          -30                           -20                           -19                           -19                           -20                           -169                          -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -230                          -9                            
  %390 = add i32 %389, %388 (idx: 2)              -1000                         -520                          -30                           -20                           -19                           -19                           -20                           -169                          -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -230                          -9                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %386 = add nsw i32 %382, %38... (idx
  %389 = add i32 %386, %387 (idx
  %390 = add i32 %389, %388 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %386 = add nsw i32 %382, %38... (idx: 0) -> main_signed_add_32_0 (mux inputs: 102)
  %389 = add i32 %386, %387 (idx: 1) -> main_signed_add_32_1 (mux inputs: 54)
  %390 = add i32 %389, %388 (idx: 2) -> main_signed_add_32_17 (mux inputs: 25)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %399 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %399 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %400 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %400 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %399 = load i32* getelementp... (idx: 0)        1                             11                            
  %400 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %399 = load i32* getelementp... (idx: 0)        1                             0                             
  %400 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %399 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %400 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %393 = add i32 %390, %391 can share an output register with another operation already assigned to main_signed_add_32_0
  %393 = add i32 %390, %391 can share an output register with another operation already assigned to main_signed_add_32_1
  %393 = add i32 %390, %391 can share an output register with another operation already assigned to main_signed_add_32_2
  %393 = add i32 %390, %391 can share an output register with another operation already assigned to main_signed_add_32_3
  %393 = add i32 %390, %391 can share an output register with another operation already assigned to main_signed_add_32_4
  %393 = add i32 %390, %391 can share an output register with another operation already assigned to main_signed_add_32_5
  %393 = add i32 %390, %391 can share an output register with another operation already assigned to main_signed_add_32_6
  %393 = add i32 %390, %391 can share an output register with another operation already assigned to main_signed_add_32_7
  %393 = add i32 %390, %391 can share an output register with another operation already assigned to main_signed_add_32_17
  %394 = add i32 %393, %392 can share an output register with another operation already assigned to main_signed_add_32_0
  %394 = add i32 %393, %392 can share an output register with another operation already assigned to main_signed_add_32_1
  %394 = add i32 %393, %392 can share an output register with another operation already assigned to main_signed_add_32_2
  %394 = add i32 %393, %392 can share an output register with another operation already assigned to main_signed_add_32_3
  %394 = add i32 %393, %392 can share an output register with another operation already assigned to main_signed_add_32_4
  %394 = add i32 %393, %392 can share an output register with another operation already assigned to main_signed_add_32_5
  %394 = add i32 %393, %392 can share an output register with another operation already assigned to main_signed_add_32_6
  %394 = add i32 %393, %392 can share an output register with another operation already assigned to main_signed_add_32_7
  %394 = add i32 %393, %392 can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %393 = add i32 %390, %391 (idx: 0)              -1020                         -540                          -30                           -20                           -19                           -19                           -20                           -169                          -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -250                          -9                            
  %394 = add i32 %393, %392 (idx: 1)              -1020                         -540                          -30                           -20                           -19                           -19                           -20                           -169                          -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -250                          -9                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %393 = add i32 %390, %391 (idx
  %394 = add i32 %393, %392 (idx: 1)              0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %393 = add i32 %390, %391 (idx: 0) -> main_signed_add_32_0 (mux inputs: 104)
  %394 = add i32 %393, %392 (idx: 1) -> main_signed_add_32_1 (mux inputs: 56)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %403 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %403 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %404 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %404 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %403 = load i32* getelementp... (idx: 0)        1                             11                            
  %404 = load i32* getelementp... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %403 = load i32* getelementp... (idx: 0)        1                             0                             
  %404 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %403 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %404 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %397 = add i32 %394, %395 can share an output register with another operation already assigned to main_signed_add_32_0
  %397 = add i32 %394, %395 can share an output register with another operation already assigned to main_signed_add_32_1
  %397 = add i32 %394, %395 can share an output register with another operation already assigned to main_signed_add_32_2
  %397 = add i32 %394, %395 can share an output register with another operation already assigned to main_signed_add_32_3
  %397 = add i32 %394, %395 can share an output register with another operation already assigned to main_signed_add_32_4
  %397 = add i32 %394, %395 can share an output register with another operation already assigned to main_signed_add_32_5
  %397 = add i32 %394, %395 can share an output register with another operation already assigned to main_signed_add_32_6
  %397 = add i32 %394, %395 can share an output register with another operation already assigned to main_signed_add_32_7
  %397 = add i32 %394, %395 can share an output register with another operation already assigned to main_signed_add_32_17
  %398 = add i32 %397, %396 can share an output register with another operation already assigned to main_signed_add_32_0
  %398 = add i32 %397, %396 can share an output register with another operation already assigned to main_signed_add_32_1
  %398 = add i32 %397, %396 can share an output register with another operation already assigned to main_signed_add_32_2
  %398 = add i32 %397, %396 can share an output register with another operation already assigned to main_signed_add_32_3
  %398 = add i32 %397, %396 can share an output register with another operation already assigned to main_signed_add_32_4
  %398 = add i32 %397, %396 can share an output register with another operation already assigned to main_signed_add_32_5
  %398 = add i32 %397, %396 can share an output register with another operation already assigned to main_signed_add_32_6
  %398 = add i32 %397, %396 can share an output register with another operation already assigned to main_signed_add_32_7
  %398 = add i32 %397, %396 can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %397 = add i32 %394, %395 (idx: 0)              -1040                         -560                          -30                           -20                           -19                           -19                           -20                           -169                          -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -250                          -9                            
  %398 = add i32 %397, %396 (idx: 1)              -1040                         -560                          -30                           -20                           -19                           -19                           -20                           -169                          -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -250                          -9                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %397 = add i32 %394, %395 (idx
  %398 = add i32 %397, %396 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %397 = add i32 %394, %395 (idx: 0) -> main_signed_add_32_0 (mux inputs: 106)
  %398 = add i32 %397, %396 (idx: 1) -> main_signed_add_32_1 (mux inputs: 58)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %401 = add i32 %398, %399 can share an output register with another operation already assigned to main_signed_add_32_0
  %401 = add i32 %398, %399 can share an output register with another operation already assigned to main_signed_add_32_1
  %401 = add i32 %398, %399 can share an output register with another operation already assigned to main_signed_add_32_2
  %401 = add i32 %398, %399 can share an output register with another operation already assigned to main_signed_add_32_3
  %401 = add i32 %398, %399 can share an output register with another operation already assigned to main_signed_add_32_4
  %401 = add i32 %398, %399 can share an output register with another operation already assigned to main_signed_add_32_5
  %401 = add i32 %398, %399 can share an output register with another operation already assigned to main_signed_add_32_6
  %401 = add i32 %398, %399 can share an output register with another operation already assigned to main_signed_add_32_7
  %401 = add i32 %398, %399 can share an output register with another operation already assigned to main_signed_add_32_17
  %402 = add i32 %401, %400 can share an output register with another operation already assigned to main_signed_add_32_0
  %402 = add i32 %401, %400 can share an output register with another operation already assigned to main_signed_add_32_1
  %402 = add i32 %401, %400 can share an output register with another operation already assigned to main_signed_add_32_2
  %402 = add i32 %401, %400 can share an output register with another operation already assigned to main_signed_add_32_3
  %402 = add i32 %401, %400 can share an output register with another operation already assigned to main_signed_add_32_4
  %402 = add i32 %401, %400 can share an output register with another operation already assigned to main_signed_add_32_5
  %402 = add i32 %401, %400 can share an output register with another operation already assigned to main_signed_add_32_6
  %402 = add i32 %401, %400 can share an output register with another operation already assigned to main_signed_add_32_7
  %402 = add i32 %401, %400 can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %401 = add i32 %398, %399 (idx: 0)              -1060                         -580                          -30                           -20                           -19                           -19                           -20                           -169                          -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -250                          -9                            
  %402 = add i32 %401, %400 (idx: 1)              -1060                         -580                          -30                           -20                           -19                           -19                           -20                           -169                          -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -250                          -9                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %401 = add i32 %398, %399 (idx
  %402 = add i32 %401, %400 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %401 = add i32 %398, %399 (idx: 0) -> main_signed_add_32_0 (mux inputs: 108)
  %402 = add i32 %401, %400 (idx: 1) -> main_signed_add_32_1 (mux inputs: 60)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %405 = add i32 %402, %403 can share an output register with another operation already assigned to main_signed_add_32_0
  %405 = add i32 %402, %403 can share an output register with another operation already assigned to main_signed_add_32_1
  %405 = add i32 %402, %403 can share an output register with another operation already assigned to main_signed_add_32_2
  %405 = add i32 %402, %403 can share an output register with another operation already assigned to main_signed_add_32_3
  %405 = add i32 %402, %403 can share an output register with another operation already assigned to main_signed_add_32_4
  %405 = add i32 %402, %403 can share an output register with another operation already assigned to main_signed_add_32_5
  %405 = add i32 %402, %403 can share an output register with another operation already assigned to main_signed_add_32_6
  %405 = add i32 %402, %403 can share an output register with another operation already assigned to main_signed_add_32_7
  %405 = add i32 %402, %403 can share an output register with another operation already assigned to main_signed_add_32_17
  %406 = add i32 %405, %404 can share an output register with another operation already assigned to main_signed_add_32_0
  %406 = add i32 %405, %404 can share an output register with another operation already assigned to main_signed_add_32_1
  %406 = add i32 %405, %404 can share an output register with another operation already assigned to main_signed_add_32_2
  %406 = add i32 %405, %404 can share an output register with another operation already assigned to main_signed_add_32_3
  %406 = add i32 %405, %404 can share an output register with another operation already assigned to main_signed_add_32_4
  %406 = add i32 %405, %404 can share an output register with another operation already assigned to main_signed_add_32_5
  %406 = add i32 %405, %404 can share an output register with another operation already assigned to main_signed_add_32_6
  %406 = add i32 %405, %404 can share an output register with another operation already assigned to main_signed_add_32_7
  %406 = add i32 %405, %404 can share an output register with another operation already assigned to main_signed_add_32_17
  %411 = add nsw i32 %410, %40... can share an output register with another operation already assigned to main_signed_add_32_0
  %411 = add nsw i32 %410, %40... can share an output register with another operation already assigned to main_signed_add_32_1
  %411 = add nsw i32 %410, %40... can share an output register with another operation already assigned to main_signed_add_32_2
  %411 = add nsw i32 %410, %40... can share an output register with another operation already assigned to main_signed_add_32_3
  %411 = add nsw i32 %410, %40... can share an output register with another operation already assigned to main_signed_add_32_4
  %411 = add nsw i32 %410, %40... can share an output register with another operation already assigned to main_signed_add_32_5
  %411 = add nsw i32 %410, %40... can share an output register with another operation already assigned to main_signed_add_32_6
  %411 = add nsw i32 %410, %40... can share an output register with another operation already assigned to main_signed_add_32_7
  %411 = add nsw i32 %410, %40... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %405 = add i32 %402, %403 (idx: 0)              -1080                         -600                          -30                           -20                           -19                           -19                           -20                           -169                          -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -250                          -9                            
  %406 = add i32 %405, %404 (idx: 1)              -1080                         -600                          -30                           -20                           -19                           -19                           -20                           -169                          -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -250                          -9                            
  %411 = add nsw i32 %410, %40... (idx: 2)        -1080                         -600                          -30                           -20                           -20                           -20                           -20                           -170                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -250                          -10                           
  %431 = add nsw i32 %407, %41... (idx: 3)        -1090                         -610                          -40                           -30                           -30                           -30                           -30                           -180                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -260                          -10                           
  %455 = add nsw i32 %415, %41... (idx: 4)        -1090                         -610                          -40                           -30                           -30                           -30                           -30                           -180                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -260                          -10                           
  %457 = add nsw i32 %455, %32... (idx: 5)        -1090                         -610                          -40                           -30                           -30                           -30                           -30                           -180                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -260                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %405 = add i32 %402, %403 (idx
  %406 = add i32 %405, %404 (idx
  %411 = add nsw i32 %410, %40... (idx
  %431 = add nsw i32 %407, %41... (idx
  %455 = add nsw i32 %415, %41... (idx
  %457 = add nsw i32 %455, %32... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %405 = add i32 %402, %403 (idx: 0) -> main_signed_add_32_0 (mux inputs: 110)
  %406 = add i32 %405, %404 (idx: 1) -> main_signed_add_32_1 (mux inputs: 62)
  %455 = add nsw i32 %415, %41... (idx: 4) -> main_signed_add_32_2 (mux inputs: 5)
  %457 = add nsw i32 %455, %32... (idx: 5) -> main_signed_add_32_3 (mux inputs: 4)
  %431 = add nsw i32 %407, %41... (idx: 3) -> main_signed_add_32_7 (mux inputs: 19)
  %411 = add nsw i32 %410, %40... (idx: 2) -> main_signed_add_32_17 (mux inputs: 27)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %433 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %433 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %433 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %433 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %433 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %433 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %433 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %433 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %433 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %433 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %433 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %433 = mul nsw i32 %dec_ph1.... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %437 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %437 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %437 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %437 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %437 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %437 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %437 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %437 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %437 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %437 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %437 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_24
  %437 = mul nsw i32 %dec_ph2.... can share an output register with another operation already assigned to main_signed_multiply_32_27
  %458 = mul nsw i32 %456, 12 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %458 = mul nsw i32 %456, 12 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %458 = mul nsw i32 %456, 12 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %458 = mul nsw i32 %456, 12 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %458 = mul nsw i32 %456, 12 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %458 = mul nsw i32 %456, 12 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %458 = mul nsw i32 %456, 12 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %458 = mul nsw i32 %456, 12 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %458 = mul nsw i32 %456, 12 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %458 = mul nsw i32 %456, 12 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %458 = mul nsw i32 %456, 12 can share an output register with another operation already assigned to main_signed_multiply_32_24
  %458 = mul nsw i32 %456, 12 can share an output register with another operation already assigned to main_signed_multiply_32_27
  %459 = mul nsw i32 %457, -44 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %459 = mul nsw i32 %457, -44 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %459 = mul nsw i32 %457, -44 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %459 = mul nsw i32 %457, -44 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %459 = mul nsw i32 %457, -44 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %459 = mul nsw i32 %457, -44 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %459 = mul nsw i32 %457, -44 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %459 = mul nsw i32 %457, -44 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %459 = mul nsw i32 %457, -44 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %459 = mul nsw i32 %457, -44 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %459 = mul nsw i32 %457, -44 can share an output register with another operation already assigned to main_signed_multiply_32_24
  %459 = mul nsw i32 %457, -44 can share an output register with another operation already assigned to main_signed_multiply_32_27
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %433 = mul nsw i32 %dec_ph1.... (idx: 0)        -40                           -20                           -30                           -20                           -610                          -40                           -40                           -110                          -40                           -40                           -20                           -19                           -20                           -19                           -20                           -20                           -19                           -20                           -19                           -20                           -19                           -20                           -20                           -20                           -19                           -19                           -20                           -19                           -20                           
  %437 = mul nsw i32 %dec_ph2.... (idx: 1)        -40                           -20                           -30                           -20                           -610                          -40                           -40                           -110                          -40                           -40                           -20                           -19                           -20                           -19                           -20                           -20                           -19                           -20                           -19                           -20                           -19                           -20                           -20                           -20                           -19                           -19                           -20                           -19                           -20                           
  %458 = mul nsw i32 %456, 12 (idx: 2)            -35                           -13                           -25                           -14                           -603                          -34                           -34                           -103                          -34                           -33                           -14                           -14                           -13                           -14                           -13                           -13                           -14                           -13                           -14                           -13                           -14                           -14                           -14                           -13                           -14                           -14                           -13                           -14                           -13                           
  %459 = mul nsw i32 %457, -44 (idx: 3)           -34                           -14                           -24                           -14                           -604                          -34                           -34                           -104                          -34                           -34                           -14                           -13                           -14                           -13                           -14                           -14                           -13                           -14                           -13                           -14                           -13                           -14                           -14                           -14                           -13                           -13                           -14                           -13                           -14                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    main_signed_multiply_32_15    main_signed_multiply_32_16    main_signed_multiply_32_17    main_signed_multiply_32_18    main_signed_multiply_32_19    main_signed_multiply_32_20    main_signed_multiply_32_21    main_signed_multiply_32_22    main_signed_multiply_32_23    main_signed_multiply_32_24    main_signed_multiply_32_25    main_signed_multiply_32_26    main_signed_multiply_32_27    main_signed_multiply_32_28    
  %433 = mul nsw i32 %dec_ph1.... (idx
  %437 = mul nsw i32 %dec_ph2.... (idx
  %458 = mul nsw i32 %456, 12 (idx
  %459 = mul nsw i32 %457, -44 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %458 = mul nsw i32 %456, 12 (idx: 2) -> main_signed_multiply_32_0 (mux inputs: 5)
  %433 = mul nsw i32 %dec_ph1.... (idx: 0) -> main_signed_multiply_32_4 (mux inputs: 63)
  %459 = mul nsw i32 %457, -44 (idx: 3) -> main_signed_multiply_32_5 (mux inputs: 5)
  %437 = mul nsw i32 %dec_ph2.... (idx: 1) -> main_signed_multiply_32_7 (mux inputs: 13)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %456 = sub nsw i32 %323, %45... (idx: 0)        -180                          -80                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %456 = sub nsw i32 %323, %45... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %456 = sub nsw i32 %323, %45... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 19)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %wd4.0.i.i = add nsw i32 %43... can share an output register with another operation already assigned to main_signed_add_32_0
  %wd4.0.i.i = add nsw i32 %43... can share an output register with another operation already assigned to main_signed_add_32_1
  %wd4.0.i.i = add nsw i32 %43... can share an output register with another operation already assigned to main_signed_add_32_2
  %wd4.0.i.i = add nsw i32 %43... can share an output register with another operation already assigned to main_signed_add_32_3
  %wd4.0.i.i = add nsw i32 %43... can share an output register with another operation already assigned to main_signed_add_32_4
  %wd4.0.i.i = add nsw i32 %43... can share an output register with another operation already assigned to main_signed_add_32_5
  %wd4.0.i.i = add nsw i32 %43... can share an output register with another operation already assigned to main_signed_add_32_6
  %wd4.0.i.i = add nsw i32 %43... can share an output register with another operation already assigned to main_signed_add_32_7
  %wd4.0.i.i = add nsw i32 %43... can share an output register with another operation already assigned to main_signed_add_32_17
  %443 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_0
  %443 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_1
  %443 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_2
  %443 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_3
  %443 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_4
  %443 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_5
  %443 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_6
  %443 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_7
  %443 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_17
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_0
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_1
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_2
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_3
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_4
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_5
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_6
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_7
  %apl1.0.i.i = add nsw i32 %4... can share an output register with another operation already assigned to main_signed_add_32_17
  %461 = add nsw i32 %460, %45... can share an output register with another operation already assigned to main_signed_add_32_0
  %461 = add nsw i32 %460, %45... can share an output register with another operation already assigned to main_signed_add_32_1
  %461 = add nsw i32 %460, %45... can share an output register with another operation already assigned to main_signed_add_32_2
  %461 = add nsw i32 %460, %45... can share an output register with another operation already assigned to main_signed_add_32_3
  %461 = add nsw i32 %460, %45... can share an output register with another operation already assigned to main_signed_add_32_4
  %461 = add nsw i32 %460, %45... can share an output register with another operation already assigned to main_signed_add_32_5
  %461 = add nsw i32 %460, %45... can share an output register with another operation already assigned to main_signed_add_32_6
  %461 = add nsw i32 %460, %45... can share an output register with another operation already assigned to main_signed_add_32_7
  %461 = add nsw i32 %460, %45... can share an output register with another operation already assigned to main_signed_add_32_17
  %463 = add nsw i32 %462, %45... can share an output register with another operation already assigned to main_signed_add_32_0
  %463 = add nsw i32 %462, %45... can share an output register with another operation already assigned to main_signed_add_32_1
  %463 = add nsw i32 %462, %45... can share an output register with another operation already assigned to main_signed_add_32_2
  %463 = add nsw i32 %462, %45... can share an output register with another operation already assigned to main_signed_add_32_3
  %463 = add nsw i32 %462, %45... can share an output register with another operation already assigned to main_signed_add_32_4
  %463 = add nsw i32 %462, %45... can share an output register with another operation already assigned to main_signed_add_32_5
  %463 = add nsw i32 %462, %45... can share an output register with another operation already assigned to main_signed_add_32_6
  %463 = add nsw i32 %462, %45... can share an output register with another operation already assigned to main_signed_add_32_7
  %463 = add nsw i32 %462, %45... can share an output register with another operation already assigned to main_signed_add_32_17
  %465 = add nsw i32 %464, %46... can share an output register with another operation already assigned to main_signed_add_32_0
  %465 = add nsw i32 %464, %46... can share an output register with another operation already assigned to main_signed_add_32_1
  %465 = add nsw i32 %464, %46... can share an output register with another operation already assigned to main_signed_add_32_2
  %465 = add nsw i32 %464, %46... can share an output register with another operation already assigned to main_signed_add_32_3
  %465 = add nsw i32 %464, %46... can share an output register with another operation already assigned to main_signed_add_32_4
  %465 = add nsw i32 %464, %46... can share an output register with another operation already assigned to main_signed_add_32_5
  %465 = add nsw i32 %464, %46... can share an output register with another operation already assigned to main_signed_add_32_6
  %465 = add nsw i32 %464, %46... can share an output register with another operation already assigned to main_signed_add_32_7
  %465 = add nsw i32 %464, %46... can share an output register with another operation already assigned to main_signed_add_32_17
  %467 = add nsw i32 %466, %46... can share an output register with another operation already assigned to main_signed_add_32_0
  %467 = add nsw i32 %466, %46... can share an output register with another operation already assigned to main_signed_add_32_1
  %467 = add nsw i32 %466, %46... can share an output register with another operation already assigned to main_signed_add_32_2
  %467 = add nsw i32 %466, %46... can share an output register with another operation already assigned to main_signed_add_32_3
  %467 = add nsw i32 %466, %46... can share an output register with another operation already assigned to main_signed_add_32_4
  %467 = add nsw i32 %466, %46... can share an output register with another operation already assigned to main_signed_add_32_5
  %467 = add nsw i32 %466, %46... can share an output register with another operation already assigned to main_signed_add_32_6
  %467 = add nsw i32 %466, %46... can share an output register with another operation already assigned to main_signed_add_32_7
  %467 = add nsw i32 %466, %46... can share an output register with another operation already assigned to main_signed_add_32_17
  %469 = add nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_add_32_0
  %469 = add nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_add_32_1
  %469 = add nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_add_32_2
  %469 = add nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_add_32_3
  %469 = add nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_add_32_4
  %469 = add nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_add_32_5
  %469 = add nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_add_32_6
  %469 = add nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_add_32_7
  %469 = add nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_add_32_17
  %471 = add nsw i32 %470, %46... can share an output register with another operation already assigned to main_signed_add_32_0
  %471 = add nsw i32 %470, %46... can share an output register with another operation already assigned to main_signed_add_32_1
  %471 = add nsw i32 %470, %46... can share an output register with another operation already assigned to main_signed_add_32_2
  %471 = add nsw i32 %470, %46... can share an output register with another operation already assigned to main_signed_add_32_3
  %471 = add nsw i32 %470, %46... can share an output register with another operation already assigned to main_signed_add_32_4
  %471 = add nsw i32 %470, %46... can share an output register with another operation already assigned to main_signed_add_32_5
  %471 = add nsw i32 %470, %46... can share an output register with another operation already assigned to main_signed_add_32_6
  %471 = add nsw i32 %470, %46... can share an output register with another operation already assigned to main_signed_add_32_7
  %471 = add nsw i32 %470, %46... can share an output register with another operation already assigned to main_signed_add_32_17
  %473 = add nsw i32 %472, %46... can share an output register with another operation already assigned to main_signed_add_32_0
  %473 = add nsw i32 %472, %46... can share an output register with another operation already assigned to main_signed_add_32_1
  %473 = add nsw i32 %472, %46... can share an output register with another operation already assigned to main_signed_add_32_2
  %473 = add nsw i32 %472, %46... can share an output register with another operation already assigned to main_signed_add_32_3
  %473 = add nsw i32 %472, %46... can share an output register with another operation already assigned to main_signed_add_32_4
  %473 = add nsw i32 %472, %46... can share an output register with another operation already assigned to main_signed_add_32_5
  %473 = add nsw i32 %472, %46... can share an output register with another operation already assigned to main_signed_add_32_6
  %473 = add nsw i32 %472, %46... can share an output register with another operation already assigned to main_signed_add_32_7
  %473 = add nsw i32 %472, %46... can share an output register with another operation already assigned to main_signed_add_32_17
  %475 = add nsw i32 %474, %47... can share an output register with another operation already assigned to main_signed_add_32_0
  %475 = add nsw i32 %474, %47... can share an output register with another operation already assigned to main_signed_add_32_1
  %475 = add nsw i32 %474, %47... can share an output register with another operation already assigned to main_signed_add_32_2
  %475 = add nsw i32 %474, %47... can share an output register with another operation already assigned to main_signed_add_32_3
  %475 = add nsw i32 %474, %47... can share an output register with another operation already assigned to main_signed_add_32_4
  %475 = add nsw i32 %474, %47... can share an output register with another operation already assigned to main_signed_add_32_5
  %475 = add nsw i32 %474, %47... can share an output register with another operation already assigned to main_signed_add_32_6
  %475 = add nsw i32 %474, %47... can share an output register with another operation already assigned to main_signed_add_32_7
  %475 = add nsw i32 %474, %47... can share an output register with another operation already assigned to main_signed_add_32_17
  %477 = add nsw i32 %476, %47... can share an output register with another operation already assigned to main_signed_add_32_0
  %477 = add nsw i32 %476, %47... can share an output register with another operation already assigned to main_signed_add_32_1
  %477 = add nsw i32 %476, %47... can share an output register with another operation already assigned to main_signed_add_32_2
  %477 = add nsw i32 %476, %47... can share an output register with another operation already assigned to main_signed_add_32_3
  %477 = add nsw i32 %476, %47... can share an output register with another operation already assigned to main_signed_add_32_4
  %477 = add nsw i32 %476, %47... can share an output register with another operation already assigned to main_signed_add_32_5
  %477 = add nsw i32 %476, %47... can share an output register with another operation already assigned to main_signed_add_32_6
  %477 = add nsw i32 %476, %47... can share an output register with another operation already assigned to main_signed_add_32_7
  %477 = add nsw i32 %476, %47... can share an output register with another operation already assigned to main_signed_add_32_17
  %479 = add nsw i32 %478, %47... can share an output register with another operation already assigned to main_signed_add_32_0
  %479 = add nsw i32 %478, %47... can share an output register with another operation already assigned to main_signed_add_32_1
  %479 = add nsw i32 %478, %47... can share an output register with another operation already assigned to main_signed_add_32_2
  %479 = add nsw i32 %478, %47... can share an output register with another operation already assigned to main_signed_add_32_3
  %479 = add nsw i32 %478, %47... can share an output register with another operation already assigned to main_signed_add_32_4
  %479 = add nsw i32 %478, %47... can share an output register with another operation already assigned to main_signed_add_32_5
  %479 = add nsw i32 %478, %47... can share an output register with another operation already assigned to main_signed_add_32_6
  %479 = add nsw i32 %478, %47... can share an output register with another operation already assigned to main_signed_add_32_7
  %479 = add nsw i32 %478, %47... can share an output register with another operation already assigned to main_signed_add_32_17
  %481 = add nsw i32 %480, %47... can share an output register with another operation already assigned to main_signed_add_32_0
  %481 = add nsw i32 %480, %47... can share an output register with another operation already assigned to main_signed_add_32_1
  %481 = add nsw i32 %480, %47... can share an output register with another operation already assigned to main_signed_add_32_2
  %481 = add nsw i32 %480, %47... can share an output register with another operation already assigned to main_signed_add_32_3
  %481 = add nsw i32 %480, %47... can share an output register with another operation already assigned to main_signed_add_32_4
  %481 = add nsw i32 %480, %47... can share an output register with another operation already assigned to main_signed_add_32_5
  %481 = add nsw i32 %480, %47... can share an output register with another operation already assigned to main_signed_add_32_6
  %481 = add nsw i32 %480, %47... can share an output register with another operation already assigned to main_signed_add_32_7
  %481 = add nsw i32 %480, %47... can share an output register with another operation already assigned to main_signed_add_32_17
  %483 = add nsw i32 %482, %47... can share an output register with another operation already assigned to main_signed_add_32_0
  %483 = add nsw i32 %482, %47... can share an output register with another operation already assigned to main_signed_add_32_1
  %483 = add nsw i32 %482, %47... can share an output register with another operation already assigned to main_signed_add_32_2
  %483 = add nsw i32 %482, %47... can share an output register with another operation already assigned to main_signed_add_32_3
  %483 = add nsw i32 %482, %47... can share an output register with another operation already assigned to main_signed_add_32_4
  %483 = add nsw i32 %482, %47... can share an output register with another operation already assigned to main_signed_add_32_5
  %483 = add nsw i32 %482, %47... can share an output register with another operation already assigned to main_signed_add_32_6
  %483 = add nsw i32 %482, %47... can share an output register with another operation already assigned to main_signed_add_32_7
  %483 = add nsw i32 %482, %47... can share an output register with another operation already assigned to main_signed_add_32_17
  %485 = add nsw i32 %484, %48... can share an output register with another operation already assigned to main_signed_add_32_0
  %485 = add nsw i32 %484, %48... can share an output register with another operation already assigned to main_signed_add_32_1
  %485 = add nsw i32 %484, %48... can share an output register with another operation already assigned to main_signed_add_32_2
  %485 = add nsw i32 %484, %48... can share an output register with another operation already assigned to main_signed_add_32_3
  %485 = add nsw i32 %484, %48... can share an output register with another operation already assigned to main_signed_add_32_4
  %485 = add nsw i32 %484, %48... can share an output register with another operation already assigned to main_signed_add_32_5
  %485 = add nsw i32 %484, %48... can share an output register with another operation already assigned to main_signed_add_32_6
  %485 = add nsw i32 %484, %48... can share an output register with another operation already assigned to main_signed_add_32_7
  %485 = add nsw i32 %484, %48... can share an output register with another operation already assigned to main_signed_add_32_17
  %487 = add nsw i32 %486, %48... can share an output register with another operation already assigned to main_signed_add_32_0
  %487 = add nsw i32 %486, %48... can share an output register with another operation already assigned to main_signed_add_32_1
  %487 = add nsw i32 %486, %48... can share an output register with another operation already assigned to main_signed_add_32_2
  %487 = add nsw i32 %486, %48... can share an output register with another operation already assigned to main_signed_add_32_3
  %487 = add nsw i32 %486, %48... can share an output register with another operation already assigned to main_signed_add_32_4
  %487 = add nsw i32 %486, %48... can share an output register with another operation already assigned to main_signed_add_32_5
  %487 = add nsw i32 %486, %48... can share an output register with another operation already assigned to main_signed_add_32_6
  %487 = add nsw i32 %486, %48... can share an output register with another operation already assigned to main_signed_add_32_7
  %487 = add nsw i32 %486, %48... can share an output register with another operation already assigned to main_signed_add_32_17
  %489 = add nsw i32 %488, %48... can share an output register with another operation already assigned to main_signed_add_32_0
  %489 = add nsw i32 %488, %48... can share an output register with another operation already assigned to main_signed_add_32_1
  %489 = add nsw i32 %488, %48... can share an output register with another operation already assigned to main_signed_add_32_2
  %489 = add nsw i32 %488, %48... can share an output register with another operation already assigned to main_signed_add_32_3
  %489 = add nsw i32 %488, %48... can share an output register with another operation already assigned to main_signed_add_32_4
  %489 = add nsw i32 %488, %48... can share an output register with another operation already assigned to main_signed_add_32_5
  %489 = add nsw i32 %488, %48... can share an output register with another operation already assigned to main_signed_add_32_6
  %489 = add nsw i32 %488, %48... can share an output register with another operation already assigned to main_signed_add_32_7
  %489 = add nsw i32 %488, %48... can share an output register with another operation already assigned to main_signed_add_32_17
  %491 = add nsw i32 %490, %48... can share an output register with another operation already assigned to main_signed_add_32_0
  %491 = add nsw i32 %490, %48... can share an output register with another operation already assigned to main_signed_add_32_1
  %491 = add nsw i32 %490, %48... can share an output register with another operation already assigned to main_signed_add_32_2
  %491 = add nsw i32 %490, %48... can share an output register with another operation already assigned to main_signed_add_32_3
  %491 = add nsw i32 %490, %48... can share an output register with another operation already assigned to main_signed_add_32_4
  %491 = add nsw i32 %490, %48... can share an output register with another operation already assigned to main_signed_add_32_5
  %491 = add nsw i32 %490, %48... can share an output register with another operation already assigned to main_signed_add_32_6
  %491 = add nsw i32 %490, %48... can share an output register with another operation already assigned to main_signed_add_32_7
  %491 = add nsw i32 %490, %48... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %wd4.0.i.i = add nsw i32 %43... (idx: 0)        -1100                         -620                          -50                           -40                           -20                           -20                           -20                           -190                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -270                          -10                           
  %443 = add nsw i32 %wd4.0.i.... (idx: 1)        -1100                         -620                          -50                           -40                           -20                           -20                           -20                           -190                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -270                          -10                           
  %apl1.0.i.i = add nsw i32 %4... (idx: 2)        -1100                         -620                          -50                           -40                           -20                           -20                           -20                           -190                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -270                          -10                           
  %461 = add nsw i32 %460, %45... (idx: 3)        -1100                         -620                          -50                           -40                           -20                           -20                           -20                           -190                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -270                          -10                           
  %463 = add nsw i32 %462, %45... (idx: 4)        -1100                         -620                          -50                           -40                           -20                           -20                           -20                           -190                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -270                          -10                           
  %465 = add nsw i32 %464, %46... (idx: 5)        -1100                         -620                          -50                           -40                           -20                           -20                           -20                           -190                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -270                          -10                           
  %467 = add nsw i32 %466, %46... (idx: 6)        -1100                         -620                          -50                           -40                           -20                           -20                           -20                           -190                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -270                          -10                           
  %469 = add nsw i32 %468, %46... (idx: 7)        -1100                         -620                          -50                           -40                           -20                           -20                           -20                           -190                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -270                          -10                           
  %471 = add nsw i32 %470, %46... (idx: 8)        -1100                         -620                          -50                           -40                           -20                           -20                           -20                           -190                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -270                          -10                           
  %473 = add nsw i32 %472, %46... (idx: 9)        -1100                         -620                          -50                           -40                           -20                           -20                           -20                           -190                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -270                          -10                           
  %475 = add nsw i32 %474, %47... (idx: 10)       -1100                         -620                          -50                           -40                           -20                           -20                           -20                           -190                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -270                          -10                           
  %477 = add nsw i32 %476, %47... (idx: 11)       -1100                         -620                          -50                           -40                           -20                           -20                           -20                           -190                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -270                          -10                           
  %479 = add nsw i32 %478, %47... (idx: 12)       -1100                         -620                          -50                           -40                           -20                           -20                           -20                           -190                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -270                          -10                           
  %481 = add nsw i32 %480, %47... (idx: 13)       -1100                         -620                          -50                           -40                           -20                           -20                           -20                           -190                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -270                          -10                           
  %483 = add nsw i32 %482, %47... (idx: 14)       -1100                         -620                          -50                           -40                           -20                           -20                           -20                           -190                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -270                          -10                           
  %485 = add nsw i32 %484, %48... (idx: 15)       -1100                         -620                          -50                           -40                           -20                           -20                           -20                           -190                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -270                          -10                           
  %487 = add nsw i32 %486, %48... (idx: 16)       -1100                         -620                          -50                           -40                           -20                           -20                           -20                           -190                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -270                          -10                           
  %489 = add nsw i32 %488, %48... (idx: 17)       -1100                         -620                          -50                           -40                           -20                           -20                           -20                           -190                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -270                          -10                           
  %491 = add nsw i32 %490, %48... (idx: 18)       -1100                         -620                          -50                           -40                           -20                           -20                           -20                           -190                          -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -270                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %wd4.0.i.i = add nsw i32 %43... (idx
  %443 = add nsw i32 %wd4.0.i.... (idx
  %apl1.0.i.i = add nsw i32 %4... (idx
  %461 = add nsw i32 %460, %45... (idx
  %463 = add nsw i32 %462, %45... (idx
  %465 = add nsw i32 %464, %46... (idx
  %467 = add nsw i32 %466, %46... (idx
  %469 = add nsw i32 %468, %46... (idx
  %471 = add nsw i32 %470, %46... (idx
  %473 = add nsw i32 %472, %46... (idx
  %475 = add nsw i32 %474, %47... (idx
  %477 = add nsw i32 %476, %47... (idx: 11)       0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             
  %479 = add nsw i32 %478, %47... (idx
  %481 = add nsw i32 %480, %47... (idx
  %483 = add nsw i32 %482, %47... (idx
  %485 = add nsw i32 %484, %48... (idx
  %487 = add nsw i32 %486, %48... (idx
  %489 = add nsw i32 %488, %48... (idx
  %491 = add nsw i32 %490, %48... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %wd4.0.i.i = add nsw i32 %43... (idx: 0) -> main_signed_add_32_0 (mux inputs: 112)
  %443 = add nsw i32 %wd4.0.i.... (idx: 1) -> main_signed_add_32_1 (mux inputs: 64)
  %apl1.0.i.i = add nsw i32 %4... (idx: 2) -> main_signed_add_32_2 (mux inputs: 7)
  %461 = add nsw i32 %460, %45... (idx: 3) -> main_signed_add_32_3 (mux inputs: 6)
  %463 = add nsw i32 %462, %45... (idx: 4) -> main_signed_add_32_4 (mux inputs: 4)
  %465 = add nsw i32 %464, %46... (idx: 5) -> main_signed_add_32_5 (mux inputs: 4)
  %467 = add nsw i32 %466, %46... (idx: 6) -> main_signed_add_32_6 (mux inputs: 4)
  %469 = add nsw i32 %468, %46... (idx: 7) -> main_signed_add_32_7 (mux inputs: 21)
  %471 = add nsw i32 %470, %46... (idx: 8) -> main_signed_add_32_8 (mux inputs: 2)
  %473 = add nsw i32 %472, %46... (idx: 9) -> main_signed_add_32_9 (mux inputs: 2)
  %475 = add nsw i32 %474, %47... (idx: 10) -> main_signed_add_32_10 (mux inputs: 2)
  %477 = add nsw i32 %476, %47... (idx: 11) -> main_signed_add_32_11 (mux inputs: 2)
  %479 = add nsw i32 %478, %47... (idx: 12) -> main_signed_add_32_12 (mux inputs: 2)
  %481 = add nsw i32 %480, %47... (idx: 13) -> main_signed_add_32_13 (mux inputs: 2)
  %483 = add nsw i32 %482, %47... (idx: 14) -> main_signed_add_32_14 (mux inputs: 2)
  %485 = add nsw i32 %484, %48... (idx: 15) -> main_signed_add_32_15 (mux inputs: 2)
  %487 = add nsw i32 %486, %48... (idx: 16) -> main_signed_add_32_16 (mux inputs: 2)
  %489 = add nsw i32 %488, %48... (idx: 17) -> main_signed_add_32_17 (mux inputs: 29)
  %491 = add nsw i32 %490, %48... (idx: 18) -> main_signed_add_32_18 (mux inputs: 2)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: result_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_result_local_mem_dual_port_0
  store i32 %504, i32* %506, a... (idx: 0)        90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_result_local_mem_dual_port_0
  store i32 %504, i32* %506, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %504, i32* %506, a... (idx: 0) -> main_result_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %493 = add nsw i32 %492, %48... can share an output register with another operation already assigned to main_signed_add_32_0
  %493 = add nsw i32 %492, %48... can share an output register with another operation already assigned to main_signed_add_32_1
  %493 = add nsw i32 %492, %48... can share an output register with another operation already assigned to main_signed_add_32_2
  %493 = add nsw i32 %492, %48... can share an output register with another operation already assigned to main_signed_add_32_3
  %493 = add nsw i32 %492, %48... can share an output register with another operation already assigned to main_signed_add_32_4
  %493 = add nsw i32 %492, %48... can share an output register with another operation already assigned to main_signed_add_32_5
  %493 = add nsw i32 %492, %48... can share an output register with another operation already assigned to main_signed_add_32_6
  %493 = add nsw i32 %492, %48... can share an output register with another operation already assigned to main_signed_add_32_7
  %493 = add nsw i32 %492, %48... can share an output register with another operation already assigned to main_signed_add_32_8
  %493 = add nsw i32 %492, %48... can share an output register with another operation already assigned to main_signed_add_32_9
  %493 = add nsw i32 %492, %48... can share an output register with another operation already assigned to main_signed_add_32_10
  %493 = add nsw i32 %492, %48... can share an output register with another operation already assigned to main_signed_add_32_11
  %493 = add nsw i32 %492, %48... can share an output register with another operation already assigned to main_signed_add_32_12
  %493 = add nsw i32 %492, %48... can share an output register with another operation already assigned to main_signed_add_32_13
  %493 = add nsw i32 %492, %48... can share an output register with another operation already assigned to main_signed_add_32_14
  %493 = add nsw i32 %492, %48... can share an output register with another operation already assigned to main_signed_add_32_15
  %493 = add nsw i32 %492, %48... can share an output register with another operation already assigned to main_signed_add_32_16
  %493 = add nsw i32 %492, %48... can share an output register with another operation already assigned to main_signed_add_32_17
  %495 = add nsw i32 %494, %49... can share an output register with another operation already assigned to main_signed_add_32_0
  %495 = add nsw i32 %494, %49... can share an output register with another operation already assigned to main_signed_add_32_1
  %495 = add nsw i32 %494, %49... can share an output register with another operation already assigned to main_signed_add_32_2
  %495 = add nsw i32 %494, %49... can share an output register with another operation already assigned to main_signed_add_32_3
  %495 = add nsw i32 %494, %49... can share an output register with another operation already assigned to main_signed_add_32_4
  %495 = add nsw i32 %494, %49... can share an output register with another operation already assigned to main_signed_add_32_5
  %495 = add nsw i32 %494, %49... can share an output register with another operation already assigned to main_signed_add_32_6
  %495 = add nsw i32 %494, %49... can share an output register with another operation already assigned to main_signed_add_32_7
  %495 = add nsw i32 %494, %49... can share an output register with another operation already assigned to main_signed_add_32_8
  %495 = add nsw i32 %494, %49... can share an output register with another operation already assigned to main_signed_add_32_9
  %495 = add nsw i32 %494, %49... can share an output register with another operation already assigned to main_signed_add_32_10
  %495 = add nsw i32 %494, %49... can share an output register with another operation already assigned to main_signed_add_32_11
  %495 = add nsw i32 %494, %49... can share an output register with another operation already assigned to main_signed_add_32_12
  %495 = add nsw i32 %494, %49... can share an output register with another operation already assigned to main_signed_add_32_13
  %495 = add nsw i32 %494, %49... can share an output register with another operation already assigned to main_signed_add_32_14
  %495 = add nsw i32 %494, %49... can share an output register with another operation already assigned to main_signed_add_32_15
  %495 = add nsw i32 %494, %49... can share an output register with another operation already assigned to main_signed_add_32_16
  %495 = add nsw i32 %494, %49... can share an output register with another operation already assigned to main_signed_add_32_17
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_0
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_1
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_2
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_3
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_4
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_5
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_6
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_7
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_8
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_9
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_10
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_11
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_12
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_13
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_14
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_15
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_16
  %497 = add nsw i32 %496, %49... can share an output register with another operation already assigned to main_signed_add_32_17
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_0
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_1
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_2
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_3
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_4
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_5
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_6
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_7
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_8
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_9
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_10
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_11
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_12
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_13
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_14
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_15
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_16
  %499 = add nsw i32 %498, %49... can share an output register with another operation already assigned to main_signed_add_32_17
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_0
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_1
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_2
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_3
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_4
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_5
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_6
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_7
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_8
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_9
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_10
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_11
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_12
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_13
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_14
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_15
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_16
  %501 = add nsw i32 %500, %49... can share an output register with another operation already assigned to main_signed_add_32_17
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_0
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_1
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_2
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_3
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_4
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_5
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_6
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_7
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_8
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_9
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_10
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_11
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_12
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_13
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_14
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_15
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_16
  %503 = add nsw i32 %502, %49... can share an output register with another operation already assigned to main_signed_add_32_17
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %493 = add nsw i32 %492, %48... (idx: 0)        -1120                         -640                          -70                           -60                           -40                           -40                           -40                           -210                          -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -290                          -30                           
  %495 = add nsw i32 %494, %49... (idx: 1)        -1120                         -640                          -70                           -60                           -40                           -40                           -40                           -210                          -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -290                          -30                           
  %497 = add nsw i32 %496, %49... (idx: 2)        -1120                         -640                          -70                           -60                           -40                           -40                           -40                           -210                          -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -290                          -30                           
  %499 = add nsw i32 %498, %49... (idx: 3)        -1120                         -640                          -70                           -60                           -40                           -40                           -40                           -210                          -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -290                          -30                           
  %501 = add nsw i32 %500, %49... (idx: 4)        -1120                         -640                          -70                           -60                           -40                           -40                           -40                           -210                          -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -290                          -30                           
  %503 = add nsw i32 %502, %49... (idx: 5)        -1120                         -640                          -70                           -60                           -40                           -40                           -40                           -210                          -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -290                          -30                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %493 = add nsw i32 %492, %48... (idx
  %495 = add nsw i32 %494, %49... (idx
  %497 = add nsw i32 %496, %49... (idx: 2)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             
  %499 = add nsw i32 %498, %49... (idx
  %501 = add nsw i32 %500, %49... (idx
  %503 = add nsw i32 %502, %49... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %493 = add nsw i32 %492, %48... (idx: 0) -> main_signed_add_32_0 (mux inputs: 114)
  %495 = add nsw i32 %494, %49... (idx: 1) -> main_signed_add_32_1 (mux inputs: 66)
  %501 = add nsw i32 %500, %49... (idx: 4) -> main_signed_add_32_2 (mux inputs: 9)
  %503 = add nsw i32 %502, %49... (idx: 5) -> main_signed_add_32_3 (mux inputs: 8)
  %499 = add nsw i32 %498, %49... (idx: 3) -> main_signed_add_32_7 (mux inputs: 23)
  %497 = add nsw i32 %496, %49... (idx: 2) -> main_signed_add_32_17 (mux inputs: 31)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %451 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_0
  %451 = sub nsw i32 15360, %.... can share an output register with another operation already assigned to main_signed_subtract_32_1
  %453 = sub nsw i32 0, %451 can share an output register with another operation already assigned to main_signed_subtract_32_0
  %453 = sub nsw i32 0, %451 can share an output register with another operation already assigned to main_signed_subtract_32_1
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %451 = sub nsw i32 15360, %.... (idx: 0)        -185                          -64                           
  %453 = sub nsw i32 0, %451 (idx: 1)             -185                          -65                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     main_signed_subtract_32_1     
  %451 = sub nsw i32 15360, %.... (idx: 0)        1                             0                             
  %453 = sub nsw i32 0, %451 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %451 = sub nsw i32 15360, %.... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 20)
  %453 = sub nsw i32 0, %451 (idx: 1) -> main_signed_subtract_32_1 (mux inputs: 8)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: result_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %505, i32* %508, a... can share an output register with another operation already assigned to main_result_local_mem_dual_port_0
                                                  main_result_local_mem_dual_port_0
  store i32 %505, i32* %508, a... (idx: 0)        80                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_result_local_mem_dual_port_0
  store i32 %505, i32* %508, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %505, i32* %508, a... (idx: 0) -> main_result_local_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB_adpcm_mainexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %517 = add nsw i32 %i.03, 1 (idx: 0)            -1145                         -665                          -94                           -84                           -44                           -45                           -44                           -234                          -23                           -23                           -23                           -23                           -23                           -23                           -23                           -23                           -23                           -314                          -24                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %517 = add nsw i32 %i.03, 1 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %517 = add nsw i32 %i.03, 1 (idx: 0) -> main_signed_add_32_0 (mux inputs: 115)
State: LEGUP_F_main_BB_adpcm_mainexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep63 = add i32 %gep_int61,... can share an output register with another operation already assigned to main_signed_add_32_18
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep66 = add i32 %gep_int64,... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep63 = add i32 %gep_int61,... (idx: 0)        -1150                         -660                          -90                           -80                           -40                           -40                           -40                           -230                          -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -310                          -20                           
  %gep66 = add i32 %gep_int64,... (idx: 1)        -1150                         -660                          -90                           -80                           -40                           -40                           -40                           -230                          -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -310                          -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep63 = add i32 %gep_int61,... (idx
  %gep66 = add i32 %gep_int64,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep63 = add i32 %gep_int61,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 117)
  %gep66 = add i32 %gep_int64,... (idx: 1) -> main_signed_add_32_1 (mux inputs: 68)
State: LEGUP_F_main_BB_adpcm_mainexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %.main_result.0 = add nsw i3... (idx: 0)        -1180                         -690                          -100                          -90                           -50                           -50                           -50                           -240                          -29                           -29                           -29                           -29                           -29                           -29                           -29                           -29                           -29                           -320                          -30                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %.main_result.0 = add nsw i3... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.main_result.0 = add nsw i3... (idx: 0) -> main_signed_add_32_0 (mux inputs: 119)
State: LEGUP_F_main_BB_preheader
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %524 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_0
  %524 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_1
  %524 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_2
  %524 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_3
  %524 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_4
  %524 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_5
  %524 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_6
  %524 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_7
  %524 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_8
  %524 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_9
  %524 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_10
  %524 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_11
  %524 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_12
  %524 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_13
  %524 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_14
  %524 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_15
  %524 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_16
  %524 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_17
  %524 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %524 = add nsw i32 %i.11, 1 (idx: 0)            -1185                         -675                          -84                           -74                           -34                           -35                           -34                           -224                          -13                           -13                           -13                           -13                           -13                           -13                           -13                           -13                           -13                           -304                          -14                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %524 = add nsw i32 %i.11, 1 (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %524 = add nsw i32 %i.11, 1 (idx: 0) -> main_signed_add_32_0 (mux inputs: 120)
State: LEGUP_F_main_BB_preheader
Binding functional unit type: result_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %519 = load i32* %518, align... can share an output register with another operation already assigned to main_result_local_mem_dual_port_0
                                                  main_result_local_mem_dual_port_0
  %519 = load i32* %518, align... (idx: 0)        65                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_result_local_mem_dual_port_0
  %519 = load i32* %518, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %519 = load i32* %518, align... (idx: 0) -> main_result_local_mem_dual_port_0 (mux inputs: 5)
State: LEGUP_F_main_BB_preheader
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep69 = add i32 %gep_int67,... can share an output register with another operation already assigned to main_signed_add_32_18
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_15
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_16
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_17
  %gep72 = add i32 %gep_int70,... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep69 = add i32 %gep_int67,... (idx: 0)        -1200                         -680                          -90                           -80                           -40                           -40                           -40                           -230                          -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -310                          -20                           
  %gep72 = add i32 %gep_int70,... (idx: 1)        -1200                         -680                          -90                           -80                           -40                           -40                           -40                           -230                          -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -310                          -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %gep69 = add i32 %gep_int67,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep72 = add i32 %gep_int70,... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep69 = add i32 %gep_int67,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 122)
  %gep72 = add i32 %gep_int70,... (idx: 1) -> main_signed_add_32_1 (mux inputs: 70)
State: LEGUP_F_main_BB_preheader
Binding functional unit type: test_result_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_test_result_local_mem_dual_port_0
  %521 = load i32* %520, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_test_result_local_mem_dual_port_0
  %521 = load i32* %520, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %521 = load i32* %520, align... (idx: 0) -> main_test_result_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_preheader
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_0
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_1
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_2
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_3
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_4
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_5
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_6
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_7
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_8
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_9
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_10
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_11
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_12
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_13
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_14
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_15
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_16
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_17
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_18
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %.main_result.2 = add nsw i3... (idx: 0)        -1220                         -700                          -90                           -80                           -40                           -40                           -40                           -230                          -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -20                           -310                          -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         main_signed_add_32_15         main_signed_add_32_16         main_signed_add_32_17         main_signed_add_32_18         
  %.main_result.2 = add nsw i3... (idx
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.main_result.2 = add nsw i3... (idx: 0) -> main_signed_add_32_0 (mux inputs: 124)

